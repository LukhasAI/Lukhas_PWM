"""
Core System - Auto-generated entity exports
Generated from entity activation scan
Total entities: 1649
"""

# Lazy imports to avoid circular dependencies
import importlib
import logging

logger = logging.getLogger(__name__)

# Entity registry for lazy loading
_ENTITY_REGISTRY = {
    "Actor": ("actor_model", "Actor"),
    "PingActor": ("actor_model", "PingActor"),
    "PongActor": ("actor_model", "PongActor"),
    "SupervisedActorSystem": ("actor_supervision_integration", "SupervisedActorSystem"),
    "ActorState": ("actor_system", "ActorState"),
    "SupervisionStrategy": ("actor_system", "SupervisionStrategy"),
    "ActorMessage": ("actor_system", "ActorMessage"),
    "ActorRef": ("actor_system", "ActorRef"),
    "Actor": ("actor_system", "Actor"),
    "ActorSystem": ("actor_system", "ActorSystem"),
    "AIAgentActor": ("actor_system", "AIAgentActor"),
    "TaskStatus": ("agent_coordination", "TaskStatus"),
    "SkillLevel": ("agent_coordination", "SkillLevel"),
    "Skill": ("agent_coordination", "Skill"),
    "TaskAnnouncement": ("agent_coordination", "TaskAnnouncement"),
    "SkillOffer": ("agent_coordination", "SkillOffer"),
    "WorkingGroup": ("agent_coordination", "WorkingGroup"),
    "CoordinationProtocol": ("agent_coordination", "CoordinationProtocol"),
    "SkillRegistry": ("agent_coordination", "SkillRegistry"),
    "CoordinationHub": ("agent_coordination", "CoordinationHub"),
    "AutonomousAgent": ("agent_coordination", "AutonomousAgent"),
    "DataProcessorAgent": ("agent_coordination", "DataProcessorAgent"),
    "AnalyticsAgent": ("agent_coordination", "AnalyticsAgent"),
    "MLModelAgent": ("agent_coordination", "MLModelAgent"),
    "AITask": ("ai.integration_manager", "AITask"),
    "AIResponse": ("ai.integration_manager", "AIResponse"),
    "AIIntegrationManager": ("ai.integration_manager", "AIIntegrationManager"),
    "TaskTemplates": ("ai.integration_manager", "TaskTemplates"),
    "AIOHTTPClientSessionPH": ("ai.integration_manager", "AIOHTTPClientSessionPH"),
    "MR": ("ai.integration_manager", "MR"),
    "LukhusAITaskType": ("ai_interface", "LukhusAITaskType"),
    "LukhusAI": ("ai_interface", "LukhusAI"),
    "APICall": ("api_diff_analyzer", "APICall"),
    "MethodSignature": ("api_diff_analyzer", "MethodSignature"),
    "APIMismatch": ("api_diff_analyzer", "APIMismatch"),
    "TestAPIExtractor": ("api_diff_analyzer", "TestAPIExtractor"),
    "ImplementationAnalyzer": ("api_diff_analyzer", "ImplementationAnalyzer"),
    "APIDiffAnalyzer": ("api_diff_analyzer", "APIDiffAnalyzer"),
    "DecisionAuditLevel": ("audit.audit_decision_embedding_engine", "DecisionAuditLevel"),
    "DecisionType": ("audit.audit_decision_embedding_engine", "DecisionType"),
    "DecisionStakeholder": ("audit.audit_decision_embedding_engine", "DecisionStakeholder"),
    "DecisionContext": ("audit.audit_decision_embedding_engine", "DecisionContext"),
    "DecisionOutcome": ("audit.audit_decision_embedding_engine", "DecisionOutcome"),
    "AuditTrailEntry": ("audit.audit_decision_embedding_engine", "AuditTrailEntry"),
    "DecisionAuditColony": ("audit.audit_decision_embedding_engine", "DecisionAuditColony"),
    "UniversalDecisionInterceptor": ("audit.audit_decision_embedding_engine", "UniversalDecisionInterceptor"),
    "DecisionAuditDecorator": ("audit.audit_decision_embedding_engine", "DecisionAuditDecorator"),
    "EventBusAuditIntegration": ("audit.audit_decision_embedding_engine", "EventBusAuditIntegration"),
    "TestOperation": ("automatic_testing_system", "TestOperation"),
    "TestSession": ("automatic_testing_system", "TestSession"),
    "PerformanceMonitor": ("automatic_testing_system", "PerformanceMonitor"),
    "AITestAnalyzer": ("automatic_testing_system", "AITestAnalyzer"),
    "AutomaticTestingSystem": ("automatic_testing_system", "AutomaticTestingSystem"),
    "BioSymbolicSwarmHub": ("bio_symbolic_swarm_hub", "BioSymbolicSwarmHub"),
    "BotMode": ("bot", "BotMode"),
    "TaskType": ("bot", "TaskType"),
    "ComponentType": ("bot", "ComponentType"),
    "UnifiedBot": ("bot", "UnifiedBot"),
    "BioSymbolicBridge": ("bridges.bio_symbolic_bridge", "BioSymbolicBridge"),
    "ConsciousnessQuantumBridge": ("bridges.consciousness_quantum_bridge", "ConsciousnessQuantumBridge"),
    "CoreConsciousnessBridge": ("bridges.core_consciousness_bridge", "CoreConsciousnessBridge"),
    "CoreSafetyBridge": ("bridges.core_safety_bridge", "CoreSafetyBridge"),
    "IdentityCoreBridge": ("bridges.identity_core_bridge", "IdentityCoreBridge"),
    "MemoryConsciousnessBridge": ("bridges.memory_consciousness_bridge", "MemoryConsciousnessBridge"),
    "MemoryLearningBridge": ("bridges.memory_learning_bridge", "MemoryLearningBridge"),
    "NIASDreamBridge": ("bridges.nias_dream_bridge", "NIASDreamBridge"),
    "OrchestrationCoreBridge": ("bridges.orchestration_core_bridge", "OrchestrationCoreBridge"),
    "QuantumMemoryBridge": ("bridges.quantum_memory_bridge", "QuantumMemoryBridge"),
    "CircuitState": ("circuit_breaker", "CircuitState"),
    "FailureType": ("circuit_breaker", "FailureType"),
    "FailureRecord": ("circuit_breaker", "FailureRecord"),
    "HealthCheck": ("circuit_breaker", "HealthCheck"),
    "AdvancedCircuitBreaker": ("circuit_breaker", "AdvancedCircuitBreaker"),
    "CircuitBreakerOpen": ("circuit_breaker", "CircuitBreakerOpen"),
    "AnomalyDetector": ("circuit_breaker", "AnomalyDetector"),
    "ErrorPropagationTracker": ("circuit_breaker", "ErrorPropagationTracker"),
    "ConsensusValidator": ("circuit_breaker", "ConsensusValidator"),
    "CascadePreventionSystem": ("circuit_breaker", "CascadePreventionSystem"),
    "ActorQuarantined": ("circuit_breaker", "ActorQuarantined"),
    "AnomalyDetected": ("circuit_breaker", "AnomalyDetected"),
    "TestActor": ("circuit_breaker", "TestActor"),
    "ShardManager": ("cluster_sharding", "ShardManager"),
    "ReactiveDataPipeline": ("collaboration", "ReactiveDataPipeline"),
    "DynamicTaskNegotiation": ("collaboration", "DynamicTaskNegotiation"),
    "SelfOrganizingSwarm": ("collaboration", "SelfOrganizingSwarm"),
    "ConsensusResult": ("colonies.base_colony", "ConsensusResult"),
    "BaseColony": ("colonies.base_colony", "BaseColony"),
    "CreativityColony": ("colonies.creativity_colony", "CreativityColony"),
    "EthicalDecisionType": ("colonies.ethics_swarm_colony", "EthicalDecisionType"),
    "SwarmConsensusMethod": ("colonies.ethics_swarm_colony", "SwarmConsensusMethod"),
    "EthicalDriftLevel": ("colonies.ethics_swarm_colony", "EthicalDriftLevel"),
    "EthicalAgent": ("colonies.ethics_swarm_colony", "EthicalAgent"),
    "EthicalScenario": ("colonies.ethics_swarm_colony", "EthicalScenario"),
    "SimulationResult": ("colonies.ethics_swarm_colony", "SimulationResult"),
    "EthicalDecisionRequest": ("colonies.ethics_swarm_colony", "EthicalDecisionRequest"),
    "EthicalDecisionResponse": ("colonies.ethics_swarm_colony", "EthicalDecisionResponse"),
    "EthicsSwarmColony": ("colonies.ethics_swarm_colony", "EthicsSwarmColony"),
    "MockCollapseTracker": ("colonies.ethics_swarm_colony", "MockCollapseTracker"),
    "MockVeriFoldConnector": ("colonies.ethics_swarm_colony", "MockVeriFoldConnector"),
    "MockDriftMonitor": ("colonies.ethics_swarm_colony", "MockDriftMonitor"),
    "BasicEthicalSimulator": ("colonies.ethics_swarm_colony", "BasicEthicalSimulator"),
    "EthicalSimulationEngine": ("colonies.ethics_swarm_colony", "EthicalSimulationEngine"),
    "GovernanceColony": ("colonies.governance_colony", "GovernanceColony"),
    "EthicsAgent": ("colonies.governance_colony_enhanced", "EthicsAgent"),
    "GovernanceColony": ("colonies.governance_colony_enhanced", "GovernanceColony"),
    "MemoryColony": ("colonies.memory_colony", "MemoryColony"),
    "MemoryAgent": ("colonies.memory_colony_enhanced", "MemoryAgent"),
    "MemoryColony": ("colonies.memory_colony_enhanced", "MemoryColony"),
    "OracleQuery": ("colonies.oracle_colony", "OracleQuery"),
    "OracleResponse": ("colonies.oracle_colony", "OracleResponse"),
    "OracleAgent": ("colonies.oracle_colony", "OracleAgent"),
    "OracleColony": ("colonies.oracle_colony", "OracleColony"),
    "ReasoningColony": ("colonies.reasoning_colony", "ReasoningColony"),
    "SymbolAwareTieredMemory": ("colonies.reasoning_colony", "SymbolAwareTieredMemory"),
    "SupervisorAgent": ("colonies.supervisor_agent", "SupervisorAgent"),
    "TemporalColony": ("colonies.temporal_colony", "TemporalColony"),
    "ComponentStatus": ("common", "ComponentStatus"),
    "MessageType": ("common", "MessageType"),
    "BaseComponent": ("common", "BaseComponent"),
    "BaseMessage": ("common", "BaseMessage"),
    "ComponentError": ("common", "ComponentError"),
    "ValidationError": ("common", "ValidationError"),
    "CommunicationError": ("common", "CommunicationError"),
    "LukhasConfig": ("config", "LukhasConfig"),
    "Config": ("config", "Config"),
    "Consistency": ("consistency_manager", "Consistency"),
    "ConsistencyManager": ("consistency_manager", "ConsistencyManager"),
    "ContractNetInitiator": ("coordination", "ContractNetInitiator"),
    "ContractNetParticipant": ("coordination", "ContractNetParticipant"),
    "CoreHub": ("core_hub", "CoreHub"),
    "LukhasCore": ("core_system", "LukhasCore"),
    "Actor": ("core_utilities", "Actor"),
    "QuorumOverride": ("core_utilities", "QuorumOverride"),
    "ReasoningColony": ("core_utilities", "ReasoningColony"),
    "MemoryColony": ("core_utilities", "MemoryColony"),
    "CreativityColony": ("core_utilities", "CreativityColony"),
    "Consistency": ("core_utilities", "Consistency"),
    "ConsistencyManager": ("core_utilities", "ConsistencyManager"),
    "IntegrityProbe": ("core_utilities", "IntegrityProbe"),
    "QuantizedCycleManager": ("core_utilities", "QuantizedCycleManager"),
    "ResourceEfficiencyAnalyzer": ("core_utilities", "ResourceEfficiencyAnalyzer"),
    "TierLevel": ("decorators", "TierLevel"),
    "PermissionScope": ("decorators", "PermissionScope"),
    "DirectAIRouter": ("direct_ai_router", "DirectAIRouter"),
    "TraceSpan": ("distributed_tracing", "TraceSpan"),
    "TraceContext": ("distributed_tracing", "TraceContext"),
    "TraceCollector": ("distributed_tracing", "TraceCollector"),
    "DistributedTracer": ("distributed_tracing", "DistributedTracer"),
    "AIAgentTracer": ("distributed_tracing", "AIAgentTracer"),
    "AgentState": ("distributed_tracing", "AgentState"),
    "StateSnapshotter": ("distributed_tracing", "StateSnapshotter"),
    "EventReplayer": ("distributed_tracing", "EventReplayer"),
    "MessagePriority": ("efficient_communication", "MessagePriority"),
    "CommunicationMode": ("efficient_communication", "CommunicationMode"),
    "Message": ("efficient_communication", "Message"),
    "MessageRouter": ("efficient_communication", "MessageRouter"),
    "EventBus": ("efficient_communication", "EventBus"),
    "P2PChannel": ("efficient_communication", "P2PChannel"),
    "EfficientCommunicationFabric": ("efficient_communication", "EfficientCommunicationFabric"),
    "EnergyMonitor": ("efficient_communication", "EnergyMonitor"),
    "EnergyComponent": ("energy_consumption_analysis", "EnergyComponent"),
    "EnergyProfile": ("energy_consumption_analysis", "EnergyProfile"),
    "EnergyMetric": ("energy_consumption_analysis", "EnergyMetric"),
    "EnergyBudget": ("energy_consumption_analysis", "EnergyBudget"),
    "EnergyModel": ("energy_consumption_analysis", "EnergyModel"),
    "EnergyConsumptionAnalyzer": ("energy_consumption_analysis", "EnergyConsumptionAnalyzer"),
    "EnergyAwareComponent": ("energy_consumption_analysis", "EnergyAwareComponent"),
    "AgentState": ("enhanced_swarm", "AgentState"),
    "MessageType": ("enhanced_swarm", "MessageType"),
    "AgentCapability": ("enhanced_swarm", "AgentCapability"),
    "AgentMemory": ("enhanced_swarm", "AgentMemory"),
    "EnhancedSwarmAgent": ("enhanced_swarm", "EnhancedSwarmAgent"),
    "EnhancedColony": ("enhanced_swarm", "EnhancedColony"),
    "EnhancedSwarmHub": ("enhanced_swarm", "EnhancedSwarmHub"),
    "EthicalAnnotation": ("ethics.dream_ethics_injector", "EthicalAnnotation"),
    "DreamEthicalAssessment": ("ethics.dream_ethics_injector", "DreamEthicalAssessment"),
    "DreamEthicsInjector": ("ethics.dream_ethics_injector", "DreamEthicsInjector"),
    "EthicsEngine": ("ethics.dream_ethics_injector", "EthicsEngine"),
    "EthicalPolicy": ("ethics.dream_ethics_injector", "EthicalPolicy"),
    "PolicyViolation": ("ethics.dream_ethics_injector", "PolicyViolation"),
    "DreamEventType": ("event_bus", "DreamEventType"),
    "Event": ("event_bus", "Event"),
    "EventBus": ("event_bus", "EventBus"),
    "EventType": ("event_replay_snapshot", "EventType"),
    "Event": ("event_replay_snapshot", "Event"),
    "ActorStateSnapshot": ("event_replay_snapshot", "ActorStateSnapshot"),
    "EventStore": ("event_replay_snapshot", "EventStore"),
    "SnapshotStore": ("event_replay_snapshot", "SnapshotStore"),
    "EventSourcedActor": ("event_replay_snapshot", "EventSourcedActor"),
    "ReplayController": ("event_replay_snapshot", "ReplayController"),
    "DemoActor": ("event_replay_snapshot", "DemoActor"),
    "EventReplayer": ("event_replayer", "EventReplayer"),
    "Event": ("event_sourcing", "Event"),
    "EventStore": ("event_sourcing", "EventStore"),
    "EventSourcedAggregate": ("event_sourcing", "EventSourcedAggregate"),
    "AIAgentAggregate": ("event_sourcing", "AIAgentAggregate"),
    "EventReplayService": ("event_sourcing", "EventReplayService"),
    "SequentialCounterActor": ("examples.mailbox_demo", "SequentialCounterActor"),
    "PriorityTaskActor": ("examples.mailbox_demo", "PriorityTaskActor"),
    "BackPressureActor": ("examples.mailbox_demo", "BackPressureActor"),
    "PersistentStateActor": ("examples.mailbox_demo", "PersistentStateActor"),
    "FallbackEthicsService": ("fallback_services", "FallbackEthicsService"),
    "FallbackMemoryService": ("fallback_services", "FallbackMemoryService"),
    "FallbackCreativityService": ("fallback_services", "FallbackCreativityService"),
    "FallbackConsciousnessService": ("fallback_services", "FallbackConsciousnessService"),
    "FallbackLearningService": ("fallback_services", "FallbackLearningService"),
    "FallbackQuantumService": ("fallback_services", "FallbackQuantumService"),
    "FallbackIdentityClient": ("fallback_services", "FallbackIdentityClient"),
    "SupervisionStrategy": ("fault_tolerance", "SupervisionStrategy"),
    "Supervisor": ("fault_tolerance", "Supervisor"),
    "GlobalSystemInitializer": ("global_initialization", "GlobalSystemInitializer"),
    "GovernanceLayer": ("governance", "GovernanceLayer"),
    "GovernanceColony": ("governance.governance_colony", "GovernanceColony"),
    "HubRegistry": ("hub_registry", "HubRegistry"),
    "AccessTier": ("id", "AccessTier"),
    "ComplianceRegion": ("id", "ComplianceRegion"),
    "EmotionalMemoryVector": ("id", "EmotionalMemoryVector"),
    "QuantumSignature": ("id", "QuantumSignature"),
    "AuditLogEntry": ("id", "AuditLogEntry"),
    "TraumaLockedMemory": ("id", "TraumaLockedMemory"),
    "ComplianceMonitor": ("id", "ComplianceMonitor"),
    "LukhosIDManager": ("id", "LukhosIDManager"),
    "IdentityEngine": ("identity.engine", "IdentityEngine"),
    "EmotionalMemoryVector": ("identity.manager", "EmotionalMemoryVector"),
    "SymbolicIdentityHash": ("identity.manager", "SymbolicIdentityHash"),
    "TraumaLock": ("identity.manager", "TraumaLock"),
    "AdvancedIdentityManager": ("identity.manager", "AdvancedIdentityManager"),
    "IdentityMapper": ("identity.mapper", "IdentityMapper"),
    "PersonaEngine": ("identity.persona_engine", "PersonaEngine"),
    "IdentityProcessor": ("identity.processor", "IdentityProcessor"),
    "IdentityAwareService": ("identity_aware_base", "IdentityAwareService"),
    "TieredOperationMixin": ("identity_aware_base", "TieredOperationMixin"),
    "ResourceLimitedService": ("identity_aware_base", "ResourceLimitedService"),
    "FallbackIdentityClient": ("identity_aware_base", "FallbackIdentityClient"),
    "IdentityValidationError": ("identity_aware_base_colony", "IdentityValidationError"),
    "TierAccessDeniedError": ("identity_aware_base_colony", "TierAccessDeniedError"),
    "QuantumSecurityError": ("identity_aware_base_colony", "QuantumSecurityError"),
    "IdentityAwareBaseColony": ("identity_aware_base_colony", "IdentityAwareBaseColony"),
    "DefaultIdentityAwareColony": ("identity_aware_base_colony", "DefaultIdentityAwareColony"),
    "TierMappingConfig": ("identity_integration", "TierMappingConfig"),
    "IdentityContext": ("identity_integration", "IdentityContext"),
    "ModuleIntegrationExamples": ("identity_integration", "ModuleIntegrationExamples"),
    "EventType": ("image_processing_pipeline", "EventType"),
    "ImageEvent": ("image_processing_pipeline", "ImageEvent"),
    "ProcessingStage": ("image_processing_pipeline", "ProcessingStage"),
    "ImageProcessingColony": ("image_processing_pipeline", "ImageProcessingColony"),
    "ColonySupervisor": ("image_processing_pipeline", "ColonySupervisor"),
    "ImageProcessingWorker": ("image_processing_pipeline", "ImageProcessingWorker"),
    "ValidationColony": ("image_processing_pipeline", "ValidationColony"),
    "PreprocessingColony": ("image_processing_pipeline", "PreprocessingColony"),
    "FeatureExtractionColony": ("image_processing_pipeline", "FeatureExtractionColony"),
    "ClassificationColony": ("image_processing_pipeline", "ClassificationColony"),
    "ThumbnailColony": ("image_processing_pipeline", "ThumbnailColony"),
    "AggregationColony": ("image_processing_pipeline", "AggregationColony"),
    "ImageProcessingPipeline": ("image_processing_pipeline", "ImageProcessingPipeline"),
    "EventBus": ("image_processing_pipeline", "EventBus"),
    "Node": ("infrastructure.base_node", "Node"),
    "IntentNode": ("infrastructure.node_collection", "IntentNode"),
    "MemoryNode": ("infrastructure.node_collection", "MemoryNode"),
    "EthicsNode": ("infrastructure.node_collection", "EthicsNode"),
    "GoalManagementNode": ("infrastructure.node_collection", "GoalManagementNode"),
    "DAOGovernanceNode": ("infrastructure.node_collection", "DAOGovernanceNode"),
    "NodeManager": ("infrastructure.node_manager", "NodeManager"),
    "NodeRegistry": ("infrastructure.node_registry", "NodeRegistry"),
    "MessageBus": ("infrastructure.node_registry", "MessageBus"),
    "SafetyEventType": ("integrated_safety_system", "SafetyEventType"),
    "SafetyLevel": ("integrated_safety_system", "SafetyLevel"),
    "SafetyEvent": ("integrated_safety_system", "SafetyEvent"),
    "SafetyValidationResult": ("integrated_safety_system", "SafetyValidationResult"),
    "SafetyEventBus": ("integrated_safety_system", "SafetyEventBus"),
    "SafetyColony": ("integrated_safety_system", "SafetyColony"),
    "IntegratedSafetySystem": ("integrated_safety_system", "IntegratedSafetySystem"),
    "DistributedAISystem": ("integrated_system", "DistributedAISystem"),
    "IntegrationConfig": ("integration_hub", "IntegrationConfig"),
    "IntegrationResult": ("integration_hub", "IntegrationResult"),
    "UnifiedIntegration": ("integration_hub", "UnifiedIntegration"),
    "DreamInjectionMode": ("integrations.nias_dream_bridge", "DreamInjectionMode"),
    "DreamMessage": ("integrations.nias_dream_bridge", "DreamMessage"),
    "NIASDreamBridge": ("integrations.nias_dream_bridge", "NIASDreamBridge"),
    "EnhancedCoreConfig": ("integrator", "EnhancedCoreConfig"),
    "CoreMessageType": ("integrator", "CoreMessageType"),
    "EnhancedCoreIntegrator": ("integrator", "EnhancedCoreIntegrator"),
    "QuantumBioOscillator": ("integrator", "QuantumBioOscillator"),
    "BioOrchestrator": ("integrator", "BioOrchestrator"),
    "AccessTier": ("integrator", "AccessTier"),
    "AccessController": ("integrator", "AccessController"),
    "QuantumAuthenticator": ("integrator", "QuantumAuthenticator"),
    "ComplianceMonitor": ("integrator", "ComplianceMonitor"),
    "UnifiedIntegration": ("integrator", "UnifiedIntegration"),
    "IntegrityProbe": ("integrity_probe", "IntegrityProbe"),
    "SymptomReporter": ("interaction.symptom_reporter", "SymptomReporter"),
    "DASTAggregator": ("interfaces.as_agent.sys.dast.aggregator", "DASTAggregator"),
    "PartnerSDK": ("interfaces.as_agent.sys.dast.partner_sdk", "PartnerSDK"),
    "DASTStore": ("interfaces.as_agent.sys.dast.store", "DASTStore"),
    "NIASDeliveryLoop": ("interfaces.as_agent.sys.nias.delivery_loop", "NIASDeliveryLoop"),
    "WidgetConfig": ("interfaces.as_agent.widgets.widget_config", "WidgetConfig"),
    "Config": ("interfaces.as_agent.widgets.widget_config", "Config"),
    "EthicsCheckable": ("interfaces.common_interfaces", "EthicsCheckable"),
    "DreamAnalyzable": ("interfaces.common_interfaces", "DreamAnalyzable"),
    "CustomLlm": ("interfaces.custom_llm", "CustomLlm"),
    "Config": ("interfaces.custom_llm", "Config"),
    "AdaptiveUI": ("interfaces.ui.adaptive.ui_orchestrator", "AdaptiveUI"),
    "SecurityError": ("interfaces.ui.components.audio_exporter", "SecurityError"),
    "Args": ("interfaces.ui.components.audio_exporter", "Args"),
    "NLPEngine": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "NLPEngine"),
    "LocationAnalyzer": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "LocationAnalyzer"),
    "TimeAnalyzer": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "TimeAnalyzer"),
    "DeviceAnalyzer": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "DeviceAnalyzer"),
    "ContextAnalyzer": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "ContextAnalyzer"),
    "VoiceModulator": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "VoiceModulator"),
    "MemoryManager": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "MemoryManager"),
    "ComplianceEngine": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "ComplianceEngine"),
    "SafetyGuard": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "SafetyGuard"),
    "LucasVoiceSystem": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "LucasVoiceSystem"),
    "ModuleIntrospector": ("introspection.introspector", "ModuleIntrospector"),
    "MessagePriority": ("mailbox", "MessagePriority"),
    "MailboxType": ("mailbox", "MailboxType"),
    "PrioritizedMessage": ("mailbox", "PrioritizedMessage"),
    "DeadLetterQueue": ("mailbox", "DeadLetterQueue"),
    "BackPressureStrategy": ("mailbox", "BackPressureStrategy"),
    "Mailbox": ("mailbox", "Mailbox"),
    "UnboundedMailbox": ("mailbox", "UnboundedMailbox"),
    "BoundedMailbox": ("mailbox", "BoundedMailbox"),
    "PriorityMailbox": ("mailbox", "PriorityMailbox"),
    "PersistentMailbox": ("mailbox", "PersistentMailbox"),
    "MailboxFactory": ("mailbox", "MailboxFactory"),
    "MailboxActor": ("mailbox", "MailboxActor"),
    "PriorityActor": ("mailbox", "PriorityActor"),
    "EnhancementMode": ("meta_learning.enhancement_system", "EnhancementMode"),
    "SystemIntegrationStatus": ("meta_learning.enhancement_system", "SystemIntegrationStatus"),
    "MetaLearningEnhancementSystem": ("meta_learning.enhancement_system", "MetaLearningEnhancementSystem"),
    "LearningMetrics": ("meta_learning.monitor_dashboard", "LearningMetrics"),
    "EthicalAuditEntry": ("meta_learning.monitor_dashboard", "EthicalAuditEntry"),
    "MetaLearningMonitorDashboard": ("meta_learning.monitor_dashboard", "MetaLearningMonitorDashboard"),
    "AdaptationStrategy": ("meta_learning.rate_modulator", "AdaptationStrategy"),
    "ConvergenceSignal": ("meta_learning.rate_modulator", "ConvergenceSignal"),
    "DynamicLearningRateModulator": ("meta_learning.rate_modulator", "DynamicLearningRateModulator"),
    "RemediationLevel": ("meta_learning.remediator_agent", "RemediationLevel"),
    "RemediationType": ("meta_learning.remediator_agent", "RemediationType"),
    "RemediationEvent": ("meta_learning.remediator_agent", "RemediationEvent"),
    "RemediatorAgent": ("meta_learning.remediator_agent", "RemediatorAgent"),
    "QuantumMemoryManager": ("meta_learning.remediator_agent", "QuantumMemoryManager"),
    "AdvancedMemoryManager": ("meta_learning.remediator_agent", "AdvancedMemoryManager"),
    "LucasReplayer": ("meta_learning.remediator_agent", "LucasReplayer"),
    "GlyphIDHasher": ("meta_learning.remediator_agent", "GlyphIDHasher"),
    "MetaLearningMonitorDashboard": ("meta_learning.remediator_agent", "MetaLearningMonitorDashboard"),
    "DynamicLearningRateModulator": ("meta_learning.remediator_agent", "DynamicLearningRateModulator"),
    "IntentNodeHistory": ("meta_learning.symbolic_feedback", "IntentNodeHistory"),
    "MemoriaSnapshot": ("meta_learning.symbolic_feedback", "MemoriaSnapshot"),
    "SymbolicFeedbackSystem": ("meta_learning.symbolic_feedback", "SymbolicFeedbackSystem"),
    "Actor": ("minimal_actor", "Actor"),
    "ModuleInfo": ("module_registry", "ModuleInfo"),
    "ModuleRegistry": ("module_registry", "ModuleRegistry"),
    "TierLevel": ("module_registry", "TierLevel"),
    "DreamRecorder": ("modules.nias.dream_recorder", "DreamRecorder"),
    "NIASHub": ("modules.nias.nias_hub", "NIASHub"),
    "ModalityType": ("modules.nias.openai_adapter", "ModalityType"),
    "MultimodalData": ("modules.nias.openai_adapter", "MultimodalData"),
    "NIASOpenAIAdapter": ("modules.nias.openai_adapter", "NIASOpenAIAdapter"),
    "CollapseIntegration": ("monitoring.collapse_integration", "CollapseIntegration"),
    "CollapseAlertLevel": ("monitoring.collapse_tracker", "CollapseAlertLevel"),
    "CollapseState": ("monitoring.collapse_tracker", "CollapseState"),
    "CollapseTracker": ("monitoring.collapse_tracker", "CollapseTracker"),
    "DriftType": ("monitoring.drift_monitor", "DriftType"),
    "InterventionType": ("monitoring.drift_monitor", "InterventionType"),
    "UnifiedDriftScore": ("monitoring.drift_monitor", "UnifiedDriftScore"),
    "DriftAlert": ("monitoring.drift_monitor", "DriftAlert"),
    "UnifiedDriftMonitor": ("monitoring.drift_monitor", "UnifiedDriftMonitor"),
    "AlertSeverity": ("monitoring_observability", "AlertSeverity"),
    "MetricType": ("monitoring_observability", "MetricType"),
    "DriftType": ("monitoring_observability", "DriftType"),
    "Alert": ("monitoring_observability", "Alert"),
    "MetricThreshold": ("monitoring_observability", "MetricThreshold"),
    "MonitoringConfig": ("monitoring_observability", "MonitoringConfig"),
    "DistributedTracer": ("monitoring_observability", "DistributedTracer"),
    "ModelDriftDetector": ("monitoring_observability", "ModelDriftDetector"),
    "AlertManager": ("monitoring_observability", "AlertManager"),
    "PerformanceProfiler": ("monitoring_observability", "PerformanceProfiler"),
    "ObservabilitySystem": ("monitoring_observability", "ObservabilitySystem"),
    "QuantumBioCapabilityLevel": ("neural_architectures.abas.abas_quantum_specialist", "QuantumBioCapabilityLevel"),
    "QuantumBioResponse": ("neural_architectures.abas.abas_quantum_specialist", "QuantumBioResponse"),
    "QuantumTunnelingEthics": ("neural_architectures.abas.abas_quantum_specialist", "QuantumTunnelingEthics"),
    "ProtonMotiveProcessor": ("neural_architectures.abas.abas_quantum_specialist", "ProtonMotiveProcessor"),
    "CristaeTopologyManager": ("neural_architectures.abas.abas_quantum_specialist", "CristaeTopologyManager"),
    "QuantumBiologicalAGI": ("neural_architectures.abas.abas_quantum_specialist", "QuantumBiologicalAGI"),
    "NeuralMode": ("neural_architectures.neural_integrator", "NeuralMode"),
    "NeuralArchitectureType": ("neural_architectures.neural_integrator", "NeuralArchitectureType"),
    "NeuralPattern": ("neural_architectures.neural_integrator", "NeuralPattern"),
    "NeuralContext": ("neural_architectures.neural_integrator", "NeuralContext"),
    "AdaptiveNeuralNetwork": ("neural_architectures.neural_integrator", "AdaptiveNeuralNetwork"),
    "NeuralIntegrator": ("neural_architectures.neural_integrator", "NeuralIntegrator"),
    "LambdaLoggerAdapter": ("notion_sync", "LambdaLoggerAdapter"),
    "ActorMetric": ("observability.collector", "ActorMetric"),
    "ObservabilityCollector": ("observability.collector", "ObservabilityCollector"),
    "ObservabilityLevel": ("observability_steering", "ObservabilityLevel"),
    "SystemHealth": ("observability_steering", "SystemHealth"),
    "ActorSnapshot": ("observability_steering", "ActorSnapshot"),
    "MessageFlow": ("observability_steering", "MessageFlow"),
    "EmergentPattern": ("observability_steering", "EmergentPattern"),
    "ObservabilityCollector": ("observability_steering", "ObservabilityCollector"),
    "SteeringController": ("observability_steering", "SteeringController"),
    "ObservableActor": ("observability_steering", "ObservableActor"),
    "ObservabilityDashboard": ("observability_steering", "ObservabilityDashboard"),
    "ObservableAgent": ("observability_steering", "ObservableAgent"),
    "Observatory": ("observatory", "Observatory"),
    "OracleCapabilityType": ("oracle_nervous_system", "OracleCapabilityType"),
    "OracleIntegrationLevel": ("oracle_nervous_system", "OracleIntegrationLevel"),
    "OracleCapability": ("oracle_nervous_system", "OracleCapability"),
    "NervousSystemRequest": ("oracle_nervous_system", "NervousSystemRequest"),
    "NervousSystemResponse": ("oracle_nervous_system", "NervousSystemResponse"),
    "OracleNervousSystem": ("oracle_nervous_system", "OracleNervousSystem"),
    "EnergyProfile": ("orchestration.energy_aware_execution_planner", "EnergyProfile"),
    "Priority": ("orchestration.energy_aware_execution_planner", "Priority"),
    "EnergyTask": ("orchestration.energy_aware_execution_planner", "EnergyTask"),
    "EnergyBudget": ("orchestration.energy_aware_execution_planner", "EnergyBudget"),
    "EnergyMetrics": ("orchestration.energy_aware_execution_planner", "EnergyMetrics"),
    "EnergyAwareExecutionPlanner": ("orchestration.energy_aware_execution_planner", "EnergyAwareExecutionPlanner"),
    "PeerStatus": ("p2p_communication", "PeerStatus"),
    "MessageType": ("p2p_communication", "MessageType"),
    "PeerInfo": ("p2p_communication", "PeerInfo"),
    "P2PMessage": ("p2p_communication", "P2PMessage"),
    "P2PNode": ("p2p_communication", "P2PNode"),
    "P2PNode": ("p2p_fabric", "P2PNode"),
    "IdentityClient": ("performance.orchestrator", "IdentityClient"),
    "OptimizationStrategy": ("performance.orchestrator", "OptimizationStrategy"),
    "PerformanceStatus": ("performance.orchestrator", "PerformanceStatus"),
    "PerformanceMetrics": ("performance.orchestrator", "PerformanceMetrics"),
    "OptimizationResult": ("performance.orchestrator", "OptimizationResult"),
    "PerformanceOrchestrator": ("performance.orchestrator", "PerformanceOrchestrator"),
    "NeuroHaikuGenerator": ("personality.creative_expressions", "NeuroHaikuGenerator"),
    "LucasAGI": ("personality.creative_personality", "LucasAGI"),
    "MetaLearningSystem": ("personality.creative_personality", "MetaLearningSystem"),
    "FederatedLearningManager": ("personality.creative_personality", "FederatedLearningManager"),
    "ReflectiveIntrospectionSystem": ("personality.creative_personality", "ReflectiveIntrospectionSystem"),
    "NeuroHaikuGenerator": ("personality.creative_personality", "NeuroHaikuGenerator"),
    "MetaDoodler": ("personality.creative_personality", "MetaDoodler"),
    "EthicalProtestModule": ("personality.creative_personality", "EthicalProtestModule"),
    "KnowledgeGraph": ("personality.creative_personality", "KnowledgeGraph"),
    "HarmonyEngine": ("personality.creative_personality", "HarmonyEngine"),
    "LucasAGI": ("personality.creative_personality_clean", "LucasAGI"),
    "MetaLearningSystem": ("personality.creative_personality_clean", "MetaLearningSystem"),
    "FederatedLearningManager": ("personality.creative_personality_clean", "FederatedLearningManager"),
    "ReflectiveIntrospectionSystem": ("personality.creative_personality_clean", "ReflectiveIntrospectionSystem"),
    "NeuroHaikuGenerator": ("personality.creative_personality_clean", "NeuroHaikuGenerator"),
    "MetaDoodler": ("personality.creative_personality_clean", "MetaDoodler"),
    "EthicalProtestModule": ("personality.creative_personality_clean", "EthicalProtestModule"),
    "KnowledgeGraph": ("personality.creative_personality_clean", "KnowledgeGraph"),
    "HarmonyEngine": ("personality.creative_personality_clean", "HarmonyEngine"),
    "InteractionContext": ("personality.personality", "InteractionContext"),
    "CulturalStyle": ("personality.personality", "CulturalStyle"),
    "InteractionMetrics": ("personality.personality", "InteractionMetrics"),
    "ShynessModule": ("personality.personality", "ShynessModule"),
    "EtiquetteEngine": ("personality.personality", "EtiquetteEngine"),
    "PersonalityManager": ("personality.personality", "PersonalityManager"),
    "PluginType": ("plugin_registry", "PluginType"),
    "Plugin": ("plugin_registry", "Plugin"),
    "PluginRegistry": ("plugin_registry", "PluginRegistry"),
    "OptimizationStrategy": ("practical_optimizations", "OptimizationStrategy"),
    "CacheEntry": ("practical_optimizations", "CacheEntry"),
    "AdaptiveCache": ("practical_optimizations", "AdaptiveCache"),
    "ObjectPool": ("practical_optimizations", "ObjectPool"),
    "LazyComputation": ("practical_optimizations", "LazyComputation"),
    "DeferredComputation": ("practical_optimizations", "DeferredComputation"),
    "BatchProcessor": ("practical_optimizations", "BatchProcessor"),
    "MemoryMappedStorage": ("practical_optimizations", "MemoryMappedStorage"),
    "ComputationReuse": ("practical_optimizations", "ComputationReuse"),
    "ResourceManager": ("practical_optimizations", "ResourceManager"),
    "ExpensiveObject": ("practical_optimizations", "ExpensiveObject"),
    "QuantizedCycleManager": ("quantized_cycle_manager", "QuantizedCycleManager"),
    "CyclePhase": ("quantized_thought_cycles", "CyclePhase"),
    "CycleState": ("quantized_thought_cycles", "CycleState"),
    "ThoughtQuantum": ("quantized_thought_cycles", "ThoughtQuantum"),
    "CycleMetrics": ("quantized_thought_cycles", "CycleMetrics"),
    "QuantizedThoughtProcessor": ("quantized_thought_cycles", "QuantizedThoughtProcessor"),
    "QuantumSecurityLevel": ("quantum_identity_manager", "QuantumSecurityLevel"),
    "AGIIdentityType": ("quantum_identity_manager", "AGIIdentityType"),
    "QuantumTierLevel": ("quantum_identity_manager", "QuantumTierLevel"),
    "QuantumUserContext": ("quantum_identity_manager", "QuantumUserContext"),
    "QuantumIdentityManager": ("quantum_identity_manager", "QuantumIdentityManager"),
    "QuorumOverride": ("quorum_override", "QuorumOverride"),
    "ResourceEfficiencyAnalyzer": ("resource_efficiency", "ResourceEfficiencyAnalyzer"),
    "ResourceType": ("resource_efficiency_analyzer", "ResourceType"),
    "ResourceSnapshot": ("resource_efficiency_analyzer", "ResourceSnapshot"),
    "ResourceTrend": ("resource_efficiency_analyzer", "ResourceTrend"),
    "EfficiencyReport": ("resource_efficiency_analyzer", "EfficiencyReport"),
    "ResourceEfficiencyAnalyzer": ("resource_efficiency_analyzer", "ResourceEfficiencyAnalyzer"),
    "SwarmResourceScheduler": ("resource_scheduler", "SwarmResourceScheduler"),
    "AttackVector": ("safety.adversarial_testing", "AttackVector"),
    "AdversarialTest": ("safety.adversarial_testing", "AdversarialTest"),
    "TestResult": ("safety.adversarial_testing", "TestResult"),
    "AdversarialSafetyTester": ("safety.adversarial_testing", "AdversarialSafetyTester"),
    "SafetyMode": ("safety.ai_safety_orchestrator", "SafetyMode"),
    "SafetyDecision": ("safety.ai_safety_orchestrator", "SafetyDecision"),
    "AISafetyOrchestrator": ("safety.ai_safety_orchestrator", "AISafetyOrchestrator"),
    "SafetyViolationType": ("safety.constitutional_safety", "SafetyViolationType"),
    "SafetyPrinciple": ("safety.constitutional_safety", "SafetyPrinciple"),
    "SafetyEvaluation": ("safety.constitutional_safety", "SafetyEvaluation"),
    "NIASConstitutionalSafety": ("safety.constitutional_safety", "NIASConstitutionalSafety"),
    "AgentRole": ("safety.multi_agent_consensus", "AgentRole"),
    "AgentVote": ("safety.multi_agent_consensus", "AgentVote"),
    "ConsensusResult": ("safety.multi_agent_consensus", "ConsensusResult"),
    "SafetyAgent": ("safety.multi_agent_consensus", "SafetyAgent"),
    "MultiAgentSafetyConsensus": ("safety.multi_agent_consensus", "MultiAgentSafetyConsensus"),
    "HarmType": ("safety.predictive_harm_prevention", "HarmType"),
    "HarmPrediction": ("safety.predictive_harm_prevention", "HarmPrediction"),
    "PreventiveIntervention": ("safety.predictive_harm_prevention", "PreventiveIntervention"),
    "SimulatedFuture": ("safety.predictive_harm_prevention", "SimulatedFuture"),
    "PredictiveHarmPrevention": ("safety.predictive_harm_prevention", "PredictiveHarmPrevention"),
    "SafetyHub": ("safety.safety_hub", "SafetyHub"),
    "ServiceDiscovery": ("service_discovery", "ServiceDiscovery"),
    "GeofenceRegion": ("services.location.geofencing_manager", "GeofenceRegion"),
    "GeofencingManager": ("services.location.geofencing_manager", "GeofencingManager"),
    "LocationUpdate": ("services.location.tracker", "LocationUpdate"),
    "LocationTracker": ("services.location.tracker", "LocationTracker"),
    "ReasoningColony": ("specialized_colonies", "ReasoningColony"),
    "MemoryColony": ("specialized_colonies", "MemoryColony"),
    "CreativityColony": ("specialized_colonies", "CreativityColony"),
    "ComponentInfo": ("spine.integration_orchestrator", "ComponentInfo"),
    "IntegrationPlan": ("spine.integration_orchestrator", "IntegrationPlan"),
    "LukhasIntegrationOrchestrator": ("spine.integration_orchestrator", "LukhasIntegrationOrchestrator"),
    "StateManager": ("state_management", "StateManager"),
    "SupervisionDirective": ("supervision", "SupervisionDirective"),
    "RestartPolicy": ("supervision", "RestartPolicy"),
    "FailureInfo": ("supervision", "FailureInfo"),
    "SupervisionStrategy": ("supervision", "SupervisionStrategy"),
    "SupervisionDecider": ("supervision", "SupervisionDecider"),
    "DefaultSupervisionDecider": ("supervision", "DefaultSupervisionDecider"),
    "AllForOneStrategy": ("supervision", "AllForOneStrategy"),
    "OneForOneStrategy": ("supervision", "OneForOneStrategy"),
    "RestForOneStrategy": ("supervision", "RestForOneStrategy"),
    "CircuitBreaker": ("supervision", "CircuitBreaker"),
    "SupervisorActor": ("supervision", "SupervisorActor"),
    "RootSupervisor": ("supervision", "RootSupervisor"),
    "DepartmentSupervisor": ("supervision", "DepartmentSupervisor"),
    "ResourceState": ("swarm", "ResourceState"),
    "SwarmAgent": ("swarm", "SwarmAgent"),
    "AgentColony": ("swarm", "AgentColony"),
    "SwarmHub": ("swarm", "SwarmHub"),
    "SwarmSyncState": ("swarm_identity_orchestrator", "SwarmSyncState"),
    "SwarmIdentityState": ("swarm_identity_orchestrator", "SwarmIdentityState"),
    "CrossSwarmOperation": ("swarm_identity_orchestrator", "CrossSwarmOperation"),
    "SwarmIdentityOrchestrator": ("swarm_identity_orchestrator", "SwarmIdentityOrchestrator"),
    "TagConflictResolver": ("symbolic_arbitration", "TagConflictResolver"),
    "TagLineageTracker": ("symbolic_arbitration", "TagLineageTracker"),
    "SymbolicBootstrap": ("symbolic_boot", "SymbolicBootstrap"),
    "SymbolicBridgeIntegrator": ("symbolic_bridge.integrator", "SymbolicBridgeIntegrator"),
    "BridgeTokenMap": ("symbolic_bridge.token_map", "BridgeTokenMap"),
    "SymbolicContract": ("symbolic_contract", "SymbolicContract"),
    "SymbolicContractRegistry": ("symbolic_contract", "SymbolicContractRegistry"),
    "TraceRepairEngine": ("symbolic_diagnostics.trace_repair_engine", "TraceRepairEngine"),
    "DriftAlertLevel": ("symbolic_drift_analyzer", "DriftAlertLevel"),
    "PatternTrend": ("symbolic_drift_analyzer", "PatternTrend"),
    "EntropyMetrics": ("symbolic_drift_analyzer", "EntropyMetrics"),
    "TagVarianceMetrics": ("symbolic_drift_analyzer", "TagVarianceMetrics"),
    "DriftAlert": ("symbolic_drift_analyzer", "DriftAlert"),
    "SymbolicDriftAnalyzer": ("symbolic_drift_analyzer", "SymbolicDriftAnalyzer"),
    "SymbolicTrace": ("symbolic_reasoning.symbolic_trace", "SymbolicTrace"),
    "SymbolicShellArchiver": ("symbolism.archiver", "SymbolicShellArchiver"),
    "MethylationModel": ("symbolism.methylation_model", "MethylationModel"),
    "TagScope": ("symbolism.tags", "TagScope"),
    "TagPermission": ("symbolism.tags", "TagPermission"),
    "TaskStatus": ("task_manager", "TaskStatus"),
    "TaskPriority": ("task_manager", "TaskPriority"),
    "Task": ("task_manager", "Task"),
    "TaskQueue": ("task_manager", "TaskQueue"),
    "Agent": ("task_manager", "Agent"),
    "LukhλsTaskManager": ("task_manager", "LukhλsTaskManager"),
    "ProxyInitializationError": ("tier_aware_colony_proxy", "ProxyInitializationError"),
    "ColonyNotFoundError": ("tier_aware_colony_proxy", "ColonyNotFoundError"),
    "TierAwareColonyProxy": ("tier_aware_colony_proxy", "TierAwareColonyProxy"),
    "ColonyProxyManager": ("tier_aware_colony_proxy", "ColonyProxyManager"),
    "TierSystemAdapter": ("tier_unification_adapter", "TierSystemAdapter"),
    "OneiricTierAdapter": ("tier_unification_adapter", "OneiricTierAdapter"),
    "EmotionalTierAdapter": ("tier_unification_adapter", "EmotionalTierAdapter"),
    "UnifiedTierAdapter": ("tier_unification_adapter", "UnifiedTierAdapter"),
    "StateType": ("tiered_state_management", "StateType"),
    "ConsistencyLevel": ("tiered_state_management", "ConsistencyLevel"),
    "StateSnapshot": ("tiered_state_management", "StateSnapshot"),
    "StateAggregator": ("tiered_state_management", "StateAggregator"),
    "DefaultStateAggregator": ("tiered_state_management", "DefaultStateAggregator"),
    "TieredStateManager": ("tiered_state_management", "TieredStateManager"),
    "StateCoordinator": ("tiered_state_management", "StateCoordinator"),
    "CounterAggregator": ("tiered_state_management", "CounterAggregator"),
    "MetricsAggregator": ("tiered_state_management", "MetricsAggregator"),
    "Event": ("tiered_state_management", "Event"),
    "TextHandler": ("user_interface_manager.text_handler", "TextHandler"),
    "VoiceHandler": ("user_interface_manager.voice_handler", "VoiceHandler"),
    "VeriFoldCollapseType": ("verifold.verifold_unified", "VeriFoldCollapseType"),
    "VeriFoldPhase": ("verifold.verifold_unified", "VeriFoldPhase"),
    "VeriFoldSnapshot": ("verifold.verifold_unified", "VeriFoldSnapshot"),
    "VeriFoldRecord": ("verifold.verifold_unified", "VeriFoldRecord"),
    "UnifiedVeriFoldSystem": ("verifold.verifold_unified", "UnifiedVeriFoldSystem"),
}

# Function registry
_FUNCTION_REGISTRY = {
    "receive": ("actor_model", "receive"),
    "send": ("actor_model", "send"),
    "receive": ("actor_model", "receive"),
    "receive": ("actor_model", "receive"),
    "patch_actor_system_for_supervision": ("actor_supervision_integration", "patch_actor_system_for_supervision"),
    "patch_actor_for_supervision": ("actor_supervision_integration", "patch_actor_for_supervision"),
    "new_init": ("actor_supervision_integration", "new_init"),
    "to_dict": ("actor_system", "to_dict"),
    "register_handler": ("actor_system", "register_handler"),
    "become": ("actor_system", "become"),
    "supervision_strategy": ("actor_system", "supervision_strategy"),
    "get_stats": ("actor_system", "get_stats"),
    "get_actor_ref": ("actor_system", "get_actor_ref"),
    "get_actor": ("actor_system", "get_actor"),
    "register_response_handler": ("actor_system", "register_response_handler"),
    "unregister_response_handler": ("actor_system", "unregister_response_handler"),
    "handle_response": ("actor_system", "handle_response"),
    "get_system_stats": ("actor_system", "get_system_stats"),
    "actorref_to_dict": ("agent_coordination", "actorref_to_dict"),
    "actorref_from_dict": ("agent_coordination", "actorref_from_dict"),
    "update_metrics": ("agent_coordination", "update_metrics"),
    "is_expired": ("agent_coordination", "is_expired"),
    "add_member": ("agent_coordination", "add_member"),
    "all_skills_covered": ("agent_coordination", "all_skills_covered"),
    "get_ref": ("agent_coordination", "get_ref"),
    "lukhas_tier_required": ("ai.integration_manager", "lukhas_tier_required"),
    "decorator": ("ai.integration_manager", "decorator"),
    "use_github_copilot_cli": ("ai.integration_manager", "use_github_copilot_cli"),
    "code_analysis": ("ai.integration_manager", "code_analysis"),
    "ai_code": ("ai_interface", "ai_code"),
    "ai_audit": ("ai_interface", "ai_audit"),
    "ai_docs": ("ai_interface", "ai_docs"),
    "ai_chat": ("ai_interface", "ai_chat"),
    "ai_research": ("ai_interface", "ai_research"),
    "generate_response": ("ai_interface", "generate_response"),
    "code_assistance": ("ai_interface", "code_assistance"),
    "security_audit": ("ai_interface", "security_audit"),
    "web_research": ("ai_interface", "web_research"),
    "documentation_assist": ("ai_interface", "documentation_assist"),
    "creative_generation": ("ai_interface", "creative_generation"),
    "analysis": ("ai_interface", "analysis"),
    "chat": ("ai_interface", "chat"),
    "main": ("api_diff_analyzer", "main"),
    "extract_calls": ("api_diff_analyzer", "extract_calls"),
    "visit_Call": ("api_diff_analyzer", "visit_Call"),
    "visit_Attribute": ("api_diff_analyzer", "visit_Attribute"),
    "extract_signatures": ("api_diff_analyzer", "extract_signatures"),
    "visit_ClassDef": ("api_diff_analyzer", "visit_ClassDef"),
    "visit_FunctionDef": ("api_diff_analyzer", "visit_FunctionDef"),
    "visit_AsyncFunctionDef": ("api_diff_analyzer", "visit_AsyncFunctionDef"),
    "analyze": ("api_diff_analyzer", "analyze"),
    "apply_fixes": ("apply_api_fixes", "apply_fixes"),
    "sync_wrapper": ("audit.audit_decision_embedding_engine", "sync_wrapper"),
    "stop": ("automatic_testing_system", "stop"),
    "capture_metrics": ("automatic_testing_system", "capture_metrics"),
    "get_performance_summary": ("automatic_testing_system", "get_performance_summary"),
    "analyze_operation": ("automatic_testing_system", "analyze_operation"),
    "analyze_session": ("automatic_testing_system", "analyze_session"),
    "stop_watching": ("automatic_testing_system", "stop_watching"),
    "bench_behavior": ("benchmark_swarm", "bench_behavior"),
    "event_to_actor_bridge": ("benchmark_swarm", "event_to_actor_bridge"),
    "handle_event": ("benchmark_swarm", "handle_event"),
    "create_bio_colony": ("bio_symbolic_swarm_hub", "create_bio_colony"),
    "create_oracle_colony": ("bio_symbolic_swarm_hub", "create_oracle_colony"),
    "create_bot": ("bot", "create_bot"),
    "create_auditor": ("bot", "create_auditor"),
    "create_doc_generator": ("bot", "create_doc_generator"),
    "create_web_manager": ("bot", "create_web_manager"),
    "create_agent": ("bot", "create_agent"),
    "process_task": ("bot", "process_task"),
    "run_component_task": ("bot", "run_component_task"),
    "get_bio_symbolic_bridge": ("bridges.bio_symbolic_bridge", "get_bio_symbolic_bridge"),
    "setup_event_mappings": ("bridges.bio_symbolic_bridge", "setup_event_mappings"),
    "transform_data_bio_to_symbolic": ("bridges.bio_symbolic_bridge", "transform_data_bio_to_symbolic"),
    "transform_data_symbolic_to_bio": ("bridges.bio_symbolic_bridge", "transform_data_symbolic_to_bio"),
    "get_consciousness_quantum_bridge": ("bridges.consciousness_quantum_bridge", "get_consciousness_quantum_bridge"),
    "setup_event_mappings": ("bridges.consciousness_quantum_bridge", "setup_event_mappings"),
    "transform_data_consciousness_to_quantum": ("bridges.consciousness_quantum_bridge", "transform_data_consciousness_to_quantum"),
    "transform_data_quantum_to_consciousness": ("bridges.consciousness_quantum_bridge", "transform_data_quantum_to_consciousness"),
    "compare_states": ("bridges.consciousness_quantum_bridge", "compare_states"),
    "get_core_safety_bridge": ("bridges.core_safety_bridge", "get_core_safety_bridge"),
    "setup_event_mappings": ("bridges.core_safety_bridge", "setup_event_mappings"),
    "transform_data_core_to_safety": ("bridges.core_safety_bridge", "transform_data_core_to_safety"),
    "transform_data_safety_to_core": ("bridges.core_safety_bridge", "transform_data_safety_to_core"),
    "compare_states": ("bridges.core_safety_bridge", "compare_states"),
    "get_identity_core_bridge": ("bridges.identity_core_bridge", "get_identity_core_bridge"),
    "setup_event_mappings": ("bridges.identity_core_bridge", "setup_event_mappings"),
    "transform_data_identity_to_core": ("bridges.identity_core_bridge", "transform_data_identity_to_core"),
    "transform_data_core_to_identity": ("bridges.identity_core_bridge", "transform_data_core_to_identity"),
    "compare_states": ("bridges.identity_core_bridge", "compare_states"),
    "get_memory_consciousness_bridge": ("bridges.memory_consciousness_bridge", "get_memory_consciousness_bridge"),
    "setup_event_mappings": ("bridges.memory_consciousness_bridge", "setup_event_mappings"),
    "transform_memory_to_consciousness": ("bridges.memory_consciousness_bridge", "transform_memory_to_consciousness"),
    "transform_consciousness_to_memory": ("bridges.memory_consciousness_bridge", "transform_consciousness_to_memory"),
    "get_memory_learning_bridge": ("bridges.memory_learning_bridge", "get_memory_learning_bridge"),
    "setup_event_mappings": ("bridges.memory_learning_bridge", "setup_event_mappings"),
    "transform_data_memory_to_learning": ("bridges.memory_learning_bridge", "transform_data_memory_to_learning"),
    "transform_data_learning_to_memory": ("bridges.memory_learning_bridge", "transform_data_learning_to_memory"),
    "get_nias_dream_bridge": ("bridges.nias_dream_bridge", "get_nias_dream_bridge"),
    "setup_event_mappings": ("bridges.nias_dream_bridge", "setup_event_mappings"),
    "transform_data_nias_to_dream": ("bridges.nias_dream_bridge", "transform_data_nias_to_dream"),
    "transform_data_dream_to_nias": ("bridges.nias_dream_bridge", "transform_data_dream_to_nias"),
    "get_orchestration_core_bridge": ("bridges.orchestration_core_bridge", "get_orchestration_core_bridge"),
    "setup_event_mappings": ("bridges.orchestration_core_bridge", "setup_event_mappings"),
    "transform_data_orchestration_to_core": ("bridges.orchestration_core_bridge", "transform_data_orchestration_to_core"),
    "transform_data_core_to_orchestration": ("bridges.orchestration_core_bridge", "transform_data_core_to_orchestration"),
    "compare_states": ("bridges.orchestration_core_bridge", "compare_states"),
    "get_quantum_memory_bridge": ("bridges.quantum_memory_bridge", "get_quantum_memory_bridge"),
    "setup_event_mappings": ("bridges.quantum_memory_bridge", "setup_event_mappings"),
    "transform_quantum_to_memory": ("bridges.quantum_memory_bridge", "transform_quantum_to_memory"),
    "transform_memory_to_quantum": ("bridges.quantum_memory_bridge", "transform_memory_to_quantum"),
    "call": ("circuit_breaker", "call"),
    "force_open": ("circuit_breaker", "force_open"),
    "force_close": ("circuit_breaker", "force_close"),
    "add_health_check": ("circuit_breaker", "add_health_check"),
    "get_metrics": ("circuit_breaker", "get_metrics"),
    "record_metric": ("circuit_breaker", "record_metric"),
    "detect_anomalies": ("circuit_breaker", "detect_anomalies"),
    "get_anomaly_score": ("circuit_breaker", "get_anomaly_score"),
    "record_failure": ("circuit_breaker", "record_failure"),
    "is_actor_infected": ("circuit_breaker", "is_actor_infected"),
    "quarantine_actor": ("circuit_breaker", "quarantine_actor"),
    "is_quarantined": ("circuit_breaker", "is_quarantined"),
    "analyze_propagation_patterns": ("circuit_breaker", "analyze_propagation_patterns"),
    "get_or_create_circuit_breaker": ("circuit_breaker", "get_or_create_circuit_breaker"),
    "report_failure": ("circuit_breaker", "report_failure"),
    "get_system_status": ("circuit_breaker", "get_system_status"),
    "get_shard_id": ("cluster_sharding", "get_shard_id"),
    "assign_actor": ("cluster_sharding", "assign_actor"),
    "move_actor": ("cluster_sharding", "move_actor"),
    "get_actor_state": ("cluster_sharding", "get_actor_state"),
    "run_pipeline": ("collaboration", "run_pipeline"),
    "run_negotiation": ("collaboration", "run_negotiation"),
    "run_training": ("collaboration", "run_training"),
    "set_governance_colony": ("colonies.base_colony", "set_governance_colony"),
    "get_status": ("colonies.base_colony", "get_status"),
    "link_symbolic_contexts": ("colonies.base_colony", "link_symbolic_contexts"),
    "prune_expired_tags": ("colonies.base_colony", "prune_expired_tags"),
    "request_permission_escalation": ("colonies.base_colony", "request_permission_escalation"),
    "override_tag": ("colonies.base_colony", "override_tag"),
    "entangle_tags": ("colonies.base_colony", "entangle_tags"),
    "update_task_slots": ("colonies.creativity_colony", "update_task_slots"),
    "review_scenario": ("colonies.governance_colony", "review_scenario"),
    "propagate_tags": ("colonies.reasoning_colony", "propagate_tags"),
    "snapshot_state": ("colonies.temporal_colony", "snapshot_state"),
    "revert_last": ("colonies.temporal_colony", "revert_last"),
    "get_state": ("colonies.temporal_colony", "get_state"),
    "simulate_future_state": ("colonies.temporal_colony", "simulate_future_state"),
    "tags_to_tensor": ("colonies.tensor_colony_ops", "tags_to_tensor"),
    "batch_propagate": ("colonies.tensor_colony_ops", "batch_propagate"),
    "colony_reasoning_tensor": ("colonies.tensor_colony_ops", "colony_reasoning_tensor"),
    "simulate_throughput": ("colonies.tensor_colony_ops", "simulate_throughput"),
    "plot_throughput": ("colonies.tensor_colony_ops", "plot_throughput"),
    "get_timestamp": ("common", "get_timestamp"),
    "validate_component_id": ("common", "validate_component_id"),
    "get_config": ("common", "get_config"),
    "set_status": ("common", "set_status"),
    "add_metadata": ("common", "add_metadata"),
    "get_config": ("config", "get_config"),
    "validate_database_url": ("config", "validate_database_url"),
    "validate_secret_strength": ("config", "validate_secret_strength"),
    "validate_environment": ("config", "validate_environment"),
    "get_cors_origins_list": ("config", "get_cors_origins_list"),
    "is_production": ("config", "is_production"),
    "is_development": ("config", "is_development"),
    "get_config": ("config_manager", "get_config"),
    "set_config": ("config_manager", "set_config"),
    "call_for_proposals": ("coordination", "call_for_proposals"),
    "receive_proposal": ("coordination", "receive_proposal"),
    "award_contract": ("coordination", "award_contract"),
    "handle_call_for_proposals": ("coordination", "handle_call_for_proposals"),
    "can_perform_task": ("coordination", "can_perform_task"),
    "calculate_bid": ("coordination", "calculate_bid"),
    "get_core_hub": ("core_hub", "get_core_hub"),
    "register_service": ("core_hub", "register_service"),
    "get_service": ("core_hub", "get_service"),
    "list_services": ("core_hub", "list_services"),
    "register_event_handler": ("core_hub", "register_event_handler"),
    "get_endpoints": ("core_hub", "get_endpoints"),
    "get_lukhas_core": ("core_system", "get_lukhas_core"),
    "get_status": ("core_system", "get_status"),
    "echo_behavior": ("core_utilities", "echo_behavior"),
    "get_resource_efficiency_table": ("core_utilities", "get_resource_efficiency_table"),
    "send": ("core_utilities", "send"),
    "request_access": ("core_utilities", "request_access"),
    "run_consistency_check": ("core_utilities", "run_consistency_check"),
    "collect_metrics": ("core_utilities", "collect_metrics"),
    "lukhas_tier_required": ("decorators", "lukhas_tier_required"),
    "glyph_bind": ("decorators", "glyph_bind"),
    "trace": ("decorators", "trace"),
    "decorator": ("decorators", "decorator"),
    "decorator": ("decorators", "decorator"),
    "decorator": ("decorators", "decorator"),
    "wrapper": ("decorators", "wrapper"),
    "wrapper": ("decorators", "wrapper"),
    "wrapper": ("decorators", "wrapper"),
    "route_ai_request": ("direct_ai_router", "route_ai_request"),
    "is_ai_available": ("direct_ai_router", "is_ai_available"),
    "route_request": ("direct_ai_router", "route_request"),
    "is_available": ("direct_ai_router", "is_available"),
    "get_global_collector": ("distributed_tracing", "get_global_collector"),
    "get_global_tracer": ("distributed_tracing", "get_global_tracer"),
    "create_ai_tracer": ("distributed_tracing", "create_ai_tracer"),
    "demo_distributed_tracing": ("distributed_tracing", "demo_distributed_tracing"),
    "to_dict": ("distributed_tracing", "to_dict"),
    "finish": ("distributed_tracing", "finish"),
    "add_tag": ("distributed_tracing", "add_tag"),
    "add_log": ("distributed_tracing", "add_log"),
    "span_id": ("distributed_tracing", "span_id"),
    "parent_span_id": ("distributed_tracing", "parent_span_id"),
    "with_span": ("distributed_tracing", "with_span"),
    "set_baggage_item": ("distributed_tracing", "set_baggage_item"),
    "get_baggage_item": ("distributed_tracing", "get_baggage_item"),
    "to_headers": ("distributed_tracing", "to_headers"),
    "from_headers": ("distributed_tracing", "from_headers"),
    "add_span": ("distributed_tracing", "add_span"),
    "get_trace": ("distributed_tracing", "get_trace"),
    "get_traces_by_operation": ("distributed_tracing", "get_traces_by_operation"),
    "get_trace_statistics": ("distributed_tracing", "get_trace_statistics"),
    "start_trace": ("distributed_tracing", "start_trace"),
    "start_span": ("distributed_tracing", "start_span"),
    "finish_span": ("distributed_tracing", "finish_span"),
    "add_tag": ("distributed_tracing", "add_tag"),
    "add_log": ("distributed_tracing", "add_log"),
    "trace_operation": ("distributed_tracing", "trace_operation"),
    "get_current_context": ("distributed_tracing", "get_current_context"),
    "trace_agent_operation": ("distributed_tracing", "trace_agent_operation"),
    "trace_agent_collaboration": ("distributed_tracing", "trace_agent_collaboration"),
    "trace_memory_operation": ("distributed_tracing", "trace_memory_operation"),
    "take_snapshot": ("distributed_tracing", "take_snapshot"),
    "restore_latest_snapshot": ("distributed_tracing", "restore_latest_snapshot"),
    "replay_trace": ("distributed_tracing", "replay_trace"),
    "replay_agent_state": ("distributed_tracing", "replay_agent_state"),
    "is_expired": ("efficient_communication", "is_expired"),
    "to_dict": ("efficient_communication", "to_dict"),
    "register_node": ("efficient_communication", "register_node"),
    "select_communication_mode": ("efficient_communication", "select_communication_mode"),
    "find_optimal_path": ("efficient_communication", "find_optimal_path"),
    "can_afford_message": ("efficient_communication", "can_afford_message"),
    "record_message_sent": ("efficient_communication", "record_message_sent"),
    "subscribe": ("efficient_communication", "subscribe"),
    "unsubscribe": ("efficient_communication", "unsubscribe"),
    "get_connection_stats": ("efficient_communication", "get_connection_stats"),
    "subscribe_to_events": ("efficient_communication", "subscribe_to_events"),
    "get_communication_stats": ("efficient_communication", "get_communication_stats"),
    "get_statistics": ("efficient_communication", "get_statistics"),
    "record_energy_usage": ("efficient_communication", "record_energy_usage"),
    "get_stats": ("efficient_communication", "get_stats"),
    "power_watts": ("energy_consumption_analysis", "power_watts"),
    "to_dict": ("energy_consumption_analysis", "to_dict"),
    "remaining_budget": ("energy_consumption_analysis", "remaining_budget"),
    "budget_percentage_used": ("energy_consumption_analysis", "budget_percentage_used"),
    "time_elapsed": ("energy_consumption_analysis", "time_elapsed"),
    "is_within_budget": ("energy_consumption_analysis", "is_within_budget"),
    "reset": ("energy_consumption_analysis", "reset"),
    "record_observation": ("energy_consumption_analysis", "record_observation"),
    "predict_energy": ("energy_consumption_analysis", "predict_energy"),
    "record_energy_consumption": ("energy_consumption_analysis", "record_energy_consumption"),
    "create_budget": ("energy_consumption_analysis", "create_budget"),
    "set_active_budget": ("energy_consumption_analysis", "set_active_budget"),
    "predict_operation_energy": ("energy_consumption_analysis", "predict_operation_energy"),
    "get_energy_statistics": ("energy_consumption_analysis", "get_energy_statistics"),
    "set_energy_profile": ("energy_consumption_analysis", "set_energy_profile"),
    "export_metrics": ("energy_consumption_analysis", "export_metrics"),
    "remember": ("enhanced_swarm", "remember"),
    "recall": ("enhanced_swarm", "recall"),
    "receive": ("enhanced_swarm", "receive"),
    "get_status": ("enhanced_swarm", "get_status"),
    "detect_emergent_patterns": ("enhanced_swarm", "detect_emergent_patterns"),
    "get_colony_status": ("enhanced_swarm", "get_colony_status"),
    "create_colony": ("enhanced_swarm", "create_colony"),
    "get_swarm_status": ("enhanced_swarm", "get_swarm_status"),
    "risk_level": ("ethics.dream_ethics_injector", "risk_level"),
    "to_dict": ("ethics.dream_ethics_injector", "to_dict"),
    "get_safety_statistics": ("ethics.dream_ethics_injector", "get_safety_statistics"),
    "subscribe": ("event_bus", "subscribe"),
    "unsubscribe": ("event_bus", "unsubscribe"),
    "subscribe_to_dream_events": ("event_bus", "subscribe_to_dream_events"),
    "get_event_bus_stats": ("event_bus", "get_event_bus_stats"),
    "filtered_callback": ("event_bus", "filtered_callback"),
    "to_json": ("event_replay_snapshot", "to_json"),
    "from_json": ("event_replay_snapshot", "from_json"),
    "create_from_actor": ("event_replay_snapshot", "create_from_actor"),
    "restore_to_actor": ("event_replay_snapshot", "restore_to_actor"),
    "replay_ethical_events": ("event_replayer", "replay_ethical_events"),
    "filter_events_by_tag": ("event_replayer", "filter_events_by_tag"),
    "replay_events": ("event_replayer", "replay_events"),
    "get_global_event_store": ("event_sourcing", "get_global_event_store"),
    "to_dict": ("event_sourcing", "to_dict"),
    "from_dict": ("event_sourcing", "from_dict"),
    "append_event": ("event_sourcing", "append_event"),
    "get_events_for_aggregate": ("event_sourcing", "get_events_for_aggregate"),
    "get_events_by_correlation_id": ("event_sourcing", "get_events_by_correlation_id"),
    "get_events_in_time_range": ("event_sourcing", "get_events_in_time_range"),
    "replay_events": ("event_sourcing", "replay_events"),
    "apply_event": ("event_sourcing", "apply_event"),
    "raise_event": ("event_sourcing", "raise_event"),
    "commit_events": ("event_sourcing", "commit_events"),
    "apply_event": ("event_sourcing", "apply_event"),
    "create_agent": ("event_sourcing", "create_agent"),
    "assign_task": ("event_sourcing", "assign_task"),
    "complete_task": ("event_sourcing", "complete_task"),
    "update_memory": ("event_sourcing", "update_memory"),
    "add_capability": ("event_sourcing", "add_capability"),
    "replay_aggregate_to_point_in_time": ("event_sourcing", "replay_aggregate_to_point_in_time"),
    "get_causal_chain": ("event_sourcing", "get_causal_chain"),
    "analyze_agent_behavior": ("event_sourcing", "analyze_agent_behavior"),
    "assess_action": ("fallback_services", "assess_action"),
    "check_compliance": ("fallback_services", "check_compliance"),
    "store_memory": ("fallback_services", "store_memory"),
    "retrieve_memory": ("fallback_services", "retrieve_memory"),
    "search_memory": ("fallback_services", "search_memory"),
    "generate_content": ("fallback_services", "generate_content"),
    "synthesize_dream": ("fallback_services", "synthesize_dream"),
    "process_awareness": ("fallback_services", "process_awareness"),
    "introspect": ("fallback_services", "introspect"),
    "get_consciousness_state": ("fallback_services", "get_consciousness_state"),
    "learn_from_data": ("fallback_services", "learn_from_data"),
    "adapt_behavior": ("fallback_services", "adapt_behavior"),
    "quantum_compute": ("fallback_services", "quantum_compute"),
    "quantum_entangle": ("fallback_services", "quantum_entangle"),
    "verify_user_access": ("fallback_services", "verify_user_access"),
    "log_activity": ("fallback_services", "log_activity"),
    "add_child": ("fault_tolerance", "add_child"),
    "handle_failure": ("fault_tolerance", "handle_failure"),
    "add_rule": ("governance", "add_rule"),
    "validate_action": ("governance", "validate_action"),
    "get_hub_registry": ("hub_registry", "get_hub_registry"),
    "get_hub": ("hub_registry", "get_hub"),
    "get_all_hubs": ("hub_registry", "get_all_hubs"),
    "to_dict": ("id", "to_dict"),
    "to_dict": ("id", "to_dict"),
    "lock_memory": ("id", "lock_memory"),
    "unlock_memory": ("id", "unlock_memory"),
    "check_compliance": ("id", "check_compliance"),
    "get_compliance_status": ("id", "get_compliance_status"),
    "create_identity_component": ("identity.engine", "create_identity_component"),
    "get_status": ("identity.engine", "get_status"),
    "get_current_sid": ("identity.id_manager", "get_current_sid"),
    "get_user_tier": ("identity.id_manager", "get_user_tier"),
    "register_new_user": ("identity.id_manager", "register_new_user"),
    "extract_vector": ("identity.manager", "extract_vector"),
    "update_vector": ("identity.manager", "update_vector"),
    "get_vector": ("identity.manager", "get_vector"),
    "create_hash": ("identity.manager", "create_hash"),
    "store_hash": ("identity.manager", "store_hash"),
    "verify": ("identity.manager", "verify"),
    "secure": ("identity.manager", "secure"),
    "unlock": ("identity.manager", "unlock"),
    "authenticate": ("identity.manager", "authenticate"),
    "register_user": ("identity.manager", "register_user"),
    "update": ("identity.manager", "update"),
    "apply_trauma_lock": ("identity.manager", "apply_trauma_lock"),
    "create_identity_component": ("identity.mapper", "create_identity_component"),
    "get_status": ("identity.mapper", "get_status"),
    "create_identity_component": ("identity.persona_engine", "create_identity_component"),
    "get_status": ("identity.persona_engine", "get_status"),
    "create_identity_component": ("identity.processor", "create_identity_component"),
    "get_status": ("identity.processor", "get_status"),
    "tier_required": ("identity_aware_base", "tier_required"),
    "identity_client": ("identity_aware_base", "identity_client"),
    "validate_user_tier": ("identity_aware_base", "validate_user_tier"),
    "check_user_consent": ("identity_aware_base", "check_user_consent"),
    "log_user_activity": ("identity_aware_base", "log_user_activity"),
    "get_user_context": ("identity_aware_base", "get_user_context"),
    "clear_user_cache": ("identity_aware_base", "clear_user_cache"),
    "get_service_info": ("identity_aware_base", "get_service_info"),
    "execute_tiered_operation": ("identity_aware_base", "execute_tiered_operation"),
    "get_user_resource_limits": ("identity_aware_base", "get_user_resource_limits"),
    "check_resource_availability": ("identity_aware_base", "check_resource_availability"),
    "consume_resource": ("identity_aware_base", "consume_resource"),
    "decorator": ("identity_aware_base", "decorator"),
    "wrapper": ("identity_aware_base", "wrapper"),
    "verify_user_access": ("identity_aware_base", "verify_user_access"),
    "check_consent": ("identity_aware_base", "check_consent"),
    "log_activity": ("identity_aware_base", "log_activity"),
    "create_identity_aware_colony": ("identity_aware_base_colony", "create_identity_aware_colony"),
    "get_supported_capabilities_for_tier": ("identity_aware_base_colony", "get_supported_capabilities_for_tier"),
    "get_identity_statistics": ("identity_aware_base_colony", "get_identity_statistics"),
    "get_identity_client": ("identity_integration", "get_identity_client"),
    "require_identity": ("identity_integration", "require_identity"),
    "validate_and_log": ("identity_integration", "validate_and_log"),
    "normalize_tier": ("identity_integration", "normalize_tier"),
    "get_tier_index": ("identity_integration", "get_tier_index"),
    "decorator": ("identity_integration", "decorator"),
    "memory_operation_example": ("identity_integration", "memory_operation_example"),
    "dream_generation_example": ("identity_integration", "dream_generation_example"),
    "quantum_operation_example": ("identity_integration", "quantum_operation_example"),
    "context_manager_example": ("identity_integration", "context_manager_example"),
    "wrapper": ("identity_integration", "wrapper"),
    "to_dict": ("image_processing_pipeline", "to_dict"),
    "from_dict": ("image_processing_pipeline", "from_dict"),
    "handle_worker_failure": ("image_processing_pipeline", "handle_worker_failure"),
    "is_healthy": ("image_processing_pipeline", "is_healthy"),
    "get_pipeline_stats": ("image_processing_pipeline", "get_pipeline_stats"),
    "subscribe": ("image_processing_pipeline", "subscribe"),
    "publish": ("image_processing_pipeline", "publish"),
    "add_link": ("infrastructure.base_node", "add_link"),
    "evolve": ("infrastructure.base_node", "evolve"),
    "trigger_event": ("infrastructure.base_node", "trigger_event"),
    "reflect": ("infrastructure.base_node", "reflect"),
    "activate": ("infrastructure.base_node", "activate"),
    "register_core_nodes": ("infrastructure.node_collection", "register_core_nodes"),
    "process": ("infrastructure.node_collection", "process"),
    "refine_intent": ("infrastructure.node_collection", "refine_intent"),
    "store": ("infrastructure.node_collection", "store"),
    "retrieve": ("infrastructure.node_collection", "retrieve"),
    "evaluate_action": ("infrastructure.node_collection", "evaluate_action"),
    "create_goal": ("infrastructure.node_collection", "create_goal"),
    "update_progress": ("infrastructure.node_collection", "update_progress"),
    "get_active_goals": ("infrastructure.node_collection", "get_active_goals"),
    "get_goal": ("infrastructure.node_collection", "get_goal"),
    "create_proposal": ("infrastructure.node_collection", "create_proposal"),
    "vote": ("infrastructure.node_collection", "vote"),
    "register_node": ("infrastructure.node_manager", "register_node"),
    "discover_nodes": ("infrastructure.node_manager", "discover_nodes"),
    "dispatch_message": ("infrastructure.node_manager", "dispatch_message"),
    "broadcast_to_nodes": ("infrastructure.node_manager", "broadcast_to_nodes"),
    "process_message": ("infrastructure.node_manager", "process_message"),
    "handle_node_status_change": ("infrastructure.node_manager", "handle_node_status_change"),
    "discover_nodes": ("infrastructure.node_registry", "discover_nodes"),
    "register_node_type": ("infrastructure.node_registry", "register_node_type"),
    "create_node": ("infrastructure.node_registry", "create_node"),
    "get_node": ("infrastructure.node_registry", "get_node"),
    "send_message": ("infrastructure.node_registry", "send_message"),
    "broadcast_message": ("infrastructure.node_registry", "broadcast_message"),
    "establish_relationship": ("infrastructure.node_registry", "establish_relationship"),
    "initialize_standard_nodes": ("infrastructure.node_registry", "initialize_standard_nodes"),
    "get_node_info": ("infrastructure.node_registry", "get_node_info"),
    "execute_node": ("infrastructure.node_registry", "execute_node"),
    "send_message": ("infrastructure.node_registry", "send_message"),
    "broadcast_message": ("infrastructure.node_registry", "broadcast_message"),
    "subscribe": ("infrastructure.node_registry", "subscribe"),
    "get_messages": ("infrastructure.node_registry", "get_messages"),
    "get_event_metrics": ("integrated_safety_system", "get_event_metrics"),
    "check_circuit_breaker": ("integrated_safety_system", "check_circuit_breaker"),
    "trip_circuit_breaker": ("integrated_safety_system", "trip_circuit_breaker"),
    "get_system_status": ("integrated_safety_system", "get_system_status"),
    "task_priority_score": ("integrated_system", "task_priority_score"),
    "register_component": ("integration_hub", "register_component"),
    "unregister_component": ("integration_hub", "unregister_component"),
    "invoke_component": ("integration_hub", "invoke_component"),
    "batch_invoke": ("integration_hub", "batch_invoke"),
    "create_data_pipeline": ("integration_hub", "create_data_pipeline"),
    "execute_pipeline": ("integration_hub", "execute_pipeline"),
    "get_component_status": ("integration_hub", "get_component_status"),
    "get_integration_metrics": ("integration_hub", "get_integration_metrics"),
    "cleanup": ("integration_hub", "cleanup"),
    "export_configuration": ("integration_hub", "export_configuration"),
    "import_configuration": ("integration_hub", "import_configuration"),
    "get_nias_dream_bridge": ("integrations.nias_dream_bridge", "get_nias_dream_bridge"),
    "inject_components": ("integrations.nias_dream_bridge", "inject_components"),
    "get_dream_statistics": ("integrations.nias_dream_bridge", "get_dream_statistics"),
    "lukhas_tier_required": ("integrator", "lukhas_tier_required"),
    "decorator": ("integrator", "decorator"),
    "register_component": ("integrator", "register_component"),
    "send_message_to_component": ("integrator", "send_message_to_component"),
    "get_system_status": ("integrator", "get_system_status"),
    "broadcast_event": ("integrator", "broadcast_event"),
    "subscribe_to_event": ("integrator", "subscribe_to_event"),
    "verify_component_state": ("integrator", "verify_component_state"),
    "verify_message_state": ("integrator", "verify_message_state"),
    "sign_message": ("integrator", "sign_message"),
    "get_coherence": ("integrator", "get_coherence"),
    "register_component": ("integrator", "register_component"),
    "process_message": ("integrator", "process_message"),
    "process_event": ("integrator", "process_event"),
    "get_health": ("integrator", "get_health"),
    "register_component": ("integrator", "register_component"),
    "check_permission": ("integrator", "check_permission"),
    "get_status": ("integrator", "get_status"),
    "run_consistency_check": ("integrity_probe", "run_consistency_check"),
    "validate_user_tier": ("interfaces.as_agent.auth.registry", "validate_user_tier"),
    "get_user_preferences": ("interfaces.as_agent.auth.registry", "get_user_preferences"),
    "share_preferences": ("interfaces.as_agent.auth.registry", "share_preferences"),
    "can_recover_full_state": ("interfaces.as_agent.auth.registry", "can_recover_full_state"),
    "pair_device": ("interfaces.as_agent.auth.registry", "pair_device"),
    "auto_login": ("interfaces.as_agent.auth.registry", "auto_login"),
    "pair_with_vendor": ("interfaces.as_agent.auth.vendor_hospitality_sync", "pair_with_vendor"),
    "generate_symbolic_image": ("interfaces.as_agent.core.generate_image", "generate_symbolic_image"),
    "dalle_generate": ("interfaces.as_agent.core.generate_image", "dalle_generate"),
    "log_event": ("interfaces.as_agent.core.overview_log", "log_event"),
    "log_referral_click": ("interfaces.as_agent.news_and_social.affiliate_log", "log_referral_click"),
    "load_pending_posts": ("interfaces.as_agent.news_and_social.s_dispatcher", "load_pending_posts"),
    "simulate_publish": ("interfaces.as_agent.news_and_social.s_dispatcher", "simulate_publish"),
    "update_dispatch_log": ("interfaces.as_agent.news_and_social.s_dispatcher", "update_dispatch_log"),
    "rewrite_queue": ("interfaces.as_agent.news_and_social.s_dispatcher", "rewrite_queue"),
    "is_allowed_now": ("interfaces.as_agent.sys.abas.abas", "is_allowed_now"),
    "get_aggregator": ("interfaces.as_agent.sys.dast.aggregator", "get_aggregator"),
    "aggregate_dast_tags": ("interfaces.as_agent.sys.dast.aggregator", "aggregate_dast_tags"),
    "aggregate_symbolic_tags": ("interfaces.as_agent.sys.dast.aggregator", "aggregate_symbolic_tags"),
    "aggregate_symbolic_tags": ("interfaces.as_agent.sys.dast.aggregator", "aggregate_symbolic_tags"),
    "get_status": ("interfaces.as_agent.sys.dast.aggregator", "get_status"),
    "register_task": ("interfaces.as_agent.sys.dast.dast", "register_task"),
    "dispatch": ("interfaces.as_agent.sys.dast.dast", "dispatch"),
    "handle_dream_summary": ("interfaces.as_agent.sys.dast.dast", "handle_dream_summary"),
    "handle_delegate_payment": ("interfaces.as_agent.sys.dast.dast", "handle_delegate_payment"),
    "handle_ethical_signal": ("interfaces.as_agent.sys.dast.dast", "handle_ethical_signal"),
    "wrapper": ("interfaces.as_agent.sys.dast.dast", "wrapper"),
    "get_current_tags": ("interfaces.as_agent.sys.dast.dast_core", "get_current_tags"),
    "add_tag": ("interfaces.as_agent.sys.dast.dast_core", "add_tag"),
    "remove_tag": ("interfaces.as_agent.sys.dast.dast_core", "remove_tag"),
    "startup_sequence": ("interfaces.as_agent.sys.dast.launcher", "startup_sequence"),
    "receive_partner_input": ("interfaces.as_agent.sys.dast.partner_sdk", "receive_partner_input"),
    "receive_partner_input": ("interfaces.as_agent.sys.dast.partner_sdk", "receive_partner_input"),
    "is_time_to_deliver": ("interfaces.as_agent.sys.dast.schedule_manager", "is_time_to_deliver"),
    "save_tags_to_file": ("interfaces.as_agent.sys.dast.store", "save_tags_to_file"),
    "load_tags_from_file": ("interfaces.as_agent.sys.dast.store", "load_tags_from_file"),
    "save_tags_to_file": ("interfaces.as_agent.sys.dast.store", "save_tags_to_file"),
    "load_tags_from_file": ("interfaces.as_agent.sys.dast.store", "load_tags_from_file"),
    "cluster_dreams_by_tag": ("interfaces.as_agent.sys.nias.05_25_dream_clustering_engine", "cluster_dreams_by_tag"),
    "is_allowed": ("interfaces.as_agent.sys.nias.consent_filter", "is_allowed"),
    "run_delivery_queue": ("interfaces.as_agent.sys.nias.delivery_loop", "run_delivery_queue"),
    "extract_narratable_dreams": ("interfaces.as_agent.sys.nias.dream_narrator_queue", "extract_narratable_dreams"),
    "record_dream_message": ("interfaces.as_agent.sys.nias.dream_recorder", "record_dream_message"),
    "view_feedback": ("interfaces.as_agent.sys.nias.feedback_log_viewer", "view_feedback"),
    "record_feedback": ("interfaces.as_agent.sys.nias.feedback_loop", "record_feedback"),
    "generate_payload": ("interfaces.as_agent.sys.nias.generate_payload_cli", "generate_payload"),
    "load_user_settings": ("interfaces.as_agent.sys.nias.narration_controller", "load_user_settings"),
    "filter_narration_queue": ("interfaces.as_agent.sys.nias.narration_controller", "filter_narration_queue"),
    "fetch_narration_entries": ("interfaces.as_agent.sys.nias.narration_controller", "fetch_narration_entries"),
    "print_debug_narration_summary": ("interfaces.as_agent.sys.nias.narration_controller", "print_debug_narration_summary"),
    "push_symbolic_message": ("interfaces.as_agent.sys.nias.nias_core", "push_symbolic_message"),
    "load_replay_data": ("interfaces.as_agent.sys.nias.replay_heatmap", "load_replay_data"),
    "plot_heatmap": ("interfaces.as_agent.sys.nias.replay_heatmap", "plot_heatmap"),
    "color_emotion": ("interfaces.as_agent.sys.nias.replay_visualizer", "color_emotion"),
    "visualize_replays": ("interfaces.as_agent.sys.nias.replay_visualizer", "visualize_replays"),
    "match_message_to_context": ("interfaces.as_agent.sys.nias.symbolic_matcher", "match_message_to_context"),
    "generate_symbolic_reply": ("interfaces.as_agent.sys.nias.symbolic_reply_generator", "generate_symbolic_reply"),
    "validate_payload": ("interfaces.as_agent.sys.nias.validate_payload", "validate_payload"),
    "narrate_dreams": ("interfaces.as_agent.sys.nias.voice_narrator", "narrate_dreams"),
    "tier_label": ("interfaces.as_agent.utils.symbolic_utils", "tier_label"),
    "summarize_emotion_vector": ("interfaces.as_agent.utils.symbolic_utils", "summarize_emotion_vector"),
    "create_delivery_widget": ("interfaces.as_agent.widgets.delivery_tracker_widget", "create_delivery_widget"),
    "update_delivery_status": ("interfaces.as_agent.widgets.delivery_tracker_widget", "update_delivery_status"),
    "render_widget_preview": ("interfaces.as_agent.widgets.live_renderer_widget", "render_widget_preview"),
    "render_terminal_widget": ("interfaces.as_agent.widgets.terminal_widget", "render_terminal_widget"),
    "show_dst_status": ("interfaces.as_agent.widgets.terminal_widget", "show_dst_status"),
    "suggest_travel_action": ("interfaces.as_agent.widgets.travel_widget", "suggest_travel_action"),
    "suggest_long_distance_travel": ("interfaces.as_agent.widgets.travel_widget", "suggest_long_distance_travel"),
    "render_widget_preview": ("interfaces.as_agent.widgets.widget_archive", "render_widget_preview"),
    "display_mood": ("interfaces.cli", "display_mood"),
    "display_flashback_preview": ("interfaces.cli", "display_flashback_preview"),
    "display_system_status": ("interfaces.cli", "display_system_status"),
    "voice_welcome": ("interfaces.cli", "voice_welcome"),
    "launch": ("interfaces.cli", "launch"),
    "get_ethical_context": ("interfaces.common_interfaces", "get_ethical_context"),
    "get_dream_state": ("interfaces.common_interfaces", "get_dream_state"),
    "log_creation": ("interfaces.custom_llm", "log_creation"),
    "generate_symbolic_html_url": ("interfaces.dashboad", "generate_symbolic_html_url"),
    "build_publish_payload": ("interfaces.dashboad", "build_publish_payload"),
    "show_social_post_preview": ("interfaces.dashboad", "show_social_post_preview"),
    "launch_lukhas": ("interfaces.launcher", "launch_lukhas"),
    "start_agent": ("interfaces.logic.agent_core", "start_agent"),
    "run_agent_simulation": ("interfaces.logic.agent_core", "run_agent_simulation"),
    "initialize_agent": ("interfaces.logic.agent_logic_architecture", "initialize_agent"),
    "sync_user_mood": ("interfaces.logic.agent_logic_architecture", "sync_user_mood"),
    "verify_access_level": ("interfaces.logic.agent_logic_architecture", "verify_access_level"),
    "generate_response": ("interfaces.logic.agent_logic_architecture", "generate_response"),
    "store_memory_echo": ("interfaces.logic.agent_logic_architecture", "store_memory_echo"),
    "generate_dream_digest": ("interfaces.logic.agent_logic_architecture", "generate_dream_digest"),
    "activate_delegate_mode": ("interfaces.logic.agent_logic_architecture", "activate_delegate_mode"),
    "check_and_quarantine": ("interfaces.logic.agent_logic_architecture", "check_and_quarantine"),
    "ethical_review": ("interfaces.logic.agent_logic_architecture", "ethical_review"),
    "is_action_allowed": ("interfaces.logic.consent_manager", "is_action_allowed"),
    "revoke_access": ("interfaces.logic.consent_manager", "revoke_access"),
    "verify_or_revoke": ("interfaces.logic.consent_manager", "verify_or_revoke"),
    "build_user_context": ("interfaces.logic.context.context_builder", "build_user_context"),
    "can_delegate": ("interfaces.logic.delegate_logic", "can_delegate"),
    "delegate_action": ("interfaces.logic.delegate_logic", "delegate_action"),
    "render_voice": ("interfaces.logic.voice.voice_renderer", "render_voice"),
    "log_event": ("interfaces.main", "log_event"),
    "symbolic_intro": ("interfaces.main", "symbolic_intro"),
    "symbolic_menu": ("interfaces.main", "symbolic_menu"),
    "launch_gui": ("interfaces.main", "launch_gui"),
    "launch_cli": ("interfaces.main", "launch_cli"),
    "launch_socket": ("interfaces.main", "launch_socket"),
    "launch_narration": ("interfaces.main", "launch_narration"),
    "main": ("interfaces.main", "main"),
    "generate_nias_documentation": ("interfaces.nias.generate_nias_docs", "generate_nias_documentation"),
    "start_documentation_server": ("interfaces.nias.generate_nias_docs", "start_documentation_server"),
    "list_commands": ("interfaces.tools.cli.command_registry", "list_commands"),
    "run_narrator_queue": ("interfaces.tools.cli.dream_cli", "run_narrator_queue"),
    "run_voice_narrator": ("interfaces.tools.cli.dream_cli", "run_voice_narrator"),
    "inject_test_dream": ("interfaces.tools.cli.dream_cli", "inject_test_dream"),
    "run_all": ("interfaces.tools.cli.dream_cli", "run_all"),
    "main": ("interfaces.tools.cli.dream_cli", "main"),
    "submit_proposal": ("interfaces.tools.dao.dao_propose", "submit_proposal"),
    "main": ("interfaces.tools.dao.dao_propose", "main"),
    "cast_vote": ("interfaces.tools.dao.dao_vote", "cast_vote"),
    "main": ("interfaces.tools.dao.dao_vote", "main"),
    "log_session_end": ("interfaces.tools.research.research_dashboard", "log_session_end"),
    "is_access_allowed": ("interfaces.tools.security.session_logger", "is_access_allowed"),
    "log_session_event": ("interfaces.tools.security.session_logger", "log_session_event"),
    "generate_filename": ("interfaces.ui.components.audio_exporter", "generate_filename"),
    "export_as_text_narration": ("interfaces.ui.components.audio_exporter", "export_as_text_narration"),
    "safe_subprocess_run": ("interfaces.ui.components.audio_exporter", "safe_subprocess_run"),
    "get_env_var": ("interfaces.ui.components.audio_exporter", "get_env_var"),
    "set_user_preference": ("interfaces.ui.config.dashboard_settings", "set_user_preference"),
    "get_user_preference": ("interfaces.ui.config.dashboard_settings", "get_user_preference"),
    "toggle_widget_visibility": ("interfaces.ui.config.dashboard_settings", "toggle_widget_visibility"),
    "list_active_widgets": ("interfaces.ui.config.dashboard_settings", "list_active_widgets"),
    "store_paired_app": ("interfaces.ui.config.dashboard_settings", "store_paired_app"),
    "get_paired_apps": ("interfaces.ui.config.dashboard_settings", "get_paired_apps"),
    "launch_dashboard": ("interfaces.ui.gui_launcher", "launch_dashboard"),
    "classify": ("interfaces.voice.core.sayit", "classify"),
    "route": ("interfaces.voice.core.sayit", "route"),
    "load_config": ("interfaces.voice.edge_voice", "load_config"),
    "listen_to_human": ("interfaces.voice.listen", "listen_to_human"),
    "gpt_symbolic_response": ("interfaces.voice.listen", "gpt_symbolic_response"),
    "loop_symbolic_conversation": ("interfaces.voice.listen", "loop_symbolic_conversation"),
    "log_daily_entry": ("interfaces.voice.listen", "log_daily_entry"),
    "speak": ("interfaces.voice.voice_agent", "speak"),
    "analyze": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    "analyze": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    "analyze": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    "analyze": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    "determine_parameters": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "determine_parameters"),
    "store_interaction": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "store_interaction"),
    "get_relevant_memories": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "get_relevant_memories"),
    "anonymize_metadata": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "anonymize_metadata"),
    "should_retain_data": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "should_retain_data"),
    "validate_response": ("interfaces.voice.voice_emotional.context_aware_modular_voice", "validate_response"),
    "load_latest_expression": ("interfaces.web_formatter", "load_latest_expression"),
    "format_html": ("interfaces.web_formatter", "format_html"),
    "format_markdown": ("interfaces.web_formatter", "format_markdown"),
    "format_caption": ("interfaces.web_formatter", "format_caption"),
    "save_formats": ("interfaces.web_formatter", "save_formats"),
    "analyze_module": ("introspection.introspector", "analyze_module"),
    "report_symbolic_state": ("introspection.introspector", "report_symbolic_state"),
    "analyze_module": ("introspection.introspector", "analyze_module"),
    "report_symbolic_state": ("introspection.introspector", "report_symbolic_state"),
    "qsize": ("mailbox", "qsize"),
    "is_full": ("mailbox", "is_full"),
    "get_stats": ("mailbox", "get_stats"),
    "qsize": ("mailbox", "qsize"),
    "qsize": ("mailbox", "qsize"),
    "qsize": ("mailbox", "qsize"),
    "get_priority_stats": ("mailbox", "get_priority_stats"),
    "create_mailbox": ("mailbox", "create_mailbox"),
    "add_message_filter": ("mailbox", "add_message_filter"),
    "get_mailbox_stats": ("mailbox", "get_mailbox_stats"),
    "create_remediator_agent": ("meta_learning.remediator_agent", "create_remediator_agent"),
    "calculate_drift_score": ("meta_learning.remediator_agent", "calculate_drift_score"),
    "calculate_entropy_measure": ("meta_learning.remediator_agent", "calculate_entropy_measure"),
    "assess_system_state": ("meta_learning.remediator_agent", "assess_system_state"),
    "trigger_dream_replay": ("meta_learning.remediator_agent", "trigger_dream_replay"),
    "spawn_sub_agent": ("meta_learning.remediator_agent", "spawn_sub_agent"),
    "update_dashboard": ("meta_learning.remediator_agent", "update_dashboard"),
    "emit_voice_alert": ("meta_learning.remediator_agent", "emit_voice_alert"),
    "execute_remediation": ("meta_learning.remediator_agent", "execute_remediation"),
    "check_system_health": ("meta_learning.remediator_agent", "check_system_health"),
    "run_monitoring_cycle": ("meta_learning.remediator_agent", "run_monitoring_cycle"),
    "get_agent_status": ("meta_learning.remediator_agent", "get_agent_status"),
    "shutdown": ("meta_learning.remediator_agent", "shutdown"),
    "calculate_drift_score": ("meta_learning.remediator_agent", "calculate_drift_score"),
    "replay_dream_by_id": ("meta_learning.remediator_agent", "replay_dream_by_id"),
    "replay_recent_dreams": ("meta_learning.remediator_agent", "replay_recent_dreams"),
    "generate_collapse_hash": ("meta_learning.remediator_agent", "generate_collapse_hash"),
    "consolidate_memories": ("meta_learning.remediator_agent", "consolidate_memories"),
    "optimize_performance": ("meta_learning.remediator_agent", "optimize_performance"),
    "replay_memories": ("meta_learning.remediator_agent", "replay_memories"),
    "generate_hash": ("meta_learning.remediator_agent", "generate_hash"),
    "update_remediation_status": ("meta_learning.remediator_agent", "update_remediation_status"),
    "adjust_for_drift": ("meta_learning.remediator_agent", "adjust_for_drift"),
    "echo_behavior": ("minimal_actor", "echo_behavior"),
    "send": ("minimal_actor", "send"),
    "require_tier": ("module_registry", "require_tier"),
    "register_module": ("module_registry", "register_module"),
    "get_module": ("module_registry", "get_module"),
    "require_module_tier": ("module_registry", "require_module_tier"),
    "list_modules": ("module_registry", "list_modules"),
    "get_module_health": ("module_registry", "get_module_health"),
    "register_core_connections": ("module_registry", "register_core_connections"),
    "register_connection": ("module_registry", "register_connection"),
    "shutdown": ("module_registry", "shutdown"),
    "decorator": ("module_registry", "decorator"),
    "wrapper": ("module_registry", "wrapper"),
    "record_dream_message": ("modules.nias.dream_recorder", "record_dream_message"),
    "get_dream_recorder": ("modules.nias.dream_recorder", "get_dream_recorder"),
    "set_dream_recorder": ("modules.nias.dream_recorder", "set_dream_recorder"),
    "record_dream_message": ("modules.nias.dream_recorder", "record_dream_message"),
    "get_recorded_dreams": ("modules.nias.dream_recorder", "get_recorded_dreams"),
    "search_dreams": ("modules.nias.dream_recorder", "search_dreams"),
    "get_dream_stats": ("modules.nias.dream_recorder", "get_dream_stats"),
    "clear_dreams": ("modules.nias.dream_recorder", "clear_dreams"),
    "export_dreams": ("modules.nias.dream_recorder", "export_dreams"),
    "get_nias_hub": ("modules.nias.nias_hub", "get_nias_hub"),
    "register_service": ("modules.nias.nias_hub", "register_service"),
    "get_service": ("modules.nias.nias_hub", "get_service"),
    "register_event_handler": ("modules.nias.nias_hub", "register_event_handler"),
    "get_nias_openai_adapter": ("modules.nias.openai_adapter", "get_nias_openai_adapter"),
    "integrate_collapse_tracking": ("monitoring.collapse_integration", "integrate_collapse_tracking"),
    "update_entropy_from_components": ("monitoring.collapse_integration", "update_entropy_from_components"),
    "get_global_tracker": ("monitoring.collapse_tracker", "get_global_tracker"),
    "to_dict": ("monitoring.collapse_tracker", "to_dict"),
    "calculate_shannon_entropy": ("monitoring.collapse_tracker", "calculate_shannon_entropy"),
    "update_entropy_score": ("monitoring.collapse_tracker", "update_entropy_score"),
    "record_collapse_event": ("monitoring.collapse_tracker", "record_collapse_event"),
    "get_collapse_history": ("monitoring.collapse_tracker", "get_collapse_history"),
    "get_system_health": ("monitoring.collapse_tracker", "get_system_health"),
    "generate_synthetic_test_data": ("monitoring.collapse_tracker", "generate_synthetic_test_data"),
    "get_drift_summary": ("monitoring.drift_monitor", "get_drift_summary"),
    "add_span_event": ("monitoring_observability", "add_span_event"),
    "get_performance_summary": ("monitoring_observability", "get_performance_summary"),
    "quantum_ethical_arbitration": ("neural_architectures.abas.abas_quantum_specialist", "quantum_ethical_arbitration"),
    "create_attention_gradient": ("neural_architectures.abas.abas_quantum_specialist", "create_attention_gradient"),
    "synthesize_symbolic_atp": ("neural_architectures.abas.abas_quantum_specialist", "synthesize_symbolic_atp"),
    "optimize_cristae_topology": ("neural_architectures.abas.abas_quantum_specialist", "optimize_cristae_topology"),
    "get_biological_status": ("neural_architectures.abas.abas_quantum_specialist", "get_biological_status"),
    "forward": ("neural_architectures.neural_integrator", "forward"),
    "adapt_architecture": ("neural_architectures.neural_integrator", "adapt_architecture"),
    "make_code_block": ("notion_sync", "make_code_block"),
    "make_toggle_block": ("notion_sync", "make_toggle_block"),
    "make_flat_block": ("notion_sync", "make_flat_block"),
    "make_minimal_block": ("notion_sync", "make_minimal_block"),
    "generate_summary": ("notion_sync", "generate_summary"),
    "sync_to_notion_legacy": ("notion_sync", "sync_to_notion_legacy"),
    "log_audit_with_lid": ("notion_sync", "log_audit_with_lid"),
    "log_audit_with_lid": ("notion_sync", "log_audit_with_lid"),
    "run_legacy_streamlit_mode": ("notion_sync", "run_legacy_streamlit_mode"),
    "print_banner": ("notion_sync", "print_banner"),
    "test_system": ("notion_sync", "test_system"),
    "main": ("notion_sync", "main"),
    "process": ("notion_sync", "process"),
    "schedule_sync": ("notion_sync", "schedule_sync"),
    "start": ("observability.collector", "start"),
    "stop": ("observability.collector", "stop"),
    "record_metric": ("observability.collector", "record_metric"),
    "get_metrics": ("observability.collector", "get_metrics"),
    "start": ("observability_steering", "start"),
    "stop": ("observability_steering", "stop"),
    "record_actor_snapshot": ("observability_steering", "record_actor_snapshot"),
    "record_message_flow": ("observability_steering", "record_message_flow"),
    "record_system_event": ("observability_steering", "record_system_event"),
    "register_pattern_detector": ("observability_steering", "register_pattern_detector"),
    "get_system_overview": ("observability_steering", "get_system_overview"),
    "register_steering_policy": ("observability_steering", "register_steering_policy"),
    "get_custom_metrics": ("observability_steering", "get_custom_metrics"),
    "register_visualization": ("observability_steering", "register_visualization"),
    "get_pattern_summary": ("observability_steering", "get_pattern_summary"),
    "get_custom_metrics": ("observability_steering", "get_custom_metrics"),
    "get_decision_trail": ("observatory", "get_decision_trail"),
    "get_system_status": ("observatory", "get_system_status"),
    "create_eaxp_instance": ("orchestration.energy_aware_execution_planner", "create_eaxp_instance"),
    "get_usable_energy": ("orchestration.energy_aware_execution_planner", "get_usable_energy"),
    "can_allocate": ("orchestration.energy_aware_execution_planner", "can_allocate"),
    "submit_task": ("orchestration.energy_aware_execution_planner", "submit_task"),
    "cancel_task": ("orchestration.energy_aware_execution_planner", "cancel_task"),
    "get_task_status": ("orchestration.energy_aware_execution_planner", "get_task_status"),
    "optimize_energy_allocation": ("orchestration.energy_aware_execution_planner", "optimize_energy_allocation"),
    "get_energy_metrics": ("orchestration.energy_aware_execution_planner", "get_energy_metrics"),
    "to_dict": ("p2p_communication", "to_dict"),
    "to_bytes": ("p2p_communication", "to_bytes"),
    "from_bytes": ("p2p_communication", "from_bytes"),
    "register_handler": ("p2p_communication", "register_handler"),
    "get_network_stats": ("p2p_communication", "get_network_stats"),
    "connect": ("p2p_fabric", "connect"),
    "broadcast": ("p2p_fabric", "broadcast"),
    "verify_user_access": ("performance.orchestrator", "verify_user_access"),
    "check_consent": ("performance.orchestrator", "check_consent"),
    "log_activity": ("performance.orchestrator", "log_activity"),
    "get_overall_score": ("performance.orchestrator", "get_overall_score"),
    "generate_haiku": ("personality.creative_expressions", "generate_haiku"),
    "load_inspiration_profile": ("personality.creative_expressions", "load_inspiration_profile"),
    "unified_processing": ("personality.creative_personality", "unified_processing"),
    "federated_lifecycle": ("personality.creative_personality", "federated_lifecycle"),
    "adaptive_learning_loop": ("personality.creative_personality", "adaptive_learning_loop"),
    "analyze_context": ("personality.creative_personality", "analyze_context"),
    "optimize_learning_approach": ("personality.creative_personality", "optimize_learning_approach"),
    "get_model_output": ("personality.creative_personality", "get_model_output"),
    "get_model": ("personality.creative_personality", "get_model"),
    "generate_insights": ("personality.creative_personality", "generate_insights"),
    "incorporate_feedback": ("personality.creative_personality", "incorporate_feedback"),
    "contribute_gradients": ("personality.creative_personality", "contribute_gradients"),
    "ethical_reasoning": ("personality.creative_personality", "ethical_reasoning"),
    "meta_haiku": ("personality.creative_personality", "meta_haiku"),
    "meta_draw": ("personality.creative_personality", "meta_draw"),
    "plan_protest": ("personality.creative_personality", "plan_protest"),
    "early_fusion": ("personality.creative_personality", "early_fusion"),
    "synthesize_response": ("personality.creative_personality", "synthesize_response"),
    "unified_processing": ("personality.creative_personality_clean", "unified_processing"),
    "federated_lifecycle": ("personality.creative_personality_clean", "federated_lifecycle"),
    "adaptive_learning_loop": ("personality.creative_personality_clean", "adaptive_learning_loop"),
    "analyze_context": ("personality.creative_personality_clean", "analyze_context"),
    "optimize_learning_approach": ("personality.creative_personality_clean", "optimize_learning_approach"),
    "get_model_output": ("personality.creative_personality_clean", "get_model_output"),
    "get_model": ("personality.creative_personality_clean", "get_model"),
    "generate_insights": ("personality.creative_personality_clean", "generate_insights"),
    "incorporate_feedback": ("personality.creative_personality_clean", "incorporate_feedback"),
    "contribute_gradients": ("personality.creative_personality_clean", "contribute_gradients"),
    "ethical_reasoning": ("personality.creative_personality_clean", "ethical_reasoning"),
    "meta_haiku": ("personality.creative_personality_clean", "meta_haiku"),
    "meta_draw": ("personality.creative_personality_clean", "meta_draw"),
    "plan_protest": ("personality.creative_personality_clean", "plan_protest"),
    "early_fusion": ("personality.creative_personality_clean", "early_fusion"),
    "synthesize_response": ("personality.creative_personality_clean", "synthesize_response"),
    "get_personality_manager": ("personality.personality", "get_personality_manager"),
    "update_shyness": ("personality.personality", "update_shyness"),
    "get_interaction_style": ("personality.personality", "get_interaction_style"),
    "set_cultural_preference": ("personality.personality", "set_cultural_preference"),
    "get_etiquette_adjustments": ("personality.personality", "get_etiquette_adjustments"),
    "get_personality_profile": ("personality.personality", "get_personality_profile"),
    "update_from_interaction": ("personality.personality", "update_from_interaction"),
    "set_mood": ("personality.personality", "set_mood"),
    "set_energy_level": ("personality.personality", "set_energy_level"),
    "get_status": ("personality.personality", "get_status"),
    "get_plugin_type": ("plugin_registry", "get_plugin_type"),
    "get_plugin_name": ("plugin_registry", "get_plugin_name"),
    "get_version": ("plugin_registry", "get_version"),
    "register_plugin": ("plugin_registry", "register_plugin"),
    "get_plugin": ("plugin_registry", "get_plugin"),
    "list_plugins": ("plugin_registry", "list_plugins"),
    "optimize_swarm_communication": ("practical_optimizations", "optimize_swarm_communication"),
    "deserialize_swarm_message": ("practical_optimizations", "deserialize_swarm_message"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "is_expired": ("practical_optimizations", "is_expired"),
    "access": ("practical_optimizations", "access"),
    "score": ("practical_optimizations", "score"),
    "get": ("practical_optimizations", "get"),
    "put": ("practical_optimizations", "put"),
    "clear_expired": ("practical_optimizations", "clear_expired"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "acquire": ("practical_optimizations", "acquire"),
    "release": ("practical_optimizations", "release"),
    "borrowed": ("practical_optimizations", "borrowed"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "lazy_property": ("practical_optimizations", "lazy_property"),
    "defer": ("practical_optimizations", "defer"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "get": ("practical_optimizations", "get"),
    "is_computed": ("practical_optimizations", "is_computed"),
    "add": ("practical_optimizations", "add"),
    "flush": ("practical_optimizations", "flush"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "shutdown": ("practical_optimizations", "shutdown"),
    "store_array": ("practical_optimizations", "store_array"),
    "get_array": ("practical_optimizations", "get_array"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "cleanup": ("practical_optimizations", "cleanup"),
    "memoize": ("practical_optimizations", "memoize"),
    "share_computation": ("practical_optimizations", "share_computation"),
    "invalidate_dependents": ("practical_optimizations", "invalidate_dependents"),
    "apply": ("practical_optimizations", "apply"),
    "get_metrics": ("practical_optimizations", "get_metrics"),
    "get_strategy": ("practical_optimizations", "get_strategy"),
    "get_all_metrics": ("practical_optimizations", "get_all_metrics"),
    "optimize_computation": ("practical_optimizations", "optimize_computation"),
    "optimize_memory_access": ("practical_optimizations", "optimize_memory_access"),
    "create_resource_report": ("practical_optimizations", "create_resource_report"),
    "expensive_computation": ("practical_optimizations", "expensive_computation"),
    "fibonacci": ("practical_optimizations", "fibonacci"),
    "wrapper": ("practical_optimizations", "wrapper"),
    "decorator": ("practical_optimizations", "decorator"),
    "reset": ("practical_optimizations", "reset"),
    "wrapper": ("practical_optimizations", "wrapper"),
    "get_cycle_trace": ("quantized_thought_cycles", "get_cycle_trace"),
    "get_metrics": ("quantized_thought_cycles", "get_metrics"),
    "get_quantum_identity_manager": ("quantum_identity_manager", "get_quantum_identity_manager"),
    "lambda_tier": ("quantum_identity_manager", "lambda_tier"),
    "to_dict": ("quantum_identity_manager", "to_dict"),
    "from_dict": ("quantum_identity_manager", "from_dict"),
    "get_identity_stats": ("quantum_identity_manager", "get_identity_stats"),
    "request_access": ("quorum_override", "request_access"),
    "get_resource_efficiency_table": ("resource_efficiency", "get_resource_efficiency_table"),
    "collect_metrics": ("resource_efficiency", "collect_metrics"),
    "to_dict": ("resource_efficiency_analyzer", "to_dict"),
    "to_json": ("resource_efficiency_analyzer", "to_json"),
    "start_monitoring": ("resource_efficiency_analyzer", "start_monitoring"),
    "stop_monitoring": ("resource_efficiency_analyzer", "stop_monitoring"),
    "analyze_efficiency": ("resource_efficiency_analyzer", "analyze_efficiency"),
    "get_quick_stats": ("resource_efficiency_analyzer", "get_quick_stats"),
    "export_metrics": ("resource_efficiency_analyzer", "export_metrics"),
    "schedule_task": ("resource_scheduler", "schedule_task"),
    "multiverse_route": ("router.llm_multiverse_router", "multiverse_route"),
    "get_adversarial_tester": ("safety.adversarial_testing", "get_adversarial_tester"),
    "inject_systems": ("safety.adversarial_testing", "inject_systems"),
    "get_vulnerability_report": ("safety.adversarial_testing", "get_vulnerability_report"),
    "get_ai_safety_orchestrator": ("safety.ai_safety_orchestrator", "get_ai_safety_orchestrator"),
    "get_constitutional_safety": ("safety.constitutional_safety", "get_constitutional_safety"),
    "update_constitution": ("safety.constitutional_safety", "update_constitution"),
    "get_safety_status": ("safety.constitutional_safety", "get_safety_status"),
    "get_multi_agent_consensus": ("safety.multi_agent_consensus", "get_multi_agent_consensus"),
    "get_agent_performance_metrics": ("safety.multi_agent_consensus", "get_agent_performance_metrics"),
    "get_consensus_statistics": ("safety.multi_agent_consensus", "get_consensus_statistics"),
    "get_predictive_harm_prevention": ("safety.predictive_harm_prevention", "get_predictive_harm_prevention"),
    "get_safety_hub": ("safety.safety_hub", "get_safety_hub"),
    "register_service": ("safety.safety_hub", "register_service"),
    "get_service": ("safety.safety_hub", "get_service"),
    "register_event_handler": ("safety.safety_hub", "register_event_handler"),
    "get_safety_status": ("safety.safety_hub", "get_safety_status"),
    "get_service_list": ("safety.safety_hub", "get_service_list"),
    "get_service_count": ("safety.safety_hub", "get_service_count"),
    "get_service_discovery": ("service_discovery", "get_service_discovery"),
    "find_service": ("service_discovery", "find_service"),
    "register_service_globally": ("service_discovery", "register_service_globally"),
    "list_all_services": ("service_discovery", "list_all_services"),
    "add_update_callback": ("services.location.tracker", "add_update_callback"),
    "remove_update_callback": ("services.location.tracker", "remove_update_callback"),
    "generate_empathic_response": ("services.personality.empathy", "generate_empathic_response"),
    "trait_bar": ("services.personality.empathy", "trait_bar"),
    "display_visual_traits": ("services.personality.empathy", "display_visual_traits"),
    "load_persona": ("services.personality.personas", "load_persona"),
    "apply_event": ("state_management", "apply_event"),
    "log_event": ("state_management", "log_event"),
    "take_snapshot": ("state_management", "take_snapshot"),
    "calculate_restart_delay": ("supervision", "calculate_restart_delay"),
    "register_child": ("supervision", "register_child"),
    "get_affected_children": ("supervision", "get_affected_children"),
    "record_success": ("supervision", "record_success"),
    "record_failure": ("supervision", "record_failure"),
    "can_proceed": ("supervision", "can_proceed"),
    "reset": ("supervision", "reset"),
    "get_supervision_stats": ("supervision", "get_supervision_stats"),
    "receive": ("swarm", "receive"),
    "update_resource_state": ("swarm", "update_resource_state"),
    "add_symbolic_tag": ("swarm", "add_symbolic_tag"),
    "create_agent": ("swarm", "create_agent"),
    "populate_agents": ("swarm", "populate_agents"),
    "handle_failure": ("swarm", "handle_failure"),
    "register_colony": ("swarm", "register_colony"),
    "create_colony": ("swarm", "create_colony"),
    "get_colony": ("swarm", "get_colony"),
    "handle_heartbeat": ("swarm", "handle_heartbeat"),
    "update_colony_resource_state": ("swarm", "update_colony_resource_state"),
    "check_colony_health": ("swarm", "check_colony_health"),
    "get_symbolic_address": ("swarm", "get_symbolic_address"),
    "get_swarm_identity_orchestrator": ("swarm_identity_orchestrator", "get_swarm_identity_orchestrator"),
    "to_dict": ("swarm_identity_orchestrator", "to_dict"),
    "get_orchestrator_statistics": ("swarm_identity_orchestrator", "get_orchestrator_statistics"),
    "vector_collapse": ("symbolic.collapse.vector_ops", "vector_collapse"),
    "resolve": ("symbolic_arbitration", "resolve"),
    "add_event": ("symbolic_arbitration", "add_event"),
    "get_history": ("symbolic_arbitration", "get_history"),
    "get_bootstrap": ("symbolic_boot", "get_bootstrap"),
    "symbolic_boot": ("symbolic_boot", "symbolic_boot"),
    "main": ("symbolic_boot", "main"),
    "validate_workspace": ("symbolic_boot", "validate_workspace"),
    "load_system_modules": ("symbolic_boot", "load_system_modules"),
    "symbolic_boot": ("symbolic_boot", "symbolic_boot"),
    "get_status": ("symbolic_boot", "get_status"),
    "route_symbolic_event": ("symbolic_bridge.integrator", "route_symbolic_event"),
    "add_mapping": ("symbolic_bridge.token_map", "add_mapping"),
    "get_mapping": ("symbolic_bridge.token_map", "get_mapping"),
    "get_schema": ("symbolic_bridge.token_map", "get_schema"),
    "validate_propagation": ("symbolic_contract", "validate_propagation"),
    "validate_payload": ("symbolic_contract", "validate_payload"),
    "register": ("symbolic_contract", "register"),
    "get": ("symbolic_contract", "get"),
    "to_json": ("symbolic_contract", "to_json"),
    "repair_trace": ("symbolic_diagnostics.trace_repair_engine", "repair_trace"),
    "to_dict": ("symbolic_drift_analyzer", "to_dict"),
    "to_dict": ("symbolic_drift_analyzer", "to_dict"),
    "to_dict": ("symbolic_drift_analyzer", "to_dict"),
    "calculate_shannon_entropy": ("symbolic_drift_analyzer", "calculate_shannon_entropy"),
    "calculate_tag_entropy": ("symbolic_drift_analyzer", "calculate_tag_entropy"),
    "calculate_temporal_entropy": ("symbolic_drift_analyzer", "calculate_temporal_entropy"),
    "calculate_semantic_entropy": ("symbolic_drift_analyzer", "calculate_semantic_entropy"),
    "calculate_tag_variance": ("symbolic_drift_analyzer", "calculate_tag_variance"),
    "detect_pattern_trend": ("symbolic_drift_analyzer", "detect_pattern_trend"),
    "check_ethical_drift": ("symbolic_drift_analyzer", "check_ethical_drift"),
    "register_alert_callback": ("symbolic_drift_analyzer", "register_alert_callback"),
    "generate_cli_summary": ("symbolic_drift_analyzer", "generate_cli_summary"),
    "export_analysis_report": ("symbolic_drift_analyzer", "export_analysis_report"),
    "print_alert": ("symbolic_drift_analyzer", "print_alert"),
    "print_alert": ("symbolic_drift_analyzer", "print_alert"),
    "get_full_symbolic_state": ("symbolism.archiver", "get_full_symbolic_state"),
    "create_snapshot": ("symbolism.archiver", "create_snapshot"),
    "start": ("symbolism.archiver", "start"),
    "stop": ("symbolism.archiver", "stop"),
    "adjust_lifespan": ("symbolism.methylation_model", "adjust_lifespan"),
    "apply_actor_ref_fixes": ("targeted_api_fixes", "apply_actor_ref_fixes"),
    "fix_communication_fabric": ("targeted_api_fixes", "fix_communication_fabric"),
    "fix_integrated_system": ("targeted_api_fixes", "fix_integrated_system"),
    "update_validation_script": ("targeted_api_fixes", "update_validation_script"),
    "main": ("targeted_api_fixes", "main"),
    "add_total_messages": ("targeted_api_fixes", "add_total_messages"),
    "add_send_large_data": ("targeted_api_fixes", "add_send_large_data"),
    "fix_import": ("targeted_api_fixes", "fix_import"),
    "add_queue": ("task_manager", "add_queue"),
    "register_agent": ("task_manager", "register_agent"),
    "create_task": ("task_manager", "create_task"),
    "get_task_status": ("task_manager", "get_task_status"),
    "get_system_status": ("task_manager", "get_system_status"),
    "get_colony_proxy_manager": ("tier_aware_colony_proxy", "get_colony_proxy_manager"),
    "create_identity_aware_proxy": ("tier_aware_colony_proxy", "create_identity_aware_proxy"),
    "get_proxy_statistics": ("tier_aware_colony_proxy", "get_proxy_statistics"),
    "create_proxy": ("tier_aware_colony_proxy", "create_proxy"),
    "get_proxy": ("tier_aware_colony_proxy", "get_proxy"),
    "remove_proxy": ("tier_aware_colony_proxy", "remove_proxy"),
    "get_manager_statistics": ("tier_aware_colony_proxy", "get_manager_statistics"),
    "sync_wrapper": ("tier_aware_colony_proxy", "sync_wrapper"),
    "get_unified_adapter": ("tier_unification_adapter", "get_unified_adapter"),
    "oneiric_tier_required": ("tier_unification_adapter", "oneiric_tier_required"),
    "emotional_tier_required": ("tier_unification_adapter", "emotional_tier_required"),
    "to_lambda_tier": ("tier_unification_adapter", "to_lambda_tier"),
    "from_lambda_tier": ("tier_unification_adapter", "from_lambda_tier"),
    "validate_access": ("tier_unification_adapter", "validate_access"),
    "to_lambda_tier": ("tier_unification_adapter", "to_lambda_tier"),
    "from_lambda_tier": ("tier_unification_adapter", "from_lambda_tier"),
    "validate_access": ("tier_unification_adapter", "validate_access"),
    "create_middleware": ("tier_unification_adapter", "create_middleware"),
    "to_lambda_tier": ("tier_unification_adapter", "to_lambda_tier"),
    "from_lambda_tier": ("tier_unification_adapter", "from_lambda_tier"),
    "validate_access": ("tier_unification_adapter", "validate_access"),
    "get_emotional_access_matrix": ("tier_unification_adapter", "get_emotional_access_matrix"),
    "normalize_any_tier": ("tier_unification_adapter", "normalize_any_tier"),
    "create_unified_decorator": ("tier_unification_adapter", "create_unified_decorator"),
    "middleware": ("tier_unification_adapter", "middleware"),
    "decorator": ("tier_unification_adapter", "decorator"),
    "to_dict": ("tiered_state_management", "to_dict"),
    "aggregate": ("tiered_state_management", "aggregate"),
    "can_handle": ("tiered_state_management", "can_handle"),
    "aggregate": ("tiered_state_management", "aggregate"),
    "can_handle": ("tiered_state_management", "can_handle"),
    "register_aggregator": ("tiered_state_management", "register_aggregator"),
    "subscribe_to_replicated_state": ("tiered_state_management", "subscribe_to_replicated_state"),
    "unsubscribe_from_replicated_state": ("tiered_state_management", "unsubscribe_from_replicated_state"),
    "get_statistics": ("tiered_state_management", "get_statistics"),
    "aggregate": ("tiered_state_management", "aggregate"),
    "can_handle": ("tiered_state_management", "can_handle"),
    "aggregate": ("tiered_state_management", "aggregate"),
    "can_handle": ("tiered_state_management", "can_handle"),
    "send_message": ("user_interface_manager.text_handler", "send_message"),
    "get_message": ("user_interface_manager.text_handler", "get_message"),
    "speak": ("user_interface_manager.voice_handler", "speak"),
    "listen": ("user_interface_manager.voice_handler", "listen"),
    "load_dreams": ("utils.dream_utils", "load_dreams"),
    "get_latest_dream_timestamp": ("utils.dream_utils", "get_latest_dream_timestamp"),
    "filter_dreams_by_tag": ("utils.dream_utils", "filter_dreams_by_tag"),
    "filter_dreams": ("utils.dream_utils", "filter_dreams"),
    "filter_by_rem_phase": ("utils.dream_utils", "filter_by_rem_phase"),
    "filter_by_collapse": ("utils.dream_utils", "filter_by_collapse"),
    "filter_by_resonance": ("utils.dream_utils", "filter_by_resonance"),
    "tier_label": ("utils.symbolic_utils", "tier_label"),
    "summarize_emotion_vector": ("utils.symbolic_utils", "summarize_emotion_vector"),
    "fix_validation_script": ("validation_script_fixes", "fix_validation_script"),
    "fix_efficient_communication": ("validation_script_fixes", "fix_efficient_communication"),
    "main": ("validation_script_fixes", "main"),
    "replace_send_message": ("validation_script_fixes", "replace_send_message"),
    "add_message_count": ("validation_script_fixes", "add_message_count"),
    "add_counter_increment": ("validation_script_fixes", "add_counter_increment"),
    "require_identity": ("verifold.verifold_unified", "require_identity"),
    "get_global_verifold_system": ("verifold.verifold_unified", "get_global_verifold_system"),
    "generate_verifold_hash": ("verifold.verifold_unified", "generate_verifold_hash"),
    "verify_verifold_hash": ("verifold.verifold_unified", "verify_verifold_hash"),
    "decorator": ("verifold.verifold_unified", "decorator"),
    "generate_verifold_hash": ("verifold.verifold_unified", "generate_verifold_hash"),
    "verify_verifold_record": ("verifold.verifold_unified", "verify_verifold_record"),
    "get_system_metrics": ("verifold.verifold_unified", "get_system_metrics"),
    "wrapper": ("verifold.verifold_unified", "wrapper"),
}


def __getattr__(name):
    """Lazy import entities on access"""
    # Check class registry first
    if name in _ENTITY_REGISTRY:
        module_path, attr_name = _ENTITY_REGISTRY[name]
        try:
            module = importlib.import_module(f".{module_path}", package=__package__)
            return getattr(module, attr_name)
        except (ImportError, AttributeError) as e:
            logger.warning(f"Failed to import {attr_name} from {module_path}: {e}")
            raise AttributeError(f"module '{__name__}' has no attribute '{name}'")

    # Check function registry
    if name in _FUNCTION_REGISTRY:
        module_path, attr_name = _FUNCTION_REGISTRY[name]
        try:
            module = importlib.import_module(f".{module_path}", package=__package__)
            return getattr(module, attr_name)
        except (ImportError, AttributeError) as e:
            logger.warning(f"Failed to import {attr_name} from {module_path}: {e}")
            raise AttributeError(f"module '{__name__}' has no attribute '{name}'")

    raise AttributeError(f"module '{__name__}' has no attribute '{name}'")


def __dir__():
    """List all available entities"""
    return list(_ENTITY_REGISTRY.keys()) + list(_FUNCTION_REGISTRY.keys())


# Export commonly used entities directly for better IDE support
__all__ = [
    "Actor",
    "PingActor",
    "PongActor",
    "SupervisedActorSystem",
    "ActorState",
    "SupervisionStrategy",
    "ActorMessage",
    "ActorRef",
    "Actor",
    "ActorSystem",
    "AIAgentActor",
    "TaskStatus",
    "SkillLevel",
    "Skill",
    "TaskAnnouncement",
    "SkillOffer",
    "WorkingGroup",
    "CoordinationProtocol",
    "SkillRegistry",
    "CoordinationHub",
]

# System metadata
__system__ = "core"
__total_entities__ = 1649
__classes__ = 592
__functions__ = 1057
