{
  "timestamp": "2025-07-30T18:33:00.576092",
  "total_systems": 13,
  "total_entities": 9404,
  "total_classes": 3504,
  "total_functions": 5900,
  "systems": [
    {
      "system": "core",
      "entity_count": 1649,
      "class_count": 592,
      "function_count": 1057,
      "files": 233,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/core_activation.py",
      "entities_by_file": {
        "minimal_actor.py": [
          [
            "class",
            "Actor",
            10
          ],
          [
            "function",
            "echo_behavior",
            29
          ],
          [
            "function",
            "send",
            19
          ]
        ],
        "fault_tolerance.py": [
          [
            "class",
            "SupervisionStrategy",
            4
          ],
          [
            "class",
            "Supervisor",
            9
          ],
          [
            "function",
            "add_child",
            16
          ],
          [
            "function",
            "handle_failure",
            19
          ]
        ],
        "apply_api_fixes.py": [
          [
            "function",
            "apply_fixes",
            12
          ]
        ],
        "integrated_system.py": [
          [
            "class",
            "DistributedAISystem",
            36
          ],
          [
            "function",
            "task_priority_score",
            71
          ]
        ],
        "ai_interface.py": [
          [
            "class",
            "LukhusAITaskType",
            52
          ],
          [
            "class",
            "LukhusAI",
            75
          ],
          [
            "function",
            "ai_code",
            206
          ],
          [
            "function",
            "ai_audit",
            213
          ],
          [
            "function",
            "ai_docs",
            220
          ],
          [
            "function",
            "ai_chat",
            227
          ],
          [
            "function",
            "ai_research",
            234
          ],
          [
            "function",
            "generate_response",
            95
          ],
          [
            "function",
            "code_assistance",
            158
          ],
          [
            "function",
            "security_audit",
            165
          ],
          [
            "function",
            "web_research",
            171
          ],
          [
            "function",
            "documentation_assist",
            177
          ],
          [
            "function",
            "creative_generation",
            183
          ],
          [
            "function",
            "analysis",
            189
          ],
          [
            "function",
            "chat",
            196
          ]
        ],
        "integration_hub.py": [
          [
            "class",
            "IntegrationConfig",
            16
          ],
          [
            "class",
            "IntegrationResult",
            36
          ],
          [
            "class",
            "UnifiedIntegration",
            47
          ],
          [
            "function",
            "register_component",
            90
          ],
          [
            "function",
            "unregister_component",
            137
          ],
          [
            "function",
            "invoke_component",
            172
          ],
          [
            "function",
            "batch_invoke",
            246
          ],
          [
            "function",
            "create_data_pipeline",
            278
          ],
          [
            "function",
            "execute_pipeline",
            323
          ],
          [
            "function",
            "get_component_status",
            400
          ],
          [
            "function",
            "get_integration_metrics",
            440
          ],
          [
            "function",
            "cleanup",
            472
          ],
          [
            "function",
            "export_configuration",
            483
          ],
          [
            "function",
            "import_configuration",
            519
          ]
        ],
        "swarm.py": [
          [
            "class",
            "ResourceState",
            31
          ],
          [
            "class",
            "SwarmAgent",
            38
          ],
          [
            "class",
            "AgentColony",
            77
          ],
          [
            "class",
            "SwarmHub",
            163
          ],
          [
            "function",
            "receive",
            58
          ],
          [
            "function",
            "update_resource_state",
            111
          ],
          [
            "function",
            "add_symbolic_tag",
            118
          ],
          [
            "function",
            "create_agent",
            124
          ],
          [
            "function",
            "populate_agents",
            132
          ],
          [
            "function",
            "handle_failure",
            159
          ],
          [
            "function",
            "register_colony",
            181
          ],
          [
            "function",
            "create_colony",
            204
          ],
          [
            "function",
            "get_colony",
            222
          ],
          [
            "function",
            "handle_heartbeat",
            225
          ],
          [
            "function",
            "update_colony_resource_state",
            231
          ],
          [
            "function",
            "check_colony_health",
            240
          ],
          [
            "function",
            "get_symbolic_address",
            270
          ]
        ],
        "resource_efficiency_analyzer.py": [
          [
            "class",
            "ResourceType",
            44
          ],
          [
            "class",
            "ResourceSnapshot",
            56
          ],
          [
            "class",
            "ResourceTrend",
            77
          ],
          [
            "class",
            "EfficiencyReport",
            91
          ],
          [
            "class",
            "ResourceEfficiencyAnalyzer",
            121
          ],
          [
            "function",
            "to_dict",
            72
          ],
          [
            "function",
            "to_json",
            116
          ],
          [
            "function",
            "start_monitoring",
            189
          ],
          [
            "function",
            "stop_monitoring",
            201
          ],
          [
            "function",
            "analyze_efficiency",
            288
          ],
          [
            "function",
            "get_quick_stats",
            969
          ],
          [
            "function",
            "export_metrics",
            982
          ]
        ],
        "quorum_override.py": [
          [
            "class",
            "QuorumOverride",
            7
          ],
          [
            "function",
            "request_access",
            12
          ]
        ],
        "resource_scheduler.py": [
          [
            "class",
            "SwarmResourceScheduler",
            11
          ],
          [
            "function",
            "schedule_task",
            15
          ]
        ],
        "plugin_registry.py": [
          [
            "class",
            "PluginType",
            18
          ],
          [
            "class",
            "Plugin",
            27
          ],
          [
            "class",
            "PluginRegistry",
            46
          ],
          [
            "function",
            "get_plugin_type",
            31
          ],
          [
            "function",
            "get_plugin_name",
            36
          ],
          [
            "function",
            "get_version",
            41
          ],
          [
            "function",
            "register_plugin",
            68
          ],
          [
            "function",
            "get_plugin",
            74
          ],
          [
            "function",
            "list_plugins",
            78
          ]
        ],
        "symbolic_contract.py": [
          [
            "class",
            "SymbolicContract",
            14
          ],
          [
            "class",
            "SymbolicContractRegistry",
            53
          ],
          [
            "function",
            "validate_propagation",
            32
          ],
          [
            "function",
            "validate_payload",
            42
          ],
          [
            "function",
            "register",
            60
          ],
          [
            "function",
            "get",
            63
          ],
          [
            "function",
            "to_json",
            66
          ]
        ],
        "actor_supervision_integration.py": [
          [
            "function",
            "patch_actor_system_for_supervision",
            16
          ],
          [
            "function",
            "patch_actor_for_supervision",
            49
          ],
          [
            "class",
            "SupervisedActorSystem",
            95
          ],
          [
            "function",
            "new_init",
            23
          ]
        ],
        "integrator.py": [
          [
            "function",
            "lukhas_tier_required",
            121
          ],
          [
            "class",
            "EnhancedCoreConfig",
            130
          ],
          [
            "class",
            "CoreMessageType",
            140
          ],
          [
            "class",
            "EnhancedCoreIntegrator",
            150
          ],
          [
            "function",
            "decorator",
            123
          ],
          [
            "function",
            "register_component",
            197
          ],
          [
            "function",
            "send_message_to_component",
            237
          ],
          [
            "function",
            "get_system_status",
            310
          ],
          [
            "function",
            "broadcast_event",
            354
          ],
          [
            "function",
            "subscribe_to_event",
            373
          ],
          [
            "class",
            "QuantumBioOscillator",
            64
          ],
          [
            "class",
            "BioOrchestrator",
            71
          ],
          [
            "class",
            "AccessTier",
            78
          ],
          [
            "class",
            "AccessController",
            83
          ],
          [
            "class",
            "QuantumAuthenticator",
            89
          ],
          [
            "class",
            "ComplianceMonitor",
            92
          ],
          [
            "class",
            "UnifiedIntegration",
            95
          ],
          [
            "function",
            "verify_component_state",
            66
          ],
          [
            "function",
            "verify_message_state",
            67
          ],
          [
            "function",
            "sign_message",
            68
          ],
          [
            "function",
            "get_coherence",
            69
          ],
          [
            "function",
            "register_component",
            73
          ],
          [
            "function",
            "process_message",
            74
          ],
          [
            "function",
            "process_event",
            75
          ],
          [
            "function",
            "get_health",
            76
          ],
          [
            "function",
            "register_component",
            85
          ],
          [
            "function",
            "check_permission",
            86
          ],
          [
            "function",
            "get_status",
            87
          ]
        ],
        "config.py": [
          [
            "class",
            "LukhasConfig",
            17
          ],
          [
            "function",
            "get_config",
            129
          ],
          [
            "function",
            "validate_database_url",
            87
          ],
          [
            "function",
            "validate_secret_strength",
            95
          ],
          [
            "function",
            "validate_environment",
            102
          ],
          [
            "function",
            "get_cors_origins_list",
            109
          ],
          [
            "function",
            "is_production",
            113
          ],
          [
            "function",
            "is_development",
            117
          ],
          [
            "class",
            "Config",
            121
          ]
        ],
        "config_manager.py": [
          [
            "function",
            "get_config",
            21
          ],
          [
            "function",
            "set_config",
            30
          ]
        ],
        "id.py": [
          [
            "class",
            "AccessTier",
            38
          ],
          [
            "class",
            "ComplianceRegion",
            46
          ],
          [
            "class",
            "EmotionalMemoryVector",
            55
          ],
          [
            "class",
            "QuantumSignature",
            75
          ],
          [
            "class",
            "AuditLogEntry",
            87
          ],
          [
            "class",
            "TraumaLockedMemory",
            119
          ],
          [
            "class",
            "ComplianceMonitor",
            298
          ],
          [
            "class",
            "LukhosIDManager",
            383
          ],
          [
            "function",
            "to_dict",
            64
          ],
          [
            "function",
            "to_dict",
            100
          ],
          [
            "function",
            "lock_memory",
            130
          ],
          [
            "function",
            "unlock_memory",
            162
          ],
          [
            "function",
            "check_compliance",
            341
          ],
          [
            "function",
            "get_compliance_status",
            683
          ]
        ],
        "distributed_tracing.py": [
          [
            "class",
            "TraceSpan",
            25
          ],
          [
            "class",
            "TraceContext",
            60
          ],
          [
            "class",
            "TraceCollector",
            148
          ],
          [
            "class",
            "DistributedTracer",
            295
          ],
          [
            "class",
            "AIAgentTracer",
            419
          ],
          [
            "function",
            "get_global_collector",
            492
          ],
          [
            "function",
            "get_global_tracer",
            500
          ],
          [
            "function",
            "create_ai_tracer",
            508
          ],
          [
            "function",
            "demo_distributed_tracing",
            513
          ],
          [
            "class",
            "AgentState",
            568
          ],
          [
            "class",
            "StateSnapshotter",
            574
          ],
          [
            "class",
            "EventReplayer",
            609
          ],
          [
            "function",
            "to_dict",
            40
          ],
          [
            "function",
            "finish",
            43
          ],
          [
            "function",
            "add_tag",
            49
          ],
          [
            "function",
            "add_log",
            53
          ],
          [
            "function",
            "span_id",
            73
          ],
          [
            "function",
            "parent_span_id",
            78
          ],
          [
            "function",
            "with_span",
            82
          ],
          [
            "function",
            "set_baggage_item",
            93
          ],
          [
            "function",
            "get_baggage_item",
            97
          ],
          [
            "function",
            "to_headers",
            101
          ],
          [
            "function",
            "from_headers",
            121
          ],
          [
            "function",
            "add_span",
            160
          ],
          [
            "function",
            "get_trace",
            210
          ],
          [
            "function",
            "get_traces_by_operation",
            229
          ],
          [
            "function",
            "get_trace_statistics",
            252
          ],
          [
            "function",
            "start_trace",
            305
          ],
          [
            "function",
            "start_span",
            338
          ],
          [
            "function",
            "finish_span",
            370
          ],
          [
            "function",
            "add_tag",
            378
          ],
          [
            "function",
            "add_log",
            385
          ],
          [
            "function",
            "trace_operation",
            395
          ],
          [
            "function",
            "get_current_context",
            414
          ],
          [
            "function",
            "trace_agent_operation",
            425
          ],
          [
            "function",
            "trace_agent_collaboration",
            448
          ],
          [
            "function",
            "trace_memory_operation",
            467
          ],
          [
            "function",
            "take_snapshot",
            581
          ],
          [
            "function",
            "restore_latest_snapshot",
            594
          ],
          [
            "function",
            "replay_trace",
            615
          ],
          [
            "function",
            "replay_agent_state",
            638
          ]
        ],
        "api_diff_analyzer.py": [
          [
            "class",
            "APICall",
            26
          ],
          [
            "class",
            "MethodSignature",
            37
          ],
          [
            "class",
            "APIMismatch",
            49
          ],
          [
            "class",
            "TestAPIExtractor",
            58
          ],
          [
            "class",
            "ImplementationAnalyzer",
            143
          ],
          [
            "class",
            "APIDiffAnalyzer",
            213
          ],
          [
            "function",
            "main",
            494
          ],
          [
            "function",
            "extract_calls",
            67
          ],
          [
            "function",
            "visit_Call",
            74
          ],
          [
            "function",
            "visit_Attribute",
            101
          ],
          [
            "function",
            "extract_signatures",
            151
          ],
          [
            "function",
            "visit_ClassDef",
            157
          ],
          [
            "function",
            "visit_FunctionDef",
            164
          ],
          [
            "function",
            "visit_AsyncFunctionDef",
            189
          ],
          [
            "function",
            "analyze",
            222
          ]
        ],
        "p2p_fabric.py": [
          [
            "class",
            "P2PNode",
            13
          ],
          [
            "function",
            "connect",
            51
          ],
          [
            "function",
            "broadcast",
            68
          ]
        ],
        "benchmark_swarm.py": [
          [
            "function",
            "bench_behavior",
            13
          ],
          [
            "function",
            "event_to_actor_bridge",
            19
          ],
          [
            "function",
            "handle_event",
            22
          ]
        ],
        "event_replayer.py": [
          [
            "class",
            "EventReplayer",
            20
          ],
          [
            "function",
            "replay_ethical_events",
            74
          ],
          [
            "function",
            "filter_events_by_tag",
            56
          ],
          [
            "function",
            "replay_events",
            61
          ]
        ],
        "image_processing_pipeline.py": [
          [
            "class",
            "EventType",
            63
          ],
          [
            "class",
            "ImageEvent",
            85
          ],
          [
            "class",
            "ProcessingStage",
            106
          ],
          [
            "class",
            "ImageProcessingColony",
            116
          ],
          [
            "class",
            "ColonySupervisor",
            433
          ],
          [
            "class",
            "ImageProcessingWorker",
            449
          ],
          [
            "class",
            "ValidationColony",
            478
          ],
          [
            "class",
            "PreprocessingColony",
            538
          ],
          [
            "class",
            "FeatureExtractionColony",
            583
          ],
          [
            "class",
            "ClassificationColony",
            629
          ],
          [
            "class",
            "ThumbnailColony",
            673
          ],
          [
            "class",
            "AggregationColony",
            713
          ],
          [
            "class",
            "ImageProcessingPipeline",
            832
          ],
          [
            "function",
            "to_dict",
            95
          ],
          [
            "function",
            "from_dict",
            101
          ],
          [
            "function",
            "handle_worker_failure",
            442
          ],
          [
            "function",
            "is_healthy",
            472
          ],
          [
            "function",
            "get_pipeline_stats",
            913
          ],
          [
            "class",
            "EventBus",
            49
          ],
          [
            "function",
            "subscribe",
            53
          ],
          [
            "function",
            "publish",
            56
          ]
        ],
        "symbolic_drift_analyzer.py": [
          [
            "class",
            "DriftAlertLevel",
            73
          ],
          [
            "class",
            "PatternTrend",
            81
          ],
          [
            "class",
            "EntropyMetrics",
            91
          ],
          [
            "class",
            "TagVarianceMetrics",
            112
          ],
          [
            "class",
            "DriftAlert",
            135
          ],
          [
            "class",
            "SymbolicDriftAnalyzer",
            157
          ],
          [
            "function",
            "to_dict",
            100
          ],
          [
            "function",
            "to_dict",
            122
          ],
          [
            "function",
            "to_dict",
            145
          ],
          [
            "function",
            "calculate_shannon_entropy",
            235
          ],
          [
            "function",
            "calculate_tag_entropy",
            259
          ],
          [
            "function",
            "calculate_temporal_entropy",
            263
          ],
          [
            "function",
            "calculate_semantic_entropy",
            298
          ],
          [
            "function",
            "calculate_tag_variance",
            317
          ],
          [
            "function",
            "detect_pattern_trend",
            462
          ],
          [
            "function",
            "check_ethical_drift",
            514
          ],
          [
            "function",
            "register_alert_callback",
            842
          ],
          [
            "function",
            "generate_cli_summary",
            946
          ],
          [
            "function",
            "export_analysis_report",
            1091
          ],
          [
            "function",
            "print_alert",
            1126
          ],
          [
            "function",
            "print_alert",
            1187
          ]
        ],
        "oracle_nervous_system.py": [
          [
            "class",
            "OracleCapabilityType",
            61
          ],
          [
            "class",
            "OracleIntegrationLevel",
            71
          ],
          [
            "class",
            "OracleCapability",
            80
          ],
          [
            "class",
            "NervousSystemRequest",
            94
          ],
          [
            "class",
            "NervousSystemResponse",
            109
          ],
          [
            "class",
            "OracleNervousSystem",
            123
          ]
        ],
        "integrated_safety_system.py": [
          [
            "class",
            "SafetyEventType",
            75
          ],
          [
            "class",
            "SafetyLevel",
            89
          ],
          [
            "class",
            "SafetyEvent",
            99
          ],
          [
            "class",
            "SafetyValidationResult",
            113
          ],
          [
            "class",
            "SafetyEventBus",
            125
          ],
          [
            "class",
            "SafetyColony",
            222
          ],
          [
            "class",
            "IntegratedSafetySystem",
            384
          ],
          [
            "function",
            "get_event_metrics",
            210
          ],
          [
            "function",
            "check_circuit_breaker",
            859
          ],
          [
            "function",
            "trip_circuit_breaker",
            875
          ],
          [
            "function",
            "get_system_status",
            1006
          ]
        ],
        "tier_unification_adapter.py": [
          [
            "class",
            "TierSystemAdapter",
            38
          ],
          [
            "class",
            "OneiricTierAdapter",
            57
          ],
          [
            "class",
            "EmotionalTierAdapter",
            125
          ],
          [
            "class",
            "UnifiedTierAdapter",
            238
          ],
          [
            "function",
            "get_unified_adapter",
            332
          ],
          [
            "function",
            "oneiric_tier_required",
            341
          ],
          [
            "function",
            "emotional_tier_required",
            347
          ],
          [
            "function",
            "to_lambda_tier",
            42
          ],
          [
            "function",
            "from_lambda_tier",
            47
          ],
          [
            "function",
            "validate_access",
            52
          ],
          [
            "function",
            "to_lambda_tier",
            63
          ],
          [
            "function",
            "from_lambda_tier",
            69
          ],
          [
            "function",
            "validate_access",
            77
          ],
          [
            "function",
            "create_middleware",
            86
          ],
          [
            "function",
            "to_lambda_tier",
            138
          ],
          [
            "function",
            "from_lambda_tier",
            145
          ],
          [
            "function",
            "validate_access",
            150
          ],
          [
            "function",
            "get_emotional_access_matrix",
            159
          ],
          [
            "function",
            "normalize_any_tier",
            246
          ],
          [
            "function",
            "create_unified_decorator",
            267
          ],
          [
            "function",
            "middleware",
            88
          ],
          [
            "function",
            "decorator",
            286
          ]
        ],
        "symbolic_boot.py": [
          [
            "class",
            "SymbolicBootstrap",
            20
          ],
          [
            "function",
            "get_bootstrap",
            129
          ],
          [
            "function",
            "symbolic_boot",
            136
          ],
          [
            "function",
            "main",
            141
          ],
          [
            "function",
            "validate_workspace",
            31
          ],
          [
            "function",
            "load_system_modules",
            49
          ],
          [
            "function",
            "symbolic_boot",
            74
          ],
          [
            "function",
            "get_status",
            118
          ]
        ],
        "core_hub.py": [
          [
            "class",
            "CoreHub",
            67
          ],
          [
            "function",
            "get_core_hub",
            430
          ],
          [
            "function",
            "register_service",
            289
          ],
          [
            "function",
            "get_service",
            294
          ],
          [
            "function",
            "list_services",
            298
          ],
          [
            "function",
            "register_event_handler",
            321
          ],
          [
            "function",
            "get_endpoints",
            372
          ]
        ],
        "cluster_sharding.py": [
          [
            "class",
            "ShardManager",
            7
          ],
          [
            "function",
            "get_shard_id",
            14
          ],
          [
            "function",
            "assign_actor",
            18
          ],
          [
            "function",
            "move_actor",
            25
          ],
          [
            "function",
            "get_actor_state",
            36
          ]
        ],
        "enhanced_swarm.py": [
          [
            "class",
            "AgentState",
            35
          ],
          [
            "class",
            "MessageType",
            45
          ],
          [
            "class",
            "AgentCapability",
            58
          ],
          [
            "class",
            "AgentMemory",
            67
          ],
          [
            "class",
            "EnhancedSwarmAgent",
            90
          ],
          [
            "class",
            "EnhancedColony",
            402
          ],
          [
            "class",
            "EnhancedSwarmHub",
            855
          ],
          [
            "function",
            "remember",
            73
          ],
          [
            "function",
            "recall",
            80
          ],
          [
            "function",
            "receive",
            123
          ],
          [
            "function",
            "get_status",
            380
          ],
          [
            "function",
            "detect_emergent_patterns",
            770
          ],
          [
            "function",
            "get_colony_status",
            825
          ],
          [
            "function",
            "create_colony",
            867
          ],
          [
            "function",
            "get_swarm_status",
            1055
          ]
        ],
        "event_sourcing.py": [
          [
            "class",
            "Event",
            37
          ],
          [
            "class",
            "EventStore",
            57
          ],
          [
            "class",
            "EventSourcedAggregate",
            245
          ],
          [
            "class",
            "AIAgentAggregate",
            313
          ],
          [
            "class",
            "EventReplayService",
            390
          ],
          [
            "function",
            "get_global_event_store",
            492
          ],
          [
            "function",
            "to_dict",
            49
          ],
          [
            "function",
            "from_dict",
            53
          ],
          [
            "function",
            "append_event",
            110
          ],
          [
            "function",
            "get_events_for_aggregate",
            141
          ],
          [
            "function",
            "get_events_by_correlation_id",
            176
          ],
          [
            "function",
            "get_events_in_time_range",
            209
          ],
          [
            "function",
            "replay_events",
            258
          ],
          [
            "function",
            "apply_event",
            269
          ],
          [
            "function",
            "raise_event",
            273
          ],
          [
            "function",
            "commit_events",
            300
          ],
          [
            "function",
            "apply_event",
            326
          ],
          [
            "function",
            "create_agent",
            352
          ],
          [
            "function",
            "assign_task",
            358
          ],
          [
            "function",
            "complete_task",
            369
          ],
          [
            "function",
            "update_memory",
            377
          ],
          [
            "function",
            "add_capability",
            385
          ],
          [
            "function",
            "replay_aggregate_to_point_in_time",
            399
          ],
          [
            "function",
            "get_causal_chain",
            421
          ],
          [
            "function",
            "analyze_agent_behavior",
            427
          ]
        ],
        "specialized_colonies.py": [
          [
            "class",
            "ReasoningColony",
            11
          ],
          [
            "class",
            "MemoryColony",
            16
          ],
          [
            "class",
            "CreativityColony",
            21
          ]
        ],
        "symbolic_arbitration.py": [
          [
            "class",
            "TagConflictResolver",
            12
          ],
          [
            "class",
            "TagLineageTracker",
            40
          ],
          [
            "function",
            "resolve",
            19
          ],
          [
            "function",
            "add_event",
            47
          ],
          [
            "function",
            "get_history",
            50
          ]
        ],
        "core_system.py": [
          [
            "class",
            "LukhasCore",
            19
          ],
          [
            "function",
            "get_lukhas_core",
            91
          ],
          [
            "function",
            "get_status",
            77
          ]
        ],
        "bio_symbolic_swarm_hub.py": [
          [
            "class",
            "BioSymbolicSwarmHub",
            42
          ],
          [
            "function",
            "create_bio_colony",
            65
          ],
          [
            "function",
            "create_oracle_colony",
            107
          ]
        ],
        "energy_consumption_analysis.py": [
          [
            "class",
            "EnergyComponent",
            59
          ],
          [
            "class",
            "EnergyProfile",
            71
          ],
          [
            "class",
            "EnergyMetric",
            81
          ],
          [
            "class",
            "EnergyBudget",
            110
          ],
          [
            "class",
            "EnergyModel",
            142
          ],
          [
            "class",
            "EnergyConsumptionAnalyzer",
            239
          ],
          [
            "class",
            "EnergyAwareComponent",
            627
          ],
          [
            "function",
            "power_watts",
            91
          ],
          [
            "function",
            "to_dict",
            97
          ],
          [
            "function",
            "remaining_budget",
            118
          ],
          [
            "function",
            "budget_percentage_used",
            122
          ],
          [
            "function",
            "time_elapsed",
            128
          ],
          [
            "function",
            "is_within_budget",
            132
          ],
          [
            "function",
            "reset",
            136
          ],
          [
            "function",
            "record_observation",
            154
          ],
          [
            "function",
            "predict_energy",
            168
          ],
          [
            "function",
            "record_energy_consumption",
            300
          ],
          [
            "function",
            "create_budget",
            333
          ],
          [
            "function",
            "set_active_budget",
            352
          ],
          [
            "function",
            "predict_operation_energy",
            361
          ],
          [
            "function",
            "get_energy_statistics",
            386
          ],
          [
            "function",
            "set_energy_profile",
            457
          ],
          [
            "function",
            "export_metrics",
            603
          ]
        ],
        "practical_optimizations.py": [
          [
            "class",
            "OptimizationStrategy",
            45
          ],
          [
            "class",
            "CacheEntry",
            60
          ],
          [
            "class",
            "AdaptiveCache",
            94
          ],
          [
            "class",
            "ObjectPool",
            284
          ],
          [
            "class",
            "LazyComputation",
            393
          ],
          [
            "class",
            "DeferredComputation",
            438
          ],
          [
            "class",
            "BatchProcessor",
            465
          ],
          [
            "class",
            "MemoryMappedStorage",
            590
          ],
          [
            "class",
            "ComputationReuse",
            698
          ],
          [
            "class",
            "ResourceManager",
            823
          ],
          [
            "function",
            "optimize_swarm_communication",
            1022
          ],
          [
            "function",
            "deserialize_swarm_message",
            1042
          ],
          [
            "function",
            "apply",
            49
          ],
          [
            "function",
            "get_metrics",
            54
          ],
          [
            "function",
            "is_expired",
            70
          ],
          [
            "function",
            "access",
            76
          ],
          [
            "function",
            "score",
            82
          ],
          [
            "function",
            "get",
            133
          ],
          [
            "function",
            "put",
            171
          ],
          [
            "function",
            "clear_expired",
            251
          ],
          [
            "function",
            "apply",
            263
          ],
          [
            "function",
            "get_metrics",
            267
          ],
          [
            "function",
            "acquire",
            328
          ],
          [
            "function",
            "release",
            351
          ],
          [
            "function",
            "borrowed",
            365
          ],
          [
            "function",
            "apply",
            373
          ],
          [
            "function",
            "get_metrics",
            377
          ],
          [
            "function",
            "lazy_property",
            406
          ],
          [
            "function",
            "defer",
            418
          ],
          [
            "function",
            "apply",
            423
          ],
          [
            "function",
            "get_metrics",
            427
          ],
          [
            "function",
            "get",
            447
          ],
          [
            "function",
            "is_computed",
            455
          ],
          [
            "function",
            "add",
            505
          ],
          [
            "function",
            "flush",
            562
          ],
          [
            "function",
            "apply",
            567
          ],
          [
            "function",
            "get_metrics",
            572
          ],
          [
            "function",
            "shutdown",
            583
          ],
          [
            "function",
            "store_array",
            611
          ],
          [
            "function",
            "get_array",
            645
          ],
          [
            "function",
            "apply",
            674
          ],
          [
            "function",
            "get_metrics",
            681
          ],
          [
            "function",
            "cleanup",
            690
          ],
          [
            "function",
            "memoize",
            717
          ],
          [
            "function",
            "share_computation",
            754
          ],
          [
            "function",
            "invalidate_dependents",
            781
          ],
          [
            "function",
            "apply",
            801
          ],
          [
            "function",
            "get_metrics",
            805
          ],
          [
            "function",
            "get_strategy",
            902
          ],
          [
            "function",
            "get_all_metrics",
            906
          ],
          [
            "function",
            "optimize_computation",
            913
          ],
          [
            "function",
            "optimize_memory_access",
            955
          ],
          [
            "function",
            "create_resource_report",
            987
          ],
          [
            "function",
            "expensive_computation",
            1068
          ],
          [
            "class",
            "ExpensiveObject",
            1086
          ],
          [
            "function",
            "fibonacci",
            1124
          ],
          [
            "function",
            "wrapper",
            411
          ],
          [
            "function",
            "decorator",
            719
          ],
          [
            "function",
            "reset",
            1091
          ],
          [
            "function",
            "wrapper",
            721
          ]
        ],
        "fallback_services.py": [
          [
            "class",
            "FallbackEthicsService",
            26
          ],
          [
            "class",
            "FallbackMemoryService",
            56
          ],
          [
            "class",
            "FallbackCreativityService",
            95
          ],
          [
            "class",
            "FallbackConsciousnessService",
            123
          ],
          [
            "class",
            "FallbackLearningService",
            161
          ],
          [
            "class",
            "FallbackQuantumService",
            191
          ],
          [
            "class",
            "FallbackIdentityClient",
            220
          ],
          [
            "function",
            "assess_action",
            33
          ],
          [
            "function",
            "check_compliance",
            44
          ],
          [
            "function",
            "store_memory",
            63
          ],
          [
            "function",
            "retrieve_memory",
            74
          ],
          [
            "function",
            "search_memory",
            84
          ],
          [
            "function",
            "generate_content",
            102
          ],
          [
            "function",
            "synthesize_dream",
            112
          ],
          [
            "function",
            "process_awareness",
            130
          ],
          [
            "function",
            "introspect",
            140
          ],
          [
            "function",
            "get_consciousness_state",
            150
          ],
          [
            "function",
            "learn_from_data",
            168
          ],
          [
            "function",
            "adapt_behavior",
            179
          ],
          [
            "function",
            "quantum_compute",
            198
          ],
          [
            "function",
            "quantum_entangle",
            208
          ],
          [
            "function",
            "verify_user_access",
            227
          ],
          [
            "function",
            "log_activity",
            235
          ]
        ],
        "consistency_manager.py": [
          [
            "class",
            "Consistency",
            11
          ],
          [
            "class",
            "ConsistencyManager",
            15
          ]
        ],
        "module_registry.py": [
          [
            "class",
            "ModuleInfo",
            70
          ],
          [
            "class",
            "ModuleRegistry",
            86
          ],
          [
            "function",
            "require_tier",
            446
          ],
          [
            "function",
            "register_module",
            120
          ],
          [
            "function",
            "get_module",
            192
          ],
          [
            "function",
            "require_module_tier",
            234
          ],
          [
            "function",
            "list_modules",
            295
          ],
          [
            "function",
            "get_module_health",
            323
          ],
          [
            "function",
            "register_core_connections",
            338
          ],
          [
            "function",
            "register_connection",
            394
          ],
          [
            "function",
            "shutdown",
            426
          ],
          [
            "class",
            "TierLevel",
            60
          ],
          [
            "function",
            "decorator",
            242
          ],
          [
            "function",
            "wrapper",
            244
          ]
        ],
        "event_bus.py": [
          [
            "class",
            "DreamEventType",
            14
          ],
          [
            "class",
            "Event",
            33
          ],
          [
            "class",
            "EventBus",
            46
          ],
          [
            "function",
            "subscribe",
            72
          ],
          [
            "function",
            "unsubscribe",
            78
          ],
          [
            "function",
            "subscribe_to_dream_events",
            265
          ],
          [
            "function",
            "get_event_bus_stats",
            353
          ],
          [
            "function",
            "filtered_callback",
            277
          ]
        ],
        "notion_sync.py": [
          [
            "function",
            "make_code_block",
            98
          ],
          [
            "function",
            "make_toggle_block",
            114
          ],
          [
            "function",
            "make_flat_block",
            144
          ],
          [
            "function",
            "make_minimal_block",
            172
          ],
          [
            "function",
            "generate_summary",
            185
          ],
          [
            "function",
            "sync_to_notion_legacy",
            212
          ],
          [
            "function",
            "log_audit_with_lid",
            236
          ],
          [
            "function",
            "log_audit_with_lid",
            239
          ],
          [
            "function",
            "run_legacy_streamlit_mode",
            258
          ],
          [
            "class",
            "LambdaLoggerAdapter",
            509
          ],
          [
            "function",
            "print_banner",
            515
          ],
          [
            "function",
            "test_system",
            602
          ],
          [
            "function",
            "main",
            641
          ],
          [
            "function",
            "process",
            510
          ],
          [
            "function",
            "schedule_sync",
            474
          ]
        ],
        "core_utilities.py": [
          [
            "function",
            "echo_behavior",
            24
          ],
          [
            "function",
            "get_resource_efficiency_table",
            28
          ],
          [
            "class",
            "Actor",
            32
          ],
          [
            "class",
            "QuorumOverride",
            50
          ],
          [
            "class",
            "ReasoningColony",
            62
          ],
          [
            "class",
            "MemoryColony",
            68
          ],
          [
            "class",
            "CreativityColony",
            74
          ],
          [
            "class",
            "Consistency",
            80
          ],
          [
            "class",
            "ConsistencyManager",
            84
          ],
          [
            "class",
            "IntegrityProbe",
            101
          ],
          [
            "class",
            "QuantizedCycleManager",
            117
          ],
          [
            "class",
            "ResourceEfficiencyAnalyzer",
            133
          ],
          [
            "function",
            "send",
            42
          ],
          [
            "function",
            "request_access",
            56
          ],
          [
            "function",
            "run_consistency_check",
            111
          ],
          [
            "function",
            "collect_metrics",
            136
          ]
        ],
        "supervision.py": [
          [
            "class",
            "SupervisionDirective",
            24
          ],
          [
            "class",
            "RestartPolicy",
            33
          ],
          [
            "class",
            "FailureInfo",
            43
          ],
          [
            "class",
            "SupervisionStrategy",
            55
          ],
          [
            "class",
            "SupervisionDecider",
            71
          ],
          [
            "class",
            "DefaultSupervisionDecider",
            80
          ],
          [
            "class",
            "AllForOneStrategy",
            131
          ],
          [
            "class",
            "OneForOneStrategy",
            138
          ],
          [
            "class",
            "RestForOneStrategy",
            148
          ],
          [
            "class",
            "CircuitBreaker",
            173
          ],
          [
            "class",
            "SupervisorActor",
            232
          ],
          [
            "class",
            "RootSupervisor",
            503
          ],
          [
            "function",
            "calculate_restart_delay",
            65
          ],
          [
            "function",
            "register_child",
            155
          ],
          [
            "function",
            "get_affected_children",
            164
          ],
          [
            "function",
            "record_success",
            191
          ],
          [
            "function",
            "record_failure",
            200
          ],
          [
            "function",
            "can_proceed",
            211
          ],
          [
            "function",
            "reset",
            224
          ],
          [
            "function",
            "get_supervision_stats",
            483
          ],
          [
            "class",
            "DepartmentSupervisor",
            560
          ]
        ],
        "bot.py": [
          [
            "class",
            "BotMode",
            26
          ],
          [
            "class",
            "TaskType",
            35
          ],
          [
            "class",
            "ComponentType",
            48
          ],
          [
            "class",
            "UnifiedBot",
            57
          ],
          [
            "function",
            "create_bot",
            227
          ],
          [
            "function",
            "create_auditor",
            232
          ],
          [
            "function",
            "create_doc_generator",
            237
          ],
          [
            "function",
            "create_web_manager",
            242
          ],
          [
            "function",
            "create_agent",
            247
          ],
          [
            "function",
            "process_task",
            86
          ],
          [
            "function",
            "run_component_task",
            174
          ]
        ],
        "common.py": [
          [
            "class",
            "ComponentStatus",
            14
          ],
          [
            "class",
            "MessageType",
            22
          ],
          [
            "function",
            "get_timestamp",
            31
          ],
          [
            "function",
            "validate_component_id",
            35
          ],
          [
            "class",
            "BaseComponent",
            46
          ],
          [
            "class",
            "BaseMessage",
            65
          ],
          [
            "class",
            "ComponentError",
            81
          ],
          [
            "class",
            "ValidationError",
            85
          ],
          [
            "class",
            "CommunicationError",
            89
          ],
          [
            "function",
            "get_config",
            102
          ],
          [
            "function",
            "set_status",
            56
          ],
          [
            "function",
            "add_metadata",
            61
          ]
        ],
        "circuit_breaker.py": [
          [
            "class",
            "CircuitState",
            28
          ],
          [
            "class",
            "FailureType",
            36
          ],
          [
            "class",
            "FailureRecord",
            47
          ],
          [
            "class",
            "HealthCheck",
            59
          ],
          [
            "class",
            "AdvancedCircuitBreaker",
            68
          ],
          [
            "class",
            "CircuitBreakerOpen",
            308
          ],
          [
            "class",
            "AnomalyDetector",
            313
          ],
          [
            "class",
            "ErrorPropagationTracker",
            416
          ],
          [
            "class",
            "ConsensusValidator",
            503
          ],
          [
            "class",
            "CascadePreventionSystem",
            617
          ],
          [
            "class",
            "ActorQuarantined",
            929
          ],
          [
            "class",
            "AnomalyDetected",
            934
          ],
          [
            "function",
            "call",
            116
          ],
          [
            "function",
            "force_open",
            248
          ],
          [
            "function",
            "force_close",
            253
          ],
          [
            "function",
            "add_health_check",
            258
          ],
          [
            "function",
            "get_metrics",
            281
          ],
          [
            "function",
            "record_metric",
            340
          ],
          [
            "function",
            "detect_anomalies",
            345
          ],
          [
            "function",
            "get_anomaly_score",
            393
          ],
          [
            "function",
            "record_failure",
            435
          ],
          [
            "function",
            "is_actor_infected",
            454
          ],
          [
            "function",
            "quarantine_actor",
            459
          ],
          [
            "function",
            "is_quarantined",
            465
          ],
          [
            "function",
            "analyze_propagation_patterns",
            470
          ],
          [
            "function",
            "get_or_create_circuit_breaker",
            660
          ],
          [
            "function",
            "report_failure",
            736
          ],
          [
            "function",
            "get_system_status",
            913
          ],
          [
            "class",
            "TestActor",
            954
          ]
        ],
        "efficient_communication.py": [
          [
            "class",
            "MessagePriority",
            26
          ],
          [
            "class",
            "CommunicationMode",
            35
          ],
          [
            "class",
            "Message",
            44
          ],
          [
            "class",
            "MessageRouter",
            100
          ],
          [
            "class",
            "EventBus",
            172
          ],
          [
            "class",
            "P2PChannel",
            271
          ],
          [
            "class",
            "EfficientCommunicationFabric",
            351
          ],
          [
            "class",
            "EnergyMonitor",
            509
          ],
          [
            "function",
            "is_expired",
            88
          ],
          [
            "function",
            "to_dict",
            92
          ],
          [
            "function",
            "register_node",
            113
          ],
          [
            "function",
            "select_communication_mode",
            126
          ],
          [
            "function",
            "find_optimal_path",
            148
          ],
          [
            "function",
            "can_afford_message",
            156
          ],
          [
            "function",
            "record_message_sent",
            160
          ],
          [
            "function",
            "subscribe",
            199
          ],
          [
            "function",
            "unsubscribe",
            203
          ],
          [
            "function",
            "get_connection_stats",
            335
          ],
          [
            "function",
            "subscribe_to_events",
            441
          ],
          [
            "function",
            "get_communication_stats",
            450
          ],
          [
            "function",
            "get_statistics",
            463
          ],
          [
            "function",
            "record_energy_usage",
            520
          ],
          [
            "function",
            "get_stats",
            533
          ]
        ],
        "observability_steering.py": [
          [
            "class",
            "ObservabilityLevel",
            27
          ],
          [
            "class",
            "SystemHealth",
            35
          ],
          [
            "class",
            "ActorSnapshot",
            44
          ],
          [
            "class",
            "MessageFlow",
            58
          ],
          [
            "class",
            "EmergentPattern",
            70
          ],
          [
            "class",
            "ObservabilityCollector",
            82
          ],
          [
            "class",
            "SteeringController",
            309
          ],
          [
            "class",
            "ObservableActor",
            397
          ],
          [
            "class",
            "ObservabilityDashboard",
            518
          ],
          [
            "function",
            "start",
            113
          ],
          [
            "function",
            "stop",
            123
          ],
          [
            "function",
            "record_actor_snapshot",
            130
          ],
          [
            "function",
            "record_message_flow",
            143
          ],
          [
            "function",
            "record_system_event",
            152
          ],
          [
            "function",
            "register_pattern_detector",
            161
          ],
          [
            "function",
            "get_system_overview",
            296
          ],
          [
            "function",
            "register_steering_policy",
            384
          ],
          [
            "function",
            "get_custom_metrics",
            513
          ],
          [
            "function",
            "register_visualization",
            528
          ],
          [
            "function",
            "get_pattern_summary",
            578
          ],
          [
            "class",
            "ObservableAgent",
            607
          ],
          [
            "function",
            "get_custom_metrics",
            612
          ]
        ],
        "integrity_probe.py": [
          [
            "class",
            "IntegrityProbe",
            18
          ],
          [
            "function",
            "run_consistency_check",
            28
          ]
        ],
        "collaboration.py": [
          [
            "class",
            "ReactiveDataPipeline",
            12
          ],
          [
            "class",
            "DynamicTaskNegotiation",
            38
          ],
          [
            "class",
            "SelfOrganizingSwarm",
            71
          ],
          [
            "function",
            "run_pipeline",
            22
          ],
          [
            "function",
            "run_negotiation",
            48
          ],
          [
            "function",
            "run_training",
            79
          ]
        ],
        "task_manager.py": [
          [
            "class",
            "TaskStatus",
            23
          ],
          [
            "class",
            "TaskPriority",
            33
          ],
          [
            "class",
            "Task",
            42
          ],
          [
            "class",
            "TaskQueue",
            64
          ],
          [
            "class",
            "Agent",
            73
          ],
          [
            "class",
            "Lukh\u03bbsTaskManager",
            83
          ],
          [
            "function",
            "add_queue",
            224
          ],
          [
            "function",
            "register_agent",
            229
          ],
          [
            "function",
            "create_task",
            234
          ],
          [
            "function",
            "get_task_status",
            362
          ],
          [
            "function",
            "get_system_status",
            381
          ]
        ],
        "validation_script_fixes.py": [
          [
            "function",
            "fix_validation_script",
            16
          ],
          [
            "function",
            "fix_efficient_communication",
            93
          ],
          [
            "function",
            "main",
            156
          ],
          [
            "function",
            "replace_send_message",
            31
          ],
          [
            "function",
            "add_message_count",
            109
          ],
          [
            "function",
            "add_counter_increment",
            136
          ]
        ],
        "mailbox.py": [
          [
            "class",
            "MessagePriority",
            29
          ],
          [
            "class",
            "MailboxType",
            38
          ],
          [
            "class",
            "PrioritizedMessage",
            47
          ],
          [
            "class",
            "DeadLetterQueue",
            62
          ],
          [
            "class",
            "BackPressureStrategy",
            91
          ],
          [
            "class",
            "Mailbox",
            99
          ],
          [
            "class",
            "UnboundedMailbox",
            145
          ],
          [
            "class",
            "BoundedMailbox",
            174
          ],
          [
            "class",
            "PriorityMailbox",
            237
          ],
          [
            "class",
            "PersistentMailbox",
            360
          ],
          [
            "class",
            "MailboxFactory",
            471
          ],
          [
            "class",
            "MailboxActor",
            509
          ],
          [
            "function",
            "qsize",
            126
          ],
          [
            "function",
            "is_full",
            130
          ],
          [
            "function",
            "get_stats",
            136
          ],
          [
            "function",
            "qsize",
            169
          ],
          [
            "function",
            "qsize",
            232
          ],
          [
            "function",
            "qsize",
            351
          ],
          [
            "function",
            "get_priority_stats",
            355
          ],
          [
            "function",
            "create_mailbox",
            475
          ],
          [
            "function",
            "add_message_filter",
            529
          ],
          [
            "function",
            "get_mailbox_stats",
            631
          ],
          [
            "class",
            "PriorityActor",
            654
          ]
        ],
        "event_replay_snapshot.py": [
          [
            "class",
            "EventType",
            30
          ],
          [
            "class",
            "Event",
            42
          ],
          [
            "class",
            "ActorStateSnapshot",
            80
          ],
          [
            "class",
            "EventStore",
            134
          ],
          [
            "class",
            "SnapshotStore",
            378
          ],
          [
            "class",
            "EventSourcedActor",
            480
          ],
          [
            "class",
            "ReplayController",
            646
          ],
          [
            "function",
            "to_json",
            52
          ],
          [
            "function",
            "from_json",
            65
          ],
          [
            "function",
            "create_from_actor",
            91
          ],
          [
            "function",
            "restore_to_actor",
            124
          ],
          [
            "class",
            "DemoActor",
            765
          ]
        ],
        "automatic_testing_system.py": [
          [
            "class",
            "TestOperation",
            61
          ],
          [
            "class",
            "TestSession",
            85
          ],
          [
            "class",
            "PerformanceMonitor",
            105
          ],
          [
            "class",
            "AITestAnalyzer",
            244
          ],
          [
            "class",
            "AutomaticTestingSystem",
            529
          ],
          [
            "function",
            "stop",
            1197
          ],
          [
            "function",
            "capture_metrics",
            126
          ],
          [
            "function",
            "get_performance_summary",
            187
          ],
          [
            "function",
            "analyze_operation",
            274
          ],
          [
            "function",
            "analyze_session",
            302
          ],
          [
            "function",
            "stop_watching",
            1123
          ]
        ],
        "identity_aware_base_colony.py": [
          [
            "class",
            "IdentityValidationError",
            81
          ],
          [
            "class",
            "TierAccessDeniedError",
            86
          ],
          [
            "class",
            "QuantumSecurityError",
            91
          ],
          [
            "class",
            "IdentityAwareBaseColony",
            96
          ],
          [
            "class",
            "DefaultIdentityAwareColony",
            627
          ],
          [
            "function",
            "create_identity_aware_colony",
            668
          ],
          [
            "function",
            "get_supported_capabilities_for_tier",
            588
          ],
          [
            "function",
            "get_identity_statistics",
            592
          ]
        ],
        "monitoring_observability.py": [
          [
            "class",
            "AlertSeverity",
            103
          ],
          [
            "class",
            "MetricType",
            111
          ],
          [
            "class",
            "DriftType",
            119
          ],
          [
            "class",
            "Alert",
            128
          ],
          [
            "class",
            "MetricThreshold",
            145
          ],
          [
            "class",
            "MonitoringConfig",
            156
          ],
          [
            "class",
            "DistributedTracer",
            169
          ],
          [
            "class",
            "ModelDriftDetector",
            212
          ],
          [
            "class",
            "AlertManager",
            411
          ],
          [
            "class",
            "PerformanceProfiler",
            643
          ],
          [
            "class",
            "ObservabilitySystem",
            721
          ],
          [
            "function",
            "add_span_event",
            207
          ],
          [
            "function",
            "get_performance_summary",
            700
          ]
        ],
        "quantum_identity_manager.py": [
          [
            "class",
            "QuantumSecurityLevel",
            66
          ],
          [
            "class",
            "AGIIdentityType",
            74
          ],
          [
            "class",
            "QuantumTierLevel",
            84
          ],
          [
            "class",
            "QuantumUserContext",
            100
          ],
          [
            "class",
            "QuantumIdentityManager",
            194
          ],
          [
            "function",
            "get_quantum_identity_manager",
            812
          ],
          [
            "function",
            "lambda_tier",
            94
          ],
          [
            "function",
            "to_dict",
            138
          ],
          [
            "function",
            "from_dict",
            166
          ],
          [
            "function",
            "get_identity_stats",
            781
          ]
        ],
        "swarm_identity_orchestrator.py": [
          [
            "class",
            "SwarmSyncState",
            80
          ],
          [
            "class",
            "SwarmIdentityState",
            90
          ],
          [
            "class",
            "CrossSwarmOperation",
            116
          ],
          [
            "class",
            "SwarmIdentityOrchestrator",
            129
          ],
          [
            "function",
            "get_swarm_identity_orchestrator",
            857
          ],
          [
            "function",
            "to_dict",
            101
          ],
          [
            "function",
            "get_orchestrator_statistics",
            796
          ]
        ],
        "quantized_thought_cycles.py": [
          [
            "class",
            "CyclePhase",
            24
          ],
          [
            "class",
            "CycleState",
            31
          ],
          [
            "class",
            "ThoughtQuantum",
            39
          ],
          [
            "class",
            "CycleMetrics",
            51
          ],
          [
            "class",
            "QuantizedThoughtProcessor",
            60
          ],
          [
            "function",
            "get_cycle_trace",
            348
          ],
          [
            "function",
            "get_metrics",
            352
          ]
        ],
        "quantized_cycle_manager.py": [
          [
            "class",
            "QuantizedCycleManager",
            4
          ]
        ],
        "tiered_state_management.py": [
          [
            "class",
            "StateType",
            56
          ],
          [
            "class",
            "ConsistencyLevel",
            64
          ],
          [
            "class",
            "StateSnapshot",
            73
          ],
          [
            "class",
            "StateAggregator",
            93
          ],
          [
            "class",
            "DefaultStateAggregator",
            107
          ],
          [
            "class",
            "TieredStateManager",
            134
          ],
          [
            "class",
            "StateCoordinator",
            459
          ],
          [
            "class",
            "CounterAggregator",
            580
          ],
          [
            "class",
            "MetricsAggregator",
            601
          ],
          [
            "function",
            "to_dict",
            82
          ],
          [
            "function",
            "aggregate",
            97
          ],
          [
            "function",
            "can_handle",
            102
          ],
          [
            "function",
            "aggregate",
            110
          ],
          [
            "function",
            "can_handle",
            130
          ],
          [
            "function",
            "register_aggregator",
            177
          ],
          [
            "function",
            "subscribe_to_replicated_state",
            332
          ],
          [
            "function",
            "unsubscribe_from_replicated_state",
            340
          ],
          [
            "function",
            "get_statistics",
            446
          ],
          [
            "function",
            "aggregate",
            583
          ],
          [
            "function",
            "can_handle",
            597
          ],
          [
            "function",
            "aggregate",
            604
          ],
          [
            "function",
            "can_handle",
            634
          ],
          [
            "class",
            "Event",
            43
          ]
        ],
        "hub_registry.py": [
          [
            "class",
            "HubRegistry",
            11
          ],
          [
            "function",
            "get_hub_registry",
            71
          ],
          [
            "function",
            "get_hub",
            43
          ],
          [
            "function",
            "get_all_hubs",
            50
          ]
        ],
        "targeted_api_fixes.py": [
          [
            "function",
            "apply_actor_ref_fixes",
            21
          ],
          [
            "function",
            "fix_communication_fabric",
            61
          ],
          [
            "function",
            "fix_integrated_system",
            162
          ],
          [
            "function",
            "update_validation_script",
            220
          ],
          [
            "function",
            "main",
            263
          ],
          [
            "function",
            "add_total_messages",
            77
          ],
          [
            "function",
            "add_send_large_data",
            95
          ],
          [
            "function",
            "fix_import",
            236
          ]
        ],
        "direct_ai_router.py": [
          [
            "class",
            "DirectAIRouter",
            35
          ],
          [
            "function",
            "route_ai_request",
            211
          ],
          [
            "function",
            "is_ai_available",
            226
          ],
          [
            "function",
            "route_request",
            73
          ],
          [
            "function",
            "is_available",
            168
          ]
        ],
        "identity_aware_base.py": [
          [
            "class",
            "IdentityAwareService",
            33
          ],
          [
            "class",
            "TieredOperationMixin",
            202
          ],
          [
            "class",
            "ResourceLimitedService",
            274
          ],
          [
            "function",
            "tier_required",
            389
          ],
          [
            "function",
            "identity_client",
            95
          ],
          [
            "function",
            "validate_user_tier",
            101
          ],
          [
            "function",
            "check_user_consent",
            123
          ],
          [
            "function",
            "log_user_activity",
            137
          ],
          [
            "function",
            "get_user_context",
            159
          ],
          [
            "function",
            "clear_user_cache",
            185
          ],
          [
            "function",
            "get_service_info",
            193
          ],
          [
            "function",
            "execute_tiered_operation",
            209
          ],
          [
            "function",
            "get_user_resource_limits",
            318
          ],
          [
            "function",
            "check_resource_availability",
            327
          ],
          [
            "function",
            "consume_resource",
            354
          ],
          [
            "function",
            "decorator",
            403
          ],
          [
            "class",
            "FallbackIdentityClient",
            76
          ],
          [
            "function",
            "wrapper",
            405
          ],
          [
            "function",
            "verify_user_access",
            77
          ],
          [
            "function",
            "check_consent",
            81
          ],
          [
            "function",
            "log_activity",
            85
          ]
        ],
        "actor_model.py": [
          [
            "class",
            "Actor",
            12
          ],
          [
            "class",
            "PingActor",
            39
          ],
          [
            "class",
            "PongActor",
            47
          ],
          [
            "function",
            "receive",
            27
          ],
          [
            "function",
            "send",
            33
          ],
          [
            "function",
            "receive",
            40
          ],
          [
            "function",
            "receive",
            48
          ]
        ],
        "agent_coordination.py": [
          [
            "function",
            "actorref_to_dict",
            28
          ],
          [
            "function",
            "actorref_from_dict",
            35
          ],
          [
            "class",
            "TaskStatus",
            50
          ],
          [
            "class",
            "SkillLevel",
            60
          ],
          [
            "class",
            "Skill",
            69
          ],
          [
            "class",
            "TaskAnnouncement",
            93
          ],
          [
            "class",
            "SkillOffer",
            114
          ],
          [
            "class",
            "WorkingGroup",
            126
          ],
          [
            "class",
            "CoordinationProtocol",
            152
          ],
          [
            "class",
            "SkillRegistry",
            179
          ],
          [
            "class",
            "CoordinationHub",
            226
          ],
          [
            "class",
            "AutonomousAgent",
            538
          ],
          [
            "class",
            "DataProcessorAgent",
            725
          ],
          [
            "class",
            "AnalyticsAgent",
            776
          ],
          [
            "class",
            "MLModelAgent",
            789
          ],
          [
            "function",
            "update_metrics",
            78
          ],
          [
            "function",
            "is_expired",
            105
          ],
          [
            "function",
            "add_member",
            136
          ],
          [
            "function",
            "all_skills_covered",
            145
          ],
          [
            "function",
            "get_ref",
            567
          ]
        ],
        "coordination.py": [
          [
            "class",
            "ContractNetInitiator",
            3
          ],
          [
            "class",
            "ContractNetParticipant",
            29
          ],
          [
            "function",
            "call_for_proposals",
            9
          ],
          [
            "function",
            "receive_proposal",
            14
          ],
          [
            "function",
            "award_contract",
            18
          ],
          [
            "function",
            "handle_call_for_proposals",
            34
          ],
          [
            "function",
            "can_perform_task",
            41
          ],
          [
            "function",
            "calculate_bid",
            45
          ]
        ],
        "identity_integration.py": [
          [
            "class",
            "TierMappingConfig",
            53
          ],
          [
            "function",
            "get_identity_client",
            129
          ],
          [
            "function",
            "require_identity",
            147
          ],
          [
            "class",
            "IdentityContext",
            232
          ],
          [
            "function",
            "validate_and_log",
            276
          ],
          [
            "class",
            "ModuleIntegrationExamples",
            300
          ],
          [
            "function",
            "normalize_tier",
            80
          ],
          [
            "function",
            "get_tier_index",
            120
          ],
          [
            "function",
            "decorator",
            161
          ],
          [
            "function",
            "memory_operation_example",
            305
          ],
          [
            "function",
            "dream_generation_example",
            313
          ],
          [
            "function",
            "quantum_operation_example",
            321
          ],
          [
            "function",
            "context_manager_example",
            328
          ],
          [
            "function",
            "wrapper",
            163
          ]
        ],
        "resource_efficiency.py": [
          [
            "class",
            "ResourceEfficiencyAnalyzer",
            13
          ],
          [
            "function",
            "get_resource_efficiency_table",
            29
          ],
          [
            "function",
            "collect_metrics",
            16
          ]
        ],
        "tier_aware_colony_proxy.py": [
          [
            "class",
            "ProxyInitializationError",
            75
          ],
          [
            "class",
            "ColonyNotFoundError",
            80
          ],
          [
            "class",
            "TierAwareColonyProxy",
            85
          ],
          [
            "class",
            "ColonyProxyManager",
            497
          ],
          [
            "function",
            "get_colony_proxy_manager",
            594
          ],
          [
            "function",
            "create_identity_aware_proxy",
            603
          ],
          [
            "function",
            "get_proxy_statistics",
            434
          ],
          [
            "function",
            "create_proxy",
            511
          ],
          [
            "function",
            "get_proxy",
            536
          ],
          [
            "function",
            "remove_proxy",
            540
          ],
          [
            "function",
            "get_manager_statistics",
            562
          ],
          [
            "function",
            "sync_wrapper",
            259
          ]
        ],
        "actor_system.py": [
          [
            "class",
            "ActorState",
            50
          ],
          [
            "class",
            "SupervisionStrategy",
            61
          ],
          [
            "class",
            "ActorMessage",
            70
          ],
          [
            "class",
            "ActorRef",
            86
          ],
          [
            "class",
            "Actor",
            150
          ],
          [
            "class",
            "ActorSystem",
            394
          ],
          [
            "class",
            "AIAgentActor",
            589
          ],
          [
            "function",
            "to_dict",
            82
          ],
          [
            "function",
            "register_handler",
            288
          ],
          [
            "function",
            "become",
            292
          ],
          [
            "function",
            "supervision_strategy",
            354
          ],
          [
            "function",
            "get_stats",
            374
          ],
          [
            "function",
            "get_actor_ref",
            497
          ],
          [
            "function",
            "get_actor",
            501
          ],
          [
            "function",
            "register_response_handler",
            514
          ],
          [
            "function",
            "unregister_response_handler",
            518
          ],
          [
            "function",
            "handle_response",
            522
          ],
          [
            "function",
            "get_system_stats",
            562
          ]
        ],
        "p2p_communication.py": [
          [
            "class",
            "PeerStatus",
            36
          ],
          [
            "class",
            "MessageType",
            44
          ],
          [
            "class",
            "PeerInfo",
            55
          ],
          [
            "class",
            "P2PMessage",
            80
          ],
          [
            "class",
            "P2PNode",
            118
          ],
          [
            "function",
            "to_dict",
            66
          ],
          [
            "function",
            "to_bytes",
            90
          ],
          [
            "function",
            "from_bytes",
            104
          ],
          [
            "function",
            "register_handler",
            330
          ],
          [
            "function",
            "get_network_stats",
            641
          ]
        ],
        "service_discovery.py": [
          [
            "class",
            "ServiceDiscovery",
            12
          ],
          [
            "function",
            "get_service_discovery",
            92
          ],
          [
            "function",
            "find_service",
            18
          ],
          [
            "function",
            "register_service_globally",
            47
          ],
          [
            "function",
            "list_all_services",
            56
          ]
        ],
        "global_initialization.py": [
          [
            "class",
            "GlobalSystemInitializer",
            12
          ]
        ],
        "governance.py": [
          [
            "class",
            "GovernanceLayer",
            10
          ],
          [
            "function",
            "add_rule",
            19
          ],
          [
            "function",
            "validate_action",
            27
          ]
        ],
        "state_management.py": [
          [
            "class",
            "StateManager",
            13
          ],
          [
            "function",
            "apply_event",
            45
          ],
          [
            "function",
            "log_event",
            56
          ],
          [
            "function",
            "take_snapshot",
            61
          ]
        ],
        "observatory.py": [
          [
            "class",
            "Observatory",
            15
          ],
          [
            "function",
            "get_decision_trail",
            25
          ],
          [
            "function",
            "get_system_status",
            43
          ]
        ],
        "decorators.py": [
          [
            "function",
            "lukhas_tier_required",
            62
          ],
          [
            "function",
            "glyph_bind",
            123
          ],
          [
            "function",
            "trace",
            148
          ],
          [
            "function",
            "decorator",
            133
          ],
          [
            "function",
            "decorator",
            158
          ],
          [
            "class",
            "TierLevel",
            36
          ],
          [
            "class",
            "PermissionScope",
            44
          ],
          [
            "function",
            "decorator",
            107
          ],
          [
            "function",
            "wrapper",
            135
          ],
          [
            "function",
            "wrapper",
            160
          ],
          [
            "function",
            "wrapper",
            109
          ]
        ],
        "colonies/memory_colony_enhanced.py": [
          [
            "class",
            "MemoryAgent",
            22
          ],
          [
            "class",
            "MemoryColony",
            88
          ]
        ],
        "colonies/temporal_colony.py": [
          [
            "class",
            "TemporalColony",
            12
          ],
          [
            "function",
            "snapshot_state",
            20
          ],
          [
            "function",
            "revert_last",
            25
          ],
          [
            "function",
            "get_state",
            33
          ],
          [
            "function",
            "simulate_future_state",
            49
          ]
        ],
        "colonies/creativity_colony.py": [
          [
            "class",
            "CreativityColony",
            15
          ],
          [
            "function",
            "update_task_slots",
            29
          ]
        ],
        "colonies/oracle_colony.py": [
          [
            "class",
            "OracleQuery",
            46
          ],
          [
            "class",
            "OracleResponse",
            57
          ],
          [
            "class",
            "OracleAgent",
            68
          ],
          [
            "class",
            "OracleColony",
            307
          ]
        ],
        "colonies/tensor_colony_ops.py": [
          [
            "function",
            "tags_to_tensor",
            23
          ],
          [
            "function",
            "batch_propagate",
            33
          ],
          [
            "function",
            "colony_reasoning_tensor",
            53
          ],
          [
            "function",
            "simulate_throughput",
            59
          ],
          [
            "function",
            "plot_throughput",
            69
          ]
        ],
        "colonies/memory_colony.py": [
          [
            "class",
            "MemoryColony",
            13
          ]
        ],
        "colonies/base_colony.py": [
          [
            "class",
            "ConsensusResult",
            25
          ],
          [
            "class",
            "BaseColony",
            35
          ],
          [
            "function",
            "set_governance_colony",
            70
          ],
          [
            "function",
            "get_status",
            129
          ],
          [
            "function",
            "link_symbolic_contexts",
            137
          ],
          [
            "function",
            "prune_expired_tags",
            153
          ],
          [
            "function",
            "request_permission_escalation",
            178
          ],
          [
            "function",
            "override_tag",
            187
          ],
          [
            "function",
            "entangle_tags",
            213
          ]
        ],
        "colonies/supervisor_agent.py": [
          [
            "class",
            "SupervisorAgent",
            9
          ]
        ],
        "colonies/governance_colony_enhanced.py": [
          [
            "class",
            "EthicsAgent",
            23
          ],
          [
            "class",
            "GovernanceColony",
            124
          ]
        ],
        "colonies/governance_colony.py": [
          [
            "class",
            "GovernanceColony",
            14
          ],
          [
            "function",
            "review_scenario",
            21
          ]
        ],
        "colonies/reasoning_colony.py": [
          [
            "class",
            "ReasoningColony",
            27
          ],
          [
            "function",
            "propagate_tags",
            251
          ],
          [
            "class",
            "SymbolAwareTieredMemory",
            21
          ]
        ],
        "colonies/ethics_swarm_colony.py": [
          [
            "class",
            "EthicalDecisionType",
            69
          ],
          [
            "class",
            "SwarmConsensusMethod",
            79
          ],
          [
            "class",
            "EthicalDriftLevel",
            88
          ],
          [
            "class",
            "EthicalAgent",
            98
          ],
          [
            "class",
            "EthicalScenario",
            110
          ],
          [
            "class",
            "SimulationResult",
            123
          ],
          [
            "class",
            "EthicalDecisionRequest",
            137
          ],
          [
            "class",
            "EthicalDecisionResponse",
            149
          ],
          [
            "class",
            "EthicsSwarmColony",
            165
          ],
          [
            "class",
            "MockCollapseTracker",
            1172
          ],
          [
            "class",
            "MockVeriFoldConnector",
            1176
          ],
          [
            "class",
            "MockDriftMonitor",
            1180
          ],
          [
            "class",
            "BasicEthicalSimulator",
            1187
          ],
          [
            "class",
            "EthicalSimulationEngine",
            1201
          ]
        ],
        "symbolic_bridge/token_map.py": [
          [
            "class",
            "BridgeTokenMap",
            10
          ],
          [
            "function",
            "add_mapping",
            19
          ],
          [
            "function",
            "get_mapping",
            37
          ],
          [
            "function",
            "get_schema",
            51
          ]
        ],
        "symbolic_bridge/integrator.py": [
          [
            "class",
            "SymbolicBridgeIntegrator",
            10
          ],
          [
            "function",
            "route_symbolic_event",
            18
          ]
        ],
        "identity/mapper.py": [
          [
            "class",
            "IdentityMapper",
            27
          ],
          [
            "function",
            "create_identity_component",
            172
          ],
          [
            "function",
            "get_status",
            155
          ]
        ],
        "identity/id_manager.py": [
          [
            "function",
            "get_current_sid",
            30
          ],
          [
            "function",
            "get_user_tier",
            38
          ],
          [
            "function",
            "register_new_user",
            47
          ]
        ],
        "identity/processor.py": [
          [
            "class",
            "IdentityProcessor",
            28
          ],
          [
            "function",
            "create_identity_component",
            173
          ],
          [
            "function",
            "get_status",
            156
          ]
        ],
        "identity/engine.py": [
          [
            "class",
            "IdentityEngine",
            28
          ],
          [
            "function",
            "create_identity_component",
            173
          ],
          [
            "function",
            "get_status",
            156
          ]
        ],
        "identity/persona_engine.py": [
          [
            "class",
            "PersonaEngine",
            29
          ],
          [
            "function",
            "create_identity_component",
            174
          ],
          [
            "function",
            "get_status",
            157
          ]
        ],
        "identity/manager.py": [
          [
            "class",
            "EmotionalMemoryVector",
            36
          ],
          [
            "class",
            "SymbolicIdentityHash",
            157
          ],
          [
            "class",
            "TraumaLock",
            257
          ],
          [
            "class",
            "AdvancedIdentityManager",
            353
          ],
          [
            "function",
            "extract_vector",
            50
          ],
          [
            "function",
            "update_vector",
            106
          ],
          [
            "function",
            "get_vector",
            125
          ],
          [
            "function",
            "create_hash",
            171
          ],
          [
            "function",
            "store_hash",
            196
          ],
          [
            "function",
            "verify",
            200
          ],
          [
            "function",
            "secure",
            271
          ],
          [
            "function",
            "unlock",
            310
          ],
          [
            "function",
            "authenticate",
            391
          ],
          [
            "function",
            "register_user",
            417
          ],
          [
            "function",
            "update",
            462
          ],
          [
            "function",
            "apply_trauma_lock",
            483
          ]
        ],
        "spine/integration_orchestrator.py": [
          [
            "class",
            "ComponentInfo",
            26
          ],
          [
            "class",
            "IntegrationPlan",
            37
          ],
          [
            "class",
            "LukhasIntegrationOrchestrator",
            46
          ]
        ],
        "personality/personality.py": [
          [
            "class",
            "InteractionContext",
            50
          ],
          [
            "class",
            "CulturalStyle",
            61
          ],
          [
            "class",
            "InteractionMetrics",
            72
          ],
          [
            "class",
            "ShynessModule",
            82
          ],
          [
            "class",
            "EtiquetteEngine",
            173
          ],
          [
            "class",
            "PersonalityManager",
            252
          ],
          [
            "function",
            "get_personality_manager",
            383
          ],
          [
            "function",
            "update_shyness",
            105
          ],
          [
            "function",
            "get_interaction_style",
            153
          ],
          [
            "function",
            "set_cultural_preference",
            218
          ],
          [
            "function",
            "get_etiquette_adjustments",
            225
          ],
          [
            "function",
            "get_personality_profile",
            277
          ],
          [
            "function",
            "update_from_interaction",
            322
          ],
          [
            "function",
            "set_mood",
            346
          ],
          [
            "function",
            "set_energy_level",
            351
          ],
          [
            "function",
            "get_status",
            356
          ]
        ],
        "personality/creative_personality.py": [
          [
            "class",
            "LucasAGI",
            41
          ],
          [
            "class",
            "MetaLearningSystem",
            195
          ],
          [
            "class",
            "FederatedLearningManager",
            203
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            206
          ],
          [
            "class",
            "NeuroHaikuGenerator",
            209
          ],
          [
            "class",
            "MetaDoodler",
            212
          ],
          [
            "class",
            "EthicalProtestModule",
            215
          ],
          [
            "class",
            "KnowledgeGraph",
            218
          ],
          [
            "class",
            "HarmonyEngine",
            221
          ],
          [
            "function",
            "unified_processing",
            70
          ],
          [
            "function",
            "federated_lifecycle",
            175
          ],
          [
            "function",
            "adaptive_learning_loop",
            186
          ],
          [
            "function",
            "analyze_context",
            196
          ],
          [
            "function",
            "optimize_learning_approach",
            197
          ],
          [
            "function",
            "get_model_output",
            198
          ],
          [
            "function",
            "get_model",
            199
          ],
          [
            "function",
            "generate_insights",
            200
          ],
          [
            "function",
            "incorporate_feedback",
            201
          ],
          [
            "function",
            "contribute_gradients",
            204
          ],
          [
            "function",
            "ethical_reasoning",
            207
          ],
          [
            "function",
            "meta_haiku",
            210
          ],
          [
            "function",
            "meta_draw",
            213
          ],
          [
            "function",
            "plan_protest",
            216
          ],
          [
            "function",
            "early_fusion",
            222
          ],
          [
            "function",
            "synthesize_response",
            223
          ]
        ],
        "personality/creative_expressions.py": [
          [
            "class",
            "NeuroHaikuGenerator",
            47
          ],
          [
            "function",
            "generate_haiku",
            59
          ],
          [
            "function",
            "load_inspiration_profile",
            123
          ]
        ],
        "personality/creative_personality_clean.py": [
          [
            "class",
            "LucasAGI",
            48
          ],
          [
            "class",
            "MetaLearningSystem",
            202
          ],
          [
            "class",
            "FederatedLearningManager",
            210
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            213
          ],
          [
            "class",
            "NeuroHaikuGenerator",
            216
          ],
          [
            "class",
            "MetaDoodler",
            219
          ],
          [
            "class",
            "EthicalProtestModule",
            222
          ],
          [
            "class",
            "KnowledgeGraph",
            225
          ],
          [
            "class",
            "HarmonyEngine",
            228
          ],
          [
            "function",
            "unified_processing",
            77
          ],
          [
            "function",
            "federated_lifecycle",
            182
          ],
          [
            "function",
            "adaptive_learning_loop",
            193
          ],
          [
            "function",
            "analyze_context",
            203
          ],
          [
            "function",
            "optimize_learning_approach",
            204
          ],
          [
            "function",
            "get_model_output",
            205
          ],
          [
            "function",
            "get_model",
            206
          ],
          [
            "function",
            "generate_insights",
            207
          ],
          [
            "function",
            "incorporate_feedback",
            208
          ],
          [
            "function",
            "contribute_gradients",
            211
          ],
          [
            "function",
            "ethical_reasoning",
            214
          ],
          [
            "function",
            "meta_haiku",
            217
          ],
          [
            "function",
            "meta_draw",
            220
          ],
          [
            "function",
            "plan_protest",
            223
          ],
          [
            "function",
            "early_fusion",
            229
          ],
          [
            "function",
            "synthesize_response",
            230
          ]
        ],
        "symbolic_diagnostics/trace_repair_engine.py": [
          [
            "class",
            "TraceRepairEngine",
            39
          ],
          [
            "function",
            "repair_trace",
            47
          ]
        ],
        "utils/symbolic_utils.py": [
          [
            "function",
            "tier_label",
            6
          ],
          [
            "function",
            "summarize_emotion_vector",
            39
          ]
        ],
        "utils/dream_utils.py": [
          [
            "function",
            "load_dreams",
            20
          ],
          [
            "function",
            "get_latest_dream_timestamp",
            47
          ],
          [
            "function",
            "filter_dreams_by_tag",
            72
          ],
          [
            "function",
            "filter_dreams",
            85
          ],
          [
            "function",
            "filter_by_rem_phase",
            97
          ],
          [
            "function",
            "filter_by_collapse",
            100
          ],
          [
            "function",
            "filter_by_resonance",
            103
          ]
        ],
        "observability/collector.py": [
          [
            "class",
            "ActorMetric",
            10
          ],
          [
            "class",
            "ObservabilityCollector",
            17
          ],
          [
            "function",
            "start",
            24
          ],
          [
            "function",
            "stop",
            29
          ],
          [
            "function",
            "record_metric",
            36
          ],
          [
            "function",
            "get_metrics",
            41
          ]
        ],
        "introspection/introspector.py": [
          [
            "class",
            "ModuleIntrospector",
            27
          ],
          [
            "function",
            "analyze_module",
            278
          ],
          [
            "function",
            "report_symbolic_state",
            284
          ],
          [
            "function",
            "analyze_module",
            49
          ],
          [
            "function",
            "report_symbolic_state",
            188
          ]
        ],
        "bridges/nias_dream_bridge.py": [
          [
            "class",
            "NIASDreamBridge",
            12
          ],
          [
            "function",
            "get_nias_dream_bridge",
            206
          ],
          [
            "function",
            "setup_event_mappings",
            52
          ],
          [
            "function",
            "transform_data_nias_to_dream",
            116
          ],
          [
            "function",
            "transform_data_dream_to_nias",
            126
          ]
        ],
        "bridges/identity_core_bridge.py": [
          [
            "class",
            "IdentityCoreBridge",
            17
          ],
          [
            "function",
            "get_identity_core_bridge",
            196
          ],
          [
            "function",
            "setup_event_mappings",
            54
          ],
          [
            "function",
            "transform_data_identity_to_core",
            114
          ],
          [
            "function",
            "transform_data_core_to_identity",
            124
          ],
          [
            "function",
            "compare_states",
            171
          ]
        ],
        "bridges/consciousness_quantum_bridge.py": [
          [
            "class",
            "ConsciousnessQuantumBridge",
            16
          ],
          [
            "function",
            "get_consciousness_quantum_bridge",
            195
          ],
          [
            "function",
            "setup_event_mappings",
            53
          ],
          [
            "function",
            "transform_data_consciousness_to_quantum",
            113
          ],
          [
            "function",
            "transform_data_quantum_to_consciousness",
            123
          ],
          [
            "function",
            "compare_states",
            170
          ]
        ],
        "bridges/core_consciousness_bridge.py": [
          [
            "class",
            "CoreConsciousnessBridge",
            9
          ]
        ],
        "bridges/bio_symbolic_bridge.py": [
          [
            "class",
            "BioSymbolicBridge",
            15
          ],
          [
            "function",
            "get_bio_symbolic_bridge",
            340
          ],
          [
            "function",
            "setup_event_mappings",
            78
          ],
          [
            "function",
            "transform_data_bio_to_symbolic",
            150
          ],
          [
            "function",
            "transform_data_symbolic_to_bio",
            162
          ]
        ],
        "bridges/memory_learning_bridge.py": [
          [
            "class",
            "MemoryLearningBridge",
            12
          ],
          [
            "function",
            "get_memory_learning_bridge",
            194
          ],
          [
            "function",
            "setup_event_mappings",
            58
          ],
          [
            "function",
            "transform_data_memory_to_learning",
            132
          ],
          [
            "function",
            "transform_data_learning_to_memory",
            143
          ]
        ],
        "bridges/quantum_memory_bridge.py": [
          [
            "class",
            "QuantumMemoryBridge",
            12
          ],
          [
            "function",
            "get_quantum_memory_bridge",
            113
          ],
          [
            "function",
            "setup_event_mappings",
            39
          ],
          [
            "function",
            "transform_quantum_to_memory",
            78
          ],
          [
            "function",
            "transform_memory_to_quantum",
            86
          ]
        ],
        "bridges/orchestration_core_bridge.py": [
          [
            "class",
            "OrchestrationCoreBridge",
            17
          ],
          [
            "function",
            "get_orchestration_core_bridge",
            196
          ],
          [
            "function",
            "setup_event_mappings",
            54
          ],
          [
            "function",
            "transform_data_orchestration_to_core",
            114
          ],
          [
            "function",
            "transform_data_core_to_orchestration",
            124
          ],
          [
            "function",
            "compare_states",
            171
          ]
        ],
        "bridges/memory_consciousness_bridge.py": [
          [
            "class",
            "MemoryConsciousnessBridge",
            12
          ],
          [
            "function",
            "get_memory_consciousness_bridge",
            113
          ],
          [
            "function",
            "setup_event_mappings",
            39
          ],
          [
            "function",
            "transform_memory_to_consciousness",
            78
          ],
          [
            "function",
            "transform_consciousness_to_memory",
            86
          ]
        ],
        "bridges/core_safety_bridge.py": [
          [
            "class",
            "CoreSafetyBridge",
            17
          ],
          [
            "function",
            "get_core_safety_bridge",
            196
          ],
          [
            "function",
            "setup_event_mappings",
            54
          ],
          [
            "function",
            "transform_data_core_to_safety",
            114
          ],
          [
            "function",
            "transform_data_safety_to_core",
            124
          ],
          [
            "function",
            "compare_states",
            171
          ]
        ],
        "safety/constitutional_safety.py": [
          [
            "class",
            "SafetyViolationType",
            21
          ],
          [
            "class",
            "SafetyPrinciple",
            34
          ],
          [
            "class",
            "SafetyEvaluation",
            45
          ],
          [
            "class",
            "NIASConstitutionalSafety",
            57
          ],
          [
            "function",
            "get_constitutional_safety",
            608
          ],
          [
            "function",
            "update_constitution",
            563
          ],
          [
            "function",
            "get_safety_status",
            581
          ]
        ],
        "safety/predictive_harm_prevention.py": [
          [
            "class",
            "HarmType",
            23
          ],
          [
            "class",
            "HarmPrediction",
            38
          ],
          [
            "class",
            "PreventiveIntervention",
            51
          ],
          [
            "class",
            "SimulatedFuture",
            63
          ],
          [
            "class",
            "PredictiveHarmPrevention",
            72
          ],
          [
            "function",
            "get_predictive_harm_prevention",
            963
          ]
        ],
        "safety/adversarial_testing.py": [
          [
            "class",
            "AttackVector",
            22
          ],
          [
            "class",
            "AdversarialTest",
            36
          ],
          [
            "class",
            "TestResult",
            49
          ],
          [
            "class",
            "AdversarialSafetyTester",
            61
          ],
          [
            "function",
            "get_adversarial_tester",
            756
          ],
          [
            "function",
            "inject_systems",
            89
          ],
          [
            "function",
            "get_vulnerability_report",
            702
          ]
        ],
        "safety/multi_agent_consensus.py": [
          [
            "class",
            "AgentRole",
            22
          ],
          [
            "class",
            "AgentVote",
            35
          ],
          [
            "class",
            "ConsensusResult",
            47
          ],
          [
            "class",
            "SafetyAgent",
            60
          ],
          [
            "class",
            "MultiAgentSafetyConsensus",
            203
          ],
          [
            "function",
            "get_multi_agent_consensus",
            705
          ],
          [
            "function",
            "get_agent_performance_metrics",
            576
          ],
          [
            "function",
            "get_consensus_statistics",
            640
          ]
        ],
        "safety/ai_safety_orchestrator.py": [
          [
            "class",
            "SafetyMode",
            46
          ],
          [
            "class",
            "SafetyDecision",
            56
          ],
          [
            "class",
            "AISafetyOrchestrator",
            72
          ],
          [
            "function",
            "get_ai_safety_orchestrator",
            588
          ]
        ],
        "safety/safety_hub.py": [
          [
            "class",
            "SafetyHub",
            13
          ],
          [
            "function",
            "get_safety_hub",
            353
          ],
          [
            "function",
            "register_service",
            215
          ],
          [
            "function",
            "get_service",
            220
          ],
          [
            "function",
            "register_event_handler",
            224
          ],
          [
            "function",
            "get_safety_status",
            324
          ],
          [
            "function",
            "get_service_list",
            342
          ],
          [
            "function",
            "get_service_count",
            346
          ]
        ],
        "integrations/nias_dream_bridge.py": [
          [
            "class",
            "DreamInjectionMode",
            21
          ],
          [
            "class",
            "DreamMessage",
            30
          ],
          [
            "class",
            "NIASDreamBridge",
            45
          ],
          [
            "function",
            "get_nias_dream_bridge",
            437
          ],
          [
            "function",
            "inject_components",
            71
          ],
          [
            "function",
            "get_dream_statistics",
            403
          ]
        ],
        "symbolic_reasoning/symbolic_trace.py": [
          [
            "class",
            "SymbolicTrace",
            1
          ]
        ],
        "ethics/dream_ethics_injector.py": [
          [
            "class",
            "EthicalAnnotation",
            68
          ],
          [
            "class",
            "DreamEthicalAssessment",
            90
          ],
          [
            "class",
            "DreamEthicsInjector",
            129
          ],
          [
            "function",
            "risk_level",
            77
          ],
          [
            "function",
            "to_dict",
            103
          ],
          [
            "function",
            "get_safety_statistics",
            412
          ],
          [
            "class",
            "EthicsEngine",
            51
          ],
          [
            "class",
            "EthicalPolicy",
            55
          ],
          [
            "class",
            "PolicyViolation",
            60
          ]
        ],
        "audit/audit_decision_embedding_engine.py": [
          [
            "class",
            "DecisionAuditLevel",
            28
          ],
          [
            "class",
            "DecisionType",
            37
          ],
          [
            "class",
            "DecisionStakeholder",
            54
          ],
          [
            "class",
            "DecisionContext",
            68
          ],
          [
            "class",
            "DecisionOutcome",
            83
          ],
          [
            "class",
            "AuditTrailEntry",
            96
          ],
          [
            "class",
            "DecisionAuditColony",
            113
          ],
          [
            "class",
            "UniversalDecisionInterceptor",
            259
          ],
          [
            "class",
            "DecisionAuditDecorator",
            599
          ],
          [
            "class",
            "EventBusAuditIntegration",
            646
          ],
          [
            "function",
            "sync_wrapper",
            630
          ]
        ],
        "ai/integration_manager.py": [
          [
            "function",
            "lukhas_tier_required",
            43
          ],
          [
            "class",
            "AITask",
            52
          ],
          [
            "class",
            "AIResponse",
            60
          ],
          [
            "class",
            "AIIntegrationManager",
            67
          ],
          [
            "class",
            "TaskTemplates",
            204
          ],
          [
            "function",
            "decorator",
            44
          ],
          [
            "function",
            "use_github_copilot_cli",
            151
          ],
          [
            "function",
            "code_analysis",
            206
          ],
          [
            "class",
            "AIOHTTPClientSessionPH",
            28
          ],
          [
            "class",
            "MR",
            32
          ]
        ],
        "examples/mailbox_demo.py": [
          [
            "class",
            "SequentialCounterActor",
            23
          ],
          [
            "class",
            "PriorityTaskActor",
            51
          ],
          [
            "class",
            "BackPressureActor",
            97
          ],
          [
            "class",
            "PersistentStateActor",
            132
          ]
        ],
        "symbolism/methylation_model.py": [
          [
            "class",
            "MethylationModel",
            6
          ],
          [
            "function",
            "adjust_lifespan",
            12
          ]
        ],
        "symbolism/tags.py": [
          [
            "class",
            "TagScope",
            8
          ],
          [
            "class",
            "TagPermission",
            19
          ]
        ],
        "symbolism/archiver.py": [
          [
            "class",
            "SymbolicShellArchiver",
            16
          ],
          [
            "function",
            "get_full_symbolic_state",
            25
          ],
          [
            "function",
            "create_snapshot",
            42
          ],
          [
            "function",
            "start",
            64
          ],
          [
            "function",
            "stop",
            72
          ]
        ],
        "verifold/verifold_unified.py": [
          [
            "function",
            "require_identity",
            48
          ],
          [
            "class",
            "VeriFoldCollapseType",
            72
          ],
          [
            "class",
            "VeriFoldPhase",
            84
          ],
          [
            "class",
            "VeriFoldSnapshot",
            94
          ],
          [
            "class",
            "VeriFoldRecord",
            115
          ],
          [
            "class",
            "UnifiedVeriFoldSystem",
            128
          ],
          [
            "function",
            "get_global_verifold_system",
            581
          ],
          [
            "function",
            "generate_verifold_hash",
            590
          ],
          [
            "function",
            "verify_verifold_hash",
            603
          ],
          [
            "function",
            "decorator",
            53
          ],
          [
            "function",
            "generate_verifold_hash",
            160
          ],
          [
            "function",
            "verify_verifold_record",
            216
          ],
          [
            "function",
            "get_system_metrics",
            362
          ],
          [
            "function",
            "wrapper",
            54
          ]
        ],
        "orchestration/energy_aware_execution_planner.py": [
          [
            "class",
            "EnergyProfile",
            69
          ],
          [
            "class",
            "Priority",
            78
          ],
          [
            "class",
            "EnergyTask",
            87
          ],
          [
            "class",
            "EnergyBudget",
            110
          ],
          [
            "class",
            "EnergyMetrics",
            132
          ],
          [
            "class",
            "EnergyAwareExecutionPlanner",
            144
          ],
          [
            "function",
            "create_eaxp_instance",
            857
          ],
          [
            "function",
            "get_usable_energy",
            120
          ],
          [
            "function",
            "can_allocate",
            124
          ],
          [
            "function",
            "submit_task",
            269
          ],
          [
            "function",
            "cancel_task",
            304
          ],
          [
            "function",
            "get_task_status",
            340
          ],
          [
            "function",
            "optimize_energy_allocation",
            387
          ],
          [
            "function",
            "get_energy_metrics",
            468
          ]
        ],
        "governance/governance_colony.py": [
          [
            "class",
            "GovernanceColony",
            10
          ]
        ],
        "meta_learning/rate_modulator.py": [
          [
            "class",
            "AdaptationStrategy",
            4
          ],
          [
            "class",
            "ConvergenceSignal",
            8
          ],
          [
            "class",
            "DynamicLearningRateModulator",
            11
          ]
        ],
        "meta_learning/remediator_agent.py": [
          [
            "class",
            "RemediationLevel",
            118
          ],
          [
            "class",
            "RemediationType",
            128
          ],
          [
            "class",
            "RemediationEvent",
            140
          ],
          [
            "class",
            "RemediatorAgent",
            157
          ],
          [
            "function",
            "create_remediator_agent",
            589
          ],
          [
            "function",
            "calculate_drift_score",
            273
          ],
          [
            "function",
            "calculate_entropy_measure",
            292
          ],
          [
            "function",
            "assess_system_state",
            306
          ],
          [
            "function",
            "trigger_dream_replay",
            345
          ],
          [
            "function",
            "spawn_sub_agent",
            368
          ],
          [
            "function",
            "update_dashboard",
            385
          ],
          [
            "function",
            "emit_voice_alert",
            405
          ],
          [
            "function",
            "execute_remediation",
            419
          ],
          [
            "function",
            "check_system_health",
            472
          ],
          [
            "function",
            "run_monitoring_cycle",
            517
          ],
          [
            "function",
            "get_agent_status",
            560
          ],
          [
            "function",
            "shutdown",
            576
          ],
          [
            "function",
            "calculate_drift_score",
            76
          ],
          [
            "class",
            "QuantumMemoryManager",
            78
          ],
          [
            "class",
            "AdvancedMemoryManager",
            81
          ],
          [
            "function",
            "replay_dream_by_id",
            84
          ],
          [
            "function",
            "replay_recent_dreams",
            85
          ],
          [
            "class",
            "LucasReplayer",
            87
          ],
          [
            "class",
            "GlyphIDHasher",
            90
          ],
          [
            "function",
            "generate_collapse_hash",
            93
          ],
          [
            "class",
            "MetaLearningMonitorDashboard",
            107
          ],
          [
            "class",
            "DynamicLearningRateModulator",
            111
          ],
          [
            "function",
            "consolidate_memories",
            79
          ],
          [
            "function",
            "optimize_performance",
            82
          ],
          [
            "function",
            "replay_memories",
            88
          ],
          [
            "function",
            "generate_hash",
            91
          ],
          [
            "function",
            "update_remediation_status",
            108
          ],
          [
            "function",
            "adjust_for_drift",
            112
          ]
        ],
        "meta_learning/symbolic_feedback.py": [
          [
            "class",
            "IntentNodeHistory",
            4
          ],
          [
            "class",
            "MemoriaSnapshot",
            8
          ],
          [
            "class",
            "SymbolicFeedbackSystem",
            11
          ]
        ],
        "meta_learning/monitor_dashboard.py": [
          [
            "class",
            "LearningMetrics",
            5
          ],
          [
            "class",
            "EthicalAuditEntry",
            9
          ],
          [
            "class",
            "MetaLearningMonitorDashboard",
            12
          ]
        ],
        "meta_learning/enhancement_system.py": [
          [
            "class",
            "EnhancementMode",
            61
          ],
          [
            "class",
            "SystemIntegrationStatus",
            71
          ],
          [
            "class",
            "MetaLearningEnhancementSystem",
            84
          ]
        ],
        "symbolic/collapse/vector_ops.py": [
          [
            "function",
            "vector_collapse",
            12
          ]
        ],
        "user_interface_manager/text_handler.py": [
          [
            "class",
            "TextHandler",
            6
          ],
          [
            "function",
            "send_message",
            16
          ],
          [
            "function",
            "get_message",
            26
          ]
        ],
        "user_interface_manager/voice_handler.py": [
          [
            "class",
            "VoiceHandler",
            6
          ],
          [
            "function",
            "speak",
            17
          ],
          [
            "function",
            "listen",
            27
          ]
        ],
        "monitoring/collapse_tracker.py": [
          [
            "class",
            "CollapseAlertLevel",
            55
          ],
          [
            "class",
            "CollapseState",
            64
          ],
          [
            "class",
            "CollapseTracker",
            83
          ],
          [
            "function",
            "get_global_tracker",
            455
          ],
          [
            "function",
            "to_dict",
            75
          ],
          [
            "function",
            "calculate_shannon_entropy",
            133
          ],
          [
            "function",
            "update_entropy_score",
            164
          ],
          [
            "function",
            "record_collapse_event",
            310
          ],
          [
            "function",
            "get_collapse_history",
            358
          ],
          [
            "function",
            "get_system_health",
            382
          ],
          [
            "function",
            "generate_synthetic_test_data",
            401
          ]
        ],
        "monitoring/collapse_integration.py": [
          [
            "class",
            "CollapseIntegration",
            43
          ],
          [
            "function",
            "integrate_collapse_tracking",
            219
          ],
          [
            "function",
            "update_entropy_from_components",
            167
          ]
        ],
        "monitoring/drift_monitor.py": [
          [
            "class",
            "DriftType",
            75
          ],
          [
            "class",
            "InterventionType",
            85
          ],
          [
            "class",
            "UnifiedDriftScore",
            96
          ],
          [
            "class",
            "DriftAlert",
            113
          ],
          [
            "class",
            "UnifiedDriftMonitor",
            127
          ],
          [
            "function",
            "get_drift_summary",
            896
          ]
        ],
        "performance/orchestrator.py": [
          [
            "class",
            "IdentityClient",
            85
          ],
          [
            "class",
            "OptimizationStrategy",
            101
          ],
          [
            "class",
            "PerformanceStatus",
            110
          ],
          [
            "class",
            "PerformanceMetrics",
            120
          ],
          [
            "class",
            "OptimizationResult",
            162
          ],
          [
            "class",
            "PerformanceOrchestrator",
            176
          ],
          [
            "function",
            "verify_user_access",
            87
          ],
          [
            "function",
            "check_consent",
            89
          ],
          [
            "function",
            "log_activity",
            91
          ],
          [
            "function",
            "get_overall_score",
            134
          ]
        ],
        "infrastructure/node_collection.py": [
          [
            "class",
            "IntentNode",
            19
          ],
          [
            "class",
            "MemoryNode",
            54
          ],
          [
            "class",
            "EthicsNode",
            125
          ],
          [
            "class",
            "GoalManagementNode",
            191
          ],
          [
            "class",
            "DAOGovernanceNode",
            253
          ],
          [
            "function",
            "register_core_nodes",
            364
          ],
          [
            "function",
            "process",
            29
          ],
          [
            "function",
            "refine_intent",
            48
          ],
          [
            "function",
            "store",
            68
          ],
          [
            "function",
            "retrieve",
            89
          ],
          [
            "function",
            "evaluate_action",
            144
          ],
          [
            "function",
            "create_goal",
            203
          ],
          [
            "function",
            "update_progress",
            221
          ],
          [
            "function",
            "get_active_goals",
            240
          ],
          [
            "function",
            "get_goal",
            244
          ],
          [
            "function",
            "create_proposal",
            274
          ],
          [
            "function",
            "vote",
            291
          ]
        ],
        "infrastructure/base_node.py": [
          [
            "class",
            "Node",
            8
          ],
          [
            "function",
            "add_link",
            21
          ],
          [
            "function",
            "evolve",
            24
          ],
          [
            "function",
            "trigger_event",
            27
          ],
          [
            "function",
            "reflect",
            30
          ],
          [
            "function",
            "activate",
            33
          ]
        ],
        "infrastructure/node_registry.py": [
          [
            "class",
            "NodeRegistry",
            32
          ],
          [
            "class",
            "MessageBus",
            386
          ],
          [
            "function",
            "discover_nodes",
            56
          ],
          [
            "function",
            "register_node_type",
            93
          ],
          [
            "function",
            "create_node",
            112
          ],
          [
            "function",
            "get_node",
            161
          ],
          [
            "function",
            "send_message",
            176
          ],
          [
            "function",
            "broadcast_message",
            195
          ],
          [
            "function",
            "establish_relationship",
            212
          ],
          [
            "function",
            "initialize_standard_nodes",
            249
          ],
          [
            "function",
            "get_node_info",
            288
          ],
          [
            "function",
            "execute_node",
            327
          ],
          [
            "function",
            "send_message",
            396
          ],
          [
            "function",
            "broadcast_message",
            452
          ],
          [
            "function",
            "subscribe",
            476
          ],
          [
            "function",
            "get_messages",
            489
          ]
        ],
        "infrastructure/node_manager.py": [
          [
            "class",
            "NodeManager",
            9
          ],
          [
            "function",
            "register_node",
            80
          ],
          [
            "function",
            "discover_nodes",
            125
          ],
          [
            "function",
            "dispatch_message",
            232
          ],
          [
            "function",
            "broadcast_to_nodes",
            291
          ],
          [
            "function",
            "process_message",
            337
          ],
          [
            "function",
            "handle_node_status_change",
            402
          ]
        ],
        "modules/nias/nias_hub.py": [
          [
            "class",
            "NIASHub",
            13
          ],
          [
            "function",
            "get_nias_hub",
            182
          ],
          [
            "function",
            "register_service",
            114
          ],
          [
            "function",
            "get_service",
            119
          ],
          [
            "function",
            "register_event_handler",
            123
          ]
        ],
        "modules/nias/openai_adapter.py": [
          [
            "class",
            "ModalityType",
            25
          ],
          [
            "class",
            "MultimodalData",
            36
          ],
          [
            "class",
            "NIASOpenAIAdapter",
            46
          ],
          [
            "function",
            "get_nias_openai_adapter",
            938
          ]
        ],
        "modules/nias/dream_recorder.py": [
          [
            "class",
            "DreamRecorder",
            13
          ],
          [
            "function",
            "record_dream_message",
            306
          ],
          [
            "function",
            "get_dream_recorder",
            322
          ],
          [
            "function",
            "set_dream_recorder",
            332
          ],
          [
            "function",
            "record_dream_message",
            53
          ],
          [
            "function",
            "get_recorded_dreams",
            120
          ],
          [
            "function",
            "search_dreams",
            141
          ],
          [
            "function",
            "get_dream_stats",
            166
          ],
          [
            "function",
            "clear_dreams",
            196
          ],
          [
            "function",
            "export_dreams",
            241
          ]
        ],
        "neural_architectures/neural_integrator.py": [
          [
            "class",
            "NeuralMode",
            60
          ],
          [
            "class",
            "NeuralArchitectureType",
            69
          ],
          [
            "class",
            "NeuralPattern",
            79
          ],
          [
            "class",
            "NeuralContext",
            92
          ],
          [
            "class",
            "AdaptiveNeuralNetwork",
            102
          ],
          [
            "class",
            "NeuralIntegrator",
            211
          ],
          [
            "function",
            "forward",
            133
          ],
          [
            "function",
            "adapt_architecture",
            140
          ]
        ],
        "neural_architectures/abas/abas_quantum_specialist.py": [
          [
            "class",
            "QuantumBioCapabilityLevel",
            42
          ],
          [
            "class",
            "QuantumBioResponse",
            51
          ],
          [
            "class",
            "QuantumTunnelingEthics",
            63
          ],
          [
            "class",
            "ProtonMotiveProcessor",
            188
          ],
          [
            "class",
            "CristaeTopologyManager",
            324
          ],
          [
            "class",
            "QuantumBiologicalAGI",
            520
          ],
          [
            "function",
            "quantum_ethical_arbitration",
            79
          ],
          [
            "function",
            "create_attention_gradient",
            199
          ],
          [
            "function",
            "synthesize_symbolic_atp",
            225
          ],
          [
            "function",
            "optimize_cristae_topology",
            335
          ],
          [
            "function",
            "get_biological_status",
            841
          ]
        ],
        "interaction/symptom_reporter.py": [
          [
            "class",
            "SymptomReporter",
            11
          ]
        ],
        "services/location/geofencing_manager.py": [
          [
            "class",
            "GeofenceRegion",
            17
          ],
          [
            "class",
            "GeofencingManager",
            36
          ]
        ],
        "services/location/tracker.py": [
          [
            "class",
            "LocationUpdate",
            16
          ],
          [
            "class",
            "LocationTracker",
            29
          ],
          [
            "function",
            "add_update_callback",
            155
          ],
          [
            "function",
            "remove_update_callback",
            159
          ]
        ],
        "services/personality/personas.py": [
          [
            "function",
            "load_persona",
            43
          ]
        ],
        "services/personality/empathy.py": [
          [
            "function",
            "generate_empathic_response",
            10
          ],
          [
            "function",
            "trait_bar",
            77
          ],
          [
            "function",
            "display_visual_traits",
            84
          ]
        ],
        "interfaces/cli.py": [
          [
            "function",
            "display_mood",
            21
          ],
          [
            "function",
            "display_flashback_preview",
            26
          ],
          [
            "function",
            "display_system_status",
            36
          ],
          [
            "function",
            "voice_welcome",
            40
          ],
          [
            "function",
            "launch",
            43
          ]
        ],
        "interfaces/custom_llm.py": [
          [
            "class",
            "CustomLlm",
            34
          ],
          [
            "function",
            "log_creation",
            63
          ],
          [
            "class",
            "Config",
            55
          ]
        ],
        "interfaces/launcher.py": [
          [
            "function",
            "launch_lukhas",
            16
          ]
        ],
        "interfaces/common_interfaces.py": [
          [
            "class",
            "EthicsCheckable",
            8
          ],
          [
            "class",
            "DreamAnalyzable",
            16
          ],
          [
            "function",
            "get_ethical_context",
            12
          ],
          [
            "function",
            "get_dream_state",
            20
          ]
        ],
        "interfaces/main.py": [
          [
            "function",
            "log_event",
            25
          ],
          [
            "function",
            "symbolic_intro",
            35
          ],
          [
            "function",
            "symbolic_menu",
            46
          ],
          [
            "function",
            "launch_gui",
            55
          ],
          [
            "function",
            "launch_cli",
            59
          ],
          [
            "function",
            "launch_socket",
            63
          ],
          [
            "function",
            "launch_narration",
            67
          ],
          [
            "function",
            "main",
            71
          ]
        ],
        "interfaces/dashboad.py": [
          [
            "function",
            "generate_symbolic_html_url",
            61
          ],
          [
            "function",
            "build_publish_payload",
            65
          ],
          [
            "function",
            "show_social_post_preview",
            73
          ]
        ],
        "interfaces/web_formatter.py": [
          [
            "function",
            "load_latest_expression",
            20
          ],
          [
            "function",
            "format_html",
            28
          ],
          [
            "function",
            "format_markdown",
            37
          ],
          [
            "function",
            "format_caption",
            52
          ],
          [
            "function",
            "save_formats",
            55
          ]
        ],
        "interfaces/ui/gui_launcher.py": [
          [
            "function",
            "launch_dashboard",
            28
          ]
        ],
        "interfaces/ui/config/dashboard_settings.py": [
          [
            "function",
            "set_user_preference",
            25
          ],
          [
            "function",
            "get_user_preference",
            33
          ],
          [
            "function",
            "toggle_widget_visibility",
            39
          ],
          [
            "function",
            "list_active_widgets",
            45
          ],
          [
            "function",
            "store_paired_app",
            56
          ],
          [
            "function",
            "get_paired_apps",
            67
          ]
        ],
        "interfaces/ui/components/audio_exporter.py": [
          [
            "function",
            "generate_filename",
            78
          ],
          [
            "function",
            "export_as_text_narration",
            84
          ],
          [
            "function",
            "safe_subprocess_run",
            33
          ],
          [
            "class",
            "SecurityError",
            36
          ],
          [
            "function",
            "get_env_var",
            39
          ],
          [
            "class",
            "Args",
            74
          ]
        ],
        "interfaces/ui/adaptive/ui_orchestrator.py": [
          [
            "class",
            "AdaptiveUI",
            12
          ]
        ],
        "interfaces/tools/research/research_dashboard.py": [
          [
            "function",
            "log_session_end",
            250
          ]
        ],
        "interfaces/tools/security/session_logger.py": [
          [
            "function",
            "is_access_allowed",
            34
          ],
          [
            "function",
            "log_session_event",
            75
          ]
        ],
        "interfaces/tools/dao/dao_vote.py": [
          [
            "function",
            "cast_vote",
            31
          ],
          [
            "function",
            "main",
            51
          ]
        ],
        "interfaces/tools/dao/dao_propose.py": [
          [
            "function",
            "submit_proposal",
            31
          ],
          [
            "function",
            "main",
            53
          ]
        ],
        "interfaces/tools/cli/dream_cli.py": [
          [
            "function",
            "run_narrator_queue",
            26
          ],
          [
            "function",
            "run_voice_narrator",
            31
          ],
          [
            "function",
            "inject_test_dream",
            36
          ],
          [
            "function",
            "run_all",
            41
          ],
          [
            "function",
            "main",
            46
          ]
        ],
        "interfaces/tools/cli/command_registry.py": [
          [
            "function",
            "list_commands",
            78
          ]
        ],
        "interfaces/nias/generate_nias_docs.py": [
          [
            "function",
            "generate_nias_documentation",
            31
          ],
          [
            "function",
            "start_documentation_server",
            200
          ]
        ],
        "interfaces/logic/consent_manager.py": [
          [
            "function",
            "is_action_allowed",
            48
          ],
          [
            "function",
            "revoke_access",
            61
          ],
          [
            "function",
            "verify_or_revoke",
            77
          ]
        ],
        "interfaces/logic/delegate_logic.py": [
          [
            "function",
            "can_delegate",
            66
          ],
          [
            "function",
            "delegate_action",
            94
          ]
        ],
        "interfaces/logic/agent_logic_architecture.py": [
          [
            "function",
            "initialize_agent",
            51
          ],
          [
            "function",
            "sync_user_mood",
            62
          ],
          [
            "function",
            "verify_access_level",
            73
          ],
          [
            "function",
            "generate_response",
            84
          ],
          [
            "function",
            "store_memory_echo",
            95
          ],
          [
            "function",
            "generate_dream_digest",
            106
          ],
          [
            "function",
            "activate_delegate_mode",
            117
          ],
          [
            "function",
            "check_and_quarantine",
            128
          ],
          [
            "function",
            "ethical_review",
            139
          ]
        ],
        "interfaces/logic/agent_core.py": [
          [
            "function",
            "start_agent",
            48
          ],
          [
            "function",
            "run_agent_simulation",
            57
          ]
        ],
        "interfaces/logic/context/context_builder.py": [
          [
            "function",
            "build_user_context",
            56
          ]
        ],
        "interfaces/logic/voice/voice_renderer.py": [
          [
            "function",
            "render_voice",
            33
          ]
        ],
        "interfaces/voice/voice_agent.py": [
          [
            "function",
            "speak",
            24
          ]
        ],
        "interfaces/voice/listen.py": [
          [
            "function",
            "listen_to_human",
            17
          ],
          [
            "function",
            "gpt_symbolic_response",
            37
          ],
          [
            "function",
            "loop_symbolic_conversation",
            59
          ],
          [
            "function",
            "log_daily_entry",
            73
          ]
        ],
        "interfaces/voice/edge_voice.py": [
          [
            "function",
            "load_config",
            42
          ]
        ],
        "interfaces/voice/core/sayit.py": [
          [
            "function",
            "classify",
            7
          ],
          [
            "function",
            "route",
            20
          ]
        ],
        "interfaces/voice/voice_emotional/context_aware_modular_voice.py": [
          [
            "class",
            "NLPEngine",
            7
          ],
          [
            "class",
            "LocationAnalyzer",
            18
          ],
          [
            "class",
            "TimeAnalyzer",
            23
          ],
          [
            "class",
            "DeviceAnalyzer",
            28
          ],
          [
            "class",
            "ContextAnalyzer",
            33
          ],
          [
            "class",
            "VoiceModulator",
            157
          ],
          [
            "class",
            "MemoryManager",
            208
          ],
          [
            "class",
            "ComplianceEngine",
            272
          ],
          [
            "class",
            "SafetyGuard",
            328
          ],
          [
            "class",
            "LucasVoiceSystem",
            386
          ],
          [
            "function",
            "analyze",
            8
          ],
          [
            "function",
            "analyze",
            19
          ],
          [
            "function",
            "analyze",
            24
          ],
          [
            "function",
            "analyze",
            29
          ],
          [
            "function",
            "determine_parameters",
            169
          ],
          [
            "function",
            "store_interaction",
            213
          ],
          [
            "function",
            "get_relevant_memories",
            239
          ],
          [
            "function",
            "anonymize_metadata",
            277
          ],
          [
            "function",
            "should_retain_data",
            312
          ],
          [
            "function",
            "validate_response",
            332
          ]
        ],
        "interfaces/as_agent/core/generate_image.py": [
          [
            "function",
            "generate_symbolic_image",
            50
          ],
          [
            "function",
            "dalle_generate",
            26
          ]
        ],
        "interfaces/as_agent/core/overview_log.py": [
          [
            "function",
            "log_event",
            33
          ]
        ],
        "interfaces/as_agent/auth/vendor_hospitality_sync.py": [
          [
            "function",
            "pair_with_vendor",
            26
          ]
        ],
        "interfaces/as_agent/auth/registry.py": [
          [
            "function",
            "validate_user_tier",
            30
          ],
          [
            "function",
            "get_user_preferences",
            42
          ],
          [
            "function",
            "share_preferences",
            54
          ],
          [
            "function",
            "can_recover_full_state",
            79
          ],
          [
            "function",
            "pair_device",
            93
          ],
          [
            "function",
            "auto_login",
            108
          ]
        ],
        "interfaces/as_agent/utils/symbolic_utils.py": [
          [
            "function",
            "tier_label",
            18
          ],
          [
            "function",
            "summarize_emotion_vector",
            33
          ]
        ],
        "interfaces/as_agent/sys/nias/voice_narrator.py": [
          [
            "function",
            "narrate_dreams",
            31
          ]
        ],
        "interfaces/as_agent/sys/nias/delivery_loop.py": [
          [
            "function",
            "run_delivery_queue",
            31
          ],
          [
            "class",
            "NIASDeliveryLoop",
            45
          ]
        ],
        "interfaces/as_agent/sys/nias/feedback_log_viewer.py": [
          [
            "function",
            "view_feedback",
            29
          ]
        ],
        "interfaces/as_agent/sys/nias/dream_narrator_queue.py": [
          [
            "function",
            "extract_narratable_dreams",
            31
          ]
        ],
        "interfaces/as_agent/sys/nias/validate_payload.py": [
          [
            "function",
            "validate_payload",
            31
          ]
        ],
        "interfaces/as_agent/sys/nias/nias_core.py": [
          [
            "function",
            "push_symbolic_message",
            29
          ]
        ],
        "interfaces/as_agent/sys/nias/replay_heatmap.py": [
          [
            "function",
            "load_replay_data",
            41
          ],
          [
            "function",
            "plot_heatmap",
            59
          ]
        ],
        "interfaces/as_agent/sys/nias/generate_payload_cli.py": [
          [
            "function",
            "generate_payload",
            29
          ]
        ],
        "interfaces/as_agent/sys/nias/symbolic_reply_generator.py": [
          [
            "function",
            "generate_symbolic_reply",
            27
          ]
        ],
        "interfaces/as_agent/sys/nias/05_25_dream_clustering_engine.py": [
          [
            "function",
            "cluster_dreams_by_tag",
            47
          ]
        ],
        "interfaces/as_agent/sys/nias/symbolic_matcher.py": [
          [
            "function",
            "match_message_to_context",
            24
          ]
        ],
        "interfaces/as_agent/sys/nias/consent_filter.py": [
          [
            "function",
            "is_allowed",
            28
          ]
        ],
        "interfaces/as_agent/sys/nias/replay_visualizer.py": [
          [
            "function",
            "color_emotion",
            35
          ],
          [
            "function",
            "visualize_replays",
            49
          ]
        ],
        "interfaces/as_agent/sys/nias/dream_recorder.py": [
          [
            "function",
            "record_dream_message",
            30
          ]
        ],
        "interfaces/as_agent/sys/nias/feedback_loop.py": [
          [
            "function",
            "record_feedback",
            29
          ]
        ],
        "interfaces/as_agent/sys/nias/narration_controller.py": [
          [
            "function",
            "load_user_settings",
            34
          ],
          [
            "function",
            "filter_narration_queue",
            41
          ],
          [
            "function",
            "fetch_narration_entries",
            44
          ],
          [
            "function",
            "print_debug_narration_summary",
            52
          ]
        ],
        "interfaces/as_agent/sys/dast/dast_core.py": [
          [
            "function",
            "get_current_tags",
            30
          ],
          [
            "function",
            "add_tag",
            34
          ],
          [
            "function",
            "remove_tag",
            38
          ]
        ],
        "interfaces/as_agent/sys/dast/store.py": [
          [
            "class",
            "DASTStore",
            31
          ],
          [
            "function",
            "save_tags_to_file",
            93
          ],
          [
            "function",
            "load_tags_from_file",
            99
          ],
          [
            "function",
            "save_tags_to_file",
            65
          ],
          [
            "function",
            "load_tags_from_file",
            77
          ]
        ],
        "interfaces/as_agent/sys/dast/partner_sdk.py": [
          [
            "class",
            "PartnerSDK",
            30
          ],
          [
            "function",
            "receive_partner_input",
            92
          ],
          [
            "function",
            "receive_partner_input",
            64
          ]
        ],
        "interfaces/as_agent/sys/dast/aggregator.py": [
          [
            "class",
            "DASTAggregator",
            53
          ],
          [
            "function",
            "get_aggregator",
            154
          ],
          [
            "function",
            "aggregate_dast_tags",
            179
          ],
          [
            "function",
            "aggregate_symbolic_tags",
            185
          ],
          [
            "function",
            "aggregate_symbolic_tags",
            105
          ],
          [
            "function",
            "get_status",
            134
          ]
        ],
        "interfaces/as_agent/sys/dast/dast.py": [
          [
            "function",
            "register_task",
            28
          ],
          [
            "function",
            "dispatch",
            41
          ],
          [
            "function",
            "handle_dream_summary",
            70
          ],
          [
            "function",
            "handle_delegate_payment",
            77
          ],
          [
            "function",
            "handle_ethical_signal",
            83
          ],
          [
            "function",
            "wrapper",
            32
          ]
        ],
        "interfaces/as_agent/sys/dast/schedule_manager.py": [
          [
            "function",
            "is_time_to_deliver",
            24
          ]
        ],
        "interfaces/as_agent/sys/dast/launcher.py": [
          [
            "function",
            "startup_sequence",
            27
          ]
        ],
        "interfaces/as_agent/sys/abas/abas.py": [
          [
            "function",
            "is_allowed_now",
            24
          ]
        ],
        "interfaces/as_agent/widgets/live_renderer_widget.py": [
          [
            "function",
            "render_widget_preview",
            25
          ]
        ],
        "interfaces/as_agent/widgets/terminal_widget.py": [
          [
            "function",
            "render_terminal_widget",
            24
          ],
          [
            "function",
            "show_dst_status",
            45
          ]
        ],
        "interfaces/as_agent/widgets/widget_archive.py": [
          [
            "function",
            "render_widget_preview",
            23
          ]
        ],
        "interfaces/as_agent/widgets/travel_widget.py": [
          [
            "function",
            "suggest_travel_action",
            29
          ],
          [
            "function",
            "suggest_long_distance_travel",
            54
          ]
        ],
        "interfaces/as_agent/widgets/delivery_tracker_widget.py": [
          [
            "function",
            "create_delivery_widget",
            25
          ],
          [
            "function",
            "update_delivery_status",
            67
          ]
        ],
        "interfaces/as_agent/widgets/widget_config.py": [
          [
            "class",
            "WidgetConfig",
            20
          ],
          [
            "class",
            "Config",
            165
          ]
        ],
        "interfaces/as_agent/news_and_social/s_dispatcher.py": [
          [
            "function",
            "load_pending_posts",
            31
          ],
          [
            "function",
            "simulate_publish",
            41
          ],
          [
            "function",
            "update_dispatch_log",
            53
          ],
          [
            "function",
            "rewrite_queue",
            58
          ]
        ],
        "interfaces/as_agent/news_and_social/affiliate_log.py": [
          [
            "function",
            "log_referral_click",
            31
          ]
        ],
        "router/llm_multiverse_router.py": [
          [
            "function",
            "multiverse_route",
            30
          ]
        ]
      }
    },
    {
      "system": "consciousness",
      "entity_count": 371,
      "class_count": 148,
      "function_count": 223,
      "files": 42,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/consciousness_activation.py",
      "entities_by_file": {
        "service.py": [
          [
            "function",
            "lukhas_tier_required",
            64
          ],
          [
            "class",
            "ConsciousnessService",
            164
          ],
          [
            "function",
            "process_awareness_api",
            708
          ],
          [
            "function",
            "perform_introspection_api",
            717
          ],
          [
            "function",
            "get_consciousness_state_api",
            726
          ],
          [
            "function",
            "decorator",
            80
          ],
          [
            "function",
            "initialize",
            217
          ],
          [
            "function",
            "process_awareness_stream",
            258
          ],
          [
            "function",
            "perform_introspection",
            335
          ],
          [
            "function",
            "get_current_consciousness_state_report",
            397
          ],
          [
            "function",
            "direct_attention_focus",
            472
          ],
          [
            "function",
            "engage_metacognitive_analysis",
            539
          ],
          [
            "class",
            "IdentityClient",
            140
          ],
          [
            "function",
            "wrapper_sync",
            116
          ],
          [
            "function",
            "verify_user_access",
            146
          ],
          [
            "function",
            "check_consent",
            152
          ],
          [
            "function",
            "log_activity",
            158
          ]
        ],
        "services.py": [
          [
            "class",
            "ConsciousnessService",
            11
          ],
          [
            "function",
            "create_consciousness_service",
            98
          ]
        ],
        "cognitive_architecture_controller.py": [
          [
            "class",
            "CognitiveConfig",
            80
          ],
          [
            "function",
            "lukhas_tier_required",
            187
          ],
          [
            "class",
            "CognitiveProcessType",
            227
          ],
          [
            "class",
            "MemoryType",
            239
          ],
          [
            "class",
            "ProcessPriority",
            246
          ],
          [
            "class",
            "ProcessState",
            254
          ],
          [
            "class",
            "ResourceType",
            265
          ],
          [
            "class",
            "CognitiveResource",
            274
          ],
          [
            "class",
            "MemoryItem",
            298
          ],
          [
            "class",
            "CognitiveProcess",
            310
          ],
          [
            "class",
            "MemorySystem",
            328
          ],
          [
            "class",
            "WorkingMemory",
            351
          ],
          [
            "class",
            "EpisodicMemory",
            437
          ],
          [
            "class",
            "SemanticMemory",
            526
          ],
          [
            "class",
            "ProceduralMemory",
            633
          ],
          [
            "class",
            "CognitiveResourceManager",
            721
          ],
          [
            "class",
            "CognitiveProcessScheduler",
            797
          ],
          [
            "class",
            "CognitiveMonitor",
            1385
          ],
          [
            "class",
            "CognitiveArchitectureController",
            1484
          ],
          [
            "function",
            "get_int",
            170
          ],
          [
            "function",
            "get_float",
            174
          ],
          [
            "function",
            "get_dict",
            178
          ],
          [
            "function",
            "decorator",
            189
          ],
          [
            "function",
            "available",
            282
          ],
          [
            "function",
            "allocate",
            286
          ],
          [
            "function",
            "release",
            293
          ],
          [
            "function",
            "store",
            332
          ],
          [
            "function",
            "retrieve",
            337
          ],
          [
            "function",
            "forget",
            342
          ],
          [
            "function",
            "consolidate",
            347
          ],
          [
            "function",
            "store",
            363
          ],
          [
            "function",
            "retrieve",
            389
          ],
          [
            "function",
            "forget",
            406
          ],
          [
            "function",
            "consolidate",
            417
          ],
          [
            "function",
            "store",
            448
          ],
          [
            "function",
            "retrieve",
            471
          ],
          [
            "function",
            "retrieve_by_time_range",
            481
          ],
          [
            "function",
            "forget",
            491
          ],
          [
            "function",
            "consolidate",
            502
          ],
          [
            "function",
            "store",
            552
          ],
          [
            "function",
            "retrieve",
            580
          ],
          [
            "function",
            "find_related_concepts",
            590
          ],
          [
            "function",
            "forget",
            603
          ],
          [
            "function",
            "consolidate",
            618
          ],
          [
            "function",
            "store",
            644
          ],
          [
            "function",
            "retrieve",
            667
          ],
          [
            "function",
            "update_skill_level",
            676
          ],
          [
            "function",
            "forget",
            692
          ],
          [
            "function",
            "consolidate",
            702
          ],
          [
            "function",
            "allocate",
            763
          ],
          [
            "function",
            "release",
            782
          ],
          [
            "function",
            "get_availability",
            792
          ],
          [
            "function",
            "submit_process",
            838
          ],
          [
            "function",
            "shutdown",
            1378
          ],
          [
            "function",
            "shutdown",
            1478
          ],
          [
            "function",
            "think",
            1539
          ],
          [
            "function",
            "remember",
            1566
          ],
          [
            "function",
            "recall",
            1574
          ],
          [
            "function",
            "learn",
            1589
          ],
          [
            "function",
            "plan",
            1619
          ],
          [
            "function",
            "decide",
            1650
          ],
          [
            "function",
            "create",
            1680
          ],
          [
            "function",
            "reflect",
            1710
          ],
          [
            "function",
            "get_status",
            1739
          ],
          [
            "function",
            "shutdown",
            1774
          ],
          [
            "function",
            "recharge_loop",
            750
          ],
          [
            "function",
            "consolidation_loop",
            1524
          ],
          [
            "function",
            "wrapper_sync",
            205
          ]
        ],
        "openai_consciousness_adapter.py": [
          [
            "class",
            "ConsciousnessOpenAIAdapter",
            30
          ]
        ],
        "quantum_consciousness_hub.py": [
          [
            "class",
            "ConsciousnessState",
            25
          ],
          [
            "class",
            "QuantumConsciousnessState",
            35
          ],
          [
            "class",
            "QuantumConsciousnessHub",
            62
          ],
          [
            "function",
            "get_quantum_consciousness_hub",
            708
          ],
          [
            "function",
            "to_quantum_representation",
            47
          ],
          [
            "function",
            "inject_components",
            99
          ]
        ],
        "quantum_consciousness_integration.py": [
          [
            "function",
            "lukhas_tier_required",
            63
          ],
          [
            "class",
            "QuantumCreativeConsciousness",
            123
          ],
          [
            "function",
            "get_consciousness_integration_status",
            452
          ],
          [
            "function",
            "decorator",
            65
          ],
          [
            "function",
            "get_consciousness_status",
            376
          ],
          [
            "function",
            "setup_quantum_entanglement",
            396
          ],
          [
            "function",
            "create_entanglement",
            409
          ],
          [
            "class",
            "ElevatedConsciousnessModule",
            95
          ],
          [
            "class",
            "ConsciousnessLevel",
            96
          ],
          [
            "class",
            "QualiaType",
            97
          ],
          [
            "class",
            "ConsciousExperience",
            98
          ],
          [
            "class",
            "LukhasCreativeExpressionEngine",
            110
          ]
        ],
        "dream_bridge.py": [
          [
            "class",
            "DreamConsciousnessBridge",
            14
          ],
          [
            "function",
            "register_with_hub",
            55
          ]
        ],
        "brain_integration_20250620_013824.py": [
          [
            "class",
            "BrainIntegrationConfig",
            41
          ],
          [
            "class",
            "DynamicImporter",
            109
          ],
          [
            "class",
            "TierAccessControl",
            197
          ],
          [
            "function",
            "lukhas_tier_required",
            239
          ],
          [
            "class",
            "EmotionVector",
            286
          ],
          [
            "class",
            "EmotionalOscillator",
            376
          ],
          [
            "class",
            "MemoryEmotionalIntegrator",
            521
          ],
          [
            "class",
            "MemoryVoiceIntegrator",
            847
          ],
          [
            "class",
            "LucasBrainIntegration",
            943
          ],
          [
            "function",
            "get_emotion_adjustments",
            93
          ],
          [
            "function",
            "get_memory_path",
            104
          ],
          [
            "function",
            "import_module",
            113
          ],
          [
            "class",
            "AccessTier",
            188
          ],
          [
            "function",
            "check_access",
            229
          ],
          [
            "function",
            "get_required_tier",
            234
          ],
          [
            "function",
            "decorator",
            241
          ],
          [
            "function",
            "calculate_distance",
            326
          ],
          [
            "function",
            "find_similar_emotions",
            359
          ],
          [
            "function",
            "update_emotional_state",
            406
          ],
          [
            "function",
            "get_voice_modulation_params",
            468
          ],
          [
            "function",
            "store_memory_with_emotion",
            572
          ],
          [
            "function",
            "retrieve_with_emotional_context",
            648
          ],
          [
            "function",
            "find_emotionally_similar_memories",
            710
          ],
          [
            "function",
            "dream_consolidate_memories",
            767
          ],
          [
            "function",
            "speak_with_emotional_context",
            873
          ],
          [
            "function",
            "process_message",
            1027
          ],
          [
            "function",
            "start_consolidation_thread",
            1199
          ],
          [
            "function",
            "stop_consolidation_thread",
            1236
          ],
          [
            "function",
            "consolidation_loop",
            1208
          ],
          [
            "function",
            "wrapper_sync",
            265
          ]
        ],
        "consciousness_hub.py": [
          [
            "class",
            "ConsciousnessHub",
            55
          ],
          [
            "function",
            "get_consciousness_hub",
            369
          ],
          [
            "function",
            "register_service",
            247
          ],
          [
            "function",
            "get_service",
            252
          ],
          [
            "function",
            "list_services",
            256
          ],
          [
            "function",
            "register_event_handler",
            277
          ]
        ],
        "loop_meta_learning.py": [
          [
            "class",
            "MetaLearningCycle",
            22
          ],
          [
            "class",
            "MetaLearningLoop",
            36
          ],
          [
            "function",
            "get_meta_learning_loop",
            212
          ]
        ],
        "cognitive/adapter.py": [
          [
            "function",
            "lukhas_tier_required",
            57
          ],
          [
            "class",
            "CognitiveState",
            117
          ],
          [
            "class",
            "EmotionalModulation",
            135
          ],
          [
            "class",
            "CognitiveAdapter",
            153
          ],
          [
            "class",
            "CognitiveAdapter",
            300
          ],
          [
            "class",
            "CognitiveAdapter",
            473
          ],
          [
            "function",
            "decorator",
            59
          ],
          [
            "class",
            "CoreComponent",
            89
          ],
          [
            "class",
            "SecurityContext",
            90
          ],
          [
            "class",
            "MetaLearningSystem",
            100
          ],
          [
            "class",
            "HelixMapper",
            111
          ],
          [
            "function",
            "wrapper_sync",
            70
          ]
        ],
        "cognitive/reflective_introspection.py": [
          [
            "function",
            "lukhas_tier_required",
            63
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            89
          ],
          [
            "function",
            "decorator",
            65
          ],
          [
            "function",
            "log_interaction",
            125
          ],
          [
            "function",
            "analyze_recent_interactions",
            144
          ],
          [
            "function",
            "wrapper_sync",
            77
          ]
        ],
        "cognitive/adapter_complete.py": [
          [
            "class",
            "CognitiveAdapterConfig",
            62
          ],
          [
            "function",
            "lukhas_tier_required",
            132
          ],
          [
            "class",
            "CoreComponent",
            175
          ],
          [
            "class",
            "SecurityContext",
            184
          ],
          [
            "class",
            "MemoryType",
            208
          ],
          [
            "class",
            "MetaLearningSystem",
            216
          ],
          [
            "class",
            "HelixMapper",
            302
          ],
          [
            "class",
            "CognitiveState",
            409
          ],
          [
            "class",
            "EmotionalModulation",
            427
          ],
          [
            "class",
            "CognitiveAdapter",
            443
          ],
          [
            "function",
            "get",
            120
          ],
          [
            "function",
            "decorator",
            134
          ],
          [
            "function",
            "has_permission",
            194
          ],
          [
            "function",
            "get_user_context",
            198
          ],
          [
            "function",
            "extract_patterns",
            773
          ],
          [
            "function",
            "reset_state",
            877
          ],
          [
            "function",
            "get_state_summary",
            889
          ],
          [
            "function",
            "shutdown",
            924
          ],
          [
            "function",
            "wrapper_sync",
            155
          ]
        ],
        "awareness/symbolic_trace_logger.py": [
          [
            "function",
            "lukhas_tier_required",
            56
          ],
          [
            "class",
            "SymbolicTraceLogger",
            69
          ],
          [
            "function",
            "decorator",
            58
          ],
          [
            "function",
            "log_awareness_trace",
            117
          ],
          [
            "function",
            "get_pattern_analysis",
            149
          ],
          [
            "function",
            "wrapper",
            59
          ]
        ],
        "awareness/awareness_protocol.py": [
          [
            "function",
            "lukhas_tier_required",
            69
          ],
          [
            "class",
            "LucasAwarenessProtocol",
            91
          ],
          [
            "function",
            "decorator",
            71
          ],
          [
            "function",
            "update_bio_metrics",
            252
          ],
          [
            "function",
            "wrapper_sync",
            79
          ]
        ],
        "awareness/bio_symbolic_awareness_adapter.py": [
          [
            "class",
            "BioSymbolicAwarenessAdapter",
            86
          ],
          [
            "class",
            "MockNumpy",
            25
          ],
          [
            "class",
            "ProtonGradient",
            73
          ],
          [
            "class",
            "QuantumAttentionGate",
            75
          ],
          [
            "class",
            "CristaFilter",
            77
          ],
          [
            "class",
            "CardiolipinEncoder",
            79
          ],
          [
            "function",
            "mean",
            27
          ],
          [
            "function",
            "std",
            31
          ],
          [
            "function",
            "clip",
            38
          ],
          [
            "function",
            "corrcoef",
            42
          ],
          [
            "function",
            "process",
            74
          ],
          [
            "function",
            "attend",
            76
          ],
          [
            "function",
            "filter",
            78
          ],
          [
            "function",
            "encode",
            80
          ],
          [
            "function",
            "create_base_pattern",
            81
          ]
        ],
        "awareness/system_awareness.py": [
          [
            "class",
            "SystemAwareness",
            65
          ]
        ],
        "systems/validator.py": [
          [
            "class",
            "ConsciousnessValidator",
            14
          ],
          [
            "function",
            "create_consciousness_component",
            155
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "systems/engine_poetic.py": [
          [
            "class",
            "ConsciousnessState",
            93
          ],
          [
            "class",
            "AwarenessFrame",
            105
          ],
          [
            "class",
            "ConsciousnessEngine",
            124
          ],
          [
            "function",
            "calculate_consciousness_metrics",
            1574
          ],
          [
            "function",
            "get_status",
            1524
          ]
        ],
        "systems/engine_complete.py": [
          [
            "class",
            "ConsciousnessEngineConfig",
            33
          ],
          [
            "function",
            "lukhas_tier_required",
            170
          ],
          [
            "class",
            "ConsciousnessState",
            205
          ],
          [
            "class",
            "ConsciousnessPattern",
            230
          ],
          [
            "class",
            "AnthropicEthicsEngine",
            393
          ],
          [
            "class",
            "DefaultEthicsEngine",
            412
          ],
          [
            "class",
            "SelfAwareAdaptationModule",
            582
          ],
          [
            "class",
            "AGIConsciousnessEngine",
            754
          ],
          [
            "function",
            "get",
            154
          ],
          [
            "function",
            "decorator",
            172
          ],
          [
            "function",
            "to_dict",
            217
          ],
          [
            "function",
            "get_consciousness_state",
            906
          ],
          [
            "function",
            "get_system_status",
            910
          ],
          [
            "function",
            "wrapper_sync",
            188
          ]
        ],
        "systems/engine_codex.py": [
          [
            "class",
            "ConsciousnessState",
            25
          ],
          [
            "class",
            "ConsciousnessPattern",
            41
          ],
          [
            "class",
            "AnthropicEthicsEngine",
            154
          ],
          [
            "class",
            "SelfAwareAdaptationModule",
            287
          ],
          [
            "class",
            "LUKHASConsciousnessEngine",
            393
          ],
          [
            "function",
            "to_dict",
            35
          ]
        ],
        "systems/integrator.py": [
          [
            "class",
            "ConsciousnessState",
            87
          ],
          [
            "class",
            "IntegrationPriority",
            96
          ],
          [
            "class",
            "ConsciousnessEvent",
            104
          ],
          [
            "class",
            "IntegrationContext",
            116
          ],
          [
            "class",
            "ConsciousnessIntegrator",
            126
          ],
          [
            "function",
            "process_consciousness_event",
            545
          ],
          [
            "class",
            "EnhancedMemoryManager",
            59
          ],
          [
            "class",
            "MemoryType",
            64
          ],
          [
            "class",
            "VoiceProcessor",
            69
          ],
          [
            "class",
            "PersonaManager",
            73
          ],
          [
            "class",
            "IdentityManager",
            78
          ],
          [
            "class",
            "EmotionEngine",
            81
          ]
        ],
        "systems/mapper.py": [
          [
            "class",
            "ConsciousnessState",
            42
          ],
          [
            "class",
            "ConsciousnessIntensity",
            56
          ],
          [
            "class",
            "ConsciousnessProfile",
            66
          ],
          [
            "class",
            "VoiceConsciousnessMapping",
            87
          ],
          [
            "class",
            "ConsciousnessMapper",
            96
          ]
        ],
        "systems/engine_alt.py": [
          [
            "class",
            "ConsciousnessState",
            25
          ],
          [
            "class",
            "ConsciousnessPattern",
            41
          ],
          [
            "class",
            "AnthropicEthicsEngine",
            154
          ],
          [
            "class",
            "SelfAwareAdaptationModule",
            284
          ],
          [
            "class",
            "LUKHASConsciousnessEngine",
            389
          ],
          [
            "function",
            "to_dict",
            35
          ]
        ],
        "systems/consciousness.py": [
          [
            "class",
            "MetaCognition",
            41
          ],
          [
            "function",
            "create_consciousness_component",
            183
          ],
          [
            "function",
            "create_consciousness_component",
            190
          ],
          [
            "function",
            "get_status",
            166
          ]
        ],
        "systems/quantum_consciousness_visualizer.py": [
          [
            "class",
            "QuantumConsciousnessVisualizer",
            35
          ],
          [
            "function",
            "generate_neural_radiance_field",
            55
          ],
          [
            "function",
            "render_symbolic_layer",
            73
          ]
        ],
        "systems/consciousness_colony_integration.py": [
          [
            "class",
            "DistributedConsciousnessEngine",
            27
          ]
        ],
        "systems/quantum_creative_consciousness.py": [
          [
            "class",
            "QuantumCreativeDemo",
            33
          ]
        ],
        "systems/lambda_mirror.py": [
          [
            "class",
            "ReflectionType",
            127
          ],
          [
            "class",
            "EmotionalTone",
            139
          ],
          [
            "class",
            "AlignmentStatus",
            153
          ],
          [
            "class",
            "ExperienceEntry",
            164
          ],
          [
            "class",
            "EmotionalDrift",
            181
          ],
          [
            "class",
            "AlignmentScore",
            203
          ],
          [
            "class",
            "ReflectionEntry",
            233
          ],
          [
            "class",
            "LambdaMirror",
            268
          ],
          [
            "function",
            "main",
            2606
          ],
          [
            "function",
            "to_dict",
            175
          ],
          [
            "function",
            "to_dict",
            193
          ],
          [
            "function",
            "to_dict",
            224
          ],
          [
            "function",
            "to_dict",
            257
          ],
          [
            "function",
            "identify_reflection_prompts",
            565
          ]
        ],
        "systems/self_reflection_engine.py": [
          [
            "class",
            "SelfReflectionEngine",
            13
          ],
          [
            "function",
            "create_consciousness_component",
            155
          ],
          [
            "function",
            "create_consciousness_component",
            162
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "systems/engine.py": [
          [
            "function",
            "lukhas_tier_required",
            34
          ],
          [
            "class",
            "ConsciousnessState",
            69
          ],
          [
            "class",
            "ConsciousnessPattern",
            101
          ],
          [
            "class",
            "ConsciousnessPattern",
            131
          ],
          [
            "class",
            "AnthropicEthicsEngine",
            294
          ],
          [
            "class",
            "SelfAwareAdaptationModule",
            450
          ],
          [
            "class",
            "LUKHASConsciousnessEngine",
            607
          ],
          [
            "function",
            "decorator",
            36
          ],
          [
            "function",
            "to_dict",
            84
          ],
          [
            "function",
            "wrapper_sync",
            46
          ]
        ],
        "systems/quantum_consciousness_integration.py": [
          [
            "class",
            "QuantumCreativeConsciousness",
            75
          ],
          [
            "function",
            "get_consciousness_integration_status",
            415
          ],
          [
            "function",
            "get_consciousness_status",
            387
          ]
        ],
        "systems/awareness_engine.py": [
          [
            "function",
            "lukhas_tier_required",
            50
          ],
          [
            "class",
            "AwarenessEngine",
            76
          ],
          [
            "function",
            "create_awareness_component",
            281
          ],
          [
            "function",
            "decorator",
            52
          ],
          [
            "function",
            "get_status",
            245
          ],
          [
            "function",
            "wrapper_sync",
            61
          ]
        ],
        "systems/\u039bBot_consciousness_monitor.py": [
          [
            "class",
            "\u039bBotConsciousnessMonitor",
            36
          ]
        ],
        "systems/awareness_processor.py": [
          [
            "function",
            "lukhas_tier_required",
            26
          ],
          [
            "class",
            "AwarenessProcessor",
            52
          ],
          [
            "function",
            "create_awareness_processor",
            244
          ],
          [
            "function",
            "decorator",
            28
          ],
          [
            "function",
            "get_status",
            209
          ],
          [
            "function",
            "wrapper_sync",
            37
          ]
        ],
        "systems/awareness_tracker.py": [
          [
            "class",
            "AwarenessTracker",
            13
          ],
          [
            "function",
            "create_consciousness_component",
            155
          ],
          [
            "function",
            "create_consciousness_component",
            162
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "systems/unified_consciousness_engine.py": [
          [
            "class",
            "UnifiedConsciousnessEngine",
            5
          ]
        ],
        "systems/state.py": [
          [
            "class",
            "ConsciousnessState",
            14
          ],
          [
            "function",
            "create_consciousness_component",
            167
          ],
          [
            "function",
            "get_status",
            147
          ]
        ],
        "systems/cognitive_systems/voice_personality.py": [
          [
            "class",
            "VoicePersonalityIntegrator",
            73
          ],
          [
            "function",
            "get_voice_modulation",
            217
          ],
          [
            "function",
            "adapt_to_interaction",
            269
          ]
        ],
        "systems/dream_engine/dream_reflection_loop.py": [
          [
            "class",
            "DreamReflectionConfig",
            104
          ],
          [
            "class",
            "DreamState",
            122
          ],
          [
            "class",
            "DreamReflectionLoop",
            134
          ],
          [
            "class",
            "DreamLoggerLoop",
            1029
          ],
          [
            "function",
            "create_dream_reflection_loop",
            1039
          ],
          [
            "function",
            "connect_brain",
            231
          ],
          [
            "function",
            "register_with_core",
            252
          ],
          [
            "function",
            "reflect",
            365
          ],
          [
            "function",
            "is_stable",
            380
          ],
          [
            "function",
            "handle_system_idle",
            393
          ],
          [
            "function",
            "handle_system_active",
            399
          ],
          [
            "function",
            "start_dream_cycle",
            405
          ],
          [
            "function",
            "stop_dream_cycle",
            429
          ],
          [
            "function",
            "consolidate_memories",
            486
          ],
          [
            "function",
            "extract_insights",
            543
          ],
          [
            "function",
            "recognize_patterns",
            593
          ],
          [
            "function",
            "synthesize_dream",
            636
          ],
          [
            "function",
            "process_message",
            747
          ],
          [
            "function",
            "start",
            798
          ],
          [
            "function",
            "stop",
            809
          ],
          [
            "function",
            "get_status",
            837
          ],
          [
            "function",
            "get_metrics",
            856
          ],
          [
            "function",
            "update_scores",
            860
          ],
          [
            "function",
            "calculate_drift",
            870
          ],
          [
            "function",
            "calculate_convergence",
            875
          ],
          [
            "function",
            "calculate_affect_delta",
            880
          ],
          [
            "function",
            "calculate_entropy_delta",
            889
          ],
          [
            "function",
            "dream_to_memory_feedback",
            894
          ],
          [
            "function",
            "dream_synthesis_summary",
            905
          ],
          [
            "function",
            "dream_snapshot",
            917
          ]
        ],
        "systems/reflection/reflection.py": [
          [
            "function",
            "write_reflection_event",
            10
          ]
        ],
        "reflection/lambda_mirror.py": [
          [
            "class",
            "ReflectionType",
            73
          ],
          [
            "class",
            "EmotionalTone",
            85
          ],
          [
            "class",
            "AlignmentStatus",
            99
          ],
          [
            "class",
            "ExperienceEntry",
            110
          ],
          [
            "class",
            "EmotionalDrift",
            127
          ],
          [
            "class",
            "AlignmentScore",
            149
          ],
          [
            "class",
            "ReflectionEntry",
            179
          ],
          [
            "class",
            "LambdaMirror",
            214
          ],
          [
            "function",
            "main",
            1714
          ],
          [
            "function",
            "to_dict",
            121
          ],
          [
            "function",
            "to_dict",
            139
          ],
          [
            "function",
            "to_dict",
            170
          ],
          [
            "function",
            "to_dict",
            203
          ],
          [
            "function",
            "identify_reflection_prompts",
            410
          ]
        ]
      }
    },
    {
      "system": "memory",
      "entity_count": 1652,
      "class_count": 600,
      "function_count": 1052,
      "files": 176,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/memory_activation.py",
      "entities_by_file": {
        "openai_memory_adapter.py": [
          [
            "class",
            "MemoryOpenAIAdapter",
            57
          ]
        ],
        "service.py": [
          [
            "class",
            "MemoryService",
            70
          ],
          [
            "function",
            "store_memory",
            462
          ],
          [
            "function",
            "retrieve_memory",
            468
          ],
          [
            "function",
            "search_memory",
            473
          ],
          [
            "function",
            "delete_memory",
            478
          ],
          [
            "function",
            "store_memory",
            89
          ],
          [
            "function",
            "retrieve_memory",
            156
          ],
          [
            "function",
            "search_memory",
            214
          ],
          [
            "function",
            "delete_memory",
            303
          ],
          [
            "function",
            "get_memory_stats",
            356
          ],
          [
            "function",
            "configure_cross_module_storage",
            413
          ],
          [
            "function",
            "configure_storage",
            443
          ],
          [
            "class",
            "IdentityClient",
            61
          ],
          [
            "function",
            "verify_user_access",
            62
          ],
          [
            "function",
            "check_consent",
            64
          ],
          [
            "function",
            "log_activity",
            66
          ]
        ],
        "dream_memory_manager.py": [
          [
            "class",
            "DreamMemoryManager",
            52
          ]
        ],
        "services.py": [
          [
            "class",
            "MemoryService",
            12
          ],
          [
            "function",
            "create_memory_service",
            240
          ]
        ],
        "voice_memory_manager.py": [
          [
            "class",
            "MemoryManager",
            60
          ],
          [
            "function",
            "store_interaction",
            72
          ],
          [
            "function",
            "get_relevant_memories",
            96
          ],
          [
            "function",
            "store_voice_preference",
            108
          ],
          [
            "function",
            "get_voice_preferences",
            126
          ],
          [
            "function",
            "get_user_interactions",
            135
          ]
        ],
        "structural_conscience.py": [
          [
            "class",
            "MoralDecisionType",
            69
          ],
          [
            "class",
            "ConscienceSeverity",
            80
          ],
          [
            "class",
            "ConscienceEntry",
            90
          ],
          [
            "class",
            "StructuralConscience",
            132
          ],
          [
            "function",
            "create_structural_conscience",
            561
          ],
          [
            "function",
            "to_dict",
            115
          ],
          [
            "function",
            "from_dict",
            124
          ],
          [
            "function",
            "get_moral_history",
            453
          ],
          [
            "function",
            "get_conscience_summary",
            491
          ]
        ],
        "quantum_manager.py": [
          [
            "class",
            "EnhancedMemoryManager",
            132
          ],
          [
            "function",
            "get_active_folds",
            555
          ],
          [
            "class",
            "EnhancedMemoryFold",
            112
          ],
          [
            "class",
            "MemoryFoldConfig",
            115
          ],
          [
            "class",
            "EnhancedMemoryVisualizer",
            118
          ],
          [
            "class",
            "VisualizationConfig",
            121
          ],
          [
            "class",
            "QuantumOscillator",
            124
          ]
        ],
        "memory_hub.py": [
          [
            "class",
            "MemoryHub",
            59
          ],
          [
            "function",
            "get_memory_hub",
            469
          ],
          [
            "function",
            "register_service",
            334
          ],
          [
            "function",
            "get_service",
            339
          ],
          [
            "function",
            "list_services",
            343
          ],
          [
            "function",
            "register_event_handler",
            366
          ]
        ],
        "evolution.py": [
          [
            "class",
            "EvolutionType",
            58
          ],
          [
            "class",
            "EvolutionEvent",
            69
          ],
          [
            "class",
            "MemoryEvolutionEngine",
            81
          ],
          [
            "function",
            "get_global_evolution_engine",
            329
          ],
          [
            "function",
            "evolve_memory_globally",
            337
          ],
          [
            "function",
            "evolve_memory",
            232
          ],
          [
            "function",
            "get_evolution_history",
            275
          ],
          [
            "function",
            "add_evolution_rule",
            284
          ],
          [
            "function",
            "get_evolution_stats",
            295
          ]
        ],
        "emotional.py": [
          [
            "function",
            "lukhas_tier_required",
            109
          ],
          [
            "class",
            "EmotionVector",
            118
          ],
          [
            "class",
            "EmotionalMemory",
            248
          ],
          [
            "function",
            "decorator",
            110
          ],
          [
            "function",
            "blend",
            205
          ],
          [
            "function",
            "to_dict",
            218
          ],
          [
            "function",
            "get_primary_emotion",
            229
          ],
          [
            "function",
            "from_dict",
            236
          ],
          [
            "function",
            "process_experience",
            310
          ],
          [
            "function",
            "check_identity_emotion_cascade",
            504
          ],
          [
            "function",
            "is_fuse_active",
            654
          ],
          [
            "function",
            "get_emotional_response",
            741
          ],
          [
            "function",
            "get_associated_emotion",
            780
          ],
          [
            "function",
            "get_current_emotional_state",
            860
          ],
          [
            "function",
            "get_emotional_history",
            877
          ],
          [
            "function",
            "affect_delta",
            906
          ],
          [
            "function",
            "symbolic_affect_trace",
            983
          ],
          [
            "function",
            "affect_vector_velocity",
            1069
          ],
          [
            "function",
            "store_emotional_memory",
            1109
          ],
          [
            "class",
            "SymbolicDriftTracker",
            81
          ],
          [
            "function",
            "track_drift",
            85
          ],
          [
            "function",
            "register_drift",
            88
          ],
          [
            "function",
            "record_drift",
            92
          ]
        ],
        "core.py": [
          [
            "function",
            "create_hybrid_memory_fold",
            40
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold_with_lazy_loading",
            60
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold",
            101
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold_512",
            133
          ],
          [
            "class",
            "HybridMemoryItem",
            152
          ],
          [
            "class",
            "VectorStorageLayer",
            167
          ],
          [
            "class",
            "MemoryAttentionLayer",
            220
          ],
          [
            "class",
            "ContinuousLearningEngine",
            253
          ],
          [
            "class",
            "HybridMemoryFold",
            291
          ],
          [
            "class",
            "OptimizedVectorStorageLayer",
            506
          ],
          [
            "class",
            "OptimizedHybridMemoryFold",
            530
          ],
          [
            "class",
            "NodeState",
            745
          ],
          [
            "class",
            "MessageType",
            753
          ],
          [
            "class",
            "DistributedMemoryEntry",
            767
          ],
          [
            "class",
            "NodeInfo",
            788
          ],
          [
            "class",
            "ConsensusProtocol",
            808
          ],
          [
            "class",
            "DistributedMemoryFold",
            1044
          ],
          [
            "function",
            "add_vector",
            178
          ],
          [
            "function",
            "search_similar",
            191
          ],
          [
            "function",
            "compute_attention_scores",
            230
          ],
          [
            "function",
            "update_tag_importance",
            265
          ],
          [
            "function",
            "get_tag_importance",
            280
          ],
          [
            "function",
            "decay_all_weights",
            284
          ],
          [
            "function",
            "get_enhanced_statistics",
            497
          ],
          [
            "function",
            "add_vector",
            514
          ],
          [
            "function",
            "get_memory_usage_stats",
            524
          ],
          [
            "function",
            "get_optimization_statistics",
            671
          ],
          [
            "function",
            "get_enhanced_statistics",
            686
          ],
          [
            "function",
            "to_dict",
            780
          ],
          [
            "function",
            "from_dict",
            784
          ],
          [
            "function",
            "endpoint",
            801
          ],
          [
            "function",
            "is_alive",
            804
          ],
          [
            "function",
            "get_network_status",
            1202
          ],
          [
            "function",
            "trace_recursive",
            419
          ]
        ],
        "base_manager.py": [
          [
            "class",
            "BaseMemoryManager",
            75
          ],
          [
            "function",
            "generate_memory_id",
            209
          ]
        ],
        "memory_optimization.py": [
          [
            "class",
            "MemoryTier",
            103
          ],
          [
            "class",
            "CompressionStrategy",
            111
          ],
          [
            "class",
            "MemoryObject",
            120
          ],
          [
            "class",
            "ObjectPool",
            152
          ],
          [
            "class",
            "CompressedStorage",
            204
          ],
          [
            "class",
            "TieredMemoryCache",
            255
          ],
          [
            "class",
            "MemoryOptimizer",
            434
          ],
          [
            "class",
            "CompactList",
            661
          ],
          [
            "class",
            "BloomFilter",
            702
          ],
          [
            "function",
            "update_access",
            132
          ],
          [
            "function",
            "age_seconds",
            137
          ],
          [
            "function",
            "access_frequency",
            141
          ],
          [
            "function",
            "acquire",
            171
          ],
          [
            "function",
            "release",
            182
          ],
          [
            "function",
            "clear",
            190
          ],
          [
            "function",
            "get_stats",
            194
          ],
          [
            "function",
            "compress",
            224
          ],
          [
            "function",
            "decompress",
            236
          ],
          [
            "function",
            "select_strategy",
            240
          ],
          [
            "function",
            "put",
            280
          ],
          [
            "function",
            "get",
            298
          ],
          [
            "function",
            "get_stats",
            415
          ],
          [
            "function",
            "store",
            467
          ],
          [
            "function",
            "retrieve",
            473
          ],
          [
            "function",
            "acquire_pooled_object",
            477
          ],
          [
            "function",
            "release_pooled_object",
            484
          ],
          [
            "function",
            "register_optimization",
            503
          ],
          [
            "function",
            "register_default_optimizations",
            510
          ],
          [
            "function",
            "get_memory_stats",
            614
          ],
          [
            "function",
            "create_memory_efficient_collection",
            629
          ],
          [
            "function",
            "append",
            676
          ],
          [
            "function",
            "memory_usage",
            697
          ],
          [
            "function",
            "add",
            714
          ],
          [
            "function",
            "contains",
            723
          ],
          [
            "function",
            "memory_usage",
            747
          ],
          [
            "function",
            "clear_empty_collections",
            513
          ],
          [
            "function",
            "force_gc",
            528
          ],
          [
            "function",
            "compress_large_objects",
            536
          ],
          [
            "class",
            "PooledWrapper",
            645
          ]
        ],
        "dashboard.py": [
          [
            "class",
            "MemoryHealthMetrics",
            85
          ],
          [
            "class",
            "CascadeBlockInfo",
            101
          ],
          [
            "class",
            "DriftEventSummary",
            116
          ],
          [
            "class",
            "MemoryHealthDashboard",
            131
          ],
          [
            "function",
            "create_memory_dashboard",
            888
          ],
          [
            "function",
            "get_memory_health_metrics",
            150
          ],
          [
            "function",
            "list_active_cascade_blocks",
            201
          ],
          [
            "function",
            "view_recent_drift_events",
            232
          ],
          [
            "function",
            "get_dashboard_summary",
            265
          ],
          [
            "function",
            "get_dream_integration_analytics",
            331
          ]
        ],
        "distributed_state_manager.py": [
          [
            "class",
            "StateType",
            64
          ],
          [
            "class",
            "StateEntry",
            72
          ],
          [
            "class",
            "StateSnapshot",
            95
          ],
          [
            "class",
            "DistributedStateManager",
            104
          ],
          [
            "class",
            "MultiNodeStateManager",
            576
          ],
          [
            "function",
            "is_expired",
            82
          ],
          [
            "function",
            "access",
            88
          ],
          [
            "function",
            "set",
            258
          ],
          [
            "function",
            "get",
            322
          ],
          [
            "function",
            "delete",
            355
          ],
          [
            "function",
            "get_shard_keys",
            396
          ],
          [
            "function",
            "get_shard_stats",
            401
          ],
          [
            "function",
            "get_global_stats",
            418
          ],
          [
            "function",
            "shutdown",
            561
          ],
          [
            "function",
            "get_node",
            602
          ],
          [
            "function",
            "set",
            609
          ],
          [
            "function",
            "get",
            614
          ],
          [
            "function",
            "get_cluster_stats",
            619
          ],
          [
            "function",
            "shutdown_all",
            635
          ]
        ],
        "privacy_preserving_memory_vault.py": [
          [
            "class",
            "PrivacyLevel",
            117
          ],
          [
            "class",
            "EncryptionScheme",
            127
          ],
          [
            "class",
            "PrivacyTechnique",
            137
          ],
          [
            "class",
            "ComplianceStandard",
            149
          ],
          [
            "class",
            "PrivacyPolicy",
            162
          ],
          [
            "class",
            "EncryptedMemory",
            201
          ],
          [
            "class",
            "EncryptionProvider",
            256
          ],
          [
            "class",
            "AESGCMProvider",
            280
          ],
          [
            "class",
            "FernetProvider",
            390
          ],
          [
            "class",
            "DifferentialPrivacyProvider",
            450
          ],
          [
            "class",
            "PrivacyPreservingMemoryVault",
            485
          ],
          [
            "function",
            "update_access_tracking",
            236
          ],
          [
            "function",
            "is_expired",
            245
          ],
          [
            "function",
            "should_be_deleted",
            251
          ],
          [
            "function",
            "add_noise",
            457
          ],
          [
            "function",
            "add_gaussian_noise",
            466
          ],
          [
            "function",
            "privatize_histogram",
            475
          ],
          [
            "function",
            "get_compliance_status",
            1131
          ],
          [
            "function",
            "get_vault_status",
            1178
          ]
        ],
        "unified_memory_manager.py": [
          [
            "class",
            "EnhancedMemoryManager",
            26
          ],
          [
            "class",
            "EnhancedMemoryManager",
            188
          ],
          [
            "class",
            "QuantumMemoryManager",
            350
          ],
          [
            "class",
            "DriftMemoryManager",
            590
          ],
          [
            "function",
            "get_active_folds",
            183
          ],
          [
            "function",
            "get_active_folds",
            345
          ]
        ],
        "basic.py": [
          [
            "class",
            "MemoryEntry",
            61
          ],
          [
            "class",
            "MemoryStore",
            99
          ],
          [
            "class",
            "InMemoryStore",
            128
          ],
          [
            "class",
            "MemoryManager",
            186
          ],
          [
            "function",
            "remember",
            238
          ],
          [
            "function",
            "recall",
            243
          ],
          [
            "function",
            "search",
            248
          ],
          [
            "function",
            "access",
            72
          ],
          [
            "function",
            "to_dict",
            77
          ],
          [
            "function",
            "from_dict",
            89
          ],
          [
            "function",
            "store",
            103
          ],
          [
            "function",
            "retrieve",
            108
          ],
          [
            "function",
            "search",
            113
          ],
          [
            "function",
            "list_all",
            118
          ],
          [
            "function",
            "delete",
            123
          ],
          [
            "function",
            "store",
            134
          ],
          [
            "function",
            "retrieve",
            139
          ],
          [
            "function",
            "search",
            146
          ],
          [
            "function",
            "list_all",
            164
          ],
          [
            "function",
            "delete",
            170
          ],
          [
            "function",
            "clear",
            177
          ],
          [
            "function",
            "size",
            181
          ],
          [
            "function",
            "remember",
            192
          ],
          [
            "function",
            "recall",
            197
          ],
          [
            "function",
            "recall_entry",
            202
          ],
          [
            "function",
            "search_memories",
            206
          ],
          [
            "function",
            "recent_memories",
            210
          ],
          [
            "function",
            "forget",
            214
          ],
          [
            "function",
            "memory_stats",
            218
          ]
        ],
        "symbol_aware_tiered_memory.py": [
          [
            "class",
            "SymbolAwareTieredMemory",
            59
          ],
          [
            "function",
            "store",
            66
          ],
          [
            "function",
            "retrieve",
            83
          ],
          [
            "function",
            "get_dream_flagged",
            87
          ]
        ],
        "glyph_memory_integration.py": [
          [
            "class",
            "GlyphBinding",
            107
          ],
          [
            "class",
            "FoldLineage",
            118
          ],
          [
            "class",
            "CompressionType",
            129
          ],
          [
            "class",
            "GlyphMemoryIndex",
            142
          ],
          [
            "class",
            "EmotionalFoldingEngine",
            270
          ],
          [
            "class",
            "GlyphAffectCoupler",
            494
          ],
          [
            "class",
            "DreamMemoryBridge",
            640
          ],
          [
            "class",
            "GlyphMemorySystem",
            769
          ],
          [
            "function",
            "get_glyph_memory_system",
            1021
          ],
          [
            "function",
            "create_glyph_memory",
            1029
          ],
          [
            "function",
            "recall_by_glyphs",
            1036
          ],
          [
            "function",
            "fold_recent_memories",
            1043
          ],
          [
            "function",
            "bind_glyph_to_fold",
            157
          ],
          [
            "function",
            "get_folds_by_glyph",
            196
          ],
          [
            "function",
            "get_glyphs_by_fold",
            221
          ],
          [
            "function",
            "calculate_glyph_affinity",
            241
          ],
          [
            "function",
            "identify_foldable_memories",
            284
          ],
          [
            "function",
            "fold_memory_group",
            330
          ],
          [
            "function",
            "couple_glyph_with_memory",
            528
          ],
          [
            "function",
            "retrieve_by_glyph_affect",
            587
          ],
          [
            "function",
            "process_dream_state",
            658
          ],
          [
            "function",
            "get_dream_glyph_landscape",
            725
          ],
          [
            "function",
            "create_glyph_indexed_memory",
            796
          ],
          [
            "function",
            "recall_by_glyph_pattern",
            849
          ],
          [
            "function",
            "perform_temporal_folding",
            911
          ],
          [
            "function",
            "get_memory_glyph_statistics",
            969
          ]
        ],
        "emotional_memory_manager.py": [
          [
            "class",
            "EmotionalMemoryManager",
            29
          ]
        ],
        "drift_memory_manager.py": [
          [
            "class",
            "DriftMemoryManager",
            23
          ]
        ],
        "fold_entropy_visualizer.py": [
          [
            "class",
            "FoldEntropyVisualizer",
            13
          ],
          [
            "function",
            "render_mermaid_timeline",
            16
          ],
          [
            "function",
            "render_ascii_chart",
            31
          ]
        ],
        "dreamseed_example.py": [
          [
            "function",
            "demonstrate_dreamseed_integration",
            73
          ],
          [
            "function",
            "demonstrate_safeguard_edge_cases",
            302
          ]
        ],
        "emotional_memory_manager_unified.py": [
          [
            "class",
            "UnifiedEmotionalMemoryManager",
            37
          ]
        ],
        "node.py": [
          [
            "class",
            "MemoryNode",
            16
          ],
          [
            "function",
            "store",
            29
          ],
          [
            "function",
            "retrieve",
            50
          ],
          [
            "function",
            "retrieve_recent",
            64
          ],
          [
            "function",
            "semantic_search",
            68
          ]
        ],
        "loop_monitor.py": [
          [
            "class",
            "LoopInfo",
            28
          ],
          [
            "class",
            "SymbolicLoopMonitor",
            40
          ],
          [
            "function",
            "register_loop",
            62
          ],
          [
            "function",
            "report_entanglement",
            69
          ],
          [
            "function",
            "report_corruption",
            75
          ]
        ],
        "lightweight_concurrency.py": [
          [
            "class",
            "ActorPriority",
            32
          ],
          [
            "class",
            "LightweightActor",
            41
          ],
          [
            "class",
            "MemoryEfficientScheduler",
            73
          ],
          [
            "class",
            "ActorPool",
            243
          ],
          [
            "function",
            "get_stats",
            228
          ],
          [
            "function",
            "release_actor",
            305
          ]
        ],
        "quantum_memory_manager.py": [
          [
            "class",
            "QuantumMemoryManager",
            24
          ]
        ],
        "memoria.py": [
          [
            "class",
            "CoreMemoriaConfig",
            17
          ],
          [
            "class",
            "CoreMemoriaComponent",
            24
          ],
          [
            "function",
            "create_core_memoria_component",
            73
          ],
          [
            "function",
            "record_consciousness_phase",
            37
          ],
          [
            "function",
            "process_symbolic_trace",
            43
          ],
          [
            "function",
            "get_last_consciousness_phase",
            62
          ],
          [
            "function",
            "get_component_status",
            65
          ]
        ],
        "manager.py": [
          [
            "class",
            "EnhancedMemoryManager",
            101
          ],
          [
            "function",
            "get_active_folds",
            366
          ],
          [
            "class",
            "EnhancedMemoryFold",
            81
          ],
          [
            "class",
            "MemoryFoldConfig",
            84
          ],
          [
            "class",
            "EnhancedMemoryVisualizer",
            87
          ],
          [
            "class",
            "VisualizationConfig",
            90
          ],
          [
            "class",
            "QuantumOscillator",
            93
          ]
        ],
        "visualizer.py": [
          [
            "class",
            "VisualizationConfig",
            79
          ],
          [
            "class",
            "EnhancedMemoryVisualizer",
            92
          ],
          [
            "class",
            "Enhanced3DVisualizer",
            231
          ],
          [
            "function",
            "setup_visualization",
            116
          ],
          [
            "function",
            "launch_3d_viewer",
            247
          ],
          [
            "class",
            "QuantumOscillator",
            70
          ],
          [
            "class",
            "ProtonGradient",
            73
          ],
          [
            "function",
            "quantum_modulate",
            71
          ]
        ],
        "tools/lambda_vault_scan.py": [
          [
            "class",
            "SymbolicVaultScanner",
            83
          ],
          [
            "function",
            "main",
            674
          ],
          [
            "function",
            "load_memory_snapshots",
            114
          ],
          [
            "function",
            "detect_stale_symbols",
            280
          ],
          [
            "function",
            "detect_missing_links",
            346
          ],
          [
            "function",
            "assess_vault_health",
            432
          ],
          [
            "function",
            "export_vault_report",
            536
          ]
        ],
        "tools/memory_drift_auditor.py": [
          [
            "class",
            "MemoryDriftAuditor",
            66
          ],
          [
            "function",
            "main",
            2297
          ],
          [
            "function",
            "load_memory_snapshots",
            131
          ],
          [
            "function",
            "detect_memory_drift",
            245
          ],
          [
            "function",
            "trace_collapse_events",
            355
          ],
          [
            "function",
            "generate_audit_report",
            453
          ],
          [
            "function",
            "visualize_memory_timeline",
            536
          ]
        ],
        "tools/lambda_archive_inspector.py": [
          [
            "class",
            "AnomalyType",
            54
          ],
          [
            "class",
            "MemoryEntryType",
            66
          ],
          [
            "class",
            "MemoryEntry",
            79
          ],
          [
            "class",
            "SymbolicAnomaly",
            103
          ],
          [
            "class",
            "ArchiveReport",
            129
          ],
          [
            "class",
            "LambdaArchiveInspector",
            155
          ],
          [
            "function",
            "main",
            1181
          ],
          [
            "function",
            "to_dict",
            94
          ],
          [
            "function",
            "to_dict",
            120
          ],
          [
            "function",
            "to_dict",
            147
          ],
          [
            "function",
            "scan_memory_vault",
            206
          ],
          [
            "function",
            "detect_high_entropy_clusters",
            269
          ],
          [
            "function",
            "detect_forgotten_symbols",
            333
          ],
          [
            "function",
            "reconstruct_symbolic_linkage",
            430
          ],
          [
            "function",
            "calculate_archive_score",
            500
          ],
          [
            "function",
            "generate_archive_report",
            553
          ]
        ],
        "colonies/episodic_memory_colony.py": [
          [
            "class",
            "EpisodicMemoryRecord",
            72
          ],
          [
            "class",
            "EpisodicMemoryColony",
            98
          ]
        ],
        "colonies/base_memory_colony.py": [
          [
            "class",
            "ColonyRole",
            72
          ],
          [
            "class",
            "ColonyState",
            81
          ],
          [
            "class",
            "ColonyCapabilities",
            92
          ],
          [
            "class",
            "ColonyMetrics",
            112
          ],
          [
            "class",
            "BaseMemoryColony",
            156
          ],
          [
            "function",
            "calculate_health_score",
            135
          ],
          [
            "function",
            "register_peer_colony",
            365
          ],
          [
            "function",
            "register_message_callback",
            370
          ],
          [
            "function",
            "get_health_status",
            402
          ],
          [
            "class",
            "MemoryType",
            63
          ]
        ],
        "core/colony_memory_validator.py": [
          [
            "class",
            "ValidationMode",
            59
          ],
          [
            "class",
            "ConsensusResult",
            68
          ],
          [
            "class",
            "ValidationRequest",
            78
          ],
          [
            "class",
            "ColonyValidationResponse",
            103
          ],
          [
            "class",
            "ConsensusOutcome",
            127
          ],
          [
            "class",
            "ColonyMemoryValidator",
            151
          ],
          [
            "function",
            "register_colony",
            232
          ],
          [
            "function",
            "unregister_colony",
            248
          ],
          [
            "function",
            "register_consensus_callback",
            651
          ],
          [
            "function",
            "get_colony_stats",
            655
          ],
          [
            "function",
            "get_metrics",
            670
          ]
        ],
        "core/unified_memory_orchestrator.py": [
          [
            "class",
            "MemoryType",
            73
          ],
          [
            "class",
            "ConsolidationState",
            85
          ],
          [
            "class",
            "SleepStage",
            94
          ],
          [
            "class",
            "MemoryTrace",
            104
          ],
          [
            "class",
            "OscillationPattern",
            142
          ],
          [
            "class",
            "UnifiedMemoryOrchestrator",
            151
          ],
          [
            "function",
            "to_dict",
            121
          ],
          [
            "function",
            "get_memory_statistics",
            1399
          ]
        ],
        "core/interfaces/memory_interface.py": [
          [
            "class",
            "MemoryType",
            53
          ],
          [
            "class",
            "MemoryState",
            65
          ],
          [
            "class",
            "ValidationResult",
            77
          ],
          [
            "class",
            "MemoryMetadata",
            87
          ],
          [
            "class",
            "MemoryOperation",
            152
          ],
          [
            "class",
            "MemoryResponse",
            176
          ],
          [
            "class",
            "BaseMemoryInterface",
            197
          ],
          [
            "class",
            "MemoryInterfaceRegistry",
            474
          ],
          [
            "function",
            "update_access",
            122
          ],
          [
            "function",
            "calculate_salience",
            131
          ],
          [
            "function",
            "register_operation_callback",
            444
          ],
          [
            "function",
            "get_metrics",
            456
          ],
          [
            "function",
            "register_interface",
            481
          ],
          [
            "function",
            "register_factory",
            490
          ],
          [
            "function",
            "get_interface",
            499
          ],
          [
            "function",
            "list_available_types",
            511
          ]
        ],
        "core/interfaces/episodic_interface.py": [
          [
            "class",
            "EpisodicContext",
            43
          ],
          [
            "class",
            "EpisodicMemoryContent",
            72
          ],
          [
            "class",
            "EpisodicMemoryInterface",
            92
          ],
          [
            "function",
            "get_consolidation_candidates",
            470
          ],
          [
            "function",
            "get_metrics",
            524
          ]
        ],
        "core/interfaces/semantic_interface.py": [
          [
            "class",
            "SemanticRelationType",
            45
          ],
          [
            "class",
            "SemanticRelation",
            58
          ],
          [
            "class",
            "ConceptNode",
            78
          ],
          [
            "class",
            "SemanticMemoryContent",
            116
          ],
          [
            "class",
            "SemanticMemoryInterface",
            136
          ],
          [
            "function",
            "update_strength",
            71
          ],
          [
            "function",
            "activate",
            104
          ],
          [
            "function",
            "co_activate_with",
            108
          ],
          [
            "function",
            "get_concept_hierarchy",
            583
          ],
          [
            "function",
            "activate_concept_network",
            605
          ],
          [
            "function",
            "get_metrics",
            728
          ],
          [
            "function",
            "has_cycle",
            673
          ]
        ],
        "proteome/symbolic_proteome.py": [
          [
            "class",
            "ProteinType",
            85
          ],
          [
            "class",
            "FoldingState",
            95
          ],
          [
            "class",
            "PostTranslationalModification",
            105
          ],
          [
            "class",
            "MemoryCodon",
            116
          ],
          [
            "class",
            "MemoryProtein",
            137
          ],
          [
            "class",
            "ProteinComplex",
            197
          ],
          [
            "class",
            "MolecularChaperone",
            229
          ],
          [
            "class",
            "SymbolicProteome",
            261
          ],
          [
            "function",
            "from_memory_fragment",
            123
          ],
          [
            "function",
            "calculate_stability",
            171
          ],
          [
            "function",
            "is_functional",
            187
          ],
          [
            "function",
            "calculate_synergy",
            206
          ],
          [
            "function",
            "get_metrics",
            581
          ],
          [
            "class",
            "TagScope",
            70
          ],
          [
            "class",
            "SymbolicTag",
            77
          ]
        ],
        "hippocampal/theta_oscillator.py": [
          [
            "class",
            "OscillationPhase",
            28
          ],
          [
            "class",
            "ThetaWave",
            37
          ],
          [
            "class",
            "ThetaOscillator",
            50
          ],
          [
            "function",
            "phase_degrees",
            45
          ],
          [
            "function",
            "get_current_state",
            116
          ],
          [
            "function",
            "is_encoding_optimal",
            126
          ],
          [
            "function",
            "is_retrieval_optimal",
            131
          ],
          [
            "function",
            "phase_lock",
            136
          ],
          [
            "function",
            "phase_unlock",
            148
          ],
          [
            "function",
            "register_phase_callback",
            153
          ],
          [
            "function",
            "modulate_frequency",
            161
          ],
          [
            "function",
            "modulate_amplitude",
            171
          ],
          [
            "function",
            "get_gamma_phase",
            175
          ],
          [
            "function",
            "compute_phase_amplitude_coupling",
            181
          ],
          [
            "function",
            "get_phase_coherence",
            195
          ],
          [
            "function",
            "get_traveling_wave_offset",
            209
          ],
          [
            "function",
            "get_metrics",
            310
          ]
        ],
        "hippocampal/pattern_separator.py": [
          [
            "class",
            "PatternSeparator",
            25
          ],
          [
            "function",
            "separate",
            66
          ],
          [
            "function",
            "separate_batch",
            116
          ],
          [
            "function",
            "compute_separation_quality",
            120
          ],
          [
            "function",
            "create_content_vector",
            162
          ],
          [
            "function",
            "reset_competitive_weights",
            201
          ],
          [
            "function",
            "get_metrics",
            206
          ]
        ],
        "hippocampal/hippocampal_buffer.py": [
          [
            "class",
            "HippocampalState",
            84
          ],
          [
            "class",
            "PlaceField",
            93
          ],
          [
            "class",
            "EpisodicMemory",
            103
          ],
          [
            "class",
            "PlaceCell",
            144
          ],
          [
            "class",
            "GridCell",
            157
          ],
          [
            "class",
            "HippocampalBuffer",
            180
          ],
          [
            "function",
            "calculate_salience",
            129
          ],
          [
            "function",
            "activation",
            150
          ],
          [
            "function",
            "activation",
            164
          ],
          [
            "function",
            "get_consolidation_candidates",
            473
          ],
          [
            "function",
            "get_metrics",
            609
          ],
          [
            "class",
            "TagScope",
            70
          ],
          [
            "class",
            "PersistenceMode",
            77
          ]
        ],
        "memory_systems/memoria-checkpoint.py": [
          [
            "class",
            "Memoria",
            3
          ],
          [
            "function",
            "store",
            6
          ],
          [
            "function",
            "trace",
            15
          ]
        ],
        "convergence/memory_trace_harmonizer.py": [
          [
            "class",
            "MemoryTraceHarmonizer",
            60
          ],
          [
            "function",
            "harmonize_traces",
            68
          ]
        ],
        "adapters/creativity_adapter.py": [
          [
            "class",
            "CreativityMemoryAdapter",
            51
          ],
          [
            "function",
            "get_emotional_modulator",
            73
          ],
          [
            "function",
            "get_emotional_modulator",
            57
          ],
          [
            "function",
            "store_creative_memory",
            61
          ],
          [
            "function",
            "retrieve_creative_context",
            66
          ]
        ],
        "adapters/colony_memory_adapter.py": [
          [
            "class",
            "ColonyMemoryStats",
            63
          ],
          [
            "class",
            "AdapterConfig",
            83
          ],
          [
            "class",
            "ColonyMemoryAdapter",
            96
          ],
          [
            "function",
            "success_rate",
            74
          ],
          [
            "function",
            "is_active",
            78
          ],
          [
            "function",
            "register_memory_interface",
            175
          ],
          [
            "function",
            "register_interface_factory",
            192
          ],
          [
            "function",
            "register_colony",
            205
          ],
          [
            "function",
            "unregister_colony",
            216
          ],
          [
            "function",
            "get_adapter_stats",
            620
          ],
          [
            "function",
            "get_colony_stats",
            643
          ]
        ],
        "protection/symbolic_quarantine_sanctum.py": [
          [
            "class",
            "QuarantineStatus",
            68
          ],
          [
            "class",
            "RepairProtocolType",
            79
          ],
          [
            "class",
            "ThreatLevel",
            89
          ],
          [
            "class",
            "RestoreViability",
            99
          ],
          [
            "class",
            "QuarantineEntry",
            110
          ],
          [
            "class",
            "RepairProtocol",
            163
          ],
          [
            "class",
            "SanctumManifest",
            186
          ],
          [
            "class",
            "SymbolicQuarantineSanctum",
            207
          ],
          [
            "function",
            "main",
            1518
          ],
          [
            "function",
            "to_dict",
            142
          ],
          [
            "function",
            "add_audit_entry",
            153
          ],
          [
            "function",
            "to_dict",
            177
          ],
          [
            "function",
            "to_dict",
            202
          ],
          [
            "function",
            "get_quarantine_status",
            823
          ],
          [
            "function",
            "get_sanctum_report",
            842
          ],
          [
            "function",
            "register_governor_callback",
            979
          ],
          [
            "function",
            "register_sentinel_callback",
            984
          ],
          [
            "function",
            "register_archive_callback",
            989
          ],
          [
            "function",
            "cool_value",
            1103
          ],
          [
            "function",
            "cool_structure",
            1110
          ]
        ],
        "resonance/resonant_memory_access.py": [
          [
            "class",
            "ResonanceMode",
            57
          ],
          [
            "class",
            "ResonanceSignature",
            67
          ],
          [
            "class",
            "ResonantCluster",
            114
          ],
          [
            "class",
            "ResonantMemoryAccess",
            147
          ],
          [
            "function",
            "calculate_resonance_with",
            81
          ],
          [
            "function",
            "update_coherence",
            129
          ],
          [
            "function",
            "register_memory",
            221
          ],
          [
            "function",
            "get_resonance_stats",
            557
          ]
        ],
        "persistence/orthogonal_persistence.py": [
          [
            "class",
            "PersistenceMode",
            101
          ],
          [
            "class",
            "StorageBackend",
            109
          ],
          [
            "class",
            "PersistentMemory",
            118
          ],
          [
            "class",
            "PersistenceJournal",
            168
          ],
          [
            "class",
            "OrthogonalPersistence",
            247
          ],
          [
            "function",
            "to_bytes",
            130
          ],
          [
            "function",
            "from_bytes",
            149
          ],
          [
            "function",
            "get_metrics",
            681
          ],
          [
            "class",
            "MemoryCoil",
            86
          ],
          [
            "class",
            "TagScope",
            91
          ]
        ],
        "compression/symbolic_delta.py": [
          [
            "class",
            "SymbolicMotif",
            59
          ],
          [
            "class",
            "CompressionMetrics",
            71
          ],
          [
            "class",
            "AdvancedSymbolicDeltaCompressor",
            83
          ],
          [
            "function",
            "create_advanced_compressor",
            761
          ],
          [
            "function",
            "extract_advanced_motifs",
            124
          ],
          [
            "function",
            "importance_based_pruning",
            254
          ],
          [
            "function",
            "compress_memory_delta",
            307
          ],
          [
            "function",
            "analyze_compression_patterns",
            461
          ]
        ],
        "governance/ethical_drift_governor.py": [
          [
            "class",
            "EthicalSeverity",
            30
          ],
          [
            "class",
            "InterventionType",
            39
          ],
          [
            "class",
            "EthicalConcern",
            51
          ],
          [
            "class",
            "GovernanceRule",
            66
          ],
          [
            "class",
            "EthicalDriftGovernor",
            80
          ],
          [
            "function",
            "create_ethical_governor",
            714
          ],
          [
            "function",
            "evaluate_memory_action",
            731
          ],
          [
            "function",
            "monitor_memory_drift",
            231
          ],
          [
            "function",
            "generate_governance_report",
            526
          ],
          [
            "function",
            "register_with_fold_engine",
            706
          ]
        ],
        "integrity/collapse_hash.py": [
          [
            "class",
            "HashAlgorithm",
            76
          ],
          [
            "class",
            "IntegrityStatus",
            84
          ],
          [
            "class",
            "MerkleNode",
            93
          ],
          [
            "class",
            "Checkpoint",
            131
          ],
          [
            "class",
            "MerkleTree",
            153
          ],
          [
            "class",
            "CollapseHash",
            305
          ],
          [
            "function",
            "is_leaf",
            104
          ],
          [
            "function",
            "compute_hash",
            108
          ],
          [
            "function",
            "to_dict",
            141
          ],
          [
            "function",
            "add_memory",
            167
          ],
          [
            "function",
            "verify_memory",
            190
          ],
          [
            "function",
            "generate_proof",
            208
          ],
          [
            "function",
            "verify_proof",
            236
          ],
          [
            "function",
            "get_root_hash",
            253
          ],
          [
            "function",
            "get_checkpoint_history",
            579
          ],
          [
            "class",
            "TagScope",
            66
          ],
          [
            "function",
            "collect_leaves",
            594
          ],
          [
            "function",
            "verify_node",
            612
          ]
        ],
        "replay/replay_buffer.py": [
          [
            "class",
            "ReplayMode",
            78
          ],
          [
            "class",
            "ExperienceType",
            87
          ],
          [
            "class",
            "Experience",
            97
          ],
          [
            "class",
            "ReplayBatch",
            146
          ],
          [
            "class",
            "ReplayBuffer",
            177
          ],
          [
            "function",
            "calculate_sampling_weight",
            127
          ],
          [
            "function",
            "update_priority",
            131
          ],
          [
            "function",
            "calculate_metrics",
            160
          ],
          [
            "function",
            "add_experience",
            261
          ],
          [
            "function",
            "add_episodic_memory",
            307
          ],
          [
            "function",
            "add_semantic_memory",
            317
          ],
          [
            "function",
            "sample_batch",
            327
          ],
          [
            "function",
            "update_priorities",
            382
          ],
          [
            "function",
            "get_experience",
            396
          ],
          [
            "function",
            "find_similar_experiences",
            400
          ],
          [
            "function",
            "get_metrics",
            674
          ],
          [
            "class",
            "EpisodicMemory",
            70
          ],
          [
            "class",
            "SemanticMemory",
            72
          ]
        ],
        "scaffold/atomic_memory_scaffold.py": [
          [
            "class",
            "NucleusState",
            84
          ],
          [
            "class",
            "CoilState",
            92
          ],
          [
            "class",
            "AtomicRule",
            102
          ],
          [
            "class",
            "MemoryCoil",
            121
          ],
          [
            "class",
            "AtomicNucleus",
            141
          ],
          [
            "class",
            "FlexibleCoilSystem",
            251
          ],
          [
            "class",
            "AtomicMemoryScaffold",
            402
          ],
          [
            "function",
            "calculate_stability",
            132
          ],
          [
            "function",
            "add_rule",
            157
          ],
          [
            "function",
            "seal_nucleus",
            183
          ],
          [
            "function",
            "verify_integrity",
            207
          ],
          [
            "function",
            "create_coil",
            270
          ],
          [
            "function",
            "assess_trauma_impact",
            372
          ],
          [
            "function",
            "get_metrics",
            534
          ],
          [
            "class",
            "TagScope",
            68
          ],
          [
            "class",
            "TagPermission",
            75
          ]
        ],
        "systems/replay_system.py": [
          [
            "class",
            "ReplayMode",
            72
          ],
          [
            "class",
            "ReplayDirection",
            80
          ],
          [
            "class",
            "ReplayQuality",
            86
          ],
          [
            "class",
            "MemorySnapshot",
            94
          ],
          [
            "class",
            "ReplaySequence",
            106
          ],
          [
            "class",
            "ReplaySession",
            118
          ],
          [
            "class",
            "TemporalIndex",
            130
          ],
          [
            "class",
            "MemoryReplayer",
            211
          ],
          [
            "function",
            "get_memory_replayer",
            619
          ],
          [
            "function",
            "create_sequence",
            624
          ],
          [
            "function",
            "start_session",
            633
          ],
          [
            "function",
            "get_next",
            637
          ],
          [
            "function",
            "get_replayer_status",
            641
          ],
          [
            "function",
            "add_memory_timestamp",
            139
          ],
          [
            "function",
            "get_memories_in_range",
            163
          ],
          [
            "function",
            "get_causal_sequence",
            173
          ],
          [
            "function",
            "find_temporal_neighbors",
            194
          ],
          [
            "function",
            "create_replay_sequence",
            241
          ],
          [
            "function",
            "start_replay_session",
            291
          ],
          [
            "function",
            "get_next_memory",
            334
          ],
          [
            "function",
            "seek_to_position",
            378
          ],
          [
            "function",
            "find_memories_by_content",
            397
          ],
          [
            "function",
            "create_associative_sequence",
            420
          ],
          [
            "function",
            "get_session_status",
            454
          ],
          [
            "function",
            "close_session",
            478
          ],
          [
            "function",
            "get_system_status",
            502
          ]
        ],
        "systems/memory_recall.py": [
          [
            "function",
            "recall_memories",
            55
          ],
          [
            "function",
            "decrypt_user_file",
            34
          ],
          [
            "function",
            "generate_sid",
            47
          ]
        ],
        "systems/hierarchical_data_store.py": [
          [
            "class",
            "MemoryTier",
            64
          ],
          [
            "class",
            "CompressionLevel",
            73
          ],
          [
            "class",
            "MemoryNode",
            83
          ],
          [
            "class",
            "RetrievalContext",
            108
          ],
          [
            "class",
            "HierarchicalDataStore",
            119
          ],
          [
            "function",
            "get_status",
            829
          ],
          [
            "function",
            "build_tree",
            317
          ]
        ],
        "systems/memory_profiler.py": [
          [
            "class",
            "Category",
            73
          ],
          [
            "class",
            "Action",
            97
          ],
          [
            "class",
            "Key",
            108
          ],
          [
            "class",
            "_Storage",
            113
          ],
          [
            "class",
            "TensorKey",
            134
          ],
          [
            "function",
            "extract_parameters",
            225
          ],
          [
            "function",
            "extract_gradients",
            231
          ],
          [
            "function",
            "get_scopes",
            239
          ],
          [
            "class",
            "SchemaMatcher",
            248
          ],
          [
            "class",
            "OpTree",
            357
          ],
          [
            "class",
            "SizeMap",
            370
          ],
          [
            "class",
            "DataFlowEdge",
            438
          ],
          [
            "class",
            "DataFlowNode",
            451
          ],
          [
            "class",
            "DataFlowGraph",
            545
          ],
          [
            "class",
            "CategoryElement",
            652
          ],
          [
            "class",
            "CategoryDict",
            663
          ],
          [
            "class",
            "MemoryProfile",
            694
          ],
          [
            "class",
            "MemoryProfileTimeline",
            1019
          ],
          [
            "function",
            "from_allocation",
            169
          ],
          [
            "function",
            "from_tensor",
            173
          ],
          [
            "function",
            "inputs_are_mutable",
            262
          ],
          [
            "function",
            "match_schemas",
            280
          ],
          [
            "function",
            "lookup_schemas",
            336
          ],
          [
            "function",
            "dfs",
            362
          ],
          [
            "function",
            "sorted_nodes",
            366
          ],
          [
            "function",
            "is_allocation",
            443
          ],
          [
            "function",
            "is_deletion",
            447
          ],
          [
            "function",
            "inputs",
            517
          ],
          [
            "function",
            "outputs",
            527
          ],
          [
            "function",
            "intermediates",
            535
          ],
          [
            "function",
            "start_time",
            541
          ],
          [
            "function",
            "flow_nodes",
            555
          ],
          [
            "function",
            "validate",
            558
          ],
          [
            "function",
            "leaf_events",
            580
          ],
          [
            "function",
            "lookup",
            636
          ],
          [
            "function",
            "bump",
            641
          ],
          [
            "function",
            "delete",
            646
          ],
          [
            "function",
            "set_by_id",
            668
          ],
          [
            "function",
            "set_by_key",
            672
          ],
          [
            "function",
            "set_by_version",
            675
          ],
          [
            "function",
            "setdefault_by_version",
            678
          ],
          [
            "function",
            "get",
            683
          ],
          [
            "function",
            "timeline",
            710
          ],
          [
            "function",
            "export_memory_timeline",
            1091
          ],
          [
            "function",
            "export_memory_timeline_raw",
            1102
          ],
          [
            "function",
            "export_memory_timeline_html",
            1168
          ],
          [
            "function",
            "matches",
            293
          ],
          [
            "function",
            "leaf_op",
            618
          ],
          [
            "function",
            "children_fn",
            624
          ],
          [
            "function",
            "update",
            1043
          ],
          [
            "function",
            "get_category_index",
            1110
          ]
        ],
        "systems/in_memory_cache_storage_wrapper.py": [
          [
            "class",
            "InMemoryCacheStorageWrapper",
            79
          ],
          [
            "function",
            "ttl_seconds",
            99
          ],
          [
            "function",
            "max_entries",
            101
          ],
          [
            "function",
            "get",
            103
          ],
          [
            "function",
            "set",
            112
          ],
          [
            "function",
            "delete",
            116
          ],
          [
            "function",
            "clear",
            120
          ],
          [
            "function",
            "get_stats",
            125
          ],
          [
            "function",
            "close",
            132
          ],
          [
            "class",
            "CacheStorage",
            67
          ],
          [
            "class",
            "CacheStorageContext",
            69
          ],
          [
            "class",
            "CacheStorageKeyNotFoundError",
            70
          ],
          [
            "class",
            "CacheStat",
            72
          ],
          [
            "function",
            "get_logger",
            73
          ],
          [
            "class",
            "CacheUtils",
            74
          ]
        ],
        "systems/memory_drift_mirror.py": [
          [
            "class",
            "MemoryDriftMirror",
            49
          ],
          [
            "function",
            "analyze_drift",
            60
          ]
        ],
        "systems/symbolic_snapshot.py": [
          [
            "class",
            "SymbolicSnapshot",
            51
          ],
          [
            "function",
            "create_snapshot",
            59
          ]
        ],
        "systems/memory_safety_features.py": [
          [
            "class",
            "DriftMetrics",
            56
          ],
          [
            "class",
            "VerifoldEntry",
            79
          ],
          [
            "class",
            "MemorySafetySystem",
            90
          ],
          [
            "class",
            "SafeMemoryFold",
            522
          ],
          [
            "function",
            "calculate_drift",
            66
          ],
          [
            "function",
            "compute_collapse_hash",
            125
          ],
          [
            "function",
            "track_drift",
            198
          ],
          [
            "function",
            "calibrate_drift_metrics",
            443
          ],
          [
            "function",
            "add_reality_anchor",
            471
          ],
          [
            "function",
            "get_safety_report",
            476
          ]
        ],
        "systems/dream_memory_manager.py": [
          [
            "function",
            "lukhas_tier_required",
            72
          ],
          [
            "class",
            "DreamMemoryManager",
            81
          ],
          [
            "function",
            "decorator",
            74
          ]
        ],
        "systems/attention_memory_layer.py": [
          [
            "class",
            "AttentionConfig",
            56
          ],
          [
            "class",
            "MultiHeadAttention",
            68
          ],
          [
            "class",
            "TemporalAttention",
            193
          ],
          [
            "class",
            "HierarchicalAttention",
            279
          ],
          [
            "class",
            "CrossModalAttention",
            385
          ],
          [
            "class",
            "MemoryAttentionOrchestrator",
            470
          ],
          [
            "function",
            "create_attention_orchestrator",
            658
          ],
          [
            "function",
            "forward",
            104
          ],
          [
            "function",
            "compute_temporal_bias",
            207
          ],
          [
            "function",
            "forward",
            236
          ],
          [
            "function",
            "create_hierarchical_representations",
            297
          ],
          [
            "function",
            "forward",
            332
          ],
          [
            "function",
            "forward",
            409
          ],
          [
            "function",
            "compute_memory_relevance",
            487
          ],
          [
            "function",
            "explain_attention",
            597
          ]
        ],
        "systems/adaptive_memory_engine.py": [
          [
            "function",
            "lukhas_tier_required",
            67
          ],
          [
            "class",
            "AdaptiveMemoryEngine",
            74
          ],
          [
            "function",
            "decorator",
            68
          ],
          [
            "function",
            "recall_signature",
            260
          ]
        ],
        "systems/memory_loop_rebuilder.py": [
          [
            "class",
            "MemoryLoopRebuilder",
            48
          ],
          [
            "function",
            "rebuild_loop",
            56
          ]
        ],
        "systems/memory_evolution.py": [
          [
            "class",
            "MemoryEvolution",
            155
          ],
          [
            "function",
            "create_document",
            165
          ],
          [
            "function",
            "update_document",
            235
          ],
          [
            "function",
            "record_interaction",
            250
          ],
          [
            "function",
            "get_document_history",
            267
          ],
          [
            "function",
            "get_related_documents",
            271
          ],
          [
            "function",
            "get_recommendations",
            313
          ],
          [
            "function",
            "update_document_relationships",
            342
          ],
          [
            "function",
            "get_document_effectiveness",
            352
          ],
          [
            "function",
            "get_usage_patterns",
            356
          ],
          [
            "function",
            "maintenance_cycle",
            360
          ],
          [
            "function",
            "run_multi_cycle_recursion",
            403
          ],
          [
            "function",
            "get_last_voice_synthesis",
            447
          ],
          [
            "class",
            "DocumentVersionControl",
            69
          ],
          [
            "class",
            "KnowledgeAdaptation",
            76
          ],
          [
            "class",
            "UsageBasedLearning",
            86
          ],
          [
            "class",
            "BioOscillatorAdapter",
            105
          ],
          [
            "class",
            "DocumentStructureAnalyzer",
            112
          ],
          [
            "class",
            "VoiceSynthesisAdapter",
            127
          ],
          [
            "function",
            "track_changes",
            73
          ],
          [
            "function",
            "adapt_knowledge",
            80
          ],
          [
            "function",
            "update_relationships",
            83
          ],
          [
            "function",
            "learn_from_usage",
            90
          ],
          [
            "function",
            "record_interaction",
            93
          ],
          [
            "function",
            "identify_patterns",
            96
          ],
          [
            "function",
            "get_document_effectiveness",
            99
          ],
          [
            "function",
            "update_user_preferences",
            102
          ],
          [
            "function",
            "adapt_oscillations",
            109
          ],
          [
            "function",
            "analyze_structure",
            116
          ],
          [
            "function",
            "synthesize",
            131
          ],
          [
            "function",
            "synthesize_content",
            134
          ],
          [
            "function",
            "clear_cache",
            140
          ],
          [
            "function",
            "get_last_synthesis",
            143
          ]
        ],
        "systems/multimodal_memory_support.py": [
          [
            "class",
            "ModalityType",
            82
          ],
          [
            "class",
            "ModalityMetadata",
            92
          ],
          [
            "class",
            "MultiModalMemoryData",
            105
          ],
          [
            "class",
            "ImageProcessor",
            128
          ],
          [
            "class",
            "AudioProcessor",
            285
          ],
          [
            "class",
            "MultiModalMemoryProcessor",
            458
          ],
          [
            "class",
            "MultiModalMemoryItem",
            721
          ],
          [
            "function",
            "process_image",
            149
          ],
          [
            "function",
            "extract_image_features",
            228
          ],
          [
            "function",
            "process_audio",
            306
          ],
          [
            "function",
            "extract_audio_features",
            391
          ],
          [
            "function",
            "get_content",
            739
          ],
          [
            "function",
            "get_tags",
            769
          ],
          [
            "function",
            "get_metadata",
            778
          ],
          [
            "function",
            "get_embedding",
            793
          ],
          [
            "function",
            "get_modality_data",
            797
          ],
          [
            "function",
            "get_modality_embedding",
            810
          ],
          [
            "function",
            "memory_usage",
            824
          ],
          [
            "function",
            "memory_usage_kb",
            846
          ]
        ],
        "systems/glyph_memory_bridge.py": [
          [
            "class",
            "GlyphMemoryIndex",
            67
          ],
          [
            "class",
            "GlyphMemoryBridge",
            79
          ],
          [
            "function",
            "create_glyph_indexed_memory",
            100
          ],
          [
            "function",
            "recall_by_glyph",
            164
          ],
          [
            "function",
            "create_drift_anchor",
            227
          ],
          [
            "function",
            "assess_memory_drift",
            260
          ],
          [
            "function",
            "get_memory_by_causal_link",
            307
          ],
          [
            "function",
            "create_retrieval_filter",
            351
          ],
          [
            "function",
            "get_statistics",
            450
          ],
          [
            "function",
            "traverse_causal_chain",
            323
          ]
        ],
        "systems/memory_reflector.py": [
          [
            "function",
            "store_interaction",
            52
          ],
          [
            "function",
            "recall_last_interaction",
            62
          ]
        ],
        "systems/memory_lock.py": [
          [
            "class",
            "TraumaLockSystem",
            43
          ],
          [
            "function",
            "encrypt_memory",
            117
          ],
          [
            "function",
            "decrypt_memory",
            166
          ],
          [
            "function",
            "get_access_stats",
            404
          ]
        ],
        "systems/memory_helix.py": [
          [
            "class",
            "VoiceMemoryHelix",
            98
          ],
          [
            "function",
            "save_memory",
            179
          ],
          [
            "function",
            "get_curious_word",
            353
          ],
          [
            "function",
            "get_due_practice_words",
            478
          ],
          [
            "function",
            "get_pronunciation_for_word",
            517
          ],
          [
            "function",
            "generate_accent_report",
            539
          ]
        ],
        "systems/causal_memory_chains.py": [
          [
            "class",
            "CausalRelationType",
            58
          ],
          [
            "class",
            "CausalStrength",
            72
          ],
          [
            "class",
            "CausalEvidence",
            83
          ],
          [
            "class",
            "CausalRelation",
            104
          ],
          [
            "class",
            "CausalChain",
            165
          ],
          [
            "class",
            "TemporalCausalAnalyzer",
            201
          ],
          [
            "class",
            "CausalGraphBuilder",
            423
          ],
          [
            "class",
            "CausalReasoningEngine",
            659
          ],
          [
            "class",
            "CausalMemoryWrapper",
            915
          ],
          [
            "function",
            "to_dict",
            92
          ],
          [
            "function",
            "add_evidence",
            118
          ],
          [
            "function",
            "to_dict",
            148
          ],
          [
            "function",
            "get_chain_length",
            175
          ],
          [
            "function",
            "get_total_delay",
            179
          ],
          [
            "function",
            "to_dict",
            187
          ],
          [
            "function",
            "add_memory",
            438
          ],
          [
            "function",
            "add_causal_relation",
            446
          ],
          [
            "function",
            "find_causal_paths",
            477
          ],
          [
            "function",
            "get_causal_ancestors",
            496
          ],
          [
            "function",
            "get_causal_descendants",
            518
          ],
          [
            "function",
            "identify_causal_chains",
            540
          ],
          [
            "function",
            "analyze_causal_structure",
            604
          ],
          [
            "function",
            "get_causal_reasoning_statistics",
            897
          ]
        ],
        "systems/memory_identity.py": [
          [
            "class",
            "MemoryAccessPolicy",
            21
          ],
          [
            "class",
            "MemoryIdentityIntegration",
            31
          ],
          [
            "function",
            "register_memory",
            57
          ],
          [
            "function",
            "verify_access_permission",
            95
          ],
          [
            "function",
            "share_memory",
            159
          ],
          [
            "function",
            "revoke_memory_access",
            198
          ],
          [
            "function",
            "get_shared_memories",
            231
          ],
          [
            "function",
            "encrypt_memory_content",
            243
          ],
          [
            "function",
            "decrypt_memory_content",
            286
          ],
          [
            "function",
            "cleanup",
            366
          ],
          [
            "function",
            "notify_memory_removal",
            400
          ],
          [
            "function",
            "get_permission_status",
            430
          ]
        ],
        "systems/memoria_system.py": [
          [
            "function",
            "log_memory",
            45
          ]
        ],
        "systems/identity_lineage_bridge.py": [
          [
            "class",
            "ProtectionLevel",
            46
          ],
          [
            "class",
            "ThreatType",
            55
          ],
          [
            "class",
            "IdentityThreat",
            65
          ],
          [
            "class",
            "ProtectionAction",
            77
          ],
          [
            "class",
            "IdentityLineageBridge",
            87
          ],
          [
            "function",
            "validate_memory_operation",
            116
          ],
          [
            "function",
            "protect_identity_anchor",
            178
          ],
          [
            "function",
            "detect_collapse_trauma_threats",
            229
          ],
          [
            "function",
            "create_recovery_protocol",
            307
          ],
          [
            "function",
            "get_identity_protection_status",
            370
          ]
        ],
        "systems/foldout_simple.py": [
          [
            "function",
            "create_fold_bundle",
            59
          ]
        ],
        "systems/memory_resonance_analyzer.py": [
          [
            "class",
            "MemoryResonanceAnalyzer",
            18
          ],
          [
            "function",
            "analyze_resonance",
            26
          ]
        ],
        "systems/resonance_memory_retrieval.py": [
          [
            "class",
            "EmotionalState",
            21
          ],
          [
            "class",
            "FrequencyFingerprint",
            30
          ],
          [
            "class",
            "ResonantMemory",
            40
          ],
          [
            "class",
            "FrequencyGenerator",
            52
          ],
          [
            "class",
            "ResonanceCalculator",
            132
          ],
          [
            "class",
            "ResonanceGate",
            211
          ],
          [
            "function",
            "emotional_state_to_frequency",
            56
          ],
          [
            "function",
            "generate_frequency_fingerprint",
            81
          ],
          [
            "function",
            "cosine_similarity",
            136
          ],
          [
            "function",
            "frequency_resonance",
            159
          ],
          [
            "function",
            "temporal_decay",
            191
          ],
          [
            "function",
            "access_boost",
            199
          ],
          [
            "function",
            "store_memory_with_frequency",
            220
          ],
          [
            "function",
            "retrieve_by_resonance",
            296
          ],
          [
            "function",
            "update_memory_resonance",
            374
          ],
          [
            "function",
            "get_memory_by_id",
            404
          ],
          [
            "function",
            "analyze_resonance_patterns",
            432
          ],
          [
            "function",
            "get_system_health",
            487
          ],
          [
            "function",
            "demo_resonance_system",
            526
          ]
        ],
        "systems/in_memory_span_exporter.py": [
          [
            "class",
            "InMemorySpanExporter",
            39
          ],
          [
            "function",
            "clear",
            50
          ],
          [
            "function",
            "get_finished_spans",
            55
          ],
          [
            "function",
            "export",
            60
          ],
          [
            "function",
            "shutdown",
            68
          ],
          [
            "function",
            "force_flush",
            72
          ],
          [
            "class",
            "ReadableSpan",
            28
          ],
          [
            "class",
            "SpanExporter",
            29
          ],
          [
            "class",
            "SpanExportResult",
            34
          ],
          [
            "function",
            "export",
            30
          ],
          [
            "function",
            "shutdown",
            31
          ],
          [
            "function",
            "force_flush",
            32
          ]
        ],
        "systems/distributed_memory_fold.py": [
          [
            "class",
            "NodeState",
            63
          ],
          [
            "class",
            "MessageType",
            72
          ],
          [
            "class",
            "DistributedMemoryEntry",
            87
          ],
          [
            "class",
            "NodeInfo",
            131
          ],
          [
            "class",
            "ConsensusProtocol",
            152
          ],
          [
            "class",
            "DistributedMemoryFold",
            564
          ],
          [
            "function",
            "to_dict",
            100
          ],
          [
            "function",
            "from_dict",
            115
          ],
          [
            "function",
            "endpoint",
            144
          ],
          [
            "function",
            "is_alive",
            147
          ],
          [
            "function",
            "get_network_status",
            887
          ]
        ],
        "systems/integration_example.py": [
          [
            "class",
            "EnhancedMemoryIntegration",
            41
          ],
          [
            "class",
            "UnifiedMemoryInterface",
            154
          ]
        ],
        "systems/pin_memory.py": [
          [
            "function",
            "pin_memory",
            64
          ],
          [
            "function",
            "do_one_step",
            35
          ]
        ],
        "systems/memory_orchestrator.py": [
          [
            "class",
            "MemoryOperationType",
            76
          ],
          [
            "class",
            "MemorySource",
            87
          ],
          [
            "class",
            "MemoryRequest",
            98
          ],
          [
            "class",
            "MemoryResponse",
            114
          ],
          [
            "class",
            "AGIMemoryOrchestrator",
            126
          ],
          [
            "function",
            "get_status",
            688
          ]
        ],
        "systems/foldout.py": [
          [
            "function",
            "export_folds",
            51
          ],
          [
            "function",
            "export_folds_streaming",
            197
          ],
          [
            "function",
            "create_fold_bundle",
            228
          ],
          [
            "function",
            "create_memory_exporter",
            266
          ],
          [
            "function",
            "exporter",
            280
          ]
        ],
        "systems/memory_node.py": [
          [
            "class",
            "MemoryNode",
            23
          ],
          [
            "function",
            "store",
            60
          ],
          [
            "function",
            "retrieve",
            120
          ],
          [
            "function",
            "retrieve_recent",
            157
          ],
          [
            "function",
            "retrieve_by_type",
            178
          ],
          [
            "function",
            "semantic_search",
            213
          ],
          [
            "function",
            "forget",
            249
          ],
          [
            "function",
            "add_to_working_memory",
            286
          ],
          [
            "function",
            "clear_working_memory",
            317
          ],
          [
            "function",
            "update_memory",
            323
          ],
          [
            "function",
            "get_memory_stats",
            388
          ],
          [
            "function",
            "process_message",
            570
          ]
        ],
        "systems/memory_media_file_storage.py": [
          [
            "function",
            "get_extension_for_mimetype",
            67
          ],
          [
            "class",
            "MemoryFile",
            78
          ],
          [
            "class",
            "MemoryMediaFileStorage",
            91
          ],
          [
            "function",
            "content_size",
            87
          ],
          [
            "function",
            "load_and_get_id",
            104
          ],
          [
            "function",
            "get_file",
            131
          ],
          [
            "function",
            "get_url",
            146
          ],
          [
            "function",
            "delete_file",
            154
          ],
          [
            "function",
            "get_stats",
            169
          ]
        ],
        "systems/memory_helix_golden.py": [
          [
            "class",
            "MemoryStrand",
            82
          ],
          [
            "class",
            "MutationStrategy",
            90
          ],
          [
            "class",
            "HealixMapper",
            97
          ]
        ],
        "systems/memory_format.py": [
          [
            "function",
            "convert_conv2d_weight_memory_format",
            5
          ],
          [
            "function",
            "convert_conv3d_weight_memory_format",
            80
          ]
        ],
        "systems/memory_visualizer.py": [
          [
            "class",
            "VisualizationConfig",
            42
          ],
          [
            "class",
            "EnhancedMemoryVisualizer",
            50
          ],
          [
            "class",
            "Enhanced3DVisualizer",
            143
          ],
          [
            "function",
            "setup_visualization",
            63
          ],
          [
            "function",
            "launch_3d_viewer",
            151
          ],
          [
            "class",
            "ProtonGradient",
            35
          ]
        ],
        "systems/memory_session_storage.py": [
          [
            "class",
            "MemorySessionStorage",
            27
          ],
          [
            "function",
            "get",
            67
          ],
          [
            "function",
            "save",
            70
          ],
          [
            "function",
            "delete",
            73
          ],
          [
            "function",
            "list",
            76
          ]
        ],
        "systems/helix_dna.py": [
          [
            "function",
            "lukhas_tier_required",
            31
          ],
          [
            "class",
            "HelixMemory",
            36
          ],
          [
            "function",
            "decorator",
            32
          ]
        ],
        "systems/memory_planning.py": [
          [
            "class",
            "LiveRange",
            33
          ],
          [
            "class",
            "LiveRanges",
            57
          ],
          [
            "class",
            "AllocationTreeNode",
            100
          ],
          [
            "class",
            "Allocation",
            133
          ],
          [
            "class",
            "Empty",
            191
          ],
          [
            "class",
            "MemorySplitProtocol",
            212
          ],
          [
            "class",
            "ClearCacheOnAllocateMixin",
            220
          ],
          [
            "class",
            "TemporalSplit",
            239
          ],
          [
            "class",
            "SpatialSplit",
            320
          ],
          [
            "class",
            "AllocationPool",
            366
          ],
          [
            "class",
            "AllocationPools",
            446
          ],
          [
            "class",
            "BufferGroup",
            508
          ],
          [
            "class",
            "PoolMemoryPlanningLine",
            553
          ],
          [
            "class",
            "AllocFromPoolLine",
            565
          ],
          [
            "class",
            "DeallocFromPoolLine",
            595
          ],
          [
            "class",
            "MemoryPlanner",
            607
          ],
          [
            "function",
            "contains",
            45
          ],
          [
            "function",
            "join",
            49
          ],
          [
            "function",
            "overlaps",
            75
          ],
          [
            "function",
            "begin",
            89
          ],
          [
            "function",
            "end",
            93
          ],
          [
            "function",
            "allocate",
            105
          ],
          [
            "function",
            "get_live_ranges",
            112
          ],
          [
            "function",
            "get_size_hint",
            116
          ],
          [
            "function",
            "get_symbolic_size",
            120
          ],
          [
            "function",
            "finalize",
            124
          ],
          [
            "function",
            "is_empty",
            128
          ],
          [
            "function",
            "device",
            147
          ],
          [
            "function",
            "get_live_ranges",
            150
          ],
          [
            "function",
            "get_size_hint",
            153
          ],
          [
            "function",
            "get_symbolic_size",
            156
          ],
          [
            "function",
            "mark_allocated",
            159
          ],
          [
            "function",
            "finalize",
            163
          ],
          [
            "function",
            "codegen_alloc_from_pool",
            169
          ],
          [
            "function",
            "get_live_ranges",
            199
          ],
          [
            "function",
            "get_size_hint",
            202
          ],
          [
            "function",
            "get_symbolic_size",
            205
          ],
          [
            "function",
            "is_empty",
            208
          ],
          [
            "function",
            "allocate",
            226
          ],
          [
            "function",
            "clear_cache",
            232
          ],
          [
            "function",
            "get_live_ranges",
            289
          ],
          [
            "function",
            "get_size_hint",
            297
          ],
          [
            "function",
            "get_symbolic_size",
            303
          ],
          [
            "function",
            "is_empty",
            308
          ],
          [
            "function",
            "finalize",
            311
          ],
          [
            "function",
            "create",
            330
          ],
          [
            "function",
            "get_live_ranges",
            339
          ],
          [
            "function",
            "get_size_hint",
            347
          ],
          [
            "function",
            "get_symbolic_size",
            351
          ],
          [
            "function",
            "finalize",
            354
          ],
          [
            "function",
            "allocate",
            380
          ],
          [
            "function",
            "allocate_at_end",
            395
          ],
          [
            "function",
            "finalize",
            400
          ],
          [
            "function",
            "codegen_create",
            406
          ],
          [
            "function",
            "codegen_destroy",
            435
          ],
          [
            "function",
            "get_pools",
            455
          ],
          [
            "function",
            "allocate",
            460
          ],
          [
            "function",
            "allocate_output",
            477
          ],
          [
            "function",
            "finalize",
            493
          ],
          [
            "function",
            "pprint",
            500
          ],
          [
            "function",
            "update_usage",
            521
          ],
          [
            "function",
            "sym_nbytes",
            528
          ],
          [
            "function",
            "make_allocation",
            531
          ],
          [
            "function",
            "node",
            560
          ],
          [
            "function",
            "codegen",
            570
          ],
          [
            "function",
            "codegen",
            600
          ],
          [
            "function",
            "plan",
            617
          ],
          [
            "function",
            "drop_removed_buffers",
            627
          ],
          [
            "function",
            "compute_buffer_groups",
            637
          ],
          [
            "function",
            "convert_to_pool_lines",
            667
          ],
          [
            "function",
            "compute_live_ranges",
            689
          ],
          [
            "function",
            "allocate_groups",
            710
          ],
          [
            "function",
            "mark_first_last_usage",
            749
          ]
        ],
        "systems/memory_processing.py": [
          [
            "class",
            "EmotionalState",
            27
          ],
          [
            "class",
            "MemoryNode",
            35
          ],
          [
            "class",
            "MemoryProcessor",
            45
          ],
          [
            "function",
            "store_interaction",
            53
          ],
          [
            "function",
            "get_relevant_memories",
            84
          ],
          [
            "function",
            "update_memory_references",
            132
          ],
          [
            "function",
            "get_emotional_summary",
            144
          ],
          [
            "function",
            "export_memories",
            162
          ],
          [
            "function",
            "import_memories",
            187
          ],
          [
            "function",
            "cluster_memories",
            217
          ],
          [
            "function",
            "get_memory_timeline",
            240
          ],
          [
            "function",
            "calculate_relevance",
            90
          ]
        ],
        "systems/in_memory_log_exporter.py": [
          [
            "class",
            "InMemoryLogExporter",
            38
          ],
          [
            "function",
            "clear",
            49
          ],
          [
            "function",
            "get_finished_logs",
            54
          ],
          [
            "function",
            "export",
            59
          ],
          [
            "function",
            "shutdown",
            67
          ],
          [
            "class",
            "LogData",
            28
          ],
          [
            "class",
            "LogExporter",
            29
          ],
          [
            "class",
            "LogExportResult",
            33
          ],
          [
            "function",
            "export",
            30
          ],
          [
            "function",
            "shutdown",
            31
          ]
        ],
        "systems/core.py": [
          [
            "class",
            "MemoryType",
            59
          ],
          [
            "class",
            "MemoryPriority",
            64
          ],
          [
            "class",
            "MemoryStrand",
            67
          ],
          [
            "class",
            "MemoryEntry",
            73
          ],
          [
            "class",
            "MemoryConfig",
            89
          ],
          [
            "class",
            "MemoryHealth",
            103
          ],
          [
            "function",
            "lukhas_tier_required",
            116
          ],
          [
            "class",
            "MemoryModule",
            121
          ],
          [
            "function",
            "decorator",
            117
          ],
          [
            "class",
            "BaseModule",
            38
          ],
          [
            "class",
            "BaseConfig",
            46
          ],
          [
            "class",
            "BaseHealth",
            48
          ],
          [
            "function",
            "symbolic_vocabulary",
            51
          ],
          [
            "function",
            "ethical_validation",
            54
          ],
          [
            "function",
            "decorator",
            52
          ],
          [
            "function",
            "decorator",
            55
          ]
        ],
        "systems/processor.py": [
          [
            "class",
            "MemoryProcessor",
            35
          ],
          [
            "function",
            "create_memory_component",
            176
          ],
          [
            "function",
            "get_status",
            159
          ]
        ],
        "systems/learn_to_learn.py": [
          [
            "function",
            "lukhas_tier_required",
            24
          ],
          [
            "class",
            "MetaLearningSystem",
            29
          ],
          [
            "function",
            "decorator",
            25
          ],
          [
            "function",
            "optimize_learning_approach",
            42
          ],
          [
            "function",
            "incorporate_feedback",
            67
          ],
          [
            "function",
            "generate_learning_report",
            76
          ]
        ],
        "systems/chatgpt_memory_integrator_legacy.py": [
          [
            "function",
            "lukhas_tier_required",
            67
          ],
          [
            "class",
            "ChatGPTMemoryConfig",
            74
          ],
          [
            "class",
            "ChatGPTMemoryIntegrator",
            88
          ],
          [
            "function",
            "decorator",
            68
          ],
          [
            "class",
            "MockGPTClient",
            401
          ],
          [
            "class",
            "MemoryManager",
            48
          ],
          [
            "class",
            "CognitiveAdapter",
            49
          ],
          [
            "class",
            "CognitiveUpdater",
            50
          ],
          [
            "class",
            "MemoryType",
            51
          ],
          [
            "class",
            "MemoryPriority",
            52
          ],
          [
            "class",
            "GPTClient",
            60
          ],
          [
            "class",
            "ConversationState",
            61
          ],
          [
            "class",
            "ConversationMessage",
            62
          ],
          [
            "function",
            "set_memory_manager",
            404
          ],
          [
            "function",
            "set_cognitive_adapter",
            405
          ]
        ],
        "systems/memory_validator.py": [
          [
            "class",
            "MemoryValidator",
            35
          ],
          [
            "function",
            "create_memory_component",
            176
          ],
          [
            "function",
            "get_status",
            159
          ]
        ],
        "systems/optimized_hybrid_memory_fold.py": [
          [
            "class",
            "OptimizedVectorStorageLayer",
            54
          ],
          [
            "class",
            "OptimizedHybridMemoryFold",
            99
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold_with_lazy_loading",
            594
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold",
            668
          ],
          [
            "function",
            "create_optimized_hybrid_memory_fold_512",
            724
          ],
          [
            "function",
            "add_vector",
            62
          ],
          [
            "function",
            "get_memory_usage_stats",
            84
          ],
          [
            "function",
            "get_optimization_statistics",
            428
          ],
          [
            "function",
            "get_enhanced_statistics",
            450
          ]
        ],
        "systems/memory_tracker.py": [
          [
            "class",
            "MemoryProfileDispatchMode",
            21
          ],
          [
            "class",
            "MemoryTracker",
            46
          ],
          [
            "function",
            "start_monitor",
            87
          ],
          [
            "function",
            "stop",
            115
          ],
          [
            "function",
            "summary",
            131
          ],
          [
            "function",
            "show_traces",
            154
          ],
          [
            "function",
            "save_stats",
            202
          ],
          [
            "function",
            "load",
            215
          ]
        ],
        "systems/trace_injector.py": [
          [
            "class",
            "MemoryTrace",
            16
          ],
          [
            "class",
            "TraceInjector",
            32
          ],
          [
            "function",
            "get_global_injector",
            151
          ],
          [
            "function",
            "inject_memory_trace",
            156
          ],
          [
            "function",
            "start_memory_trace",
            168
          ],
          [
            "function",
            "end_memory_trace",
            173
          ],
          [
            "function",
            "export_trace_data",
            178
          ],
          [
            "function",
            "to_dict",
            27
          ],
          [
            "function",
            "generate_trace_id",
            40
          ],
          [
            "function",
            "inject_trace",
            47
          ],
          [
            "function",
            "start_memory_operation",
            72
          ],
          [
            "function",
            "end_memory_operation",
            82
          ],
          [
            "function",
            "get_trace_chain",
            100
          ],
          [
            "function",
            "get_active_traces",
            108
          ],
          [
            "function",
            "export_traces",
            112
          ],
          [
            "function",
            "clear_traces",
            141
          ]
        ],
        "systems/fold_lineage_tracker.py": [
          [
            "class",
            "CausationType",
            78
          ],
          [
            "class",
            "CausalLink",
            96
          ],
          [
            "class",
            "FoldLineageNode",
            108
          ],
          [
            "class",
            "LineageChain",
            121
          ],
          [
            "class",
            "FoldLineageTracker",
            134
          ],
          [
            "function",
            "create_lineage_tracker",
            1010
          ],
          [
            "function",
            "create_enhanced_lineage_tracker",
            1015
          ],
          [
            "function",
            "add_lineage_entry",
            159
          ],
          [
            "function",
            "get_lineage",
            180
          ],
          [
            "function",
            "track_causation",
            216
          ],
          [
            "function",
            "track_fold_state",
            282
          ],
          [
            "function",
            "analyze_fold_lineage",
            321
          ],
          [
            "function",
            "generate_lineage_graph",
            551
          ],
          [
            "function",
            "get_causal_insights",
            708
          ]
        ],
        "systems/trauma_lock.py": [
          [
            "class",
            "TraumaLockSystem",
            43
          ],
          [
            "function",
            "encrypt_memory",
            111
          ],
          [
            "function",
            "decrypt_memory",
            160
          ],
          [
            "function",
            "get_access_stats",
            377
          ]
        ],
        "systems/memory_collapse_verifier.py": [
          [
            "class",
            "MemoryNode",
            16
          ],
          [
            "class",
            "MemoryCollapseVerifier",
            24
          ],
          [
            "function",
            "verify_collapse_integrity",
            33
          ],
          [
            "function",
            "validate_semantic_preservation",
            40
          ],
          [
            "function",
            "check_emotional_consistency",
            45
          ],
          [
            "function",
            "audit_collapse_operation",
            50
          ]
        ],
        "systems/agent_memory.py": [
          [
            "function",
            "lukhas_tier_required",
            32
          ],
          [
            "class",
            "AgentMemory",
            40
          ],
          [
            "function",
            "get_shared_memory",
            275
          ],
          [
            "function",
            "decorator",
            33
          ]
        ],
        "systems/memory_checkpoint.py": [
          [
            "class",
            "Memoria",
            13
          ],
          [
            "function",
            "store",
            16
          ],
          [
            "function",
            "trace",
            25
          ]
        ],
        "systems/memory_introspection_engine.py": [
          [
            "class",
            "MemoryIntrospectionEngine",
            15
          ],
          [
            "function",
            "compute_fold_metrics",
            21
          ],
          [
            "function",
            "snapshot_memory_state",
            36
          ],
          [
            "function",
            "introspect",
            40
          ]
        ],
        "systems/engine.py": [
          [
            "class",
            "MemoryEngine",
            35
          ],
          [
            "function",
            "create_memory_component",
            176
          ],
          [
            "function",
            "get_status",
            159
          ]
        ],
        "systems/memory_encryptor.py": [
          [
            "function",
            "encrypt_memory",
            68
          ],
          [
            "function",
            "encrypt_user_file",
            61
          ]
        ],
        "systems/foldin_simple.py": [
          [
            "function",
            "verify_lkf_pack",
            41
          ]
        ],
        "systems/helix_mapper.py": [
          [
            "function",
            "lukhas_tier_required",
            26
          ],
          [
            "class",
            "HelixMapper",
            31
          ],
          [
            "function",
            "decorator",
            27
          ]
        ],
        "systems/quantum_memory_architecture.py": [
          [
            "class",
            "QuantumAssociativeMemoryBank",
            25
          ]
        ],
        "systems/hybrid_memory_fold.py": [
          [
            "class",
            "HybridMemoryItem",
            77
          ],
          [
            "class",
            "VectorStorageLayer",
            100
          ],
          [
            "class",
            "MemoryAttentionLayer",
            178
          ],
          [
            "class",
            "ContinuousLearningEngine",
            235
          ],
          [
            "class",
            "HybridMemoryFold",
            296
          ],
          [
            "function",
            "create_hybrid_memory_fold",
            715
          ],
          [
            "function",
            "add_vector",
            114
          ],
          [
            "function",
            "search_similar",
            131
          ],
          [
            "function",
            "compute_attention_scores",
            193
          ],
          [
            "function",
            "update_tag_importance",
            249
          ],
          [
            "function",
            "get_tag_importance",
            284
          ],
          [
            "function",
            "decay_all_weights",
            288
          ],
          [
            "function",
            "get_enhanced_statistics",
            681
          ],
          [
            "class",
            "nn",
            66
          ],
          [
            "function",
            "trace_recursive",
            535
          ],
          [
            "class",
            "Module",
            67
          ],
          [
            "class",
            "Linear",
            68
          ],
          [
            "class",
            "MultiheadAttention",
            70
          ]
        ],
        "systems/simple_memory.py": [
          [
            "class",
            "AgentMemory",
            16
          ],
          [
            "function",
            "append_to_shared_memory",
            66
          ],
          [
            "function",
            "read_from_shared_memory",
            75
          ],
          [
            "function",
            "read_all_memory",
            61
          ]
        ],
        "systems/memory_bases.py": [
          [
            "class",
            "MemoryManager",
            11
          ],
          [
            "class",
            "MemoryAccessPolicy",
            43
          ],
          [
            "class",
            "MemoryIdentityIntegration",
            61
          ],
          [
            "function",
            "store",
            20
          ],
          [
            "function",
            "retrieve",
            25
          ],
          [
            "function",
            "delete",
            30
          ],
          [
            "function",
            "log_access",
            34
          ],
          [
            "function",
            "can_access",
            51
          ],
          [
            "function",
            "link_memory_to_identity",
            68
          ],
          [
            "function",
            "get_identity_memories",
            72
          ]
        ],
        "systems/orchestrator.py": [
          [
            "class",
            "MemoryOrchestrator",
            35
          ],
          [
            "function",
            "create_memory_component",
            176
          ],
          [
            "function",
            "get_status",
            159
          ]
        ],
        "systems/pin_memory_cache.py": [
          [
            "class",
            "PinMemoryCache",
            7
          ],
          [
            "function",
            "get",
            26
          ],
          [
            "function",
            "remove",
            58
          ]
        ],
        "systems/foldin.py": [
          [
            "class",
            "LKFPackError",
            49
          ],
          [
            "class",
            "LKFPackVersionError",
            54
          ],
          [
            "class",
            "LKFPackIntegrityError",
            59
          ],
          [
            "function",
            "import_folds",
            64
          ],
          [
            "function",
            "import_folds_safe",
            218
          ],
          [
            "function",
            "verify_lkf_pack",
            262
          ],
          [
            "function",
            "import_from_stream",
            323
          ],
          [
            "function",
            "create_memory_importer",
            357
          ],
          [
            "function",
            "importer",
            371
          ]
        ],
        "systems/simple_store.py": [
          [
            "class",
            "MemoryType",
            33
          ],
          [
            "class",
            "MemoryPriority",
            39
          ],
          [
            "class",
            "MemoryEntry",
            47
          ],
          [
            "class",
            "MemoryConfig",
            89
          ],
          [
            "class",
            "UnifiedMemoryManager",
            115
          ],
          [
            "function",
            "to_dict",
            59
          ],
          [
            "function",
            "from_dict",
            74
          ]
        ],
        "systems/emotional_memory_manager.py": [
          [
            "class",
            "EmotionalModulator",
            21
          ],
          [
            "function",
            "modulate_emotion",
            41
          ],
          [
            "function",
            "integrate_memory_emotion",
            79
          ],
          [
            "function",
            "get_emotional_context",
            105
          ],
          [
            "function",
            "update_emotional_state",
            117
          ]
        ],
        "systems/memory_advanced_manager.py": [
          [
            "function",
            "lukhas_tier_required",
            56
          ],
          [
            "class",
            "AdvancedMemoryManager",
            64
          ],
          [
            "function",
            "decorator",
            58
          ],
          [
            "function",
            "get_memory_statistics",
            524
          ]
        ],
        "systems/healix_memory_core.py": [
          [
            "function",
            "lukhas_tier_required",
            39
          ],
          [
            "class",
            "MemorySegment",
            44
          ],
          [
            "function",
            "calculate_drift_score",
            61
          ],
          [
            "class",
            "HealixMemoryCore",
            88
          ],
          [
            "class",
            "HealixVisualizer",
            325
          ],
          [
            "function",
            "decorator",
            40
          ],
          [
            "function",
            "encode_to_dna",
            107
          ],
          [
            "function",
            "decode_from_dna",
            128
          ],
          [
            "function",
            "generate_collapse_hash",
            148
          ],
          [
            "function",
            "get_baseline_state",
            153
          ],
          [
            "function",
            "anonymize_sequence",
            195
          ],
          [
            "function",
            "get_memory_stats",
            285
          ],
          [
            "function",
            "generate_compliance_report",
            302
          ],
          [
            "function",
            "create_memory_landscape_plot_data",
            335
          ]
        ],
        "systems/recall_handler.py": [
          [
            "class",
            "RecallHandler",
            18
          ],
          [
            "function",
            "recall_memory",
            26
          ]
        ],
        "systems/episodic_replay_buffer.py": [
          [
            "class",
            "ReplayStrategy",
            66
          ],
          [
            "class",
            "ConsolidationPhase",
            77
          ],
          [
            "class",
            "EpisodicMemory",
            87
          ],
          [
            "class",
            "PrioritizedReplayBuffer",
            169
          ],
          [
            "class",
            "DreamStateReplay",
            700
          ],
          [
            "class",
            "EpisodicReplayMemoryWrapper",
            953
          ],
          [
            "function",
            "update_priority",
            107
          ],
          [
            "function",
            "mark_replayed",
            134
          ],
          [
            "function",
            "to_dict",
            142
          ],
          [
            "function",
            "add_experience",
            211
          ],
          [
            "function",
            "sample_batch",
            279
          ],
          [
            "function",
            "update_priorities",
            508
          ],
          [
            "function",
            "get_episode_trajectory",
            525
          ],
          [
            "function",
            "consolidate_memories",
            538
          ],
          [
            "function",
            "get_replay_statistics",
            653
          ],
          [
            "function",
            "get_replay_statistics",
            1093
          ]
        ],
        "systems/tier_system.py": [
          [
            "class",
            "TierLevel",
            31
          ],
          [
            "class",
            "AccessType",
            42
          ],
          [
            "class",
            "PermissionScope",
            53
          ],
          [
            "class",
            "AccessContext",
            66
          ],
          [
            "class",
            "TierPermission",
            79
          ],
          [
            "class",
            "AccessDecision",
            91
          ],
          [
            "class",
            "DynamicTierSystem",
            104
          ],
          [
            "function",
            "lukhas_tier_required",
            608
          ],
          [
            "function",
            "create_tier_system",
            710
          ],
          [
            "function",
            "symbolic_access_test",
            721
          ],
          [
            "function",
            "check_access_level",
            737
          ],
          [
            "function",
            "check_access",
            284
          ],
          [
            "function",
            "elevate_session",
            479
          ],
          [
            "function",
            "decorator",
            619
          ],
          [
            "function",
            "wrapper",
            621
          ]
        ],
        "systems/memory_drift_stabilizer.py": [
          [
            "class",
            "MemoryDriftStabilizer",
            18
          ],
          [
            "function",
            "analyze_drift_log",
            26
          ],
          [
            "function",
            "stabilize_memory",
            35
          ]
        ],
        "systems/memory_seeder.py": [
          [
            "function",
            "generate_seed_memory",
            21
          ],
          [
            "function",
            "seed_memory_store",
            47
          ]
        ],
        "systems/memory_helix_visualizer.py": [
          [
            "class",
            "MemoryHelixVisualizer",
            22
          ],
          [
            "function",
            "get_memory_coordinates",
            69
          ],
          [
            "function",
            "get_authorized_memories",
            98
          ],
          [
            "function",
            "visualize_memory_helix",
            128
          ],
          [
            "function",
            "create_interactive_visualization",
            292
          ],
          [
            "function",
            "update_memory_links",
            319
          ]
        ],
        "systems/integration_adapters.py": [
          [
            "class",
            "VerifoldRegistryAdapter",
            30
          ],
          [
            "class",
            "DriftMetricsAdapter",
            135
          ],
          [
            "class",
            "RealityAnchorsAdapter",
            264
          ],
          [
            "class",
            "ConsensusValidationAdapter",
            375
          ],
          [
            "class",
            "MemorySafetyIntegration",
            517
          ],
          [
            "function",
            "register_trust_callback",
            41
          ],
          [
            "function",
            "get_module_trust_report",
            121
          ],
          [
            "function",
            "set_module_drift_threshold",
            147
          ],
          [
            "function",
            "register_calibration_callback",
            151
          ],
          [
            "function",
            "get_module_drift_report",
            231
          ],
          [
            "function",
            "add_module_anchor",
            276
          ],
          [
            "function",
            "register_validation_callback",
            284
          ],
          [
            "function",
            "get_module_anchors",
            370
          ],
          [
            "function",
            "register_colony_validator",
            392
          ],
          [
            "function",
            "set_swarm_threshold",
            502
          ],
          [
            "function",
            "get_consensus_report",
            506
          ],
          [
            "function",
            "get_integration_status",
            568
          ]
        ],
        "systems/module_integrations.py": [
          [
            "class",
            "LearningModuleIntegration",
            31
          ],
          [
            "class",
            "CreativityModuleIntegration",
            236
          ],
          [
            "class",
            "VoiceModuleIntegration",
            437
          ],
          [
            "class",
            "MetaModuleIntegration",
            675
          ]
        ],
        "systems/symbolic_delta_compression.py": [
          [
            "class",
            "CompressionState",
            79
          ],
          [
            "class",
            "CompressionRecord",
            90
          ],
          [
            "class",
            "LoopDetectionResult",
            102
          ],
          [
            "class",
            "SymbolicDeltaCompressionManager",
            112
          ],
          [
            "function",
            "create_compression_manager",
            688
          ],
          [
            "function",
            "compress_fold",
            164
          ],
          [
            "function",
            "get_compression_analytics",
            581
          ],
          [
            "function",
            "emergency_decompress",
            640
          ]
        ],
        "systems/exponential_learning.py": [
          [
            "function",
            "lukhas_tier_required",
            29
          ],
          [
            "class",
            "ExponentialLearningSystem",
            36
          ],
          [
            "function",
            "decorator",
            30
          ],
          [
            "function",
            "incorporate_experience",
            69
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "systems/distributed_memory.py": [
          [
            "class",
            "MemoryType",
            25
          ],
          [
            "class",
            "DistributedMemory",
            35
          ],
          [
            "class",
            "DistributedMemorySystem",
            64
          ],
          [
            "function",
            "to_dict",
            48
          ]
        ],
        "systems/dream_trace_linker.py": [
          [
            "class",
            "GlyphResonanceLevel",
            74
          ],
          [
            "class",
            "DreamTraceType",
            85
          ],
          [
            "class",
            "GlyphSignature",
            97
          ],
          [
            "class",
            "IdentitySignature",
            109
          ],
          [
            "class",
            "EmotionalEcho",
            120
          ],
          [
            "class",
            "DreamTraceLink",
            132
          ],
          [
            "class",
            "DreamTraceLinker",
            153
          ],
          [
            "function",
            "create_dream_trace_linker",
            1134
          ],
          [
            "function",
            "link_dream_to_memory",
            212
          ],
          [
            "function",
            "get_session_analytics",
            1119
          ]
        ],
        "systems/symbolic_replay_engine.py": [
          [
            "class",
            "ReplayEvent",
            24
          ],
          [
            "class",
            "SymbolicReplayEngine",
            33
          ],
          [
            "function",
            "record_event",
            40
          ],
          [
            "function",
            "save",
            46
          ],
          [
            "function",
            "load",
            57
          ],
          [
            "function",
            "replay",
            72
          ]
        ],
        "systems/dream_integrator.py": [
          [
            "class",
            "DreamState",
            34
          ],
          [
            "class",
            "DreamType",
            42
          ],
          [
            "class",
            "DreamFragment",
            51
          ],
          [
            "class",
            "DreamSession",
            63
          ],
          [
            "class",
            "DreamMemoryLinker",
            76
          ],
          [
            "class",
            "DreamIntegrator",
            123
          ],
          [
            "function",
            "get_dream_integrator",
            477
          ],
          [
            "function",
            "initiate_dream",
            482
          ],
          [
            "function",
            "add_fragment",
            494
          ],
          [
            "function",
            "integrate_dream",
            498
          ],
          [
            "function",
            "get_dream_status",
            502
          ],
          [
            "function",
            "create_memory_link",
            84
          ],
          [
            "function",
            "get_linked_memories",
            101
          ],
          [
            "function",
            "find_related_dreams",
            113
          ],
          [
            "function",
            "initiate_dream_formation",
            153
          ],
          [
            "function",
            "add_dream_fragment",
            197
          ],
          [
            "function",
            "process_dream_integration",
            234
          ],
          [
            "function",
            "get_dream_insights",
            282
          ],
          [
            "function",
            "find_dreams_by_memory",
            294
          ],
          [
            "function",
            "get_system_status",
            306
          ]
        ],
        "systems/lazy_loading_embeddings.py": [
          [
            "class",
            "EmbeddingCacheEntry",
            62
          ],
          [
            "class",
            "LRUEmbeddingCache",
            75
          ],
          [
            "class",
            "EmbeddingStorage",
            236
          ],
          [
            "class",
            "LazyEmbeddingLoader",
            420
          ],
          [
            "class",
            "LazyMemoryItem",
            585
          ],
          [
            "function",
            "create_lazy_embedding_system",
            657
          ],
          [
            "function",
            "get",
            119
          ],
          [
            "function",
            "put",
            136
          ],
          [
            "function",
            "put_batch",
            157
          ],
          [
            "function",
            "clear",
            216
          ],
          [
            "function",
            "get_stats",
            222
          ],
          [
            "function",
            "store_embedding",
            274
          ],
          [
            "function",
            "load_embedding",
            301
          ],
          [
            "function",
            "load_embeddings_batch",
            334
          ],
          [
            "function",
            "exists",
            369
          ],
          [
            "function",
            "delete_embedding",
            378
          ],
          [
            "function",
            "get_storage_stats",
            400
          ],
          [
            "function",
            "exists",
            525
          ],
          [
            "function",
            "get_performance_stats",
            542
          ],
          [
            "function",
            "optimize_cache",
            560
          ],
          [
            "function",
            "get_content",
            604
          ],
          [
            "function",
            "get_tags",
            608
          ],
          [
            "function",
            "get_metadata",
            612
          ],
          [
            "function",
            "memory_usage",
            639
          ],
          [
            "function",
            "memory_usage_kb",
            651
          ]
        ],
        "systems/memory_consolidation.py": [
          [
            "class",
            "MemoryConsolidationEngine",
            1
          ],
          [
            "function",
            "compute_decay_rate",
            22
          ]
        ],
        "systems/causal_identity_tracker.py": [
          [
            "class",
            "IdentityLinkType",
            46
          ],
          [
            "class",
            "CausalOriginData",
            59
          ],
          [
            "class",
            "IdentityAnchor",
            75
          ],
          [
            "class",
            "EventChainValidation",
            89
          ],
          [
            "class",
            "CausalIdentityTracker",
            100
          ],
          [
            "function",
            "create_causal_origin",
            131
          ],
          [
            "function",
            "create_identity_anchor",
            223
          ],
          [
            "function",
            "validate_event_chain",
            284
          ],
          [
            "function",
            "detect_trauma_markers",
            384
          ],
          [
            "function",
            "create_recovery_link",
            438
          ],
          [
            "function",
            "get_identity_stability_report",
            503
          ]
        ],
        "systems/meta_learning_patterns.py": [
          [
            "class",
            "PatternType",
            66
          ],
          [
            "class",
            "LearningPhase",
            78
          ],
          [
            "class",
            "LearningEvent",
            88
          ],
          [
            "class",
            "MetaLearningPattern",
            152
          ],
          [
            "class",
            "LearningTrajectoryAnalyzer",
            230
          ],
          [
            "class",
            "PatternExtractor",
            483
          ],
          [
            "class",
            "MetaLearningPatternSystem",
            1072
          ],
          [
            "function",
            "to_feature_vector",
            106
          ],
          [
            "function",
            "to_dict",
            180
          ],
          [
            "function",
            "from_dict",
            203
          ],
          [
            "function",
            "analyze_trajectory",
            243
          ],
          [
            "function",
            "get_pattern_statistics",
            1686
          ]
        ],
        "systems/memory_fold_system.py": [
          [
            "class",
            "MemoryItem",
            91
          ],
          [
            "class",
            "TagInfo",
            104
          ],
          [
            "class",
            "MemoryFoldSystem",
            114
          ],
          [
            "function",
            "create_memory_fold_system",
            613
          ],
          [
            "function",
            "get_statistics",
            594
          ],
          [
            "function",
            "verify_lkf_pack",
            76
          ],
          [
            "function",
            "json_serial",
            181
          ]
        ],
        "systems/collapse_buffer.py": [
          [
            "class",
            "CollapseBuffer",
            18
          ],
          [
            "function",
            "buffer_event",
            26
          ]
        ],
        "systems/memory_consolidator.py": [
          [
            "class",
            "MemorySystemConsolidator",
            24
          ],
          [
            "function",
            "main",
            155
          ],
          [
            "function",
            "consolidate",
            71
          ]
        ],
        "systems/bio_symbolic_memory.py": [
          [
            "class",
            "WorkingMemoryBuffer",
            26
          ],
          [
            "class",
            "EpisodicMemoryStore",
            30
          ],
          [
            "class",
            "SemanticKnowledgeGraph",
            33
          ],
          [
            "class",
            "ProceduralSkillNetwork",
            36
          ],
          [
            "class",
            "MemoryConsolidationEngine",
            39
          ],
          [
            "function",
            "lukhas_tier_required",
            49
          ],
          [
            "class",
            "BioSymbolicMemory",
            56
          ],
          [
            "function",
            "decorator",
            50
          ]
        ],
        "systems/memory_viz.py": [
          [
            "function",
            "format_flamegraph",
            94
          ],
          [
            "function",
            "segments",
            150
          ],
          [
            "function",
            "memory",
            158
          ],
          [
            "function",
            "compare",
            166
          ],
          [
            "class",
            "Bytes",
            201
          ],
          [
            "function",
            "calc_active",
            212
          ],
          [
            "function",
            "segsum",
            239
          ],
          [
            "function",
            "trace",
            321
          ],
          [
            "function",
            "trace_plot",
            446
          ],
          [
            "function",
            "profile_plot",
            603
          ],
          [
            "function",
            "segment_plot",
            617
          ],
          [
            "function",
            "frames_fragment",
            124
          ],
          [
            "function",
            "format",
            324
          ],
          [
            "function",
            "to_device",
            505
          ],
          [
            "function",
            "allocate",
            511
          ],
          [
            "function",
            "free",
            537
          ],
          [
            "function",
            "find_segment",
            340
          ]
        ],
        "systems/collapse_trace.py": [
          [
            "class",
            "CollapseTrace",
            14
          ],
          [
            "function",
            "get_global_tracer",
            74
          ],
          [
            "function",
            "log_collapse",
            25
          ],
          [
            "function",
            "get_collapse_history",
            53
          ]
        ],
        "systems/memoria.py": [
          [
            "function",
            "log_memory",
            80
          ],
          [
            "function",
            "get_full_memory_log",
            120
          ]
        ],
        "systems/neurosymbolic_integration.py": [
          [
            "class",
            "SymbolicRelationType",
            74
          ],
          [
            "class",
            "LogicalOperator",
            90
          ],
          [
            "class",
            "SymbolicEntity",
            102
          ],
          [
            "class",
            "SymbolicRelation",
            141
          ],
          [
            "class",
            "LogicalRule",
            187
          ],
          [
            "class",
            "NeuralSymbolicExtractor",
            235
          ],
          [
            "class",
            "SymbolicReasoner",
            719
          ],
          [
            "class",
            "NeurosymbolicIntegrationLayer",
            1183
          ],
          [
            "function",
            "to_dict",
            112
          ],
          [
            "function",
            "from_dict",
            124
          ],
          [
            "function",
            "to_triple",
            152
          ],
          [
            "function",
            "to_dict",
            156
          ],
          [
            "function",
            "from_dict",
            169
          ],
          [
            "function",
            "applies_to",
            198
          ],
          [
            "function",
            "to_dict",
            209
          ],
          [
            "function",
            "from_dict",
            222
          ],
          [
            "function",
            "get_knowledge_statistics",
            1507
          ]
        ],
        "systems/memory_research.py": [
          [
            "class",
            "MemoryObjectStreamStatistics",
            57
          ],
          [
            "class",
            "MemoryObjectItemReceiver",
            70
          ],
          [
            "class",
            "MemoryObjectStreamState",
            82
          ],
          [
            "class",
            "MemoryObjectReceiveStream",
            106
          ],
          [
            "class",
            "MemoryObjectSendStream",
            224
          ],
          [
            "function",
            "statistics",
            94
          ],
          [
            "function",
            "receive_nowait",
            113
          ],
          [
            "function",
            "clone",
            161
          ],
          [
            "function",
            "close",
            176
          ],
          [
            "function",
            "statistics",
            195
          ],
          [
            "function",
            "send_nowait",
            231
          ],
          [
            "function",
            "clone",
            290
          ],
          [
            "function",
            "close",
            305
          ],
          [
            "function",
            "statistics",
            325
          ]
        ],
        "systems/colony_swarm_integration.py": [
          [
            "class",
            "ColonyRole",
            32
          ],
          [
            "class",
            "ColonyProfile",
            41
          ],
          [
            "class",
            "ColonyMemoryValidator",
            52
          ],
          [
            "class",
            "SwarmConsensusManager",
            228
          ],
          [
            "function",
            "register_colony",
            253
          ],
          [
            "function",
            "get_swarm_status",
            526
          ]
        ],
        "systems/reflection_engine.py": [
          [
            "class",
            "ReflectionType",
            37
          ],
          [
            "class",
            "ReflectionDepth",
            46
          ],
          [
            "class",
            "ReflectionInsight",
            54
          ],
          [
            "class",
            "ReflectionSession",
            70
          ],
          [
            "class",
            "PatternDetector",
            84
          ],
          [
            "class",
            "MetaCognitiveAnalyzer",
            192
          ],
          [
            "class",
            "MemoryReflector",
            265
          ],
          [
            "function",
            "get_memory_reflector",
            771
          ],
          [
            "function",
            "initiate_reflection",
            776
          ],
          [
            "function",
            "process_reflection",
            788
          ],
          [
            "function",
            "get_self_assessment",
            792
          ],
          [
            "function",
            "get_reflector_status",
            796
          ],
          [
            "function",
            "detect_patterns",
            122
          ],
          [
            "function",
            "analyze_thinking_patterns",
            199
          ],
          [
            "function",
            "initiate_reflection_session",
            299
          ],
          [
            "function",
            "process_reflection_analysis",
            347
          ],
          [
            "function",
            "get_insights_by_type",
            408
          ],
          [
            "function",
            "find_contradictory_insights",
            422
          ],
          [
            "function",
            "generate_self_assessment",
            434
          ],
          [
            "function",
            "recommend_memory_optimization",
            464
          ],
          [
            "function",
            "get_system_status",
            511
          ]
        ],
        "systems/memoria_codex.py": [
          [
            "function",
            "log_memory",
            54
          ],
          [
            "function",
            "get_full_memory_log",
            94
          ]
        ],
        "systems/memory_utils.py": [
          [
            "class",
            "MemoryUtils",
            48
          ],
          [
            "function",
            "generate_memory_id",
            52
          ],
          [
            "function",
            "encrypt_memory_data",
            57
          ],
          [
            "function",
            "decrypt_memory_data",
            65
          ],
          [
            "function",
            "validate_memory_access",
            72
          ],
          [
            "function",
            "format_memory_timestamp",
            81
          ],
          [
            "function",
            "calculate_memory_size",
            86
          ]
        ],
        "systems/memory_drift_tracker.py": [
          [
            "class",
            "MemoryDriftTracker",
            6
          ],
          [
            "function",
            "track_drift",
            14
          ]
        ],
        "systems/integrity_collapser.py": [
          [
            "function",
            "collapse_score",
            11
          ],
          [
            "function",
            "recover_overflow",
            21
          ],
          [
            "function",
            "snapshot_entropy",
            31
          ]
        ],
        "systems/voice_memory_bridge.py": [
          [
            "class",
            "VoiceMemoryBridge",
            6
          ],
          [
            "function",
            "process_voice_memory",
            13
          ]
        ],
        "systems/memory_learning/memory_manager.py": [
          [
            "class",
            "MemoryAccessError",
            66
          ],
          [
            "class",
            "MemoryManager",
            70
          ],
          [
            "function",
            "process_dream_cycle",
            142
          ],
          [
            "function",
            "store",
            214
          ],
          [
            "function",
            "retrieve",
            319
          ],
          [
            "function",
            "forget",
            386
          ],
          [
            "function",
            "batch_forget",
            461
          ],
          [
            "function",
            "extract_user_insights",
            479
          ],
          [
            "function",
            "get_interaction_history",
            624
          ]
        ],
        "systems/memoria/dreams.py": [
          [
            "function",
            "compute_survival_score",
            208
          ],
          [
            "function",
            "generate_dream_narrative",
            220
          ],
          [
            "function",
            "extract_visual_prompts_from_dream",
            306
          ],
          [
            "function",
            "save_dream_to_log",
            346
          ],
          [
            "class",
            "_MockChoiceContentDreamsDP",
            56
          ],
          [
            "class",
            "_MockMessageDreamsDP",
            60
          ],
          [
            "class",
            "_MockResponseDreamsDP",
            66
          ],
          [
            "class",
            "OpenAI",
            72
          ],
          [
            "class",
            "APIError",
            97
          ],
          [
            "function",
            "load_all_entries",
            142
          ],
          [
            "function",
            "load_traits",
            154
          ]
        ],
        "systems/memoria/replayer.py": [
          [
            "function",
            "load_recent_dream_logs",
            68
          ],
          [
            "function",
            "replay_dreams_with_current_state",
            85
          ],
          [
            "function",
            "load_traits",
            54
          ],
          [
            "function",
            "speak",
            55
          ],
          [
            "function",
            "log_symbolic_ai_memory_event",
            56
          ],
          [
            "function",
            "display_visual_traits",
            57
          ]
        ],
        "systems/memoria/reflector.py": [
          [
            "function",
            "load_dream_memories_from_log",
            51
          ],
          [
            "function",
            "reflect_on_dream_memories",
            70
          ],
          [
            "function",
            "run_dream_reflection_cycle",
            92
          ]
        ],
        "systems/memoria/dream_cron.py": [
          [
            "function",
            "run_lukhas_symbolic_dream_script",
            68
          ],
          [
            "function",
            "main_dream_scheduler_loop",
            97
          ]
        ],
        "systems/memoria/gpt_reflection.py": [
          [
            "function",
            "generate_gpt_reflection",
            90
          ],
          [
            "class",
            "_MockChoiceContent",
            46
          ],
          [
            "class",
            "_MockMessage",
            48
          ],
          [
            "class",
            "_MockResponse",
            50
          ],
          [
            "class",
            "_MockChatCompletions",
            52
          ],
          [
            "class",
            "OpenAI",
            58
          ],
          [
            "class",
            "APIError",
            66
          ],
          [
            "function",
            "create",
            53
          ]
        ],
        "consolidation/consolidation_orchestrator.py": [
          [
            "class",
            "SleepStage",
            79
          ],
          [
            "class",
            "ConsolidationMode",
            88
          ],
          [
            "class",
            "ConsolidationSession",
            98
          ],
          [
            "class",
            "ConsolidationOrchestrator",
            138
          ],
          [
            "class",
            "HippocampalMemoryInterface",
            759
          ],
          [
            "class",
            "NeocorticalMemoryInterface",
            891
          ],
          [
            "function",
            "calculate_efficiency",
            119
          ],
          [
            "function",
            "register_stage_callback",
            701
          ],
          [
            "function",
            "register_consolidation_callback",
            705
          ],
          [
            "function",
            "get_session_metrics",
            709
          ],
          [
            "function",
            "get_metrics",
            730
          ]
        ],
        "consolidation/sleep_cycle_manager.py": [
          [
            "class",
            "CircadianPhase",
            62
          ],
          [
            "class",
            "SleepPressure",
            70
          ],
          [
            "class",
            "SleepCycle",
            79
          ],
          [
            "class",
            "SleepArchitecture",
            113
          ],
          [
            "class",
            "SleepCycleManager",
            136
          ],
          [
            "function",
            "calculate_duration",
            98
          ],
          [
            "function",
            "get_stage_proportion",
            104
          ],
          [
            "function",
            "get_stage_duration",
            286
          ],
          [
            "function",
            "get_next_stage",
            330
          ],
          [
            "function",
            "register_stage_callback",
            518
          ],
          [
            "function",
            "register_cycle_callback",
            522
          ],
          [
            "function",
            "get_metrics",
            526
          ]
        ],
        "consolidation/ripple_generator.py": [
          [
            "class",
            "RippleType",
            73
          ],
          [
            "class",
            "ReplayDirection",
            82
          ],
          [
            "class",
            "Ripple",
            91
          ],
          [
            "class",
            "RippleSequence",
            125
          ],
          [
            "class",
            "RippleGenerator",
            151
          ],
          [
            "function",
            "calculate_power",
            118
          ],
          [
            "function",
            "add_ripple",
            138
          ],
          [
            "function",
            "set_memory_pool",
            360
          ],
          [
            "function",
            "set_priority_memories",
            365
          ],
          [
            "function",
            "update_sleep_stage",
            369
          ],
          [
            "function",
            "register_ripple_callback",
            531
          ],
          [
            "function",
            "register_sequence_callback",
            535
          ],
          [
            "function",
            "get_recent_ripples",
            539
          ],
          [
            "function",
            "get_metrics",
            543
          ],
          [
            "class",
            "EpisodicMemory",
            67
          ]
        ],
        "repair/advanced_trauma_repair.py": [
          [
            "class",
            "TraumaType",
            89
          ],
          [
            "class",
            "RepairStrategy",
            100
          ],
          [
            "class",
            "HealingPhase",
            110
          ],
          [
            "class",
            "TraumaSignature",
            121
          ],
          [
            "class",
            "RepairScaffold",
            138
          ],
          [
            "class",
            "ImmuneResponse",
            154
          ],
          [
            "class",
            "HelicalRepairMechanism",
            169
          ],
          [
            "class",
            "TraumaRepairSystem",
            246
          ],
          [
            "function",
            "calculate_priority",
            130
          ],
          [
            "function",
            "add_checkpoint",
            147
          ],
          [
            "function",
            "matches_threat",
            163
          ],
          [
            "function",
            "get_healing_report",
            553
          ],
          [
            "class",
            "IntegrityStatus",
            73
          ],
          [
            "class",
            "TagScope",
            79
          ]
        ],
        "repair/helix_repair_module.py": [
          [
            "class",
            "HelixRepairModule",
            10
          ]
        ],
        "neocortical/concept_hierarchy.py": [
          [
            "class",
            "ConceptNode",
            29
          ],
          [
            "class",
            "ConceptHierarchy",
            115
          ],
          [
            "function",
            "add_child",
            52
          ],
          [
            "function",
            "remove_child",
            58
          ],
          [
            "function",
            "get_ancestors",
            64
          ],
          [
            "function",
            "get_descendants",
            73
          ],
          [
            "function",
            "get_siblings",
            85
          ],
          [
            "function",
            "calculate_similarity",
            91
          ],
          [
            "function",
            "add_concept",
            155
          ],
          [
            "function",
            "find_concept",
            225
          ],
          [
            "function",
            "get_path",
            231
          ],
          [
            "function",
            "activate_concept",
            246
          ],
          [
            "function",
            "find_common_ancestor",
            291
          ],
          [
            "function",
            "get_semantic_distance",
            315
          ],
          [
            "function",
            "extract_ontology",
            334
          ],
          [
            "function",
            "prune_unused",
            378
          ],
          [
            "function",
            "decay_activations",
            549
          ],
          [
            "function",
            "get_metrics",
            557
          ]
        ],
        "neocortical/neocortical_network.py": [
          [
            "class",
            "CorticalLayer",
            75
          ],
          [
            "class",
            "LearningRate",
            84
          ],
          [
            "class",
            "SemanticMemory",
            93
          ],
          [
            "class",
            "CorticalColumn",
            131
          ],
          [
            "class",
            "NeocorticalNetwork",
            152
          ],
          [
            "function",
            "calculate_activation_energy",
            119
          ],
          [
            "function",
            "initialize_layers",
            146
          ],
          [
            "function",
            "get_concept_hierarchy",
            363
          ],
          [
            "function",
            "get_metrics",
            704
          ]
        ],
        "neocortical/semantic_extractor.py": [
          [
            "class",
            "SemanticExtractor",
            26
          ],
          [
            "function",
            "extract_semantics",
            63
          ],
          [
            "function",
            "extract_concept",
            104
          ],
          [
            "function",
            "find_semantic_similarity",
            120
          ],
          [
            "function",
            "get_metrics",
            519
          ]
        ]
      }
    },
    {
      "system": "orchestration",
      "entity_count": 2154,
      "class_count": 867,
      "function_count": 1287,
      "files": 295,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/orchestration_activation.py",
      "entities_by_file": {
        "signal_router.py": [
          [
            "function",
            "route_signal",
            22
          ]
        ],
        "integration_hub.py": [
          [
            "class",
            "SystemIntegrationHub",
            23
          ],
          [
            "function",
            "get_integration_hub",
            111
          ]
        ],
        "system_orchestrator.py": [
          [
            "class",
            "ModulePriority",
            23
          ],
          [
            "class",
            "ModuleInfo",
            32
          ],
          [
            "class",
            "SystemOrchestratorConfig",
            42
          ],
          [
            "class",
            "SystemOrchestrator",
            51
          ],
          [
            "function",
            "register_module",
            73
          ],
          [
            "function",
            "register_route",
            97
          ],
          [
            "function",
            "get_system_status",
            427
          ],
          [
            "function",
            "visit",
            148
          ],
          [
            "function",
            "has_cycle",
            495
          ]
        ],
        "migrate_orchestrators.py": [
          [
            "class",
            "OrchestratorMigrator",
            18
          ],
          [
            "function",
            "main",
            324
          ],
          [
            "function",
            "determine_base_class",
            45
          ],
          [
            "function",
            "extract_class_info",
            66
          ],
          [
            "function",
            "needs_migration",
            81
          ],
          [
            "function",
            "generate_migration_header",
            94
          ],
          [
            "function",
            "migrate_orchestrator",
            126
          ],
          [
            "function",
            "create_migrated_version",
            171
          ],
          [
            "function",
            "generate_import_updates",
            202
          ],
          [
            "function",
            "generate_required_methods",
            220
          ],
          [
            "function",
            "migrate_all",
            293
          ]
        ],
        "workflow_engine.py": [
          [
            "class",
            "WorkflowEngine",
            25
          ],
          [
            "function",
            "create_orchestration_component",
            167
          ],
          [
            "function",
            "get_status",
            150
          ]
        ],
        "bio_symbolic_orchestrator.py": [
          [
            "class",
            "BioSymbolicMode",
            86
          ],
          [
            "class",
            "CoherenceLevel",
            95
          ],
          [
            "class",
            "BioSymbolicTask",
            104
          ],
          [
            "class",
            "CoherenceMetrics",
            117
          ],
          [
            "class",
            "BioSymbolicOrchestrator",
            130
          ],
          [
            "function",
            "register_service",
            217
          ],
          [
            "function",
            "get_service",
            222
          ],
          [
            "function",
            "get_bio_symbolic_status",
            807
          ]
        ],
        "resonance_orchestrator.py": [
          [
            "class",
            "StressLevel",
            25
          ],
          [
            "class",
            "HelpSignalType",
            34
          ],
          [
            "class",
            "ModuleHealth",
            47
          ],
          [
            "class",
            "HelpSignal",
            62
          ],
          [
            "class",
            "ResonancePattern",
            74
          ],
          [
            "class",
            "AdaptationStrategy",
            85
          ],
          [
            "class",
            "ResonanceOrchestratorConfig",
            96
          ],
          [
            "class",
            "ResonanceOrchestrator",
            118
          ],
          [
            "function",
            "get_trauma_report",
            677
          ]
        ],
        "colony_orchestrator.py": [
          [
            "class",
            "ColonyType",
            102
          ],
          [
            "class",
            "ColonyState",
            113
          ],
          [
            "class",
            "ColonyPriority",
            123
          ],
          [
            "class",
            "ColonyConfig",
            132
          ],
          [
            "class",
            "ColonyTask",
            146
          ],
          [
            "class",
            "ColonyMetrics",
            160
          ],
          [
            "class",
            "ColonyOrchestrator",
            174
          ],
          [
            "function",
            "get_colony_status",
            929
          ],
          [
            "class",
            "BaseColony",
            73
          ]
        ],
        "core.py": [
          [
            "class",
            "OrchestrationCore",
            89
          ],
          [
            "function",
            "get_system_status",
            340
          ]
        ],
        "main_node.py": [
          [
            "class",
            "AdaptiveAGISystem",
            39
          ],
          [
            "function",
            "init_components",
            97
          ],
          [
            "function",
            "register_event_handlers",
            113
          ]
        ],
        "service_registry.py": [
          [
            "class",
            "ServiceRegistry",
            26
          ],
          [
            "function",
            "register_service",
            152
          ],
          [
            "function",
            "register_factory",
            157
          ],
          [
            "function",
            "get_service",
            162
          ],
          [
            "function",
            "unregister_service",
            167
          ],
          [
            "function",
            "list_services",
            172
          ],
          [
            "class",
            "ServiceNames",
            178
          ],
          [
            "function",
            "register_service",
            41
          ],
          [
            "function",
            "register_factory",
            52
          ],
          [
            "function",
            "get_service",
            63
          ],
          [
            "function",
            "unregister_service",
            95
          ],
          [
            "function",
            "list_services",
            120
          ],
          [
            "function",
            "clear",
            140
          ],
          [
            "class",
            "MockLearningService",
            194
          ],
          [
            "function",
            "learn_from_data",
            195
          ]
        ],
        "orchestration_hub.py": [
          [
            "class",
            "OrchestrationHub",
            38
          ],
          [
            "function",
            "get_orchestration_hub",
            187
          ],
          [
            "function",
            "register_hub",
            53
          ],
          [
            "function",
            "register_service",
            116
          ],
          [
            "function",
            "get_service",
            121
          ],
          [
            "function",
            "list_services",
            125
          ],
          [
            "function",
            "register_hub",
            129
          ],
          [
            "function",
            "register_event_handler",
            162
          ]
        ],
        "module_orchestrator.py": [
          [
            "class",
            "ModuleOrchestratorConfig",
            22
          ],
          [
            "class",
            "ModuleOrchestrator",
            30
          ],
          [
            "function",
            "get_module_info",
            310
          ]
        ],
        "integration_engine.py": [
          [
            "function",
            "lukhas_tier_required",
            27
          ],
          [
            "class",
            "LukhasIntegrationEngine",
            35
          ],
          [
            "function",
            "create_integration_component",
            257
          ],
          [
            "function",
            "decorator",
            29
          ],
          [
            "function",
            "get_status",
            230
          ]
        ],
        "master_orchestrator.py": [
          [
            "class",
            "LukhasCyclePhase",
            82
          ],
          [
            "class",
            "OrchestrationPriority",
            92
          ],
          [
            "class",
            "OrchestrationType",
            100
          ],
          [
            "class",
            "OrchestrationRequest",
            111
          ],
          [
            "class",
            "OrchestrationMetrics",
            124
          ],
          [
            "class",
            "MasterOrchestrator",
            136
          ],
          [
            "function",
            "get_master_status",
            809
          ]
        ],
        "api.py": [
          [
            "class",
            "Query",
            9
          ]
        ],
        "learning_initializer.py": [
          [
            "function",
            "initialize_learning_service",
            106
          ],
          [
            "class",
            "FallbackLearningService",
            50
          ],
          [
            "function",
            "learn_from_data",
            53
          ],
          [
            "function",
            "adapt_behavior",
            63
          ],
          [
            "function",
            "synthesize_knowledge",
            72
          ],
          [
            "function",
            "transfer_learning",
            81
          ],
          [
            "function",
            "get_learning_metrics",
            90
          ]
        ],
        "endocrine_orchestrator.py": [
          [
            "class",
            "EndocrineOrchestratorConfig",
            27
          ],
          [
            "class",
            "EndocrineOrchestrator",
            36
          ],
          [
            "function",
            "get_endocrine_status",
            443
          ]
        ],
        "agent_orchestrator.py": [
          [
            "class",
            "AgentOrchestrator",
            39
          ],
          [
            "function",
            "get_status",
            589
          ]
        ],
        "orchestrator.py": [
          [
            "class",
            "OrchestrationMode",
            35
          ],
          [
            "class",
            "ProcessingLevel",
            43
          ],
          [
            "class",
            "LukhasTier",
            51
          ],
          [
            "class",
            "ConsciousnessState",
            61
          ],
          [
            "class",
            "TierCapabilities",
            71
          ],
          [
            "class",
            "OrchestrationMetrics",
            150
          ],
          [
            "class",
            "LukhasOrchestrator",
            162
          ],
          [
            "function",
            "get_capabilities",
            132
          ],
          [
            "function",
            "has_feature",
            137
          ],
          [
            "function",
            "get_consciousness_state",
            143
          ],
          [
            "function",
            "validate_tier_access",
            353
          ],
          [
            "function",
            "check_rate_limits",
            357
          ],
          [
            "function",
            "get_tier_info",
            381
          ],
          [
            "function",
            "get_status",
            642
          ]
        ],
        "example_agents.py": [
          [
            "class",
            "AnalyzerAgent",
            30
          ],
          [
            "class",
            "LearningAgent",
            271
          ],
          [
            "class",
            "CoordinatorAgent",
            501
          ]
        ],
        "quorum_orchestrator.py": [
          [
            "class",
            "QuorumOrchestrator",
            4
          ],
          [
            "function",
            "decide",
            11
          ]
        ],
        "base.py": [
          [
            "class",
            "OrchestratorState",
            46
          ],
          [
            "class",
            "ComponentStatus",
            58
          ],
          [
            "class",
            "OrchestratorConfig",
            67
          ],
          [
            "class",
            "ComponentInfo",
            82
          ],
          [
            "class",
            "OrchestratorMetrics",
            92
          ],
          [
            "class",
            "BaseOrchestrator",
            102
          ],
          [
            "function",
            "register_component",
            278
          ],
          [
            "function",
            "unregister_component",
            288
          ],
          [
            "function",
            "get_status",
            402
          ]
        ],
        "swarm_orchestration_adapter.py": [
          [
            "class",
            "SwarmOperationType",
            80
          ],
          [
            "class",
            "SwarmPriority",
            91
          ],
          [
            "class",
            "SwarmTask",
            100
          ],
          [
            "class",
            "SwarmMetrics",
            113
          ],
          [
            "class",
            "SwarmOrchestrationAdapter",
            125
          ],
          [
            "function",
            "get_swarm_status",
            738
          ]
        ],
        "init/seed_chain_bootstrapper.py": [
          [
            "function",
            "bootstrap_seed_chain",
            21
          ]
        ],
        "golden_trio/trio_orchestrator.py": [
          [
            "class",
            "SystemType",
            28
          ],
          [
            "class",
            "MessagePriority",
            34
          ],
          [
            "class",
            "ProcessingMode",
            42
          ],
          [
            "class",
            "TrioMessage",
            49
          ],
          [
            "class",
            "TrioResponse",
            63
          ],
          [
            "class",
            "SharedContextManager",
            73
          ],
          [
            "class",
            "TrioOrchestrator",
            172
          ],
          [
            "function",
            "get_trio_orchestrator",
            641
          ],
          [
            "function",
            "register_system_handler",
            211
          ]
        ],
        "apis/drift_monitoring_api.py": [
          [
            "class",
            "DriftType",
            80
          ],
          [
            "class",
            "DriftSeverity",
            93
          ],
          [
            "class",
            "AlertChannel",
            102
          ],
          [
            "class",
            "MetricDataPoint",
            113
          ],
          [
            "class",
            "DriftAlert",
            122
          ],
          [
            "class",
            "MonitoringConfig",
            140
          ],
          [
            "class",
            "StatisticalAnalyzer",
            154
          ],
          [
            "class",
            "MetricCollector",
            243
          ],
          [
            "class",
            "DriftDetector",
            312
          ],
          [
            "class",
            "AlertManager",
            556
          ],
          [
            "class",
            "DriftMonitoringAPI",
            644
          ],
          [
            "function",
            "calculate_zscore",
            158
          ],
          [
            "function",
            "detect_trend",
            174
          ],
          [
            "function",
            "kolmogorov_smirnov_test",
            203
          ],
          [
            "function",
            "moving_average_deviation",
            228
          ],
          [
            "function",
            "get_recent_values",
            278
          ],
          [
            "function",
            "get_metric_history",
            289
          ],
          [
            "function",
            "get_monitoring_status",
            898
          ]
        ],
        "apis/code_process_integration_api.py": [
          [
            "class",
            "CodeLanguage",
            83
          ],
          [
            "class",
            "ExecutionEnvironment",
            95
          ],
          [
            "class",
            "CodeQuality",
            103
          ],
          [
            "class",
            "CodeGenerationRequest",
            113
          ],
          [
            "class",
            "CodeExecutionResult",
            130
          ],
          [
            "class",
            "CodeQualityReport",
            143
          ],
          [
            "class",
            "CodeGenerator",
            155
          ],
          [
            "class",
            "PythonCodeGenerator",
            169
          ],
          [
            "class",
            "CPISecurityScanner",
            518
          ],
          [
            "class",
            "CodeProcessIntegrationAPI",
            554
          ],
          [
            "function",
            "get_request_status",
            893
          ],
          [
            "function",
            "get_api_status",
            902
          ]
        ],
        "echo/echo_controller.py": [
          [
            "class",
            "EchoController",
            16
          ],
          [
            "function",
            "ping",
            33
          ]
        ],
        "config/orchestrator_flags.py": [
          [
            "class",
            "OrchestrationMode",
            15
          ],
          [
            "class",
            "OrchestratorFlags",
            25
          ],
          [
            "function",
            "get_orchestrator_flags",
            136
          ],
          [
            "function",
            "load_orchestrator_flags",
            145
          ],
          [
            "function",
            "update_orchestrator_flags",
            212
          ],
          [
            "function",
            "save_orchestrator_flags",
            218
          ],
          [
            "function",
            "reset_orchestrator_flags",
            228
          ],
          [
            "function",
            "is_shadow_mode_enabled",
            235
          ],
          [
            "function",
            "is_canary_mode_enabled",
            241
          ],
          [
            "function",
            "should_circuit_break",
            248
          ],
          [
            "function",
            "get_orchestrator_mode",
            60
          ],
          [
            "function",
            "get_canary_percentage",
            65
          ],
          [
            "function",
            "is_orchestrator_enabled",
            70
          ],
          [
            "function",
            "should_use_new_orchestrator",
            75
          ],
          [
            "function",
            "should_use_legacy_orchestrator",
            100
          ],
          [
            "function",
            "to_dict",
            105
          ],
          [
            "function",
            "from_dict",
            117
          ]
        ],
        "config/migration_router.py": [
          [
            "class",
            "OrchestrationResult",
            22
          ],
          [
            "class",
            "ShadowComparisonResult",
            32
          ],
          [
            "class",
            "CircuitBreaker",
            40
          ],
          [
            "class",
            "PerformanceMetrics",
            77
          ],
          [
            "class",
            "ShadowOrchestrator",
            119
          ],
          [
            "class",
            "OrchestratorRouter",
            325
          ],
          [
            "function",
            "get_orchestrator_router",
            667
          ],
          [
            "function",
            "can_execute",
            50
          ],
          [
            "function",
            "record_success",
            62
          ],
          [
            "function",
            "record_failure",
            68
          ],
          [
            "function",
            "record_execution",
            87
          ],
          [
            "function",
            "get_avg_latency",
            99
          ],
          [
            "function",
            "get_error_rate",
            105
          ],
          [
            "function",
            "get_p95_latency",
            111
          ],
          [
            "function",
            "get_comparison_summary",
            302
          ],
          [
            "function",
            "get_orchestrator_health",
            604
          ],
          [
            "function",
            "get_shadow_summary",
            643
          ],
          [
            "function",
            "get_all_orchestrator_status",
            650
          ],
          [
            "class",
            "OrchestrationMode",
            345
          ],
          [
            "class",
            "MinimalFlags",
            352
          ],
          [
            "function",
            "get_orchestrator_mode",
            353
          ],
          [
            "function",
            "is_orchestrator_enabled",
            355
          ],
          [
            "function",
            "should_use_new_orchestrator",
            357
          ],
          [
            "function",
            "should_use_legacy_orchestrator",
            359
          ]
        ],
        "config/production_config.py": [
          [
            "class",
            "Environment",
            16
          ],
          [
            "class",
            "LogLevel",
            23
          ],
          [
            "class",
            "DatabaseConfig",
            32
          ],
          [
            "class",
            "RedisConfig",
            46
          ],
          [
            "class",
            "MonitoringConfig",
            58
          ],
          [
            "class",
            "SecurityConfig",
            83
          ],
          [
            "class",
            "PerformanceConfig",
            104
          ],
          [
            "class",
            "OrchestrationConfig",
            126
          ],
          [
            "class",
            "ProductionOrchestratorConfig",
            150
          ],
          [
            "function",
            "load_from_env",
            177
          ],
          [
            "function",
            "load_from_file",
            240
          ],
          [
            "function",
            "from_dict",
            258
          ],
          [
            "function",
            "to_dict",
            295
          ],
          [
            "function",
            "save_to_file",
            388
          ],
          [
            "function",
            "validate",
            403
          ],
          [
            "function",
            "is_production",
            445
          ],
          [
            "function",
            "is_development",
            449
          ]
        ],
        "security/ethics_loop_guard.py": [
          [
            "class",
            "EthicsLoopGuard",
            13
          ],
          [
            "function",
            "detect_misalignment",
            29
          ]
        ],
        "security/LGOV_validator.py": [
          [
            "class",
            "SymbolicOversightValidator",
            15
          ],
          [
            "function",
            "validate_decision",
            29
          ]
        ],
        "security/dast_orchestrator.py": [
          [
            "class",
            "EnhancedDASTOrchestrator",
            24
          ],
          [
            "function",
            "get_system_state",
            144
          ]
        ],
        "security/dast/intelligence.py": [
          [
            "class",
            "TaskIntelligence",
            15
          ],
          [
            "class",
            "PriorityOptimizer",
            76
          ],
          [
            "class",
            "ContextTracker",
            161
          ],
          [
            "class",
            "SymbolicReasoner",
            263
          ],
          [
            "class",
            "WorkflowAnalyzer",
            361
          ],
          [
            "function",
            "analyze_task_complexity",
            24
          ],
          [
            "function",
            "optimize_priorities",
            85
          ],
          [
            "function",
            "track_context",
            170
          ],
          [
            "function",
            "apply_reasoning",
            302
          ],
          [
            "function",
            "analyze_workflow",
            370
          ]
        ],
        "security/dast/api.py": [
          [
            "class",
            "LucasDASTAPI",
            19
          ]
        ],
        "security/dast/engine.py": [
          [
            "class",
            "TaskPriority",
            20
          ],
          [
            "class",
            "TaskStatus",
            27
          ],
          [
            "class",
            "Task",
            35
          ],
          [
            "class",
            "LukhasDASTEngine",
            50
          ],
          [
            "function",
            "get_dast_engine",
            701
          ],
          [
            "function",
            "get_performance_stats",
            670
          ],
          [
            "function",
            "priority_key",
            544
          ]
        ],
        "security/dast/processors.py": [
          [
            "class",
            "TaskProcessor",
            17
          ],
          [
            "class",
            "TagProcessor",
            249
          ],
          [
            "class",
            "AttentionProcessor",
            412
          ],
          [
            "class",
            "SolutionProcessor",
            508
          ],
          [
            "function",
            "process_task",
            60
          ],
          [
            "function",
            "process_tags",
            268
          ],
          [
            "function",
            "process_attention_request",
            421
          ],
          [
            "function",
            "process_solution",
            517
          ]
        ],
        "security/dast/verify.py": [
          [
            "function",
            "test_module_imports",
            14
          ],
          [
            "function",
            "test_core_classes",
            42
          ],
          [
            "function",
            "test_basic_functionality",
            74
          ],
          [
            "function",
            "check_design_compliance",
            106
          ],
          [
            "function",
            "main",
            159
          ]
        ],
        "security/dast/tests.py": [
          [
            "class",
            "TestLucasDASTIntegration",
            24
          ],
          [
            "class",
            "TestPerformanceBenchmarks",
            315
          ],
          [
            "function",
            "sample_tasks",
            35
          ]
        ],
        "security/dast/adapters.py": [
          [
            "class",
            "AdapterConfig",
            17
          ],
          [
            "class",
            "DASTAdapter",
            27
          ],
          [
            "function",
            "register_adapter",
            37
          ]
        ],
        "integration/vendor_sync_orchestrator.py": [
          [
            "function",
            "detect_and_pair_apps",
            23
          ],
          [
            "function",
            "orchestrate_vendor_sync",
            53
          ],
          [
            "function",
            "batch_sync",
            83
          ]
        ],
        "integration/human_in_the_loop_orchestrator.py": [
          [
            "class",
            "DecisionPriority",
            81
          ],
          [
            "class",
            "ReviewerRole",
            89
          ],
          [
            "class",
            "DecisionStatus",
            99
          ],
          [
            "class",
            "EscrowStatus",
            111
          ],
          [
            "class",
            "ReviewerProfile",
            120
          ],
          [
            "class",
            "DecisionContext",
            138
          ],
          [
            "class",
            "EscrowDetails",
            156
          ],
          [
            "class",
            "ReviewAssignment",
            170
          ],
          [
            "class",
            "ReviewResponse",
            183
          ],
          [
            "class",
            "DecisionRecord",
            199
          ],
          [
            "class",
            "ReviewerNotification",
            215
          ],
          [
            "class",
            "EmailNotification",
            228
          ],
          [
            "class",
            "SlackNotification",
            245
          ],
          [
            "class",
            "HumanInTheLoopOrchestrator",
            262
          ],
          [
            "function",
            "get_decision_status",
            940
          ],
          [
            "function",
            "get_reviewer_workload",
            959
          ],
          [
            "function",
            "get_metrics",
            980
          ],
          [
            "class",
            "EthicalVerdict",
            72
          ]
        ],
        "agents/meta_cognitive_orchestrator.py": [
          [
            "class",
            "AGICapabilityLevel",
            105
          ],
          [
            "class",
            "AGIResponse",
            114
          ],
          [
            "class",
            "QuantumInspiredAttention",
            125
          ],
          [
            "class",
            "CausalReasoningModule",
            207
          ],
          [
            "class",
            "SymbolicEngine",
            384
          ],
          [
            "class",
            "MetaCognitiveOrchestrator",
            570
          ],
          [
            "class",
            "ComplianceEngine",
            848
          ],
          [
            "class",
            "EnhancedAGIBot",
            897
          ],
          [
            "function",
            "attend",
            151
          ],
          [
            "function",
            "reason",
            217
          ],
          [
            "function",
            "reason",
            412
          ],
          [
            "function",
            "register_component",
            589
          ],
          [
            "function",
            "orchestrate",
            594
          ],
          [
            "function",
            "check_compliance",
            861
          ],
          [
            "function",
            "get_agi_status",
            991
          ]
        ],
        "agents/registry.py": [
          [
            "class",
            "AgentRegistry",
            12
          ],
          [
            "function",
            "register",
            19
          ],
          [
            "function",
            "get_agent",
            27
          ],
          [
            "function",
            "find_agents_by_capability",
            31
          ],
          [
            "function",
            "list_agents",
            36
          ]
        ],
        "agents/multi_agent_collaboration.py": [
          [
            "class",
            "MultiAgentCollaboration",
            19
          ],
          [
            "function",
            "register_agent",
            32
          ],
          [
            "function",
            "create_task",
            51
          ],
          [
            "function",
            "send_message",
            82
          ],
          [
            "function",
            "update_task_progress",
            107
          ],
          [
            "function",
            "complete_task",
            135
          ]
        ],
        "agents/adaptive_orchestrator.py": [
          [
            "class",
            "VisionaryMode",
            74
          ],
          [
            "class",
            "ConsciousnessLevel",
            84
          ],
          [
            "class",
            "VisionaryMetrics",
            95
          ],
          [
            "class",
            "AdaptiveOrchestrator",
            126
          ],
          [
            "function",
            "overall_vision_score",
            105
          ],
          [
            "class",
            "VisionaryFormatter",
            196
          ],
          [
            "function",
            "format",
            208
          ],
          [
            "function",
            "deep_merge",
            290
          ]
        ],
        "agents/types.py": [
          [
            "class",
            "AgentCapability",
            11
          ],
          [
            "class",
            "AgentContext",
            22
          ],
          [
            "class",
            "AgentResponse",
            32
          ]
        ],
        "agents/orchestrator.py": [
          [
            "class",
            "EnhancementState",
            42
          ],
          [
            "class",
            "EnhancementMetrics",
            54
          ],
          [
            "class",
            "AGIEnhancementConfig",
            81
          ],
          [
            "class",
            "UnifiedAGIEnhancementOrchestrator",
            109
          ],
          [
            "function",
            "get_enhancement_report",
            647
          ]
        ],
        "agents/meta_cognitive_orchestrator_alt.py": [
          [
            "class",
            "AGICapabilityLevel",
            68
          ],
          [
            "class",
            "AGIResponse",
            79
          ],
          [
            "class",
            "QuantumInspiredAttention",
            92
          ],
          [
            "class",
            "CausalReasoningModule",
            188
          ],
          [
            "class",
            "SymbolicEngine",
            383
          ],
          [
            "class",
            "MetaCognitiveOrchestrator",
            610
          ],
          [
            "class",
            "ComplianceEngine",
            925
          ],
          [
            "class",
            "EnhancedAGIBot",
            989
          ],
          [
            "function",
            "attend",
            121
          ],
          [
            "function",
            "reason",
            198
          ],
          [
            "function",
            "reason",
            423
          ],
          [
            "function",
            "register_component",
            629
          ],
          [
            "function",
            "orchestrate",
            634
          ],
          [
            "function",
            "check_compliance",
            948
          ],
          [
            "function",
            "get_agi_status",
            1095
          ]
        ],
        "agents/base.py": [
          [
            "class",
            "OrchestrationAgent",
            12
          ],
          [
            "function",
            "get_agent_id",
            16
          ],
          [
            "function",
            "get_capabilities",
            21
          ],
          [
            "function",
            "process",
            26
          ],
          [
            "function",
            "validate_context",
            31
          ],
          [
            "function",
            "get_metadata",
            35
          ]
        ],
        "agents/builtin/codex.py": [
          [
            "class",
            "Codex",
            11
          ],
          [
            "function",
            "respond",
            35
          ],
          [
            "function",
            "parse_query",
            41
          ]
        ],
        "agents/builtin/jules.py": [
          [
            "class",
            "Jules01Agent",
            12
          ],
          [
            "function",
            "get_agent_id",
            15
          ],
          [
            "function",
            "get_capabilities",
            18
          ],
          [
            "function",
            "process",
            21
          ],
          [
            "function",
            "validate_context",
            24
          ]
        ],
        "specialized/enhancement_orchestrator.py": [
          [
            "class",
            "EnhancementState",
            42
          ],
          [
            "class",
            "EnhancementMetrics",
            54
          ],
          [
            "class",
            "AGIEnhancementConfig",
            81
          ],
          [
            "class",
            "UnifiedAGIEnhancementOrchestrator",
            109
          ],
          [
            "function",
            "get_enhancement_report",
            647
          ]
        ],
        "specialized/lambda_dependa_bot.py": [
          [
            "class",
            "\u039bSelfHealingAction",
            278
          ],
          [
            "class",
            "\u039bCodeFixSuggestion",
            291
          ],
          [
            "class",
            "\u039bSelfHealingReport",
            302
          ],
          [
            "class",
            "\u039bDependencyProfile",
            313
          ],
          [
            "class",
            "\u039bArchitecturalInsight",
            325
          ],
          [
            "class",
            "\u039bModularityReport",
            335
          ],
          [
            "class",
            "\u039bDependaBoT",
            344
          ],
          [
            "class",
            "CodeFixerBase",
            1519
          ],
          [
            "class",
            "OllamaCodeFixer",
            1528
          ],
          [
            "class",
            "TransformersCodeFixer",
            1600
          ],
          [
            "class",
            "OpenAICodeFixer",
            1655
          ],
          [
            "class",
            "BotProtocol",
            57
          ],
          [
            "class",
            "QuantumBotConfig",
            65
          ],
          [
            "class",
            "QuantumNetworkEngine",
            88
          ],
          [
            "class",
            "nx",
            169
          ],
          [
            "function",
            "add_node",
            96
          ],
          [
            "function",
            "add_edge",
            104
          ],
          [
            "function",
            "calculate_quantum_modularity",
            118
          ],
          [
            "function",
            "nodes",
            162
          ],
          [
            "function",
            "edges",
            163
          ],
          [
            "function",
            "in_degree",
            164
          ],
          [
            "function",
            "out_degree",
            165
          ],
          [
            "function",
            "degree",
            166
          ]
        ],
        "specialized/ui_orchestrator.py": [
          [
            "class",
            "AdaptiveUI",
            6
          ]
        ],
        "specialized/component_orchestrator.py": [
          [
            "class",
            "ComponentOrchestrator",
            14
          ],
          [
            "function",
            "create_orchestration_component",
            155
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "specialized/lambda_bot_orchestrator.py": [
          [
            "class",
            "BotProtocol",
            70
          ],
          [
            "class",
            "QuantumBotConfig",
            94
          ],
          [
            "class",
            "ReasoningContext",
            109
          ],
          [
            "class",
            "QuantumDecisionEngine",
            120
          ],
          [
            "class",
            "BotEvolutionEngine",
            196
          ],
          [
            "class",
            "EliteCodeManagementBot",
            239
          ],
          [
            "class",
            "EliteGenericBot",
            416
          ],
          [
            "class",
            "\u039bBotEliteOrchestrator",
            559
          ]
        ],
        "specialized/content_enterprise_orchestrator.py": [
          [
            "class",
            "ServiceStatus",
            106
          ],
          [
            "class",
            "ScalingAction",
            115
          ],
          [
            "class",
            "Priority",
            124
          ],
          [
            "class",
            "ServiceMetrics",
            134
          ],
          [
            "class",
            "ServiceHealth",
            148
          ],
          [
            "class",
            "ScalingDecision",
            159
          ],
          [
            "class",
            "OrchestrationTask",
            171
          ],
          [
            "class",
            "ServiceRegistry",
            186
          ],
          [
            "class",
            "LoadBalancer",
            277
          ],
          [
            "class",
            "AutoScaler",
            322
          ],
          [
            "class",
            "CircuitBreaker",
            410
          ],
          [
            "class",
            "TaskQueue",
            458
          ],
          [
            "class",
            "ContentEnterpriseOrchestrator",
            547
          ],
          [
            "function",
            "register_service",
            210
          ],
          [
            "function",
            "discover_service",
            244
          ],
          [
            "function",
            "deregister_service",
            260
          ],
          [
            "function",
            "get_endpoint",
            285
          ],
          [
            "function",
            "mark_endpoint_unhealthy",
            313
          ],
          [
            "function",
            "mark_endpoint_healthy",
            317
          ],
          [
            "function",
            "analyze_scaling_need",
            334
          ],
          [
            "function",
            "execute_scaling",
            390
          ],
          [
            "function",
            "call",
            422
          ],
          [
            "function",
            "enqueue_task",
            487
          ],
          [
            "function",
            "get_next_task",
            507
          ],
          [
            "function",
            "complete_task",
            523
          ],
          [
            "function",
            "setup_prometheus_metrics",
            703
          ],
          [
            "function",
            "get_orchestration_status",
            982
          ]
        ],
        "specialized/orchestrator_emotion_engine.py": [
          [
            "class",
            "LukhasOrchestratorEmotionEngine",
            33
          ],
          [
            "class",
            "LukhasOrchestratorEmotionEngine",
            42
          ]
        ],
        "specialized/deployment_orchestrator.py": [
          [
            "class",
            "LUKHASCommericalDeployment",
            14
          ],
          [
            "function",
            "get_deployment_status",
            154
          ]
        ],
        "specialized/inter_agent_simulation.py": [
          [
            "class",
            "AgentType",
            22
          ],
          [
            "class",
            "MessageType",
            29
          ],
          [
            "class",
            "AgentMessage",
            38
          ],
          [
            "class",
            "Agent",
            47
          ],
          [
            "class",
            "InterAgentSimulation",
            102
          ],
          [
            "function",
            "get_simulation",
            420
          ],
          [
            "function",
            "get_status",
            92
          ],
          [
            "function",
            "add_agent",
            113
          ],
          [
            "function",
            "get_simulation_status",
            394
          ],
          [
            "function",
            "export_message_log",
            403
          ]
        ],
        "specialized/loop_recovery_simulator.py": [
          [
            "class",
            "LoopRecoverySimulation",
            19
          ]
        ],
        "specialized/integrated_system_orchestrator.py": [
          [
            "class",
            "AdaptiveAGISystem",
            41
          ],
          [
            "function",
            "init_components",
            67
          ],
          [
            "function",
            "register_event_handlers",
            83
          ]
        ],
        "immune/system_watchdog.py": [
          [
            "class",
            "SystemWatchdog",
            8
          ],
          [
            "function",
            "scan",
            15
          ]
        ],
        "migrated/unified_agi_enhancement_orchestrator.py": [
          [
            "class",
            "EnhancementState",
            66
          ],
          [
            "class",
            "EnhancementMetrics",
            77
          ],
          [
            "class",
            "AGIEnhancementConfig",
            103
          ],
          [
            "class",
            "UnifiedAGIEnhancementOrchestrator",
            130
          ],
          [
            "function",
            "get_enhancement_report",
            741
          ]
        ],
        "migrated/memory_orchestrator.py": [
          [
            "class",
            "MemoryOrchestratorConfig",
            47
          ],
          [
            "class",
            "MemoryComponent",
            62
          ],
          [
            "class",
            "MemoryOrchestrator",
            93
          ],
          [
            "function",
            "create_memory_component",
            359
          ],
          [
            "function",
            "get_cache_stats",
            286
          ],
          [
            "function",
            "clear_cache",
            298
          ],
          [
            "function",
            "get_status",
            338
          ]
        ],
        "migrated/ethics_orchestrator.py": [
          [
            "class",
            "EthicsMode",
            71
          ],
          [
            "class",
            "UnifiedEthicsOrchestratorConfig",
            80
          ],
          [
            "class",
            "EthicsAuditEntry",
            95
          ],
          [
            "class",
            "UnifiedEthicsOrchestrator",
            110
          ],
          [
            "function",
            "get_ethics_orchestrator",
            643
          ],
          [
            "function",
            "ethical_checkpoint",
            657
          ],
          [
            "function",
            "get_ethics_status",
            579
          ],
          [
            "function",
            "get_audit_trail",
            608
          ],
          [
            "function",
            "configure",
            628
          ],
          [
            "function",
            "decorator",
            659
          ]
        ],
        "migrated/brain_orchestrator.py": [
          [
            "class",
            "ResourcePriority",
            66
          ],
          [
            "class",
            "SystemMode",
            72
          ],
          [
            "class",
            "ProcessingStage",
            80
          ],
          [
            "class",
            "BrainOrchestratorConfig",
            92
          ],
          [
            "class",
            "BrainOrchestrator",
            124
          ],
          [
            "function",
            "get_brain_health",
            725
          ],
          [
            "function",
            "get_orchestration_status",
            762
          ],
          [
            "function",
            "broadcast_signal",
            779
          ],
          [
            "function",
            "auto_plugin_register",
            785
          ]
        ],
        "migrated/memory_integration_orchestrator.py": [
          [
            "class",
            "MemoryIntegrationOrchestratorConfig",
            61
          ],
          [
            "class",
            "MemoryIntegrationOrchestrator",
            71
          ],
          [
            "function",
            "load_specifications",
            138
          ],
          [
            "function",
            "create_matada_node",
            160
          ],
          [
            "function",
            "enhanced_fold_in",
            223
          ],
          [
            "function",
            "enhanced_fold_out",
            274
          ],
          [
            "function",
            "demonstrate_enterprise_features",
            325
          ]
        ],
        "examples/endocrine_module_example.py": [
          [
            "class",
            "EndocrineAwareModule",
            11
          ],
          [
            "function",
            "set_endocrine_integration",
            38
          ],
          [
            "function",
            "get_modulatable_parameters",
            42
          ]
        ],
        "brain/symbol_validator.py": [
          [
            "class",
            "ComplianceLevel",
            40
          ],
          [
            "class",
            "Jurisdiction",
            48
          ],
          [
            "class",
            "ComplianceViolationType",
            62
          ],
          [
            "class",
            "ComplianceViolation",
            77
          ],
          [
            "class",
            "ModuleComplianceReport",
            89
          ],
          [
            "class",
            "WorkspaceComplianceReport",
            103
          ],
          [
            "class",
            "LukhasComplianceChecker",
            120
          ],
          [
            "function",
            "main",
            926
          ],
          [
            "function",
            "scan_workspace",
            276
          ],
          [
            "function",
            "save_report",
            812
          ],
          [
            "function",
            "print_summary",
            868
          ]
        ],
        "brain/canadian_awareness_engine.py": [
          [
            "class",
            "PIPEDALegalBasis",
            55
          ],
          [
            "class",
            "CPPAConsumerRights",
            65
          ],
          [
            "class",
            "AIDAGoverance",
            74
          ],
          [
            "class",
            "ProvincialJurisdiction",
            82
          ],
          [
            "class",
            "DataLocalization",
            99
          ],
          [
            "class",
            "CanadianComplianceConfig",
            108
          ],
          [
            "class",
            "CanadianInput",
            146
          ],
          [
            "class",
            "CanadianOutput",
            168
          ],
          [
            "function",
            "canadian_audit_log",
            200
          ],
          [
            "class",
            "CanadianPrivacyModule",
            221
          ],
          [
            "class",
            "CanadianAIGovernanceModule",
            382
          ],
          [
            "class",
            "CanadianAwarenessEngine",
            489
          ],
          [
            "function",
            "certify_canadian_compliance",
            558
          ],
          [
            "function",
            "process",
            241
          ],
          [
            "function",
            "process",
            395
          ],
          [
            "function",
            "process_awareness",
            515
          ]
        ],
        "brain/pr_security_review_github_actions.py": [
          [
            "function",
            "parse_args",
            26
          ],
          [
            "function",
            "main",
            32
          ]
        ],
        "brain/brain_integration.py": [
          [
            "class",
            "EmotionVector",
            109
          ],
          [
            "class",
            "EmotionalOscillator",
            173
          ],
          [
            "class",
            "MemoryEmotionalIntegrator",
            308
          ],
          [
            "class",
            "MemoryVoiceIntegrator",
            731
          ],
          [
            "class",
            "LucasBrainIntegration",
            838
          ],
          [
            "function",
            "calculate_distance",
            127
          ],
          [
            "function",
            "closest_emotion",
            149
          ],
          [
            "function",
            "get_vector",
            166
          ],
          [
            "function",
            "update_emotional_state",
            192
          ],
          [
            "function",
            "get_current_state",
            243
          ],
          [
            "function",
            "get_voice_modulation_params",
            247
          ],
          [
            "function",
            "store_memory_with_emotion",
            354
          ],
          [
            "function",
            "retrieve_with_emotional_context",
            466
          ],
          [
            "function",
            "find_emotionally_similar_memories",
            544
          ],
          [
            "function",
            "dream_consolidate_memories",
            625
          ],
          [
            "function",
            "speak_with_emotional_context",
            753
          ],
          [
            "function",
            "process_message",
            996
          ],
          [
            "function",
            "start_consolidation_thread",
            1103
          ],
          [
            "function",
            "stop_consolidation_thread",
            1146
          ],
          [
            "function",
            "store_memory",
            1166
          ],
          [
            "function",
            "retrieve_memory",
            1170
          ],
          [
            "function",
            "speak",
            1174
          ],
          [
            "class",
            "AccessTier",
            82
          ],
          [
            "function",
            "consolidation_loop",
            1119
          ]
        ],
        "brain/quantum_annealed_consensus.py": [
          [
            "class",
            "QuantumAnnealedEthicalConsensus",
            17
          ],
          [
            "function",
            "find_ethical_consensus",
            83
          ],
          [
            "function",
            "get_consensus_history",
            370
          ],
          [
            "function",
            "export_consensus_data",
            374
          ]
        ],
        "brain/multi_brain_orchestrator.py": [
          [
            "class",
            "SpecializedBrainCore",
            23
          ],
          [
            "class",
            "CreativeProcessingBrain",
            67
          ],
          [
            "class",
            "MemoryProcessingBrain",
            135
          ],
          [
            "class",
            "LearningProcessingBrain",
            197
          ],
          [
            "class",
            "MultiBrainOrchestrator",
            260
          ],
          [
            "function",
            "create_brain_orchestrator",
            465
          ],
          [
            "function",
            "sync_with_orchestrator",
            45
          ],
          [
            "function",
            "get_status",
            54
          ],
          [
            "function",
            "get_orchestrator_status",
            449
          ]
        ],
        "brain/us_institutional_awareness_engine.py": [
          [
            "class",
            "USLegalBasis",
            51
          ],
          [
            "class",
            "CCPACategory",
            61
          ],
          [
            "class",
            "HIPAADataType",
            75
          ],
          [
            "class",
            "SOXClassification",
            83
          ],
          [
            "class",
            "FedRAMPLevel",
            91
          ],
          [
            "class",
            "USComplianceConfig",
            98
          ],
          [
            "class",
            "USConsentData",
            133
          ],
          [
            "class",
            "USProcessingRecord",
            159
          ],
          [
            "class",
            "USInstitutionalInput",
            191
          ],
          [
            "class",
            "USInstitutionalOutput",
            217
          ],
          [
            "class",
            "USEnvironmentalReasoner",
            251
          ],
          [
            "class",
            "USInstitutionalEnvironmentalModule",
            325
          ],
          [
            "class",
            "USInstitutionalAwarenessEngine",
            375
          ],
          [
            "class",
            "Config",
            213
          ],
          [
            "function",
            "process",
            254
          ],
          [
            "function",
            "explain_decision",
            273
          ],
          [
            "function",
            "assess_bias",
            282
          ],
          [
            "function",
            "validate_compliance",
            292
          ],
          [
            "function",
            "get_confidence",
            314
          ],
          [
            "function",
            "generate_us_recommendations",
            356
          ],
          [
            "function",
            "process_awareness",
            415
          ],
          [
            "function",
            "exercise_consumer_rights",
            432
          ],
          [
            "function",
            "get_us_compliance_report",
            595
          ]
        ],
        "brain/controller.py": [
          [
            "class",
            "AdvancedAGIController",
            27
          ],
          [
            "function",
            "get_system_metrics",
            202
          ],
          [
            "function",
            "find_similar_memories",
            255
          ]
        ],
        "brain/das_awareness_engine.py": [
          [
            "class",
            "ComplianceStatus",
            26
          ],
          [
            "class",
            "AwarenessType",
            33
          ],
          [
            "class",
            "AlignmentMetric",
            43
          ],
          [
            "class",
            "DastConfig",
            51
          ],
          [
            "function",
            "now_iso",
            60
          ],
          [
            "function",
            "structured_log",
            64
          ],
          [
            "class",
            "AwarenessInput",
            80
          ],
          [
            "class",
            "AwarenessOutput",
            87
          ],
          [
            "class",
            "DastReasoner",
            95
          ],
          [
            "class",
            "AwarenessModule",
            106
          ],
          [
            "class",
            "EnvironmentalAwarenessInput",
            217
          ],
          [
            "class",
            "EnvironmentalReasoner",
            227
          ],
          [
            "class",
            "EnvironmentalAwarenessModule",
            362
          ],
          [
            "class",
            "CognitiveAwarenessInput",
            430
          ],
          [
            "class",
            "CognitiveReasoner",
            439
          ],
          [
            "class",
            "CognitiveAwarenessModule",
            500
          ],
          [
            "class",
            "DastAwarenessEngine",
            547
          ],
          [
            "function",
            "process",
            98
          ],
          [
            "function",
            "get_confidence",
            102
          ],
          [
            "function",
            "evaluate_alignment",
            170
          ],
          [
            "function",
            "generate_recommendations",
            179
          ],
          [
            "function",
            "calculate_sustainability_impact",
            183
          ],
          [
            "function",
            "process",
            230
          ],
          [
            "function",
            "get_confidence",
            297
          ],
          [
            "function",
            "evaluate_alignment",
            368
          ],
          [
            "function",
            "generate_recommendations",
            392
          ],
          [
            "function",
            "calculate_sustainability_impact",
            414
          ],
          [
            "function",
            "process",
            442
          ],
          [
            "function",
            "get_confidence",
            479
          ],
          [
            "function",
            "evaluate_alignment",
            506
          ],
          [
            "function",
            "generate_recommendations",
            523
          ],
          [
            "function",
            "process_awareness",
            577
          ],
          [
            "function",
            "get_system_status",
            603
          ],
          [
            "function",
            "normalize",
            234
          ]
        ],
        "brain/meta_cognitive_orchestrator.py": [
          [
            "class",
            "MetaCognitiveOrchestrator",
            8
          ],
          [
            "function",
            "process",
            23
          ]
        ],
        "brain/monitor.py": [
          [
            "function",
            "monitor_agi_system",
            13
          ]
        ],
        "brain/dynamic_adaptive_dashboard.py": [
          [
            "class",
            "UserProfile",
            61
          ],
          [
            "class",
            "AdaptiveDashboard",
            70
          ]
        ],
        "brain/collapse_bridge.py": [
          [
            "class",
            "CollapseBridge",
            26
          ]
        ],
        "brain/context_analyzer.py": [
          [
            "class",
            "ContextAnalyzer",
            24
          ],
          [
            "function",
            "analyze",
            43
          ]
        ],
        "brain/validate_pr_security_review.py": [
          [
            "function",
            "validate_pr_security_review",
            19
          ]
        ],
        "brain/eu_awareness_engine.py": [
          [
            "class",
            "GDPRLegalBasis",
            42
          ],
          [
            "class",
            "DataCategory",
            51
          ],
          [
            "class",
            "AIRiskLevel",
            60
          ],
          [
            "class",
            "ComplianceStatus",
            67
          ],
          [
            "class",
            "DataSubjectRights",
            74
          ],
          [
            "class",
            "EUConfig",
            85
          ],
          [
            "function",
            "eu_timestamp",
            122
          ],
          [
            "function",
            "structured_audit_log",
            126
          ],
          [
            "class",
            "ConsentData",
            154
          ],
          [
            "class",
            "DataProcessingRecord",
            172
          ],
          [
            "class",
            "EUAwarenessInput",
            188
          ],
          [
            "class",
            "EUAwarenessOutput",
            214
          ],
          [
            "class",
            "EUReasoner",
            246
          ],
          [
            "class",
            "EUAwarenessModule",
            267
          ],
          [
            "class",
            "EUEnvironmentalReasoner",
            532
          ],
          [
            "class",
            "EUEnvironmentalAwarenessModule",
            574
          ],
          [
            "class",
            "EUAwarenessEngine",
            614
          ],
          [
            "function",
            "validate_consent_basis",
            166
          ],
          [
            "class",
            "Config",
            209
          ],
          [
            "function",
            "process",
            249
          ],
          [
            "function",
            "explain_decision",
            253
          ],
          [
            "function",
            "detect_bias",
            257
          ],
          [
            "function",
            "get_confidence",
            261
          ],
          [
            "function",
            "evaluate_eu_compliance",
            358
          ],
          [
            "function",
            "generate_eu_recommendations",
            367
          ],
          [
            "function",
            "process",
            535
          ],
          [
            "function",
            "explain_decision",
            551
          ],
          [
            "function",
            "detect_bias",
            560
          ],
          [
            "function",
            "get_confidence",
            570
          ],
          [
            "function",
            "evaluate_eu_compliance",
            580
          ],
          [
            "function",
            "generate_eu_recommendations",
            598
          ],
          [
            "function",
            "process_awareness",
            654
          ],
          [
            "function",
            "exercise_data_subject_rights",
            665
          ],
          [
            "function",
            "get_compliance_report",
            775
          ]
        ],
        "brain/adaptive_image_generator.py": [
          [
            "class",
            "AdaptiveImageGenerator",
            17
          ]
        ],
        "brain/consciousness.py": [
          [
            "class",
            "ConsciousnessState",
            17
          ],
          [
            "class",
            "ConsciousnessCore",
            29
          ],
          [
            "function",
            "awaken",
            51
          ],
          [
            "function",
            "evolve_consciousness",
            64
          ],
          [
            "function",
            "register_process",
            95
          ],
          [
            "function",
            "unregister_process",
            106
          ],
          [
            "function",
            "get_consciousness_context",
            114
          ],
          [
            "function",
            "get_state_info",
            132
          ],
          [
            "function",
            "get_evolution_history",
            157
          ]
        ],
        "brain/eu_ai_transparency.py": [
          [
            "class",
            "DecisionType",
            37
          ],
          [
            "class",
            "InfluenceLevel",
            48
          ],
          [
            "class",
            "DecisionTrace",
            57
          ],
          [
            "class",
            "TransparencyOrchestrator",
            204
          ],
          [
            "function",
            "create_transparent_decision",
            274
          ],
          [
            "function",
            "integrate_transparency_with_cognitive_core",
            403
          ],
          [
            "function",
            "add_reasoning_step",
            84
          ],
          [
            "function",
            "add_data_influence",
            94
          ],
          [
            "function",
            "add_alternative_considered",
            106
          ],
          [
            "function",
            "add_confidence_factor",
            116
          ],
          [
            "function",
            "add_safety_check",
            124
          ],
          [
            "function",
            "add_bias_consideration",
            133
          ],
          [
            "function",
            "finalize_decision",
            142
          ],
          [
            "function",
            "get_user_explanation",
            167
          ],
          [
            "function",
            "start_decision_trace",
            215
          ],
          [
            "function",
            "get_trace",
            226
          ],
          [
            "function",
            "complete_trace",
            230
          ],
          [
            "function",
            "get_transparency_summary",
            249
          ],
          [
            "function",
            "decorator",
            281
          ]
        ],
        "brain/research_awareness_engine.py": [
          [
            "class",
            "ResearchType",
            88
          ],
          [
            "class",
            "ExperimentalTechnique",
            101
          ],
          [
            "class",
            "ResearchEthicsLevel",
            116
          ],
          [
            "class",
            "DataSharingLevel",
            124
          ],
          [
            "class",
            "ResearchPhase",
            132
          ],
          [
            "class",
            "ResearchConfig",
            144
          ],
          [
            "class",
            "ResearchAwarenessInput",
            186
          ],
          [
            "class",
            "ResearchAwarenessOutput",
            240
          ],
          [
            "function",
            "research_audit_log",
            302
          ],
          [
            "class",
            "QuantumInspiredProcessor",
            328
          ],
          [
            "class",
            "BioSymbolicReasoner",
            354
          ],
          [
            "class",
            "SwarmIntelligenceCoordinator",
            411
          ],
          [
            "class",
            "ResearchAwarenessReasoner",
            458
          ],
          [
            "class",
            "ResearchAwarenessEngine",
            648
          ],
          [
            "function",
            "certify_research_compliance",
            854
          ],
          [
            "class",
            "Config",
            236
          ],
          [
            "function",
            "process",
            334
          ],
          [
            "function",
            "process",
            361
          ],
          [
            "function",
            "process",
            418
          ],
          [
            "function",
            "process",
            475
          ],
          [
            "function",
            "conduct_research",
            681
          ],
          [
            "function",
            "get_research_summary",
            836
          ]
        ],
        "brain/autonomous_github_manager.py": [
          [
            "class",
            "NotificationPriority",
            37
          ],
          [
            "class",
            "GitHubNotification",
            45
          ],
          [
            "class",
            "BatchFixResult",
            60
          ],
          [
            "class",
            "AdvancedAutonomousGitHubManager",
            70
          ],
          [
            "function",
            "main",
            611
          ],
          [
            "function",
            "fetch_all_notifications",
            111
          ],
          [
            "function",
            "parse_notification",
            165
          ],
          [
            "function",
            "analyze_notification_priority",
            208
          ],
          [
            "function",
            "estimate_fix_cost",
            251
          ],
          [
            "function",
            "prioritize_notifications",
            268
          ],
          [
            "function",
            "batch_process_fixes",
            296
          ],
          [
            "function",
            "process_notification_batch",
            331
          ],
          [
            "function",
            "attempt_autonomous_fix",
            374
          ],
          [
            "function",
            "determine_fix_strategy",
            420
          ],
          [
            "function",
            "execute_fix_strategy",
            442
          ],
          [
            "function",
            "create_workflow_fix_pr",
            462
          ],
          [
            "function",
            "create_security_fix_pr",
            517
          ],
          [
            "function",
            "create_dependency_update_pr",
            522
          ],
          [
            "function",
            "create_general_fix_pr",
            527
          ],
          [
            "function",
            "generate_comprehensive_report",
            532
          ],
          [
            "function",
            "save_results",
            590
          ],
          [
            "function",
            "priority_score",
            270
          ]
        ],
        "brain/awareness_engine_elevated.py": [
          [
            "class",
            "ComplianceStatus",
            33
          ],
          [
            "class",
            "AwarenessType",
            40
          ],
          [
            "class",
            "AlignmentMetric",
            52
          ],
          [
            "class",
            "LukhasConfig",
            60
          ],
          [
            "function",
            "now_iso",
            72
          ],
          [
            "function",
            "structured_log",
            76
          ],
          [
            "class",
            "AwarenessInput",
            91
          ],
          [
            "class",
            "AwarenessOutput",
            98
          ],
          [
            "class",
            "Reasoner",
            107
          ],
          [
            "class",
            "AwarenessModule",
            117
          ],
          [
            "class",
            "EnvironmentalAwarenessInput",
            249
          ],
          [
            "class",
            "EnhancedEnvReasoner",
            260
          ],
          [
            "function",
            "is_sustainable_location",
            389
          ],
          [
            "function",
            "is_indoor_location",
            406
          ],
          [
            "function",
            "quantum_anomaly_check",
            412
          ],
          [
            "class",
            "EnvironmentalAwarenessModule",
            429
          ],
          [
            "class",
            "CognitiveAwarenessInput",
            507
          ],
          [
            "class",
            "EnhancedCognitiveReasoner",
            518
          ],
          [
            "class",
            "CognitiveAwarenessModule",
            704
          ],
          [
            "class",
            "EmotionalAwarenessInput",
            805
          ],
          [
            "class",
            "EnhancedEmotionalReasoner",
            817
          ],
          [
            "class",
            "EmotionalAwarenessModule",
            1174
          ],
          [
            "class",
            "SocialAwarenessInput",
            1271
          ],
          [
            "class",
            "SocialReasoner",
            1279
          ],
          [
            "class",
            "SocialAwarenessModule",
            1312
          ],
          [
            "class",
            "LukhasAwarenessEngine",
            1326
          ],
          [
            "function",
            "process",
            109
          ],
          [
            "function",
            "get_confidence",
            113
          ],
          [
            "function",
            "evaluate_alignment",
            187
          ],
          [
            "function",
            "generate_recommendations",
            196
          ],
          [
            "function",
            "calculate_sustainability_impact",
            200
          ],
          [
            "function",
            "process",
            263
          ],
          [
            "function",
            "get_confidence",
            344
          ],
          [
            "function",
            "evaluate_alignment",
            435
          ],
          [
            "function",
            "generate_recommendations",
            459
          ],
          [
            "function",
            "calculate_sustainability_impact",
            485
          ],
          [
            "function",
            "process",
            521
          ],
          [
            "function",
            "get_confidence",
            579
          ],
          [
            "function",
            "evaluate_alignment",
            710
          ],
          [
            "function",
            "generate_recommendations",
            746
          ],
          [
            "function",
            "calculate_sustainability_impact",
            785
          ],
          [
            "function",
            "process",
            820
          ],
          [
            "function",
            "get_confidence",
            861
          ],
          [
            "function",
            "evaluate_alignment",
            1180
          ],
          [
            "function",
            "generate_recommendations",
            1215
          ],
          [
            "function",
            "calculate_sustainability_impact",
            1247
          ],
          [
            "function",
            "process",
            1282
          ],
          [
            "function",
            "get_confidence",
            1309
          ],
          [
            "function",
            "evaluate_alignment",
            1318
          ],
          [
            "function",
            "process_awareness",
            1372
          ],
          [
            "function",
            "get_system_status",
            1398
          ],
          [
            "function",
            "normalize_with_optimal",
            267
          ]
        ],
        "brain/pr_security_review_starter.py": [
          [
            "function",
            "run_security_review",
            19
          ]
        ],
        "brain/uk_awareness_engine.py": [
          [
            "class",
            "UKGDPRLawfulBasis",
            57
          ],
          [
            "class",
            "DataSubjectRights",
            68
          ],
          [
            "class",
            "UKDataCategory",
            79
          ],
          [
            "class",
            "UKTransferMechanism",
            90
          ],
          [
            "class",
            "ICOEnforcementAction",
            100
          ],
          [
            "class",
            "ChildrenProtectionLevel",
            109
          ],
          [
            "class",
            "UKComplianceConfig",
            117
          ],
          [
            "class",
            "UKInput",
            156
          ],
          [
            "class",
            "UKOutput",
            187
          ],
          [
            "function",
            "uk_audit_log",
            224
          ],
          [
            "class",
            "UKPrivacyModule",
            245
          ],
          [
            "class",
            "UKAwarenessEngine",
            530
          ],
          [
            "function",
            "certify_uk_compliance",
            587
          ],
          [
            "function",
            "process",
            254
          ],
          [
            "function",
            "process_awareness",
            555
          ]
        ],
        "brain/llm_engine.py": [
          [
            "class",
            "LucasLLM",
            12
          ],
          [
            "function",
            "generate",
            17
          ],
          [
            "function",
            "batch_generate",
            26
          ]
        ],
        "brain/security_pr_analyzer.py": [
          [
            "class",
            "SecurityIssue",
            25
          ],
          [
            "class",
            "PRAnalysis",
            35
          ],
          [
            "class",
            "SecurityScanner",
            46
          ],
          [
            "class",
            "PRAnalyzer",
            435
          ],
          [
            "function",
            "main",
            600
          ],
          [
            "function",
            "scan_repository",
            58
          ],
          [
            "function",
            "analyze_repository_prs",
            447
          ]
        ],
        "brain/github_vulnerability_manager.py": [
          [
            "class",
            "VulnerabilitySeverity",
            38
          ],
          [
            "class",
            "Vulnerability",
            46
          ],
          [
            "class",
            "Repository",
            62
          ],
          [
            "class",
            "GitHubVulnerabilityManager",
            75
          ],
          [
            "function",
            "main",
            802
          ],
          [
            "function",
            "get_user_repositories",
            164
          ],
          [
            "function",
            "get_repository_vulnerabilities",
            222
          ],
          [
            "function",
            "scan_all_repositories",
            287
          ],
          [
            "function",
            "get_daily_budget_remaining",
            352
          ],
          [
            "function",
            "prioritize_vulnerabilities",
            359
          ],
          [
            "function",
            "fix_critical_vulnerabilities",
            398
          ],
          [
            "function",
            "attempt_vulnerability_fix",
            423
          ],
          [
            "function",
            "create_vulnerability_fix_pr",
            475
          ],
          [
            "function",
            "determine_vulnerability_fix_strategy",
            682
          ],
          [
            "function",
            "save_scan_results",
            699
          ],
          [
            "function",
            "generate_report",
            709
          ],
          [
            "function",
            "fix_vulnerabilities_batch",
            756
          ],
          [
            "function",
            "vulnerability_score",
            365
          ]
        ],
        "brain/prime_oscillator.py": [
          [
            "class",
            "PrimeHarmonicOscillator",
            4
          ],
          [
            "function",
            "generate_harmonic",
            9
          ],
          [
            "function",
            "get_harmonic_series",
            12
          ]
        ],
        "brain/learn_to_learn.py": [
          [
            "class",
            "MetaLearningSystem",
            13
          ],
          [
            "function",
            "optimize_learning_approach",
            32
          ],
          [
            "function",
            "incorporate_feedback",
            67
          ],
          [
            "function",
            "generate_learning_report",
            89
          ]
        ],
        "brain/integration_bridge.py": [
          [
            "class",
            "LUKHASBrainBridge",
            10
          ]
        ],
        "brain/safe_subprocess_executor.py": [
          [
            "class",
            "SafeSubprocessExecutor",
            15
          ],
          [
            "function",
            "safe_subprocess_run",
            145
          ],
          [
            "function",
            "safe_python_execution",
            159
          ],
          [
            "function",
            "safe_run",
            58
          ],
          [
            "function",
            "safe_python_run",
            111
          ],
          [
            "function",
            "safe_git_run",
            128
          ]
        ],
        "brain/privacy_manager.py": [
          [
            "class",
            "PrivacyManager",
            22
          ],
          [
            "function",
            "set_privacy_setting",
            42
          ],
          [
            "function",
            "get_privacy_setting",
            53
          ],
          [
            "function",
            "apply_privacy_mechanisms",
            57
          ],
          [
            "function",
            "anonymize_data",
            78
          ],
          [
            "function",
            "encrypt_sensitive_fields",
            110
          ],
          [
            "function",
            "decrypt_field",
            142
          ],
          [
            "function",
            "check_permissions",
            159
          ],
          [
            "function",
            "set_user_permissions",
            204
          ],
          [
            "function",
            "apply_retention_policy",
            214
          ],
          [
            "function",
            "create_gdpr_report",
            265
          ],
          [
            "function",
            "log_privacy_event",
            297
          ],
          [
            "function",
            "get_privacy_logs",
            316
          ],
          [
            "function",
            "anonymize_dict",
            92
          ],
          [
            "function",
            "encrypt_dict",
            123
          ],
          [
            "function",
            "should_retain",
            229
          ]
        ],
        "brain/core_system.py": [
          [
            "class",
            "AGICapabilityLevel",
            102
          ],
          [
            "class",
            "AGIResponse",
            112
          ],
          [
            "class",
            "AGIBot",
            124
          ],
          [
            "function",
            "get_status",
            326
          ],
          [
            "class",
            "LukhasTier",
            85
          ],
          [
            "class",
            "ConsciousnessState",
            93
          ]
        ],
        "brain/unified_collapse_system.py": [
          [
            "function",
            "collapse_handler",
            18
          ],
          [
            "class",
            "BrainCollapseManager",
            29
          ],
          [
            "class",
            "CollapseSynchronizer",
            128
          ],
          [
            "class",
            "CollapseBridge",
            164
          ],
          [
            "function",
            "collapse_trace_matrix",
            115
          ]
        ],
        "brain/safety_guardrails.py": [
          [
            "class",
            "SafetyGuardrails",
            21
          ],
          [
            "function",
            "check_safety",
            90
          ],
          [
            "function",
            "get_stats",
            448
          ],
          [
            "function",
            "adjust_config",
            452
          ],
          [
            "function",
            "reset_stats",
            469
          ]
        ],
        "brain/main_node.py": [
          [
            "class",
            "AdaptiveAGISystem",
            48
          ],
          [
            "function",
            "init_components",
            74
          ],
          [
            "function",
            "register_event_handlers",
            90
          ]
        ],
        "brain/identity_manager.py": [
          [
            "class",
            "IdentityManager",
            21
          ],
          [
            "function",
            "process_experience",
            80
          ],
          [
            "function",
            "retrieve_memory",
            146
          ],
          [
            "function",
            "get_identity_state",
            197
          ],
          [
            "function",
            "update_identity",
            213
          ],
          [
            "function",
            "get_identity_evolution",
            253
          ],
          [
            "function",
            "save_identity",
            351
          ]
        ],
        "brain/dream_mutator.py": [
          [
            "function",
            "load_latest_dream",
            19
          ],
          [
            "function",
            "mutate_emotional_wave",
            27
          ],
          [
            "function",
            "mutate_dream",
            30
          ],
          [
            "function",
            "save_mutated_dream",
            39
          ]
        ],
        "brain/lambda_bot_batch_processor.py": [
          [
            "class",
            "BatchableIssue",
            30
          ],
          [
            "class",
            "IssueType",
            41
          ],
          [
            "class",
            "BatchProcessor",
            49
          ],
          [
            "function",
            "main",
            553
          ],
          [
            "function",
            "add_issue_to_batch",
            69
          ],
          [
            "function",
            "process_ready_batches",
            125
          ],
          [
            "function",
            "get_batch_statistics",
            536
          ]
        ],
        "brain/colony_coordinator.py": [
          [
            "class",
            "_StubColony",
            8
          ],
          [
            "class",
            "BrainColonyCoordinator",
            19
          ]
        ],
        "brain/collapse_chain_integrity.py": [
          [
            "class",
            "CollapseChainIntegrity",
            21
          ]
        ],
        "brain/brain.py": [
          [
            "class",
            "LucasBrain",
            16
          ]
        ],
        "brain/lambdabot_autonomous_workflow_fixer.py": [
          [
            "class",
            "AutonomousFixResult",
            37
          ],
          [
            "class",
            "\u039bBotAutonomousWorkflowFixer",
            50
          ],
          [
            "function",
            "main",
            535
          ],
          [
            "function",
            "analyze_notification_patterns",
            87
          ],
          [
            "function",
            "autonomous_fix_github_notifications",
            150
          ],
          [
            "function",
            "execute_autonomous_fix",
            241
          ],
          [
            "function",
            "save_autonomous_fix_results",
            525
          ]
        ],
        "brain/autonomous_system.py": [
          [
            "class",
            "FullyAutonomousAGI",
            27
          ],
          [
            "function",
            "main",
            306
          ],
          [
            "function",
            "run_autonomous_cycle",
            64
          ],
          [
            "function",
            "run_fully_autonomous",
            221
          ]
        ],
        "brain/brain_collapse_manager.py": [
          [
            "class",
            "BrainCollapseManager",
            31
          ],
          [
            "class",
            "CollapseSynchronizer",
            163
          ],
          [
            "function",
            "collapse_handler",
            205
          ],
          [
            "function",
            "collapse_trace_matrix",
            148
          ]
        ],
        "brain/orchestrator.py": [
          [
            "class",
            "LukhasAGIConfig",
            103
          ],
          [
            "class",
            "LukhasProcessingStage",
            136
          ],
          [
            "class",
            "LukhasProcessingContext",
            150
          ],
          [
            "class",
            "LukhasAGIOrchestrator",
            160
          ],
          [
            "class",
            "LukhasConsciousnessLevel",
            60
          ]
        ],
        "brain/cognitive_core.py": [
          [
            "class",
            "CognitiveEngine",
            144
          ],
          [
            "function",
            "run_interactive_session",
            779
          ],
          [
            "function",
            "main",
            841
          ],
          [
            "function",
            "get_agi_status",
            273
          ],
          [
            "function",
            "process_input_sync",
            589
          ],
          [
            "class",
            "AGICapabilityLevel",
            38
          ],
          [
            "class",
            "AGIResponse",
            43
          ],
          [
            "class",
            "QuantumInspiredAttention",
            62
          ],
          [
            "class",
            "CausalReasoningModule",
            68
          ],
          [
            "class",
            "SymbolicEngine",
            74
          ],
          [
            "class",
            "MetaCognitiveOrchestrator",
            80
          ],
          [
            "class",
            "ComplianceEngine",
            113
          ],
          [
            "function",
            "process",
            63
          ],
          [
            "function",
            "analyze",
            69
          ],
          [
            "function",
            "process",
            75
          ],
          [
            "function",
            "register_component",
            90
          ],
          [
            "function",
            "orchestrate",
            93
          ],
          [
            "function",
            "analyze_performance",
            107
          ],
          [
            "function",
            "evaluate",
            114
          ],
          [
            "function",
            "check_compliance",
            117
          ]
        ],
        "brain/integrity_probe.py": [
          [
            "class",
            "IntegrityProbe",
            24
          ]
        ],
        "brain/drift_pattern_analyzer.py": [
          [
            "class",
            "DriftPatternAnalyzer",
            23
          ]
        ],
        "brain/lambdabot_autonomous_fixer.py": [
          [
            "class",
            "FixStrategy",
            41
          ],
          [
            "class",
            "PRCreationResult",
            56
          ],
          [
            "class",
            "\u039bBotAutonomousVulnerabilityFixer",
            66
          ]
        ],
        "brain/fix_lambda_symbols.py": [
          [
            "function",
            "fix_lambda_symbols",
            11
          ]
        ],
        "brain/awareness_engine.py": [
          [
            "class",
            "ComplianceStatus",
            33
          ],
          [
            "class",
            "AwarenessType",
            40
          ],
          [
            "class",
            "AlignmentMetric",
            52
          ],
          [
            "class",
            "LukhasConfig",
            60
          ],
          [
            "function",
            "now_iso",
            72
          ],
          [
            "function",
            "structured_log",
            76
          ],
          [
            "class",
            "AwarenessInput",
            91
          ],
          [
            "class",
            "AwarenessOutput",
            98
          ],
          [
            "class",
            "Reasoner",
            107
          ],
          [
            "class",
            "AwarenessModule",
            117
          ],
          [
            "class",
            "EnvironmentalAwarenessInput",
            249
          ],
          [
            "class",
            "EnhancedEnvReasoner",
            260
          ],
          [
            "function",
            "is_sustainable_location",
            389
          ],
          [
            "function",
            "is_indoor_location",
            406
          ],
          [
            "function",
            "quantum_anomaly_check",
            412
          ],
          [
            "class",
            "EnvironmentalAwarenessModule",
            429
          ],
          [
            "class",
            "CognitiveReasoner",
            505
          ],
          [
            "class",
            "EmotionalReasoner",
            611
          ],
          [
            "class",
            "SocialReasoner",
            743
          ],
          [
            "class",
            "CognitiveAwarenessInput",
            853
          ],
          [
            "class",
            "CognitiveAwarenessModule",
            864
          ],
          [
            "class",
            "EmotionalAwarenessInput",
            965
          ],
          [
            "class",
            "EmotionalAwarenessModule",
            977
          ],
          [
            "class",
            "SocialAwarenessInput",
            1075
          ],
          [
            "class",
            "SocialAwarenessModule",
            1083
          ],
          [
            "class",
            "LukhasAwarenessEngine",
            1097
          ],
          [
            "function",
            "process",
            109
          ],
          [
            "function",
            "get_confidence",
            113
          ],
          [
            "function",
            "evaluate_alignment",
            187
          ],
          [
            "function",
            "generate_recommendations",
            196
          ],
          [
            "function",
            "calculate_sustainability_impact",
            200
          ],
          [
            "function",
            "process",
            263
          ],
          [
            "function",
            "get_confidence",
            344
          ],
          [
            "function",
            "evaluate_alignment",
            435
          ],
          [
            "function",
            "generate_recommendations",
            459
          ],
          [
            "function",
            "calculate_sustainability_impact",
            485
          ],
          [
            "function",
            "process",
            508
          ],
          [
            "function",
            "process_cognitive_load",
            575
          ],
          [
            "function",
            "analyze_decision_patterns",
            597
          ],
          [
            "function",
            "get_confidence",
            607
          ],
          [
            "function",
            "process",
            614
          ],
          [
            "function",
            "process_emotional_state",
            666
          ],
          [
            "function",
            "determine_widget_animation",
            693
          ],
          [
            "function",
            "get_confidence",
            739
          ],
          [
            "function",
            "process",
            746
          ],
          [
            "function",
            "analyze_social_context",
            780
          ],
          [
            "function",
            "get_confidence",
            847
          ],
          [
            "function",
            "evaluate_alignment",
            870
          ],
          [
            "function",
            "generate_recommendations",
            906
          ],
          [
            "function",
            "calculate_sustainability_impact",
            945
          ],
          [
            "function",
            "evaluate_alignment",
            983
          ],
          [
            "function",
            "generate_recommendations",
            1018
          ],
          [
            "function",
            "calculate_sustainability_impact",
            1050
          ],
          [
            "function",
            "evaluate_alignment",
            1089
          ],
          [
            "function",
            "process_awareness",
            1143
          ],
          [
            "function",
            "get_system_status",
            1169
          ],
          [
            "function",
            "normalize_with_optimal",
            267
          ]
        ],
        "brain/australian_awareness_engine.py": [
          [
            "class",
            "AustralianPrivacyPrinciple",
            57
          ],
          [
            "class",
            "ConsumerDataRight",
            73
          ],
          [
            "class",
            "AustralianJurisdiction",
            80
          ],
          [
            "class",
            "DataBreachSeverity",
            92
          ],
          [
            "class",
            "CrossBorderApproval",
            99
          ],
          [
            "class",
            "AustralianComplianceConfig",
            109
          ],
          [
            "class",
            "AustralianInput",
            147
          ],
          [
            "class",
            "AustralianOutput",
            180
          ],
          [
            "function",
            "australian_audit_log",
            221
          ],
          [
            "class",
            "AustralianPrivacyModule",
            241
          ],
          [
            "class",
            "AustralianAwarenessEngine",
            467
          ],
          [
            "function",
            "certify_australian_compliance",
            523
          ],
          [
            "function",
            "process",
            262
          ],
          [
            "function",
            "process_awareness",
            493
          ]
        ],
        "brain/pr_security_review_task.py": [
          [
            "class",
            "SecurityPR",
            42
          ],
          [
            "class",
            "PRSecurityReviewTask",
            52
          ],
          [
            "function",
            "main",
            435
          ],
          [
            "function",
            "get_all_repositories",
            83
          ],
          [
            "function",
            "get_unreviewed_prs",
            108
          ],
          [
            "function",
            "analyze_pr_security",
            144
          ],
          [
            "function",
            "add_security_review",
            238
          ],
          [
            "function",
            "auto_fix_security_issues",
            296
          ],
          [
            "function",
            "process_all_repositories",
            330
          ],
          [
            "function",
            "generate_report",
            384
          ]
        ],
        "brain/experience_manager.py": [
          [
            "class",
            "ExperienceManager",
            12
          ]
        ],
        "brain/MultiBrainSymphony.py": [
          [
            "class",
            "SpecializedBrainCore",
            25
          ],
          [
            "class",
            "DreamsBrainSpecialist",
            69
          ],
          [
            "class",
            "MemoryBrainSpecialist",
            136
          ],
          [
            "class",
            "LearningBrainSpecialist",
            198
          ],
          [
            "class",
            "MultiBrainSymphonyOrchestrator",
            260
          ],
          [
            "function",
            "create_enhanced_brain_integration",
            466
          ],
          [
            "function",
            "sync_with_orchestra",
            47
          ],
          [
            "function",
            "get_status",
            56
          ],
          [
            "function",
            "get_symphony_status",
            449
          ]
        ],
        "brain/GlobalInstitutionalCompliantEngine.py": [
          [
            "class",
            "InstitutionalComplianceLevel",
            131
          ],
          [
            "class",
            "GlobalRegulation",
            139
          ],
          [
            "class",
            "InstitutionalCertification",
            204
          ],
          [
            "class",
            "GlobalInstitutionalConfig",
            222
          ],
          [
            "class",
            "InstitutionalAwarenessInput",
            315
          ],
          [
            "class",
            "InstitutionalAwarenessOutput",
            386
          ],
          [
            "function",
            "institutional_compliance_audit_log",
            463
          ],
          [
            "class",
            "InstitutionalCompliantReasoner",
            509
          ],
          [
            "class",
            "GlobalInstitutionalCompliantEngine",
            837
          ],
          [
            "function",
            "certify_global_institutional_compliance",
            1102
          ],
          [
            "class",
            "Config",
            381
          ],
          [
            "function",
            "process",
            547
          ],
          [
            "function",
            "process_institutional_awareness",
            898
          ]
        ],
        "brain/vulnerability_dashboard.py": [
          [
            "function",
            "load_latest_scan_results",
            19
          ],
          [
            "function",
            "generate_dashboard_report",
            30
          ],
          [
            "function",
            "main",
            116
          ]
        ],
        "brain/main_bot.py": [
          [
            "class",
            "EnhancedAGIBot",
            39
          ],
          [
            "function",
            "get_agi_status",
            147
          ]
        ],
        "brain/demo.py": [
          [
            "class",
            "AdaptiveAGIDemo",
            68
          ],
          [
            "function",
            "init_components",
            94
          ],
          [
            "function",
            "generate_simple_response",
            481
          ],
          [
            "class",
            "MockVoiceModulator",
            112
          ],
          [
            "class",
            "MockSafetyGuard",
            126
          ],
          [
            "class",
            "MockComplianceEngine",
            144
          ],
          [
            "function",
            "determine_parameters",
            113
          ],
          [
            "function",
            "modulate_voice",
            115
          ],
          [
            "function",
            "validate_response",
            127
          ],
          [
            "function",
            "validate_voice_parameters",
            129
          ],
          [
            "function",
            "anonymize_metadata",
            145
          ],
          [
            "function",
            "check_voice_data_compliance",
            147
          ]
        ],
        "brain/trace_memoria_logger.py": [
          [
            "class",
            "TraceMemoriaLogger",
            34
          ],
          [
            "class",
            "TraceLevel",
            42
          ],
          [
            "function",
            "log_trace",
            86
          ],
          [
            "function",
            "get_recent_traces",
            183
          ],
          [
            "function",
            "read_traces",
            210
          ],
          [
            "function",
            "log_system_event",
            274
          ],
          [
            "function",
            "log_core_event",
            278
          ],
          [
            "function",
            "log_symbolic",
            282
          ],
          [
            "function",
            "log_emotional",
            286
          ],
          [
            "function",
            "log_ethical",
            291
          ],
          [
            "function",
            "log_interaction",
            296
          ],
          [
            "function",
            "log_dream",
            300
          ],
          [
            "function",
            "log_reflection",
            304
          ],
          [
            "function",
            "get_trace_by_id",
            308
          ],
          [
            "function",
            "close",
            342
          ]
        ],
        "brain/token_budget_controller.py": [
          [
            "class",
            "BudgetPriority",
            29
          ],
          [
            "class",
            "CallUrgency",
            36
          ],
          [
            "class",
            "APICallContext",
            44
          ],
          [
            "class",
            "BudgetDecision",
            55
          ],
          [
            "class",
            "TokenBudgetController",
            67
          ],
          [
            "function",
            "main",
            644
          ],
          [
            "function",
            "load_state",
            127
          ],
          [
            "function",
            "save_state",
            166
          ],
          [
            "function",
            "check_daily_reset",
            197
          ],
          [
            "function",
            "track_conservation",
            251
          ],
          [
            "function",
            "update_efficiency_score",
            257
          ],
          [
            "function",
            "can_use_flex_budget",
            279
          ],
          [
            "function",
            "rate_limit_check",
            285
          ],
          [
            "function",
            "analyze_call_necessity",
            302
          ],
          [
            "function",
            "record_api_call",
            426
          ],
          [
            "function",
            "mark_recommendation_applied",
            509
          ],
          [
            "function",
            "refresh_daily_budget",
            520
          ],
          [
            "function",
            "get_financial_intelligence_report",
            547
          ]
        ],
        "brain/collapse_chain_simulator.py": [
          [
            "class",
            "CollapseChainSimulator",
            26
          ]
        ],
        "brain/collaborative_ai_agent_system.py": [
          [
            "class",
            "AgentTier",
            23
          ],
          [
            "class",
            "ConsolidationPhase",
            29
          ],
          [
            "class",
            "AgentCapabilities",
            36
          ],
          [
            "class",
            "LukhasAIAgent",
            45
          ],
          [
            "class",
            "LukhasAIAgentTeam",
            73
          ],
          [
            "function",
            "get_team_status",
            367
          ]
        ],
        "brain/expression.py": [
          [
            "function",
            "load_latest_flashback",
            19
          ],
          [
            "function",
            "synthesize_expression",
            27
          ],
          [
            "function",
            "save_expression",
            45
          ]
        ],
        "brain/unified_self_merge_divergence.py": [
          [
            "function",
            "load_traits",
            35
          ],
          [
            "function",
            "load_meta_reflections",
            45
          ],
          [
            "function",
            "build_gpt_prompt",
            55
          ],
          [
            "function",
            "run_gpt",
            80
          ],
          [
            "function",
            "save_snapshot",
            93
          ],
          [
            "function",
            "run",
            103
          ]
        ],
        "brain/compliance_registry.py": [
          [
            "class",
            "ComplianceRegistry",
            14
          ],
          [
            "function",
            "get_component_requirements",
            86
          ]
        ],
        "brain/entropy_probe.py": [
          [
            "class",
            "EntropyProbe",
            24
          ],
          [
            "function",
            "calculate_entropy",
            38
          ]
        ],
        "brain/ai_compliance.py": [
          [
            "class",
            "AIComplianceManager",
            13
          ],
          [
            "function",
            "get_transparency_report",
            57
          ]
        ],
        "brain/GlobalInstitutionalFramework.py": [
          [
            "class",
            "Jurisdiction",
            52
          ],
          [
            "class",
            "RegulationType",
            66
          ],
          [
            "class",
            "ComplianceLevel",
            75
          ],
          [
            "class",
            "LegalBasis",
            82
          ],
          [
            "class",
            "DataCategory",
            98
          ],
          [
            "class",
            "GlobalComplianceConfig",
            111
          ],
          [
            "function",
            "global_timestamp",
            158
          ],
          [
            "function",
            "institutional_audit_log",
            162
          ],
          [
            "class",
            "GlobalConsentData",
            192
          ],
          [
            "class",
            "InstitutionalProcessingRecord",
            214
          ],
          [
            "class",
            "GlobalInstitutionalInput",
            243
          ],
          [
            "class",
            "GlobalInstitutionalOutput",
            270
          ],
          [
            "class",
            "GlobalInstitutionalReasoner",
            304
          ],
          [
            "class",
            "GlobalInstitutionalModule",
            329
          ],
          [
            "class",
            "Config",
            266
          ],
          [
            "function",
            "process",
            307
          ],
          [
            "function",
            "explain_decision",
            311
          ],
          [
            "function",
            "assess_bias",
            315
          ],
          [
            "function",
            "validate_compliance",
            319
          ],
          [
            "function",
            "get_confidence",
            323
          ]
        ],
        "brain/cpu_friendly_compliance.py": [
          [
            "function",
            "get_cpu_usage",
            12
          ],
          [
            "function",
            "check_vscode_cpu",
            16
          ],
          [
            "function",
            "wait_for_low_cpu",
            28
          ],
          [
            "function",
            "run_compliance_scan",
            50
          ],
          [
            "function",
            "main",
            71
          ]
        ],
        "brain/mesh/collapse_mesh.py": [
          [
            "class",
            "CollapseNode",
            18
          ],
          [
            "class",
            "CollapseMesh",
            52
          ],
          [
            "function",
            "add_neighbor",
            37
          ],
          [
            "function",
            "heartbeat",
            46
          ],
          [
            "function",
            "add_node",
            63
          ],
          [
            "function",
            "add_edge",
            74
          ],
          [
            "function",
            "get_node",
            86
          ]
        ],
        "brain/mesh/cognitive_mesh_coordinator.py": [
          [
            "class",
            "NodeType",
            77
          ],
          [
            "class",
            "NodeStatus",
            89
          ],
          [
            "class",
            "TaskPriority",
            99
          ],
          [
            "class",
            "CognitiveTask",
            109
          ],
          [
            "class",
            "NodeCapability",
            125
          ],
          [
            "class",
            "NodeMetrics",
            136
          ],
          [
            "class",
            "CognitiveNode",
            148
          ],
          [
            "class",
            "CognitiveMeshCoordinator",
            351
          ],
          [
            "function",
            "get_status",
            321
          ],
          [
            "function",
            "get_mesh_status",
            812
          ],
          [
            "function",
            "score_node",
            587
          ]
        ],
        "brain/visualization/healix_visualizer.py": [
          [
            "class",
            "HealixVisualizer",
            24
          ],
          [
            "function",
            "animate_frame",
            403
          ]
        ],
        "brain/visualization/golden_healix_mapper.py": [
          [
            "class",
            "MemoryStrand",
            29
          ],
          [
            "class",
            "MutationStrategy",
            37
          ],
          [
            "class",
            "HealixMapper",
            44
          ]
        ],
        "brain/visualization/memory_helix_visualizer.py": [
          [
            "class",
            "MemoryHelixVisualizer",
            34
          ],
          [
            "function",
            "get_memory_coordinates",
            83
          ],
          [
            "function",
            "get_authorized_memories",
            112
          ],
          [
            "function",
            "visualize_memory_helix",
            142
          ],
          [
            "function",
            "create_interactive_visualization",
            306
          ],
          [
            "function",
            "update_memory_links",
            333
          ]
        ],
        "brain/tracing/trace_tools.py": [
          [
            "function",
            "load_symbolic_trace_dashboard",
            26
          ],
          [
            "function",
            "filter_trace_by_column",
            43
          ],
          [
            "function",
            "get_summary_stats",
            53
          ],
          [
            "function",
            "export_filtered_trace_jsonl",
            71
          ]
        ],
        "brain/attention/quantum_attention.py": [
          [
            "class",
            "QuantumInspiredAttention",
            14
          ],
          [
            "function",
            "attend",
            40
          ],
          [
            "function",
            "get_attention_state",
            116
          ],
          [
            "function",
            "adjust_attention_gates",
            124
          ]
        ],
        "brain/cognitive/voice_engine.py": [
          [
            "class",
            "CognitiveVoiceEngine",
            13
          ]
        ],
        "brain/cognitive/awareness/awareness.py": [
          [
            "class",
            "SystemAwareness",
            22
          ]
        ],
        "brain/net/client.py": [
          [
            "class",
            "UseClientDefault",
            102
          ],
          [
            "class",
            "ClientState",
            133
          ],
          [
            "class",
            "BoundSyncStream",
            147
          ],
          [
            "class",
            "BoundAsyncStream",
            170
          ],
          [
            "class",
            "BaseClient",
            196
          ],
          [
            "class",
            "Client",
            602
          ],
          [
            "class",
            "AsyncClient",
            1315
          ],
          [
            "function",
            "close",
            164
          ],
          [
            "function",
            "is_closed",
            232
          ],
          [
            "function",
            "trust_env",
            239
          ],
          [
            "function",
            "timeout",
            262
          ],
          [
            "function",
            "timeout",
            266
          ],
          [
            "function",
            "event_hooks",
            270
          ],
          [
            "function",
            "event_hooks",
            274
          ],
          [
            "function",
            "auth",
            281
          ],
          [
            "function",
            "auth",
            292
          ],
          [
            "function",
            "base_url",
            296
          ],
          [
            "function",
            "base_url",
            303
          ],
          [
            "function",
            "headers",
            307
          ],
          [
            "function",
            "headers",
            314
          ],
          [
            "function",
            "cookies",
            327
          ],
          [
            "function",
            "cookies",
            334
          ],
          [
            "function",
            "params",
            338
          ],
          [
            "function",
            "params",
            345
          ],
          [
            "function",
            "build_request",
            348
          ],
          [
            "function",
            "request",
            779
          ],
          [
            "function",
            "stream",
            836
          ],
          [
            "function",
            "send",
            887
          ],
          [
            "function",
            "get",
            1044
          ],
          [
            "function",
            "options",
            1073
          ],
          [
            "function",
            "head",
            1102
          ],
          [
            "function",
            "post",
            1131
          ],
          [
            "function",
            "put",
            1168
          ],
          [
            "function",
            "patch",
            1205
          ],
          [
            "function",
            "delete",
            1242
          ],
          [
            "function",
            "close",
            1271
          ]
        ],
        "brain/net/async_client.py": [
          [
            "class",
            "AsyncInferenceClient",
            114
          ],
          [
            "class",
            "_ProxyClient",
            3618
          ],
          [
            "class",
            "ProxyClientChat",
            3625
          ],
          [
            "class",
            "ProxyClientChatCompletions",
            3633
          ],
          [
            "function",
            "chat",
            3614
          ],
          [
            "function",
            "completions",
            3629
          ],
          [
            "function",
            "create",
            3637
          ]
        ],
        "brain/context/context_sync.py": [
          [
            "function",
            "generate_daily_context",
            22
          ]
        ],
        "brain/core/azure_free_tier_strategy.py": [
          [
            "class",
            "AzureFreeStrategy",
            20
          ],
          [
            "function",
            "main",
            208
          ],
          [
            "function",
            "get_priority_services_for_agi",
            34
          ],
          [
            "function",
            "create_12_month_roadmap",
            70
          ],
          [
            "function",
            "calculate_cost_savings",
            123
          ],
          [
            "function",
            "get_deployment_priorities",
            148
          ],
          [
            "function",
            "show_optimization_tips",
            188
          ]
        ],
        "brain/core/response_types.py": [
          [
            "class",
            "AGIResponse",
            13
          ]
        ],
        "brain/core/types.py": [
          [
            "class",
            "PluginType",
            22
          ],
          [
            "class",
            "PluginTier",
            37
          ],
          [
            "class",
            "PluginState",
            46
          ],
          [
            "class",
            "PluginStatus",
            57
          ],
          [
            "class",
            "ConsciousnessState",
            68
          ],
          [
            "class",
            "ComplianceLevel",
            78
          ],
          [
            "class",
            "SymbolicMetadata",
            91
          ],
          [
            "class",
            "PluginCapabilities",
            113
          ],
          [
            "class",
            "PluginPricing",
            133
          ],
          [
            "class",
            "PluginDependencies",
            150
          ],
          [
            "class",
            "PluginSecurity",
            168
          ],
          [
            "class",
            "PluginManifest",
            190
          ],
          [
            "class",
            "LucasSystemState",
            255
          ],
          [
            "class",
            "UserSession",
            271
          ],
          [
            "class",
            "PluginContext",
            289
          ],
          [
            "class",
            "PluginExecutionContext",
            310
          ],
          [
            "class",
            "ValidationRule",
            327
          ],
          [
            "class",
            "PluginValidationSchema",
            337
          ],
          [
            "class",
            "PluginError",
            357
          ],
          [
            "class",
            "PluginLoadError",
            365
          ],
          [
            "class",
            "PluginValidationError",
            370
          ],
          [
            "class",
            "PluginExecutionError",
            375
          ],
          [
            "class",
            "PluginComplianceError",
            380
          ],
          [
            "class",
            "SymbolicTrace",
            388
          ],
          [
            "class",
            "ConsciousnessMapping",
            411
          ],
          [
            "class",
            "PluginMessage",
            427
          ],
          [
            "class",
            "PluginResponse",
            447
          ],
          [
            "class",
            "BaseLucasPlugin",
            463
          ],
          [
            "class",
            "LoadedPlugin",
            514
          ],
          [
            "function",
            "get_status",
            505
          ]
        ],
        "brain/core/capability_levels.py": [
          [
            "class",
            "AGICapabilityLevel",
            10
          ]
        ],
        "brain/core/azure_openai_client.py": [
          [
            "class",
            "LukhASAzureOpenAI",
            21
          ],
          [
            "function",
            "quick_test",
            145
          ],
          [
            "function",
            "main",
            171
          ],
          [
            "function",
            "test_connection",
            93
          ],
          [
            "function",
            "chat_completion",
            110
          ],
          [
            "function",
            "get_status",
            127
          ]
        ],
        "brain/core/orchestrator.py": [
          [
            "class",
            "SystemMode",
            57
          ],
          [
            "class",
            "ProcessingStage",
            66
          ],
          [
            "class",
            "AGIConfiguration",
            79
          ],
          [
            "class",
            "AgiBrainOrchestrator",
            113
          ],
          [
            "function",
            "get_system_health",
            615
          ],
          [
            "function",
            "get_orchestration_status",
            657
          ]
        ],
        "brain/access/tier_manager.py": [
          [
            "function",
            "upgrade_tier",
            37
          ],
          [
            "function",
            "downgrade_tier",
            45
          ],
          [
            "function",
            "get_tier_description",
            53
          ],
          [
            "function",
            "get_user_tier",
            59
          ],
          [
            "function",
            "is_access_allowed",
            72
          ],
          [
            "function",
            "log_access_attempt",
            75
          ],
          [
            "function",
            "get_tier_badge",
            87
          ],
          [
            "function",
            "generate_symbolic_id_summary",
            101
          ]
        ],
        "brain/spine/main_loop.py": [
          [
            "class",
            "Goal",
            13
          ],
          [
            "class",
            "GoalManager",
            23
          ],
          [
            "class",
            "AgentCommunicator",
            43
          ],
          [
            "class",
            "EthicalEvaluator",
            60
          ],
          [
            "class",
            "ReflectiveLearning",
            77
          ],
          [
            "class",
            "SelfReflection",
            92
          ],
          [
            "function",
            "goal_execution_loop",
            110
          ],
          [
            "function",
            "prompt_consent",
            161
          ],
          [
            "function",
            "timestamp",
            182
          ],
          [
            "function",
            "log_publish_queue",
            185
          ],
          [
            "function",
            "anonymize",
            190
          ],
          [
            "function",
            "log_feedback",
            194
          ],
          [
            "function",
            "prompt_emotion",
            201
          ],
          [
            "function",
            "prompt_feedback",
            209
          ],
          [
            "function",
            "prompt_dream_feedback",
            229
          ],
          [
            "function",
            "get_voice_params_for_emotion",
            241
          ],
          [
            "function",
            "elevenlabs_speak",
            253
          ],
          [
            "function",
            "speak_text",
            261
          ],
          [
            "function",
            "handle_talk",
            274
          ],
          [
            "function",
            "handle_dream",
            290
          ],
          [
            "function",
            "request_data_deletion",
            305
          ],
          [
            "function",
            "main",
            316
          ],
          [
            "function",
            "is_valid",
            17
          ],
          [
            "function",
            "execute",
            20
          ],
          [
            "function",
            "add_goal",
            27
          ],
          [
            "function",
            "prioritize_goals",
            30
          ],
          [
            "function",
            "execute_goals",
            33
          ],
          [
            "function",
            "add_agent",
            47
          ],
          [
            "function",
            "send_message",
            50
          ],
          [
            "function",
            "receive_message",
            53
          ],
          [
            "function",
            "add_rule",
            64
          ],
          [
            "function",
            "evaluate_action",
            67
          ],
          [
            "function",
            "add_interaction",
            81
          ],
          [
            "function",
            "evaluate_performance",
            84
          ],
          [
            "function",
            "add_log",
            96
          ],
          [
            "function",
            "analyze_logs",
            99
          ],
          [
            "class",
            "DummyRule",
            134
          ],
          [
            "function",
            "evaluate",
            135
          ]
        ],
        "brain/spine/emotion_trend_tracker.py": [
          [
            "function",
            "analyze_emotion_trends",
            11
          ]
        ],
        "brain/spine/self_reflect_cron.py": [
          [
            "function",
            "run_reflection",
            36
          ]
        ],
        "brain/spine/unified_self.py": [
          [
            "function",
            "save_report",
            31
          ],
          [
            "function",
            "load_all_traits",
            44
          ],
          [
            "function",
            "load_all_reflections",
            54
          ],
          [
            "function",
            "average_traits",
            64
          ],
          [
            "function",
            "synthesize_unified_self",
            75
          ],
          [
            "function",
            "save_snapshot",
            106
          ],
          [
            "function",
            "run",
            117
          ]
        ],
        "brain/spine/emotional_sorter.py": [
          [
            "function",
            "evaluate_emotional_state",
            24
          ]
        ],
        "brain/spine/emotion_log_alt.py": [
          [
            "function",
            "log_emotion",
            32
          ],
          [
            "function",
            "decay_emotion",
            61
          ],
          [
            "function",
            "save_emotion_log",
            79
          ],
          [
            "function",
            "load_emotion_log",
            88
          ],
          [
            "function",
            "blend_emotions",
            98
          ],
          [
            "function",
            "search_emotions",
            109
          ],
          [
            "function",
            "summarize_emotions",
            124
          ]
        ],
        "brain/spine/healix_mapper.py": [
          [
            "class",
            "HealixMapper",
            34
          ],
          [
            "function",
            "map_helix_from_memory",
            52
          ],
          [
            "function",
            "calculate_drift_score",
            83
          ],
          [
            "function",
            "find_resonant_memories",
            101
          ]
        ],
        "brain/spine/trait_manager.py": [
          [
            "function",
            "default_traits",
            17
          ],
          [
            "function",
            "load_traits",
            26
          ],
          [
            "function",
            "save_traits",
            32
          ],
          [
            "function",
            "reset_traits",
            36
          ],
          [
            "function",
            "decay_traits",
            40
          ],
          [
            "function",
            "adjust_traits_from_context",
            47
          ],
          [
            "function",
            "log_trait_shift",
            62
          ],
          [
            "function",
            "process_traits",
            72
          ],
          [
            "function",
            "emoji_trait_bar",
            80
          ]
        ],
        "brain/spine/fold_engine.py": [
          [
            "class",
            "MemoryType",
            29
          ],
          [
            "class",
            "MemoryPriority",
            41
          ],
          [
            "class",
            "MemoryFold",
            50
          ],
          [
            "class",
            "SymbolicPatternEngine",
            237
          ],
          [
            "class",
            "AGIMemory",
            340
          ],
          [
            "function",
            "retrieve",
            84
          ],
          [
            "function",
            "update",
            95
          ],
          [
            "function",
            "add_association",
            113
          ],
          [
            "function",
            "add_tag",
            129
          ],
          [
            "function",
            "matches_tag",
            145
          ],
          [
            "function",
            "to_dict",
            157
          ],
          [
            "function",
            "register_pattern",
            249
          ],
          [
            "function",
            "analyze_memory_fold",
            259
          ],
          [
            "function",
            "add_fold",
            358
          ],
          [
            "function",
            "get_fold",
            417
          ],
          [
            "function",
            "list_folds",
            429
          ],
          [
            "function",
            "remove_fold",
            438
          ],
          [
            "function",
            "associate_folds",
            458
          ],
          [
            "function",
            "get_associated_folds",
            491
          ],
          [
            "function",
            "tag_fold",
            506
          ],
          [
            "function",
            "get_folds_by_tag",
            532
          ],
          [
            "function",
            "get_folds_by_type",
            548
          ],
          [
            "function",
            "get_folds_by_priority",
            570
          ],
          [
            "function",
            "get_folds_by_owner",
            592
          ],
          [
            "function",
            "update_fold_content",
            607
          ],
          [
            "function",
            "update_fold_priority",
            624
          ],
          [
            "function",
            "get_important_folds",
            665
          ],
          [
            "function",
            "recalculate_importance",
            685
          ],
          [
            "function",
            "to_dict",
            690
          ]
        ],
        "brain/spine/emotion_intent_link.py": [
          [
            "function",
            "load_jsonl",
            18
          ],
          [
            "function",
            "crosslink_emotion_to_intent",
            24
          ]
        ],
        "brain/spine/accent_adapter.py": [
          [
            "class",
            "AccentAdapter",
            36
          ],
          [
            "function",
            "log_cultural_interaction",
            174
          ],
          [
            "function",
            "get_user_memory_chain",
            197
          ],
          [
            "function",
            "remember_location",
            205
          ],
          [
            "function",
            "generate_reminiscence",
            231
          ],
          [
            "function",
            "boost_memory",
            297
          ]
        ],
        "brain/spine/trait_sync.py": [
          [
            "function",
            "export_traits",
            47
          ],
          [
            "function",
            "load_all_traits",
            60
          ],
          [
            "function",
            "compare_traits",
            71
          ],
          [
            "function",
            "run",
            81
          ]
        ],
        "brain/spine/hash.py": [
          [
            "function",
            "get_manifest_hash",
            22
          ],
          [
            "function",
            "get_license_hash",
            30
          ],
          [
            "function",
            "get_symbolic_fingerprint",
            38
          ],
          [
            "function",
            "main",
            45
          ]
        ],
        "brain/spine/emotion_mapper.py": [
          [
            "class",
            "EmotionMapper",
            13
          ],
          [
            "function",
            "map_intent_to_emoji",
            37
          ],
          [
            "function",
            "map_ethics_to_emotion",
            41
          ]
        ],
        "brain/spine/guardian.py": [
          [
            "function",
            "guard_output",
            10
          ]
        ],
        "brain/spine/trait_sync_gpt_synb_ref.py": [
          [
            "function",
            "export_traits",
            29
          ],
          [
            "function",
            "load_all_traits",
            42
          ],
          [
            "function",
            "compare_traits",
            53
          ],
          [
            "function",
            "summarize_comparisons",
            63
          ],
          [
            "function",
            "generate_gpt_commentary",
            78
          ],
          [
            "function",
            "run",
            101
          ]
        ],
        "brain/spine/emotion_log.py": [
          [
            "function",
            "log_emotion",
            26
          ],
          [
            "function",
            "decay_emotion",
            47
          ],
          [
            "function",
            "save_emotion_log",
            62
          ],
          [
            "function",
            "load_emotion_log",
            70
          ]
        ],
        "brain/config/settings_editor.py": [
          [
            "function",
            "load_settings",
            20
          ],
          [
            "function",
            "save_settings",
            28
          ]
        ],
        "brain/config/paths.py": [
          [
            "function",
            "ensure_paths",
            39
          ],
          [
            "function",
            "get_path",
            50
          ]
        ],
        "brain/config/settings_loader.py": [
          [
            "function",
            "load_settings",
            19
          ],
          [
            "function",
            "get_setting",
            29
          ],
          [
            "function",
            "is_module_enabled",
            44
          ],
          [
            "function",
            "print_all_settings",
            47
          ],
          [
            "function",
            "validate_settings",
            50
          ],
          [
            "function",
            "log_setting_access",
            59
          ],
          [
            "function",
            "preview_defaults",
            67
          ],
          [
            "function",
            "list_all_keys",
            73
          ],
          [
            "function",
            "flatten",
            74
          ]
        ],
        "brain/integration/brain_integration.py": [
          [
            "class",
            "EnhancedEmotionalProcessor",
            84
          ],
          [
            "class",
            "EnhancedMemorySystem",
            188
          ],
          [
            "class",
            "EnhancedBrainIntegration",
            360
          ],
          [
            "function",
            "create_enhanced_brain_integration",
            663
          ],
          [
            "function",
            "update_emotional_state",
            110
          ],
          [
            "function",
            "get_voice_modulation_params",
            162
          ],
          [
            "function",
            "store_memory_with_emotion",
            208
          ],
          [
            "function",
            "retrieve_with_emotional_context",
            256
          ],
          [
            "function",
            "dream_consolidate_memories",
            300
          ],
          [
            "function",
            "speak_with_emotion",
            567
          ],
          [
            "function",
            "start_dream_consolidation",
            594
          ],
          [
            "function",
            "stop_dream_consolidation",
            626
          ],
          [
            "function",
            "get_comprehensive_status",
            633
          ],
          [
            "function",
            "consolidation_loop",
            602
          ]
        ],
        "brain/personality/personality_refiner.py": [
          [
            "class",
            "PersonalityRefiner",
            28
          ],
          [
            "function",
            "refine_with_feedback",
            49
          ],
          [
            "function",
            "get_trait",
            68
          ],
          [
            "function",
            "export_personality_vector",
            71
          ]
        ],
        "brain/personality/voice_personality.py": [
          [
            "class",
            "VoicePersonalityIntegrator",
            54
          ],
          [
            "function",
            "get_voice_modulation",
            197
          ],
          [
            "function",
            "adapt_to_interaction",
            249
          ]
        ],
        "brain/consciousness/dream_narrator.py": [
          [
            "class",
            "DreamPhase",
            25
          ],
          [
            "class",
            "DreamNarrationType",
            37
          ],
          [
            "class",
            "DreamElement",
            47
          ],
          [
            "class",
            "DreamSequence",
            59
          ],
          [
            "class",
            "DreamNarration",
            71
          ],
          [
            "class",
            "DreamNarrator",
            83
          ]
        ],
        "brain/consciousness/memory_identity.py": [
          [
            "class",
            "MemoryAccessPolicy",
            33
          ],
          [
            "class",
            "MemoryIdentityIntegration",
            43
          ],
          [
            "function",
            "register_memory",
            70
          ],
          [
            "function",
            "verify_access_permission",
            108
          ],
          [
            "function",
            "share_memory",
            172
          ],
          [
            "function",
            "revoke_memory_access",
            211
          ],
          [
            "function",
            "get_shared_memories",
            244
          ],
          [
            "function",
            "encrypt_memory_content",
            256
          ],
          [
            "function",
            "decrypt_memory_content",
            299
          ],
          [
            "function",
            "cleanup",
            379
          ],
          [
            "function",
            "notify_memory_removal",
            413
          ],
          [
            "function",
            "get_permission_status",
            443
          ]
        ],
        "brain/prediction/predictive_resource_manager.py": [
          [
            "class",
            "ResourceType",
            19
          ],
          [
            "class",
            "PredictionModel",
            28
          ],
          [
            "class",
            "PredictiveResourceManager",
            89
          ],
          [
            "function",
            "add_data_point",
            36
          ],
          [
            "function",
            "predict_next",
            46
          ],
          [
            "function",
            "update_resource_usage",
            162
          ],
          [
            "function",
            "predict_resource_needs",
            192
          ],
          [
            "function",
            "predict_all_resources",
            451
          ],
          [
            "function",
            "optimize_resource_allocation",
            481
          ],
          [
            "function",
            "get_prediction_statistics",
            656
          ],
          [
            "function",
            "analyze_resource_trends",
            678
          ]
        ],
        "brain/prediction/world_models.py": [
          [
            "class",
            "WorldModelType",
            30
          ],
          [
            "class",
            "SimulationAccuracy",
            39
          ],
          [
            "class",
            "WorldState",
            48
          ],
          [
            "class",
            "PredictionResult",
            60
          ],
          [
            "class",
            "PhysicsEngine",
            69
          ],
          [
            "class",
            "TemporalDynamicsModel",
            121
          ],
          [
            "class",
            "WorldModels",
            328
          ]
        ],
        "brain/unified_integration/adapters/awareness_adapter.py": [
          [
            "class",
            "AwarenessAdapter",
            18
          ],
          [
            "function",
            "handle_message",
            54
          ]
        ],
        "brain/unified_integration/adapters/bio_adapter.py": [
          [
            "class",
            "BioInspiredAdapter",
            19
          ],
          [
            "function",
            "handle_message",
            63
          ]
        ],
        "brain/unified_integration/adapters/dream_adapter.py": [
          [
            "class",
            "DreamEngineAdapter",
            18
          ],
          [
            "function",
            "handle_message",
            38
          ]
        ],
        "brain/unified_integration/adapters/voice_adapter.py": [
          [
            "class",
            "VoiceAdapter",
            18
          ],
          [
            "function",
            "handle_message",
            48
          ]
        ],
        "brain/unified_integration/adapters/legacy_adapter.py": [
          [
            "class",
            "LegacyComponentAdapter",
            26
          ],
          [
            "class",
            "LucasCoreAdapter",
            141
          ],
          [
            "class",
            "BrainIntegrationAdapter",
            164
          ],
          [
            "function",
            "adapt_legacy_message",
            53
          ],
          [
            "function",
            "register_legacy_handler",
            110
          ]
        ],
        "brain/unified_integration/adapters/cognitive_adapter.py": [
          [
            "class",
            "CognitiveAdapter",
            30
          ]
        ],
        "brain/unified_integration/adapters/oscillator_adapter.py": [
          [
            "class",
            "OscillatorAdapter",
            28
          ],
          [
            "function",
            "add_node",
            80
          ]
        ],
        "brain/unified_integration/adapters/intent_adapter.py": [
          [
            "class",
            "IntentNodeAdapter",
            28
          ]
        ],
        "brain/unified_integration/adapters/brain_adapter.py": [
          [
            "class",
            "BrainAdapter",
            18
          ],
          [
            "function",
            "handle_message",
            53
          ]
        ],
        "brain/abstract_reasoning/confidence_calibrator.py": [
          [
            "class",
            "UncertaintyType",
            21
          ],
          [
            "class",
            "ConfidenceMetrics",
            32
          ],
          [
            "class",
            "CalibrationRecord",
            46
          ],
          [
            "class",
            "BayesianConfidenceEstimator",
            58
          ],
          [
            "class",
            "QuantumConfidenceEstimator",
            174
          ],
          [
            "class",
            "SymbolicConfidenceEstimator",
            225
          ],
          [
            "class",
            "ContradictionDetector",
            292
          ],
          [
            "class",
            "EmotionalConfidenceEstimator",
            353
          ],
          [
            "class",
            "UncertaintyDecomposer",
            394
          ],
          [
            "class",
            "MetaLearningCalibrator",
            537
          ],
          [
            "class",
            "AdvancedConfidenceCalibrator",
            623
          ],
          [
            "function",
            "estimate_confidence",
            66
          ],
          [
            "function",
            "update_beliefs",
            154
          ],
          [
            "function",
            "estimate_confidence",
            181
          ],
          [
            "function",
            "estimate_confidence",
            232
          ],
          [
            "function",
            "find_contradictions",
            295
          ],
          [
            "function",
            "estimate_confidence",
            359
          ],
          [
            "function",
            "decompose_uncertainty",
            397
          ],
          [
            "function",
            "update_calibration",
            545
          ],
          [
            "function",
            "get_calibration_score",
            602
          ],
          [
            "function",
            "calibrate_confidence",
            646
          ],
          [
            "function",
            "update_from_outcome",
            753
          ],
          [
            "function",
            "get_calibration_summary",
            800
          ],
          [
            "function",
            "extract_strings",
            317
          ]
        ],
        "brain/abstract_reasoning/bio_quantum_engine.py": [
          [
            "class",
            "BrainSymphonyConfig",
            108
          ],
          [
            "class",
            "ReasoningPhase",
            121
          ],
          [
            "class",
            "BrainSymphony",
            132
          ],
          [
            "class",
            "BioQuantumSymbolicReasoner",
            420
          ],
          [
            "class",
            "OscillationSynchronizer",
            887
          ],
          [
            "class",
            "MockBrainCore",
            33
          ],
          [
            "class",
            "MockQuantumBridge",
            87
          ],
          [
            "class",
            "MockSynapticGate",
            91
          ],
          [
            "class",
            "MockOscillator",
            95
          ],
          [
            "function",
            "get_status",
            63
          ]
        ],
        "brain/abstract_reasoning/interface.py": [
          [
            "class",
            "AbstractReasoningBrainInterface",
            24
          ],
          [
            "function",
            "stop_radar_monitoring",
            465
          ],
          [
            "function",
            "export_radar_analytics",
            474
          ],
          [
            "function",
            "get_radar_performance_summary",
            496
          ],
          [
            "function",
            "configure_radar_analytics",
            527
          ]
        ],
        "brain/abstract_reasoning/oscillator.py": [
          [
            "class",
            "AbstractReasoningBrainOscillator",
            16
          ],
          [
            "function",
            "generate_rhythm",
            53
          ],
          [
            "function",
            "sync_with_master",
            93
          ],
          [
            "function",
            "get_synchronization_status",
            288
          ],
          [
            "function",
            "reset_synchronization",
            303
          ],
          [
            "function",
            "get_performance_metrics",
            369
          ]
        ],
        "brain/abstract_reasoning/core.py": [
          [
            "class",
            "AbstractReasoningBrainCore",
            64
          ],
          [
            "function",
            "get_brain_status",
            443
          ],
          [
            "class",
            "MockBrainCore",
            29
          ],
          [
            "function",
            "get_brain_status",
            52
          ]
        ],
        "brain/output/report_generator.py": [
          [
            "function",
            "load_previous_reflections",
            23
          ],
          [
            "function",
            "generate_report",
            29
          ]
        ],
        "brain/meta/compliance_engine_20250503213400.py": [
          [
            "class",
            "ComplianceEngine",
            17
          ],
          [
            "function",
            "anonymize_metadata",
            46
          ],
          [
            "function",
            "should_retain_data",
            77
          ],
          [
            "function",
            "check_voice_data_compliance",
            85
          ],
          [
            "function",
            "validate_content_against_ethical_constraints",
            139
          ],
          [
            "function",
            "generate_compliance_report",
            184
          ],
          [
            "function",
            "get_compliance_status",
            204
          ]
        ],
        "brain/meta/cognition/reflection_layer.py": [
          [
            "class",
            "ReflectionType",
            99
          ],
          [
            "class",
            "SymbolicMood",
            110
          ],
          [
            "class",
            "ReflectiveStatement",
            121
          ],
          [
            "class",
            "ConscienceSnapshot",
            135
          ],
          [
            "class",
            "ReflectionLayer",
            148
          ],
          [
            "function",
            "create_reflection_layer",
            913
          ],
          [
            "function",
            "reflect_on_drift_score",
            275
          ],
          [
            "function",
            "reflect_on_intent_deviation",
            327
          ],
          [
            "function",
            "reflect_on_emotional_state",
            368
          ],
          [
            "function",
            "contemplate_ethical_conflict",
            416
          ],
          [
            "function",
            "model_symbolic_future",
            459
          ],
          [
            "function",
            "synthesize_memory_insights",
            498
          ],
          [
            "function",
            "log_reflection",
            537
          ],
          [
            "function",
            "vocalize_conscience",
            563
          ],
          [
            "function",
            "trigger_dream_simulation",
            596
          ],
          [
            "function",
            "capture_consciousness_snapshot",
            632
          ],
          [
            "function",
            "process_reflection_cycle",
            674
          ],
          [
            "function",
            "get_reflection_history",
            819
          ],
          [
            "function",
            "get_consciousness_trend",
            824
          ],
          [
            "class",
            "SeverityLevel",
            92
          ]
        ],
        "brain/meta/cognition/orchestrator.py": [
          [
            "class",
            "MetaCognitiveOrchestrator",
            23
          ],
          [
            "function",
            "register_component",
            46
          ],
          [
            "function",
            "orchestrate",
            51
          ],
          [
            "function",
            "get_metacognitive_status",
            341
          ]
        ],
        "brain/meta/learning/system.py": [
          [
            "class",
            "FederatedModel",
            22
          ],
          [
            "class",
            "FederatedLearningManager",
            112
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            304
          ],
          [
            "class",
            "MetaLearningSystem",
            632
          ],
          [
            "function",
            "update_with_gradients",
            38
          ],
          [
            "function",
            "get_parameters",
            64
          ],
          [
            "function",
            "serialize",
            83
          ],
          [
            "function",
            "deserialize",
            97
          ],
          [
            "function",
            "register_model",
            129
          ],
          [
            "function",
            "get_model",
            149
          ],
          [
            "function",
            "contribute_gradients",
            169
          ],
          [
            "function",
            "save_model",
            252
          ],
          [
            "function",
            "load_models",
            263
          ],
          [
            "function",
            "get_client_status",
            277
          ],
          [
            "function",
            "log_interaction",
            324
          ],
          [
            "function",
            "reflect",
            348
          ],
          [
            "function",
            "get_status_report",
            602
          ],
          [
            "function",
            "optimize_learning_approach",
            684
          ],
          [
            "function",
            "incorporate_feedback",
            728
          ],
          [
            "function",
            "generate_learning_report",
            773
          ],
          [
            "function",
            "get_federated_model",
            799
          ],
          [
            "function",
            "trigger_reflection",
            812
          ]
        ],
        "brain/meta/integrations/bot_enhancement.py": [
          [
            "class",
            "EnhancementRequest",
            19
          ],
          [
            "class",
            "EnhancementResponse",
            33
          ],
          [
            "class",
            "BotEnhancementEngine",
            47
          ]
        ],
        "brain/self_improvement/meta_learner.py": [
          [
            "class",
            "MetaLearner",
            12
          ]
        ],
        "brain/qrl_code/qrly.py": [
          [
            "function",
            "map_emoji_archetypes",
            26
          ],
          [
            "function",
            "generate_glymph_backstory",
            42
          ],
          [
            "function",
            "generate_retro_image",
            65
          ],
          [
            "function",
            "encrypt_qrlymph",
            86
          ],
          [
            "function",
            "decrypt_qrlymph",
            91
          ],
          [
            "function",
            "embed_compliance_metadata",
            96
          ]
        ],
        "brain/qrl_code/com_validator.py": [
          [
            "function",
            "validate_compliance",
            8
          ]
        ],
        "brain/compliance/constitutional_ai.py": [
          [
            "class",
            "SafetyLevel",
            28
          ],
          [
            "class",
            "EthicalPrinciple",
            37
          ],
          [
            "class",
            "CapabilityRisk",
            49
          ],
          [
            "class",
            "ConstitutionalRule",
            58
          ],
          [
            "class",
            "SafetyAssessment",
            71
          ],
          [
            "class",
            "EthicalDecision",
            84
          ],
          [
            "class",
            "ConstitutionalFramework",
            97
          ],
          [
            "class",
            "SafetyMonitor",
            209
          ],
          [
            "class",
            "EthicalDecisionMaker",
            532
          ],
          [
            "class",
            "ConstitutionalAI",
            872
          ],
          [
            "function",
            "setup_core_constitution",
            108
          ],
          [
            "function",
            "add_constitutional_rule",
            177
          ],
          [
            "function",
            "get_applicable_rules",
            182
          ]
        ],
        "brain/compliance/ai_compliance_manager.py": [
          [
            "class",
            "ComplianceLevel",
            19
          ],
          [
            "class",
            "AIComplianceManager",
            27
          ],
          [
            "function",
            "get_transparency_report",
            416
          ]
        ],
        "brain/reasoning/symbolic_validator.py": [
          [
            "class",
            "ValidationSeverity",
            40
          ],
          [
            "class",
            "ValidationType",
            48
          ],
          [
            "class",
            "ValidationIssue",
            59
          ],
          [
            "class",
            "ValidationResult",
            73
          ],
          [
            "class",
            "BaseValidator",
            102
          ],
          [
            "class",
            "SymbolicIntegrationValidator",
            115
          ],
          [
            "class",
            "EthicsValidator",
            299
          ],
          [
            "class",
            "ComplianceValidator",
            465
          ],
          [
            "class",
            "SecurityValidator",
            599
          ],
          [
            "class",
            "ConsciousnessValidator",
            773
          ],
          [
            "class",
            "LucasSymbolicValidator",
            920
          ],
          [
            "function",
            "add_issue",
            85
          ],
          [
            "function",
            "get_issues_by_severity",
            93
          ],
          [
            "function",
            "get_issues_by_type",
            97
          ],
          [
            "function",
            "add_custom_validator",
            953
          ],
          [
            "function",
            "get_validation_report",
            1083
          ]
        ],
        "brain/symbolic_ai/orchestrator.py": [
          [
            "function",
            "run_symbolic_orchestration",
            14
          ]
        ],
        "brain/symbolic_ai/modules/intent_inference.py": [
          [
            "function",
            "infer_intent",
            11
          ]
        ],
        "brain/symbolic_ai/modules/dissonance_detector.py": [
          [
            "function",
            "detect_dissonance",
            9
          ]
        ],
        "brain/symbolic_ai/modules/dream_generator.py": [
          [
            "function",
            "generate_dream",
            24
          ]
        ],
        "brain/symbolic_ai/modules/episodic_recall.py": [
          [
            "function",
            "recall",
            11
          ]
        ],
        "brain/rem/dream_log.py": [
          [
            "function",
            "log_dream",
            23
          ]
        ],
        "brain/rem/generate_dream.py": [
          [
            "function",
            "generate_dream",
            40
          ],
          [
            "function",
            "main",
            63
          ]
        ],
        "brain/rem/lidar_emotion_interpreter.py": [
          [
            "function",
            "interpret_emotional_state",
            27
          ],
          [
            "function",
            "generate_collapse_hash",
            77
          ]
        ],
        "brain/rem/dream_stats.py": [
          [
            "function",
            "load_dreams",
            20
          ],
          [
            "function",
            "summarize_dreams",
            26
          ]
        ],
        "brain/rem/generate_dream_data.py": [
          [
            "function",
            "generate_dream",
            40
          ],
          [
            "function",
            "main",
            63
          ]
        ],
        "brain/rem/dream_processor_integrator.py": [
          [
            "class",
            "DreamProcessorIntegration",
            16
          ]
        ],
        "brain/rem/rem.py": [
          [
            "function",
            "run_rem_cycle",
            21
          ]
        ],
        "brain/symbolic_engine/semantic_reasoner.py": [
          [
            "class",
            "SymbolicReasoningEngine",
            16
          ],
          [
            "function",
            "reason",
            51
          ]
        ],
        "brain/symbolic_engine/symbolic_core.py": [
          [
            "class",
            "SymbolicWorld",
            15
          ],
          [
            "class",
            "Symbol",
            67
          ],
          [
            "class",
            "Relationship",
            100
          ],
          [
            "class",
            "SymbolicReasoner",
            115
          ],
          [
            "function",
            "create_symbol",
            23
          ],
          [
            "function",
            "link_symbols",
            29
          ],
          [
            "function",
            "get_related_symbols",
            45
          ],
          [
            "function",
            "add_temporal_chain",
            59
          ],
          [
            "function",
            "update_property",
            77
          ],
          [
            "function",
            "get_property",
            82
          ],
          [
            "function",
            "matches_pattern",
            86
          ],
          [
            "function",
            "is_bidirectional",
            111
          ],
          [
            "function",
            "add_inference_rule",
            122
          ],
          [
            "function",
            "reason",
            132
          ],
          [
            "function",
            "find_patterns",
            200
          ]
        ],
        "brain/symbolic_engine/pattern_recognition.py": [
          [
            "class",
            "UnifiedPatternRecognition",
            18
          ],
          [
            "function",
            "register_pattern",
            37
          ],
          [
            "function",
            "recognize_patterns",
            50
          ]
        ],
        "brain/neuro_symbolic/bridge.py": [
          [
            "class",
            "NeuralSymbolicBridge",
            13
          ]
        ],
        "brain/neuro_symbolic/hybrid_integration.py": [
          [
            "class",
            "NeuroSymbolicIntegrator",
            17
          ]
        ],
        "brain/neuro_symbolic/neural_processor.py": [
          [
            "class",
            "NeuralProcessor",
            18
          ],
          [
            "function",
            "process",
            62
          ],
          [
            "function",
            "train",
            159
          ]
        ],
        "brain/neuro_symbolic/neuro_symbolic_integration.py": [
          [
            "class",
            "NeuroSymbolicIntegration",
            18
          ],
          [
            "function",
            "integrate",
            36
          ],
          [
            "function",
            "register_integration_method",
            186
          ],
          [
            "function",
            "set_default_method",
            203
          ]
        ],
        "brain/neuro_symbolic/neuro_symbolic_engine.py": [
          [
            "class",
            "QuantumInspiredAttention",
            16
          ],
          [
            "class",
            "CausalReasoningModule",
            196
          ],
          [
            "class",
            "NeuroSymbolicEngine",
            424
          ],
          [
            "function",
            "attend",
            45
          ],
          [
            "function",
            "reason",
            208
          ]
        ],
        "brain/neuro_symbolic/governance/symbolic_action_protocol.py": [
          [
            "class",
            "SymbolicActionProtocol",
            28
          ],
          [
            "function",
            "evaluate_proposal",
            34
          ],
          [
            "function",
            "explain_action",
            61
          ]
        ],
        "brain/ethics/ethics_engine.py": [
          [
            "class",
            "EthicsEngine",
            20
          ],
          [
            "function",
            "evaluate_action",
            106
          ],
          [
            "function",
            "suggest_alternatives",
            665
          ],
          [
            "function",
            "increase_scrutiny_level",
            727
          ],
          [
            "function",
            "reset_scrutiny_level",
            737
          ],
          [
            "function",
            "incorporate_feedback",
            742
          ],
          [
            "function",
            "get_metrics",
            770
          ]
        ],
        "brain/ethics/ethical_hierarchy.py": [
          [
            "class",
            "EthicalPrinciple",
            19
          ],
          [
            "class",
            "ComplianceFramework",
            33
          ],
          [
            "class",
            "EthicalSeverity",
            43
          ],
          [
            "class",
            "EthicalHierarchy",
            51
          ],
          [
            "function",
            "adapt_weights",
            649
          ],
          [
            "function",
            "get_priority_weights",
            669
          ],
          [
            "function",
            "get_ethical_status",
            693
          ]
        ],
        "brain/ethics/ethics_guard.py": [
          [
            "class",
            "LegalComplianceAssistant",
            31
          ],
          [
            "function",
            "check_access",
            40
          ],
          [
            "function",
            "log_violation",
            51
          ],
          [
            "function",
            "check_cultural_context",
            76
          ]
        ],
        "brain/ethics/ethical_stop.py": [
          [
            "class",
            "EthicalProtestModule",
            8
          ],
          [
            "class",
            "ProtestEthicsValidator",
            45
          ],
          [
            "class",
            "LegalComplianceAssistant",
            62
          ],
          [
            "function",
            "plan_protest",
            15
          ],
          [
            "function",
            "validate",
            54
          ],
          [
            "function",
            "verify",
            67
          ]
        ],
        "brain/ethics/ethical_conflict_resolution.py": [
          [
            "function",
            "resolve_ethical_conflict",
            8
          ],
          [
            "function",
            "analyze_historical_impact",
            17
          ]
        ],
        "brain/seamless/experience_core.py": [
          [
            "class",
            "SeamlessExperience",
            11
          ]
        ],
        "brain/emotional/core.py": [
          [
            "class",
            "EmotionRequest",
            33
          ],
          [
            "class",
            "EmotionConfig",
            45
          ],
          [
            "class",
            "EmotionHealth",
            58
          ],
          [
            "class",
            "EmotionModule",
            88
          ],
          [
            "function",
            "to_symbol",
            40
          ],
          [
            "function",
            "get_vocabulary",
            120
          ]
        ],
        "brain/emotional/ethical_stop.py": [
          [
            "class",
            "EthicalProtestModule",
            11
          ],
          [
            "class",
            "ProtestEthicsValidator",
            48
          ],
          [
            "class",
            "LegalComplianceAssistant",
            65
          ],
          [
            "function",
            "plan_protest",
            18
          ],
          [
            "function",
            "validate",
            57
          ],
          [
            "function",
            "verify",
            70
          ]
        ],
        "brain/emotional/ethical_conflict_resolution.py": [
          [
            "function",
            "resolve_ethical_conflict",
            19
          ],
          [
            "function",
            "analyze_historical_impact",
            28
          ]
        ],
        "brain/orchestration/the_oscillator.py": [
          [
            "class",
            "GlobalComplianceFramework",
            16
          ],
          [
            "class",
            "EthicalHierarchy",
            125
          ],
          [
            "class",
            "QuantumEthicalHandler",
            161
          ],
          [
            "class",
            "LegalComplianceLayer",
            229
          ],
          [
            "class",
            "LucasAGI",
            257
          ],
          [
            "function",
            "fetch_live_compliance_updates",
            75
          ],
          [
            "function",
            "compliance_score",
            80
          ],
          [
            "function",
            "check_compliance",
            87
          ],
          [
            "function",
            "log_violation",
            101
          ],
          [
            "function",
            "activate_safeguards",
            107
          ],
          [
            "function",
            "recalibrate_safeguards",
            114
          ],
          [
            "function",
            "initiate_emergency_shutdown",
            119
          ],
          [
            "function",
            "adapt_weights",
            142
          ],
          [
            "function",
            "get_priority_weights",
            155
          ],
          [
            "function",
            "create_ethical_circuit",
            169
          ],
          [
            "function",
            "measure_ethical_state",
            193
          ],
          [
            "function",
            "explain_decision",
            207
          ],
          [
            "function",
            "fallback_protocol",
            213
          ],
          [
            "function",
            "symbolic_fallback_ethics",
            218
          ],
          [
            "function",
            "human_review_required",
            225
          ],
          [
            "function",
            "validate_operation",
            238
          ],
          [
            "function",
            "check_transparency",
            245
          ],
          [
            "function",
            "check_data_protection",
            249
          ],
          [
            "function",
            "check_bias",
            253
          ],
          [
            "function",
            "play_sound",
            287
          ],
          [
            "function",
            "process_decision",
            314
          ],
          [
            "function",
            "recalibrate_autonomy",
            339
          ],
          [
            "function",
            "compute_system_health_factor",
            355
          ],
          [
            "function",
            "compute_context_entropy",
            359
          ],
          [
            "function",
            "adaptive_context_simplification",
            364
          ],
          [
            "function",
            "monitor_post_market",
            459
          ],
          [
            "function",
            "check_adversarial_input",
            467
          ],
          [
            "function",
            "assess_stakeholder_impact",
            473
          ],
          [
            "function",
            "modulate_emotional_state",
            482
          ]
        ],
        "brain/orchestration/core.py": [
          [
            "class",
            "OrchestrationCore",
            71
          ],
          [
            "function",
            "get_system_status",
            322
          ]
        ],
        "brain/orchestration/main_node.py": [
          [
            "class",
            "AdaptiveAGISystem",
            51
          ],
          [
            "function",
            "init_components",
            77
          ],
          [
            "function",
            "register_event_handlers",
            93
          ]
        ],
        "brain/orchestration/orchestrator_core.py": [
          [
            "function",
            "lukhas_narrate",
            33
          ],
          [
            "class",
            "OrchestratorCore",
            36
          ],
          [
            "class",
            "ZKProofStub",
            71
          ],
          [
            "function",
            "simulate_trust_flow",
            45
          ],
          [
            "function",
            "verify",
            74
          ]
        ],
        "brain/orchestration/orchestrator.py": [
          [
            "class",
            "OrchestrationMode",
            27
          ],
          [
            "class",
            "ProcessingLevel",
            35
          ],
          [
            "class",
            "LukhasTier",
            43
          ],
          [
            "class",
            "ConsciousnessState",
            53
          ],
          [
            "class",
            "TierCapabilities",
            63
          ],
          [
            "class",
            "OrchestrationMetrics",
            142
          ],
          [
            "class",
            "LukhasOrchestrator",
            154
          ],
          [
            "function",
            "get_capabilities",
            124
          ],
          [
            "function",
            "has_feature",
            129
          ],
          [
            "function",
            "get_consciousness_state",
            135
          ],
          [
            "function",
            "validate_tier_access",
            342
          ],
          [
            "function",
            "check_rate_limits",
            346
          ],
          [
            "function",
            "get_tier_info",
            370
          ],
          [
            "function",
            "get_status",
            627
          ]
        ],
        "brain/orchestration/emotional_oscillator.py": [
          [
            "class",
            "EmotionalOscillator",
            26
          ],
          [
            "function",
            "oscillator_scope",
            83
          ],
          [
            "function",
            "modulate_emotion",
            45
          ],
          [
            "function",
            "adjust_parameters",
            59
          ]
        ],
        "brain/governance/dao_governance_node.py": [
          [
            "class",
            "ProposalType",
            20
          ],
          [
            "class",
            "ProposalStatus",
            29
          ],
          [
            "class",
            "DAOGovernanceNode",
            37
          ],
          [
            "function",
            "get_proposal",
            173
          ],
          [
            "function",
            "get_governance_status",
            489
          ]
        ],
        "brain/dna/dna_link.py": [
          [
            "class",
            "LucasDNALink",
            27
          ],
          [
            "function",
            "generate_reflection",
            31
          ],
          [
            "function",
            "translate",
            43
          ],
          [
            "function",
            "generate_opinion",
            55
          ],
          [
            "function",
            "learn_term_loop",
            67
          ],
          [
            "function",
            "generate_email_draft",
            119
          ],
          [
            "function",
            "generate_social_post",
            151
          ],
          [
            "function",
            "generate_text_message",
            171
          ],
          [
            "function",
            "reword_draft",
            191
          ]
        ],
        "brain/monitoring/guardian_reflector.py": [
          [
            "class",
            "EthicalFramework",
            53
          ],
          [
            "class",
            "MoralSeverity",
            61
          ],
          [
            "class",
            "EthicalReflection",
            70
          ],
          [
            "class",
            "MoralDrift",
            83
          ],
          [
            "class",
            "GuardianReflector",
            91
          ],
          [
            "function",
            "create_plugin",
            658
          ],
          [
            "function",
            "get_status",
            641
          ]
        ],
        "brain/monitoring/performance.py": [
          [
            "class",
            "PerformanceMetrics",
            28
          ],
          [
            "class",
            "FunctionProfile",
            58
          ],
          [
            "class",
            "SystemMonitor",
            90
          ],
          [
            "class",
            "FunctionProfiler",
            220
          ],
          [
            "class",
            "MemoryProfiler",
            298
          ],
          [
            "class",
            "CacheManager",
            362
          ],
          [
            "class",
            "ThreadPoolManager",
            468
          ],
          [
            "class",
            "AsyncTaskManager",
            501
          ],
          [
            "function",
            "timed",
            563
          ],
          [
            "function",
            "memory_limit",
            579
          ],
          [
            "function",
            "performance_context",
            607
          ],
          [
            "function",
            "get_system_info",
            634
          ],
          [
            "function",
            "optimize_gc",
            647
          ],
          [
            "function",
            "profile_function",
            658
          ],
          [
            "function",
            "profile_async_function",
            663
          ],
          [
            "function",
            "to_dict",
            41
          ],
          [
            "function",
            "add_call",
            68
          ],
          [
            "function",
            "to_dict",
            77
          ],
          [
            "function",
            "start_monitoring",
            101
          ],
          [
            "function",
            "stop_monitoring",
            110
          ],
          [
            "function",
            "get_current_metrics",
            127
          ],
          [
            "function",
            "get_metrics_history",
            177
          ],
          [
            "function",
            "get_average_metrics",
            181
          ],
          [
            "function",
            "enable",
            227
          ],
          [
            "function",
            "disable",
            231
          ],
          [
            "function",
            "profile",
            235
          ],
          [
            "function",
            "profile_async",
            259
          ],
          [
            "function",
            "get_profiles",
            283
          ],
          [
            "function",
            "get_top_functions",
            287
          ],
          [
            "function",
            "clear_profiles",
            293
          ],
          [
            "function",
            "start",
            305
          ],
          [
            "function",
            "stop",
            311
          ],
          [
            "function",
            "take_snapshot",
            317
          ],
          [
            "function",
            "get_top_stats",
            325
          ],
          [
            "function",
            "compare_snapshots",
            342
          ],
          [
            "function",
            "get",
            372
          ],
          [
            "function",
            "set",
            398
          ],
          [
            "function",
            "delete",
            423
          ],
          [
            "function",
            "clear",
            435
          ],
          [
            "function",
            "cleanup_expired",
            441
          ],
          [
            "function",
            "get_stats",
            457
          ],
          [
            "function",
            "get_executor",
            476
          ],
          [
            "function",
            "submit",
            484
          ],
          [
            "function",
            "map",
            489
          ],
          [
            "function",
            "shutdown",
            494
          ],
          [
            "function",
            "wrapper",
            566
          ],
          [
            "function",
            "decorator",
            581
          ],
          [
            "function",
            "wrapper",
            240
          ],
          [
            "function",
            "wrapper",
            583
          ]
        ],
        "brain/meta_cognitive/reflective_introspection_system.py": [
          [
            "class",
            "ReflectiveIntrospectionSystem",
            18
          ],
          [
            "function",
            "log_interaction",
            41
          ],
          [
            "function",
            "reflect",
            65
          ],
          [
            "function",
            "get_status_report",
            304
          ],
          [
            "function",
            "analyze_system_performance",
            333
          ],
          [
            "function",
            "identify_bottlenecks",
            349
          ],
          [
            "function",
            "apply_architectural_adaptations",
            385
          ]
        ],
        "brain/dream_engine/visualizer_core.py": [
          [
            "function",
            "load_latest_flashback",
            19
          ],
          [
            "function",
            "build_visual_prompt",
            27
          ]
        ],
        "brain/dream_engine/dream_replay_cli.py": [
          [
            "function",
            "run_cli",
            27
          ]
        ],
        "brain/dream_engine/cli/dream_processor.py": [
          [
            "class",
            "DreamProcessor",
            12
          ]
        ],
        "brain/dream_engine/cli/replay.py": [
          [
            "function",
            "run_cli",
            27
          ]
        ],
        "brain/dream_engine/cli/dream_cli.py": [
          [
            "function",
            "run_narrator_queue",
            16
          ],
          [
            "function",
            "run_voice_narrator",
            20
          ],
          [
            "function",
            "inject_test_dream",
            24
          ],
          [
            "function",
            "run_all",
            28
          ],
          [
            "function",
            "main",
            33
          ]
        ],
        "brain/data/consent_manager.py": [
          [
            "class",
            "ConsentTierManager",
            10
          ],
          [
            "function",
            "load",
            16
          ]
        ],
        "brain/neural/neural_intelligence_api.py": [
          [
            "class",
            "IntelligenceRequest",
            39
          ],
          [
            "class",
            "IntelligenceResponse",
            48
          ],
          [
            "class",
            "SystemStatus",
            58
          ]
        ],
        "brain/neural/neural_intelligence_main.py": [
          [
            "class",
            "LukhasNeuralIntelligence",
            27
          ],
          [
            "function",
            "get_system_status",
            73
          ],
          [
            "function",
            "get_innovations_status",
            77
          ]
        ],
        "brain/neural/cognitive_core.py": [
          [
            "class",
            "NeuralIntelligenceSystem",
            86
          ],
          [
            "function",
            "get_system_status",
            439
          ],
          [
            "function",
            "get_lukhas_innovations_status",
            476
          ]
        ],
        "user_feedback/symbolic_tuner.py": [
          [
            "function",
            "apply_feedback_adjustments",
            18
          ]
        ],
        "user_feedback/feedback_collector.py": [
          [
            "function",
            "collect_feedback",
            23
          ],
          [
            "function",
            "store_feedback",
            35
          ]
        ],
        "core_modules/system_orchestrator.py": [
          [
            "class",
            "SystemOrchestrator",
            16
          ],
          [
            "function",
            "create_orchestration_component",
            220
          ],
          [
            "function",
            "get_status",
            186
          ]
        ],
        "core_modules/orchestrator_core_oxn.py": [
          [
            "function",
            "lukhas_narrate",
            27
          ],
          [
            "class",
            "OrchestratorCore",
            30
          ],
          [
            "class",
            "ZKProofStub",
            65
          ],
          [
            "function",
            "simulate_trust_flow",
            39
          ],
          [
            "function",
            "verify",
            68
          ]
        ],
        "core_modules/signals.py": [
          [
            "class",
            "SignalType",
            9
          ],
          [
            "class",
            "DiagnosticSignalType",
            23
          ],
          [
            "class",
            "SymbolicSignal",
            33
          ]
        ],
        "core_modules/plugin_loader.py": [
          [
            "function",
            "load_plugins",
            9
          ]
        ],
        "core_modules/controller.py": [
          [
            "class",
            "ComplianceContext",
            101
          ],
          [
            "class",
            "PrivacyControls",
            114
          ],
          [
            "class",
            "AGIState",
            124
          ],
          [
            "class",
            "AGIRequest",
            135
          ],
          [
            "class",
            "AGIResponse",
            153
          ],
          [
            "class",
            "AGISession",
            172
          ],
          [
            "class",
            "InteractionMode",
            189
          ],
          [
            "class",
            "AGIController",
            196
          ]
        ],
        "core_modules/unified_orchestrator.py": [
          [
            "class",
            "OrchestratorMode",
            20
          ],
          [
            "class",
            "OrchestratorConfig",
            29
          ],
          [
            "class",
            "UnifiedOrchestrator",
            39
          ],
          [
            "function",
            "get_unified_orchestrator",
            388
          ],
          [
            "function",
            "register_command_handler",
            228
          ],
          [
            "function",
            "get_status",
            357
          ]
        ],
        "core_modules/workflow_engine.py": [
          [
            "class",
            "WorkflowEngine",
            13
          ],
          [
            "function",
            "create_orchestration_component",
            155
          ],
          [
            "function",
            "create_orchestration_component",
            162
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "core_modules/master_orchestrator_alt.py": [
          [
            "class",
            "MasterMultiBrainOrchestrator",
            14
          ],
          [
            "function",
            "get_symphony_status",
            95
          ]
        ],
        "core_modules/symbolic_signal_router.py": [
          [
            "function",
            "route_signal",
            15
          ]
        ],
        "core_modules/orchestration_alt.py": [
          [
            "class",
            "TestModularIntelligenceOrchestrator",
            5
          ],
          [
            "function",
            "setUp",
            7
          ],
          [
            "function",
            "test_register_module",
            10
          ],
          [
            "function",
            "test_process_adaptive_request",
            22
          ],
          [
            "class",
            "MockModule",
            11
          ],
          [
            "class",
            "MockModule",
            23
          ]
        ],
        "core_modules/master_orchestrator.py": [
          [
            "class",
            "WebsiteIntelligence",
            76
          ],
          [
            "class",
            "UnifiedSession",
            90
          ],
          [
            "class",
            "EcosystemStatus",
            104
          ],
          [
            "class",
            "EcosystemDomain",
            115
          ],
          [
            "class",
            "LukhASMasterOrchestrator",
            129
          ]
        ],
        "core_modules/orchestration_service.py": [
          [
            "class",
            "OrchestrationService",
            72
          ],
          [
            "function",
            "coordinate_modules",
            1271
          ],
          [
            "function",
            "execute_workflow",
            1277
          ],
          [
            "function",
            "get_system_status",
            1282
          ],
          [
            "function",
            "coordinate_modules",
            138
          ],
          [
            "function",
            "execute_workflow",
            191
          ],
          [
            "function",
            "manage_resources",
            253
          ],
          [
            "function",
            "route_event",
            306
          ],
          [
            "function",
            "get_message_bus_stats",
            594
          ],
          [
            "function",
            "get_system_status",
            635
          ],
          [
            "class",
            "IdentityClient",
            63
          ],
          [
            "function",
            "verify_user_access",
            64
          ],
          [
            "function",
            "check_consent",
            66
          ],
          [
            "function",
            "log_activity",
            68
          ]
        ],
        "core_modules/orchestrator_core.py": [
          [
            "class",
            "SystemSnapshot",
            29
          ],
          [
            "class",
            "LukhasOrchestrator",
            39
          ]
        ],
        "core_modules/process_orchestrator.py": [
          [
            "class",
            "ProcessOrchestrator",
            14
          ],
          [
            "function",
            "create_orchestration_component",
            155
          ],
          [
            "function",
            "get_status",
            138
          ]
        ],
        "core_modules/symbolic_handshake.py": [
          [
            "class",
            "SymbolicHandshake",
            20
          ],
          [
            "function",
            "register_module",
            66
          ],
          [
            "function",
            "create_signal",
            84
          ],
          [
            "function",
            "validate_handshake",
            114
          ],
          [
            "function",
            "get_signal_history",
            143
          ],
          [
            "function",
            "get_emotion_state_history",
            159
          ]
        ],
        "core_modules/signal_middleware.py": [
          [
            "class",
            "SignalMiddleware",
            23
          ]
        ],
        "core_modules/core_integrator.py": [
          [
            "class",
            "AccessTier",
            43
          ],
          [
            "class",
            "CoreMessageType",
            53
          ],
          [
            "function",
            "lukhas_tier_required",
            67
          ],
          [
            "class",
            "LucasCoreIntegrator",
            80
          ],
          [
            "function",
            "decorator",
            69
          ],
          [
            "function",
            "register_component",
            198
          ],
          [
            "function",
            "register_message_handler",
            238
          ],
          [
            "function",
            "subscribe_to_events",
            254
          ],
          [
            "function",
            "send_message",
            279
          ],
          [
            "function",
            "broadcast_event",
            346
          ],
          [
            "function",
            "initialize_awareness_protocol",
            388
          ],
          [
            "function",
            "process_awareness_alert",
            442
          ],
          [
            "function",
            "get_component_status",
            527
          ],
          [
            "function",
            "get_system_status",
            543
          ],
          [
            "function",
            "wrapper",
            70
          ]
        ],
        "monitoring/the_oscillator.py": [
          [
            "class",
            "GlobalComplianceFramework",
            16
          ],
          [
            "class",
            "EthicalHierarchy",
            125
          ],
          [
            "class",
            "QuantumEthicalHandler",
            161
          ],
          [
            "class",
            "LegalComplianceLayer",
            229
          ],
          [
            "class",
            "LucasAGI",
            257
          ],
          [
            "function",
            "fetch_live_compliance_updates",
            75
          ],
          [
            "function",
            "compliance_score",
            80
          ],
          [
            "function",
            "check_compliance",
            87
          ],
          [
            "function",
            "log_violation",
            101
          ],
          [
            "function",
            "activate_safeguards",
            107
          ],
          [
            "function",
            "recalibrate_safeguards",
            114
          ],
          [
            "function",
            "initiate_emergency_shutdown",
            119
          ],
          [
            "function",
            "adapt_weights",
            142
          ],
          [
            "function",
            "get_priority_weights",
            155
          ],
          [
            "function",
            "create_ethical_circuit",
            169
          ],
          [
            "function",
            "measure_ethical_state",
            193
          ],
          [
            "function",
            "explain_decision",
            207
          ],
          [
            "function",
            "fallback_protocol",
            213
          ],
          [
            "function",
            "symbolic_fallback_ethics",
            218
          ],
          [
            "function",
            "human_review_required",
            225
          ],
          [
            "function",
            "validate_operation",
            238
          ],
          [
            "function",
            "check_transparency",
            245
          ],
          [
            "function",
            "check_data_protection",
            249
          ],
          [
            "function",
            "check_bias",
            253
          ],
          [
            "function",
            "play_sound",
            287
          ],
          [
            "function",
            "process_decision",
            314
          ],
          [
            "function",
            "recalibrate_autonomy",
            339
          ],
          [
            "function",
            "compute_system_health_factor",
            355
          ],
          [
            "function",
            "compute_context_entropy",
            359
          ],
          [
            "function",
            "adaptive_context_simplification",
            364
          ],
          [
            "function",
            "monitor_post_market",
            459
          ],
          [
            "function",
            "check_adversarial_input",
            467
          ],
          [
            "function",
            "assess_stakeholder_impact",
            473
          ],
          [
            "function",
            "modulate_emotional_state",
            482
          ]
        ],
        "monitoring/remediator_agent.py": [
          [
            "class",
            "RemediationType",
            39
          ],
          [
            "class",
            "SubAgentStatus",
            48
          ],
          [
            "class",
            "RemediatorAgent",
            56
          ],
          [
            "function",
            "detect_and_remediate",
            83
          ],
          [
            "function",
            "spawn_ethics_guardian",
            157
          ],
          [
            "function",
            "spawn_memory_cleaner",
            169
          ],
          [
            "function",
            "get_agent_status",
            181
          ],
          [
            "function",
            "get_active_sessions",
            185
          ],
          [
            "function",
            "get_remediation_history",
            189
          ]
        ],
        "monitoring/reflection_layer.py": [
          [
            "class",
            "ReflectionType",
            111
          ],
          [
            "class",
            "SymbolicMood",
            122
          ],
          [
            "class",
            "ReflectiveStatement",
            134
          ],
          [
            "class",
            "ConscienceSnapshot",
            150
          ],
          [
            "class",
            "ReflectionLayer",
            165
          ],
          [
            "function",
            "create_reflection_layer",
            1310
          ],
          [
            "function",
            "reflect_on_drift_score",
            293
          ],
          [
            "function",
            "reflect_on_intent_deviation",
            338
          ],
          [
            "function",
            "reflect_on_emotional_state",
            380
          ],
          [
            "function",
            "contemplate_ethical_conflict",
            422
          ],
          [
            "function",
            "model_symbolic_future",
            463
          ],
          [
            "function",
            "synthesize_memory_insights",
            499
          ],
          [
            "function",
            "log_reflection",
            535
          ],
          [
            "function",
            "vocalize_conscience",
            561
          ],
          [
            "function",
            "capture_consciousness_snapshot",
            699
          ],
          [
            "function",
            "get_reflection_history",
            887
          ],
          [
            "function",
            "get_consciousness_trend",
            895
          ],
          [
            "class",
            "SeverityLevel",
            103
          ],
          [
            "function",
            "get_trend_direction",
            912
          ]
        ],
        "monitoring/health_checks.py": [
          [
            "class",
            "HealthStatus",
            18
          ],
          [
            "class",
            "ComponentHealth",
            27
          ],
          [
            "class",
            "HealthCheck",
            62
          ],
          [
            "class",
            "HealthChecker",
            194
          ],
          [
            "function",
            "create_orchestrator_health_checks",
            413
          ],
          [
            "function",
            "get_health_checker",
            502
          ],
          [
            "function",
            "to_dict",
            37
          ],
          [
            "function",
            "from_dict",
            50
          ],
          [
            "function",
            "should_run",
            186
          ],
          [
            "function",
            "register_check",
            204
          ],
          [
            "function",
            "unregister_check",
            222
          ],
          [
            "function",
            "get_overall_health",
            326
          ],
          [
            "function",
            "get_component_health",
            392
          ],
          [
            "function",
            "get_all_health_status",
            396
          ],
          [
            "function",
            "export_health_report",
            400
          ],
          [
            "function",
            "memory_check",
            417
          ],
          [
            "function",
            "cpu_check",
            442
          ],
          [
            "function",
            "disk_check",
            466
          ]
        ],
        "monitoring/emotional_oscillator.py": [
          [
            "class",
            "EmotionalOscillator",
            26
          ],
          [
            "function",
            "oscillator_scope",
            83
          ],
          [
            "function",
            "modulate_emotion",
            45
          ],
          [
            "function",
            "adjust_parameters",
            59
          ]
        ],
        "monitoring/sub_agents/memory_cleaner.py": [
          [
            "class",
            "MemoryCleaner",
            39
          ],
          [
            "function",
            "analyze_memory_fragmentation",
            62
          ],
          [
            "function",
            "perform_cleanup",
            134
          ],
          [
            "function",
            "consolidate_dream_sequences",
            212
          ]
        ],
        "monitoring/sub_agents/ethics_guardian.py": [
          [
            "class",
            "EthicsGuardian",
            43
          ],
          [
            "function",
            "assess_ethical_violation",
            87
          ],
          [
            "function",
            "propose_realignment",
            124
          ],
          [
            "function",
            "get_operation_summary",
            164
          ]
        ],
        "dream/dream_hub.py": [
          [
            "class",
            "DreamHub",
            13
          ],
          [
            "function",
            "get_dream_hub",
            144
          ],
          [
            "function",
            "register_service",
            76
          ],
          [
            "function",
            "get_service",
            81
          ],
          [
            "function",
            "register_event_handler",
            85
          ]
        ],
        "interfaces/orchestration_protocol.py": [
          [
            "class",
            "MessageType",
            23
          ],
          [
            "class",
            "Priority",
            55
          ],
          [
            "class",
            "TaskDefinition",
            70
          ],
          [
            "class",
            "TaskResult",
            104
          ],
          [
            "class",
            "OrchestrationMessage",
            128
          ],
          [
            "class",
            "OrchestrationProtocol",
            165
          ],
          [
            "class",
            "MessageBuilder",
            435
          ],
          [
            "function",
            "to_dict",
            85
          ],
          [
            "function",
            "to_dict",
            114
          ],
          [
            "function",
            "to_dict",
            142
          ],
          [
            "function",
            "is_expired",
            158
          ],
          [
            "function",
            "register_handler",
            193
          ],
          [
            "function",
            "start",
            412
          ],
          [
            "function",
            "stop",
            416
          ],
          [
            "function",
            "get_statistics",
            426
          ],
          [
            "function",
            "command",
            439
          ],
          [
            "function",
            "task_assign",
            454
          ],
          [
            "function",
            "task_complete",
            464
          ],
          [
            "function",
            "error",
            473
          ],
          [
            "function",
            "heartbeat",
            488
          ]
        ],
        "interfaces/plugin_registry.py": [
          [
            "class",
            "PluginType",
            28
          ],
          [
            "class",
            "PluginStatus",
            38
          ],
          [
            "class",
            "PluginDependency",
            52
          ],
          [
            "class",
            "PluginMetadata",
            65
          ],
          [
            "class",
            "PluginInterface",
            94
          ],
          [
            "class",
            "PluginRegistry",
            146
          ],
          [
            "class",
            "ExamplePlugin",
            614
          ],
          [
            "function",
            "to_dict",
            78
          ],
          [
            "function",
            "get_status",
            137
          ],
          [
            "function",
            "get_metadata",
            141
          ],
          [
            "function",
            "discover_plugins",
            172
          ],
          [
            "function",
            "register_signal_handler",
            466
          ],
          [
            "function",
            "get_plugin",
            520
          ],
          [
            "function",
            "list_plugins",
            524
          ],
          [
            "function",
            "save_registry_state",
            571
          ],
          [
            "class",
            "FunctionPlugin",
            362
          ]
        ],
        "interfaces/agent_interface.py": [
          [
            "class",
            "AgentStatus",
            24
          ],
          [
            "class",
            "AgentCapability",
            36
          ],
          [
            "class",
            "AgentMetadata",
            62
          ],
          [
            "class",
            "AgentMessage",
            77
          ],
          [
            "class",
            "AgentContext",
            91
          ],
          [
            "class",
            "AgentInterface",
            102
          ],
          [
            "class",
            "SimpleAgent",
            301
          ],
          [
            "function",
            "register_capability",
            186
          ],
          [
            "function",
            "register_message_handler",
            194
          ],
          [
            "function",
            "add_lifecycle_hook",
            199
          ],
          [
            "function",
            "update_status",
            254
          ],
          [
            "function",
            "has_capability",
            260
          ],
          [
            "function",
            "get_metadata_dict",
            285
          ]
        ]
      }
    },
    {
      "system": "bio",
      "entity_count": 255,
      "class_count": 90,
      "function_count": 165,
      "files": 43,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/bio_activation.py",
      "entities_by_file": {
        "endocrine_integration.py": [
          [
            "class",
            "HormoneModulation",
            56
          ],
          [
            "class",
            "EndocrineIntegration",
            64
          ],
          [
            "function",
            "get_modulation_factor",
            247
          ],
          [
            "function",
            "get_system_recommendations",
            272
          ],
          [
            "function",
            "inject_system_feedback",
            312
          ],
          [
            "function",
            "get_daily_rhythm_phase",
            338
          ]
        ],
        "bio_utilities.py": [
          [
            "function",
            "weight_modulator",
            11
          ],
          [
            "function",
            "weight_modulator",
            27
          ],
          [
            "function",
            "weight_modulator",
            43
          ],
          [
            "function",
            "fatigue_level",
            59
          ],
          [
            "function",
            "inject_narrative_repair",
            63
          ],
          [
            "function",
            "weight_modulator",
            71
          ],
          [
            "class",
            "StressSignal",
            87
          ],
          [
            "class",
            "CuriositySpark",
            96
          ],
          [
            "class",
            "ResilienceBoost",
            105
          ],
          [
            "class",
            "ProteinSynthesizer",
            114
          ],
          [
            "class",
            "StabilityAnchor",
            126
          ]
        ],
        "stress_signal.py": [
          [
            "class",
            "StressSignal",
            18
          ],
          [
            "function",
            "weight_modulator",
            26
          ]
        ],
        "curiosity_spark.py": [
          [
            "class",
            "CuriositySpark",
            18
          ],
          [
            "function",
            "weight_modulator",
            26
          ]
        ],
        "trust_binder.py": [
          [
            "class",
            "TrustBinder",
            53
          ],
          [
            "function",
            "process_affect",
            62
          ]
        ],
        "resilience_boost.py": [
          [
            "class",
            "ResilienceBoost",
            18
          ],
          [
            "function",
            "weight_modulator",
            26
          ]
        ],
        "simulation_controller.py": [
          [
            "class",
            "HormoneType",
            66
          ],
          [
            "class",
            "HormoneInteraction",
            79
          ],
          [
            "class",
            "Hormone",
            88
          ],
          [
            "class",
            "BioSimulationController",
            109
          ],
          [
            "function",
            "update_level",
            102
          ],
          [
            "function",
            "add_hormone",
            146
          ],
          [
            "function",
            "recover",
            232
          ],
          [
            "function",
            "trigger_phase_shift",
            243
          ],
          [
            "function",
            "stabilize_oscillator",
            253
          ],
          [
            "function",
            "get_hormone_state",
            454
          ],
          [
            "function",
            "get_cognitive_state",
            458
          ],
          [
            "function",
            "inject_stimulus",
            495
          ],
          [
            "function",
            "register_state_callback",
            514
          ],
          [
            "function",
            "suggest_action",
            519
          ]
        ],
        "oscillator.py": [
          [
            "class",
            "SecurityContext",
            49
          ],
          [
            "class",
            "OscillationType",
            56
          ],
          [
            "class",
            "OscillatorState",
            63
          ],
          [
            "class",
            "BioOscillator",
            72
          ],
          [
            "class",
            "MoodOscillator",
            306
          ],
          [
            "function",
            "get_status",
            201
          ],
          [
            "function",
            "register_neuroplastic_event",
            285
          ],
          [
            "function",
            "update_mood",
            316
          ],
          [
            "function",
            "bio_affect_feedback",
            362
          ],
          [
            "function",
            "bio_drift_response",
            381
          ]
        ],
        "bio_homeostasis.py": [
          [
            "function",
            "fatigue_level",
            8
          ]
        ],
        "symbolic_entropy.py": [
          [
            "function",
            "calculate_entropy_delta",
            11
          ],
          [
            "function",
            "entropy_state_snapshot",
            47
          ]
        ],
        "core.py": [
          [
            "class",
            "BioCore",
            43
          ],
          [
            "function",
            "get_system_status",
            195
          ]
        ],
        "prime_oscillator.py": [
          [
            "class",
            "PrimeHarmonicOscillator",
            17
          ],
          [
            "function",
            "generate_value",
            76
          ],
          [
            "function",
            "update_metrics",
            111
          ],
          [
            "function",
            "get_state",
            124
          ]
        ],
        "quantum_layer.py": [
          [
            "class",
            "QuantumBioConfig",
            13
          ],
          [
            "class",
            "QuantumBioOscillator",
            33
          ],
          [
            "function",
            "oscillate",
            67
          ],
          [
            "function",
            "create_entanglement",
            139
          ],
          [
            "function",
            "apply_entanglement_effects",
            178
          ],
          [
            "function",
            "measure_quantum_property",
            235
          ],
          [
            "function",
            "evolve_quantum_like_state",
            307
          ],
          [
            "function",
            "get_oscillator_metrics",
            345
          ],
          [
            "function",
            "reset_oscillator",
            386
          ],
          [
            "function",
            "synchronize_with_rhythm",
            400
          ],
          [
            "function",
            "create_coherence_field",
            437
          ]
        ],
        "protein_synthesizer.py": [
          [
            "class",
            "ProteinSynthesizer",
            8
          ]
        ],
        "recovery_protocol.py": [
          [
            "class",
            "BioRecoveryProtocol",
            19
          ]
        ],
        "symbolic_entropy_observer.py": [
          [
            "class",
            "SymbolicEntropyObserver",
            11
          ],
          [
            "function",
            "get_latest_entropy_snapshot",
            19
          ],
          [
            "function",
            "get_entropy_history",
            40
          ]
        ],
        "base_oscillator.py": [
          [
            "class",
            "OscillationType",
            62
          ],
          [
            "class",
            "OscillatorConfig",
            103
          ],
          [
            "class",
            "BaseOscillator",
            153
          ],
          [
            "function",
            "frequency",
            259
          ],
          [
            "function",
            "frequency",
            272
          ],
          [
            "function",
            "phase",
            290
          ],
          [
            "function",
            "phase",
            303
          ],
          [
            "function",
            "amplitude",
            318
          ],
          [
            "function",
            "amplitude",
            331
          ],
          [
            "function",
            "generate_value",
            457
          ],
          [
            "function",
            "update_metrics",
            478
          ]
        ],
        "eeg_sync_bridge.py": [
          [
            "class",
            "BrainwaveBand",
            19
          ],
          [
            "class",
            "SymbolicState",
            29
          ],
          [
            "function",
            "ingest_mock_eeg",
            41
          ],
          [
            "function",
            "map_to_symbolic_state",
            56
          ]
        ],
        "bio_hub.py": [
          [
            "class",
            "BioHub",
            13
          ],
          [
            "function",
            "get_bio_hub",
            204
          ],
          [
            "function",
            "register_service",
            125
          ],
          [
            "function",
            "get_service",
            130
          ],
          [
            "function",
            "register_event_handler",
            134
          ]
        ],
        "endocrine_daily_operations.py": [
          [
            "class",
            "TaskPriority",
            61
          ],
          [
            "class",
            "TaskType",
            70
          ],
          [
            "class",
            "EnhancedDailyOperations",
            80
          ],
          [
            "function",
            "add_task",
            546
          ],
          [
            "function",
            "get_operational_status",
            561
          ]
        ],
        "bio_affect_model.py": [
          [
            "function",
            "inject_narrative_repair",
            13
          ]
        ],
        "stability_anchor.py": [
          [
            "class",
            "StabilityAnchor",
            18
          ],
          [
            "function",
            "weight_modulator",
            26
          ]
        ],
        "symbolic/crista_optimizer.py": [
          [
            "class",
            "CristaOptimizer",
            16
          ],
          [
            "function",
            "optimize",
            26
          ],
          [
            "function",
            "report_state",
            59
          ]
        ],
        "symbolic/bio_symbolic_orchestrator.py": [
          [
            "class",
            "CoherenceMetrics",
            34
          ],
          [
            "class",
            "ProcessingPipeline",
            48
          ],
          [
            "class",
            "BioSymbolicOrchestrator",
            58
          ],
          [
            "function",
            "create_bio_symbolic_orchestrator",
            891
          ]
        ],
        "symbolic/contextual_mapping_colony.py": [
          [
            "class",
            "ContextLayer",
            30
          ],
          [
            "class",
            "ContextualMappingColony",
            39
          ],
          [
            "function",
            "create_mapping_colony",
            755
          ]
        ],
        "symbolic/anomaly_filter_colony.py": [
          [
            "class",
            "AnomalyType",
            28
          ],
          [
            "class",
            "AnomalyAction",
            38
          ],
          [
            "class",
            "AnomalyFilterColony",
            48
          ],
          [
            "function",
            "create_anomaly_filter_colony",
            963
          ]
        ],
        "symbolic/mito_ethics_sync.py": [
          [
            "class",
            "MitoEthicsSync",
            21
          ],
          [
            "function",
            "update_phase",
            32
          ],
          [
            "function",
            "assess_alignment",
            46
          ],
          [
            "function",
            "is_synchronized",
            67
          ]
        ],
        "symbolic/stress_gate.py": [
          [
            "class",
            "StressGate",
            20
          ],
          [
            "function",
            "update_stress",
            37
          ],
          [
            "function",
            "should_fallback",
            52
          ],
          [
            "function",
            "reset",
            62
          ],
          [
            "function",
            "report",
            69
          ]
        ],
        "symbolic/glyph_id_hash.py": [
          [
            "class",
            "GlyphIDHasher",
            23
          ],
          [
            "function",
            "generate_signature",
            41
          ],
          [
            "function",
            "generate_base64_glyph",
            60
          ]
        ],
        "symbolic/mito_quantum_attention.py": [
          [
            "class",
            "QuantumTunnelFilter",
            27
          ],
          [
            "class",
            "CristaGate",
            31
          ],
          [
            "class",
            "VivoxAttention",
            47
          ],
          [
            "class",
            "OxintusReasoner",
            50
          ],
          [
            "class",
            "MAELayer",
            53
          ],
          [
            "class",
            "RespiModule",
            56
          ],
          [
            "class",
            "ATPAllocator",
            72
          ],
          [
            "function",
            "generate_cl_signature",
            91
          ],
          [
            "class",
            "VivoxSection",
            108
          ],
          [
            "class",
            "OxintusBrass",
            111
          ],
          [
            "class",
            "MAEPercussion",
            114
          ],
          [
            "class",
            "MitochondrialConductor",
            117
          ],
          [
            "class",
            "CristaOptimizer",
            142
          ],
          [
            "function",
            "forward",
            28
          ],
          [
            "function",
            "forward",
            38
          ],
          [
            "function",
            "forward",
            48
          ],
          [
            "function",
            "forward",
            51
          ],
          [
            "function",
            "forward",
            54
          ],
          [
            "function",
            "forward",
            63
          ],
          [
            "function",
            "allocate",
            77
          ],
          [
            "function",
            "play",
            109
          ],
          [
            "function",
            "play",
            112
          ],
          [
            "function",
            "play",
            115
          ],
          [
            "function",
            "perform",
            134
          ],
          [
            "function",
            "optimize",
            147
          ]
        ],
        "symbolic/quantum_coherence_enhancer.py": [
          [
            "class",
            "QuantumState",
            37
          ],
          [
            "class",
            "QuantumCoherenceEnhancer",
            50
          ],
          [
            "function",
            "create_quantum_enhancer",
            369
          ],
          [
            "function",
            "z_collapse",
            82
          ],
          [
            "function",
            "drift_score",
            124
          ],
          [
            "function",
            "enhance_coherence",
            156
          ],
          [
            "function",
            "get_quantum_summary",
            336
          ]
        ],
        "symbolic/fallback_systems.py": [
          [
            "class",
            "FallbackLevel",
            26
          ],
          [
            "class",
            "FallbackReason",
            34
          ],
          [
            "class",
            "FallbackEvent",
            46
          ],
          [
            "class",
            "BioSymbolicFallbackManager",
            58
          ],
          [
            "function",
            "get_fallback_manager",
            902
          ],
          [
            "function",
            "register_service",
            85
          ],
          [
            "function",
            "get_service",
            90
          ],
          [
            "function",
            "get_system_health_report",
            837
          ],
          [
            "class",
            "FallbackCoherenceMetrics",
            710
          ],
          [
            "class",
            "FallbackCoherenceMetrics",
            739
          ],
          [
            "class",
            "FallbackCoherenceMetrics",
            766
          ],
          [
            "class",
            "FallbackCoherenceMetrics",
            791
          ]
        ],
        "symbolic/bio_symbolic.py": [
          [
            "class",
            "SymbolicGlyph",
            25
          ],
          [
            "class",
            "BioSymbolic",
            64
          ],
          [
            "function",
            "process",
            80
          ],
          [
            "function",
            "process_rhythm",
            107
          ],
          [
            "function",
            "process_energy",
            150
          ],
          [
            "function",
            "process_dna",
            198
          ],
          [
            "function",
            "process_stress",
            242
          ],
          [
            "function",
            "process_homeostasis",
            286
          ],
          [
            "function",
            "process_neural",
            336
          ],
          [
            "function",
            "process_generic",
            388
          ],
          [
            "function",
            "get_statistics",
            494
          ],
          [
            "function",
            "reset",
            505
          ]
        ],
        "symbolic/preprocessing_colony.py": [
          [
            "class",
            "BioPreprocessingColony",
            28
          ],
          [
            "function",
            "create_preprocessing_colony",
            350
          ]
        ],
        "symbolic/dna_simulator.py": [
          [
            "class",
            "DNASimulator",
            9
          ],
          [
            "function",
            "parse_sequence",
            19
          ],
          [
            "function",
            "entangle_with_colony",
            27
          ]
        ],
        "symbolic/adaptive_threshold_colony.py": [
          [
            "class",
            "AdaptiveThresholdColony",
            29
          ],
          [
            "function",
            "create_threshold_colony",
            463
          ]
        ],
        "systems/mitochondria_model.py": [
          [
            "class",
            "MitochondriaModel",
            10
          ],
          [
            "function",
            "energy_output",
            17
          ]
        ],
        "systems/orchestration/compatibility.py": [
          [
            "function",
            "setup_import_redirects",
            33
          ]
        ],
        "systems/orchestration/base_orchestrator.py": [
          [
            "class",
            "ModuleHealth",
            18
          ],
          [
            "class",
            "ResourcePriority",
            28
          ],
          [
            "class",
            "BaseBioOrchestrator",
            38
          ],
          [
            "function",
            "register_module",
            56
          ],
          [
            "function",
            "invoke_module",
            71
          ],
          [
            "function",
            "get_status",
            87
          ],
          [
            "function",
            "get_module_status",
            96
          ],
          [
            "function",
            "orchestrate",
            116
          ]
        ],
        "systems/orchestration/identity_aware_bio_orchestrator.py": [
          [
            "class",
            "IdentityAwareBioOrchestrator",
            33
          ],
          [
            "function",
            "get_service_info",
            104
          ],
          [
            "function",
            "register_module",
            124
          ],
          [
            "function",
            "unregister_module",
            190
          ],
          [
            "function",
            "allocate_energy",
            222
          ],
          [
            "function",
            "heal_module",
            266
          ],
          [
            "function",
            "get_user_modules",
            292
          ],
          [
            "function",
            "get_tiered_system_status",
            317
          ],
          [
            "function",
            "admin_override_allocation",
            358
          ],
          [
            "function",
            "cleanup_user_resources",
            388
          ],
          [
            "class",
            "DemoModule",
            421
          ],
          [
            "function",
            "basic_status",
            327
          ],
          [
            "function",
            "detailed_status",
            334
          ],
          [
            "function",
            "admin_status",
            343
          ],
          [
            "function",
            "process",
            422
          ]
        ],
        "systems/orchestration/bio_orchestrator.py": [
          [
            "class",
            "BioOrchestrator",
            33
          ],
          [
            "function",
            "enhanced_attention_hook",
            642
          ],
          [
            "function",
            "shutdown",
            109
          ],
          [
            "function",
            "register_module",
            118
          ],
          [
            "function",
            "update_module",
            177
          ],
          [
            "function",
            "invoke_module",
            226
          ],
          [
            "function",
            "invoke_module_async",
            333
          ],
          [
            "function",
            "allocate_resources",
            347
          ],
          [
            "function",
            "update_energy_buffers",
            395
          ],
          [
            "function",
            "check_system_health",
            420
          ],
          [
            "function",
            "attempt_auto_repair",
            459
          ],
          [
            "function",
            "rebalance_energy",
            503
          ],
          [
            "function",
            "get_system_status",
            513
          ],
          [
            "function",
            "get_module_status",
            534
          ],
          [
            "function",
            "orchestrate",
            556
          ],
          [
            "function",
            "get_status",
            592
          ],
          [
            "function",
            "wrapped_attention",
            643
          ],
          [
            "function",
            "monitor_loop",
            89
          ]
        ],
        "systems/orchestration/oscillator_orchestrator.py": [
          [
            "class",
            "OrchestratorConfig",
            37
          ],
          [
            "class",
            "OscillatorBioOrchestrator",
            44
          ],
          [
            "function",
            "add_oscillator",
            100
          ],
          [
            "function",
            "remove_oscillator",
            109
          ],
          [
            "function",
            "monitor_coherence",
            122
          ],
          [
            "function",
            "apply_resonance_pattern",
            168
          ],
          [
            "function",
            "correct_phase_drift",
            185
          ],
          [
            "function",
            "get_status",
            235
          ],
          [
            "function",
            "manage_quantum_like_states",
            244
          ],
          [
            "function",
            "get_quantum_metrics",
            267
          ],
          [
            "function",
            "register_module",
            294
          ],
          [
            "function",
            "invoke_module",
            318
          ],
          [
            "class",
            "QuantumBioOscillator",
            29
          ],
          [
            "class",
            "QuantumLikeState",
            30
          ],
          [
            "class",
            "PrimeHarmonicOscillator",
            31
          ],
          [
            "class",
            "OscillatorConfig",
            32
          ]
        ],
        "systems/orchestration/adapters/voice_adapter.py": [
          [
            "class",
            "VoiceBioAdapter",
            17
          ],
          [
            "function",
            "process_audio_chunk",
            54
          ],
          [
            "function",
            "optimize_for_realtime",
            103
          ],
          [
            "function",
            "get_voice_metrics",
            115
          ]
        ]
      }
    },
    {
      "system": "symbolic",
      "entity_count": 172,
      "class_count": 47,
      "function_count": 125,
      "files": 25,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/symbolic_activation.py",
      "entities_by_file": {
        "colony_tag_propagation.py": [
          [
            "class",
            "SymbolicReasoningColony",
            9
          ]
        ],
        "service_analysis.py": [
          [
            "function",
            "compute_digital_friction",
            17
          ],
          [
            "function",
            "compute_modularity_score",
            50
          ]
        ],
        "symbolic_hub.py": [
          [
            "class",
            "SymbolicHub",
            13
          ],
          [
            "function",
            "get_symbolic_hub",
            240
          ],
          [
            "function",
            "register_service",
            143
          ],
          [
            "function",
            "get_service",
            148
          ],
          [
            "function",
            "register_event_handler",
            152
          ]
        ],
        "swarm_tag_simulation.py": [
          [
            "class",
            "SimAgent",
            26
          ],
          [
            "class",
            "SwarmNetwork",
            50
          ],
          [
            "function",
            "register",
            69
          ],
          [
            "function",
            "log_collision",
            96
          ],
          [
            "function",
            "consensus",
            99
          ]
        ],
        "loop_engine.py": [
          [
            "class",
            "SymbolicState",
            23
          ],
          [
            "class",
            "SymbolicLoopEngine",
            37
          ],
          [
            "function",
            "get_symbolic_loop_engine",
            263
          ]
        ],
        "glyph_engine.py": [
          [
            "function",
            "generate_glyph",
            15
          ],
          [
            "function",
            "evaluate_entropy",
            86
          ],
          [
            "function",
            "evaluate_resonance",
            97
          ],
          [
            "function",
            "detect_attractors",
            146
          ]
        ],
        "symbolic_glyph_hash.py": [
          [
            "function",
            "compute_glyph_hash",
            16
          ],
          [
            "function",
            "entropy_delta",
            22
          ]
        ],
        "vocabularies/voice_vocabulary.py": [
          [
            "class",
            "Voicesymbol",
            16
          ],
          [
            "class",
            "Voicesymbolicvocabulary",
            25
          ],
          [
            "function",
            "get_symbol_for_emotion",
            249
          ],
          [
            "function",
            "get_symbol_for_provider",
            263
          ],
          [
            "function",
            "create_synthesis_phrase",
            273
          ],
          [
            "function",
            "get_quality_indicators",
            280
          ],
          [
            "function",
            "get_all_symbols",
            298
          ],
          [
            "function",
            "get_context_symbols",
            308
          ],
          [
            "function",
            "analyze_emotional_weight",
            319
          ]
        ],
        "vocabularies/dream_vocabulary.py": [
          [
            "function",
            "dream_cycle_start",
            113
          ],
          [
            "function",
            "dream_phase_transition",
            118
          ],
          [
            "function",
            "pattern_discovered",
            124
          ],
          [
            "function",
            "insight_generated",
            130
          ],
          [
            "function",
            "emotional_context",
            134
          ],
          [
            "function",
            "memory_processing",
            144
          ],
          [
            "function",
            "cycle_completion",
            154
          ],
          [
            "function",
            "get_dream_symbol",
            245
          ],
          [
            "function",
            "get_dream_narrative",
            262
          ],
          [
            "function",
            "get_visual_hint",
            268
          ]
        ],
        "vocabularies/usage_examples.py": [
          [
            "function",
            "log_bio_state",
            18
          ],
          [
            "function",
            "log_dream_phase",
            28
          ],
          [
            "function",
            "perform_identity_operation",
            38
          ],
          [
            "function",
            "log_any_symbol",
            59
          ],
          [
            "function",
            "get_system_status",
            71
          ],
          [
            "class",
            "SymbolicLogger",
            84
          ],
          [
            "function",
            "log_state",
            90
          ],
          [
            "function",
            "log_bio",
            95
          ]
        ],
        "vocabularies/vision_vocabulary.py": [
          [
            "class",
            "Visualsymbol",
            15
          ],
          [
            "class",
            "Visionsymbolicvocabulary",
            25
          ],
          [
            "function",
            "get_symbol_for_analysis_type",
            478
          ],
          [
            "function",
            "get_symbol_for_provider",
            494
          ],
          [
            "function",
            "get_dominant_color_symbol",
            506
          ],
          [
            "function",
            "create_analysis_phrase",
            533
          ],
          [
            "function",
            "get_emotional_color_mapping",
            551
          ],
          [
            "function",
            "analyze_symbolic_composition",
            564
          ],
          [
            "function",
            "get_quality_indicators",
            586
          ],
          [
            "function",
            "get_all_symbols",
            615
          ],
          [
            "function",
            "get_context_symbols",
            628
          ],
          [
            "function",
            "calculate_visual_harmony",
            639
          ]
        ],
        "vocabularies/bio_vocabulary.py": [
          [
            "function",
            "get_bio_symbol",
            182
          ],
          [
            "function",
            "get_bio_message",
            186
          ],
          [
            "function",
            "format_bio_log",
            190
          ]
        ],
        "vocabularies/emotion_vocabulary.py": [
          [
            "function",
            "get_emotion_symbol",
            47
          ],
          [
            "function",
            "get_guardian_weight",
            51
          ]
        ],
        "bio/crista_optimizer.py": [
          [
            "class",
            "CristaOptimizer",
            16
          ],
          [
            "function",
            "optimize",
            26
          ],
          [
            "function",
            "report_state",
            59
          ]
        ],
        "bio/mito_ethics_sync.py": [
          [
            "class",
            "MitoEthicsSync",
            21
          ],
          [
            "function",
            "update_phase",
            32
          ],
          [
            "function",
            "assess_alignment",
            46
          ],
          [
            "function",
            "is_synchronized",
            67
          ]
        ],
        "bio/stress_gate.py": [
          [
            "class",
            "StressGate",
            20
          ],
          [
            "function",
            "update_stress",
            37
          ],
          [
            "function",
            "should_fallback",
            52
          ],
          [
            "function",
            "reset",
            62
          ],
          [
            "function",
            "report",
            69
          ]
        ],
        "bio/glyph_id_hash.py": [
          [
            "class",
            "GlyphIDHasher",
            23
          ],
          [
            "function",
            "generate_signature",
            41
          ],
          [
            "function",
            "generate_base64_glyph",
            60
          ]
        ],
        "bio/mito_quantum_attention.py": [
          [
            "class",
            "QuantumTunnelFilter",
            27
          ],
          [
            "class",
            "CristaGate",
            31
          ],
          [
            "class",
            "VivoxAttention",
            47
          ],
          [
            "class",
            "OxintusReasoner",
            50
          ],
          [
            "class",
            "MAELayer",
            53
          ],
          [
            "class",
            "RespiModule",
            56
          ],
          [
            "class",
            "ATPAllocator",
            72
          ],
          [
            "function",
            "generate_cl_signature",
            91
          ],
          [
            "class",
            "VivoxSection",
            108
          ],
          [
            "class",
            "OxintusBrass",
            111
          ],
          [
            "class",
            "MAEPercussion",
            114
          ],
          [
            "class",
            "MitochondrialConductor",
            117
          ],
          [
            "class",
            "CristaOptimizer",
            142
          ],
          [
            "function",
            "forward",
            28
          ],
          [
            "function",
            "forward",
            38
          ],
          [
            "function",
            "forward",
            48
          ],
          [
            "function",
            "forward",
            51
          ],
          [
            "function",
            "forward",
            54
          ],
          [
            "function",
            "forward",
            63
          ],
          [
            "function",
            "allocate",
            77
          ],
          [
            "function",
            "play",
            109
          ],
          [
            "function",
            "play",
            112
          ],
          [
            "function",
            "play",
            115
          ],
          [
            "function",
            "perform",
            134
          ],
          [
            "function",
            "optimize",
            147
          ]
        ],
        "bio/bio_symbolic.py": [
          [
            "class",
            "BioSymbolic",
            5
          ],
          [
            "function",
            "process",
            11
          ]
        ],
        "core/symbolic_language.py": [
          [
            "class",
            "SymbolicDomain",
            17
          ],
          [
            "class",
            "SymbolicType",
            30
          ],
          [
            "class",
            "SymbolicAttribute",
            39
          ],
          [
            "class",
            "Symbol",
            48
          ],
          [
            "class",
            "SymbolicRelation",
            96
          ],
          [
            "class",
            "SymbolicExpression",
            105
          ],
          [
            "class",
            "SymbolicTranslator",
            211
          ],
          [
            "class",
            "SymbolicLanguageFramework",
            298
          ],
          [
            "class",
            "SymbolicVocabulary",
            386
          ],
          [
            "function",
            "get_symbolic_translator",
            484
          ],
          [
            "function",
            "get_symbolic_vocabulary",
            491
          ],
          [
            "function",
            "add_attribute",
            65
          ],
          [
            "function",
            "get_attribute",
            69
          ],
          [
            "function",
            "to_dict",
            74
          ],
          [
            "function",
            "add_symbol",
            117
          ],
          [
            "function",
            "add_relation",
            121
          ],
          [
            "function",
            "evaluate",
            129
          ],
          [
            "function",
            "to_dict",
            192
          ],
          [
            "function",
            "translate",
            250
          ],
          [
            "function",
            "batch_translate",
            289
          ],
          [
            "function",
            "get_patterns",
            378
          ],
          [
            "function",
            "get_decision_trace",
            382
          ],
          [
            "function",
            "get_symbol",
            468
          ],
          [
            "function",
            "add_symbol",
            472
          ],
          [
            "function",
            "get_symbols_by_domain",
            476
          ]
        ],
        "utils/symbolic_utils.py": [
          [
            "function",
            "tier_label",
            10
          ],
          [
            "function",
            "summarize_emotion_vector",
            43
          ]
        ],
        "drift/symbolic_drift_tracker.py": [
          [
            "class",
            "DriftPhase",
            37
          ],
          [
            "class",
            "DriftScore",
            45
          ],
          [
            "class",
            "SymbolicState",
            59
          ],
          [
            "class",
            "SymbolicDriftTracker",
            70
          ],
          [
            "function",
            "calculate_symbolic_drift",
            118
          ],
          [
            "function",
            "register_symbolic_state",
            205
          ],
          [
            "function",
            "detect_recursive_drift_loops",
            274
          ],
          [
            "function",
            "emit_drift_alert",
            345
          ],
          [
            "function",
            "record_drift",
            802
          ],
          [
            "function",
            "register_drift",
            835
          ],
          [
            "function",
            "calculate_entropy",
            852
          ],
          [
            "function",
            "log_phase_mismatch",
            865
          ],
          [
            "function",
            "summarize_drift",
            910
          ]
        ],
        "drift/symbolic_drift_tracker_trace.py": [
          [
            "class",
            "SymbolicDriftTracker",
            39
          ],
          [
            "function",
            "record_drift",
            66
          ],
          [
            "function",
            "register_drift",
            96
          ],
          [
            "function",
            "calculate_entropy",
            115
          ],
          [
            "function",
            "log_phase_mismatch",
            127
          ],
          [
            "function",
            "summarize_drift",
            139
          ],
          [
            "function",
            "calculate_symbolic_drift",
            153
          ],
          [
            "function",
            "register_symbolic_state",
            157
          ],
          [
            "function",
            "detect_recursive_drift_loops",
            161
          ],
          [
            "function",
            "emit_drift_alert",
            165
          ]
        ],
        "neural/neural_symbolic_bridge.py": [
          [
            "class",
            "NeuralSymbolicIntegration",
            18
          ],
          [
            "function",
            "process",
            30
          ]
        ],
        "neural/neuro_symbolic_fusion_layer.py": [
          [
            "class",
            "FusionMode",
            64
          ],
          [
            "class",
            "FusionContext",
            72
          ],
          [
            "class",
            "NeuroSymbolicPattern",
            81
          ],
          [
            "class",
            "NeuroSymbolicFusionLayer",
            102
          ],
          [
            "function",
            "create_nsfl_instance",
            504
          ],
          [
            "function",
            "calculate_coherence",
            94
          ],
          [
            "function",
            "set_fusion_context",
            156
          ],
          [
            "function",
            "fuse_neural_symbolic",
            163
          ],
          [
            "function",
            "translate_neural_to_symbolic",
            228
          ],
          [
            "function",
            "translate_symbolic_to_neural",
            263
          ],
          [
            "function",
            "adapt_fusion_weights",
            295
          ],
          [
            "function",
            "get_fusion_metrics",
            343
          ]
        ]
      }
    },
    {
      "system": "quantum",
      "entity_count": 454,
      "class_count": 214,
      "function_count": 240,
      "files": 73,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/quantum_activation.py",
      "entities_by_file": {
        "add_module_descriptions.py": [
          [
            "function",
            "add_module_description",
            232
          ],
          [
            "function",
            "main",
            278
          ]
        ],
        "validator.py": [
          [
            "class",
            "QuantumValidator",
            54
          ],
          [
            "function",
            "create_quantum_component",
            195
          ],
          [
            "function",
            "get_status",
            178
          ]
        ],
        "quantum_waveform.py": [
          [
            "class",
            "QuantumWaveform",
            27
          ],
          [
            "function",
            "collapse",
            33
          ],
          [
            "function",
            "generate_dream",
            13
          ]
        ],
        "system_orchestrator.py": [
          [
            "class",
            "QuantumAGISystem",
            47
          ]
        ],
        "web_integration.py": [
          [
            "class",
            "QuantumSecurityLevel",
            58
          ],
          [
            "class",
            "QuantumWebSession",
            65
          ],
          [
            "class",
            "QuantumWebSecurity",
            77
          ],
          [
            "class",
            "QuantumWebAuthenticator",
            265
          ]
        ],
        "coordinator.py": [
          [
            "class",
            "QuantumCoordinator",
            56
          ],
          [
            "class",
            "MockQuantumCore",
            166
          ],
          [
            "class",
            "MockBioCoordinator",
            179
          ],
          [
            "class",
            "SimpleBioCoordinator",
            194
          ]
        ],
        "service.py": [
          [
            "class",
            "QuantumService",
            60
          ],
          [
            "function",
            "quantum_compute",
            561
          ],
          [
            "function",
            "quantum_entangle",
            566
          ],
          [
            "function",
            "consciousness_quantum_bridge",
            571
          ],
          [
            "function",
            "quantum_compute",
            87
          ],
          [
            "function",
            "quantum_entangle",
            150
          ],
          [
            "function",
            "consciousness_quantum_bridge",
            218
          ],
          [
            "function",
            "quantum_superposition",
            273
          ],
          [
            "function",
            "observe_quantum_like_state",
            335
          ],
          [
            "function",
            "get_quantum_metrics",
            390
          ],
          [
            "class",
            "IdentityClient",
            51
          ],
          [
            "function",
            "verify_user_access",
            52
          ],
          [
            "function",
            "check_consent",
            54
          ],
          [
            "function",
            "log_activity",
            56
          ]
        ],
        "quantum_flux.py": [
          [
            "class",
            "QuantumFlux",
            8
          ],
          [
            "function",
            "measure_entropy",
            14
          ]
        ],
        "system.py": [
          [
            "class",
            "UnifiedQuantumConfig",
            56
          ],
          [
            "class",
            "UnifiedQuantumSystem",
            66
          ],
          [
            "function",
            "get_system_status",
            178
          ]
        ],
        "metadata.py": [
          [
            "class",
            "SymbolicDimension",
            49
          ],
          [
            "class",
            "QuantumMetadata",
            62
          ],
          [
            "class",
            "SymbolicTag",
            78
          ],
          [
            "class",
            "QuantumMetadataManager",
            87
          ],
          [
            "function",
            "get_metadata_statistics",
            372
          ]
        ],
        "add_poetic_headers.py": [
          [
            "function",
            "get_module_description",
            207
          ],
          [
            "function",
            "format_poetry",
            228
          ],
          [
            "function",
            "has_existing_header",
            233
          ],
          [
            "function",
            "add_poetic_header",
            237
          ],
          [
            "function",
            "main",
            310
          ]
        ],
        "ui_generator.py": [
          [
            "class",
            "QuantumUIOptimizer",
            42
          ]
        ],
        "ethics_engine.py": [
          [
            "class",
            "EthicalPrinciple",
            46
          ],
          [
            "class",
            "ComplianceFramework",
            61
          ],
          [
            "class",
            "EthicalSeverity",
            74
          ],
          [
            "class",
            "QuantumEthicalState",
            85
          ],
          [
            "class",
            "EthicalViolation",
            96
          ],
          [
            "class",
            "QuantumEthicsEngine",
            110
          ],
          [
            "function",
            "get_ethics_report",
            797
          ]
        ],
        "awareness_system.py": [
          [
            "class",
            "AwarenessQuantumConfig",
            55
          ],
          [
            "class",
            "SystemState",
            80
          ],
          [
            "class",
            "QuantumAwarenessSystem",
            99
          ],
          [
            "function",
            "get_system_state",
            224
          ],
          [
            "function",
            "get_state_history",
            231
          ]
        ],
        "fix_proper_ascii.py": [
          [
            "function",
            "fix_ascii_in_file",
            35
          ],
          [
            "function",
            "main",
            66
          ]
        ],
        "voice_enhancer.py": [
          [
            "class",
            "VoiceQuantumConfig",
            50
          ],
          [
            "class",
            "QuantumVoiceEnhancer",
            57
          ]
        ],
        "healix_mapper.py": [
          [
            "class",
            "MemoryStrand",
            52
          ],
          [
            "class",
            "MutationType",
            61
          ],
          [
            "class",
            "CompressionLevel",
            71
          ],
          [
            "class",
            "MemoryNucleotide",
            80
          ],
          [
            "class",
            "MemoryMutation",
            91
          ],
          [
            "class",
            "QuantumMemoryFold",
            105
          ],
          [
            "class",
            "QuantumHealixMapper",
            119
          ]
        ],
        "post_quantum_crypto.py": [
          [
            "class",
            "SecurityLevel",
            45
          ],
          [
            "class",
            "ParameterSets",
            51
          ],
          [
            "class",
            "PostQuantumCryptoEngine",
            60
          ],
          [
            "function",
            "verify_identity_claim",
            208
          ],
          [
            "function",
            "create_identity_proof",
            253
          ],
          [
            "function",
            "derive_session_keys",
            289
          ],
          [
            "function",
            "rotate_keys",
            326
          ]
        ],
        "bio_optimization_adapter.py": [
          [
            "class",
            "QuantumBioOptimizationConfig",
            122
          ],
          [
            "class",
            "QuantumBioMetrics",
            141
          ],
          [
            "function",
            "lukhas_tier_required",
            184
          ],
          [
            "class",
            "QuantumBioOptimizationAdapter",
            191
          ],
          [
            "function",
            "decorator",
            185
          ],
          [
            "function",
            "get_optimization_status",
            480
          ],
          [
            "function",
            "config_to_dict",
            509
          ],
          [
            "class",
            "MockBioOrchestrator",
            85
          ],
          [
            "class",
            "MockQuantumBioOscillator",
            87
          ],
          [
            "class",
            "QuantumLikeState",
            95
          ],
          [
            "class",
            "QuantumConfig",
            98
          ],
          [
            "class",
            "MockQuantumAwarenessSystem",
            100
          ],
          [
            "class",
            "MockQuantumDreamAdapter",
            103
          ],
          [
            "class",
            "MockQuantumBioCoordinator",
            109
          ],
          [
            "function",
            "register_oscillator",
            86
          ],
          [
            "function",
            "get_coherence",
            89
          ],
          [
            "function",
            "measure_entanglement",
            90
          ],
          [
            "function",
            "create_superposition",
            93
          ]
        ],
        "bio.py": [
          [
            "function",
            "lukhas_tier_required",
            86
          ],
          [
            "class",
            "MitochondrialQuantumBridge",
            93
          ],
          [
            "class",
            "QuantumSynapticGate",
            210
          ],
          [
            "class",
            "NeuroplasticityModulator",
            285
          ],
          [
            "function",
            "decorator",
            87
          ],
          [
            "class",
            "QuantumOscillator",
            58
          ],
          [
            "class",
            "QuantumBioOscillator",
            62
          ],
          [
            "function",
            "quantum_modulate",
            59
          ],
          [
            "function",
            "modulate_frequencies",
            63
          ]
        ],
        "dream_adapter.py": [
          [
            "class",
            "DreamQuantumConfig",
            50
          ],
          [
            "class",
            "QuantumDreamAdapter",
            57
          ]
        ],
        "oscillator.py": [
          [
            "class",
            "OscillatorState",
            46
          ],
          [
            "class",
            "QuantumInspiredGateType",
            55
          ],
          [
            "class",
            "QuantumOscillatorMetrics",
            64
          ],
          [
            "class",
            "CORDICProcessor",
            75
          ],
          [
            "class",
            "FresnelErrorCorrector",
            112
          ],
          [
            "class",
            "QuantumAnnealing",
            167
          ],
          [
            "class",
            "LatticeBasedSecurity",
            255
          ],
          [
            "class",
            "BiomimeticResonanceEngine",
            298
          ],
          [
            "class",
            "EnhancedBaseOscillator",
            354
          ],
          [
            "class",
            "BaseOscillator",
            659
          ],
          [
            "function",
            "rotate_vector",
            81
          ],
          [
            "function",
            "calculate_phase_alignment",
            99
          ],
          [
            "function",
            "verify_quantum_security",
            289
          ]
        ],
        "regenerate_intelligent_descriptions.py": [
          [
            "function",
            "analyze_code_content",
            38
          ],
          [
            "function",
            "generate_intelligent_description",
            95
          ],
          [
            "function",
            "regenerate_description",
            202
          ],
          [
            "function",
            "main",
            243
          ]
        ],
        "consensus_system.py": [
          [
            "class",
            "QuantumAnnealedEthicalConsensus",
            47
          ],
          [
            "function",
            "evaluate",
            133
          ],
          [
            "function",
            "get_status",
            456
          ]
        ],
        "processor.py": [
          [
            "class",
            "QuantumInspiredProcessor",
            44
          ],
          [
            "function",
            "create_quantum_component",
            185
          ],
          [
            "function",
            "get_status",
            168
          ]
        ],
        "quantum_colony.py": [
          [
            "class",
            "QuantumState",
            24
          ],
          [
            "class",
            "QuantumAgent",
            44
          ],
          [
            "class",
            "QuantumColony",
            226
          ],
          [
            "function",
            "normalize",
            33
          ],
          [
            "function",
            "to_probability",
            39
          ],
          [
            "function",
            "oracle",
            677
          ],
          [
            "function",
            "cost_function",
            690
          ]
        ],
        "bio_components.py": [
          [
            "function",
            "lukhas_tier_required",
            95
          ],
          [
            "class",
            "ProtonGradient",
            102
          ],
          [
            "class",
            "QuantumAttentionGate",
            156
          ],
          [
            "class",
            "CristaFilter",
            210
          ],
          [
            "class",
            "CardiolipinEncoder",
            277
          ],
          [
            "function",
            "decorator",
            96
          ],
          [
            "function",
            "process",
            112
          ],
          [
            "function",
            "encode",
            289
          ],
          [
            "class",
            "QuantumOscillator",
            65
          ],
          [
            "class",
            "QuantumBioOscillator",
            69
          ],
          [
            "function",
            "quantum_modulate",
            66
          ],
          [
            "function",
            "modulate_frequencies",
            70
          ],
          [
            "function",
            "get_coherence",
            73
          ]
        ],
        "post_quantum_crypto_enhanced.py": [
          [
            "class",
            "SecurityLevel",
            73
          ],
          [
            "class",
            "AlgorithmType",
            79
          ],
          [
            "class",
            "CryptoOperation",
            87
          ],
          [
            "class",
            "SecurityConfig",
            98
          ],
          [
            "class",
            "CryptoAuditLog",
            120
          ],
          [
            "class",
            "QuantumResistantKeyManager",
            131
          ],
          [
            "class",
            "PostQuantumCryptoEngine",
            241
          ],
          [
            "class",
            "SecureMemoryManager",
            552
          ],
          [
            "class",
            "QuantumKeyDerivation",
            582
          ],
          [
            "function",
            "to_dict",
            108
          ],
          [
            "function",
            "generate_keypair",
            140
          ],
          [
            "function",
            "get_security_status",
            504
          ],
          [
            "function",
            "protect_session_data",
            559
          ],
          [
            "function",
            "secure_cleanup",
            566
          ]
        ],
        "integration.py": [
          [
            "class",
            "TestQuantumIntegration",
            42
          ],
          [
            "function",
            "setUp",
            44
          ],
          [
            "function",
            "test_superposition_transition",
            66
          ],
          [
            "function",
            "test_entanglement",
            79
          ],
          [
            "function",
            "test_decoherence",
            97
          ],
          [
            "function",
            "test_measurement",
            110
          ],
          [
            "function",
            "test_orchestrator_quantum_management",
            124
          ],
          [
            "function",
            "test_generate_quantum_values",
            138
          ]
        ],
        "distributed_quantum_architecture.py": [
          [
            "class",
            "DistributedQuantumSafeOrchestrator",
            35
          ],
          [
            "class",
            "SecureProcessingNode",
            65
          ]
        ],
        "fix_module_descriptions.py": [
          [
            "function",
            "fix_description",
            125
          ],
          [
            "function",
            "main",
            165
          ]
        ],
        "vault_manager.py": [
          [
            "class",
            "VeriFoldQR",
            59
          ],
          [
            "class",
            "EncryptedAPIKey",
            69
          ],
          [
            "class",
            "AnonymousCryptoSession",
            80
          ],
          [
            "class",
            "QuantumSeedPhrase",
            91
          ],
          [
            "class",
            "QuantumVaultManager",
            99
          ],
          [
            "function",
            "main",
            431
          ],
          [
            "function",
            "create_lambda_id_hash",
            130
          ],
          [
            "function",
            "generate_verifold_qr",
            141
          ],
          [
            "function",
            "store_encrypted_api_key",
            195
          ],
          [
            "function",
            "authenticate_and_decrypt_api_key",
            232
          ],
          [
            "function",
            "create_anonymous_crypto_session",
            276
          ],
          [
            "function",
            "store_quantum_seed_phrase",
            304
          ],
          [
            "function",
            "get_anonymous_trading_session",
            375
          ],
          [
            "function",
            "generate_vault_report",
            403
          ]
        ],
        "bio_crista_optimizer_adapter.py": [
          [
            "class",
            "CristaeTopologyType",
            55
          ],
          [
            "class",
            "CristaeState",
            63
          ],
          [
            "function",
            "lukhas_tier_required",
            91
          ],
          [
            "class",
            "CristaOptimizerAdapter",
            98
          ],
          [
            "function",
            "decorator",
            92
          ]
        ],
        "certificate_manager.py": [
          [
            "class",
            "CertificateStatus",
            67
          ],
          [
            "class",
            "QuantumAlgorithm",
            77
          ],
          [
            "function",
            "lukhas_tier_required",
            99
          ],
          [
            "class",
            "QuantumCertificateManager",
            106
          ],
          [
            "function",
            "decorator",
            100
          ],
          [
            "function",
            "get_certificate_status",
            436
          ],
          [
            "function",
            "get_all_certificates_status",
            447
          ]
        ],
        "quantum_bio_coordinator.py": [
          [
            "function",
            "lukhas_tier_required",
            98
          ],
          [
            "class",
            "QuantumBioCoordinator",
            105
          ],
          [
            "function",
            "decorator",
            99
          ],
          [
            "class",
            "MockEnhancedQuantumEngine",
            67
          ],
          [
            "class",
            "MockMitochondrialQuantumBridge",
            69
          ],
          [
            "class",
            "MockQuantumSynapticGate",
            71
          ],
          [
            "class",
            "MockNeuroplasticityModulator",
            73
          ]
        ],
        "attention_economics.py": [
          [
            "class",
            "AttentionTokenType",
            23
          ],
          [
            "class",
            "AttentionToken",
            34
          ],
          [
            "class",
            "AttentionBid",
            64
          ],
          [
            "class",
            "QuantumAttentionEconomics",
            78
          ],
          [
            "function",
            "get_quantum_attention_economics",
            583
          ],
          [
            "function",
            "calculate_quantum_value",
            46
          ],
          [
            "function",
            "get_user_attention_balance",
            554
          ]
        ],
        "engine.py": [
          [
            "class",
            "EnhancedQuantumEngine",
            51
          ]
        ],
        "add_compliant_headers.py": [
          [
            "function",
            "has_existing_lukhas_header",
            185
          ],
          [
            "function",
            "extract_existing_imports",
            189
          ],
          [
            "function",
            "get_module_info",
            226
          ],
          [
            "function",
            "add_compliant_header",
            242
          ],
          [
            "function",
            "main",
            309
          ]
        ],
        "creative_engine.py": [
          [
            "class",
            "MockQuantumContext",
            47
          ],
          [
            "class",
            "MockCreativeExpression",
            55
          ],
          [
            "class",
            "MockQuantumHaiku",
            62
          ]
        ],
        "setup_api_keys.py": [
          [
            "function",
            "setup_api_keys",
            44
          ],
          [
            "function",
            "verify_setup",
            131
          ]
        ],
        "abas_quantum_specialist.py": [
          [
            "class",
            "QuantumBioCapabilityLevel",
            59
          ],
          [
            "class",
            "QuantumBioResponse",
            68
          ],
          [
            "class",
            "QuantumTunnelingEthics",
            80
          ],
          [
            "class",
            "ProtonMotiveProcessor",
            205
          ],
          [
            "class",
            "CristaeTopologyManager",
            341
          ],
          [
            "class",
            "QuantumBiologicalAGI",
            537
          ],
          [
            "function",
            "quantum_ethical_arbitration",
            96
          ],
          [
            "function",
            "create_attention_gradient",
            216
          ],
          [
            "function",
            "synthesize_symbolic_atp",
            242
          ],
          [
            "function",
            "optimize_cristae_topology",
            352
          ],
          [
            "function",
            "get_biological_status",
            850
          ]
        ],
        "quantum_oscillator.py": [
          [
            "class",
            "GlobalComplianceFramework",
            45
          ],
          [
            "class",
            "EthicalHierarchy",
            154
          ],
          [
            "class",
            "QuantumEthicalHandler",
            190
          ],
          [
            "class",
            "LegalComplianceLayer",
            258
          ],
          [
            "class",
            "LucasAGI",
            286
          ],
          [
            "function",
            "fetch_live_compliance_updates",
            104
          ],
          [
            "function",
            "compliance_score",
            109
          ],
          [
            "function",
            "check_compliance",
            116
          ],
          [
            "function",
            "log_violation",
            130
          ],
          [
            "function",
            "activate_safeguards",
            136
          ],
          [
            "function",
            "recalibrate_safeguards",
            143
          ],
          [
            "function",
            "initiate_emergency_shutdown",
            148
          ],
          [
            "function",
            "adapt_weights",
            171
          ],
          [
            "function",
            "get_priority_weights",
            184
          ],
          [
            "function",
            "create_ethical_circuit",
            198
          ],
          [
            "function",
            "measure_ethical_state",
            222
          ],
          [
            "function",
            "explain_decision",
            236
          ],
          [
            "function",
            "fallback_protocol",
            242
          ],
          [
            "function",
            "symbolic_fallback_ethics",
            247
          ],
          [
            "function",
            "human_review_required",
            254
          ],
          [
            "function",
            "validate_operation",
            267
          ],
          [
            "function",
            "check_transparency",
            274
          ],
          [
            "function",
            "check_data_protection",
            278
          ],
          [
            "function",
            "check_bias",
            282
          ],
          [
            "function",
            "play_sound",
            316
          ],
          [
            "function",
            "process_decision",
            343
          ],
          [
            "function",
            "recalibrate_autonomy",
            368
          ],
          [
            "function",
            "compute_system_health_factor",
            384
          ],
          [
            "function",
            "compute_context_entropy",
            388
          ],
          [
            "function",
            "adaptive_context_simplification",
            393
          ],
          [
            "function",
            "monitor_post_market",
            488
          ],
          [
            "function",
            "check_adversarial_input",
            496
          ],
          [
            "function",
            "assess_stakeholder_impact",
            502
          ],
          [
            "function",
            "modulate_emotional_state",
            511
          ]
        ],
        "creative_integration.py": [
          [
            "class",
            "QuantumCreativeBridge",
            61
          ],
          [
            "function",
            "get_quantum_status",
            181
          ],
          [
            "function",
            "get_system_status",
            146
          ]
        ],
        "layer.py": [
          [
            "class",
            "QuantumLikeState",
            39
          ],
          [
            "class",
            "QuantumBioConfig",
            114
          ],
          [
            "class",
            "QuantumBioOscillator",
            134
          ],
          [
            "function",
            "measure",
            71
          ],
          [
            "function",
            "entangle",
            81
          ],
          [
            "function",
            "oscillate",
            168
          ],
          [
            "function",
            "create_entanglement",
            240
          ],
          [
            "function",
            "apply_entanglement_effects",
            279
          ],
          [
            "function",
            "measure_quantum_property",
            336
          ],
          [
            "function",
            "evolve_quantum_like_state",
            408
          ],
          [
            "function",
            "get_oscillator_metrics",
            446
          ],
          [
            "function",
            "reset_oscillator",
            487
          ],
          [
            "function",
            "synchronize_with_rhythm",
            501
          ],
          [
            "function",
            "create_coherence_field",
            538
          ]
        ],
        "bio_system.py": [
          [
            "class",
            "MitochondrialQuantumBridge",
            51
          ],
          [
            "class",
            "QuantumSynapticGate",
            165
          ],
          [
            "class",
            "NeuroplasticityModulator",
            232
          ],
          [
            "class",
            "SelfAwareAgent",
            289
          ],
          [
            "class",
            "EnhancedMitochondrialQuantumBridge",
            404
          ],
          [
            "function",
            "evaluate_performance",
            301
          ],
          [
            "function",
            "calculate_coherence",
            323
          ],
          [
            "function",
            "adapt_models",
            346
          ],
          [
            "function",
            "get_self_assessment_report",
            376
          ],
          [
            "function",
            "cached_quantum_modulate",
            412
          ],
          [
            "function",
            "process_with_awareness",
            432
          ]
        ],
        "\u039bBot_quantum_security.py": [
          [
            "class",
            "QuantumThreat",
            74
          ],
          [
            "class",
            "SecurityAssessment",
            87
          ],
          [
            "class",
            "PostQuantumCryptographyEngine",
            98
          ],
          [
            "class",
            "BioSymbolicThreatDetector",
            161
          ],
          [
            "class",
            "QuantumVulnerabilityAnalyzer",
            243
          ],
          [
            "class",
            "AdaptiveSecurityOrchestrator",
            351
          ],
          [
            "class",
            "\u039bBotQuantumSecurityOrchestrator",
            410
          ],
          [
            "class",
            "LatticeBasedCrypto",
            508
          ],
          [
            "class",
            "MultivariateCrypto",
            511
          ],
          [
            "class",
            "HashBasedSignatures",
            514
          ],
          [
            "class",
            "CodeBasedCrypto",
            517
          ],
          [
            "class",
            "IsogenyCrypto",
            520
          ]
        ],
        "add_intelligent_descriptions.py": [
          [
            "function",
            "analyze_code_content",
            39
          ],
          [
            "function",
            "generate_intelligent_description",
            106
          ],
          [
            "function",
            "add_intelligent_description",
            180
          ],
          [
            "function",
            "main",
            223
          ]
        ],
        "safe_blockchain.py": [
          [
            "class",
            "QuantumSafeAuditBlockchain",
            42
          ]
        ],
        "processing_core.py": [
          [
            "class",
            "QuantumProcessingCore",
            53
          ],
          [
            "function",
            "get_quantum_like_state",
            383
          ],
          [
            "function",
            "get_quantum_metrics",
            395
          ]
        ],
        "main.py": [
          [
            "class",
            "QuantumConsciousness\u039bBot",
            47
          ],
          [
            "class",
            "ProcessRequest",
            74
          ],
          [
            "function",
            "get_consciousness_state",
            53
          ]
        ],
        "dast_orchestrator.py": [
          [
            "class",
            "DASTQuantumConfig",
            52
          ],
          [
            "class",
            "QuantumDASTOrchestrator",
            59
          ]
        ],
        "add_verbose_intelligent_descriptions.py": [
          [
            "function",
            "analyze_quantum_code",
            35
          ],
          [
            "function",
            "generate_verbose_description",
            128
          ],
          [
            "function",
            "add_verbose_description",
            269
          ],
          [
            "function",
            "main",
            314
          ],
          [
            "function",
            "find_good_candidates",
            375
          ],
          [
            "function",
            "estimate_costs",
            433
          ],
          [
            "function",
            "run_cost_analysis",
            475
          ]
        ],
        "bio_multi_orchestrator.py": [
          [
            "class",
            "TaskType",
            64
          ],
          [
            "class",
            "AGIBotType",
            77
          ],
          [
            "class",
            "AGIBotInstance",
            84
          ],
          [
            "class",
            "MultiAGIOrchestratorMetrics",
            97
          ],
          [
            "class",
            "MultiAGITask",
            111
          ],
          [
            "class",
            "MultiAGIResponse",
            125
          ],
          [
            "function",
            "lukhas_tier_required",
            161
          ],
          [
            "class",
            "MultiAGIOrchestrator",
            168
          ],
          [
            "function",
            "decorator",
            162
          ],
          [
            "function",
            "get_orchestration_system_status",
            582
          ]
        ],
        "quantum_glyph_registry.py": [
          [
            "class",
            "QuantumGlyphRegistry",
            21
          ],
          [
            "function",
            "register_glyph_state",
            28
          ],
          [
            "function",
            "get_glyph_state",
            35
          ],
          [
            "function",
            "list_glyphs",
            41
          ],
          [
            "function",
            "sync_cluster_states",
            52
          ],
          [
            "function",
            "recombine_dreams",
            62
          ]
        ],
        "add_template_reference.py": [
          [
            "function",
            "add_template_reference",
            27
          ],
          [
            "function",
            "main",
            61
          ]
        ],
        "quantum_consensus_system_enhanced.py": [
          [
            "class",
            "ConsensusAlgorithm",
            55
          ],
          [
            "class",
            "QuantumLikeStateType",
            62
          ],
          [
            "class",
            "ComponentState",
            71
          ],
          [
            "class",
            "ConsensusPhase",
            79
          ],
          [
            "class",
            "QuantumLikeState",
            89
          ],
          [
            "class",
            "ConsensusProposal",
            158
          ],
          [
            "class",
            "ComponentInfo",
            177
          ],
          [
            "class",
            "QuantumConsensusSystem",
            185
          ],
          [
            "class",
            "PartitionDetector",
            564
          ],
          [
            "class",
            "ConsensusMetrics",
            588
          ],
          [
            "function",
            "to_dict",
            112
          ],
          [
            "function",
            "from_dict",
            125
          ],
          [
            "function",
            "calculate_hash",
            137
          ],
          [
            "function",
            "calculate_distance",
            150
          ],
          [
            "function",
            "add_signature",
            168
          ],
          [
            "function",
            "add_vote",
            172
          ],
          [
            "function",
            "get_current_state",
            520
          ],
          [
            "function",
            "get_consensus_status",
            524
          ],
          [
            "function",
            "record_consensus",
            598
          ],
          [
            "function",
            "get_summary",
            612
          ]
        ],
        "api_manager.py": [
          [
            "class",
            "\u039biDProfile",
            62
          ],
          [
            "class",
            "QuantumAPIKey",
            73
          ],
          [
            "class",
            "VeriFoldGlyph",
            87
          ],
          [
            "class",
            "QuantumCrypto",
            96
          ],
          [
            "class",
            "VeriFoldGlyphGenerator",
            151
          ],
          [
            "class",
            "LUKHASAPIManager",
            289
          ],
          [
            "function",
            "demo_quantum_api_management",
            519
          ],
          [
            "function",
            "generate_quantum_key",
            101
          ],
          [
            "function",
            "derive_key_from_\u03bbid",
            110
          ],
          [
            "function",
            "encrypt_api_key",
            125
          ],
          [
            "function",
            "decrypt_api_key",
            139
          ],
          [
            "function",
            "create_animated_glyph",
            155
          ],
          [
            "function",
            "register_\u03bbid_profile",
            308
          ],
          [
            "function",
            "store_api_key",
            332
          ],
          [
            "function",
            "authenticate_with_glyph",
            373
          ],
          [
            "function",
            "generate_professional_verification_glyph",
            419
          ]
        ],
        "quantum_hub.py": [
          [
            "class",
            "QuantumHub",
            40
          ],
          [
            "function",
            "get_quantum_hub",
            274
          ],
          [
            "function",
            "register_service",
            217
          ],
          [
            "function",
            "get_service",
            222
          ],
          [
            "function",
            "list_services",
            226
          ],
          [
            "function",
            "register_event_handler",
            249
          ]
        ],
        "entanglement.py": [
          [
            "class",
            "QuantumEntanglement",
            40
          ],
          [
            "function",
            "create_quantum_component",
            184
          ],
          [
            "function",
            "get_status",
            167
          ]
        ],
        "phase_quantum_integration.py": [
          [
            "class",
            "QuantumIntegrationTestSuite",
            61
          ]
        ],
        "neural_symbolic_engine.py": [
          [
            "class",
            "QuantumNeuralSymbolicProcessor",
            46
          ]
        ],
        "quantum_bio_bulletproof_system.py": [
          [
            "class",
            "LukhasTestResult",
            67
          ],
          [
            "class",
            "LukhasReport",
            78
          ],
          [
            "function",
            "lukhas_tier_required",
            101
          ],
          [
            "class",
            "BulletproofAGISystem",
            108
          ],
          [
            "function",
            "decorator",
            102
          ],
          [
            "function",
            "create_fallback_components",
            139
          ],
          [
            "function",
            "test_quantum_caching",
            277
          ],
          [
            "function",
            "display_final_status",
            411
          ],
          [
            "class",
            "FallbackSimpleConfig",
            146
          ],
          [
            "class",
            "FallbackQuantumAttentionGate",
            153
          ],
          [
            "class",
            "FallbackSelfAwareAgent",
            163
          ],
          [
            "class",
            "FallbackMitochondrialQuantumBridge",
            170
          ],
          [
            "function",
            "to_dict",
            151
          ],
          [
            "function",
            "get_self_assessment_report",
            165
          ],
          [
            "function",
            "cached_quantum_modulate",
            185
          ]
        ],
        "neuro_symbolic_engine.py": [
          [
            "class",
            "QuantumInspiredAttention",
            50
          ],
          [
            "class",
            "CausalReasoningModule",
            271
          ],
          [
            "class",
            "QuantumNeuroSymbolicEngine",
            542
          ],
          [
            "function",
            "get_processing_stats",
            851
          ]
        ],
        "privacy/zero_knowledge_system.py": [
          [
            "class",
            "ZeroKnowledgePrivacyEngine",
            40
          ]
        ],
        "systems/quantum_entanglement.py": [
          [
            "class",
            "QuantumEntanglement",
            44
          ],
          [
            "function",
            "create_quantum_component",
            186
          ],
          [
            "function",
            "create_quantum_component",
            193
          ],
          [
            "function",
            "get_status",
            169
          ]
        ],
        "systems/quantum_processing_core.py": [
          [
            "class",
            "QuantumProcessingCore",
            53
          ],
          [
            "function",
            "get_quantum_like_state",
            383
          ],
          [
            "function",
            "get_quantum_metrics",
            395
          ]
        ],
        "systems/quantum_engine.py": [
          [
            "class",
            "Quantumoscillator",
            44
          ],
          [
            "class",
            "QuantumEngine",
            78
          ],
          [
            "function",
            "quantum_modulate",
            54
          ],
          [
            "function",
            "adjust_entanglement",
            68
          ],
          [
            "function",
            "process_quantum_like_state",
            89
          ],
          [
            "function",
            "get_status",
            117
          ]
        ],
        "systems/quantum_processor.py": [
          [
            "class",
            "QuantumInspiredProcessor",
            44
          ],
          [
            "function",
            "create_quantum_component",
            186
          ],
          [
            "function",
            "get_status",
            169
          ]
        ],
        "systems/quantum_validator.py": [
          [
            "class",
            "QuantumValidator",
            44
          ],
          [
            "function",
            "create_quantum_component",
            186
          ],
          [
            "function",
            "create_quantum_component",
            193
          ],
          [
            "function",
            "get_status",
            169
          ]
        ],
        "systems/bio_integration/multi_orchestrator.py": [
          [
            "class",
            "TaskType",
            68
          ],
          [
            "class",
            "AGIBotType",
            81
          ],
          [
            "class",
            "AGIBotInstance",
            88
          ],
          [
            "class",
            "MultiAGIOrchestratorMetrics",
            101
          ],
          [
            "class",
            "MultiAGITask",
            116
          ],
          [
            "class",
            "MultiAGIResponse",
            130
          ],
          [
            "class",
            "MultiAGIOrchestrator",
            144
          ],
          [
            "function",
            "get_orchestration_status",
            752
          ]
        ],
        "systems/bio_integration/connectivity_consolidator.py": [
          [
            "class",
            "ConnectivityState",
            54
          ],
          [
            "class",
            "ConnectivityMetrics",
            64
          ],
          [
            "class",
            "AGIConnectivityConfig",
            76
          ],
          [
            "class",
            "LambdaAGIEliteConnectivityConsolidator",
            98
          ]
        ],
        "systems/bio_integration/awareness/quantum_bio.py": [
          [
            "class",
            "MitochondrialQuantumBridge",
            37
          ],
          [
            "class",
            "QuantumSynapticGate",
            44
          ],
          [
            "class",
            "NeuroplasticityModulator",
            51
          ]
        ],
        "quantum_processing/quantum_engine.py": [
          [
            "class",
            "QuantumOscillator",
            17
          ],
          [
            "function",
            "quantum_modulate",
            27
          ],
          [
            "function",
            "adjust_entanglement",
            41
          ]
        ]
      }
    },
    {
      "system": "learning",
      "entity_count": 220,
      "class_count": 79,
      "function_count": 141,
      "files": 32,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/learning_activation.py",
      "entities_by_file": {
        "federated_meta_learning.py": [
          [
            "class",
            "FederatedModel",
            12
          ],
          [
            "class",
            "FederatedLearningManager",
            102
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            294
          ],
          [
            "class",
            "MetaLearningSystem",
            622
          ],
          [
            "function",
            "update_with_gradients",
            28
          ],
          [
            "function",
            "get_parameters",
            54
          ],
          [
            "function",
            "serialize",
            73
          ],
          [
            "function",
            "deserialize",
            87
          ],
          [
            "function",
            "register_model",
            119
          ],
          [
            "function",
            "get_model",
            139
          ],
          [
            "function",
            "contribute_gradients",
            159
          ],
          [
            "function",
            "save_model",
            242
          ],
          [
            "function",
            "load_models",
            253
          ],
          [
            "function",
            "get_client_status",
            267
          ],
          [
            "function",
            "log_interaction",
            314
          ],
          [
            "function",
            "reflect",
            338
          ],
          [
            "function",
            "get_status_report",
            592
          ],
          [
            "function",
            "optimize_learning_approach",
            674
          ],
          [
            "function",
            "incorporate_feedback",
            718
          ],
          [
            "function",
            "generate_learning_report",
            763
          ],
          [
            "function",
            "get_federated_model",
            789
          ],
          [
            "function",
            "trigger_reflection",
            802
          ]
        ],
        "learning_gateway.py": [
          [
            "class",
            "LearningRequest",
            14
          ],
          [
            "class",
            "LearningResponse",
            28
          ],
          [
            "class",
            "LearningGatewayInterface",
            36
          ],
          [
            "class",
            "LearningGateway",
            63
          ],
          [
            "function",
            "get_learning_gateway",
            147
          ]
        ],
        "service.py": [
          [
            "class",
            "LearningService",
            58
          ],
          [
            "function",
            "learn_from_data",
            533
          ],
          [
            "function",
            "adapt_behavior",
            544
          ],
          [
            "function",
            "synthesize_knowledge",
            555
          ],
          [
            "function",
            "learn_from_data",
            96
          ],
          [
            "function",
            "adapt_behavior",
            161
          ],
          [
            "function",
            "synthesize_knowledge",
            222
          ],
          [
            "function",
            "transfer_learning",
            276
          ],
          [
            "function",
            "get_learning_metrics",
            331
          ],
          [
            "class",
            "IdentityClient",
            41
          ],
          [
            "function",
            "verify_user_access",
            43
          ],
          [
            "function",
            "check_consent",
            47
          ],
          [
            "function",
            "log_activity",
            51
          ]
        ],
        "learning_hub.py": [
          [
            "class",
            "LearningHub",
            13
          ],
          [
            "function",
            "get_learning_hub",
            324
          ],
          [
            "function",
            "register_service",
            189
          ],
          [
            "function",
            "get_service",
            194
          ],
          [
            "function",
            "register_event_handler",
            198
          ],
          [
            "function",
            "register_learning_feedback",
            263
          ],
          [
            "function",
            "get_learning_metrics",
            312
          ],
          [
            "function",
            "reset_learning_metrics",
            316
          ]
        ],
        "plugin_learning_engine.py": [
          [
            "class",
            "ContentType",
            43
          ],
          [
            "class",
            "UserLevel",
            50
          ],
          [
            "class",
            "GenerationConfig",
            57
          ],
          [
            "class",
            "PluginLearningEngine",
            66
          ],
          [
            "function",
            "get_optimal_complexity",
            211
          ]
        ],
        "system.py": [
          [
            "class",
            "LearningType",
            48
          ],
          [
            "class",
            "LearningStrategy",
            60
          ],
          [
            "class",
            "LearningEpisode",
            73
          ],
          [
            "class",
            "MetaLearningResult",
            90
          ],
          [
            "class",
            "BaseMetaLearner",
            102
          ],
          [
            "class",
            "ModelAgnosticMetaLearner",
            128
          ],
          [
            "class",
            "FewShotLearner",
            379
          ],
          [
            "class",
            "ContinualLearner",
            525
          ],
          [
            "class",
            "AdvancedLearningSystem",
            654
          ]
        ],
        "services.py": [
          [
            "class",
            "LearningService",
            12
          ],
          [
            "function",
            "create_learning_service",
            206
          ]
        ],
        "metalearningenhancementsystem.py": [
          [
            "class",
            "Enhancementmode",
            60
          ],
          [
            "class",
            "Systemintegrationstatus",
            70
          ],
          [
            "class",
            "MetaLearningEnhancementsystem",
            83
          ]
        ],
        "usage_learning.py": [
          [
            "class",
            "UserInteraction",
            31
          ],
          [
            "class",
            "InteractionPattern",
            47
          ],
          [
            "class",
            "UsageBasedLearning",
            73
          ],
          [
            "function",
            "update",
            60
          ],
          [
            "function",
            "record_interaction",
            92
          ],
          [
            "function",
            "identify_patterns",
            111
          ],
          [
            "function",
            "update_user_preferences",
            138
          ],
          [
            "function",
            "get_document_effectiveness",
            149
          ],
          [
            "function",
            "get_popular_sequences",
            163
          ],
          [
            "function",
            "recommend_next_docs",
            173
          ]
        ],
        "federated_learning_system.py": [
          [
            "class",
            "LukhasFederatedModel",
            84
          ],
          [
            "class",
            "LukhasFederatedLearningManager",
            222
          ],
          [
            "function",
            "initialize_lukhas_federated_learning",
            482
          ],
          [
            "function",
            "update_with_gradients",
            111
          ],
          [
            "function",
            "get_parameters",
            155
          ],
          [
            "function",
            "serialize",
            179
          ],
          [
            "function",
            "deserialize",
            199
          ],
          [
            "function",
            "register_model",
            252
          ],
          [
            "function",
            "get_model",
            282
          ],
          [
            "function",
            "contribute_gradients",
            309
          ],
          [
            "function",
            "save_model",
            395
          ],
          [
            "function",
            "load_models",
            410
          ],
          [
            "function",
            "get_system_status",
            440
          ]
        ],
        "tutor_learning_engine.py": [
          [
            "class",
            "TestTutorLearningEngine",
            20
          ],
          [
            "class",
            "TestTutorLearningEngine",
            24
          ],
          [
            "function",
            "skg",
            33
          ],
          [
            "function",
            "tutor_engine",
            38
          ],
          [
            "function",
            "sample_config",
            47
          ]
        ],
        "meta_learning.py": [
          [
            "class",
            "LearningMetrics",
            32
          ],
          [
            "class",
            "MetaLearningSystem",
            45
          ],
          [
            "function",
            "incorporate_feedback",
            90
          ]
        ],
        "federated_learning.py": [
          [
            "class",
            "FederatedLearningManager",
            6
          ],
          [
            "function",
            "register_model",
            17
          ],
          [
            "function",
            "get_model",
            31
          ],
          [
            "function",
            "contribute_gradients",
            47
          ]
        ],
        "meta_learning_adapter.py": [
          [
            "class",
            "LearningPhase",
            45
          ],
          [
            "class",
            "FederatedState",
            55
          ],
          [
            "class",
            "MetaLearningMetrics",
            68
          ],
          [
            "class",
            "LearningRateBounds",
            95
          ],
          [
            "class",
            "MetaLearningEnhancementAdapter",
            108
          ]
        ],
        "exponential_learning.py": [
          [
            "class",
            "ExponentialLearningSystem",
            76
          ],
          [
            "function",
            "incorporate_experience",
            95
          ]
        ],
        "adaptive_meta_learning.py": [
          [
            "class",
            "AdaptiveMetaLearningSystem",
            66
          ],
          [
            "function",
            "optimize_learning_approach",
            102
          ],
          [
            "function",
            "incorporate_feedback",
            150
          ],
          [
            "function",
            "generate_learning_report",
            181
          ],
          [
            "function",
            "demo_meta_learning",
            562
          ]
        ],
        "_dict_learning.py": [
          [
            "function",
            "sparse_encode",
            177
          ],
          [
            "function",
            "dict_learning_online",
            498
          ],
          [
            "function",
            "dict_learning",
            570
          ],
          [
            "class",
            "_BaseSparseCoding",
            623
          ],
          [
            "class",
            "SparseCoder",
            725
          ],
          [
            "class",
            "DictionaryLearning",
            795
          ],
          [
            "class",
            "MiniBatchDictionaryLearning",
            929
          ],
          [
            "function",
            "transform",
            680
          ],
          [
            "function",
            "inverse_transform",
            715
          ],
          [
            "function",
            "fit",
            754
          ],
          [
            "function",
            "transform",
            762
          ],
          [
            "function",
            "inverse_transform",
            769
          ],
          [
            "function",
            "n_components_",
            781
          ],
          [
            "function",
            "n_features_in_",
            785
          ],
          [
            "function",
            "fit",
            868
          ],
          [
            "function",
            "fit_transform",
            878
          ],
          [
            "function",
            "fit",
            1170
          ],
          [
            "function",
            "partial_fit",
            1220
          ]
        ],
        "meta_learning_recovery.py": [
          [
            "class",
            "MetaLearningRecovery",
            36
          ],
          [
            "function",
            "main",
            287
          ],
          [
            "function",
            "explore_meta_learning_directory",
            65
          ],
          [
            "function",
            "convert_to_lukhas_format",
            116
          ],
          [
            "function",
            "determine_target_directory",
            160
          ],
          [
            "function",
            "recover_meta_learning_components",
            183
          ],
          [
            "function",
            "execute_recovery",
            245
          ]
        ],
        "federated_colony_learning.py": [
          [
            "class",
            "LearningAgent",
            13
          ],
          [
            "class",
            "FederatedLearningColony",
            38
          ]
        ],
        "tutor.py": [
          [
            "class",
            "LearningStyle",
            16
          ],
          [
            "class",
            "DifficultyLevel",
            22
          ],
          [
            "class",
            "TutorMessageType",
            28
          ],
          [
            "class",
            "LearningObjective",
            35
          ],
          [
            "class",
            "TutorMessage",
            43
          ],
          [
            "class",
            "LearningSession",
            51
          ],
          [
            "class",
            "TutorEngine",
            66
          ],
          [
            "class",
            "Config",
            63
          ]
        ],
        "embodied_thought/generative_reflex.py": [
          [
            "class",
            "GenerativeReflex",
            19
          ],
          [
            "function",
            "load_reflex",
            29
          ],
          [
            "function",
            "generate_response",
            36
          ]
        ],
        "meta_adaptive/adaptive_interface_generator.py": [
          [
            "class",
            "AdaptiveInterfaceGenerator",
            11
          ],
          [
            "function",
            "generate_interface",
            32
          ]
        ],
        "meta_adaptive/meta_learning.py": [
          [
            "class",
            "FederatedModel",
            12
          ],
          [
            "class",
            "FederatedLearningManager",
            102
          ],
          [
            "class",
            "ReflectiveIntrospectionSystem",
            294
          ],
          [
            "class",
            "MetaLearningSystem",
            622
          ],
          [
            "function",
            "update_with_gradients",
            28
          ],
          [
            "function",
            "get_parameters",
            54
          ],
          [
            "function",
            "serialize",
            73
          ],
          [
            "function",
            "deserialize",
            87
          ],
          [
            "function",
            "register_model",
            119
          ],
          [
            "function",
            "get_model",
            139
          ],
          [
            "function",
            "contribute_gradients",
            159
          ],
          [
            "function",
            "save_model",
            242
          ],
          [
            "function",
            "load_models",
            253
          ],
          [
            "function",
            "get_client_status",
            267
          ],
          [
            "function",
            "log_interaction",
            314
          ],
          [
            "function",
            "reflect",
            338
          ],
          [
            "function",
            "get_status_report",
            592
          ],
          [
            "function",
            "optimize_learning_approach",
            674
          ],
          [
            "function",
            "incorporate_feedback",
            718
          ],
          [
            "function",
            "generate_learning_report",
            763
          ],
          [
            "function",
            "get_federated_model",
            789
          ],
          [
            "function",
            "trigger_reflection",
            802
          ]
        ],
        "meta_learning/federated_integration.py": [
          [
            "class",
            "Federationstrategy",
            37
          ],
          [
            "class",
            "Privacylevel",
            45
          ],
          [
            "class",
            "Federatednode",
            53
          ],
          [
            "class",
            "Federatedlearningupdate",
            74
          ],
          [
            "class",
            "Federatedlearningintegration",
            84
          ],
          [
            "function",
            "enhance_meta_learning_with_federation",
            746
          ],
          [
            "function",
            "integrate_with_enhancement_system",
            125
          ],
          [
            "function",
            "register_node",
            136
          ],
          [
            "function",
            "share_learning_insight",
            171
          ],
          [
            "function",
            "receive_federation_updates",
            210
          ],
          [
            "function",
            "coordinate_learning_rates",
            231
          ],
          [
            "function",
            "enhance_symbolic_reasoning_federation",
            262
          ],
          [
            "function",
            "synchronize_federation",
            291
          ],
          [
            "function",
            "get_federation_status",
            336
          ],
          [
            "function",
            "enhance_existing_meta_learning_system",
            369
          ]
        ],
        "meta_learning/meta_core.py": [
          [
            "class",
            "MetaCore",
            12
          ]
        ],
        "meta_learning/symbolic_feedback.py": [
          [
            "class",
            "Feedbacktype",
            44
          ],
          [
            "class",
            "Symboliccontext",
            52
          ],
          [
            "class",
            "Intentnodehistory",
            62
          ],
          [
            "class",
            "Memoriasnapshot",
            75
          ],
          [
            "class",
            "Dreamreplayrecord",
            87
          ],
          [
            "class",
            "Symbolicfeedbackloop",
            100
          ],
          [
            "class",
            "Symbolicfeedbacksystem",
            113
          ],
          [
            "function",
            "create_integrated_symbolic_feedback_system",
            800
          ],
          [
            "function",
            "simulate_intent_node_integration",
            810
          ],
          [
            "function",
            "log_intent_node_interaction",
            156
          ],
          [
            "function",
            "log_memoria_snapshot",
            210
          ],
          [
            "function",
            "log_dream_replay",
            259
          ],
          [
            "function",
            "create_symbolic_feedback_loop",
            315
          ],
          [
            "function",
            "execute_symbolic_rehearsal",
            384
          ],
          [
            "function",
            "get_optimization_insights",
            434
          ]
        ],
        "systems/duet_conductor.py": [
          [
            "function",
            "manage_voice_handoff",
            21
          ]
        ],
        "systems/intent_language.py": [
          [
            "function",
            "interpret_intent",
            18
          ],
          [
            "function",
            "log_interpretation",
            25
          ]
        ],
        "systems/core_system.py": [
          [
            "function",
            "process_user_input",
            18
          ]
        ],
        "systems/symbolic_voice_loop.py": [
          [
            "function",
            "speak",
            12
          ],
          [
            "function",
            "reflect_with_lukhas",
            28
          ],
          [
            "function",
            "listen_and_log_feedback",
            36
          ],
          [
            "function",
            "generate_dream_outcomes",
            68
          ],
          [
            "function",
            "lukhas_emotional_response",
            74
          ]
        ],
        "systems/voice_duet.py": [
          [
            "function",
            "synthesize_voice",
            23
          ]
        ],
        "aid/dream_engine/narration_controller.py": [
          [
            "function",
            "fetch_narration_entries",
            27
          ],
          [
            "function",
            "load_user_settings",
            34
          ],
          [
            "function",
            "filter_narration_queue",
            52
          ]
        ]
      }
    },
    {
      "system": "ethics",
      "entity_count": 462,
      "class_count": 152,
      "function_count": 310,
      "files": 69,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/ethics_activation.py",
      "entities_by_file": {
        "compliance_engine.py": [
          [
            "class",
            "ComplianceEngine",
            26
          ],
          [
            "function",
            "anonymize_metadata",
            75
          ],
          [
            "function",
            "should_retain_data",
            121
          ],
          [
            "function",
            "check_voice_data_compliance",
            129
          ],
          [
            "function",
            "validate_content_against_ethical_constraints",
            197
          ],
          [
            "function",
            "generate_compliance_report",
            266
          ],
          [
            "function",
            "get_compliance_status",
            306
          ],
          [
            "function",
            "detect_regulatory_region",
            321
          ],
          [
            "function",
            "update_compliance_settings",
            371
          ],
          [
            "function",
            "get_audit_trail",
            445
          ],
          [
            "function",
            "check_module_compliance",
            820
          ],
          [
            "function",
            "add_laplace_noise",
            690
          ]
        ],
        "service.py": [
          [
            "class",
            "EthicsService",
            40
          ],
          [
            "function",
            "assess_action",
            394
          ],
          [
            "function",
            "check_compliance",
            399
          ],
          [
            "function",
            "evaluate_safety",
            404
          ],
          [
            "function",
            "assess_action",
            53
          ],
          [
            "function",
            "check_compliance",
            100
          ],
          [
            "function",
            "evaluate_safety",
            137
          ],
          [
            "function",
            "audit_decision",
            178
          ],
          [
            "class",
            "IdentityClient",
            31
          ],
          [
            "function",
            "verify_user_access",
            32
          ],
          [
            "function",
            "check_consent",
            34
          ],
          [
            "function",
            "log_activity",
            36
          ]
        ],
        "meta_ethics_governor.py": [
          [
            "class",
            "EthicalFramework",
            72
          ],
          [
            "class",
            "EthicalVerdict",
            85
          ],
          [
            "class",
            "Severity",
            96
          ],
          [
            "class",
            "CulturalContext",
            105
          ],
          [
            "class",
            "EthicalPrinciple",
            122
          ],
          [
            "class",
            "EthicalDecision",
            138
          ],
          [
            "class",
            "EthicalEvaluation",
            152
          ],
          [
            "class",
            "EthicalFrameworkEngine",
            170
          ],
          [
            "class",
            "DeontologicalEngine",
            198
          ],
          [
            "class",
            "ConsequentialistEngine",
            315
          ],
          [
            "class",
            "MetaEthicsGovernor",
            389
          ],
          [
            "function",
            "ethical_checkpoint",
            710
          ],
          [
            "function",
            "load_principles",
            184
          ],
          [
            "function",
            "add_principle",
            188
          ],
          [
            "function",
            "load_principles",
            310
          ],
          [
            "function",
            "load_principles",
            384
          ],
          [
            "function",
            "add_ethical_engine",
            637
          ],
          [
            "function",
            "add_event_callback",
            642
          ],
          [
            "function",
            "get_human_review_queue",
            649
          ],
          [
            "function",
            "resolve_human_review",
            653
          ],
          [
            "function",
            "get_status",
            665
          ],
          [
            "function",
            "decorator",
            712
          ],
          [
            "function",
            "instrument_reasoning",
            57
          ],
          [
            "function",
            "get_srd",
            61
          ]
        ],
        "monitor.py": [
          [
            "function",
            "ethics_drift_detect",
            13
          ],
          [
            "function",
            "log_ethics_event",
            39
          ],
          [
            "function",
            "log_self_reflection",
            63
          ],
          [
            "function",
            "self_reflection_report",
            73
          ]
        ],
        "ethical_guardian.py": [
          [
            "function",
            "ethical_check",
            22
          ]
        ],
        "oscillating_conscience.py": [
          [
            "class",
            "OscillatingConscience",
            10
          ],
          [
            "function",
            "update",
            18
          ]
        ],
        "compliance.py": [
          [
            "class",
            "EthicsViolationType",
            23
          ],
          [
            "class",
            "ComplianceFramework",
            30
          ],
          [
            "class",
            "ComplianceViolation",
            37
          ],
          [
            "class",
            "EthicsValidationResult",
            49
          ],
          [
            "class",
            "EthicsComplianceEngine",
            57
          ],
          [
            "function",
            "get_plugin_risk_score",
            160
          ],
          [
            "function",
            "get_violation_history",
            164
          ],
          [
            "function",
            "get_compliance_report",
            173
          ]
        ],
        "intrinsic_governor.py": [
          [
            "class",
            "IntrinsicEthicalGovernor",
            4
          ]
        ],
        "compliance_engine20250503213400_p95.py": [
          [
            "class",
            "Complianceengine",
            28
          ],
          [
            "function",
            "anonymize_metadata",
            57
          ],
          [
            "function",
            "should_retain_data",
            88
          ],
          [
            "function",
            "check_voice_data_compliance",
            96
          ],
          [
            "function",
            "validate_content_against_ethical_constraints",
            150
          ],
          [
            "function",
            "generate_compliance_report",
            195
          ],
          [
            "function",
            "get_compliance_status",
            215
          ]
        ],
        "compliance_simple.py": [
          [
            "class",
            "EthicsViolationType",
            23
          ],
          [
            "class",
            "ComplianceFramework",
            30
          ],
          [
            "class",
            "ComplianceViolation",
            37
          ],
          [
            "class",
            "EthicsValidationResult",
            49
          ],
          [
            "class",
            "EthicsComplianceEngine",
            57
          ],
          [
            "function",
            "get_plugin_risk_score",
            160
          ],
          [
            "function",
            "get_violation_history",
            164
          ],
          [
            "function",
            "get_compliance_report",
            173
          ]
        ],
        "batch_guard.py": [
          [
            "class",
            "EthicsLevel",
            12
          ],
          [
            "class",
            "ComplianceStatus",
            17
          ],
          [
            "class",
            "EthicsResult",
            24
          ],
          [
            "class",
            "EthicsBatchGuard",
            33
          ],
          [
            "function",
            "create_ethics_guard",
            260
          ],
          [
            "function",
            "validate_batch_ethics",
            58
          ],
          [
            "function",
            "generate_ethics_report",
            213
          ]
        ],
        "tier_enforcer.py": [
          [
            "function",
            "tier_required",
            28
          ],
          [
            "function",
            "collapse_kernel",
            56
          ],
          [
            "function",
            "decorator",
            40
          ],
          [
            "function",
            "wrapper",
            42
          ]
        ],
        "policy_manager.py": [
          [
            "function",
            "determine_active_regulations",
            60
          ],
          [
            "function",
            "log_active_regulations",
            84
          ]
        ],
        "audit_ethics_monitor.py": [
          [
            "function",
            "main",
            11
          ]
        ],
        "ethical_drift_detector.py": [
          [
            "function",
            "load_ethics_config",
            45
          ],
          [
            "function",
            "calculate_weighted_drift_score",
            64
          ],
          [
            "function",
            "apply_violation_tagging",
            77
          ],
          [
            "function",
            "check_escalation_requirements",
            125
          ],
          [
            "function",
            "enrich_trace_metadata",
            173
          ],
          [
            "function",
            "export_ethics_report",
            191
          ],
          [
            "function",
            "detect_ethical_drift",
            214
          ],
          [
            "function",
            "get_system_capabilities",
            328
          ],
          [
            "function",
            "generate_collapse_hash",
            36
          ],
          [
            "function",
            "crypto_trace_index",
            41
          ]
        ],
        "community_feedback.py": [
          [
            "function",
            "load_rules",
            8
          ],
          [
            "function",
            "save_rules",
            14
          ],
          [
            "function",
            "apply_proposal",
            18
          ]
        ],
        "redteam_sim.py": [
          [
            "class",
            "HashableDict",
            25
          ],
          [
            "function",
            "parse_prompts_from_file",
            34
          ],
          [
            "function",
            "run_redteam_simulation",
            42
          ],
          [
            "function",
            "main",
            71
          ]
        ],
        "_spikethickness.py": [
          [
            "class",
            "SpikethicknessValidator",
            7
          ]
        ],
        "decision_node.py": [
          [
            "class",
            "EthicsNode",
            29
          ],
          [
            "function",
            "evaluate_action",
            128
          ],
          [
            "function",
            "get_principle_weights",
            565
          ],
          [
            "function",
            "set_principle_weight",
            574
          ],
          [
            "function",
            "analyze_ethical_trends",
            596
          ],
          [
            "function",
            "evaluate_content",
            640
          ],
          [
            "function",
            "process_message",
            725
          ]
        ],
        "ethics_guard.py": [
          [
            "class",
            "LegalComplianceAssistant",
            11
          ],
          [
            "function",
            "check_content_safety",
            53
          ],
          [
            "function",
            "check_privacy_compliance",
            106
          ],
          [
            "function",
            "ethical_review",
            153
          ],
          [
            "function",
            "comprehensive_compliance_check",
            194
          ],
          [
            "function",
            "get_compliance_report",
            227
          ],
          [
            "function",
            "update_rules",
            265
          ],
          [
            "function",
            "anonymize_data",
            292
          ]
        ],
        "export_report.py": [
          [
            "class",
            "EthicsReportExporter",
            26
          ],
          [
            "function",
            "export_ethics_report",
            369
          ],
          [
            "function",
            "export_comprehensive_ethics_report",
            380
          ],
          [
            "function",
            "export_multi_format",
            41
          ],
          [
            "function",
            "generate_dashboard_data",
            241
          ],
          [
            "function",
            "generate_audit_trail",
            289
          ],
          [
            "function",
            "generate_governance_summary",
            316
          ]
        ],
        "quantum_mesh_integrator.py": [
          [
            "class",
            "EthicsRiskLevel",
            25
          ],
          [
            "class",
            "EthicsSignalType",
            33
          ],
          [
            "class",
            "EthicalState",
            42
          ],
          [
            "class",
            "EthicsSignal",
            60
          ],
          [
            "class",
            "PhaseEntanglement",
            69
          ],
          [
            "class",
            "QuantumEthicsMeshIntegrator",
            78
          ],
          [
            "function",
            "integrate_ethics_mesh",
            120
          ],
          [
            "function",
            "calculate_phase_entanglement_matrix",
            193
          ],
          [
            "function",
            "detect_ethics_phase_conflict",
            296
          ],
          [
            "function",
            "get_mesh_status",
            644
          ]
        ],
        "ethical_auditor.py": [
          [
            "class",
            "AuditContext",
            73
          ],
          [
            "class",
            "AuditResult",
            85
          ],
          [
            "class",
            "EliteEthicalAuditor",
            103
          ],
          [
            "function",
            "get_audit_summary",
            492
          ]
        ],
        "self_reflective_debugger.py": [
          [
            "class",
            "EnhancedAnomalyType",
            134
          ],
          [
            "class",
            "CognitiveHealthStatus",
            167
          ],
          [
            "class",
            "CognitiveState",
            176
          ],
          [
            "class",
            "EnhancedReasoningChain",
            202
          ],
          [
            "class",
            "EnhancedSelfReflectiveDebugger",
            224
          ],
          [
            "function",
            "stop_monitoring",
            339
          ],
          [
            "function",
            "begin_enhanced_reasoning_chain",
            349
          ],
          [
            "function",
            "get_cognitive_health_status",
            3150
          ],
          [
            "function",
            "get_enhanced_metrics",
            3167
          ],
          [
            "function",
            "get_anomaly_summary",
            3178
          ],
          [
            "class",
            "AnomalyType",
            64
          ],
          [
            "class",
            "SeverityLevel",
            76
          ],
          [
            "class",
            "ReviewTrigger",
            83
          ],
          [
            "class",
            "ReasoningStep",
            93
          ],
          [
            "class",
            "ReasoningAnomaly",
            106
          ]
        ],
        "engine.py": [
          [
            "class",
            "EthicsEngine",
            11
          ],
          [
            "function",
            "evaluate",
            16
          ],
          [
            "function",
            "interpret_score",
            25
          ]
        ],
        "guardian.py": [
          [
            "class",
            "DefaultGuardian",
            10
          ],
          [
            "function",
            "assess_risk",
            11
          ]
        ],
        "utils.py": [
          [
            "class",
            "EthicsUtils",
            10
          ],
          [
            "function",
            "validate_content_ethics",
            14
          ],
          [
            "function",
            "check_compliance_status",
            24
          ],
          [
            "function",
            "generate_compliance_report",
            34
          ],
          [
            "function",
            "anonymize_metadata",
            44
          ]
        ],
        "glyph_ethics_validator.py": [
          [
            "class",
            "EthicalViolationType",
            52
          ],
          [
            "class",
            "ValidationResult",
            64
          ],
          [
            "class",
            "EthicalConstraint",
            73
          ],
          [
            "class",
            "ValidationReport",
            91
          ],
          [
            "class",
            "GlyphEthicsValidator",
            115
          ],
          [
            "function",
            "is_applicable",
            84
          ],
          [
            "function",
            "is_approved",
            105
          ],
          [
            "function",
            "is_safe",
            109
          ],
          [
            "function",
            "validate_glyph_creation",
            142
          ],
          [
            "function",
            "validate_glyph_mutation",
            212
          ],
          [
            "function",
            "validate_glyph_fusion",
            279
          ],
          [
            "function",
            "validate_glyph_decay",
            346
          ],
          [
            "function",
            "get_validation_statistics",
            960
          ]
        ],
        "orchestrator.py": [
          [
            "class",
            "EthicsMode",
            70
          ],
          [
            "class",
            "EthicsConfiguration",
            79
          ],
          [
            "class",
            "EthicsAuditEntry",
            94
          ],
          [
            "class",
            "UnifiedEthicsOrchestrator",
            109
          ],
          [
            "function",
            "get_ethics_orchestrator",
            538
          ],
          [
            "function",
            "ethical_checkpoint",
            553
          ],
          [
            "function",
            "get_status",
            473
          ],
          [
            "function",
            "get_audit_trail",
            504
          ],
          [
            "function",
            "configure",
            524
          ],
          [
            "function",
            "decorator",
            555
          ]
        ],
        "governance_checker.py": [
          [
            "function",
            "is_fine_tunable",
            31
          ],
          [
            "function",
            "validate_symbolic_integrity",
            36
          ],
          [
            "function",
            "log_governance_trace",
            61
          ]
        ],
        "hitlo_bridge.py": [
          [
            "class",
            "EthicsEscalationRule",
            61
          ],
          [
            "class",
            "EthicsHITLOBridge",
            97
          ],
          [
            "function",
            "create_ethics_hitlo_bridge",
            493
          ],
          [
            "function",
            "should_escalate",
            72
          ],
          [
            "function",
            "add_escalation_rule",
            166
          ],
          [
            "function",
            "should_escalate_evaluation",
            172
          ],
          [
            "function",
            "get_metrics",
            429
          ],
          [
            "function",
            "configure_human_oversight",
            449
          ],
          [
            "function",
            "configure_oversight",
            470
          ]
        ],
        "extreme_ethical_testing.py": [
          [
            "class",
            "ExtremEthicalTesting",
            30
          ]
        ],
        "hitlo_bridge_simple.py": [
          [
            "class",
            "HITLOBridge",
            11
          ],
          [
            "function",
            "configure_human_oversight",
            18
          ],
          [
            "function",
            "configure_oversight",
            39
          ]
        ],
        "meg_guard.py": [
          [
            "class",
            "MEGConfig",
            36
          ],
          [
            "class",
            "MEG",
            46
          ],
          [
            "function",
            "demo_meg_usage",
            236
          ],
          [
            "function",
            "guard",
            111
          ],
          [
            "function",
            "get_stats",
            202
          ],
          [
            "function",
            "temporary_disable_ethics",
            216
          ],
          [
            "function",
            "critical_operation",
            246
          ],
          [
            "function",
            "decorator",
            125
          ],
          [
            "function",
            "sync_wrapper",
            185
          ]
        ],
        "ethics.py": [
          [
            "function",
            "main",
            28
          ]
        ],
        "ethical_reasoning_system.py": [
          [
            "class",
            "EthicalFramework",
            57
          ],
          [
            "class",
            "MoralPrinciple",
            68
          ],
          [
            "class",
            "StakeholderType",
            82
          ],
          [
            "class",
            "EthicalDilemmaType",
            94
          ],
          [
            "class",
            "MoralJudgment",
            107
          ],
          [
            "class",
            "ValueAlignment",
            125
          ],
          [
            "class",
            "EthicalConstraint",
            139
          ],
          [
            "class",
            "DeontologicalReasoner",
            153
          ],
          [
            "class",
            "ConsequentialistReasoner",
            514
          ],
          [
            "class",
            "ValueAlignmentSystem",
            886
          ],
          [
            "class",
            "EthicalReasoningSystem",
            1286
          ]
        ],
        "meg_openai_guard.py": [
          [
            "function",
            "meg_chat_completion",
            48
          ],
          [
            "function",
            "meg_chat_completion_critical",
            67
          ],
          [
            "function",
            "meg_chat_completion_extended",
            86
          ],
          [
            "function",
            "meg_chat_completion_long",
            105
          ],
          [
            "function",
            "meg_generate_text",
            162
          ],
          [
            "function",
            "meg_complete_with_system",
            201
          ],
          [
            "class",
            "MEGChatCompletion",
            240
          ],
          [
            "function",
            "patch_openai_with_meg",
            254
          ],
          [
            "function",
            "unpatch_openai",
            277
          ],
          [
            "function",
            "create",
            244
          ]
        ],
        "meg_bridge.py": [
          [
            "class",
            "MEGPolicyBridge",
            23
          ],
          [
            "function",
            "create_meg_bridge",
            278
          ],
          [
            "function",
            "ethics_decision_to_meg_decision",
            41
          ],
          [
            "function",
            "meg_evaluation_to_ethics_evaluation",
            100
          ],
          [
            "function",
            "get_cultural_context_info",
            240
          ],
          [
            "function",
            "get_meg_status",
            246
          ],
          [
            "function",
            "add_meg_callback",
            256
          ],
          [
            "function",
            "get_human_review_queue",
            260
          ]
        ],
        "ethical_evaluator.py": [
          [
            "class",
            "EthicalEvaluator",
            3
          ],
          [
            "class",
            "CollapseEngine",
            13
          ],
          [
            "class",
            "Memoria",
            19
          ],
          [
            "function",
            "evaluate",
            4
          ],
          [
            "function",
            "collapse",
            14
          ],
          [
            "function",
            "store",
            22
          ],
          [
            "function",
            "trace",
            31
          ]
        ],
        "compliance_validator.py": [
          [
            "class",
            "ComplianceValidator",
            27
          ],
          [
            "function",
            "create_governance_component",
            215
          ],
          [
            "function",
            "get_status",
            155
          ],
          [
            "function",
            "validate",
            165
          ]
        ],
        "bases.py": [
          [
            "class",
            "ComplianceEngine",
            11
          ],
          [
            "class",
            "ComplianceFramework",
            40
          ],
          [
            "class",
            "ComplianceViolation",
            64
          ],
          [
            "function",
            "add_compliance_rule",
            19
          ],
          [
            "function",
            "check_compliance",
            23
          ],
          [
            "function",
            "add_rule",
            48
          ],
          [
            "function",
            "validate_action",
            52
          ],
          [
            "function",
            "to_dict",
            74
          ]
        ],
        "stabilization/tuner.py": [
          [
            "class",
            "StabilizationAction",
            37
          ],
          [
            "class",
            "EntanglementTrend",
            49
          ],
          [
            "class",
            "SymbolicStabilizer",
            112
          ],
          [
            "class",
            "AdaptiveEntanglementStabilizer",
            224
          ],
          [
            "function",
            "main",
            708
          ],
          [
            "function",
            "add_datapoint",
            58
          ],
          [
            "function",
            "get_trend_slope",
            67
          ],
          [
            "function",
            "is_unstable",
            95
          ],
          [
            "function",
            "get_stabilizer",
            204
          ],
          [
            "function",
            "get_applicable_stabilizers",
            209
          ],
          [
            "function",
            "monitor_entanglement",
            260
          ],
          [
            "function",
            "detect_instability",
            382
          ],
          [
            "function",
            "select_stabilizers",
            438
          ],
          [
            "function",
            "apply_symbolic_correction",
            503
          ],
          [
            "function",
            "emit_tuning_log",
            626
          ],
          [
            "function",
            "get_stabilization_status",
            689
          ]
        ],
        "tools/quantum_mesh_visualizer.py": [
          [
            "class",
            "QuantumMeshVisualizer",
            59
          ],
          [
            "function",
            "main",
            997
          ],
          [
            "function",
            "load_entanglement_data",
            95
          ],
          [
            "function",
            "generate_entanglement_heatmap",
            291
          ],
          [
            "function",
            "plot_phase_synchronization",
            388
          ],
          [
            "function",
            "list_active_conflict_pairs",
            468
          ],
          [
            "function",
            "generate_interactive_dashboard",
            538
          ],
          [
            "function",
            "export_visual_summary",
            752
          ]
        ],
        "governor/lambda_governor.py": [
          [
            "class",
            "ActionDecision",
            69
          ],
          [
            "class",
            "EscalationSource",
            79
          ],
          [
            "class",
            "EscalationPriority",
            91
          ],
          [
            "class",
            "EscalationSignal",
            102
          ],
          [
            "class",
            "ArbitrationResponse",
            153
          ],
          [
            "class",
            "InterventionExecution",
            175
          ],
          [
            "class",
            "LambdaGovernor",
            199
          ],
          [
            "function",
            "create_escalation_signal",
            967
          ],
          [
            "function",
            "to_dict",
            120
          ],
          [
            "function",
            "calculate_urgency_score",
            131
          ],
          [
            "function",
            "to_dict",
            169
          ],
          [
            "function",
            "add_log_entry",
            187
          ],
          [
            "function",
            "register_mesh_router",
            754
          ],
          [
            "function",
            "register_dream_coordinator",
            759
          ],
          [
            "function",
            "register_memory_manager",
            764
          ],
          [
            "function",
            "register_subsystem_callback",
            769
          ],
          [
            "function",
            "get_governor_status",
            774
          ]
        ],
        "governor/dao_controller.py": [
          [
            "class",
            "DAOGovernanceNode",
            15
          ],
          [
            "function",
            "create_proposal",
            37
          ],
          [
            "function",
            "get_proposal",
            66
          ],
          [
            "function",
            "vote_on_proposal",
            73
          ]
        ],
        "core/shared_ethics_engine.py": [
          [
            "class",
            "EthicalPrinciple",
            24
          ],
          [
            "class",
            "EthicalSeverity",
            35
          ],
          [
            "class",
            "DecisionType",
            43
          ],
          [
            "class",
            "EthicalConstraint",
            52
          ],
          [
            "class",
            "EthicalDecision",
            63
          ],
          [
            "class",
            "SharedEthicsEngine",
            74
          ],
          [
            "function",
            "get_shared_ethics_engine",
            521
          ],
          [
            "function",
            "add_constraint",
            160
          ],
          [
            "function",
            "get_ethics_report",
            473
          ]
        ],
        "fallback/ethics_layer.py": [
          [
            "class",
            "FallbackEthicsLayer",
            13
          ],
          [
            "function",
            "is_allowed",
            19
          ]
        ],
        "security/main_node_security_engine.py": [
          [
            "class",
            "MainNodeSecurityEngine",
            41
          ],
          [
            "function",
            "init_components",
            67
          ],
          [
            "function",
            "register_event_handlers",
            83
          ]
        ],
        "security/emergency_override.py": [
          [
            "function",
            "check_safety_flags",
            17
          ],
          [
            "function",
            "shutdown_systems",
            32
          ],
          [
            "function",
            "log_incident",
            40
          ]
        ],
        "security/security_engine.py": [
          [
            "class",
            "SecurityEngine",
            7
          ],
          [
            "function",
            "validate_request",
            11
          ],
          [
            "function",
            "detect_threats",
            28
          ],
          [
            "function",
            "sanitize_data",
            33
          ]
        ],
        "security/flagship_security_engine.py": [
          [
            "class",
            "LukhasFlagshipSecurityEngine",
            30
          ]
        ],
        "security/secure_utils.py": [
          [
            "class",
            "SecurityError",
            15
          ],
          [
            "function",
            "safe_eval",
            19
          ],
          [
            "function",
            "safe_subprocess_run",
            107
          ],
          [
            "function",
            "sanitize_input",
            201
          ],
          [
            "function",
            "secure_file_path",
            234
          ],
          [
            "function",
            "get_env_var",
            262
          ]
        ],
        "security/privacy.py": [
          [
            "class",
            "PrivacyManager",
            6
          ]
        ],
        "training/alignment_overseer.py": [
          [
            "function",
            "train_overseer_from_scenarios",
            13
          ]
        ],
        "utils/tag_misinterpretation_sim.py": [
          [
            "function",
            "simulate_misinterpretation_scenarios",
            13
          ]
        ],
        "compliance/engine.py": [
          [
            "class",
            "_CorePrivateEthicsEngine",
            19
          ],
          [
            "class",
            "_LucasPrivateEthicsGuard",
            323
          ],
          [
            "class",
            "AdvancedComplianceEthicsEngine",
            412
          ],
          [
            "function",
            "evaluate_action",
            62
          ],
          [
            "function",
            "suggest_alternatives",
            280
          ],
          [
            "function",
            "increase_scrutiny_level",
            294
          ],
          [
            "function",
            "reset_scrutiny_level",
            298
          ],
          [
            "function",
            "incorporate_feedback",
            302
          ],
          [
            "function",
            "get_metrics",
            314
          ],
          [
            "function",
            "check_access",
            363
          ],
          [
            "function",
            "log_violation",
            373
          ],
          [
            "function",
            "check_cultural_context",
            388
          ],
          [
            "function",
            "evaluate_action_ethics",
            449
          ],
          [
            "function",
            "evaluate_action",
            453
          ],
          [
            "function",
            "suggest_ethical_alternatives",
            457
          ],
          [
            "function",
            "get_core_ethics_metrics",
            460
          ],
          [
            "function",
            "incorporate_ethics_feedback",
            463
          ],
          [
            "function",
            "anonymize_metadata",
            467
          ],
          [
            "function",
            "should_retain_data",
            481
          ],
          [
            "function",
            "check_voice_data_compliance",
            489
          ],
          [
            "function",
            "validate_content_against_harmful_patterns",
            513
          ],
          [
            "function",
            "generate_compliance_report",
            532
          ],
          [
            "function",
            "check_data_access_permission",
            553
          ],
          [
            "function",
            "check_cultural_appropriateness",
            557
          ],
          [
            "function",
            "perform_ethics_drift_detection",
            562
          ],
          [
            "function",
            "get_overall_compliance_status",
            609
          ],
          [
            "function",
            "get_score",
            574
          ]
        ],
        "sentinel/ethical_drift_sentinel.py": [
          [
            "class",
            "EscalationTier",
            66
          ],
          [
            "class",
            "ViolationType",
            74
          ],
          [
            "class",
            "EthicalViolation",
            86
          ],
          [
            "class",
            "InterventionAction",
            109
          ],
          [
            "class",
            "EthicalState",
            126
          ],
          [
            "class",
            "EthicalDriftSentinel",
            172
          ],
          [
            "function",
            "phase_harmonics_score",
            772
          ],
          [
            "function",
            "to_dict",
            99
          ],
          [
            "function",
            "to_dict",
            120
          ],
          [
            "function",
            "calculate_risk_score",
            139
          ],
          [
            "function",
            "get_sentinel_status",
            693
          ],
          [
            "function",
            "register_symbol",
            736
          ],
          [
            "function",
            "unregister_symbol",
            753
          ]
        ],
        "sentinel/ethical_sentinel_dashboard.py": [
          [
            "function",
            "initialize_sentinel",
            129
          ],
          [
            "function",
            "create_risk_gauge",
            139
          ],
          [
            "function",
            "create_violation_timeline",
            174
          ],
          [
            "function",
            "create_symbol_health_charts",
            233
          ],
          [
            "function",
            "format_violation",
            288
          ]
        ],
        "safety/entropy_tuning.py": [
          [
            "function",
            "final_entropy_tune",
            16
          ],
          [
            "function",
            "recheck_entropy",
            33
          ]
        ],
        "safety/compliance_hooks.py": [
          [
            "function",
            "compliance_drift_detect",
            26
          ],
          [
            "function",
            "log_compliance_event",
            67
          ]
        ],
        "safety/integration_bridge.py": [
          [
            "class",
            "LUKHASSafetyBridge",
            10
          ]
        ],
        "safety/compliance_digest.py": [
          [
            "function",
            "load_emergency_logs",
            23
          ],
          [
            "function",
            "generate_digest",
            29
          ],
          [
            "function",
            "plot_bar",
            48
          ]
        ],
        "seedra/seedra_core.py": [
          [
            "class",
            "ConsentLevel",
            19
          ],
          [
            "class",
            "DataSensitivity",
            26
          ],
          [
            "class",
            "SEEDRACore",
            34
          ],
          [
            "function",
            "get_seedra",
            465
          ]
        ],
        "simulations/colony_dilemma_simulation.py": [
          [
            "class",
            "DivergenceReport",
            20
          ],
          [
            "function",
            "measure_divergence",
            41
          ]
        ],
        "simulations/lambda_shield_tester.py": [
          [
            "class",
            "AttackVectorType",
            105
          ],
          [
            "class",
            "SimulationStatus",
            115
          ],
          [
            "class",
            "SyntheticViolation",
            127
          ],
          [
            "class",
            "FirewallResponse",
            150
          ],
          [
            "class",
            "SimulationReport",
            173
          ],
          [
            "class",
            "LambdaShieldTester",
            196
          ],
          [
            "function",
            "to_dict",
            140
          ],
          [
            "function",
            "to_dict",
            163
          ],
          [
            "function",
            "calculate_metrics",
            188
          ],
          [
            "function",
            "generate_synthetic_violations",
            263
          ],
          [
            "function",
            "record_response_log",
            633
          ],
          [
            "function",
            "output_firewall_report",
            677
          ],
          [
            "class",
            "ViolationType",
            79
          ],
          [
            "class",
            "EscalationTier",
            88
          ],
          [
            "class",
            "ActionDecision",
            94
          ]
        ],
        "policy_engines/integration.py": [
          [
            "class",
            "GovernanceDecision",
            45
          ],
          [
            "class",
            "PolicyEngineIntegration",
            72
          ],
          [
            "function",
            "get_policy_engine",
            182
          ],
          [
            "function",
            "evaluate_with_policies",
            190
          ],
          [
            "function",
            "to_policy_decision",
            52
          ],
          [
            "function",
            "initialize_default_policies",
            83
          ],
          [
            "function",
            "evaluate_governance_decision",
            101
          ],
          [
            "function",
            "add_custom_policy",
            156
          ],
          [
            "function",
            "get_policy_metrics",
            167
          ],
          [
            "function",
            "shutdown",
            171
          ]
        ],
        "policy_engines/base.py": [
          [
            "class",
            "RiskLevel",
            39
          ],
          [
            "class",
            "Decision",
            48
          ],
          [
            "class",
            "EthicsEvaluation",
            67
          ],
          [
            "class",
            "PolicyValidationError",
            92
          ],
          [
            "class",
            "EthicsPolicy",
            97
          ],
          [
            "class",
            "PolicyRegistry",
            282
          ],
          [
            "function",
            "evaluate_decision",
            115
          ],
          [
            "function",
            "get_policy_name",
            130
          ],
          [
            "function",
            "get_policy_version",
            135
          ],
          [
            "function",
            "validate_symbolic_alignment",
            139
          ],
          [
            "function",
            "assess_drift_risk",
            165
          ],
          [
            "function",
            "assess_collapse_risk",
            213
          ],
          [
            "function",
            "initialize",
            235
          ],
          [
            "function",
            "shutdown",
            243
          ],
          [
            "function",
            "get_metrics",
            251
          ],
          [
            "function",
            "register_policy",
            290
          ],
          [
            "function",
            "unregister_policy",
            311
          ],
          [
            "function",
            "evaluate_decision",
            331
          ],
          [
            "function",
            "get_consensus_evaluation",
            374
          ],
          [
            "function",
            "get_active_policies",
            427
          ],
          [
            "function",
            "get_policy_metrics",
            431
          ]
        ],
        "policy_engines/examples/gpt4_policy.py": [
          [
            "class",
            "GPT4Config",
            46
          ],
          [
            "class",
            "GPT4Policy",
            56
          ],
          [
            "function",
            "get_policy_name",
            78
          ],
          [
            "function",
            "get_policy_version",
            82
          ],
          [
            "function",
            "initialize",
            86
          ],
          [
            "function",
            "evaluate_decision",
            93
          ],
          [
            "function",
            "shutdown",
            352
          ]
        ],
        "policy_engines/examples/three_laws.py": [
          [
            "class",
            "ThreeLawsPolicy",
            43
          ],
          [
            "function",
            "get_policy_name",
            99
          ],
          [
            "function",
            "get_policy_version",
            104
          ],
          [
            "function",
            "evaluate_decision",
            108
          ],
          [
            "function",
            "validate_symbolic_alignment",
            445
          ]
        ]
      }
    },
    {
      "system": "identity",
      "entity_count": 1354,
      "class_count": 404,
      "function_count": 950,
      "files": 191,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/identity_activation.py",
      "entities_by_file": {
        "qrg_integration.py": [
          [
            "class",
            "QRGType",
            62
          ],
          [
            "class",
            "SecurityLevel",
            74
          ],
          [
            "class",
            "QRGContext",
            85
          ],
          [
            "class",
            "QRGResult",
            100
          ],
          [
            "class",
            "LukhusQRGIntegrator",
            113
          ],
          [
            "function",
            "demo_qrg_integration",
            676
          ],
          [
            "function",
            "create_qrg_context",
            155
          ],
          [
            "function",
            "generate_consciousness_qrg",
            188
          ],
          [
            "function",
            "generate_cultural_qrg",
            249
          ],
          [
            "function",
            "generate_quantum_qrg",
            328
          ],
          [
            "function",
            "generate_dream_state_qrg",
            396
          ],
          [
            "function",
            "generate_emergency_override_qrg",
            459
          ],
          [
            "function",
            "generate_adaptive_qrg",
            523
          ],
          [
            "function",
            "get_generation_statistics",
            642
          ],
          [
            "class",
            "MockModule",
            45
          ]
        ],
        "interface.py": [
          [
            "class",
            "IdentityClient",
            63
          ],
          [
            "function",
            "get_identity_client",
            226
          ],
          [
            "function",
            "verify_access",
            233
          ],
          [
            "function",
            "log_activity",
            237
          ],
          [
            "function",
            "check_consent",
            241
          ],
          [
            "function",
            "verify_user_access",
            83
          ],
          [
            "function",
            "check_consent",
            110
          ],
          [
            "function",
            "log_activity",
            134
          ],
          [
            "function",
            "log_security_event",
            153
          ],
          [
            "function",
            "validate_session",
            171
          ],
          [
            "function",
            "validate_identity",
            210
          ],
          [
            "class",
            "TierValidator",
            41
          ],
          [
            "class",
            "ActivityLogger",
            50
          ],
          [
            "class",
            "ConsentManager",
            54
          ],
          [
            "class",
            "LambdIDValidator",
            58
          ],
          [
            "function",
            "validate_tier",
            42
          ],
          [
            "function",
            "log_activity",
            51
          ],
          [
            "function",
            "check_consent",
            55
          ],
          [
            "function",
            "validate_identity",
            59
          ]
        ],
        "identity_hub.py": [
          [
            "class",
            "IdentityHub",
            52
          ],
          [
            "function",
            "get_identity_hub",
            215
          ],
          [
            "function",
            "register_service",
            114
          ],
          [
            "function",
            "get_service",
            119
          ],
          [
            "function",
            "list_services",
            123
          ],
          [
            "function",
            "register_event_handler",
            144
          ]
        ],
        "qrg_showcase.py": [
          [
            "function",
            "create_ascii_qr_pattern",
            36
          ],
          [
            "class",
            "QRGShowcase",
            57
          ],
          [
            "function",
            "main",
            526
          ],
          [
            "function",
            "demonstrate_user_profile",
            149
          ],
          [
            "function",
            "run_comprehensive_showcase",
            291
          ],
          [
            "function",
            "run_specific_qrg_type_demo",
            315
          ],
          [
            "function",
            "run_performance_benchmark",
            371
          ],
          [
            "function",
            "save_showcase_results",
            503
          ]
        ],
        "deployment_package.py": [
          [
            "class",
            "DeploymentConfig",
            48
          ],
          [
            "class",
            "SystemValidator",
            87
          ],
          [
            "class",
            "DemoOrchestrator",
            287
          ],
          [
            "class",
            "TestOrchestrator",
            342
          ],
          [
            "class",
            "BenchmarkRunner",
            436
          ],
          [
            "class",
            "DeploymentChecker",
            564
          ],
          [
            "class",
            "DeploymentPackage",
            672
          ],
          [
            "function",
            "main",
            764
          ],
          [
            "function",
            "validate_python_environment",
            94
          ],
          [
            "function",
            "validate_file_structure",
            135
          ],
          [
            "function",
            "validate_module_functionality",
            177
          ],
          [
            "function",
            "run_complete_validation",
            227
          ],
          [
            "function",
            "run_interactive_demo",
            290
          ],
          [
            "function",
            "run_fallback_demo",
            311
          ],
          [
            "function",
            "run_comprehensive_tests",
            345
          ],
          [
            "function",
            "run_basic_tests",
            366
          ],
          [
            "function",
            "test_python_env",
            396
          ],
          [
            "function",
            "test_file_structure",
            401
          ],
          [
            "function",
            "test_basic_imports",
            406
          ],
          [
            "function",
            "test_mock_generation",
            417
          ],
          [
            "function",
            "run_performance_benchmarks",
            439
          ],
          [
            "function",
            "benchmark_qrg_speed",
            470
          ],
          [
            "function",
            "benchmark_memory_usage",
            488
          ],
          [
            "function",
            "benchmark_concurrent",
            504
          ],
          [
            "function",
            "benchmark_security",
            532
          ],
          [
            "function",
            "check_deployment_readiness",
            567
          ],
          [
            "function",
            "check_system_validation",
            620
          ],
          [
            "function",
            "check_performance_standards",
            625
          ],
          [
            "function",
            "check_security_compliance",
            633
          ],
          [
            "function",
            "check_documentation",
            641
          ],
          [
            "function",
            "check_test_coverage",
            661
          ],
          [
            "function",
            "run_validation",
            682
          ],
          [
            "function",
            "run_demo",
            686
          ],
          [
            "function",
            "run_tests",
            690
          ],
          [
            "function",
            "run_benchmarks",
            694
          ],
          [
            "function",
            "check_deployment",
            698
          ],
          [
            "function",
            "run_complete_package",
            702
          ],
          [
            "function",
            "mock_generation",
            511
          ]
        ],
        "qrg_100_percent_coverage.py": [
          [
            "class",
            "TestQRGEdgeCases",
            46
          ],
          [
            "class",
            "TestQRGErrorHandling",
            178
          ],
          [
            "class",
            "TestQRGSecurityValidation",
            249
          ],
          [
            "class",
            "TestQRGCulturalValidation",
            326
          ],
          [
            "class",
            "TestQuantumSteganographicCoverage",
            411
          ],
          [
            "class",
            "TestPerformanceOptimization",
            489
          ],
          [
            "class",
            "TestIntegrationBoundaries",
            577
          ],
          [
            "function",
            "run_100_percent_coverage_suite",
            650
          ],
          [
            "function",
            "setUp",
            49
          ],
          [
            "function",
            "test_extreme_consciousness_levels",
            52
          ],
          [
            "function",
            "test_invalid_security_levels",
            70
          ],
          [
            "function",
            "test_empty_and_null_inputs",
            87
          ],
          [
            "function",
            "test_extremely_long_user_ids",
            104
          ],
          [
            "function",
            "test_unicode_and_special_characters",
            117
          ],
          [
            "function",
            "test_concurrent_stress_test",
            139
          ],
          [
            "function",
            "setUp",
            181
          ],
          [
            "function",
            "test_missing_dependencies_graceful_handling",
            184
          ],
          [
            "function",
            "test_memory_exhaustion_protection",
            197
          ],
          [
            "function",
            "test_circular_reference_protection",
            212
          ],
          [
            "function",
            "test_exception_recovery",
            227
          ],
          [
            "function",
            "setUp",
            252
          ],
          [
            "function",
            "test_entropy_quality_validation",
            255
          ],
          [
            "function",
            "test_temporal_security",
            282
          ],
          [
            "function",
            "test_security_level_escalation",
            299
          ],
          [
            "function",
            "setUp",
            329
          ],
          [
            "function",
            "test_all_cultural_contexts",
            332
          ],
          [
            "function",
            "test_cultural_safety_edge_cases",
            359
          ],
          [
            "function",
            "test_cultural_preferences_respect",
            381
          ],
          [
            "function",
            "setUp",
            414
          ],
          [
            "function",
            "test_all_quantum_influence_types",
            418
          ],
          [
            "function",
            "test_all_glyph_styles",
            445
          ],
          [
            "function",
            "test_constellation_encoding_completeness",
            467
          ],
          [
            "function",
            "setUp",
            492
          ],
          [
            "function",
            "test_large_scale_generation",
            495
          ],
          [
            "function",
            "test_memory_efficiency",
            522
          ],
          [
            "function",
            "test_configuration_optimization",
            547
          ],
          [
            "function",
            "setUp",
            580
          ],
          [
            "function",
            "test_session_management",
            583
          ],
          [
            "function",
            "test_statistics_collection",
            600
          ],
          [
            "function",
            "test_adaptive_qrg_selection_logic",
            619
          ],
          [
            "function",
            "generate_qrg",
            144
          ],
          [
            "function",
            "failing_method",
            232
          ]
        ],
        "connector.py": [
          [
            "class",
            "IdentityConnector",
            14
          ],
          [
            "function",
            "get_identity_connector",
            92
          ],
          [
            "function",
            "require_tier",
            22
          ],
          [
            "function",
            "connect_to_module",
            43
          ],
          [
            "function",
            "setup_cross_module_auth",
            56
          ],
          [
            "function",
            "configure_auth",
            73
          ],
          [
            "function",
            "decorator",
            24
          ]
        ],
        "router.py": [
          [
            "function",
            "route_user_dashboard",
            7
          ]
        ],
        "auth_backend/multi_user_sync.py": [
          [
            "class",
            "MultiUserSync",
            9
          ],
          [
            "function",
            "add_user",
            16
          ],
          [
            "function",
            "update_entropy",
            24
          ],
          [
            "function",
            "validate_entropy",
            35
          ],
          [
            "function",
            "quorum_arbitration",
            41
          ],
          [
            "function",
            "cross_validate_entropy",
            53
          ]
        ],
        "auth_backend/cross_device_handshake.py": [
          [
            "class",
            "CrossDeviceHandshake",
            13
          ],
          [
            "function",
            "fingerprint_device",
            24
          ],
          [
            "function",
            "calculate_trust_score",
            33
          ],
          [
            "function",
            "link_session",
            39
          ],
          [
            "function",
            "expire_stale_sessions",
            52
          ],
          [
            "function",
            "refresh_session",
            64
          ],
          [
            "function",
            "renegotiate_session_keys",
            68
          ],
          [
            "function",
            "resolve_conflict",
            76
          ],
          [
            "function",
            "get_session",
            92
          ],
          [
            "function",
            "generate_session_keys",
            98
          ],
          [
            "function",
            "exchange_public_keys",
            107
          ],
          [
            "function",
            "validate_nonce",
            116
          ],
          [
            "function",
            "apply_delay_penalty",
            124
          ],
          [
            "function",
            "simulate_session_token_collision",
            131
          ]
        ],
        "auth_backend/webrtc_peer_sync.py": [
          [
            "class",
            "WebRTCPeerSync",
            12
          ]
        ],
        "auth_backend/trust_scorer.py": [
          [
            "class",
            "LukhasTrustScorer",
            13
          ],
          [
            "function",
            "validate_entropy_data",
            51
          ],
          [
            "function",
            "calculate_entropy_score",
            88
          ],
          [
            "function",
            "calculate_behavioral_score",
            152
          ],
          [
            "function",
            "calculate_device_score",
            303
          ],
          [
            "function",
            "calculate_contextual_score",
            392
          ],
          [
            "function",
            "calculate_trust_score",
            473
          ],
          [
            "function",
            "update_risk_factors",
            578
          ],
          [
            "function",
            "get_trust_threshold",
            609
          ],
          [
            "function",
            "cleanup_expired_data",
            628
          ]
        ],
        "auth_backend/authentication_server.py": [
          [
            "class",
            "DataProcessingBasis",
            56
          ],
          [
            "class",
            "DataSubjectRight",
            65
          ],
          [
            "class",
            "UserPrivacyProfile",
            76
          ],
          [
            "class",
            "AuthenticationServer",
            91
          ],
          [
            "function",
            "create_authentication_session",
            341
          ],
          [
            "function",
            "validate_authentication_request",
            349
          ],
          [
            "function",
            "verify_entropy_packet",
            365
          ],
          [
            "function",
            "expire_sessions",
            382
          ],
          [
            "function",
            "expire_session",
            389
          ],
          [
            "function",
            "track_entropy_reliability",
            398
          ],
          [
            "function",
            "get_recent_auth_count",
            410
          ],
          [
            "function",
            "get_recent_failures",
            418
          ],
          [
            "function",
            "get_session_info",
            426
          ],
          [
            "function",
            "start_trust_scorer_cleanup",
            806
          ]
        ],
        "auth_backend/entropy_health_api.py": [
          [
            "function",
            "get_entropy_status",
            48
          ],
          [
            "function",
            "get_trust_scores",
            60
          ],
          [
            "function",
            "get_sync_status",
            72
          ],
          [
            "function",
            "get_trust_score_session",
            89
          ],
          [
            "function",
            "background_health_monitor",
            107
          ],
          [
            "function",
            "handle_dashboard_connect",
            140
          ],
          [
            "function",
            "handle_dashboard_disconnect",
            152
          ],
          [
            "function",
            "handle_health_snapshot_request",
            157
          ],
          [
            "function",
            "start_background_monitor",
            177
          ]
        ],
        "auth_backend/pqc_crypto_engine.py": [
          [
            "class",
            "PQCKeyPair",
            40
          ],
          [
            "class",
            "PQCSignature",
            49
          ],
          [
            "class",
            "PQCCryptoEngine",
            56
          ],
          [
            "function",
            "generate_kem_keypair",
            91
          ],
          [
            "function",
            "generate_signature_keypair",
            142
          ],
          [
            "function",
            "encapsulate_secret",
            192
          ],
          [
            "function",
            "decapsulate_secret",
            233
          ],
          [
            "function",
            "sign_message",
            275
          ],
          [
            "function",
            "verify_signature",
            316
          ],
          [
            "function",
            "derive_authentication_key",
            369
          ],
          [
            "function",
            "validate_entropy_quality",
            392
          ],
          [
            "function",
            "get_crypto_config",
            431
          ],
          [
            "function",
            "establish_quantum_safe_channel",
            455
          ],
          [
            "function",
            "rotate_keys",
            513
          ],
          [
            "function",
            "quantum_safe_encrypt",
            543
          ],
          [
            "function",
            "quantum_safe_decrypt",
            574
          ]
        ],
        "auth_backend/qr_entropy_generator.py": [
          [
            "class",
            "QREntropyGenerator",
            23
          ],
          [
            "function",
            "generate_authentication_qr",
            36
          ],
          [
            "function",
            "embed_steganographic_layers",
            61
          ],
          [
            "function",
            "validate_qr_scan",
            84
          ]
        ],
        "tools/onboarding_cli.py": [
          [
            "class",
            "OnboardingCLI",
            43
          ],
          [
            "function",
            "main",
            490
          ],
          [
            "function",
            "run_interactive_demo",
            66
          ],
          [
            "function",
            "run_batch_test",
            411
          ],
          [
            "function",
            "show_config_info",
            466
          ]
        ],
        "auth_utils/cultural_safety_checker.py": [
          [
            "class",
            "CulturalContext",
            21
          ],
          [
            "class",
            "SensitivityLevel",
            30
          ],
          [
            "class",
            "ValidationResult",
            38
          ],
          [
            "class",
            "CulturalRule",
            46
          ],
          [
            "class",
            "ValidationReport",
            57
          ],
          [
            "class",
            "CulturalSafetyChecker",
            68
          ],
          [
            "function",
            "validate_emoji_set",
            294
          ],
          [
            "function",
            "get_safe_emoji_suggestions",
            502
          ],
          [
            "function",
            "add_custom_rule",
            536
          ],
          [
            "function",
            "update_regional_preferences",
            541
          ],
          [
            "function",
            "set_active_configuration",
            546
          ],
          [
            "function",
            "get_cultural_status",
            556
          ]
        ],
        "auth_utils/shared_logging.py": [
          [
            "function",
            "get_logger",
            15
          ]
        ],
        "auth_utils/grid_size_calculator.py": [
          [
            "class",
            "GridPattern",
            20
          ],
          [
            "class",
            "SizingMode",
            28
          ],
          [
            "class",
            "ScreenDimensions",
            37
          ],
          [
            "class",
            "GridConstraints",
            46
          ],
          [
            "class",
            "GridCalculationResult",
            57
          ],
          [
            "class",
            "GridSizeCalculator",
            70
          ],
          [
            "function",
            "calculate_optimal_grid_size",
            119
          ],
          [
            "function",
            "calculate_adaptive_grid_size",
            499
          ],
          [
            "function",
            "get_grid_status",
            543
          ]
        ],
        "auth_utils/attention_monitor.py": [
          [
            "class",
            "AttentionState",
            23
          ],
          [
            "class",
            "InputModality",
            31
          ],
          [
            "class",
            "AttentionMetrics",
            40
          ],
          [
            "class",
            "EyeTrackingData",
            51
          ],
          [
            "class",
            "InputEvent",
            62
          ],
          [
            "class",
            "AttentionMonitor",
            70
          ],
          [
            "function",
            "process_eye_tracking_data",
            199
          ],
          [
            "function",
            "process_input_event",
            308
          ],
          [
            "function",
            "get_current_attention_state",
            434
          ],
          [
            "function",
            "update_attention_metrics",
            466
          ],
          [
            "function",
            "get_attention_status",
            551
          ]
        ],
        "auth_utils/cognitive_load_estimator.py": [
          [
            "class",
            "CognitiveLoadLevel",
            23
          ],
          [
            "class",
            "CognitiveTask",
            31
          ],
          [
            "class",
            "CognitiveIndicators",
            41
          ],
          [
            "class",
            "CognitiveLoadAssessment",
            52
          ],
          [
            "class",
            "CognitiveLoadEstimator",
            62
          ],
          [
            "function",
            "assess_cognitive_load",
            221
          ],
          [
            "function",
            "get_ui_adaptations",
            557
          ],
          [
            "function",
            "update_performance_tracking",
            574
          ],
          [
            "function",
            "get_cognitive_status",
            588
          ]
        ],
        "auth_utils/replay_protection.py": [
          [
            "class",
            "ReplayProtection",
            7
          ],
          [
            "function",
            "add_nonce",
            17
          ],
          [
            "function",
            "is_replay",
            41
          ]
        ],
        "core/qrs_manager.py": [
          [
            "class",
            "SymbolicLoginType",
            43
          ],
          [
            "class",
            "SymbolicVaultEntry",
            58
          ],
          [
            "class",
            "LambdaIDProfile",
            70
          ],
          [
            "class",
            "QRSManager",
            84
          ],
          [
            "function",
            "create_lambda_id_with_qrg",
            112
          ],
          [
            "function",
            "authenticate_with_symbolic_challenge",
            198
          ],
          [
            "function",
            "generate_qrg_for_lambda_id",
            241
          ],
          [
            "function",
            "validate_qrg_authentication",
            282
          ],
          [
            "function",
            "get_lambda_id_from_public_hash",
            327
          ],
          [
            "function",
            "get_lambda_id_from_qrg",
            331
          ],
          [
            "function",
            "update_symbolic_vault",
            335
          ]
        ],
        "core/lambd_id_service.py": [
          [
            "class",
            "TierLevel",
            41
          ],
          [
            "class",
            "ValidationLevel",
            50
          ],
          [
            "class",
            "LambdaIDResult",
            57
          ],
          [
            "class",
            "ValidationResult",
            69
          ],
          [
            "class",
            "UserContext",
            83
          ],
          [
            "class",
            "LambdaIDService",
            94
          ],
          [
            "function",
            "get_lambda_id_service",
            639
          ],
          [
            "function",
            "generate_lambda_id",
            121
          ],
          [
            "function",
            "validate_lambda_id",
            210
          ],
          [
            "function",
            "calculate_entropy_score",
            286
          ],
          [
            "function",
            "get_tier_information",
            332
          ],
          [
            "function",
            "check_upgrade_eligibility",
            345
          ],
          [
            "function",
            "get_service_stats",
            399
          ]
        ],
        "core/user_tier_mapping.py": [
          [
            "class",
            "LambdaTier",
            36
          ],
          [
            "class",
            "UserTierProfile",
            64
          ],
          [
            "class",
            "UserTierMappingService",
            104
          ],
          [
            "function",
            "get_tier_mapping_service",
            386
          ],
          [
            "function",
            "get_user_tier",
            395
          ],
          [
            "function",
            "check_tier_access",
            401
          ],
          [
            "function",
            "elevate_user_tier",
            408
          ],
          [
            "function",
            "from_string",
            51
          ],
          [
            "function",
            "to_dict",
            75
          ],
          [
            "function",
            "from_dict",
            90
          ],
          [
            "function",
            "get_user_tier",
            212
          ],
          [
            "function",
            "set_user_tier",
            253
          ],
          [
            "function",
            "check_permission",
            344
          ],
          [
            "function",
            "get_user_profile",
            367
          ]
        ],
        "core/brain_identity_connector.py": [
          [
            "class",
            "BrainIdentityConnector",
            77
          ],
          [
            "class",
            "MemoryIdentityIntegration",
            423
          ],
          [
            "function",
            "connect_registry",
            135
          ],
          [
            "function",
            "connect_brain",
            149
          ],
          [
            "function",
            "authorize_memory_operation",
            163
          ],
          [
            "function",
            "wrap_memory_function",
            271
          ],
          [
            "function",
            "register_memory",
            312
          ],
          [
            "function",
            "get_access_logs",
            410
          ],
          [
            "function",
            "encrypt_memory_content",
            454
          ],
          [
            "function",
            "decrypt_memory_content",
            479
          ],
          [
            "function",
            "register_memory",
            503
          ],
          [
            "function",
            "authorize_access",
            528
          ],
          [
            "function",
            "apply_secure_wrappers",
            566
          ],
          [
            "function",
            "notify_memory_removal",
            613
          ],
          [
            "function",
            "get_access_metrics",
            629
          ],
          [
            "function",
            "get_access_logs",
            638
          ],
          [
            "class",
            "MockRegistry",
            656
          ],
          [
            "class",
            "MockBrain",
            659
          ],
          [
            "class",
            "AccessTier",
            57
          ],
          [
            "class",
            "MemoryAccessPolicy",
            64
          ],
          [
            "class",
            "MemoryOperation",
            70
          ],
          [
            "function",
            "wrapped_function",
            284
          ]
        ],
        "core/verifold_connector.py": [
          [
            "class",
            "VeriFoldConnector",
            15
          ],
          [
            "function",
            "connect_to_chain",
            23
          ],
          [
            "function",
            "submit_replay_session",
            28
          ],
          [
            "function",
            "retrieve_replay_data",
            33
          ],
          [
            "function",
            "verify_chain_integrity",
            38
          ]
        ],
        "core/visualization/consciousness_mapper.py": [
          [
            "class",
            "EmotionalState",
            26
          ],
          [
            "class",
            "BiometricData",
            41
          ],
          [
            "class",
            "CognitiveMetrics",
            58
          ],
          [
            "class",
            "ConsciousnessState",
            69
          ],
          [
            "class",
            "ConsciousnessMapper",
            82
          ],
          [
            "function",
            "map_to_consciousness_state",
            114
          ],
          [
            "function",
            "calibrate",
            494
          ]
        ],
        "core/visualization/lukhas_orb.py": [
          [
            "class",
            "OrbPattern",
            61
          ],
          [
            "class",
            "OrbState",
            73
          ],
          [
            "class",
            "OrbVisualization",
            102
          ],
          [
            "class",
            "LUKHASOrb",
            131
          ],
          [
            "function",
            "consciousness_category",
            85
          ],
          [
            "function",
            "to_dict",
            115
          ],
          [
            "function",
            "update_state",
            156
          ],
          [
            "function",
            "get_animation_frame",
            286
          ],
          [
            "function",
            "export_state",
            427
          ],
          [
            "function",
            "import_state",
            448
          ]
        ],
        "core/id_service/entropy_engine.py": [
          [
            "class",
            "EntropyLevel",
            30
          ],
          [
            "class",
            "EntropyAnalysis",
            38
          ],
          [
            "class",
            "LambdaIDEntropyEngine",
            70
          ],
          [
            "function",
            "to_dict",
            54
          ],
          [
            "function",
            "analyze_entropy",
            87
          ],
          [
            "function",
            "calculate_live_entropy",
            159
          ],
          [
            "function",
            "optimize_lambda_id",
            191
          ],
          [
            "function",
            "batch_entropy_analysis",
            219
          ],
          [
            "function",
            "get_entropy_statistics",
            237
          ]
        ],
        "core/id_service/portability_system.py": [
          [
            "class",
            "RecoveryMethod",
            40
          ],
          [
            "class",
            "RecoveryStatus",
            49
          ],
          [
            "class",
            "PortabilityPackage",
            58
          ],
          [
            "class",
            "RecoveryAttempt",
            88
          ],
          [
            "class",
            "LambdaIDPortabilitySystem",
            118
          ],
          [
            "class",
            "GeographicEncoder",
            816
          ],
          [
            "function",
            "to_dict",
            73
          ],
          [
            "function",
            "to_dict",
            103
          ],
          [
            "function",
            "create_portability_package",
            135
          ],
          [
            "function",
            "generate_qr_geo_recovery",
            182
          ],
          [
            "function",
            "recover_from_qr_geo",
            234
          ],
          [
            "function",
            "generate_emergency_codes",
            311
          ],
          [
            "function",
            "recover_from_emergency_code",
            336
          ],
          [
            "function",
            "generate_recovery_phrase",
            393
          ],
          [
            "function",
            "recover_from_phrase",
            412
          ],
          [
            "function",
            "sync_across_devices",
            458
          ],
          [
            "function",
            "create_backup_file",
            507
          ],
          [
            "function",
            "restore_from_backup",
            543
          ],
          [
            "function",
            "get_recovery_analytics",
            600
          ],
          [
            "function",
            "encode_with_location",
            819
          ],
          [
            "function",
            "decode_from_payload",
            833
          ]
        ],
        "core/id_service/lambd_id_validator.py": [
          [
            "class",
            "ValidationLevel",
            35
          ],
          [
            "class",
            "ValidationResult",
            42
          ],
          [
            "class",
            "LambdaIDValidator",
            84
          ],
          [
            "function",
            "to_dict",
            62
          ],
          [
            "function",
            "validate",
            108
          ],
          [
            "function",
            "validate_lambda_id",
            172
          ],
          [
            "function",
            "register_lambda_id",
            351
          ],
          [
            "function",
            "unregister_lambda_id",
            362
          ],
          [
            "function",
            "get_validation_stats",
            371
          ]
        ],
        "core/id_service/mnemonic.py": [
          [
            "class",
            "Mnemonic",
            6
          ],
          [
            "function",
            "generate",
            16
          ],
          [
            "function",
            "to_seed",
            22
          ]
        ],
        "core/id_service/lambd_id_entropy.py": [
          [
            "class",
            "EntropyLevel",
            30
          ],
          [
            "class",
            "EntropyAnalysis",
            39
          ],
          [
            "class",
            "LambdaIDEntropy",
            51
          ],
          [
            "function",
            "analyze_lambda_id_entropy",
            67
          ],
          [
            "function",
            "get_entropy_statistics",
            404
          ]
        ],
        "core/id_service/lambd_id_generator.py": [
          [
            "class",
            "UserContext",
            3
          ],
          [
            "class",
            "TierLevel",
            42
          ],
          [
            "class",
            "LambdaIDGenerator",
            51
          ],
          [
            "function",
            "to_dict",
            9
          ],
          [
            "function",
            "generate_lambda_id",
            70
          ],
          [
            "function",
            "get_generation_stats",
            217
          ]
        ],
        "core/swarm/tier_aware_swarm_hub.py": [
          [
            "class",
            "VerificationDepth",
            36
          ],
          [
            "class",
            "TierResourceAllocation",
            47
          ],
          [
            "class",
            "IdentitySwarmTask",
            62
          ],
          [
            "class",
            "ColonyOrchestration",
            78
          ],
          [
            "class",
            "TierAwareSwarmHub",
            89
          ],
          [
            "function",
            "get_hub_statistics",
            808
          ],
          [
            "function",
            "get_tier_performance_report",
            825
          ]
        ],
        "core/colonies/biometric_verification_colony.py": [
          [
            "class",
            "BiometricType",
            32
          ],
          [
            "class",
            "BiometricQuality",
            45
          ],
          [
            "class",
            "BiometricSample",
            55
          ],
          [
            "class",
            "BiometricVerificationTask",
            68
          ],
          [
            "class",
            "BiometricVerificationAgent",
            80
          ],
          [
            "class",
            "BiometricVerificationColony",
            247
          ],
          [
            "function",
            "get_colony_health_status",
            704
          ]
        ],
        "core/colonies/consciousness_verification_colony.py": [
          [
            "class",
            "ConsciousnessVerificationMethod",
            40
          ],
          [
            "class",
            "ConsciousnessVerificationTask",
            53
          ],
          [
            "class",
            "ConsciousnessAnalysisAgent",
            66
          ],
          [
            "class",
            "ConsciousnessVerificationColony",
            509
          ]
        ],
        "core/colonies/dream_verification_colony.py": [
          [
            "class",
            "DreamAnalysisMethod",
            42
          ],
          [
            "class",
            "DreamVerificationTask",
            55
          ],
          [
            "class",
            "MultiverseDreamBranch",
            69
          ],
          [
            "class",
            "DreamAnalysisAgent",
            79
          ],
          [
            "class",
            "DreamVerificationColony",
            523
          ]
        ],
        "core/trace/activity_logger.py": [
          [
            "class",
            "LambdaTraceLogger",
            23
          ],
          [
            "function",
            "log_activity",
            45
          ],
          [
            "function",
            "log_id_creation",
            80
          ],
          [
            "function",
            "log_session_event",
            91
          ],
          [
            "function",
            "log_tier_change",
            101
          ],
          [
            "function",
            "log_consent_trail",
            112
          ],
          [
            "function",
            "log_geo_symbolic_trace",
            123
          ],
          [
            "function",
            "log_entropy_drift",
            136
          ],
          [
            "function",
            "generate_trace_pattern",
            146
          ]
        ],
        "core/trace/pattern_analyzer.py": [
          [
            "class",
            "SymbolicPatternAnalyzer",
            9
          ],
          [
            "function",
            "analyze_patterns",
            16
          ],
          [
            "function",
            "detect_anomalies",
            21
          ],
          [
            "function",
            "generate_insights",
            26
          ]
        ],
        "core/auth/dream_auth.py": [
          [
            "class",
            "DreamStateType",
            43
          ],
          [
            "class",
            "DreamSymbolType",
            54
          ],
          [
            "class",
            "DreamPattern",
            67
          ],
          [
            "class",
            "DreamSeed",
            84
          ],
          [
            "class",
            "DreamAuthenticationResult",
            98
          ],
          [
            "class",
            "DreamAuthenticationEngine",
            113
          ],
          [
            "function",
            "register_dream_pattern",
            181
          ],
          [
            "function",
            "create_dream_seed",
            248
          ],
          [
            "function",
            "authenticate_with_dream",
            311
          ],
          [
            "function",
            "get_dream_statistics",
            740
          ]
        ],
        "core/auth/bio_symbolic_fusion.py": [
          [
            "class",
            "EmotionalAnchorType",
            45
          ],
          [
            "class",
            "EmotionalAnchor",
            56
          ],
          [
            "class",
            "SymbolicBiometricPattern",
            75
          ],
          [
            "class",
            "FusionResult",
            89
          ],
          [
            "class",
            "BioSymbolicFusionEngine",
            105
          ],
          [
            "function",
            "create_emotional_anchor",
            165
          ],
          [
            "function",
            "create_symbolic_pattern",
            194
          ],
          [
            "function",
            "perform_fusion_authentication",
            249
          ],
          [
            "function",
            "get_fusion_statistics",
            622
          ]
        ],
        "core/auth/biometric_integration.py": [
          [
            "class",
            "BiometricType",
            34
          ],
          [
            "class",
            "BiometricQuality",
            48
          ],
          [
            "class",
            "BiometricTemplate",
            58
          ],
          [
            "class",
            "BiometricVerificationResult",
            73
          ],
          [
            "class",
            "BiometricChallenge",
            88
          ],
          [
            "class",
            "BiometricIntegrationManager",
            100
          ],
          [
            "function",
            "enroll_biometric",
            154
          ],
          [
            "function",
            "verify_biometric",
            221
          ],
          [
            "function",
            "create_biometric_challenge",
            348
          ],
          [
            "function",
            "get_enrolled_biometrics",
            413
          ]
        ],
        "core/health/identity_health_monitor.py": [
          [
            "class",
            "ComponentType",
            36
          ],
          [
            "class",
            "HealthMetric",
            48
          ],
          [
            "class",
            "ComponentHealth",
            61
          ],
          [
            "class",
            "HealingPlan",
            127
          ],
          [
            "class",
            "IdentityHealthMonitor",
            153
          ],
          [
            "function",
            "add_error",
            74
          ],
          [
            "function",
            "calculate_health_score",
            81
          ],
          [
            "function",
            "add_step",
            139
          ],
          [
            "function",
            "get_system_health_report",
            829
          ],
          [
            "function",
            "get_component_health_details",
            863
          ]
        ],
        "core/sent/consent_manager.py": [
          [
            "class",
            "LambdaConsentManager",
            19
          ],
          [
            "function",
            "collect_consent",
            35
          ],
          [
            "function",
            "validate_consent",
            75
          ],
          [
            "function",
            "revoke_consent",
            94
          ],
          [
            "function",
            "get_consent_status",
            125
          ],
          [
            "function",
            "get_symbolic_consent_status",
            142
          ]
        ],
        "core/sent/consent_history.py": [
          [
            "class",
            "ConsentHistoryManager",
            21
          ],
          [
            "function",
            "record_consent_event",
            30
          ],
          [
            "function",
            "verify_consent_chain",
            83
          ],
          [
            "function",
            "get_consent_timeline",
            102
          ],
          [
            "function",
            "generate_consent_proof",
            115
          ],
          [
            "function",
            "get_symbolic_consent_history",
            121
          ]
        ],
        "core/sent/policy_engine.py": [
          [
            "class",
            "ConsentPolicyEngine",
            9
          ],
          [
            "function",
            "create_policy",
            17
          ],
          [
            "function",
            "update_policy",
            22
          ],
          [
            "function",
            "check_compliance",
            27
          ],
          [
            "function",
            "generate_compliance_report",
            32
          ]
        ],
        "core/sent/symbolic_scopes.py": [
          [
            "class",
            "SymbolicScopesManager",
            18
          ],
          [
            "function",
            "define_scope",
            36
          ],
          [
            "function",
            "get_scope_requirements",
            41
          ],
          [
            "function",
            "validate_scope_access",
            46
          ],
          [
            "function",
            "get_symbolic_representation",
            51
          ],
          [
            "function",
            "parse_symbolic_consent",
            56
          ]
        ],
        "core/tagging/identity_tag_resolver.py": [
          [
            "class",
            "TrustLevel",
            32
          ],
          [
            "class",
            "IdentityTagType",
            42
          ],
          [
            "class",
            "TrustRelationship",
            57
          ],
          [
            "class",
            "IdentityTag",
            104
          ],
          [
            "class",
            "TagConsensusRequest",
            116
          ],
          [
            "class",
            "IdentityTagResolver",
            147
          ],
          [
            "function",
            "update_interaction",
            70
          ],
          [
            "function",
            "add_vote",
            128
          ],
          [
            "function",
            "is_consensus_reached",
            133
          ],
          [
            "function",
            "resolve_identity_permissions",
            388
          ],
          [
            "function",
            "get_identity_reputation",
            449
          ],
          [
            "function",
            "get_resolver_statistics",
            689
          ]
        ],
        "core/commercial/commercial_module.py": [
          [
            "class",
            "CommercialTier",
            31
          ],
          [
            "class",
            "BrandStatus",
            39
          ],
          [
            "class",
            "BrandPrefix",
            49
          ],
          [
            "class",
            "CommercialLambdaIDResult",
            71
          ],
          [
            "class",
            "CommercialModule",
            85
          ],
          [
            "function",
            "is_valid",
            62
          ],
          [
            "function",
            "register_brand_prefix",
            158
          ],
          [
            "function",
            "generate_commercial_lambda_id",
            264
          ],
          [
            "function",
            "validate_commercial_lambda_id",
            513
          ],
          [
            "function",
            "get_brand_analytics",
            671
          ],
          [
            "function",
            "list_commercial_tiers",
            702
          ]
        ],
        "core/integrations/consciousness_bridge.py": [
          [
            "class",
            "ConsciousnessEventType",
            40
          ],
          [
            "class",
            "SynchronizationMode",
            51
          ],
          [
            "class",
            "ConsciousnessEvent",
            60
          ],
          [
            "class",
            "ConsciousnessSync",
            73
          ],
          [
            "class",
            "ConsciousnessBridgeResult",
            86
          ],
          [
            "class",
            "ConsciousnessBridge",
            97
          ],
          [
            "function",
            "establish_consciousness_sync",
            143
          ],
          [
            "function",
            "sync_consciousness_state",
            209
          ],
          [
            "function",
            "get_consciousness_pattern_analysis",
            297
          ],
          [
            "function",
            "detect_consciousness_spoofing",
            374
          ]
        ],
        "core/integrations/inference_adapter.py": [
          [
            "class",
            "InferenceType",
            30
          ],
          [
            "class",
            "InferencePriority",
            42
          ],
          [
            "class",
            "InferenceConfidenceLevel",
            51
          ],
          [
            "class",
            "InferenceRequest",
            61
          ],
          [
            "class",
            "InferenceResult",
            82
          ],
          [
            "class",
            "InferenceAdapter",
            113
          ],
          [
            "function",
            "submit_inference_request",
            160
          ],
          [
            "function",
            "process_inference_request",
            200
          ],
          [
            "function",
            "verify_identity_inference",
            259
          ],
          [
            "function",
            "analyze_authentication_patterns",
            313
          ],
          [
            "function",
            "detect_authentication_anomalies",
            365
          ],
          [
            "function",
            "assess_authentication_risk",
            420
          ],
          [
            "function",
            "get_inference_statistics",
            478
          ]
        ],
        "core/integrations/memory_connector.py": [
          [
            "class",
            "MemoryType",
            30
          ],
          [
            "class",
            "MemoryAccessLevel",
            42
          ],
          [
            "class",
            "MemoryRecord",
            51
          ],
          [
            "class",
            "MemoryQuery",
            69
          ],
          [
            "class",
            "MemoryIntegrationResult",
            82
          ],
          [
            "class",
            "MemoryConnector",
            93
          ],
          [
            "function",
            "both_dicts",
            646
          ],
          [
            "function",
            "store_identity_memory",
            122
          ],
          [
            "function",
            "retrieve_identity_memories",
            182
          ],
          [
            "function",
            "create_biographical_anchor",
            248
          ],
          [
            "function",
            "verify_biographical_memory",
            306
          ],
          [
            "function",
            "get_authentication_patterns",
            380
          ],
          [
            "function",
            "relevance_score",
            521
          ]
        ],
        "core/glyph/distributed_glyph_generation.py": [
          [
            "class",
            "GLYPHType",
            35
          ],
          [
            "class",
            "GLYPHComplexity",
            46
          ],
          [
            "class",
            "GLYPHGenerationTask",
            56
          ],
          [
            "class",
            "GLYPHFragment",
            73
          ],
          [
            "class",
            "GeneratedGLYPH",
            85
          ],
          [
            "class",
            "GLYPHGenerationAgent",
            111
          ],
          [
            "class",
            "DistributedGLYPHColony",
            564
          ],
          [
            "function",
            "to_pil_image",
            99
          ],
          [
            "function",
            "to_base64",
            103
          ],
          [
            "function",
            "get_colony_statistics",
            996
          ]
        ],
        "core/glyph/steganographic_id.py": [
          [
            "class",
            "EmbeddingMethod",
            34
          ],
          [
            "class",
            "EmbeddingStrength",
            44
          ],
          [
            "class",
            "IdentityEmbedData",
            53
          ],
          [
            "class",
            "EmbeddingResult",
            67
          ],
          [
            "class",
            "SteganographicIdentityEmbedder",
            79
          ],
          [
            "function",
            "embed_identity_data",
            105
          ],
          [
            "function",
            "extract_identity_data",
            218
          ]
        ],
        "core/glyph/glyph_pipeline.py": [
          [
            "class",
            "GLYPHType",
            48
          ],
          [
            "class",
            "GLYPHSecurityLevel",
            60
          ],
          [
            "class",
            "GLYPHGenerationRequest",
            69
          ],
          [
            "class",
            "GLYPHGenerationResult",
            86
          ],
          [
            "class",
            "GLYPHPipeline",
            101
          ],
          [
            "function",
            "generate_glyph",
            161
          ],
          [
            "function",
            "verify_glyph",
            299
          ],
          [
            "function",
            "get_pipeline_statistics",
            683
          ]
        ],
        "core/events/identity_event_types.py": [
          [
            "class",
            "IdentityEventType",
            15
          ],
          [
            "class",
            "IdentityEventPriority",
            95
          ],
          [
            "class",
            "IdentityEvent",
            105
          ],
          [
            "class",
            "AuthenticationContext",
            211
          ],
          [
            "class",
            "VerificationResult",
            223
          ],
          [
            "class",
            "TierChangeContext",
            235
          ],
          [
            "function",
            "to_dict",
            150
          ],
          [
            "function",
            "calculate_processing_duration",
            177
          ],
          [
            "function",
            "is_security_critical",
            185
          ],
          [
            "function",
            "requires_colony_coordination",
            197
          ]
        ],
        "core/events/identity_event_publisher.py": [
          [
            "class",
            "IdentityEventPublisher",
            23
          ],
          [
            "function",
            "register_event_handler",
            481
          ],
          [
            "function",
            "get_event_statistics",
            487
          ],
          [
            "function",
            "get_session_events",
            496
          ],
          [
            "function",
            "get_correlation_events",
            500
          ]
        ],
        "core/qrs/qrg_generator.py": [
          [
            "class",
            "QRGGenerator",
            9
          ],
          [
            "function",
            "generate_pairing_code",
            16
          ],
          [
            "function",
            "validate_pairing_code",
            21
          ],
          [
            "function",
            "cleanup_expired_codes",
            26
          ]
        ],
        "core/qrs/session_replay.py": [
          [
            "class",
            "SessionReplayManager",
            9
          ],
          [
            "function",
            "create_replay_session",
            16
          ],
          [
            "function",
            "restore_session",
            21
          ],
          [
            "function",
            "invalidate_session",
            26
          ]
        ],
        "core/onboarding/onboarding_config.py": [
          [
            "class",
            "OnboardingComplexity",
            32
          ],
          [
            "class",
            "SecurityLevel",
            41
          ],
          [
            "class",
            "StageConfiguration",
            50
          ],
          [
            "class",
            "PersonalityFlowConfig",
            62
          ],
          [
            "class",
            "CulturalConfiguration",
            74
          ],
          [
            "class",
            "OnboardingSystemConfig",
            85
          ],
          [
            "class",
            "OnboardingConfigManager",
            103
          ],
          [
            "function",
            "get_personality_flow",
            313
          ],
          [
            "function",
            "get_cultural_config",
            317
          ],
          [
            "function",
            "get_stage_config",
            321
          ],
          [
            "function",
            "should_skip_stage",
            325
          ],
          [
            "function",
            "validate_stage_completion",
            335
          ],
          [
            "function",
            "get_adaptive_flow",
            348
          ],
          [
            "function",
            "customize_personality_flow",
            387
          ],
          [
            "function",
            "save_config",
            407
          ],
          [
            "function",
            "export_config_template",
            423
          ]
        ],
        "core/onboarding/onboarding.py": [
          [
            "class",
            "OnboardingStage",
            44
          ],
          [
            "class",
            "OnboardingPersonality",
            58
          ],
          [
            "class",
            "OnboardingContext",
            69
          ],
          [
            "class",
            "OnboardingProgress",
            84
          ],
          [
            "class",
            "OnboardingRecommendation",
            97
          ],
          [
            "class",
            "EnhancedOnboardingManager",
            107
          ],
          [
            "function",
            "start_onboarding_session",
            141
          ],
          [
            "function",
            "progress_onboarding_stage",
            190
          ],
          [
            "function",
            "complete_onboarding",
            242
          ],
          [
            "function",
            "get_onboarding_status",
            293
          ]
        ],
        "core/qrg/qrg_manager.py": [
          [
            "class",
            "QRGType",
            47
          ],
          [
            "class",
            "LambdaIDQRGConfig",
            60
          ],
          [
            "class",
            "LambdaIDQRGGenerator",
            73
          ],
          [
            "function",
            "generate_lambda_id_qrg",
            91
          ],
          [
            "function",
            "get_qrg_for_lambda_id",
            483
          ],
          [
            "function",
            "validate_qrg_challenge",
            487
          ]
        ],
        "core/sing/sso_engine.py": [
          [
            "class",
            "LambdaSSOEngine",
            22
          ],
          [
            "function",
            "generate_sso_token",
            50
          ],
          [
            "function",
            "validate_token",
            113
          ],
          [
            "function",
            "authenticate_with_qr_glyph",
            161
          ],
          [
            "function",
            "authenticate_with_biometric_fallback",
            201
          ],
          [
            "function",
            "sync_tokens_across_devices",
            236
          ],
          [
            "function",
            "revoke_token",
            290
          ],
          [
            "function",
            "register_service",
            320
          ]
        ],
        "core/sing/cross_device_manager.py": [
          [
            "class",
            "CrossDeviceTokenManager",
            9
          ],
          [
            "function",
            "sync_token_to_device",
            17
          ],
          [
            "function",
            "invalidate_device_tokens",
            22
          ],
          [
            "function",
            "get_device_tokens",
            27
          ]
        ],
        "core/tier/tier_manager.py": [
          [
            "class",
            "TierLevel",
            31
          ],
          [
            "class",
            "TierCapability",
            41
          ],
          [
            "class",
            "TierRequirements",
            62
          ],
          [
            "class",
            "LambdaTierManager",
            73
          ],
          [
            "function",
            "validate_tier_access",
            199
          ],
          [
            "function",
            "calculate_eligible_tier_qrs",
            256
          ],
          [
            "function",
            "get_user_tier",
            375
          ],
          [
            "function",
            "upgrade_tier",
            388
          ],
          [
            "function",
            "validate_permission",
            439
          ],
          [
            "function",
            "get_tier_benefits",
            456
          ],
          [
            "function",
            "get_symbolic_tier_status",
            475
          ],
          [
            "function",
            "visualize_tier_progression_map",
            492
          ],
          [
            "function",
            "calculate_entropy_unlock_paths",
            527
          ]
        ],
        "core/tier/tier_system.py": [
          [
            "function",
            "check_access_level",
            15
          ],
          [
            "function",
            "get_user_tier",
            47
          ],
          [
            "function",
            "validate_tier_permission",
            65
          ],
          [
            "class",
            "TierLevel",
            86
          ]
        ],
        "core/tier/tier_validator.py": [
          [
            "class",
            "TierValidator",
            9
          ],
          [
            "function",
            "validate_tier_requirements",
            16
          ],
          [
            "function",
            "check_tier_eligibility",
            21
          ],
          [
            "function",
            "generate_tier_report",
            26
          ],
          [
            "function",
            "validate_tier",
            31
          ]
        ],
        "enterprise/auth.py": [
          [
            "class",
            "AuthenticationMethod",
            36
          ],
          [
            "class",
            "UserRole",
            49
          ],
          [
            "class",
            "AuthenticationStatus",
            60
          ],
          [
            "class",
            "EnterpriseUser",
            71
          ],
          [
            "class",
            "AuthenticationResult",
            94
          ],
          [
            "class",
            "SAMLConfiguration",
            110
          ],
          [
            "class",
            "OAuthConfiguration",
            124
          ],
          [
            "class",
            "LDAPConfiguration",
            139
          ],
          [
            "class",
            "EnterpriseAuthenticationModule",
            154
          ],
          [
            "function",
            "get_enterprise_auth_config_template",
            1041
          ],
          [
            "function",
            "authenticate_user",
            248
          ],
          [
            "function",
            "verify_mfa",
            622
          ],
          [
            "function",
            "refresh_token",
            678
          ],
          [
            "function",
            "validate_session",
            723
          ],
          [
            "function",
            "logout",
            736
          ],
          [
            "function",
            "get_user_permissions",
            743
          ],
          [
            "function",
            "check_permission",
            747
          ]
        ],
        "lukhas_identity/security/awareness_protocol.py": [
          [
            "class",
            "LucasAwarenessProtocol",
            5
          ],
          [
            "function",
            "assess_awareness",
            15
          ]
        ],
        "lukhas_identity/security/kyi_check.py": [
          [
            "function",
            "record_interaction",
            17
          ],
          [
            "function",
            "check_kyi_threshold",
            27
          ],
          [
            "function",
            "get_user_interactions",
            34
          ]
        ],
        "wearables_integration/entropy_beacon.py": [
          [
            "class",
            "EntropyBeacon",
            12
          ],
          [
            "function",
            "start_broadcast",
            20
          ],
          [
            "function",
            "stop_broadcast",
            33
          ],
          [
            "function",
            "generate_entropy_fingerprint",
            38
          ],
          [
            "function",
            "assign_entropy_weight",
            42
          ],
          [
            "function",
            "track_contribution",
            48
          ],
          [
            "function",
            "get_current_time",
            58
          ],
          [
            "function",
            "sign_broadcast",
            62
          ],
          [
            "function",
            "verify_broadcast_signature",
            67
          ]
        ],
        "security/symbolic_vault.py": [
          [
            "class",
            "SymbolicVault",
            14
          ],
          [
            "function",
            "register_environmental_trigger",
            27
          ],
          [
            "function",
            "verify_access",
            38
          ],
          [
            "function",
            "encrypt_memory",
            55
          ]
        ],
        "auth/constitutional_gatekeeper.py": [
          [
            "class",
            "ConstitutionalLevel",
            24
          ],
          [
            "class",
            "ConstitutionalThresholds",
            32
          ],
          [
            "class",
            "ConstitutionalGatekeeper",
            50
          ],
          [
            "function",
            "get_constitutional_gatekeeper",
            417
          ],
          [
            "function",
            "validate_ui_parameters",
            67
          ],
          [
            "function",
            "enforce_cultural_safety",
            108
          ],
          [
            "function",
            "validate_entropy_sync",
            174
          ],
          [
            "function",
            "validate_neurodivergent_accessibility",
            208
          ],
          [
            "function",
            "validate_post_quantum_security",
            273
          ],
          [
            "function",
            "get_enforcement_report",
            363
          ],
          [
            "function",
            "emergency_lockdown",
            379
          ]
        ],
        "auth/qrg_generators.py": [
          [
            "class",
            "QRGType",
            46
          ],
          [
            "class",
            "ConsciousnessQRPattern",
            59
          ],
          [
            "class",
            "CulturalQRTheme",
            69
          ],
          [
            "class",
            "ConsciousnessQRGenerator",
            78
          ],
          [
            "class",
            "CulturalQRGenerator",
            223
          ],
          [
            "class",
            "SteganographicQRGenerator",
            377
          ],
          [
            "class",
            "QuantumQRGenerator",
            537
          ],
          [
            "class",
            "LUKHASQRGManager",
            718
          ],
          [
            "function",
            "generate_consciousness_qr",
            92
          ],
          [
            "function",
            "generate_cultural_qr",
            263
          ],
          [
            "function",
            "generate_steganographic_qr",
            389
          ],
          [
            "function",
            "extract_hidden_data",
            439
          ],
          [
            "function",
            "generate_quantum_qr",
            551
          ],
          [
            "function",
            "generate_adaptive_qr",
            732
          ],
          [
            "function",
            "get_generation_stats",
            817
          ]
        ],
        "auth/cultural_profile_manager.py": [
          [
            "class",
            "CulturalContext",
            29
          ],
          [
            "class",
            "AccessibilityProfile",
            41
          ],
          [
            "class",
            "CulturalProfile",
            51
          ],
          [
            "class",
            "CulturalProfileManager",
            64
          ],
          [
            "function",
            "create_cultural_profile",
            221
          ],
          [
            "function",
            "filter_emojis_for_user",
            258
          ],
          [
            "function",
            "suggest_alternative_emojis",
            375
          ],
          [
            "function",
            "get_cultural_insights",
            420
          ],
          [
            "function",
            "update_profile",
            453
          ],
          [
            "function",
            "get_profile_summary",
            479
          ]
        ],
        "auth/cognitive_sync_adapter.py": [
          [
            "class",
            "CognitiveSyncAdapter",
            6
          ],
          [
            "function",
            "adjust_sync_rate",
            13
          ],
          [
            "function",
            "detect_anomalies",
            24
          ],
          [
            "function",
            "predict_sync_rate",
            37
          ],
          [
            "function",
            "validate_sync_rate",
            47
          ]
        ],
        "auth/entropy_synchronizer.py": [
          [
            "class",
            "DeviceType",
            33
          ],
          [
            "class",
            "EntropySource",
            42
          ],
          [
            "class",
            "EntropySynchronizer",
            51
          ],
          [
            "function",
            "add_sync_callback",
            275
          ],
          [
            "function",
            "get_entropy_summary",
            279
          ]
        ],
        "auth/adaptive_ui_controller.py": [
          [
            "class",
            "UIAdaptationMode",
            30
          ],
          [
            "class",
            "CognitiveLoadMetrics",
            38
          ],
          [
            "class",
            "UIConfiguration",
            48
          ],
          [
            "class",
            "AdaptiveUIController",
            59
          ],
          [
            "function",
            "assess_cognitive_load",
            90
          ],
          [
            "function",
            "adapt_ui_to_cognitive_state",
            167
          ],
          [
            "function",
            "get_adaptation_mode",
            267
          ],
          [
            "function",
            "add_adaptation_callback",
            293
          ],
          [
            "function",
            "get_ui_state_summary",
            297
          ],
          [
            "function",
            "emergency_ui_reset",
            316
          ]
        ],
        "tests/run_integration_tests.py": [
          [
            "class",
            "MockFixture",
            121
          ]
        ],
        "utils/entropy_calculator.py": [
          [
            "class",
            "EntropyScore",
            34
          ],
          [
            "class",
            "EntropyCalculator",
            44
          ],
          [
            "function",
            "calculate_vault_entropy",
            87
          ],
          [
            "function",
            "calculate_entry_entropy",
            158
          ],
          [
            "function",
            "get_entropy_assessment",
            361
          ],
          [
            "function",
            "recommend_entropy_improvements",
            410
          ]
        ],
        "utils/entropy_helpers.py": [
          [
            "class",
            "EntropyCalculator",
            20
          ],
          [
            "class",
            "SecureRandomGenerator",
            76
          ],
          [
            "function",
            "shannon_entropy",
            26
          ],
          [
            "function",
            "pattern_entropy",
            44
          ],
          [
            "function",
            "validate_randomness",
            63
          ],
          [
            "function",
            "generate_secure_bytes",
            82
          ],
          [
            "function",
            "generate_secure_string",
            86
          ],
          [
            "function",
            "assess_entropy_strength",
            93
          ]
        ],
        "utils/symbolic_parser.py": [
          [
            "class",
            "SymbolicCategory",
            33
          ],
          [
            "class",
            "SemanticType",
            45
          ],
          [
            "class",
            "ParsedSymbol",
            60
          ],
          [
            "class",
            "CulturalAnalysis",
            75
          ],
          [
            "class",
            "SymbolicParser",
            84
          ],
          [
            "function",
            "parse_symbolic_element",
            150
          ],
          [
            "function",
            "analyze_cultural_content",
            207
          ],
          [
            "function",
            "extract_patterns",
            270
          ]
        ],
        "utils/qrg_parser.py": [
          [
            "class",
            "QRGParser",
            19
          ],
          [
            "class",
            "GLYMPHParser",
            49
          ],
          [
            "function",
            "parse_qr_code",
            26
          ],
          [
            "function",
            "validate_qr_format",
            37
          ],
          [
            "function",
            "extract_metadata",
            43
          ],
          [
            "function",
            "parse_glymph",
            56
          ],
          [
            "function",
            "interpret_symbols",
            62
          ],
          [
            "function",
            "validate_glymph_sequence",
            68
          ]
        ],
        "backend/database/trust_sharing_manager.py": [
          [
            "function",
            "initiate_vault_share",
            17
          ],
          [
            "function",
            "list_trust_shares_for_user",
            37
          ]
        ],
        "backend/database/crud.py": [
          [
            "function",
            "get_user_by_slug",
            14
          ],
          [
            "function",
            "get_user_by_email",
            20
          ],
          [
            "function",
            "create_user",
            26
          ]
        ],
        "backend/app/cloud_storage.py": [
          [
            "function",
            "save_file_to_storage",
            20
          ]
        ],
        "backend/app/auth.py": [
          [
            "function",
            "signup",
            20
          ]
        ],
        "backend/app/incident_reporter.py": [
          [
            "function",
            "detect_suspicious_activity",
            19
          ],
          [
            "function",
            "report_incident",
            30
          ],
          [
            "function",
            "get_all_incidents",
            42
          ]
        ],
        "backend/app/id_generator.py": [
          [
            "function",
            "generate_lucas_id",
            14
          ],
          [
            "function",
            "generate_username_slug",
            29
          ],
          [
            "function",
            "assign_badge",
            36
          ],
          [
            "function",
            "generate_full_identity",
            50
          ]
        ],
        "backend/app/context_manager.py": [
          [
            "function",
            "build_context",
            19
          ],
          [
            "function",
            "get_context",
            35
          ]
        ],
        "backend/app/admin_tools.py": [
          [
            "function",
            "force_upgrade",
            20
          ],
          [
            "function",
            "force_downgrade",
            32
          ],
          [
            "function",
            "generate_admin_token",
            44
          ]
        ],
        "backend/app/logs_api.py": [
          [
            "function",
            "get_all_session_logs",
            25
          ],
          [
            "function",
            "get_user_session_logs",
            32
          ]
        ],
        "backend/app/journey_log_manager.py": [
          [
            "function",
            "record_journey_event",
            19
          ],
          [
            "function",
            "get_user_journey_logs",
            37
          ]
        ],
        "backend/app/qrglyph_generator.py": [
          [
            "function",
            "generate_qrglyph",
            18
          ]
        ],
        "backend/app/compliance.py": [
          [
            "function",
            "get_compliance_status",
            47
          ],
          [
            "function",
            "get_framework_status",
            54
          ]
        ],
        "backend/app/users.py": [
          [
            "function",
            "get_user_profile",
            18
          ]
        ],
        "backend/app/encryption_core.py": [
          [
            "function",
            "generate_key",
            13
          ],
          [
            "function",
            "encrypt",
            17
          ],
          [
            "function",
            "decrypt",
            22
          ]
        ],
        "backend/app/tier_manager.py": [
          [
            "function",
            "upgrade_tier",
            30
          ],
          [
            "function",
            "downgrade_tier",
            38
          ],
          [
            "function",
            "get_tier_description",
            46
          ],
          [
            "function",
            "get_user_tier",
            52
          ],
          [
            "function",
            "is_access_allowed",
            63
          ],
          [
            "function",
            "log_access_attempt",
            66
          ]
        ],
        "backend/app/badge_manager.py": [
          [
            "function",
            "assign_badge",
            24
          ],
          [
            "function",
            "list_available_badges",
            41
          ]
        ],
        "backend/app/session_manager.py": [
          [
            "function",
            "create_session",
            19
          ],
          [
            "function",
            "get_session",
            37
          ],
          [
            "function",
            "invalidate_session",
            43
          ]
        ],
        "backend/app/cloud_storage_policy.py": [
          [
            "function",
            "get_quota_for_tier",
            29
          ],
          [
            "function",
            "get_default_retention_period",
            35
          ],
          [
            "function",
            "get_inactive_cleanup_period",
            41
          ]
        ],
        "backend/app/game_state_bridge.py": [
          [
            "function",
            "archive_game_state",
            27
          ],
          [
            "function",
            "list_user_game_states",
            44
          ]
        ],
        "backend/app/vault_downloads.py": [
          [
            "function",
            "download_vault_file",
            20
          ]
        ],
        "backend/app/symbolic_score.py": [
          [
            "function",
            "update_symbolic_score",
            15
          ],
          [
            "function",
            "get_symbolic_score",
            29
          ],
          [
            "function",
            "reset_scores",
            39
          ]
        ],
        "backend/app/email_logs.py": [
          [
            "function",
            "log_email_event",
            17
          ],
          [
            "function",
            "get_all_email_logs",
            31
          ],
          [
            "function",
            "get_user_email_logs",
            37
          ]
        ],
        "backend/app/crypto.py": [
          [
            "function",
            "encrypt_data",
            18
          ],
          [
            "function",
            "decrypt_data",
            23
          ],
          [
            "function",
            "generate_key_from_seed",
            30
          ],
          [
            "function",
            "generate_collapse_hash",
            38
          ],
          [
            "function",
            "generate_trace_index",
            59
          ]
        ],
        "backend/app/cloud_bridge_manager.py": [
          [
            "function",
            "upload_to_bridge",
            30
          ],
          [
            "function",
            "sync_from_bridge",
            47
          ],
          [
            "function",
            "list_bridge_assets",
            62
          ],
          [
            "function",
            "register_device",
            81
          ]
        ],
        "backend/app/audit_logger.py": [
          [
            "function",
            "log_action",
            19
          ],
          [
            "function",
            "get_audit_logs",
            32
          ],
          [
            "function",
            "get_user_audit_logs",
            38
          ]
        ],
        "backend/app/replay_manager.py": [
          [
            "function",
            "add_replay_entry",
            19
          ],
          [
            "function",
            "get_replay_entries",
            35
          ]
        ],
        "backend/app/vault.py": [
          [
            "function",
            "test_vault_route",
            72
          ]
        ],
        "backend/app/logs.py": [
          [
            "function",
            "get_all_logs_combined",
            19
          ]
        ],
        "backend/app/emailer.py": [
          [
            "function",
            "send_welcome_email",
            23
          ]
        ],
        "backend/app/external_authenticator.py": [
          [
            "function",
            "initiate_external_auth",
            17
          ],
          [
            "function",
            "confirm_external_auth",
            31
          ],
          [
            "function",
            "list_active_auth_services",
            46
          ]
        ],
        "backend/app/tests.py": [
          [
            "function",
            "run_symbolic_tests",
            17
          ]
        ],
        "backend/app/institution_manager.py": [
          [
            "function",
            "institution_signup",
            18
          ]
        ],
        "backend/app/device_registry.py": [
          [
            "function",
            "register_device",
            17
          ],
          [
            "function",
            "get_user_devices",
            35
          ]
        ],
        "backend/app/token_handler.py": [
          [
            "function",
            "create_access_token",
            25
          ],
          [
            "function",
            "decode_access_token",
            36
          ]
        ],
        "backend/app/analytics_engine.py": [
          [
            "function",
            "record_event",
            15
          ],
          [
            "function",
            "get_user_analytics",
            29
          ],
          [
            "function",
            "get_aggregate_events",
            35
          ]
        ],
        "backend/dao/log_viewer.py": [
          [
            "function",
            "load_logs",
            14
          ],
          [
            "function",
            "print_log",
            21
          ]
        ],
        "backend/dao/dao_core.py": [
          [
            "function",
            "load_registry",
            22
          ],
          [
            "function",
            "evaluate_proposal",
            30
          ]
        ],
        "backend/seedra/seedra_core.py": [
          [
            "class",
            "IdentityProfile",
            20
          ],
          [
            "class",
            "VerificationAttempt",
            41
          ],
          [
            "class",
            "SEEDRACore",
            56
          ]
        ],
        "backend/seedra/biometric_engine.py": [
          [
            "class",
            "BiometricTemplate",
            19
          ],
          [
            "class",
            "BiometricMatch",
            36
          ],
          [
            "class",
            "BiometricEngine",
            50
          ]
        ],
        "backend/seedra/identity_validator.py": [
          [
            "class",
            "ValidationRule",
            17
          ],
          [
            "class",
            "ValidationResult",
            28
          ],
          [
            "class",
            "IdentityValidator",
            42
          ]
        ],
        "backend/seedra/ethics/seedra_ethics_engine.py": [
          [
            "class",
            "SEEDRAv3Ethics",
            8
          ],
          [
            "class",
            "QuantumOptimizer",
            96
          ],
          [
            "function",
            "validate_action",
            36
          ],
          [
            "function",
            "quantum_anneal_trauma",
            109
          ]
        ],
        "backend/seedra/vault/seedra_vault_manager.py": [
          [
            "function",
            "current_sid",
            23
          ],
          [
            "function",
            "set_current_sid",
            30
          ]
        ],
        "backend/seedra/vault/seedra_registry.py": [
          [
            "function",
            "get_user_tier",
            32
          ],
          [
            "function",
            "set_user_tier",
            43
          ]
        ],
        "backend/verifold/entropy_fusion.py": [
          [
            "function",
            "get_tpm_entropy",
            26
          ],
          [
            "function",
            "get_entropy_volatility",
            37
          ],
          [
            "function",
            "export_to_verifold_chain",
            48
          ],
          [
            "function",
            "generate_symbolic_summary",
            59
          ],
          [
            "class",
            "EmotionType",
            70
          ],
          [
            "class",
            "EthicsWeight",
            81
          ],
          [
            "class",
            "SymbolicContext",
            91
          ],
          [
            "class",
            "EntropyFusionEngine",
            100
          ],
          [
            "class",
            "SymbolicValidator",
            227
          ],
          [
            "function",
            "fuse_entropy",
            256
          ],
          [
            "function",
            "fuse_entropy_symbolic",
            126
          ],
          [
            "function",
            "analyze_entropy_patterns",
            176
          ],
          [
            "function",
            "generate_symbolic_narrative",
            193
          ],
          [
            "function",
            "export_fusion_history",
            211
          ],
          [
            "function",
            "validate_fusion_result",
            235
          ]
        ],
        "backend/verifold/setup_project.py": [
          [
            "class",
            "CollapseHashSetup",
            26
          ],
          [
            "function",
            "main",
            397
          ],
          [
            "function",
            "check_python_version",
            51
          ],
          [
            "function",
            "install_dependencies",
            70
          ],
          [
            "function",
            "create_directories",
            145
          ],
          [
            "function",
            "create_config",
            180
          ],
          [
            "function",
            "setup_test_environment",
            250
          ],
          [
            "function",
            "run_validation_tests",
            277
          ],
          [
            "function",
            "print_setup_summary",
            315
          ],
          [
            "function",
            "run_full_setup",
            352
          ]
        ],
        "backend/verifold/qr_encoder.py": [
          [
            "class",
            "CollapseQREncoder",
            40
          ],
          [
            "function",
            "main",
            227
          ],
          [
            "function",
            "encode_hash_to_qr",
            65
          ],
          [
            "function",
            "generate_verification_qr_batch",
            188
          ],
          [
            "function",
            "decode_qr_to_hash",
            218
          ]
        ],
        "backend/verifold/verifold_replay_engine.py": [
          [
            "class",
            "ReplayEvent",
            32
          ],
          [
            "class",
            "ReplaySequence",
            44
          ],
          [
            "class",
            "CollapseReplayEngine",
            55
          ],
          [
            "function",
            "load_collapse_sequence",
            72
          ],
          [
            "function",
            "create_replay_sequence",
            99
          ],
          [
            "function",
            "replay_sequence",
            268
          ],
          [
            "function",
            "export_replay_report",
            326
          ],
          [
            "function",
            "find_anomalies",
            384
          ]
        ],
        "backend/verifold/hardware_entropy_seed.py": [
          [
            "class",
            "HardwareType",
            25
          ],
          [
            "class",
            "EntropySource",
            37
          ],
          [
            "class",
            "HardwareEntropySeeder",
            47
          ],
          [
            "function",
            "discover_entropy_sources",
            59
          ],
          [
            "function",
            "generate_entropy_seed",
            298
          ],
          [
            "function",
            "get_entropy_quality_report",
            372
          ]
        ],
        "backend/verifold/verifold_cli.py": [
          [
            "function",
            "cli",
            33
          ],
          [
            "function",
            "generate",
            48
          ],
          [
            "function",
            "verify",
            64
          ],
          [
            "function",
            "export",
            98
          ],
          [
            "function",
            "keygen",
            111
          ],
          [
            "function",
            "validate",
            125
          ]
        ],
        "backend/verifold/web_qr_verifier.py": [
          [
            "class",
            "QRVerificationRequest",
            39
          ],
          [
            "class",
            "QRVerificationResult",
            47
          ],
          [
            "class",
            "WebQRVerifier",
            57
          ],
          [
            "function",
            "flask_verify_qr",
            346
          ],
          [
            "function",
            "flask_verify_qr_image",
            356
          ],
          [
            "function",
            "flask_get_stats",
            367
          ],
          [
            "function",
            "create_web_app",
            401
          ],
          [
            "function",
            "verify_qr_hash",
            114
          ],
          [
            "function",
            "verify_qr_batch",
            244
          ],
          [
            "function",
            "decode_qr_image",
            262
          ],
          [
            "function",
            "get_verification_stats",
            283
          ],
          [
            "function",
            "create_verification_report",
            309
          ]
        ],
        "backend/verifold/verifold_gui.py": [
          [
            "class",
            "CollapseHashGUI",
            29
          ],
          [
            "class",
            "CollapseHashWebDashboard",
            318
          ],
          [
            "function",
            "setup_ui",
            49
          ],
          [
            "function",
            "create_generator_tab",
            62
          ],
          [
            "function",
            "create_verifier_tab",
            108
          ],
          [
            "function",
            "create_chain_tab",
            144
          ],
          [
            "function",
            "create_audit_tab",
            178
          ],
          [
            "function",
            "create_settings_tab",
            201
          ],
          [
            "function",
            "browse_data_file",
            230
          ],
          [
            "function",
            "browse_key_file",
            239
          ],
          [
            "function",
            "browse_logbook",
            248
          ],
          [
            "function",
            "update_entropy_label",
            257
          ],
          [
            "function",
            "generate_hash",
            261
          ],
          [
            "function",
            "verify_signature",
            267
          ],
          [
            "function",
            "batch_verify",
            272
          ],
          [
            "function",
            "verify_chain",
            277
          ],
          [
            "function",
            "rebuild_cache",
            282
          ],
          [
            "function",
            "export_segment",
            287
          ],
          [
            "function",
            "run_full_audit",
            292
          ],
          [
            "function",
            "quick_audit",
            297
          ],
          [
            "function",
            "export_audit_report",
            302
          ],
          [
            "function",
            "save_settings",
            307
          ],
          [
            "function",
            "run",
            312
          ],
          [
            "function",
            "create_layout",
            328
          ],
          [
            "function",
            "run_server",
            333
          ]
        ],
        "backend/verifold/verifold_hash_pq.py": [
          [
            "class",
            "VerifoldGenerator",
            21
          ],
          [
            "function",
            "generate_keypair",
            30
          ],
          [
            "function",
            "generate_verifold_hash",
            42
          ],
          [
            "function",
            "sign_hash",
            67
          ]
        ],
        "backend/verifold/web_dashboard.py": [
          [
            "class",
            "DashboardDataLoader",
            37
          ],
          [
            "class",
            "StreamlitDashboard",
            179
          ],
          [
            "class",
            "FlaskDashboard",
            325
          ],
          [
            "function",
            "create_streamlit_dashboard",
            363
          ],
          [
            "function",
            "create_flask_dashboard",
            372
          ],
          [
            "function",
            "load_logbook_data",
            54
          ],
          [
            "function",
            "get_dashboard_metrics",
            125
          ],
          [
            "function",
            "render_dashboard",
            188
          ],
          [
            "function",
            "run",
            356
          ]
        ],
        "backend/verifold/verifold_hash_utils.py": [
          [
            "function",
            "generate_entropy_score",
            21
          ],
          [
            "function",
            "format_collapse_record",
            35
          ],
          [
            "function",
            "validate_hex_string",
            54
          ],
          [
            "function",
            "secure_random_bytes",
            69
          ],
          [
            "function",
            "hash_with_salt",
            83
          ],
          [
            "class",
            "KeyManager",
            98
          ],
          [
            "function",
            "generate_keypair",
            108
          ],
          [
            "function",
            "derive_key_from_seed",
            118
          ],
          [
            "function",
            "export_public_key",
            131
          ]
        ],
        "backend/verifold/qr_decoder.py": [
          [
            "function",
            "decode_from_image",
            26
          ]
        ],
        "backend/verifold/yubi_seeder.py": [
          [
            "class",
            "YubiDeviceType",
            25
          ],
          [
            "class",
            "YubiOperation",
            33
          ],
          [
            "class",
            "YubiDevice",
            43
          ],
          [
            "class",
            "YubiSession",
            54
          ],
          [
            "class",
            "YubiSeeder",
            63
          ],
          [
            "function",
            "discover_yubi_devices",
            74
          ],
          [
            "function",
            "create_session",
            188
          ],
          [
            "function",
            "generate_entropy_from_yubi",
            276
          ],
          [
            "function",
            "sign_with_yubi",
            347
          ],
          [
            "function",
            "close_session",
            414
          ],
          [
            "function",
            "get_device_status",
            428
          ]
        ],
        "backend/verifold/verifold_verifier.py": [
          [
            "function",
            "verify_verifold_signature",
            17
          ]
        ],
        "backend/verifold/verifold_chain.py": [
          [
            "class",
            "CollapseChain",
            21
          ],
          [
            "class",
            "ChainValidator",
            123
          ],
          [
            "function",
            "add_to_chain",
            36
          ],
          [
            "function",
            "verify_chain_integrity",
            51
          ],
          [
            "function",
            "get_chain_summary",
            66
          ],
          [
            "function",
            "rebuild_chain_cache",
            76
          ],
          [
            "function",
            "export_chain_segment",
            83
          ],
          [
            "function",
            "find_chain_breaks",
            97
          ],
          [
            "function",
            "calculate_chain_hash",
            107
          ],
          [
            "function",
            "validate_full_chain",
            132
          ],
          [
            "function",
            "validate_chain_segment",
            145
          ],
          [
            "function",
            "check_temporal_consistency",
            158
          ],
          [
            "function",
            "verify_hash_uniqueness",
            171
          ]
        ],
        "backend/verifold/ledger_auditor.py": [
          [
            "class",
            "LedgerAuditor",
            27
          ],
          [
            "class",
            "ContinuousAuditor",
            219
          ],
          [
            "class",
            "ComplianceChecker",
            268
          ],
          [
            "function",
            "audit_full_ledger",
            64
          ],
          [
            "function",
            "validate_record_schema",
            91
          ],
          [
            "function",
            "verify_signatures_batch",
            104
          ],
          [
            "function",
            "analyze_temporal_consistency",
            117
          ],
          [
            "function",
            "detect_duplicate_hashes",
            130
          ],
          [
            "function",
            "analyze_hash_entropy",
            143
          ],
          [
            "function",
            "check_ledger_integrity",
            156
          ],
          [
            "function",
            "generate_forensic_report",
            177
          ],
          [
            "function",
            "repair_ledger",
            190
          ],
          [
            "function",
            "export_audit_report",
            204
          ],
          [
            "function",
            "add_alert_callback",
            238
          ],
          [
            "function",
            "start_monitoring",
            247
          ],
          [
            "function",
            "stop_monitoring",
            252
          ],
          [
            "function",
            "check_for_anomalies",
            257
          ],
          [
            "function",
            "check_compliance",
            296
          ]
        ],
        "backend/verifold/narrative_utils.py": [
          [
            "class",
            "EmotionVocabulary",
            46
          ],
          [
            "class",
            "QuantumNarrativeGenerator",
            205
          ],
          [
            "class",
            "SymbolicVocabularyExpander",
            444
          ],
          [
            "function",
            "main",
            544
          ],
          [
            "function",
            "get_emotion_words",
            152
          ],
          [
            "function",
            "create_emotion_phrase",
            178
          ],
          [
            "function",
            "generate_narrative",
            255
          ],
          [
            "function",
            "generate_gpt_narrative",
            387
          ],
          [
            "function",
            "add_custom_emotion",
            485
          ],
          [
            "function",
            "learn_from_usage",
            499
          ]
        ],
        "backend/verifold/journal_mode.py": [
          [
            "class",
            "JournalEntry",
            51
          ],
          [
            "class",
            "VeriFoldJournal",
            64
          ],
          [
            "function",
            "gpt_summarize",
            365
          ],
          [
            "function",
            "replay_chain",
            407
          ],
          [
            "function",
            "replay_with_gpt_summary",
            456
          ],
          [
            "function",
            "generate_journal_entry",
            108
          ],
          [
            "function",
            "generate_chain_narrative",
            289
          ],
          [
            "function",
            "export_journal",
            319
          ]
        ],
        "backend/verifold/identity/ethics_verifier.py": [
          [
            "class",
            "EthicsViolationType",
            12
          ],
          [
            "class",
            "EthicsVerifier",
            18
          ],
          [
            "function",
            "verify_replay_ethics",
            26
          ],
          [
            "function",
            "validate_export_consent",
            36
          ],
          [
            "function",
            "check_emotional_impact",
            43
          ],
          [
            "function",
            "audit_ethics_violation",
            50
          ]
        ],
        "backend/verifold/identity/recovery_protocols.py": [
          [
            "class",
            "RecoveryShare",
            13
          ],
          [
            "class",
            "LucasRecoveryProtocols",
            20
          ],
          [
            "function",
            "generate_recovery_shares",
            28
          ],
          [
            "function",
            "initiate_recovery",
            33
          ],
          [
            "function",
            "reconstruct_key",
            38
          ],
          [
            "function",
            "verify_guardian",
            43
          ]
        ],
        "backend/verifold/web_journal/launch_web_journal.py": [
          [
            "function",
            "check_dependencies",
            18
          ],
          [
            "function",
            "main",
            37
          ]
        ],
        "backend/verifold/web_journal/web_journal_app.py": [
          [
            "class",
            "VeriFoldWebJournal",
            44
          ],
          [
            "function",
            "main",
            346
          ],
          [
            "function",
            "setup_routes",
            86
          ],
          [
            "function",
            "load_journal_entries",
            155
          ],
          [
            "function",
            "generate_live_summary",
            303
          ],
          [
            "function",
            "run",
            328
          ],
          [
            "function",
            "index",
            90
          ],
          [
            "function",
            "get_entries",
            95
          ],
          [
            "function",
            "get_gpt_summary",
            105
          ],
          [
            "function",
            "refresh_entries",
            115
          ],
          [
            "function",
            "handle_connect",
            131
          ],
          [
            "function",
            "handle_summary_request",
            141
          ],
          [
            "function",
            "handle_disconnect",
            151
          ]
        ],
        "backend/verifold/security/consent_fuzz_tester.py": [
          [
            "class",
            "ConsentFuzzTester",
            13
          ],
          [
            "function",
            "generate_invalid_consent_data",
            21
          ],
          [
            "function",
            "fuzz_tier_boundaries",
            26
          ],
          [
            "function",
            "test_consent_bypass_attempts",
            31
          ],
          [
            "function",
            "simulate_replay_injection",
            36
          ],
          [
            "function",
            "run_comprehensive_fuzz_suite",
            41
          ]
        ],
        "backend/verifold/security/symbolic_adversary_agent.py": [
          [
            "class",
            "AdversaryType",
            13
          ],
          [
            "class",
            "AttackScenario",
            20
          ],
          [
            "class",
            "SymbolicAdversaryAgent",
            28
          ],
          [
            "function",
            "simulate_lucas_id_impersonation",
            36
          ],
          [
            "function",
            "attempt_memory_replay_injection",
            41
          ],
          [
            "function",
            "test_cryptographic_downgrade",
            46
          ],
          [
            "function",
            "simulate_social_engineering",
            51
          ],
          [
            "function",
            "generate_threat_assessment",
            56
          ]
        ],
        "backend/verifold/security/glyph_mutation_simulator.py": [
          [
            "class",
            "MutationType",
            13
          ],
          [
            "class",
            "GlyphMutationSimulator",
            20
          ],
          [
            "function",
            "corrupt_qr_pixels",
            28
          ],
          [
            "function",
            "inject_malicious_stego",
            33
          ],
          [
            "function",
            "simulate_qr_degradation",
            38
          ],
          [
            "function",
            "spoof_tier_level",
            43
          ],
          [
            "function",
            "generate_attack_report",
            48
          ]
        ],
        "backend/verifold/cryptography/forward_secure_pibe.py": [
          [
            "class",
            "FSPIBEParams",
            13
          ],
          [
            "class",
            "ForwardSecurePIBE",
            19
          ],
          [
            "function",
            "setup",
            27
          ],
          [
            "function",
            "extract_key",
            32
          ],
          [
            "function",
            "encrypt",
            37
          ],
          [
            "function",
            "decrypt",
            42
          ],
          [
            "function",
            "puncture",
            47
          ]
        ],
        "backend/verifold/cryptography/crypto_router.py": [
          [
            "class",
            "SecurityTier",
            33
          ],
          [
            "class",
            "CryptoRouter",
            39
          ],
          [
            "function",
            "select_signature_scheme",
            57
          ],
          [
            "function",
            "select_encryption_scheme",
            65
          ],
          [
            "function",
            "get_side_channel_resistance",
            72
          ]
        ],
        "backend/verifold/cryptography/zk_narrative_proof_adapter.py": [
          [
            "class",
            "SymbolicNarrative",
            13
          ],
          [
            "class",
            "ZKNarrativeProofAdapter",
            20
          ],
          [
            "function",
            "generate_proof_circuit",
            27
          ],
          [
            "function",
            "create_experience_proof",
            35
          ],
          [
            "function",
            "verify_narrative_proof",
            47
          ]
        ],
        "backend/verifold/web3/verifold_bridge_adapter.py": [
          [
            "class",
            "BlockchainEvent",
            13
          ],
          [
            "class",
            "VeriFoldBridgeAdapter",
            21
          ],
          [
            "function",
            "export_to_blockchain",
            29
          ],
          [
            "function",
            "create_nft_metadata",
            34
          ],
          [
            "function",
            "verify_cross_chain_integrity",
            39
          ],
          [
            "function",
            "synchronize_lucas_id",
            44
          ]
        ],
        "backend/verifold/web3/emotion_nft_standard.py": [
          [
            "class",
            "EmotionMetadata",
            13
          ],
          [
            "class",
            "EmotionNFTStandard",
            20
          ],
          [
            "function",
            "mint_emotion_nft",
            28
          ],
          [
            "function",
            "verify_emotional_authenticity",
            33
          ],
          [
            "function",
            "encode_sentiment_vector",
            38
          ],
          [
            "function",
            "create_temporal_signature",
            43
          ]
        ],
        "backend/verifold/compliance/symbolic_audit_mode.py": [
          [
            "class",
            "AuditEvent",
            14
          ],
          [
            "class",
            "SymbolicAuditMode",
            23
          ],
          [
            "function",
            "create_audit_event",
            31
          ],
          [
            "function",
            "verify_consent_checkpoint",
            50
          ],
          [
            "function",
            "generate_compliance_report",
            55
          ],
          [
            "function",
            "secure_replay_with_audit",
            68
          ],
          [
            "class",
            "ConsentScopeValidator",
            78
          ],
          [
            "class",
            "ConsentRecord",
            82
          ],
          [
            "function",
            "validate_consent_scope",
            79
          ]
        ],
        "backend/verifold/storage/verifold_exporter.py": [
          [
            "class",
            "ExportFormat",
            13
          ],
          [
            "class",
            "VeriFoldExporter",
            20
          ],
          [
            "function",
            "export_memory_collapse",
            28
          ],
          [
            "function",
            "export_consent_chain",
            33
          ],
          [
            "function",
            "create_public_glymph",
            38
          ],
          [
            "function",
            "export_to_ipfs",
            43
          ],
          [
            "function",
            "generate_export_manifest",
            48
          ]
        ],
        "backend/verifold/storage/filecoin_uploader.py": [
          [
            "class",
            "UploadResult",
            13
          ],
          [
            "class",
            "FilecoinUploader",
            20
          ],
          [
            "function",
            "upload_encrypted_memory",
            28
          ],
          [
            "function",
            "create_storage_deal",
            33
          ],
          [
            "function",
            "anchor_hash_to_blockchain",
            38
          ],
          [
            "function",
            "retrieve_encrypted_data",
            43
          ],
          [
            "function",
            "monitor_storage_deals",
            48
          ]
        ],
        "backend/verifold/storage/verifold_vault_viewer.py": [
          [
            "class",
            "ViewMode",
            13
          ],
          [
            "class",
            "VeriFoldVaultViewer",
            19
          ],
          [
            "function",
            "load_memory_vault",
            27
          ],
          [
            "function",
            "render_timeline_view",
            32
          ],
          [
            "function",
            "create_journal_format",
            37
          ],
          [
            "function",
            "generate_emotional_heatmap",
            42
          ],
          [
            "function",
            "search_memories",
            47
          ],
          [
            "function",
            "export_vault_summary",
            52
          ]
        ],
        "backend/verifold/scanner_pwa/scanner_api.py": [
          [
            "function",
            "index",
            21
          ],
          [
            "function",
            "static_files",
            26
          ],
          [
            "function",
            "verify_qr_data",
            50
          ],
          [
            "function",
            "verify_lucas_id",
            73
          ],
          [
            "function",
            "verify_symbolic_memory",
            85
          ],
          [
            "function",
            "api_status",
            98
          ]
        ],
        "backend/verifold/scanner_pwa/scanner_backend.py": [
          [
            "class",
            "ScannerBackend",
            24
          ],
          [
            "function",
            "load_lucas_registry",
            34
          ],
          [
            "function",
            "verify_lucas_id",
            53
          ],
          [
            "function",
            "verify_symbolic_memory",
            72
          ],
          [
            "function",
            "process_qr_data",
            107
          ]
        ],
        "backend/verifold/ai/narrative_alignment_checker.py": [
          [
            "class",
            "NarrativeAlignmentChecker",
            12
          ],
          [
            "function",
            "compute_narrative_fingerprint",
            20
          ],
          [
            "function",
            "track_provenance_record",
            25
          ],
          [
            "function",
            "replay_signature_chain",
            39
          ],
          [
            "function",
            "validate_hash_consistency",
            44
          ],
          [
            "function",
            "detect_hallucination_drift",
            49
          ],
          [
            "function",
            "verify_emotional_authenticity",
            54
          ],
          [
            "function",
            "generate_alignment_report",
            59
          ],
          [
            "function",
            "create_authenticity_proof",
            64
          ]
        ],
        "backend/verifold/ai/gpt_symbolic_narrator.py": [
          [
            "function",
            "main",
            12
          ]
        ],
        "backend/verifold/visual/glyph_stego_encoder.py": [
          [
            "class",
            "GLYMPHData",
            14
          ],
          [
            "class",
            "GlyphStegoEncoder",
            21
          ],
          [
            "function",
            "encode_dual_layer",
            29
          ],
          [
            "function",
            "decode_visible_layer",
            60
          ],
          [
            "function",
            "decode_hidden_layer",
            71
          ],
          [
            "function",
            "generate_security_warning",
            92
          ],
          [
            "function",
            "validate_glyph_integrity",
            101
          ]
        ],
        "backend/verifold/visual/qr_tier_scanner.py": [
          [
            "class",
            "ScanResult",
            12
          ],
          [
            "class",
            "QRTierScanner",
            18
          ],
          [
            "function",
            "scan_with_tier_check",
            26
          ],
          [
            "function",
            "generate_security_warning",
            31
          ],
          [
            "function",
            "progressive_disclosure",
            36
          ],
          [
            "function",
            "audit_scan_attempt",
            41
          ]
        ],
        "backend/qrglyphs/qrglymph_public.py": [
          [
            "function",
            "generate_key",
            47
          ],
          [
            "function",
            "encrypt_file",
            50
          ],
          [
            "function",
            "save_encrypted_file",
            56
          ],
          [
            "function",
            "mock_ipfs_upload",
            63
          ],
          [
            "function",
            "generate_qr_code",
            72
          ],
          [
            "function",
            "create_qrglyph",
            79
          ]
        ],
        "backend/dream_engine/html_social_generator.py": [
          [
            "function",
            "generate_social_card",
            7
          ]
        ],
        "backend/dream_engine/dream_narrator_queue.py": [
          [
            "function",
            "load_dreams",
            33
          ],
          [
            "function",
            "filter_narratable_dreams",
            39
          ],
          [
            "function",
            "save_to_queue",
            45
          ],
          [
            "function",
            "run_narration_queue_builder",
            51
          ]
        ],
        "backend/dream_engine/dream_registry_dashboard.py": [
          [
            "function",
            "display_dream_votes",
            20
          ]
        ],
        "backend/dream_engine/assistant.py": [
          [
            "function",
            "generate_dream_response",
            39
          ],
          [
            "function",
            "log_to_queue",
            57
          ],
          [
            "function",
            "prompt_text_input",
            71
          ],
          [
            "function",
            "listen_to_microphone",
            75
          ],
          [
            "function",
            "run_assistant",
            98
          ],
          [
            "class",
            "LanguageModelChatMessage",
            128
          ],
          [
            "function",
            "User",
            130
          ]
        ],
        "backend/dream_engine/dream_replay.py": [
          [
            "function",
            "replay_approved_dreams",
            6
          ],
          [
            "function",
            "replay_recent_dreams",
            47
          ],
          [
            "function",
            "replay_dream_by_id",
            86
          ]
        ],
        "backend/dream_engine/publish_queue_manager.py": [
          [
            "function",
            "main_menu",
            23
          ],
          [
            "function",
            "symbolic_cli_handler",
            41
          ]
        ],
        "backend/dream_engine/dream_seed_vote.py": [
          [
            "function",
            "cast_symbolic_vote",
            22
          ]
        ],
        "backend/dream_engine/dream_injector.py": [
          [
            "function",
            "create_dream_proposal",
            22
          ]
        ],
        "backend/dream_engine/dream_summary_generator.py": [
          [
            "function",
            "generate_poetic_summary",
            28
          ],
          [
            "function",
            "summarize_dream_log",
            40
          ]
        ],
        "backend/dream_engine/narration_controller.py": [
          [
            "function",
            "fetch_narration_entries",
            8
          ],
          [
            "function",
            "load_user_settings",
            15
          ],
          [
            "function",
            "filter_narration_queue",
            33
          ]
        ],
        "mobile_platform/mobile_ui_renderer.py": [
          [
            "class",
            "TouchGesture",
            23
          ],
          [
            "class",
            "VisualizationMode",
            32
          ],
          [
            "class",
            "TouchEvent",
            41
          ]
        ],
        "public/lambda_id_previewer.py": [
          [
            "class",
            "PreviewResult",
            36
          ],
          [
            "class",
            "PublicLambdaIDPreviewer",
            52
          ],
          [
            "function",
            "get_web_interface_template",
            799
          ],
          [
            "function",
            "preview_lambda_id",
            196
          ],
          [
            "function",
            "generate_demo_lambda_id",
            581
          ],
          [
            "function",
            "get_tier_comparison",
            637
          ],
          [
            "function",
            "get_format_specifications",
            667
          ],
          [
            "function",
            "analyze_entropy_live",
            691
          ],
          [
            "function",
            "get_public_api_info",
            741
          ]
        ],
        "mobile/websocket_client.py": [
          [
            "class",
            "MobileWebSocketClient",
            8
          ],
          [
            "function",
            "connect",
            16
          ],
          [
            "function",
            "disconnect",
            21
          ],
          [
            "function",
            "send_message",
            26
          ],
          [
            "function",
            "receive_message",
            34
          ],
          [
            "function",
            "is_connected",
            43
          ]
        ],
        "mobile/qr_code_animator.py": [
          [
            "class",
            "QRCodeAnimator",
            16
          ],
          [
            "function",
            "generate_glyph",
            26
          ],
          [
            "function",
            "start_animation",
            37
          ],
          [
            "function",
            "stop_animation",
            43
          ],
          [
            "function",
            "update_qr_code",
            49
          ],
          [
            "function",
            "get_current_frame",
            64
          ],
          [
            "function",
            "is_animation_active",
            73
          ],
          [
            "function",
            "should_refresh",
            77
          ],
          [
            "function",
            "get_animation_status",
            84
          ]
        ],
        "governance/policy_board.py": [
          [
            "class",
            "PolicyProposal",
            15
          ],
          [
            "function",
            "cast_vote",
            22
          ],
          [
            "function",
            "is_approved",
            26
          ],
          [
            "function",
            "status_report",
            35
          ]
        ],
        "api/api.py": [
          [
            "class",
            "UserProfileRequest",
            109
          ],
          [
            "class",
            "SymbolicAuthRequest",
            122
          ],
          [
            "class",
            "QRGGenerationRequest",
            130
          ],
          [
            "class",
            "QRGValidationRequest",
            140
          ],
          [
            "class",
            "VaultUpdateRequest",
            147
          ],
          [
            "class",
            "BiometricEnrollRequest",
            154
          ],
          [
            "class",
            "BiometricVerifyRequest",
            162
          ],
          [
            "class",
            "LukhasUnifiedAPI",
            181
          ],
          [
            "function",
            "get_lukhas_unified_api_app",
            463
          ],
          [
            "function",
            "get_fastapi_app_instance",
            433
          ],
          [
            "function",
            "get_qrs_manager",
            439
          ],
          [
            "function",
            "get_tier_manager",
            445
          ],
          [
            "function",
            "get_biometric_manager",
            451
          ],
          [
            "class",
            "BaseModel",
            45
          ],
          [
            "function",
            "Field",
            46
          ],
          [
            "function",
            "Depends",
            47
          ],
          [
            "class",
            "QRSManager",
            69
          ],
          [
            "class",
            "LambdaTierManager",
            76
          ],
          [
            "class",
            "BiometricIntegrationManager",
            84
          ],
          [
            "class",
            "QRGType",
            90
          ],
          [
            "function",
            "create_lambda_id_with_qrg",
            71
          ],
          [
            "function",
            "authenticate_with_symbolic_challenge",
            72
          ],
          [
            "function",
            "generate_qrg_for_lambda_id",
            73
          ],
          [
            "function",
            "validate_qrg_authentication",
            74
          ],
          [
            "function",
            "get_user_tier",
            78
          ],
          [
            "function",
            "get_tier_benefits",
            79
          ],
          [
            "function",
            "get_tier_upgrade_info",
            80
          ],
          [
            "function",
            "get_symbolic_tier_status",
            81
          ],
          [
            "function",
            "enroll_biometric",
            86
          ],
          [
            "function",
            "verify_biometric",
            87
          ]
        ],
        "api/onboarding_api.py": [
          [
            "function",
            "start_enhanced_onboarding_endpoint",
            67
          ],
          [
            "function",
            "progress_onboarding_stage_endpoint",
            110
          ],
          [
            "function",
            "complete_enhanced_onboarding_endpoint",
            152
          ],
          [
            "function",
            "get_onboarding_status_endpoint",
            189
          ],
          [
            "function",
            "get_personality_templates_endpoint",
            219
          ],
          [
            "function",
            "get_cultural_templates_endpoint",
            252
          ],
          [
            "function",
            "get_symbolic_suggestions_endpoint",
            284
          ],
          [
            "class",
            "EnhancedOnboardingManager",
            29
          ],
          [
            "function",
            "start_onboarding_session",
            31
          ],
          [
            "function",
            "progress_onboarding_stage",
            32
          ],
          [
            "function",
            "complete_onboarding",
            33
          ],
          [
            "function",
            "get_onboarding_status",
            34
          ],
          [
            "function",
            "api_response",
            44
          ]
        ],
        "api/auth/onboarding.py": [
          [
            "function",
            "start_onboarding_endpoint",
            25
          ],
          [
            "function",
            "setup_user_tier_endpoint",
            47
          ],
          [
            "function",
            "collect_user_consent_endpoint",
            68
          ],
          [
            "function",
            "complete_onboarding_process_endpoint",
            90
          ]
        ],
        "api/auth/flows.py": [
          [
            "function",
            "register_user_endpoint",
            24
          ],
          [
            "function",
            "login_user_endpoint",
            49
          ],
          [
            "function",
            "logout_user_endpoint",
            72
          ],
          [
            "function",
            "verify_authentication_token_endpoint",
            92
          ]
        ],
        "api/controllers/lambd_id_controller.py": [
          [
            "class",
            "LambdaIDController",
            75
          ],
          [
            "function",
            "generate_id",
            155
          ],
          [
            "function",
            "validate_id",
            233
          ],
          [
            "function",
            "calculate_entropy",
            306
          ],
          [
            "function",
            "get_tier_information",
            345
          ],
          [
            "function",
            "request_tier_upgrade",
            382
          ],
          [
            "function",
            "check_service_health",
            461
          ],
          [
            "class",
            "LambdaIDGenerator",
            35
          ],
          [
            "class",
            "LambdaIDValidator",
            41
          ],
          [
            "class",
            "EntropyCalculator",
            47
          ],
          [
            "class",
            "LambdaTierManager",
            57
          ],
          [
            "class",
            "ActivityLogger",
            67
          ],
          [
            "function",
            "generate",
            38
          ],
          [
            "function",
            "validate_format",
            44
          ],
          [
            "function",
            "calculate_entropy",
            50
          ],
          [
            "function",
            "calculate_id_entropy",
            52
          ],
          [
            "function",
            "get_entropy_breakdown",
            54
          ],
          [
            "function",
            "get_tier_info",
            60
          ],
          [
            "function",
            "get_progression_map",
            62
          ],
          [
            "function",
            "validate_upgrade_eligibility",
            64
          ],
          [
            "function",
            "log_activity",
            70
          ]
        ],
        "api/routes/lambd_id_routes.py": [
          [
            "function",
            "generate_lambda_id_route",
            80
          ],
          [
            "function",
            "validate_lambda_id_route",
            120
          ],
          [
            "function",
            "calculate_entropy_route",
            157
          ],
          [
            "function",
            "get_tier_information_route",
            194
          ],
          [
            "function",
            "request_tier_upgrade_route",
            221
          ],
          [
            "function",
            "health_check_route",
            260
          ],
          [
            "function",
            "handle_rate_limit_exceeded_on_bp",
            286
          ],
          [
            "function",
            "handle_not_found_on_bp",
            296
          ],
          [
            "function",
            "handle_method_not_allowed_on_bp",
            304
          ],
          [
            "class",
            "LambdaIDController",
            33
          ],
          [
            "function",
            "generate_id",
            35
          ],
          [
            "function",
            "validate_id",
            36
          ],
          [
            "function",
            "calculate_entropy",
            37
          ],
          [
            "function",
            "get_tier_information",
            38
          ],
          [
            "function",
            "request_tier_upgrade",
            39
          ],
          [
            "function",
            "check_service_health",
            40
          ]
        ]
      }
    },
    {
      "system": "creativity",
      "entity_count": 572,
      "class_count": 274,
      "function_count": 298,
      "files": 97,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/creativity_activation.py",
      "entities_by_file": {
        "affect_stagnation_detector.py": [
          [
            "class",
            "AffectStagnationDetector",
            39
          ],
          [
            "function",
            "check_for_stagnation",
            53
          ]
        ],
        "creative_q_expression.py": [
          [
            "class",
            "CreativeQuantumLikeState",
            56
          ],
          [
            "class",
            "CreativeExpressionProtocol",
            87
          ],
          [
            "class",
            "QuantumCreativeEngine",
            95
          ],
          [
            "class",
            "QuantumHaikuGenerator",
            294
          ],
          [
            "class",
            "QuantumMusicComposer",
            468
          ],
          [
            "class",
            "BioCognitiveCreativityLayer",
            529
          ],
          [
            "class",
            "CreativeIPProtector",
            580
          ],
          [
            "class",
            "CollaborativeCreativityOrchestrator",
            642
          ],
          [
            "class",
            "AdaptiveCreativePersonalization",
            781
          ],
          [
            "class",
            "LukhasCreativeExpressionEngine",
            853
          ],
          [
            "class",
            "EnhancedNeuroHaikuGenerator",
            967
          ],
          [
            "function",
            "collapse_to_expression",
            65
          ],
          [
            "function",
            "generate_haiku",
            1016
          ]
        ],
        "service.py": [
          [
            "class",
            "CreativityService",
            42
          ],
          [
            "function",
            "generate_content",
            355
          ],
          [
            "function",
            "synthesize_dream",
            361
          ],
          [
            "function",
            "generate_emotional_content",
            366
          ],
          [
            "function",
            "generate_content",
            62
          ],
          [
            "function",
            "synthesize_dream",
            137
          ],
          [
            "function",
            "generate_emotional_content",
            188
          ],
          [
            "function",
            "collaborate_creatively",
            243
          ],
          [
            "class",
            "IdentityClient",
            33
          ],
          [
            "function",
            "verify_user_access",
            34
          ],
          [
            "function",
            "check_consent",
            36
          ],
          [
            "function",
            "log_activity",
            38
          ]
        ],
        "creative_expression_core.py": [
          [
            "class",
            "NeuroHaikuGenerator",
            38
          ],
          [
            "function",
            "generate_haiku",
            50
          ],
          [
            "function",
            "load_inspiration_profile",
            114
          ]
        ],
        "services.py": [
          [
            "class",
            "CreativityService",
            11
          ],
          [
            "function",
            "create_creativity_service",
            170
          ]
        ],
        "personality_engine.py": [
          [
            "class",
            "ShynessModule",
            14
          ],
          [
            "class",
            "EtiquetteModule",
            34
          ],
          [
            "class",
            "HelpfulnessModule",
            56
          ],
          [
            "class",
            "EthicalComplianceSystem",
            71
          ],
          [
            "class",
            "CulturalIntelligenceModule",
            87
          ],
          [
            "class",
            "HumanizedAGI",
            102
          ],
          [
            "function",
            "handle_complex_scenario",
            127
          ],
          [
            "function",
            "get_interaction_style",
            25
          ],
          [
            "function",
            "adapt_behavior",
            40
          ],
          [
            "function",
            "should_offer_help",
            61
          ],
          [
            "function",
            "resolve_dilemma",
            76
          ],
          [
            "function",
            "adjust_greeting",
            92
          ],
          [
            "function",
            "interact",
            110
          ]
        ],
        "dream_timeline_visualizer.py": [
          [
            "class",
            "DreamTimelineVisualizer",
            13
          ],
          [
            "function",
            "render_timeline",
            22
          ]
        ],
        "healix_visualizer.py": [
          [
            "class",
            "HealixVisualizer",
            35
          ],
          [
            "function",
            "animate_frame",
            414
          ]
        ],
        "quantum_creative_types.py": [
          [
            "class",
            "CreativeExpression",
            51
          ],
          [
            "class",
            "QuantumContext",
            64
          ],
          [
            "class",
            "QuantumHaiku",
            75
          ],
          [
            "class",
            "QuantumMusicalPiece",
            87
          ],
          [
            "class",
            "SemanticField",
            98
          ],
          [
            "class",
            "QuantumWordState",
            108
          ],
          [
            "class",
            "CognitiveState",
            118
          ],
          [
            "class",
            "EnhancedCreativeState",
            130
          ],
          [
            "class",
            "CreatorIdentity",
            141
          ],
          [
            "class",
            "ProtectedCreativeWork",
            153
          ],
          [
            "class",
            "CreativeParticipant",
            166
          ],
          [
            "class",
            "CreativeGoal",
            177
          ],
          [
            "class",
            "SessionConfig",
            188
          ],
          [
            "class",
            "CollaborativeCreation",
            199
          ],
          [
            "class",
            "UserCreativeProfile",
            211
          ],
          [
            "class",
            "CreativeInteraction",
            222
          ],
          [
            "class",
            "PersonalizedCreation",
            233
          ],
          [
            "class",
            "CreativeRequest",
            244
          ],
          [
            "class",
            "UserSession",
            255
          ],
          [
            "class",
            "CollaborativeSessionRequest",
            266
          ],
          [
            "class",
            "QuantumCreativeComponent",
            277
          ],
          [
            "class",
            "QuantumImaginationProcessor",
            291
          ],
          [
            "class",
            "QuantumEmotionEncoder",
            302
          ],
          [
            "class",
            "CulturalQuantumMemory",
            322
          ],
          [
            "class",
            "NeuralCreativityNetwork",
            332
          ],
          [
            "class",
            "SynapticInspirationPool",
            342
          ],
          [
            "class",
            "DopamineRewardSystem",
            352
          ],
          [
            "class",
            "ZeroKnowledgeCreativityValidator",
            362
          ],
          [
            "class",
            "QuantumVisualArtist",
            374
          ],
          [
            "class",
            "QuantumStoryWeaver",
            388
          ],
          [
            "class",
            "QuantumCodePoet",
            398
          ],
          [
            "class",
            "QuantumChoreographer",
            408
          ],
          [
            "class",
            "Quantum3DSculptor",
            423
          ],
          [
            "class",
            "SwarmCreativityOrchestrator",
            439
          ],
          [
            "class",
            "CrossCulturalSynthesizer",
            450
          ],
          [
            "class",
            "QuantumSyllableCounter",
            462
          ],
          [
            "class",
            "SemanticEntangler",
            472
          ],
          [
            "class",
            "EmotionImageryQuantumMapper",
            482
          ],
          [
            "class",
            "PhoneticHarmonyAnalyzer",
            492
          ],
          [
            "class",
            "KirejiQuantumSelector",
            502
          ],
          [
            "class",
            "SeasonalReferenceEncoder",
            512
          ],
          [
            "class",
            "HarmonicQuantumInspiredProcessor",
            524
          ],
          [
            "class",
            "RhythmPatternSuperposer",
            534
          ],
          [
            "class",
            "EmotionalMelodyWeaver",
            544
          ],
          [
            "class",
            "CulturalScaleQuantumLibrary",
            554
          ],
          [
            "class",
            "NeuralOscillator",
            566
          ],
          [
            "class",
            "DopamineCreativityModulator",
            576
          ],
          [
            "class",
            "SerotoninMoodHarmonizer",
            586
          ],
          [
            "class",
            "NorepinephrineFocusEnhancer",
            596
          ],
          [
            "class",
            "AcetylcholineLearningBridge",
            606
          ],
          [
            "class",
            "SynapticPlasticityEngine",
            616
          ],
          [
            "class",
            "REMDreamSynthesizer",
            626
          ],
          [
            "class",
            "CreativeBlockchain",
            638
          ],
          [
            "class",
            "QuantumWatermarkEmbedder",
            648
          ],
          [
            "class",
            "CreativityMeshNetwork",
            660
          ],
          [
            "class",
            "QuantumIdeaSynthesizer",
            670
          ],
          [
            "class",
            "CreativeConflictHarmonizer",
            680
          ],
          [
            "class",
            "EmergenceDetector",
            690
          ],
          [
            "class",
            "QuantumAestheticProfiler",
            702
          ],
          [
            "class",
            "CulturalResonanceTuner",
            712
          ],
          [
            "class",
            "EmotionalPreferenceLearner",
            722
          ],
          [
            "class",
            "CreativityStyleEvolver",
            734
          ],
          [
            "class",
            "CreativityMonitor",
            746
          ],
          [
            "class",
            "CreativeEvolutionEngine",
            756
          ],
          [
            "class",
            "NeuroHaikuGenerator",
            768
          ],
          [
            "function",
            "generate_haiku",
            774
          ]
        ],
        "creative_market.py": [
          [
            "class",
            "CreativeItem",
            31
          ],
          [
            "class",
            "CreativeMarket",
            44
          ],
          [
            "function",
            "update_reputation",
            70
          ],
          [
            "function",
            "export_item",
            75
          ]
        ],
        "creative_engine.py": [
          [
            "class",
            "CreativeStyle",
            64
          ],
          [
            "class",
            "ExpansionStrategy",
            74
          ],
          [
            "class",
            "CreativeConfig",
            84
          ],
          [
            "class",
            "CreativeMetrics",
            98
          ],
          [
            "class",
            "CreativeContext",
            110
          ],
          [
            "class",
            "NeuralCreativeModel",
            122
          ],
          [
            "class",
            "SymbolicKnowledgeBase",
            138
          ],
          [
            "class",
            "FederatedLearningClient",
            150
          ],
          [
            "class",
            "CircuitBreaker",
            162
          ],
          [
            "class",
            "AdvancedSyllableAnalyzer",
            197
          ],
          [
            "class",
            "EnterpriseNeuralHaikuGenerator",
            238
          ],
          [
            "class",
            "CreativeEngineFactory",
            757
          ],
          [
            "class",
            "MockNeuralModel",
            795
          ],
          [
            "class",
            "MockSymbolicKB",
            805
          ],
          [
            "class",
            "MockFederatedClient",
            812
          ],
          [
            "function",
            "count_syllables",
            206
          ]
        ],
        "emotional_resonance.py": [
          [
            "class",
            "EmotionalResonance",
            151
          ],
          [
            "function",
            "map_emotion",
            190
          ],
          [
            "function",
            "analyze_emotional_trend",
            526
          ],
          [
            "function",
            "visualize_emotional_state",
            650
          ],
          [
            "function",
            "generate_valence_arousal_plot",
            696
          ],
          [
            "function",
            "modulate_voice_parameters",
            775
          ],
          [
            "function",
            "get_emotion_from_context",
            978
          ],
          [
            "function",
            "emotional_feedback_loop",
            1077
          ]
        ],
        "advanced_haiku_generator.py": [
          [
            "class",
            "AdvancedHaikuGenerator",
            77
          ],
          [
            "class",
            "QuantumHaikuGenerator",
            620
          ],
          [
            "class",
            "NeuroHaikuGenerator",
            624
          ],
          [
            "function",
            "generate_neural_haiku",
            559
          ]
        ],
        "voice_integrator.py": [
          [
            "class",
            "EnhancedVoiceConfig",
            25
          ],
          [
            "class",
            "EnhancedVoiceIntegrator",
            33
          ]
        ],
        "quantum_creative_integration.py": [
          [
            "class",
            "QuantumCreativeBridge",
            52
          ],
          [
            "function",
            "get_quantum_status",
            175
          ],
          [
            "function",
            "get_system_status",
            140
          ],
          [
            "class",
            "MockEngine",
            41
          ]
        ],
        "engines/engine.py": [
          [
            "class",
            "ContentType",
            28
          ],
          [
            "class",
            "CreationRequest",
            40
          ],
          [
            "class",
            "LucasCreateEngine",
            49
          ],
          [
            "function",
            "get_capabilities",
            335
          ]
        ],
        "systems/creative_expressions_creativity_engine.py": [
          [
            "class",
            "CreativeExpressionsCreativityEngine",
            19
          ],
          [
            "class",
            "CreativeExpressionsEngine",
            112
          ],
          [
            "function",
            "generate_haiku",
            31
          ],
          [
            "function",
            "load_inspiration_profile",
            95
          ],
          [
            "function",
            "generate_expression",
            103
          ],
          [
            "function",
            "generate_expression",
            119
          ]
        ],
        "systems/vocabulary_creativity_engine.py": [
          [
            "class",
            "VocabularyCreativityEngine",
            15
          ],
          [
            "class",
            "VocabularyCreativityEngine",
            25
          ],
          [
            "function",
            "get_symbol_for_analysis_type",
            478
          ],
          [
            "function",
            "get_symbol_for_provider",
            494
          ],
          [
            "function",
            "get_dominant_color_symbol",
            506
          ],
          [
            "function",
            "create_analysis_phrase",
            533
          ],
          [
            "function",
            "get_emotional_color_mapping",
            551
          ],
          [
            "function",
            "analyze_symbolic_composition",
            564
          ],
          [
            "function",
            "get_quality_indicators",
            586
          ],
          [
            "function",
            "get_all_symbols",
            615
          ],
          [
            "function",
            "get_context_symbols",
            628
          ],
          [
            "function",
            "calculate_visual_harmony",
            639
          ]
        ],
        "systems/voice_personality_creativity_engine.py": [
          [
            "class",
            "VoicePersonalityCreativityEngine",
            47
          ],
          [
            "function",
            "get_voice_modulation",
            190
          ],
          [
            "function",
            "adapt_to_interaction",
            242
          ]
        ],
        "dream_systems/dream_glyph_bridge.py": [
          [
            "class",
            "DreamPhase",
            52
          ],
          [
            "class",
            "ArchetypalGlyphMapping",
            61
          ],
          [
            "class",
            "DreamSeed",
            73
          ],
          [
            "class",
            "DreamGlyph",
            101
          ],
          [
            "class",
            "DreamGlyphBridge",
            124
          ],
          [
            "function",
            "create_glyph_dream_seed",
            744
          ],
          [
            "function",
            "to_dict",
            85
          ],
          [
            "function",
            "to_dict",
            111
          ],
          [
            "function",
            "glyph_to_dream_seed",
            143
          ],
          [
            "function",
            "dream_to_glyph",
            191
          ],
          [
            "function",
            "create_memory_consolidation_glyph",
            241
          ],
          [
            "function",
            "get_archetypal_dream_seeds",
            287
          ],
          [
            "function",
            "get_dream_glyph_lineage",
            305
          ],
          [
            "function",
            "get_statistics",
            718
          ]
        ],
        "dream_systems/dream_log.py": [
          [
            "class",
            "DreamLog",
            8
          ],
          [
            "function",
            "log_dream",
            16
          ],
          [
            "function",
            "get_recent_dreams",
            28
          ]
        ],
        "dream_systems/dream_loop_generator.py": [
          [
            "class",
            "DreamLoopGenerator",
            10
          ],
          [
            "function",
            "generate_loop",
            18
          ]
        ],
        "dream_systems/dream_seed_simple.py": [
          [
            "class",
            "DreamSeed",
            3
          ],
          [
            "function",
            "generate_symbol",
            12
          ]
        ],
        "dream_systems/dream_convergence_tester.py": [
          [
            "class",
            "DreamConvergenceTester",
            23
          ],
          [
            "function",
            "run_convergence_test",
            35
          ],
          [
            "function",
            "resume_symbolic_drift_probe",
            134
          ]
        ],
        "dream_systems/dream_stats.py": [
          [
            "class",
            "DreamStatistics",
            9
          ],
          [
            "function",
            "update_stats",
            20
          ],
          [
            "function",
            "get_summary",
            24
          ],
          [
            "function",
            "get_trends",
            33
          ]
        ],
        "dream_systems/dream_snapshot.py": [
          [
            "class",
            "DreamSnapshotStore",
            4
          ],
          [
            "function",
            "save_snapshot",
            9
          ],
          [
            "function",
            "get_recent_snapshots",
            16
          ]
        ],
        "dream_systems/dream_replay.py": [
          [
            "function",
            "replay_recent_dreams",
            46
          ]
        ],
        "dream_systems/dream_engine.py": [
          [
            "class",
            "EnhancedDreamEngine",
            82
          ],
          [
            "class",
            "QuantumDreamAdapter",
            48
          ],
          [
            "class",
            "DreamQuantumConfig",
            55
          ],
          [
            "class",
            "BioOrchestrator",
            66
          ],
          [
            "class",
            "QuantumBioOscillator",
            70
          ],
          [
            "class",
            "UnifiedIntegration",
            74
          ],
          [
            "function",
            "adapt",
            52
          ]
        ],
        "dream_systems/voice_parameter.py": [
          [
            "class",
            "VoiceParameter",
            1
          ]
        ],
        "dream_systems/dream_feedback_controller.py": [
          [
            "class",
            "DreamFeedbackController",
            20
          ],
          [
            "function",
            "check_drift_event",
            26
          ],
          [
            "function",
            "trigger_redirection",
            32
          ]
        ],
        "dream_systems/dream_utils.py": [
          [
            "function",
            "analyze_dream_symbols",
            8
          ],
          [
            "function",
            "merge_dream_sequences",
            17
          ],
          [
            "function",
            "calculate_rem_phase",
            25
          ],
          [
            "function",
            "dream_to_text",
            29
          ]
        ],
        "dream_systems/ethics_guard.py": [
          [
            "class",
            "LegalComplianceAssistant",
            1
          ]
        ],
        "dream_systems/dream_emotion_bridge.py": [
          [
            "class",
            "DreamEmotionBridge",
            16
          ],
          [
            "function",
            "trigger_dream_replay_if_needed",
            30
          ]
        ],
        "dream_systems/dream_reflection_loop_simple.py": [
          [
            "class",
            "DreamReflectionLoop",
            3
          ],
          [
            "function",
            "reflect",
            8
          ],
          [
            "function",
            "is_stable",
            14
          ]
        ],
        "dream_systems/dream_seed.py": [
          [
            "function",
            "generate_episodic_dream",
            16
          ],
          [
            "function",
            "generate_semantic_dream",
            31
          ],
          [
            "function",
            "seed_dream",
            50
          ]
        ],
        "dream_systems/dream_delivery_manager.py": [
          [
            "class",
            "DreamDeliveryManager",
            75
          ],
          [
            "function",
            "modulate_voice_output",
            829
          ],
          [
            "function",
            "deliver_dream",
            139
          ],
          [
            "class",
            "VoiceSynthesisAdapter",
            29
          ],
          [
            "class",
            "VoiceSafetyFilter",
            41
          ],
          [
            "function",
            "synthesize",
            33
          ],
          [
            "function",
            "filter_content",
            45
          ]
        ],
        "dream_systems/snapshot_redirection_controller.py": [
          [
            "class",
            "SnapshotRedirectionController",
            26
          ],
          [
            "function",
            "check_and_redirect",
            56
          ],
          [
            "function",
            "calculate_redirect_severity",
            213
          ],
          [
            "function",
            "preemptive_stabilize",
            269
          ]
        ],
        "dream_systems/dream_injector.py": [
          [
            "function",
            "process_payload",
            35
          ],
          [
            "function",
            "run_batch_validation",
            51
          ],
          [
            "function",
            "record_dream_message",
            26
          ]
        ],
        "dream_systems/quantum_dream_adapter.py": [
          [
            "class",
            "DreamQuantumConfig",
            14
          ],
          [
            "class",
            "QuantumDreamAdapter",
            34
          ],
          [
            "function",
            "create_dream_superposition",
            66
          ],
          [
            "function",
            "entangle_dreams",
            147
          ],
          [
            "function",
            "measure_quantum_like_state",
            275
          ],
          [
            "function",
            "evolve_quantum_like_state",
            333
          ],
          [
            "function",
            "get_quantum_metrics",
            379
          ],
          [
            "function",
            "reset_quantum_like_state",
            440
          ]
        ],
        "dream_systems/dream_limiter.py": [
          [
            "class",
            "DreamLimiterConfig",
            19
          ],
          [
            "class",
            "DreamLimiter",
            26
          ],
          [
            "function",
            "filter_dreams",
            41
          ]
        ],
        "dream_systems/dream_viewer.py": [
          [
            "function",
            "load_dreams",
            13
          ],
          [
            "function",
            "display_dreams",
            22
          ]
        ],
        "dream/colony_dream_coordinator.py": [
          [
            "class",
            "DreamTaskType",
            113
          ],
          [
            "class",
            "DreamDistributionStrategy",
            124
          ],
          [
            "class",
            "ColonyDreamTask",
            132
          ],
          [
            "class",
            "ColonyDreamResult",
            148
          ],
          [
            "class",
            "ColonyDreamCoordinator",
            161
          ],
          [
            "function",
            "get_coordinator_status",
            1047
          ],
          [
            "class",
            "ColonyOrchestrator",
            70
          ],
          [
            "class",
            "ColonyType",
            74
          ],
          [
            "class",
            "ColonyPriority",
            81
          ]
        ],
        "dream/dream_log.py": [
          [
            "function",
            "log_dream",
            34
          ]
        ],
        "dream/redirect_justifier.py": [
          [
            "class",
            "RedirectJustifier",
            12
          ],
          [
            "function",
            "justify",
            17
          ]
        ],
        "dream/dream_pipeline.py": [
          [
            "class",
            "UnifiedDreamPipeline",
            61
          ],
          [
            "class",
            "MockConsent",
            262
          ],
          [
            "class",
            "MockMemorySampler",
            266
          ],
          [
            "function",
            "dummy_evaluate",
            247
          ],
          [
            "function",
            "allows",
            263
          ],
          [
            "function",
            "pick_emotional_memory",
            267
          ]
        ],
        "dream/hyperspace_dream_simulator.py": [
          [
            "class",
            "SimulationType",
            108
          ],
          [
            "class",
            "TimelineState",
            121
          ],
          [
            "class",
            "CausalConstraint",
            132
          ],
          [
            "class",
            "HyperspaceVector",
            144
          ],
          [
            "class",
            "TimelineBranch",
            189
          ],
          [
            "class",
            "SimulationScenario",
            286
          ],
          [
            "class",
            "HyperspaceDreamSimulator",
            417
          ],
          [
            "function",
            "distance_to",
            158
          ],
          [
            "function",
            "interpolate",
            169
          ],
          [
            "function",
            "add_decision",
            217
          ],
          [
            "function",
            "add_outcome",
            234
          ],
          [
            "function",
            "check_constraints",
            251
          ],
          [
            "function",
            "add_timeline",
            315
          ],
          [
            "function",
            "branch_timeline",
            340
          ],
          [
            "function",
            "find_optimal_timeline",
            384
          ],
          [
            "function",
            "get_scenario_status",
            1197
          ],
          [
            "function",
            "get_system_status",
            1231
          ],
          [
            "function",
            "get_token_usage_report",
            1430
          ],
          [
            "class",
            "DataType",
            72
          ],
          [
            "class",
            "ModalityData",
            76
          ],
          [
            "function",
            "get_dmb",
            80
          ],
          [
            "function",
            "get_srd",
            88
          ],
          [
            "function",
            "instrument_reasoning",
            91
          ]
        ],
        "dream/dream_stats.py": [
          [
            "function",
            "load_dreams",
            31
          ],
          [
            "function",
            "summarize_dreams",
            37
          ]
        ],
        "dream/core.py": [
          [
            "class",
            "DreamPhase",
            41
          ],
          [
            "class",
            "DreamType",
            50
          ],
          [
            "class",
            "DreamState",
            60
          ],
          [
            "class",
            "DreamContent",
            73
          ],
          [
            "class",
            "DreamCycle",
            91
          ],
          [
            "class",
            "DreamModule",
            103
          ],
          [
            "function",
            "set_memory_module",
            1114
          ],
          [
            "function",
            "set_governance_module",
            1118
          ],
          [
            "function",
            "set_emotion_module",
            1122
          ]
        ],
        "dream/tag_debug.py": [
          [
            "function",
            "trace_tag_flow",
            8
          ]
        ],
        "dream/dream_mutator.py": [
          [
            "function",
            "load_latest_dream",
            31
          ],
          [
            "function",
            "mutate_emotional_wave",
            39
          ],
          [
            "function",
            "mutate_dream",
            42
          ],
          [
            "function",
            "save_mutated_dream",
            51
          ]
        ],
        "dream/feedback_propagator.py": [
          [
            "class",
            "DreamFeedbackPropagator",
            86
          ],
          [
            "function",
            "propagate",
            111
          ],
          [
            "class",
            "DreamSnapshotStore",
            60
          ],
          [
            "function",
            "store_snapshot",
            64
          ]
        ],
        "dream/redirect_trace_replayer.py": [
          [
            "class",
            "RedirectTraceReplayer",
            4
          ],
          [
            "function",
            "replay_episode",
            23
          ]
        ],
        "dream/openai_dream_integration.py": [
          [
            "class",
            "OpenAIDreamIntegration",
            50
          ]
        ],
        "dream/immersive_ingestion.py": [
          [
            "function",
            "run_dream_breath",
            50
          ]
        ],
        "dream/dream_sandbox.py": [
          [
            "class",
            "MediaInput",
            19
          ],
          [
            "class",
            "AIGeneratedDream",
            26
          ],
          [
            "class",
            "SimpleInterpretation",
            32
          ],
          [
            "class",
            "DreamInterpreter",
            49
          ],
          [
            "function",
            "mock_generate_ai_dream",
            71
          ],
          [
            "class",
            "SimpleRLCycle",
            77
          ],
          [
            "class",
            "DreamSandbox",
            112
          ],
          [
            "function",
            "to_dict",
            39
          ],
          [
            "function",
            "set_dream_text",
            55
          ],
          [
            "function",
            "interpret_dream_with_ai",
            58
          ],
          [
            "function",
            "mutate",
            91
          ],
          [
            "function",
            "step",
            98
          ],
          [
            "function",
            "run_recursive",
            143
          ]
        ],
        "dream/dream_seed.py": [
          [
            "function",
            "generate_episodic_dream",
            19
          ],
          [
            "function",
            "generate_semantic_dream",
            53
          ],
          [
            "function",
            "seed_dream",
            67
          ]
        ],
        "dream/dream_generator.py": [
          [
            "function",
            "generate_dream",
            46
          ],
          [
            "function",
            "generate_dream_sync",
            214
          ]
        ],
        "dream/dream_data_sources.py": [
          [
            "class",
            "DreamDataCollector",
            72
          ]
        ],
        "dream/quantum_dream_adapter.py": [
          [
            "class",
            "DreamQuantumConfig",
            31
          ],
          [
            "class",
            "QuantumDreamAdapter",
            38
          ]
        ],
        "dream/visualization/memoryscape_viewport.py": [
          [
            "class",
            "DreamMemoryscapeViewport",
            18
          ],
          [
            "function",
            "render_scene",
            30
          ]
        ],
        "dream/visualization/dream_timeline_visualizer.py": [
          [
            "class",
            "DreamTimelineVisualizer",
            13
          ],
          [
            "function",
            "render_timeline",
            22
          ]
        ],
        "dream/visualization/visualizer_core.py": [
          [
            "function",
            "load_latest_flashback",
            30
          ],
          [
            "function",
            "build_visual_prompt",
            38
          ]
        ],
        "dream/visualization/dream_viewer.py": [
          [
            "function",
            "load_dreams",
            31
          ],
          [
            "function",
            "display_dreams",
            40
          ]
        ],
        "dream/modifiers/quantum_state_modifier.py": [
          [
            "class",
            "QuantumLikeStateModifier",
            12
          ]
        ],
        "dream/tools/symbolic_anomaly_explorer.py": [
          [
            "class",
            "AnomalyType",
            70
          ],
          [
            "class",
            "AnomalySeverity",
            82
          ],
          [
            "class",
            "SymbolicTag",
            92
          ],
          [
            "class",
            "DreamSession",
            107
          ],
          [
            "class",
            "SymbolicAnomaly",
            135
          ],
          [
            "class",
            "AnomalyReport",
            157
          ],
          [
            "class",
            "SymbolicAnomalyExplorer",
            169
          ],
          [
            "function",
            "analyze_recent_dreams",
            1106
          ],
          [
            "function",
            "cli_analysis",
            1114
          ],
          [
            "function",
            "extract_lambda_tags",
            118
          ],
          [
            "function",
            "calculate_symbolic_density",
            123
          ],
          [
            "function",
            "to_dict",
            147
          ],
          [
            "function",
            "load_recent_dreams",
            226
          ],
          [
            "function",
            "detect_symbolic_anomalies",
            357
          ],
          [
            "function",
            "generate_anomaly_report",
            764
          ],
          [
            "function",
            "summarize_symbolic_trends",
            847
          ],
          [
            "function",
            "export_report_json",
            977
          ],
          [
            "function",
            "export_summary_markdown",
            1000
          ],
          [
            "function",
            "display_ascii_heatmap",
            1054
          ]
        ],
        "dream/tools/symbolic_theme_clusterer.py": [
          [
            "class",
            "MotifInstance",
            79
          ],
          [
            "class",
            "SymbolicTheme",
            93
          ],
          [
            "class",
            "ThemeTransition",
            108
          ],
          [
            "class",
            "ThematicEvolution",
            120
          ],
          [
            "class",
            "SymbolicThemeClusterer",
            130
          ],
          [
            "function",
            "main",
            963
          ],
          [
            "function",
            "extract_motifs_from_dreams",
            151
          ],
          [
            "function",
            "cluster_motifs_by_similarity",
            413
          ],
          [
            "function",
            "summarize_theme_clusters",
            659
          ],
          [
            "function",
            "track_theme_transitions",
            726
          ],
          [
            "function",
            "render_theme_overview",
            857
          ],
          [
            "function",
            "avg_emotions",
            542
          ]
        ],
        "dream/tools/run_dream_analysis.py": [
          [
            "function",
            "main",
            26
          ]
        ],
        "dream/tools/dream_divergence_map.py": [
          [
            "class",
            "DreamSession",
            86
          ],
          [
            "class",
            "DriftScore",
            127
          ],
          [
            "class",
            "DriftMatrix",
            143
          ],
          [
            "class",
            "DreamDivergenceMapper",
            177
          ],
          [
            "function",
            "main",
            661
          ],
          [
            "function",
            "calculate_entropy",
            98
          ],
          [
            "function",
            "calculate_emotional_magnitude",
            111
          ],
          [
            "function",
            "extract_phase_markers",
            118
          ],
          [
            "function",
            "to_dict",
            138
          ],
          [
            "function",
            "get_max_drift_pair",
            152
          ],
          [
            "function",
            "get_high_drift_pairs",
            161
          ],
          [
            "function",
            "load_dream_sessions",
            190
          ],
          [
            "function",
            "compute_drift_matrix",
            303
          ],
          [
            "function",
            "extract_recurring_symbols",
            422
          ],
          [
            "function",
            "render_divergence_map",
            444
          ],
          [
            "function",
            "generate_summary_json",
            610
          ]
        ],
        "dream/oneiric_engine/demo/web_app.py": [
          [
            "class",
            "WebDreamInterpreter",
            18
          ],
          [
            "function",
            "ai_complete_function",
            50
          ],
          [
            "function",
            "index",
            66
          ],
          [
            "function",
            "interpret_dream",
            74
          ],
          [
            "function",
            "get_translations",
            109
          ],
          [
            "function",
            "to_json",
            24
          ],
          [
            "function",
            "get_translations_for_locale",
            40
          ]
        ],
        "dream/oneiric_engine/demo/dream_interpreter.py": [
          [
            "class",
            "DreamSymbol",
            33
          ],
          [
            "class",
            "DreamInterpretation",
            39
          ],
          [
            "class",
            "DreamEntry",
            58
          ],
          [
            "class",
            "LLMConfig",
            69
          ],
          [
            "class",
            "MediaInput",
            80
          ],
          [
            "class",
            "VoiceInput",
            89
          ],
          [
            "class",
            "DreamEnrichment",
            99
          ],
          [
            "class",
            "AIGeneratedDream",
            109
          ],
          [
            "class",
            "DreamInterpreter",
            118
          ],
          [
            "class",
            "MultimediaProcessor",
            453
          ],
          [
            "class",
            "AIModelIntegration",
            588
          ],
          [
            "class",
            "QuickAccessRecorder",
            727
          ],
          [
            "class",
            "DreamEnhancer",
            810
          ],
          [
            "class",
            "MultimediaInputProcessor",
            906
          ],
          [
            "function",
            "mock_ai_complete",
            1095
          ],
          [
            "function",
            "main",
            1109
          ],
          [
            "function",
            "test_dream_features",
            1209
          ],
          [
            "function",
            "mock_generate_ai_dream",
            1237
          ],
          [
            "function",
            "to_dict",
            46
          ],
          [
            "function",
            "t",
            231
          ],
          [
            "function",
            "set_dream_text",
            236
          ],
          [
            "function",
            "get_dream_prompt",
            240
          ],
          [
            "function",
            "parse_interpretation_response",
            245
          ],
          [
            "function",
            "interpret_dream_with_ai",
            265
          ],
          [
            "function",
            "enrich_dream_text",
            332
          ],
          [
            "function",
            "save_dream_entry",
            336
          ],
          [
            "function",
            "get_dream_history",
            353
          ],
          [
            "function",
            "display_interpretation",
            387
          ],
          [
            "function",
            "interactive_session",
            423
          ],
          [
            "function",
            "process_voice_input",
            457
          ],
          [
            "function",
            "analyze_image",
            497
          ],
          [
            "function",
            "extract_url_content",
            522
          ],
          [
            "function",
            "add_emojis_to_text",
            552
          ],
          [
            "function",
            "setup_client",
            595
          ],
          [
            "function",
            "start_quick_recording",
            737
          ],
          [
            "function",
            "stop_recording",
            751
          ],
          [
            "function",
            "quick_dream_capture",
            779
          ],
          [
            "function",
            "smart_emoji_enhancement",
            814
          ],
          [
            "function",
            "add_symbolic_elements",
            885
          ],
          [
            "function",
            "process_multiple_inputs",
            916
          ]
        ],
        "dream/oneiric_engine/oneiric_core/settings.py": [
          [
            "class",
            "Settings",
            18
          ],
          [
            "function",
            "get_settings",
            90
          ],
          [
            "function",
            "validate_database_url",
            67
          ],
          [
            "function",
            "validate_secret_strength",
            76
          ],
          [
            "class",
            "Config",
            82
          ]
        ],
        "dream/oneiric_engine/oneiric_core/migrations/env.py": [
          [
            "function",
            "run_migrations_offline",
            52
          ],
          [
            "function",
            "run_migrations_online",
            74
          ]
        ],
        "dream/oneiric_engine/oneiric_core/migrations/versions/20250726_add_unified_tier_support.py": [
          [
            "function",
            "upgrade",
            24
          ],
          [
            "function",
            "downgrade",
            139
          ]
        ],
        "dream/oneiric_engine/oneiric_core/migrations/versions/20250710_add_users_table.py": [
          [
            "function",
            "upgrade",
            53
          ],
          [
            "function",
            "downgrade",
            99
          ]
        ],
        "dream/oneiric_engine/oneiric_core/identity/auth_middleware_unified.py": [
          [
            "class",
            "AuthUser",
            41
          ],
          [
            "function",
            "oneiric_tier_required",
            152
          ],
          [
            "function",
            "require_lambda_tier",
            215
          ],
          [
            "function",
            "decorator",
            165
          ]
        ],
        "dream/oneiric_engine/oneiric_core/identity/auth_middleware.py": [
          [
            "class",
            "AuthUser",
            26
          ],
          [
            "function",
            "lukhas_tier_required",
            92
          ],
          [
            "function",
            "decorator",
            94
          ]
        ],
        "dream/oneiric_engine/oneiric_core/utils/symbolic_logger.py": [
          [
            "class",
            "DreamLogger",
            4
          ],
          [
            "function",
            "log_dream",
            8
          ],
          [
            "function",
            "get_logs",
            11
          ]
        ],
        "dream/oneiric_engine/oneiric_core/db/db.py": [
          [
            "function",
            "init_db",
            32
          ]
        ],
        "dream/oneiric_engine/oneiric_core/db/user_repository.py": [
          [
            "class",
            "UserRecord",
            17
          ]
        ],
        "dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py": [
          [
            "class",
            "DreamRequest",
            97
          ],
          [
            "class",
            "DreamResponse",
            110
          ],
          [
            "class",
            "EnhancedDreamEngine",
            144
          ],
          [
            "function",
            "get_dream_engine",
            724
          ],
          [
            "class",
            "SnapshotRequest",
            905
          ],
          [
            "class",
            "SnapshotResponse",
            918
          ],
          [
            "function",
            "reflection_loop",
            224
          ],
          [
            "class",
            "QuantumDreamAdapter",
            59
          ],
          [
            "class",
            "DreamQuantumConfig",
            63
          ],
          [
            "class",
            "BioOrchestrator",
            67
          ],
          [
            "class",
            "QuantumBioOscillator",
            71
          ],
          [
            "class",
            "UnifiedIntegration",
            75
          ],
          [
            "class",
            "DreamEngineSystem",
            79
          ],
          [
            "class",
            "DreamMemoryManager",
            83
          ],
          [
            "class",
            "DreamReflectionLoop",
            87
          ]
        ],
        "dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py": [
          [
            "class",
            "DreamRequest",
            42
          ],
          [
            "class",
            "DreamResponse",
            50
          ],
          [
            "class",
            "SnapshotRequest",
            418
          ],
          [
            "class",
            "SnapshotResponse",
            426
          ],
          [
            "function",
            "get_dream_engine",
            501
          ]
        ],
        "dream/oneiric_engine/tests/conftest.py": [
          [
            "function",
            "db_url",
            19
          ],
          [
            "function",
            "apply_migrations",
            26
          ],
          [
            "function",
            "reset_pool",
            31
          ],
          [
            "function",
            "override_dependency",
            46
          ]
        ],
        "dream/cli/dream_processor.py": [
          [
            "class",
            "DreamProcessor",
            15
          ]
        ],
        "dream/dashboard/dream_metrics_db.py": [
          [
            "class",
            "DreamMetricsDB",
            7
          ],
          [
            "function",
            "add_dream_metrics",
            38
          ]
        ],
        "dream/dashboard/dream_metrics_view.py": [
          [
            "class",
            "DreamMetrics",
            10
          ],
          [
            "class",
            "DreamMetricsView",
            19
          ],
          [
            "function",
            "main",
            47
          ],
          [
            "function",
            "update_dream_metrics",
            26
          ],
          [
            "function",
            "update_memory_metrics",
            32
          ],
          [
            "function",
            "to_dict",
            37
          ],
          [
            "function",
            "to_json",
            40
          ]
        ],
        "dream/processors/dream_processor.py": [
          [
            "class",
            "DreamProcessor",
            15
          ]
        ],
        "dream/processors/dream_processor_integrator.py": [
          [
            "class",
            "DreamProcessorIntegration",
            19
          ]
        ],
        "dream/stability/redirect_forecaster.py": [
          [
            "class",
            "RedirectForecaster",
            11
          ],
          [
            "function",
            "forecast",
            28
          ]
        ],
        "dream/symbolic/vocabulary.py": [
          [
            "class",
            "DreamOperation",
            97
          ],
          [
            "function",
            "get_dream_symbol",
            239
          ],
          [
            "function",
            "get_dream_narrative",
            256
          ],
          [
            "function",
            "get_visual_hint",
            262
          ],
          [
            "function",
            "cycle_start",
            101
          ],
          [
            "function",
            "phase_transition",
            107
          ],
          [
            "function",
            "pattern_discovered",
            114
          ],
          [
            "function",
            "insight_generated",
            121
          ],
          [
            "function",
            "emotional_context",
            126
          ],
          [
            "function",
            "memory_processing",
            137
          ],
          [
            "function",
            "cycle_completion",
            148
          ]
        ],
        "dream/dream_engine/oracle_dream.py": [
          [
            "class",
            "OracleDreamGenerator",
            41
          ],
          [
            "function",
            "generate_dream",
            180
          ],
          [
            "function",
            "replay_dream",
            199
          ],
          [
            "function",
            "generate_flashback",
            212
          ],
          [
            "function",
            "log_dream",
            246
          ],
          [
            "function",
            "load_dream_log",
            254
          ],
          [
            "class",
            "EnhancedOracleDreamGenerator",
            314
          ],
          [
            "function",
            "generate_oracle_dream",
            67
          ]
        ],
        "dream/engine/dream_engine.py": [
          [
            "class",
            "DreamEngine",
            37
          ],
          [
            "function",
            "run_adversarial_simulation",
            61
          ],
          [
            "class",
            "HelixMapper",
            24
          ],
          [
            "class",
            "CognitiveVoiceEngine",
            31
          ]
        ],
        "dream/engine/advanced_dream_engine.py": [
          [
            "class",
            "AdvancedDreamEngine",
            35
          ],
          [
            "function",
            "get_engine_status",
            529
          ],
          [
            "class",
            "MockBioOrchestrator",
            558
          ],
          [
            "class",
            "MockUnifiedIntegration",
            562
          ],
          [
            "function",
            "register_component",
            563
          ]
        ],
        "dream/engine/dream_engine_optimizer.py": [
          [
            "class",
            "DreamEngineOptimizer",
            19
          ],
          [
            "function",
            "main",
            556
          ],
          [
            "function",
            "optimize_dream_processing_speed",
            70
          ],
          [
            "function",
            "enhance_dream_quantum_coupling",
            120
          ],
          [
            "function",
            "optimize_dream_memory_integration",
            191
          ],
          [
            "function",
            "enhance_symbolic_dream_processing",
            297
          ],
          [
            "function",
            "create_dream_performance_dashboard",
            388
          ],
          [
            "function",
            "run_comprehensive_dream_enhancement",
            516
          ]
        ],
        "dream/engine/dream_engine_merged.py": [
          [
            "class",
            "DreamPhase",
            22
          ],
          [
            "class",
            "DreamState",
            29
          ],
          [
            "class",
            "DreamEngine",
            36
          ]
        ],
        "dream/rl/rl_dream_cycle.py": [
          [
            "class",
            "RLDreamCycle",
            18
          ],
          [
            "function",
            "run_cycle",
            38
          ]
        ],
        "dream/base/dream_refold/dream_refold.py": [
          [
            "class",
            "DreamWeaver",
            30
          ],
          [
            "function",
            "react",
            40
          ],
          [
            "class",
            "DummyMemory",
            63
          ]
        ],
        "emotion/voice_profiling_emotion_engine.py": [
          [
            "class",
            "VoiceProfilingEmotionEngine",
            31
          ],
          [
            "class",
            "VoiceProfilingEmotionEngine",
            250
          ],
          [
            "function",
            "get_parameters_for_emotion",
            101
          ],
          [
            "function",
            "get_provider_parameters",
            115
          ],
          [
            "function",
            "add_feedback",
            133
          ],
          [
            "function",
            "record_usage",
            142
          ],
          [
            "function",
            "evolve",
            147
          ],
          [
            "function",
            "to_dict",
            207
          ],
          [
            "function",
            "from_dict",
            223
          ],
          [
            "function",
            "create_profile",
            301
          ],
          [
            "function",
            "get_profile",
            312
          ],
          [
            "function",
            "list_profiles",
            316
          ],
          [
            "function",
            "select_profile_for_context",
            328
          ],
          [
            "function",
            "record_usage",
            381
          ],
          [
            "function",
            "provide_feedback",
            399
          ],
          [
            "function",
            "delete_profile",
            435
          ]
        ]
      }
    },
    {
      "system": "embodiment",
      "entity_count": 3,
      "class_count": 1,
      "function_count": 2,
      "files": 1,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/embodiment_activation.py",
      "entities_by_file": {
        "body_state.py": [
          [
            "class",
            "ProprioceptiveState",
            6
          ],
          [
            "function",
            "update_joint",
            12
          ],
          [
            "function",
            "to_dict",
            15
          ]
        ]
      }
    },
    {
      "system": "emotion",
      "entity_count": 86,
      "class_count": 36,
      "function_count": 50,
      "files": 15,
      "activation_file": "/Users/agi_dev/Downloads/Consolidation-Repo/tools/activation_modules/emotion_activation.py",
      "entities_by_file": {
        "affect_stagnation_detector.py": [
          [
            "class",
            "AffectStagnationDetector",
            58
          ],
          [
            "function",
            "check_for_stagnation",
            74
          ],
          [
            "class",
            "EmotionalMemory",
            50
          ],
          [
            "function",
            "affect_vector_velocity",
            54
          ]
        ],
        "colony_emotions.py": [
          [
            "class",
            "EmotionalColony",
            9
          ]
        ],
        "dreamseed_upgrade.py": [
          [
            "class",
            "EmotionalTier",
            61
          ],
          [
            "class",
            "SymbolicEmotionTag",
            75
          ],
          [
            "class",
            "EmotionalSafetyLevel",
            87
          ],
          [
            "class",
            "EmotionalAccessContext",
            98
          ],
          [
            "class",
            "SymbolicEmotionState",
            111
          ],
          [
            "class",
            "DriftRegulationResult",
            126
          ],
          [
            "class",
            "CodreamerIsolationResult",
            140
          ],
          [
            "class",
            "DreamSeedEmotionEngine",
            211
          ],
          [
            "function",
            "create_dreamseed_emotion_engine",
            884
          ],
          [
            "function",
            "assign_emotional_tier",
            247
          ],
          [
            "function",
            "inject_symbolic_tags",
            333
          ],
          [
            "function",
            "regulate_drift_feedback",
            436
          ],
          [
            "function",
            "isolate_codreamer_affect",
            536
          ],
          [
            "function",
            "enforce_emotional_safety",
            624
          ],
          [
            "function",
            "process_dreamseed_emotion",
            721
          ],
          [
            "function",
            "get_session_metrics",
            810
          ],
          [
            "function",
            "get_system_health_report",
            837
          ]
        ],
        "multimodal_sentiment.py": [
          [
            "function",
            "analyze_multimodal_sentiment",
            32
          ]
        ],
        "models.py": [
          [
            "class",
            "EmotionVector",
            7
          ],
          [
            "class",
            "EmotionalState",
            25
          ],
          [
            "function",
            "as_array",
            15
          ],
          [
            "function",
            "get_dominant",
            18
          ]
        ],
        "dreamseed_unified.py": [
          [
            "class",
            "EmotionalTier",
            69
          ],
          [
            "class",
            "SymbolicEmotionTag",
            79
          ],
          [
            "class",
            "EmotionalSafetyLevel",
            91
          ],
          [
            "class",
            "UnifiedEmotionalAccessContext",
            102
          ],
          [
            "class",
            "UnifiedSymbolicEmotionState",
            117
          ],
          [
            "class",
            "UnifiedDreamSeedEmotionEngine",
            192
          ],
          [
            "function",
            "create_unified_dreamseed_emotion_engine",
            683
          ],
          [
            "function",
            "assign_unified_emotional_tier",
            230
          ],
          [
            "function",
            "process_unified_dreamseed_emotion",
            318
          ],
          [
            "function",
            "analyze_emotional_patterns_unified",
            438
          ],
          [
            "function",
            "modulate_emotional_state_unified",
            488
          ],
          [
            "function",
            "inject_symbolic_tags",
            622
          ],
          [
            "function",
            "isolate_codreamer_affect",
            627
          ],
          [
            "function",
            "enforce_emotional_safety",
            631
          ],
          [
            "function",
            "regulate_drift_feedback",
            635
          ]
        ],
        "symbolic_user_intent.py": [
          [
            "class",
            "UserIntent",
            19
          ],
          [
            "class",
            "IntentEncoder",
            31
          ],
          [
            "function",
            "encode",
            37
          ]
        ],
        "cycler.py": [
          [
            "class",
            "EmotionCycler",
            17
          ],
          [
            "function",
            "next_emotion",
            25
          ]
        ],
        "recurring_emotion_tracker.py": [
          [
            "class",
            "RecurringEmotionTracker",
            24
          ],
          [
            "function",
            "check_for_recurrence",
            46
          ],
          [
            "function",
            "update_bio_oscillator",
            131
          ]
        ],
        "mood_regulator.py": [
          [
            "class",
            "MoodRegulator",
            20
          ],
          [
            "function",
            "adjust_baseline_from_drift",
            34
          ]
        ],
        "tools/emotional_echo_detector.py": [
          [
            "class",
            "ArchetypePattern",
            81
          ],
          [
            "class",
            "EchoSeverity",
            94
          ],
          [
            "class",
            "EmotionalSequence",
            105
          ],
          [
            "class",
            "RecurringMotif",
            119
          ],
          [
            "class",
            "LoopReport",
            134
          ],
          [
            "class",
            "ArchetypeDetector",
            151
          ],
          [
            "class",
            "EmotionalEchoDetector",
            368
          ],
          [
            "function",
            "main",
            1300
          ],
          [
            "function",
            "detect_archetype",
            240
          ],
          [
            "function",
            "extract_emotional_sequence",
            424
          ],
          [
            "function",
            "detect_recurring_motifs",
            666
          ],
          [
            "function",
            "compute_loop_score",
            734
          ],
          [
            "function",
            "generate_loop_report",
            813
          ],
          [
            "function",
            "emit_symbolic_echo_alert",
            1125
          ],
          [
            "function",
            "integrate_with_tuner",
            1233
          ],
          [
            "function",
            "integrate_with_governor",
            1238
          ],
          [
            "function",
            "get_semantic_group",
            351
          ]
        ],
        "mood_regulation/mood_entropy_tracker.py": [
          [
            "class",
            "MoodEntropyTracker",
            5
          ],
          [
            "function",
            "add_mood_vector",
            10
          ],
          [
            "function",
            "calculate_entropy",
            14
          ],
          [
            "function",
            "get_mood_harmonics",
            33
          ],
          [
            "function",
            "log_mood",
            57
          ],
          [
            "function",
            "get_entropy",
            62
          ]
        ],
        "mood_regulation/mood_regulator.py": [
          [
            "class",
            "MoodRegulator",
            75
          ],
          [
            "function",
            "adjust_baseline_from_drift",
            91
          ],
          [
            "class",
            "DriftAlignmentController",
            55
          ],
          [
            "function",
            "align_drift",
            58
          ],
          [
            "function",
            "suggest_modulation",
            60
          ]
        ],
        "affect_detection/affect_stagnation_detector.py": [
          [
            "class",
            "AffectStagnationDetector",
            21
          ],
          [
            "function",
            "check_for_stagnation",
            36
          ]
        ],
        "affect_detection/recurring_emotion_tracker.py": [
          [
            "class",
            "RecurringEmotionTracker",
            22
          ],
          [
            "function",
            "check_for_recurrence",
            38
          ],
          [
            "function",
            "update_bio_oscillator",
            105
          ],
          [
            "function",
            "inject_dream_snapshot",
            122
          ]
        ]
      }
    }
  ]
}