{
  "single_imports": {
    "psutil": {
      "count": 17,
      "examples": [
        {
          "file": "memory_optimization_analysis.py",
          "line": 10
        },
        {
          "file": "core/resource_efficiency_analyzer.py",
          "line": 25
        },
        {
          "file": "core/automatic_testing_system.py",
          "line": 17
        }
      ]
    },
    "yaml": {
      "count": 7,
      "examples": [
        {
          "file": "tools/digest_extractor.py",
          "line": 31
        },
        {
          "file": "tests/diagnostics/test_entropy_radar.py",
          "line": 6
        },
        {
          "file": "ethics/ethical_drift_detector.py",
          "line": 17
        }
      ]
    },
    "ast": {
      "count": 17,
      "examples": [
        {
          "file": "tools/import_path_fixer.py",
          "line": 24
        },
        {
          "file": "tools/path_validator.py",
          "line": 23
        },
        {
          "file": "core/api_diff_analyzer.py",
          "line": 14
        }
      ]
    },
    "argparse": {
      "count": 51,
      "examples": [
        {
          "file": "tools/collapse_simulator.py",
          "line": 36
        },
        {
          "file": "tools/cli/drift_analyzer_cli.py",
          "line": 24
        },
        {
          "file": "tools/cli/ctl.py",
          "line": 39
        }
      ]
    },
    "statistics": {
      "count": 25,
      "examples": [
        {
          "file": "tools/prediction/test_prophet.py",
          "line": 28
        },
        {
          "file": "tools/prediction/prophet_predictor.py",
          "line": 27
        },
        {
          "file": "core/symbolic_drift_analyzer.py",
          "line": 40
        }
      ]
    },
    "unicodedata": {
      "count": 5,
      "examples": [
        {
          "file": "foundry/symbolic_foundry.py",
          "line": 55
        },
        {
          "file": "identity/core/id_service/entropy_engine.py",
          "line": 24
        },
        {
          "file": "identity/core/id_service/lambd_id_validator.py",
          "line": 29
        }
      ]
    },
    "gc": {
      "count": 8,
      "examples": [
        {
          "file": "core/resource_efficiency_analyzer.py",
          "line": 20
        },
        {
          "file": "core/practical_optimizations.py",
          "line": 21
        },
        {
          "file": "memory/memory_optimization.py",
          "line": 69
        }
      ]
    },
    "platform": {
      "count": 4,
      "examples": [
        {
          "file": "core/resource_efficiency_analyzer.py",
          "line": 24
        },
        {
          "file": "core/interfaces/main.py",
          "line": 17
        },
        {
          "file": "identity/backend/verifold/hardware_entropy_seed.py",
          "line": 22
        }
      ]
    },
    "resource": {
      "count": 1,
      "examples": [
        {
          "file": "core/resource_efficiency_analyzer.py",
          "line": 26
        }
      ]
    },
    "tracemalloc": {
      "count": 2,
      "examples": [
        {
          "file": "core/resource_efficiency_analyzer.py",
          "line": 30
        },
        {
          "file": "orchestration/brain/monitoring/performance.py",
          "line": 22
        }
      ]
    },
    "secrets": {
      "count": 38,
      "examples": [
        {
          "file": "core/config.py",
          "line": 14
        },
        {
          "file": "core/id.py",
          "line": 23
        },
        {
          "file": "core/quantum_identity_manager.py",
          "line": 39
        }
      ]
    },
    "difflib": {
      "count": 1,
      "examples": [
        {
          "file": "core/api_diff_analyzer.py",
          "line": 22
        }
      ]
    },
    "mimetypes": {
      "count": 4,
      "examples": [
        {
          "file": "core/image_processing_pipeline.py",
          "line": 32
        },
        {
          "file": "memory/systems/multimodal_memory_support.py",
          "line": 50
        },
        {
          "file": "memory/systems/memory_media_file_storage.py",
          "line": 21
        }
      ]
    },
    "heapq": {
      "count": 5,
      "examples": [
        {
          "file": "core/mailbox.py",
          "line": 14
        },
        {
          "file": "memory/replay/replay_buffer.py",
          "line": 54
        },
        {
          "file": "memory/systems/replay_system.py",
          "line": 62
        }
      ]
    },
    "gzip": {
      "count": 6,
      "examples": [
        {
          "file": "core/event_replay_snapshot.py",
          "line": 19
        },
        {
          "file": "memory/memory_optimization.py",
          "line": 70
        },
        {
          "file": "memory/systems/foldout_simple.py",
          "line": 7
        }
      ]
    },
    "aiofiles": {
      "count": 4,
      "examples": [
        {
          "file": "core/event_replay_snapshot.py",
          "line": 22
        },
        {
          "file": "memory/systems/distributed_memory_fold.py",
          "line": 57
        },
        {
          "file": "creativity/creative_engine.py",
          "line": 45
        }
      ]
    },
    "shlex": {
      "count": 3,
      "examples": [
        {
          "file": "core/automatic_testing_system.py",
          "line": 22
        },
        {
          "file": "tests/hold/test_security_fixes_verification.py",
          "line": 7
        },
        {
          "file": "ethics/security/secure_utils.py",
          "line": 8
        }
      ]
    },
    "prometheus_client": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 48
        }
      ]
    },
    "elasticsearch": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 56
        }
      ]
    },
    "redis": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 58
        }
      ]
    },
    "aioredis": {
      "count": 2,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 59
        },
        {
          "file": "creativity/creative_engine.py",
          "line": 46
        }
      ]
    },
    "aiohttp": {
      "count": 15,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 60
        },
        {
          "file": "core/monitoring_observability.py",
          "line": 66
        },
        {
          "file": "memory/systems/distributed_memory_fold.py",
          "line": 56
        }
      ]
    },
    "boto3": {
      "count": 2,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "line": 62
        },
        {
          "file": "core/monitoring_observability.py",
          "line": 68
        }
      ]
    },
    "pyfiglet": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/main.py",
          "line": 19
        }
      ]
    },
    "websockets": {
      "count": 5,
      "examples": [
        {
          "file": "core/interfaces/socket.py",
          "line": 19
        },
        {
          "file": "identity/auth_backend/authentication_server.py",
          "line": 25
        },
        {
          "file": "identity/auth/entropy_synchronizer.py",
          "line": 15
        }
      ]
    },
    "atexit": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/tools/research/research_dashboard.py",
          "line": 248
        },
        {
          "file": "orchestration/brain/spine/emotion_log_alt.py",
          "line": 135
        }
      ]
    },
    "pytz": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/tools/security/session_logger.py",
          "line": 28
        }
      ]
    },
    "openai": {
      "count": 10,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/core/render_ai.py",
          "line": 37
        },
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "line": 11
        },
        {
          "file": "ethics/ethical_auditor.py",
          "line": 58
        }
      ]
    },
    "zipfile": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/utils/symbolic_github_export.py",
          "line": 35
        },
        {
          "file": "orchestration/apis/code_process_integration_api.py",
          "line": 75
        }
      ]
    },
    "jsonschema": {
      "count": 4,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/nias/validate_payload.py",
          "line": 25
        },
        {
          "file": "identity/backend/verifold/ledger_auditor.py",
          "line": 14
        },
        {
          "file": "creativity/dream_systems/dream_injector.py",
          "line": 19
        }
      ]
    },
    "pydantic": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/widgets/widget_config.py",
          "line": 13
        }
      ]
    },
    "zlib": {
      "count": 6,
      "examples": [
        {
          "file": "memory/memory_optimization.py",
          "line": 75
        },
        {
          "file": "memory/systems/hierarchical_data_store.py",
          "line": 56
        },
        {
          "file": "memory/systems/optimized_memory_item.py",
          "line": 68
        }
      ]
    },
    "struct": {
      "count": 7,
      "examples": [
        {
          "file": "memory/memory_optimization.py",
          "line": 83
        },
        {
          "file": "memory/systems/optimized_memory_item.py",
          "line": 67
        },
        {
          "file": "memory/systems/foldout_simple.py",
          "line": 8
        }
      ]
    },
    "glob": {
      "count": 4,
      "examples": [
        {
          "file": "memory/tools/memory_drift_auditor.py",
          "line": 44
        },
        {
          "file": "identity/backend/dream_engine/publish_queue_manager.py",
          "line": 21
        },
        {
          "file": "reasoning/oracle_predictor.py",
          "line": 35
        }
      ]
    },
    "mmap": {
      "count": 2,
      "examples": [
        {
          "file": "memory/persistence/orthogonal_persistence.py",
          "line": 45
        },
        {
          "file": "memory/systems/simple_store.py",
          "line": 20
        }
      ]
    },
    "io": {
      "count": 8,
      "examples": [
        {
          "file": "memory/systems/multimodal_memory_support.py",
          "line": 56
        },
        {
          "file": "memory/systems/memory_viz.py",
          "line": 3
        },
        {
          "file": "identity/auth_backend/qr_entropy_generator.py",
          "line": 19
        }
      ]
    },
    "binascii": {
      "count": 7,
      "examples": [
        {
          "file": "memory/systems/foldout_simple.py",
          "line": 9
        },
        {
          "file": "memory/systems/foldout.py",
          "line": 33
        },
        {
          "file": "memory/systems/foldin.py",
          "line": 33
        }
      ]
    },
    "msgpack": {
      "count": 2,
      "examples": [
        {
          "file": "memory/systems/foldout.py",
          "line": 30
        },
        {
          "file": "memory/systems/foldin.py",
          "line": 30
        }
      ]
    },
    "pprint": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_planning.py",
          "line": 7
        }
      ]
    },
    "sympy": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_planning.py",
          "line": 10
        }
      ]
    },
    "operator": {
      "count": 2,
      "examples": [
        {
          "file": "memory/systems/memory_tracker.py",
          "line": 2
        },
        {
          "file": "memory/systems/memory_viz.py",
          "line": 6
        }
      ]
    },
    "qrcode": {
      "count": 7,
      "examples": [
        {
          "file": "identity/auth_backend/qr_entropy_generator.py",
          "line": 13
        },
        {
          "file": "identity/core/id_service/portability_system.py",
          "line": 23
        },
        {
          "file": "identity/core/qrg/qrg_manager.py",
          "line": 23
        }
      ]
    },
    "jwt": {
      "count": 3,
      "examples": [
        {
          "file": "identity/enterprise/auth.py",
          "line": 21
        },
        {
          "file": "identity/backend/app/token_handler.py",
          "line": 13
        },
        {
          "file": "dashboard/core/test_scheduler.py",
          "line": 69
        }
      ]
    },
    "string": {
      "count": 8,
      "examples": [
        {
          "file": "identity/backend/app/id_generator.py",
          "line": 12
        },
        {
          "file": "identity/backend/verifold/security/consent_fuzz_tester.py",
          "line": 11
        },
        {
          "file": "tests/memory_stress_tests_light.py",
          "line": 10
        }
      ]
    },
    "smtplib": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/emailer.py",
          "line": 11
        }
      ]
    },
    "click": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/verifold/verifold_cli.py",
          "line": 19
        }
      ]
    },
    "oqs": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/verifold/verifold_hash_pq.py",
          "line": 13
        },
        {
          "file": "identity/backend/verifold/verifold_verifier.py",
          "line": 14
        }
      ]
    },
    "html": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/dream_engine/html_social_generator.py",
          "line": 5
        }
      ]
    },
    "types": {
      "count": 4,
      "examples": [
        {
          "file": "creativity/dream/dream_sandbox.py",
          "line": 9
        },
        {
          "file": "tests/api/test_glyph_exchange.py",
          "line": 10
        },
        {
          "file": "tests/dream/test_dream_limiter.py",
          "line": 3
        }
      ]
    },
    "locale": {
      "count": 4,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/web_app.py",
          "line": 9
        },
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "line": 8
        },
        {
          "file": "examples/creativity/dream_interpreter_demo.py",
          "line": 8
        }
      ]
    },
    "anthropic": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "line": 12
        },
        {
          "file": "orchestration/brain/lambdabot_autonomous_fixer.py",
          "line": 34
        }
      ]
    },
    "pydub": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "line": 20
        }
      ]
    },
    "emoji": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "line": 25
        }
      ]
    },
    "httpx": {
      "count": 3,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/identity/auth_middleware_unified.py",
          "line": 17
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/identity/auth_middleware.py",
          "line": 13
        },
        {
          "file": "interfaces/api/lambda_bot_api_integration.py",
          "line": 12
        }
      ]
    },
    "uvicorn": {
      "count": 3,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
          "line": 29
        },
        {
          "file": "dashboard/api/websocket_server.py",
          "line": 58
        },
        {
          "file": "quantum/main.py",
          "line": 39
        }
      ]
    },
    "jinja2": {
      "count": 2,
      "examples": [
        {
          "file": "learning/doc_generator_learning_engine.py",
          "line": 24
        },
        {
          "file": "features/docututor/content_generation_engine/doc_generator.py",
          "line": 10
        }
      ]
    },
    "configparser": {
      "count": 2,
      "examples": [
        {
          "file": "consciousness/cognitive_architecture_controller.py",
          "line": 68
        },
        {
          "file": "consciousness/brain_integration_20250620_013824.py",
          "line": 34
        }
      ]
    },
    "hmac": {
      "count": 3,
      "examples": [
        {
          "file": "dashboard/core/test_scheduler.py",
          "line": 58
        },
        {
          "file": "quantum/identity_engine.py",
          "line": 52
        },
        {
          "file": "quantum/web_integration.py",
          "line": 50
        }
      ]
    },
    "cron_descriptor": {
      "count": 1,
      "examples": [
        {
          "file": "dashboard/core/test_scheduler.py",
          "line": 65
        }
      ]
    },
    "colorsys": {
      "count": 1,
      "examples": [
        {
          "file": "dashboard/core/morphing_engine.py",
          "line": 53
        }
      ]
    },
    "pyttsx3": {
      "count": 2,
      "examples": [
        {
          "file": "voice/voice_replay.py",
          "line": 20
        },
        {
          "file": "voice/processor.py",
          "line": 19
        }
      ]
    },
    "wave": {
      "count": 2,
      "examples": [
        {
          "file": "voice/processor.py",
          "line": 16
        },
        {
          "file": "examples/unit_tests/test_voice.py",
          "line": 15
        }
      ]
    },
    "pyaudio": {
      "count": 1,
      "examples": [
        {
          "file": "voice/processor.py",
          "line": 17
        }
      ]
    },
    "chardet": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/specialized/\u039bDependaBoT_robust.py",
          "line": 32
        }
      ]
    },
    "tokenize": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/specialized/\u039bDependaBoT_robust.py",
          "line": 35
        }
      ]
    },
    "git": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/lambdabot_autonomous_fixer.py",
          "line": 31
        }
      ]
    },
    "keyring": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/core/ai_config.py",
          "line": 16
        }
      ]
    },
    "schedule": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/spine/self_reflect_cron.py",
          "line": 28
        }
      ]
    },
    "grpc": {
      "count": 3,
      "examples": [
        {
          "file": "interfaces/api/v1/grpc/server.py",
          "line": 5
        },
        {
          "file": "interfaces/api/v1/grpc/client.py",
          "line": 1
        },
        {
          "file": "quantum/distributed_quantum_architecture.py",
          "line": 33
        }
      ]
    },
    "cmath": {
      "count": 2,
      "examples": [
        {
          "file": "quantum/oscillator.py",
          "line": 40
        },
        {
          "file": "quantum/quantum_colony.py",
          "line": 12
        }
      ]
    },
    "ray": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/distributed_quantum_architecture.py",
          "line": 31
        }
      ]
    },
    "rlp": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/safe_blockchain.py",
          "line": 39
        }
      ]
    }
  },
  "broken_patterns": {
    "lukhas_documentation_updater": {
      "count": 2,
      "examples": [
        {
          "file": "update_documentation.py",
          "imports": "standardize_lukhas_documentation, DocumentationConfig",
          "line": 21
        },
        {
          "file": "tests/test_documentation_single.py",
          "imports": "standardize_lukhas_documentation",
          "line": 13
        }
      ]
    },
    "fastapi": {
      "count": 38,
      "examples": [
        {
          "file": "main.py",
          "imports": "FastAPI, HTTPException",
          "line": 23
        },
        {
          "file": "identity/backend/app/auth.py",
          "imports": "APIRouter, HTTPException, Form",
          "line": 13
        },
        {
          "file": "identity/backend/app/admin_tools.py",
          "imports": "APIRouter, HTTPException",
          "line": 13
        }
      ]
    },
    "fastapi.middleware.cors": {
      "count": 6,
      "examples": [
        {
          "file": "main.py",
          "imports": "CORSMiddleware",
          "line": 24
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/main.py",
          "imports": "CORSMiddleware",
          "line": 14
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
          "imports": "CORSMiddleware",
          "line": 27
        }
      ]
    },
    "fastapi.responses": {
      "count": 5,
      "examples": [
        {
          "file": "main.py",
          "imports": "JSONResponse",
          "line": 25
        },
        {
          "file": "identity/backend/app/vault_downloads.py",
          "imports": "FileResponse",
          "line": 12
        },
        {
          "file": "identity/backend/app/vault.py",
          "imports": "JSONResponse",
          "line": 12
        }
      ]
    },
    "prophet": {
      "count": 1,
      "examples": [
        {
          "file": "tools/prediction/prophet_demo.py",
          "imports": "(",
          "line": 10
        }
      ]
    },
    "openai": {
      "count": 9,
      "examples": [
        {
          "file": "tools/dev/add_verbose_core_descriptions.py",
          "imports": "OpenAI",
          "line": 17
        },
        {
          "file": "core/interfaces/voice/listen.py",
          "imports": "OpenAI",
          "line": 8
        },
        {
          "file": "memory/systems/memoria/dreams_alt.py",
          "imports": "OpenAI",
          "line": 20
        }
      ]
    },
    "dotenv": {
      "count": 10,
      "examples": [
        {
          "file": "tools/dev/add_verbose_core_descriptions.py",
          "imports": "load_dotenv",
          "line": 19
        },
        {
          "file": "core/notion_sync.py",
          "imports": "load_dotenv",
          "line": 51
        },
        {
          "file": "core/interfaces/logic/agent_self.py",
          "imports": "load_dotenv",
          "line": 10
        }
      ]
    },
    "__future__": {
      "count": 44,
      "examples": [
        {
          "file": "bio/eeg_sync_bridge.py",
          "imports": "annotations",
          "line": 11
        },
        {
          "file": "core/plugin_registry.py",
          "imports": "annotations",
          "line": 6
        },
        {
          "file": "core/event_replayer.py",
          "imports": "annotations",
          "line": 8
        }
      ]
    },
    "orchestration_src.brain.attention.quantum_attention": {
      "count": 4,
      "examples": [
        {
          "file": "bio/symbolic/quantum_attention.py",
          "imports": "QuantumInspiredAttention, QuantumAttentionEnsemble",
          "line": 410
        },
        {
          "file": "examples/unit_tests/test_beautiful_consciousness.py",
          "imports": "(",
          "line": 20
        },
        {
          "file": "examples/unit_tests/test_integration.py",
          "imports": "QuantumInspiredAttention",
          "line": 19
        }
      ]
    },
    "old": {
      "count": 1,
      "examples": [
        {
          "file": "bio/systems/orchestration/compatibility.py",
          "imports": "paths to the new consolidated location.",
          "line": 5
        }
      ]
    },
    "concurrent.futures": {
      "count": 15,
      "examples": [
        {
          "file": "bio/systems/orchestration/bio_orchestrator.py",
          "imports": "Future",
          "line": 19
        },
        {
          "file": "bio/systems/orchestration/bio_orchestrator.py",
          "imports": "ThreadPoolExecutor",
          "line": 20
        },
        {
          "file": "core/orchestration/energy_aware_execution_planner.py",
          "imports": "ThreadPoolExecutor",
          "line": 57
        }
      ]
    },
    "plotly.subplots": {
      "count": 4,
      "examples": [
        {
          "file": "trace/drift_dashboard_visual.py",
          "imports": "make_subplots",
          "line": 46
        },
        {
          "file": "creativity/healix_visualizer.py",
          "imports": "make_subplots",
          "line": 30
        },
        {
          "file": "ethics/sentinel/ethical_sentinel_dashboard.py",
          "imports": "make_subplots",
          "line": 47
        }
      ]
    },
    "flask": {
      "count": 8,
      "examples": [
        {
          "file": "core/api_controllers.py",
          "imports": "Flask, request, jsonify",
          "line": 11
        },
        {
          "file": "identity/auth_backend/entropy_health_api.py",
          "imports": "Flask, jsonify, request",
          "line": 12
        },
        {
          "file": "identity/backend/verifold/scanner_pwa/scanner_api.py",
          "imports": "Flask, request, jsonify, send_from_directory",
          "line": 7
        }
      ]
    },
    "router.llm_multiverse_router": {
      "count": 1,
      "examples": [
        {
          "file": "core/unified_bot.py",
          "imports": "multiverse_route",
          "line": 78
        }
      ]
    },
    "pydantic": {
      "count": 39,
      "examples": [
        {
          "file": "core/config.py",
          "imports": "BaseSettings, Field, validator",
          "line": 13
        },
        {
          "file": "config/settings.py",
          "imports": "BaseModel, Field",
          "line": 34
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/settings.py",
          "imports": "Field, validator",
          "line": 12
        }
      ]
    },
    "event_bus": {
      "count": 1,
      "examples": [
        {
          "file": "core/benchmark_swarm.py",
          "imports": "Event, get_global_event_bus",
          "line": 9
        }
      ]
    },
    "minimal_actor": {
      "count": 1,
      "examples": [
        {
          "file": "core/benchmark_swarm.py",
          "imports": "Actor",
          "line": 10
        }
      ]
    },
    "p2p_communication": {
      "count": 1,
      "examples": [
        {
          "file": "core/test_p2p_communication.py",
          "imports": "(",
          "line": 8
        }
      ]
    },
    "actor_system": {
      "count": 1,
      "examples": [
        {
          "file": "core/demo_coordination.py",
          "imports": "ActorSystem",
          "line": 11
        }
      ]
    },
    "agent_coordination": {
      "count": 1,
      "examples": [
        {
          "file": "core/demo_coordination.py",
          "imports": "(",
          "line": 12
        }
      ]
    },
    "notion_client": {
      "count": 1,
      "examples": [
        {
          "file": "core/notion_sync.py",
          "imports": "Client",
          "line": 60
        }
      ]
    },
    "apscheduler.schedulers.background": {
      "count": 1,
      "examples": [
        {
          "file": "core/notion_sync.py",
          "imports": "BackgroundScheduler",
          "line": 61
        }
      ]
    },
    "tiered_state_management": {
      "count": 1,
      "examples": [
        {
          "file": "core/test_tiered_state_management.py",
          "imports": "(",
          "line": 8
        }
      ]
    },
    "scipy": {
      "count": 2,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "stats",
          "line": 41
        },
        {
          "file": "learning/_dict_learning.py",
          "imports": "linalg",
          "line": 27
        }
      ]
    },
    "prometheus_client": {
      "count": 3,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "Counter, Histogram, Gauge, Summary, CollectorRegistry",
          "line": 49
        },
        {
          "file": "creativity/creative_engine.py",
          "imports": "Counter, Histogram, Gauge",
          "line": 47
        },
        {
          "file": "consciousness/cognitive_architecture_controller.py",
          "imports": "Counter, Histogram, Gauge",
          "line": 69
        }
      ]
    },
    "opentelemetry": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "trace, metrics",
          "line": 51
        }
      ]
    },
    "opentelemetry.exporter.jaeger.thrift": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "JaegerExporter",
          "line": 52
        }
      ]
    },
    "opentelemetry.instrumentation.requests": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "RequestsInstrumentor",
          "line": 53
        }
      ]
    },
    "opentelemetry.sdk.trace": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "TracerProvider",
          "line": 54
        }
      ]
    },
    "opentelemetry.sdk.trace.export": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "BatchSpanProcessor",
          "line": 55
        }
      ]
    },
    "elasticsearch": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "Elasticsearch",
          "line": 57
        }
      ]
    },
    "datadog": {
      "count": 2,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "DogStatsdClient",
          "line": 61
        },
        {
          "file": "core/monitoring_observability.py",
          "imports": "statsd",
          "line": 67
        }
      ]
    },
    "creative_expressions_v2": {
      "count": 1,
      "examples": [
        {
          "file": "core/monitoring_observability.py",
          "imports": "CreativeMetrics",
          "line": 64
        }
      ]
    },
    "image_processing_pipeline": {
      "count": 1,
      "examples": [
        {
          "file": "core/test_image_processing_pipeline.py",
          "imports": "(",
          "line": 12
        }
      ]
    },
    "lukhas_dna_link": {
      "count": 2,
      "examples": [
        {
          "file": "core/output/message_hub.py",
          "imports": "LucasDNALink",
          "line": 8
        },
        {
          "file": "orchestration/brain/output/message_hub.py",
          "imports": "LucasDNALink",
          "line": 15
        }
      ]
    },
    "modules.dream_seed": {
      "count": 4,
      "examples": [
        {
          "file": "core/utils/dream_utils.py",
          "imports": "seed_dream",
          "line": 13
        },
        {
          "file": "core/rem/sleep_cycle.py",
          "imports": "seed_dream",
          "line": 10
        },
        {
          "file": "orchestration/brain/rem/rem.py",
          "imports": "seed_dream",
          "line": 18
        }
      ]
    },
    "modules.alignment_score": {
      "count": 1,
      "examples": [
        {
          "file": "core/utils/dream_utils.py",
          "imports": "AlignmentMetrics",
          "line": 14
        }
      ]
    },
    "modules.memoria": {
      "count": 3,
      "examples": [
        {
          "file": "core/rem/sleep_cycle.py",
          "imports": "log_trace",
          "line": 8
        },
        {
          "file": "orchestration/brain/rem/rem.py",
          "imports": "log_trace",
          "line": 16
        },
        {
          "file": "orchestration/brain/rem/sleep_cycle.py",
          "imports": "log_trace",
          "line": 15
        }
      ]
    },
    "modules.fold_token": {
      "count": 3,
      "examples": [
        {
          "file": "core/rem/sleep_cycle.py",
          "imports": "fold_trace",
          "line": 9
        },
        {
          "file": "orchestration/brain/rem/rem.py",
          "imports": "fold_trace",
          "line": 17
        },
        {
          "file": "orchestration/brain/rem/sleep_cycle.py",
          "imports": "fold_trace",
          "line": 16
        }
      ]
    },
    "symbolic_ai.trait_manager": {
      "count": 5,
      "examples": [
        {
          "file": "core/services/personality/empathy.py",
          "imports": "load_traits",
          "line": 60
        },
        {
          "file": "orchestration/brain/spine/unified_self.py",
          "imports": "load_traits",
          "line": 24
        },
        {
          "file": "orchestration/brain/spine/trait_sync.py",
          "imports": "load_traits",
          "line": 35
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.dashboard_settings": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/ui/app.py",
          "imports": "get_paired_apps",
          "line": 20
        },
        {
          "file": "core/interfaces/lukhas_as_agent/streamlit/app.py",
          "imports": "get_paired_apps",
          "line": 20
        }
      ]
    },
    "edge_tts": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/tools/cli/speak.py",
          "imports": "Communicate",
          "line": 20
        },
        {
          "file": "core/interfaces/voice/edge_voice.py",
          "imports": "Communicate",
          "line": 17
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_emotion_log": {
      "count": 6,
      "examples": [
        {
          "file": "core/interfaces/logic/agent_self.py",
          "imports": "get_emotion_state",
          "line": 13
        },
        {
          "file": "core/interfaces/lukhas_as_agent/agent_logic/agent_self.py",
          "imports": "get_emotion_state",
          "line": 13
        },
        {
          "file": "core/interfaces/lukhas_as_agent/core/render_ai.py",
          "imports": "get_emotion_state",
          "line": 39
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_widget_engine": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/logic/agent_self.py",
          "imports": "create_symbolic_widget",
          "line": 14
        },
        {
          "file": "core/interfaces/lukhas_as_agent/agent_logic/agent_self.py",
          "imports": "create_symbolic_widget",
          "line": 14
        }
      ]
    },
    "lukhas_config": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/logic/agent_core.py",
          "imports": "TIER_PERMISSIONS",
          "line": 36
        },
        {
          "file": "core/interfaces/lukhas_as_agent/sys/dast/dast.py",
          "imports": "TIER_PERMISSIONS",
          "line": 20
        }
      ]
    },
    "Agent_Logic_Architecture": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/logic/agent_core.py",
          "imports": "(",
          "line": 39
        }
      ]
    },
    "lukhas_core.emotional_state": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/voice/voice_agent.py",
          "imports": "get_tone",
          "line": 16
        }
      ]
    },
    "lukhas_core.event_bus": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/voice/voice_agent.py",
          "imports": "subscribe",
          "line": 17
        }
      ]
    },
    "utils.logging": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/voice/voice_agent.py",
          "imports": "log_event",
          "line": 18
        }
      ]
    },
    "traits.trait_manager": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/voice/listen.py",
          "imports": "load_traits",
          "line": 7
        },
        {
          "file": "memory/systems/memoria/dreams_alt.py",
          "imports": "load_traits",
          "line": 22
        }
      ]
    },
    "symbolic_ai.personas.lukhas.lukhas_voice": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/voice/core/sayit.py",
          "imports": "speak, VOICES",
          "line": 5
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_affiliate_log": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/core/checkout_handler.py",
          "imports": "log_affiliate_action",
          "line": 37
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_wallet": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/core/checkout_handler.py",
          "imports": "deduct_crypto_balance",
          "line": 38
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_access_tiers": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/core/gatekeeper.py",
          "imports": "get_tier_features",
          "line": 36
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core.lukhas_nias_filter": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/core/gatekeeper.py",
          "imports": "evaluate_ad_permission",
          "line": 37
        }
      ]
    },
    "jsonschema": {
      "count": 3,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/nias/validate_payload.py",
          "imports": "validate",
          "line": 26
        },
        {
          "file": "creativity/dream_systems/dream_injector.py",
          "imports": "validate",
          "line": 20
        },
        {
          "file": "creativity/dream/dream_injector.py",
          "imports": "validate",
          "line": 53
        }
      ]
    },
    "statistics": {
      "count": 2,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/nias/feedback_insight_cli.py",
          "imports": "mean",
          "line": 27
        },
        {
          "file": "identity/diagnostics/insight_cli.py",
          "imports": "mean",
          "line": 20
        }
      ]
    },
    "consent_manager": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/dast/dast.py",
          "imports": "verify_or_revoke",
          "line": 21
        }
      ]
    },
    "ethics_jury": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/dast/dast.py",
          "imports": "should_trigger_jury, run_ethics_review",
          "line": 22
        }
      ]
    },
    "LUKHAS_AGENT_PLUGIN.core": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/sys/dast/launcher.py",
          "imports": "lukhas_scheduler, lukhas_widget_engine",
          "line": 25
        }
      ]
    },
    "dashboards.widgets.visualizer_engine": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/widgets/live_renderer_widget.py",
          "imports": "render_symbolic_expression",
          "line": 23
        }
      ]
    },
    "modules.voice.lukhas_voice_agent": {
      "count": 1,
      "examples": [
        {
          "file": "core/interfaces/lukhas_as_agent/news_and_social/s_dispatcher.py",
          "imports": "speak",
          "line": 22
        }
      ]
    },
    "cryptography.fernet": {
      "count": 19,
      "examples": [
        {
          "file": "memory/privacy_preserving_memory_vault.py",
          "imports": "Fernet",
          "line": 91
        },
        {
          "file": "memory/systems/memory_lock.py",
          "imports": "Fernet",
          "line": 36
        },
        {
          "file": "memory/systems/memory_identity.py",
          "imports": "Fernet",
          "line": 15
        }
      ]
    },
    "cryptography.hazmat.primitives": {
      "count": 11,
      "examples": [
        {
          "file": "memory/privacy_preserving_memory_vault.py",
          "imports": "hashes, padding, serialization",
          "line": 92
        },
        {
          "file": "memory/systems/memory_lock.py",
          "imports": "hashes",
          "line": 37
        },
        {
          "file": "memory/systems/trauma_lock.py",
          "imports": "hashes",
          "line": 38
        }
      ]
    },
    "cryptography.hazmat.primitives.asymmetric": {
      "count": 4,
      "examples": [
        {
          "file": "memory/privacy_preserving_memory_vault.py",
          "imports": "rsa, padding as asym_padding",
          "line": 93
        },
        {
          "file": "identity/enterprise/auth.py",
          "imports": "rsa, padding",
          "line": 33
        },
        {
          "file": "identity/backend/seedra/ethics/seedra_ethics_engine.py",
          "imports": "ed25519",
          "line": 5
        }
      ]
    },
    "cryptography.hazmat.primitives.ciphers": {
      "count": 1,
      "examples": [
        {
          "file": "memory/privacy_preserving_memory_vault.py",
          "imports": "Cipher, algorithms, modes",
          "line": 94
        }
      ]
    },
    "cryptography.hazmat.primitives.kdf.pbkdf2": {
      "count": 7,
      "examples": [
        {
          "file": "memory/privacy_preserving_memory_vault.py",
          "imports": "PBKDF2HMAC",
          "line": 95
        },
        {
          "file": "memory/systems/memory_lock.py",
          "imports": "PBKDF2HMAC",
          "line": 38
        },
        {
          "file": "memory/systems/trauma_lock.py",
          "imports": "PBKDF2HMAC",
          "line": 39
        }
      ]
    },
    "lightweight_concurrency": {
      "count": 1,
      "examples": [
        {
          "file": "memory/test_lightweight_concurrency.py",
          "imports": "(",
          "line": 8
        }
      ]
    },
    "io": {
      "count": 13,
      "examples": [
        {
          "file": "memory/node.py",
          "imports": "BytesIO",
          "line": 12
        },
        {
          "file": "memory/systems/foldin.py",
          "imports": "BytesIO",
          "line": 38
        },
        {
          "file": "identity/backend/verifold/qr_decoder.py",
          "imports": "BytesIO",
          "line": 18
        }
      ]
    },
    "quantum_mind": {
      "count": 2,
      "examples": [
        {
          "file": "memory/memoria.py",
          "imports": "ConsciousnessPhase, get_current_phase",
          "line": 11
        },
        {
          "file": "tests/core/test_consciousness_phase.py",
          "imports": "ConsciousnessPhase",
          "line": 7
        }
      ]
    },
    "typing_extensions": {
      "count": 12,
      "examples": [
        {
          "file": "memory/systems/memory_profiler.py",
          "imports": "Literal",
          "line": 50
        },
        {
          "file": "reasoning/reasoning_effort.py",
          "imports": "Literal, TypeAlias",
          "line": 43
        },
        {
          "file": "reasoning/response_reasoning_summary_text_delta_event.py",
          "imports": "Literal",
          "line": 40
        }
      ]
    },
    "cachetools": {
      "count": 2,
      "examples": [
        {
          "file": "memory/systems/in_memory_cache_storage_wrapper.py",
          "imports": "TTLCache",
          "line": 50
        },
        {
          "file": "memory/systems/memory_session_storage.py",
          "imports": "TTLCache",
          "line": 19
        }
      ]
    },
    "streamlit.logger": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_media_file_storage.py",
          "imports": "get_logger",
          "line": 25
        }
      ]
    },
    "streamlit.runtime.media_file_storage": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_media_file_storage.py",
          "imports": "(",
          "line": 26
        }
      ]
    },
    "streamlit.runtime.stats": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_media_file_storage.py",
          "imports": "CacheStat, CacheStatsProvider, group_stats",
          "line": 31
        }
      ]
    },
    "PIL": {
      "count": 6,
      "examples": [
        {
          "file": "memory/systems/memory_visualizer.py",
          "imports": "Image, ImageDraw, ImageFilter, ImageFont, ImageEnhance",
          "line": 25
        },
        {
          "file": "identity/auth_backend/qr_entropy_generator.py",
          "imports": "Image, ImageDraw",
          "line": 18
        },
        {
          "file": "identity/core/qrg/qrg_manager.py",
          "imports": "Image, ImageDraw, ImageColor, ImageFont",
          "line": 33
        }
      ]
    },
    "streamlit.runtime.session_manager": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_session_storage.py",
          "imports": "SessionInfo, SessionStorage",
          "line": 21
        }
      ]
    },
    "qiskit": {
      "count": 7,
      "examples": [
        {
          "file": "memory/systems/quantum_memory_architecture.py",
          "imports": "QuantumCircuit",
          "line": 22
        },
        {
          "file": "creativity/creative_q_expression.py",
          "imports": "QuantumCircuit, QuantumRegister",
          "line": 21
        },
        {
          "file": "creativity/quantum_creative_types.py",
          "imports": "QuantumCircuit",
          "line": 43
        }
      ]
    },
    "types": {
      "count": 3,
      "examples": [
        {
          "file": "memory/systems/memory_research.py",
          "imports": "TracebackType",
          "line": 38
        },
        {
          "file": "tests/core/test_consciousness_phase.py",
          "imports": "ModuleType",
          "line": 6
        },
        {
          "file": "orchestration/brain/net/client.py",
          "imports": "TracebackType",
          "line": 17
        }
      ]
    },
    "AID.core.lambda_id": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_learning/memory_manager.py",
          "imports": "ID, AccessTier",
          "line": 59
        }
      ]
    },
    "AID.core.memory_identity": {
      "count": 1,
      "examples": [
        {
          "file": "memory/systems/memory_learning/memory_manager.py",
          "imports": "MemoryIdentityIntegration, MemoryAccessPolicy",
          "line": 60
        }
      ]
    },
    "qrg_integration": {
      "count": 3,
      "examples": [
        {
          "file": "identity/qrg_test_suite.py",
          "imports": "(",
          "line": 37
        },
        {
          "file": "identity/qrg_showcase.py",
          "imports": "LukhusQRGIntegrator, QRGType, SecurityLevel",
          "line": 34
        },
        {
          "file": "identity/qrg_100_percent_coverage.py",
          "imports": "(",
          "line": 38
        }
      ]
    },
    "quantum_steganographic_demo": {
      "count": 1,
      "examples": [
        {
          "file": "identity/qrg_100_percent_coverage.py",
          "imports": "(",
          "line": 41
        }
      ]
    },
    "id_portal.backend.app.tier_manager": {
      "count": 1,
      "examples": [
        {
          "file": "identity/router.py",
          "imports": "get_user_tier",
          "line": 3
        }
      ]
    },
    "utils.shared_logging": {
      "count": 5,
      "examples": [
        {
          "file": "identity/auth_backend/multi_user_sync.py",
          "imports": "get_logger",
          "line": 1
        },
        {
          "file": "identity/auth_backend/cross_device_handshake.py",
          "imports": "get_logger",
          "line": 8
        },
        {
          "file": "identity/auth_backend/webrtc_peer_sync.py",
          "imports": "get_logger",
          "line": 8
        }
      ]
    },
    "utils.replay_protection": {
      "count": 1,
      "examples": [
        {
          "file": "identity/auth_backend/cross_device_handshake.py",
          "imports": "ReplayProtection",
          "line": 7
        }
      ]
    },
    "flask_limiter": {
      "count": 3,
      "examples": [
        {
          "file": "identity/auth_backend/entropy_health_api.py",
          "imports": "Limiter",
          "line": 13
        },
        {
          "file": "identity/api/__init__.py",
          "imports": "Limiter",
          "line": 14
        },
        {
          "file": "identity/api/routes/lambd_id_routes.py",
          "imports": "Limiter",
          "line": 14
        }
      ]
    },
    "flask_limiter.util": {
      "count": 3,
      "examples": [
        {
          "file": "identity/auth_backend/entropy_health_api.py",
          "imports": "get_remote_address",
          "line": 14
        },
        {
          "file": "identity/api/__init__.py",
          "imports": "get_remote_address",
          "line": 15
        },
        {
          "file": "identity/api/routes/lambd_id_routes.py",
          "imports": "get_remote_address",
          "line": 15
        }
      ]
    },
    "flask_socketio": {
      "count": 1,
      "examples": [
        {
          "file": "identity/auth_backend/entropy_health_api.py",
          "imports": "SocketIO, emit",
          "line": 15
        }
      ]
    },
    "backend.audit_logger": {
      "count": 1,
      "examples": [
        {
          "file": "identity/auth_backend/entropy_health_api.py",
          "imports": "AuditLogger",
          "line": 20
        }
      ]
    },
    "sqlalchemy.orm": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/database/crud.py",
          "imports": "Session",
          "line": 11
        }
      ]
    },
    "backend.app.id_generator": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/auth.py",
          "imports": "generate_lucas_id, generate_username_slug",
          "line": 14
        },
        {
          "file": "identity/backend/app/institution_manager.py",
          "imports": "generate_lucas_id, generate_username_slug",
          "line": 12
        }
      ]
    },
    "backend.app.emailer": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/auth.py",
          "imports": "send_welcome_email",
          "line": 15
        },
        {
          "file": "identity/backend/app/institution_manager.py",
          "imports": "send_welcome_email",
          "line": 13
        }
      ]
    },
    "backend.app.tier_manager": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/admin_tools.py",
          "imports": "upgrade_tier, downgrade_tier",
          "line": 14
        }
      ]
    },
    "backend.app.token_handler": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/admin_tools.py",
          "imports": "create_access_token",
          "line": 15
        }
      ]
    },
    "backend.database.models": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/users.py",
          "imports": "User",
          "line": 12
        },
        {
          "file": "identity/backend/app/vault.py",
          "imports": "VaultEntry",
          "line": 18
        }
      ]
    },
    "backend.database.crud": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/users.py",
          "imports": "get_user_by_slug",
          "line": 13
        }
      ]
    },
    "Crypto.Cipher": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/encryption_core.py",
          "imports": "AES",
          "line": 9
        },
        {
          "file": "identity/backend/app/crypto.py",
          "imports": "AES",
          "line": 11
        }
      ]
    },
    "Crypto.Random": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/encryption_core.py",
          "imports": "get_random_bytes",
          "line": 10
        },
        {
          "file": "identity/backend/app/crypto.py",
          "imports": "get_random_bytes",
          "line": 12
        }
      ]
    },
    "backend.app.cloud_storage": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/cloud_bridge_manager.py",
          "imports": "save_file_to_storage",
          "line": 17
        },
        {
          "file": "identity/backend/app/vault.py",
          "imports": "save_file_to_storage",
          "line": 19
        }
      ]
    },
    "backend.app.crypto": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/vault.py",
          "imports": "encrypt_data, generate_key_from_seed, generate_collapse_hash",
          "line": 20
        }
      ]
    },
    "backend.app.audit_logger": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/app/vault.py",
          "imports": "log_action",
          "line": 22
        },
        {
          "file": "identity/backend/app/logs.py",
          "imports": "get_audit_logs",
          "line": 13
        }
      ]
    },
    "backend.app.kyi_check": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/vault.py",
          "imports": "record_interaction",
          "line": 23
        }
      ]
    },
    "backend.app.symbolic_score": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/vault.py",
          "imports": "update_symbolic_score",
          "line": 24
        }
      ]
    },
    "backend.app.mesh_registry": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/vault.py",
          "imports": "register_mesh_event",
          "line": 25
        }
      ]
    },
    "backend.app.logs_api": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/logs.py",
          "imports": "get_all_session_logs",
          "line": 12
        }
      ]
    },
    "backend.app.email_logs": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/app/logs.py",
          "imports": "get_all_email_logs",
          "line": 14
        }
      ]
    },
    "tkinter": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/verifold/verifold_gui.py",
          "imports": "ttk, filedialog, messagebox, scrolledtext",
          "line": 15
        }
      ]
    },
    "verifold_verifier": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/verifold/verifier_test_suite.py",
          "imports": "verify_verifold_signature",
          "line": 12
        }
      ]
    },
    "flask_cors": {
      "count": 3,
      "examples": [
        {
          "file": "identity/backend/verifold/scanner_pwa/scanner_api.py",
          "imports": "CORS",
          "line": 8
        },
        {
          "file": "identity/api/__init__.py",
          "imports": "CORS",
          "line": 13
        },
        {
          "file": "features/api/dream_api.py",
          "imports": "CORS",
          "line": 13
        }
      ]
    },
    "scanner_backend": {
      "count": 1,
      "examples": [
        {
          "file": "identity/backend/verifold/scanner_pwa/scanner_api.py",
          "imports": "ScannerBackend",
          "line": 12
        }
      ]
    },
    "tabulate": {
      "count": 2,
      "examples": [
        {
          "file": "identity/backend/dream_engine/dream_registry_dashboard.py",
          "imports": "tabulate",
          "line": 16
        },
        {
          "file": "learning/aid/dream_engine/dream_registry_dashboard.py",
          "imports": "tabulate",
          "line": 43
        }
      ]
    },
    "mobile_platform.mobile_ui_renderer": {
      "count": 1,
      "examples": [
        {
          "file": "identity/mobile/__init__.py",
          "imports": "(",
          "line": 10
        }
      ]
    },
    "dao.init_config": {
      "count": 1,
      "examples": [
        {
          "file": "identity/governance/policy_board.py",
          "imports": "DAO_CONFIG",
          "line": 10
        }
      ]
    },
    "transformers": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/creative_q_expression.py",
          "imports": "AutoModelForCausalLM, AutoTokenizer",
          "line": 22
        },
        {
          "file": "orchestration/brain/llm_engine.py",
          "imports": "AutoModelForCausalLM, AutoTokenizer",
          "line": 9
        }
      ]
    },
    "qiskit.circuit.library": {
      "count": 3,
      "examples": [
        {
          "file": "creativity/creative_q_expression.py",
          "imports": "QFT, HHL",
          "line": 29
        },
        {
          "file": "quantum/ui_generator.py",
          "imports": "TwoLocal",
          "line": 39
        },
        {
          "file": "quantum/neural_symbolic_engine.py",
          "imports": "QFT, HHL",
          "line": 41
        }
      ]
    },
    "qiskit.algorithms": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/creative_q_expression.py",
          "imports": "VQE, QAOA",
          "line": 30
        },
        {
          "file": "quantum/ui_generator.py",
          "imports": "VQE, QAOA",
          "line": 38
        }
      ]
    },
    "cryptography.hazmat.primitives.kdf.hkdf": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/creative_q_expression.py",
          "imports": "HKDF",
          "line": 34
        },
        {
          "file": "quantum/neural_symbolic_engine.py",
          "imports": "HKDF",
          "line": 44
        }
      ]
    },
    "golden_healix_mapper": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/healix_visualizer.py",
          "imports": "HealixMapper, MemoryStrand, MutationStrategy",
          "line": 33
        },
        {
          "file": "orchestration/brain/visualization/healix_visualizer.py",
          "imports": "HealixMapper, MemoryStrand, MutationStrategy",
          "line": 22
        }
      ]
    },
    "dream_interpreter": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/web_app.py",
          "imports": "DreamInterpreter",
          "line": 11
        }
      ]
    },
    "pydub": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
          "imports": "AudioSegment",
          "line": 21
        }
      ]
    },
    "pydantic_settings": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/settings.py",
          "imports": "BaseSettings",
          "line": 11
        }
      ]
    },
    "sqlalchemy": {
      "count": 2,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py",
          "imports": "engine_from_config",
          "line": 12
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py",
          "imports": "pool",
          "line": 13
        }
      ]
    },
    "alembic": {
      "count": 3,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py",
          "imports": "context",
          "line": 14
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/versions/20250726_add_unified_tier_support.py",
          "imports": "op",
          "line": 13
        },
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/versions/20250710_add_users_table.py",
          "imports": "op",
          "line": 5
        }
      ]
    },
    "sqlalchemy.sql": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/migrations/versions/20250726_add_unified_tier_support.py",
          "imports": "text",
          "line": 15
        }
      ]
    },
    "psycopg.rows": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/db/user_repository.py",
          "imports": "dict_row",
          "line": 14
        }
      ]
    },
    "httpx": {
      "count": 1,
      "examples": [
        {
          "file": "creativity/dream/oneiric_engine/tests/test_api.py",
          "imports": "AsyncClient",
          "line": 12
        }
      ]
    },
    "lukhas_core": {
      "count": 2,
      "examples": [
        {
          "file": "learning/plugin_learning_engine.py",
          "imports": "(",
          "line": 27
        },
        {
          "file": "features/docututor/plugin.py",
          "imports": "(",
          "line": 12
        }
      ]
    },
    "docututor.tutoring_engine.tutor": {
      "count": 1,
      "examples": [
        {
          "file": "learning/tutor_learning_engine.py",
          "imports": "(",
          "line": 9
        }
      ]
    },
    "docututor.symbolic_knowledge_core.knowledge_graph": {
      "count": 1,
      "examples": [
        {
          "file": "learning/tutor_learning_engine.py",
          "imports": "SystemKnowledgeGraph",
          "line": 17
        }
      ]
    },
    "numbers": {
      "count": 1,
      "examples": [
        {
          "file": "learning/_dict_learning.py",
          "imports": "Integral, Real",
          "line": 23
        }
      ]
    },
    "joblib": {
      "count": 1,
      "examples": [
        {
          "file": "learning/_dict_learning.py",
          "imports": "effective_n_jobs",
          "line": 26
        }
      ]
    },
    "symbolic_ai.memoria": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "log_memory",
          "line": 6
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "log_memory",
          "line": 6
        }
      ]
    },
    "symbolic_ai.lukhas_personality": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "adjust_personality, LUKHAS_PERSONALITY",
          "line": 7
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "adjust_personality, LUKHAS_PERSONALITY",
          "line": 7
        }
      ]
    },
    "symbolic_ai.lukhas_emotion": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "analyze_emotion",
          "line": 8
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "analyze_emotion",
          "line": 8
        }
      ]
    },
    "symbolic_ai.lukhas_dreams": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "generate_symbolic_dreams",
          "line": 9
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "generate_symbolic_dreams",
          "line": 9
        }
      ]
    },
    "symbolic_ai.lukhas_guardian": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "ethical_check",
          "line": 10
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "ethical_check",
          "line": 10
        }
      ]
    },
    "symbolic_ai.lukhas_voice": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "speak",
          "line": 11
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "speak",
          "line": 11
        }
      ]
    },
    "symbolic_ai.lukhas_reflector": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "recall_last_interaction",
          "line": 12
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "recall_last_interaction",
          "line": 12
        }
      ]
    },
    "seedra.core.registry": {
      "count": 2,
      "examples": [
        {
          "file": "learning/systems/core_system.py",
          "imports": "get_user_tier",
          "line": 14
        },
        {
          "file": "reasoning/master_loop.py",
          "imports": "get_user_tier",
          "line": 14
        }
      ]
    },
    "symbolic_ai.personas.lukhas_core": {
      "count": 1,
      "examples": [
        {
          "file": "learning/systems/symbolic_voice_loop.py",
          "imports": "lukhas_profile",
          "line": 9
        }
      ]
    },
    "\u039bBot_agi_core": {
      "count": 2,
      "examples": [
        {
          "file": "consciousness/systems/\u039bBot_consciousness_monitor.py",
          "imports": "(",
          "line": 28
        },
        {
          "file": "orchestration/specialized/lambda_bot_orchestrator.py",
          "imports": "(",
          "line": 62
        }
      ]
    },
    "\u039bBot_elite_orchestrator": {
      "count": 1,
      "examples": [
        {
          "file": "consciousness/systems/\u039bBot_consciousness_monitor.py",
          "imports": "\u039bBotEliteOrchestrator",
          "line": 34
        }
      ]
    },
    "scipy.spatial": {
      "count": 1,
      "examples": [
        {
          "file": "features/docututor/memory_evolution/knowledge_adaptation.py",
          "imports": "distance",
          "line": 8
        }
      ]
    },
    "prot2.CORE": {
      "count": 1,
      "examples": [
        {
          "file": "features/autotest/__init__.py",
          "imports": "autotest",
          "line": 17
        }
      ]
    },
    "optimized_memory_item": {
      "count": 2,
      "examples": [
        {
          "file": "tests/test_simple_optimized_memory.py",
          "imports": "OptimizedMemoryItem, create_optimized_memory",
          "line": 15
        },
        {
          "file": "benchmarks/memory/optimized_memory_system_test_script.py",
          "imports": "OptimizedMemoryItem, create_optimized_memory",
          "line": 19
        }
      ]
    },
    "fastapi.testclient": {
      "count": 4,
      "examples": [
        {
          "file": "tests/novel_tasks/test_generalization_v2.py",
          "imports": "TestClient",
          "line": 3
        },
        {
          "file": "tests/novel_tasks/test_generalization.py",
          "imports": "TestClient",
          "line": 4
        },
        {
          "file": "tests/api/test_glyph_exchange.py",
          "imports": "TestClient",
          "line": 2
        }
      ]
    },
    "orchestration_src.brain.EUAwarenessEngine": {
      "count": 1,
      "examples": [
        {
          "file": "tests/compliance/test_eu_awareness_engine.py",
          "imports": "(",
          "line": 12
        }
      ]
    },
    "orchestration_src.brain.GlobalInstitutionalFramework": {
      "count": 1,
      "examples": [
        {
          "file": "tests/compliance/test_global_institutional_framework.py",
          "imports": "(",
          "line": 11
        }
      ]
    },
    "lukhas_unified_grammar.common.base_module": {
      "count": 3,
      "examples": [
        {
          "file": "tests/unified_grammar/test_module_integration.py",
          "imports": "BaseLukhasModule, ModuleState",
          "line": 11
        },
        {
          "file": "tests/unified_grammar/test_grammar_compliance.py",
          "imports": "BaseLukhasModule",
          "line": 13
        },
        {
          "file": "tests/unified_grammar/test_base_module.py",
          "imports": "BaseLukhasModule, ModuleState",
          "line": 36
        }
      ]
    },
    "lukhas_unified_grammar.dream.core": {
      "count": 1,
      "examples": [
        {
          "file": "tests/unified_grammar/test_module_integration.py",
          "imports": "LucasDreamModule",
          "line": 12
        }
      ]
    },
    "lukhas_unified_grammar.bio.core": {
      "count": 1,
      "examples": [
        {
          "file": "tests/unified_grammar/test_module_integration.py",
          "imports": "LucasBioModule",
          "line": 13
        }
      ]
    },
    "lukhas_unified_grammar.voice.core": {
      "count": 1,
      "examples": [
        {
          "file": "tests/unified_grammar/test_module_integration.py",
          "imports": "LucasVoiceModule",
          "line": 14
        }
      ]
    },
    "lukhas_unified_grammar.vision.core": {
      "count": 1,
      "examples": [
        {
          "file": "tests/unified_grammar/test_module_integration.py",
          "imports": "LucasVisionModule",
          "line": 15
        }
      ]
    },
    "prime_oscillator": {
      "count": 1,
      "examples": [
        {
          "file": "tests/runners/run_tests_resilient.py",
          "imports": "PrimeHarmonicOscillator",
          "line": 250
        }
      ]
    },
    "orchestration_src.brain.trace_memoria_logger": {
      "count": 1,
      "examples": [
        {
          "file": "tests/active/test_trace_logger.py",
          "imports": "TraceMemoriaLogger as MemoriaLogger",
          "line": 1
        }
      ]
    },
    "orchestration_src.agi_brain_orchestrator": {
      "count": 1,
      "examples": [
        {
          "file": "tests/hold/orchestration/test_orchestration_plugins.py",
          "imports": "AgiBrainOrchestrator",
          "line": 7
        }
      ]
    },
    "orchestration_src.inter_agent_simulation": {
      "count": 1,
      "examples": [
        {
          "file": "tests/hold/orchestration/test_orchestration.py",
          "imports": "InterAgentSimulation",
          "line": 3
        }
      ]
    },
    "\u039bBot_github_app": {
      "count": 1,
      "examples": [
        {
          "file": "reasoning/\u039bBot_reasoning.py",
          "imports": "\u039bBotTask",
          "line": 70
        }
      ]
    },
    "\u039bBot_pr_security_analyzer": {
      "count": 1,
      "examples": [
        {
          "file": "reasoning/\u039bBot_reasoning.py",
          "imports": "SecurityIssue, PRAnalysisResult",
          "line": 71
        }
      ]
    },
    "\u039bBot_auditor": {
      "count": 1,
      "examples": [
        {
          "file": "reasoning/\u039bBot_reasoning.py",
          "imports": "\u039bBotAuditor",
          "line": 72
        }
      ]
    },
    "croniter": {
      "count": 1,
      "examples": [
        {
          "file": "dashboard/core/test_scheduler.py",
          "imports": "croniter",
          "line": 66
        }
      ]
    },
    "aiohttp": {
      "count": 1,
      "examples": [
        {
          "file": "dashboard/core/test_scheduler.py",
          "imports": "web",
          "line": 68
        }
      ]
    },
    "websockets.server": {
      "count": 1,
      "examples": [
        {
          "file": "dashboard/api/websocket_server.py",
          "imports": "WebSocketServerProtocol",
          "line": 55
        }
      ]
    },
    "brain.abas.abas_core": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/extreme_ethical_testing.py",
          "imports": "ABASSystem, BehaviorRequest, BehaviorType",
          "line": 25
        }
      ]
    },
    "modules.ai_service_integrations": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/extreme_ethical_testing.py",
          "imports": "create_openai_integration, LukhasAIServiceManager",
          "line": 26
        }
      ]
    },
    "modules.lukhas_dreams_advanced": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/extreme_ethical_testing.py",
          "imports": "LukhasAdvancedDreamsSystem",
          "line": 27
        }
      ]
    },
    "scipy.stats": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/ethical_reasoning_system.py",
          "imports": "entropy",
          "line": 40
        }
      ]
    },
    "scipy.optimize": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/ethical_reasoning_system.py",
          "imports": "minimize",
          "line": 41
        }
      ]
    },
    "scipy.spatial.distance": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/ethical_reasoning_system.py",
          "imports": "cosine",
          "line": 49
        }
      ]
    },
    "settings_loader": {
      "count": 2,
      "examples": [
        {
          "file": "ethics/security/emergency_override.py",
          "imports": "get_setting",
          "line": 13
        },
        {
          "file": "orchestration/brain/config/read_settings.py",
          "imports": "(",
          "line": 14
        }
      ]
    },
    "lukhas_governance.policy_manager": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/safety/compliance_hooks.py",
          "imports": "determine_active_regulations, log_active_regulations",
          "line": 21
        }
      ]
    },
    "lukhas_governance.audit_logger": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/safety/compliance_hooks.py",
          "imports": "log_audit_event",
          "line": 22
        }
      ]
    },
    "compliance.ai_compliance": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/safety/integration_bridge.py",
          "imports": "AICompliance",
          "line": 7
        }
      ]
    },
    "backend.security.privacy_manager": {
      "count": 1,
      "examples": [
        {
          "file": "ethics/safety/integration_bridge.py",
          "imports": "PrivacyManager",
          "line": 8
        }
      ]
    },
    "FILES_LIBRARY.voice_modularity_system": {
      "count": 1,
      "examples": [
        {
          "file": "voice/voice_integration.py",
          "imports": "LucasVoiceSystem",
          "line": 11
        }
      ]
    },
    "FILES_LIBRARY.voice_modulator": {
      "count": 1,
      "examples": [
        {
          "file": "voice/voice_integration.py",
          "imports": "VoiceModulator",
          "line": 12
        }
      ]
    },
    "integrations.elevenlabs.elevenlabs_client": {
      "count": 1,
      "examples": [
        {
          "file": "voice/speech_processor.py",
          "imports": "ElevenLabsClient",
          "line": 18
        }
      ]
    },
    "integrations.openai.whisper_client": {
      "count": 1,
      "examples": [
        {
          "file": "voice/speech_processor.py",
          "imports": "WhisperClient",
          "line": 19
        }
      ]
    },
    "orchestration_src.brain.context_analyzer": {
      "count": 1,
      "examples": [
        {
          "file": "voice/modularity_system.py",
          "imports": "ContextAnalyzer",
          "line": 21
        }
      ]
    },
    "orchestration_src.brain.memory.memory_manager": {
      "count": 1,
      "examples": [
        {
          "file": "voice/modularity_system.py",
          "imports": "MemoryManager",
          "line": 23
        }
      ]
    },
    "orchestration_src.brain.subsystems.compliance_engine": {
      "count": 1,
      "examples": [
        {
          "file": "voice/modularity_system.py",
          "imports": "ComplianceEngine",
          "line": 24
        }
      ]
    },
    "lambda_trace_universal": {
      "count": 1,
      "examples": [
        {
          "file": "examples/identity/id_trace_demo.py",
          "imports": "get_tracer",
          "line": 20
        }
      ]
    },
    "orchestration_src.brain.github_vulnerability_manager": {
      "count": 1,
      "examples": [
        {
          "file": "examples/unit_tests/test_batch_efficiency.py",
          "imports": "GitHubVulnerabilityManager, Vulnerability, VulnerabilitySeverity",
          "line": 7
        }
      ]
    },
    "orchestration_src.brain.BIO_SYMBOLIC.bio_orchestrator": {
      "count": 1,
      "examples": [
        {
          "file": "examples/unit_tests/test_integration.py",
          "imports": "BioOrchestrator",
          "line": 18
        }
      ]
    },
    "modules.voice.core": {
      "count": 1,
      "examples": [
        {
          "file": "examples/integration/integration_tests.py",
          "imports": "LucasVoiceModule, VoiceProvider, VoiceEmotion",
          "line": 31
        }
      ]
    },
    "modules.bio.core": {
      "count": 1,
      "examples": [
        {
          "file": "examples/integration/integration_tests.py",
          "imports": "LucasBioModule, BiometricType",
          "line": 32
        }
      ]
    },
    "modules.vision.core": {
      "count": 1,
      "examples": [
        {
          "file": "examples/integration/integration_tests.py",
          "imports": "LucasVisionModule, VisionProvider",
          "line": 34
        }
      ]
    },
    "reflection_layer": {
      "count": 2,
      "examples": [
        {
          "file": "examples/consciousness/demo_reflection_layer.py",
          "imports": "ReflectionLayer, ReflectionType, SymbolicMood",
          "line": 52
        },
        {
          "file": "examples/orchestration/demo_reflection_layer.py",
          "imports": "ReflectionLayer, ReflectionType, SymbolicMood",
          "line": 38
        }
      ]
    },
    "mpl_toolkits.mplot3d": {
      "count": 1,
      "examples": [
        {
          "file": "examples/tests/streamlit_mesh_test.py",
          "imports": "Axes3D",
          "line": 31
        }
      ]
    },
    "backend.core.neuro_symbolic_engine": {
      "count": 1,
      "examples": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "imports": "NeuroSymbolicEngine",
          "line": 13
        }
      ]
    },
    "backend.identity.identity_manager": {
      "count": 1,
      "examples": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "imports": "IdentityManager",
          "line": 14
        }
      ]
    },
    "frontend.interface.adaptive_interface_generator": {
      "count": 1,
      "examples": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "imports": "AdaptiveInterfaceGenerator",
          "line": 15
        }
      ]
    },
    "frontend.multimodal.image_generator": {
      "count": 1,
      "examples": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "imports": "AdaptiveImageGenerator",
          "line": 16
        }
      ]
    },
    "integrations.openai.gpt_client": {
      "count": 1,
      "examples": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "imports": "GPTClient",
          "line": 17
        }
      ]
    },
    "ethical_drift_sentinel": {
      "count": 1,
      "examples": [
        {
          "file": "examples/ethics/ethical_sentinel_demo.py",
          "imports": "(",
          "line": 30
        }
      ]
    },
    "lambda_governor": {
      "count": 1,
      "examples": [
        {
          "file": "examples/ethics/lambda_governor_demo.py",
          "imports": "(",
          "line": 29
        }
      ]
    },
    "vendor_airline_sync": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "sync_airline_preferences",
          "line": 13
        }
      ]
    },
    "vendor_vehicle_sync": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "sync_vehicle_preferences",
          "line": 14
        }
      ]
    },
    "vendor_retail_sync": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "sync_retail_preferences",
          "line": 15
        }
      ]
    },
    "vendor_home_sync": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "sync_home_preferences",
          "line": 16
        }
      ]
    },
    "lukhas_logbook": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "log_sync_event",
          "line": 17
        }
      ]
    },
    "lukhas_registry": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/vendor_sync_orchestrator.py",
          "imports": "register_app_pairing",
          "line": 21
        }
      ]
    },
    "decimal": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/integration/human_in_the_loop_orchestrator.py",
          "imports": "Decimal",
          "line": 54
        }
      ]
    },
    "tokenize": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/specialized/\u039bDependaBoT_robust.py",
          "imports": "TokenError",
          "line": 37
        }
      ]
    },
    "\u039bBot_enhanced_temporal_intelligence": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/specialized/lambda_bot_orchestrator.py",
          "imports": "\u039bBotTemporalIntelligence",
          "line": 58
        }
      ]
    },
    "\u039bBot_proactive_monitor": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/specialized/lambda_bot_orchestrator.py",
          "imports": "\u039bBotProactiveSystemMonitor",
          "line": 59
        }
      ]
    },
    "sdk.core.integration_bridge": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/specialized/orchestrator_emotion_engine.py",
          "imports": "integration_bridge",
          "line": 29
        },
        {
          "file": "orchestration/core_modules/orchestrator_core.py",
          "imports": "integration_bridge",
          "line": 25
        }
      ]
    },
    "GlobalInstitutionalFramework": {
      "count": 6,
      "examples": [
        {
          "file": "orchestration/brain/canadian_awareness_engine.py",
          "imports": "(",
          "line": 47
        },
        {
          "file": "orchestration/brain/us_institutional_awareness_engine.py",
          "imports": "(",
          "line": 43
        },
        {
          "file": "orchestration/brain/research_awareness_engine.py",
          "imports": "(",
          "line": 81
        }
      ]
    },
    "aethios.core.context_analyzer": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/dynamic_adaptive_dashboard.py",
          "imports": "ContextAnalyzer",
          "line": 35
        }
      ]
    },
    "aethios.interface.voice.speech_processor": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/dynamic_adaptive_dashboard.py",
          "imports": "SpeechProcessor",
          "line": 36
        }
      ]
    },
    "aethios.interface.voice.emotional_fingerprinter": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/dynamic_adaptive_dashboard.py",
          "imports": "EmotionalFingerprinter",
          "line": 37
        }
      ]
    },
    "zoneinfo": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/context_analyzer.py",
          "imports": "ZoneInfo",
          "line": 20
        }
      ]
    },
    "integrations.openai.dalle_client": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/adaptive_image_generator.py",
          "imports": "DALLEClient",
          "line": 11
        }
      ]
    },
    "brain.eu_ai_transparency": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/eu_ai_transparency.py",
          "imports": "(",
          "line": 412
        }
      ]
    },
    "token_budget_controller": {
      "count": 6,
      "examples": [
        {
          "file": "orchestration/brain/autonomous_github_manager.py",
          "imports": "TokenBudgetController, APICallContext, CallUrgency, BudgetPriority",
          "line": 35
        },
        {
          "file": "orchestration/brain/lambda_bot_batch_processor.py",
          "imports": "TokenBudgetController, APICallContext, CallUrgency, BudgetPriority",
          "line": 26
        },
        {
          "file": "orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
          "imports": "TokenBudgetController, APICallContext, CallUrgency, BudgetPriority",
          "line": 34
        }
      ]
    },
    "safe_subprocess_executor": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/security_pr_analyzer.py",
          "imports": "safe_subprocess_run",
          "line": 21
        }
      ]
    },
    "github_vulnerability_manager": {
      "count": 4,
      "examples": [
        {
          "file": "orchestration/brain/lambda_bot_batch_processor.py",
          "imports": "GitHubVulnerabilityManager, Vulnerability, VulnerabilitySeverity",
          "line": 27
        },
        {
          "file": "orchestration/brain/autonomous_system.py",
          "imports": "GitHubVulnerabilityManager",
          "line": 23
        },
        {
          "file": "orchestration/brain/lambdabot_autonomous_fixer.py",
          "imports": "GitHubVulnerabilityManager, Vulnerability, VulnerabilitySeverity",
          "line": 38
        }
      ]
    },
    "lambda_bot_batch_processor": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/autonomous_system.py",
          "imports": "BatchProcessor, BatchableIssue",
          "line": 24
        }
      ]
    },
    "brain.main_agi_bot": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/cognitive_core.py",
          "imports": "EnhancedAGIBot",
          "line": 902
        },
        {
          "file": "orchestration/brain/main_bot.py",
          "imports": "EnhancedAGIBot",
          "line": 472
        }
      ]
    },
    "security_pr_analyzer": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/pr_security_review_task.py",
          "imports": "SecurityScanner, PRAnalyzer, SecurityIssue",
          "line": 25
        }
      ]
    },
    "lambdabot_autonomous_fixer": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/pr_security_review_task.py",
          "imports": "\u039bBotAutonomousVulnerabilityFixer",
          "line": 26
        }
      ]
    },
    "huggingface_hub": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "constants",
          "line": 35
        }
      ]
    },
    "huggingface_hub.errors": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "InferenceTimeoutError",
          "line": 36
        }
      ]
    },
    "huggingface_hub.inference._common": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "(",
          "line": 37
        }
      ]
    },
    "huggingface_hub.inference._generated.types": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "(",
          "line": 55
        }
      ]
    },
    "huggingface_hub.inference._providers": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "PROVIDER_T, HFInferenceTask, get_provider_helper",
          "line": 95
        }
      ]
    },
    "huggingface_hub.utils": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "build_hf_headers, get_session, hf_raise_for_status",
          "line": 96
        }
      ]
    },
    "huggingface_hub.utils._auth": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "get_token",
          "line": 97
        }
      ]
    },
    "huggingface_hub.utils._deprecation": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/net/async_client.py",
          "imports": "_deprecate_method",
          "line": 98
        }
      ]
    },
    "memory_log_filter": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/context/context_sync.py",
          "imports": "summarize_recent, filter_by_tag, filter_by_date_range",
          "line": 18
        }
      ]
    },
    "lukhas_reflection_gpt": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/spine/unified_self.py",
          "imports": "generate_gpt_reflection",
          "line": 25
        }
      ]
    },
    "emotion_mapper_alt": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/spine/healix_mapper.py",
          "imports": "EmotionMapper",
          "line": 29
        }
      ]
    },
    "symbolic_ai.lukhas_reflection_gpt": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/output/report_generator.py",
          "imports": "generate_gpt_reflection",
          "line": 13
        }
      ]
    },
    "symbolic_ai.lukhas_unified_self": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/output/report_generator.py",
          "imports": "run as unified_self_run",
          "line": 14
        }
      ]
    },
    "brain.metacognition": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/meta/cognition/orchestrator.py",
          "imports": "MetaCognitiveOrchestrator",
          "line": 388
        }
      ]
    },
    "brain.attention": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/meta/cognition/orchestrator.py",
          "imports": "QuantumInspiredAttention",
          "line": 389
        }
      ]
    },
    "brain.reasoning": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/meta/cognition/orchestrator.py",
          "imports": "CausalReasoningModule, SymbolicEngine",
          "line": 390
        }
      ]
    },
    "brain.compliance": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/compliance/ethical_engine.py",
          "imports": "ComplianceEngine",
          "line": 159
        }
      ]
    },
    "modules.dissonance_detector": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/symbolic_ai/orchestrator.py",
          "imports": "detect_dissonance",
          "line": 9
        }
      ]
    },
    "modules.intent_inference": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/symbolic_ai/orchestrator.py",
          "imports": "infer_intent",
          "line": 10
        }
      ]
    },
    "modules.dream_generator": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/symbolic_ai/orchestrator.py",
          "imports": "generate_dream",
          "line": 11
        }
      ]
    },
    "modules.episodic_recall": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/symbolic_ai/orchestrator.py",
          "imports": "recall",
          "line": 12
        }
      ]
    },
    "dream_log": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/rem/sleep_cycle.py",
          "imports": "log_dream",
          "line": 18
        }
      ]
    },
    "utils.trace_logger": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
          "imports": "log_symbolic_trace",
          "line": 24
        },
        {
          "file": "orchestration/brain/neuro_symbolic/governance/symbolic_action_prrotocol.py",
          "imports": "log_symbolic_trace",
          "line": 54
        }
      ]
    },
    "lukhas_data.consent_manager": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
          "imports": "ConsentTierManager",
          "line": 25
        },
        {
          "file": "orchestration/brain/neuro_symbolic/governance/symbolic_action_prrotocol.py",
          "imports": "ConsentTierManager",
          "line": 55
        }
      ]
    },
    "qiskit.quantum_info": {
      "count": 3,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/the_oscillator.py",
          "imports": "Statevector",
          "line": 10
        },
        {
          "file": "orchestration/monitoring/the_oscillator.py",
          "imports": "Statevector",
          "line": 10
        },
        {
          "file": "quantum/quantum_oscillator.py",
          "imports": "Statevector",
          "line": 39
        }
      ]
    },
    "scipy.special": {
      "count": 3,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/the_oscillator.py",
          "imports": "softmax",
          "line": 11
        },
        {
          "file": "orchestration/monitoring/the_oscillator.py",
          "imports": "softmax",
          "line": 11
        },
        {
          "file": "quantum/quantum_oscillator.py",
          "imports": "softmax",
          "line": 40
        }
      ]
    },
    "governance.ethics.EthicsGuardian": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/core.py",
          "imports": "EthicsGuardian as EthicsCore",
          "line": 64
        }
      ]
    },
    "seedra_core.guardian_orchestrator": {
      "count": 3,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/orchestrator_core.py",
          "imports": "GuardianEngine",
          "line": 28
        },
        {
          "file": "orchestration/guardian/guardian_cli_test.py",
          "imports": "GuardianEngine",
          "line": 28
        },
        {
          "file": "orchestration/core_modules/orchestrator_core_oxn.py",
          "imports": "GuardianEngine",
          "line": 21
        }
      ]
    },
    "seedra_core.vault_unlock_chain": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/orchestrator_core.py",
          "imports": "VaultUnlockChain",
          "line": 29
        },
        {
          "file": "orchestration/core_modules/orchestrator_core_oxn.py",
          "imports": "VaultUnlockChain",
          "line": 22
        }
      ]
    },
    "seedra_core.ipfs_relayer": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/orchestrator_core.py",
          "imports": "AnchorBuilder",
          "line": 30
        },
        {
          "file": "orchestration/core_modules/orchestrator_core_oxn.py",
          "imports": "AnchorBuilder",
          "line": 23
        }
      ]
    },
    "nodes.ethics_node": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/orchestrator_core.py",
          "imports": "EthicsNode",
          "line": 31
        },
        {
          "file": "orchestration/core_modules/orchestrator_core_oxn.py",
          "imports": "EthicsNode",
          "line": 24
        }
      ]
    },
    "lukhas_governance.compliance_hooks": {
      "count": 2,
      "examples": [
        {
          "file": "orchestration/brain/orchestration/emotional_oscillator.py",
          "imports": "compliance_drift_detect",
          "line": 24
        },
        {
          "file": "orchestration/monitoring/emotional_oscillator.py",
          "imports": "compliance_drift_detect",
          "line": 24
        }
      ]
    },
    "neural_intelligence_main": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/neural/neural_intelligence_api.py",
          "imports": "LukhasNeuralIntelligence",
          "line": 18
        }
      ]
    },
    "cognitive_core": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/brain/neural/neural_intelligence_main.py",
          "imports": "NeuralIntelligenceSystem",
          "line": 16
        }
      ]
    },
    "seedra_docs.multisig_validator": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/guardian/guardian_cli_test.py",
          "imports": "MultisigValidator",
          "line": 29
        }
      ]
    },
    "MODULES_GOLDEN.core.registry": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/core_modules/orchestrator_core.py",
          "imports": "core_registry",
          "line": 23
        }
      ]
    },
    "MODULES_GOLDEN.common.base_module": {
      "count": 1,
      "examples": [
        {
          "file": "orchestration/core_modules/orchestrator_core.py",
          "imports": "SymbolicLogger",
          "line": 24
        }
      ]
    },
    "copilot_file_moves": {
      "count": 1,
      "examples": [
        {
          "file": ".vscode/vscode-archive/files_moves_2.py",
          "imports": "file_moves",
          "line": 4
        }
      ]
    },
    "concurrent": {
      "count": 1,
      "examples": [
        {
          "file": "interfaces/api/v1/grpc/server.py",
          "imports": "futures",
          "line": 3
        }
      ]
    },
    "google.protobuf": {
      "count": 1,
      "examples": [
        {
          "file": "interfaces/api/v1/grpc/pb2.py",
          "imports": "message, timestamp_pb2",
          "line": 9
        }
      ]
    },
    "orchestration_src.dast.api": {
      "count": 1,
      "examples": [
        {
          "file": "interfaces/api/v1/rest/app.py",
          "imports": "API_PREFIX",
          "line": 25
        }
      ]
    },
    "fastapi.security": {
      "count": 1,
      "examples": [
        {
          "file": "interfaces/api/v1/rest/middleware.py",
          "imports": "HTTPBearer, HTTPAuthorizationCredentials",
          "line": 29
        }
      ]
    },
    "jose": {
      "count": 1,
      "examples": [
        {
          "file": "interfaces/api/v1/rest/middleware.py",
          "imports": "JWTError, jwt",
          "line": 30
        }
      ]
    },
    "lattice_crypto": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/post_quantum_crypto.py",
          "imports": "CRYSTALS_Kyber, CRYSTALS_Dilithium",
          "line": 36
        }
      ]
    },
    "code_crypto": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/post_quantum_crypto.py",
          "imports": "Classic_McEliece",
          "line": 37
        }
      ]
    },
    "hash_crypto": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/post_quantum_crypto.py",
          "imports": "SPHINCS_Plus",
          "line": 38
        }
      ]
    },
    "zkp_crypto": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/post_quantum_crypto.py",
          "imports": "ZKProof, IdentityProof",
          "line": 39
        }
      ]
    },
    "quantum_timestamp": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/post_quantum_crypto.py",
          "imports": "QuantumVerifiableTimestamp",
          "line": 40
        }
      ]
    },
    "distributed": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/distributed_quantum_architecture.py",
          "imports": "Client, as_completed",
          "line": 30
        }
      ]
    },
    "eth_keys": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/safe_blockchain.py",
          "imports": "keys",
          "line": 40
        }
      ]
    },
    "rich.console": {
      "count": 2,
      "examples": [
        {
          "file": "quantum/quantum_bio_bulletproof_system.py",
          "imports": "Console",
          "line": 52
        },
        {
          "file": "quantum/systems/bio_integration/bulletproof_system.py",
          "imports": "Console",
          "line": 52
        }
      ]
    },
    "rich.progress": {
      "count": 2,
      "examples": [
        {
          "file": "quantum/quantum_bio_bulletproof_system.py",
          "imports": "Progress, SpinnerColumn, TextColumn, BarColumn",
          "line": 53
        },
        {
          "file": "quantum/systems/bio_integration/bulletproof_system.py",
          "imports": "Progress, SpinnerColumn, TextColumn, BarColumn",
          "line": 53
        }
      ]
    },
    "rich.panel": {
      "count": 2,
      "examples": [
        {
          "file": "quantum/quantum_bio_bulletproof_system.py",
          "imports": "Panel",
          "line": 54
        },
        {
          "file": "quantum/systems/bio_integration/bulletproof_system.py",
          "imports": "Panel",
          "line": 54
        }
      ]
    },
    "zksnark": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/privacy/zero_knowledge_system.py",
          "imports": "ZkSnark, CircuitGenerator",
          "line": 36
        }
      ]
    },
    "bulletproofs": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/privacy/zero_knowledge_system.py",
          "imports": "BulletproofSystem",
          "line": 37
        }
      ]
    },
    "rich.table": {
      "count": 1,
      "examples": [
        {
          "file": "quantum/systems/bio_integration/bulletproof_system.py",
          "imports": "Table",
          "line": 55
        }
      ]
    }
  },
  "fix_mappings": {
    "import openai": "from core.router.llm_multiverse_router import openai"
  }
}