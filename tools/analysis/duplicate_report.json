{
  "duplicate_functions": {
    "0:None": [
      [
        "./tools/radical_simplifier.py",
        "main"
      ],
      [
        "./tools/gen_audit_logger_check.py",
        "simulate_audit_log_entry"
      ],
      [
        "./tools/gen_audit_logger_check.py",
        "update_manifest_with_audit_hash"
      ],
      [
        "./tools/gen_audit_logger_check.py",
        "create_shortcut_trigger"
      ],
      [
        "./tools/speak.py",
        "main"
      ],
      [
        "./tools/manifesto.py",
        "main"
      ],
      [
        "./tools/gen_compliance_drift_scan.py",
        "simulate_compliance_drift"
      ],
      [
        "./tools/about.py",
        "main"
      ],
      [
        "./tools/tier.py",
        "main"
      ],
      [
        "./tools/ethics.py",
        "main"
      ],
      [
        "./tools/gen_module_header.py",
        "generate_module_header"
      ],
      [
        "./tools/command_registry.py",
        "list_commands"
      ],
      [
        "./tools/generate_html_post.py",
        "load_latest_entry"
      ],
      [
        "./tools/analysis/PWM_OPERATIONAL_SUMMARY.py",
        "load_analysis_reports"
      ],
      [
        "./tools/analysis/PWM_OPERATIONAL_SUMMARY.py",
        "main"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "main"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_MISSING_COMPONENTS_ANALYZER.py",
        "analyze_missing_components"
      ],
      [
        "./tools/analysis/PWM_MISSING_COMPONENTS_ANALYZER.py",
        "suggest_cherry_pick_strategy"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "main"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "main"
      ],
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "main"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "main"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "main"
      ],
      [
        "./tools/scripts/save_claude_context.py",
        "get_claude_context"
      ],
      [
        "./tools/scripts/save_claude_context.py",
        "save_context_manually"
      ],
      [
        "./tools/scripts/save_claude_context.py",
        "create_context_script"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "main"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "main"
      ],
      [
        "./tools/dev/INTEGRATION_ACHIEVEMENT_REPORT.py",
        "generate_integration_report"
      ],
      [
        "./bio/__init__.py",
        "__dir__"
      ],
      [
        "./bio/core/orchestration_compatibility.py",
        "setup_import_redirects"
      ],
      [
        "./trace/drift_dashboard_visual.py",
        "initialize_dashboard"
      ],
      [
        "./trace/drift_dashboard_visual.py",
        "main"
      ],
      [
        "./trace/entropy/radar.py",
        "main"
      ],
      [
        "./trace/diagnostics/entropy_radar.py",
        "main"
      ],
      [
        "./core/apply_api_fixes.py",
        "apply_fixes"
      ],
      [
        "./core/actor_supervision_integration.py",
        "patch_actor_system_for_supervision"
      ],
      [
        "./core/actor_supervision_integration.py",
        "patch_actor_for_supervision"
      ],
      [
        "./core/resource_optimization_integration.py",
        "energy_aware_memory_compression"
      ],
      [
        "./core/resource_optimization_integration.py",
        "resource_aware_communication"
      ],
      [
        "./core/distributed_tracing.py",
        "demo_distributed_tracing"
      ],
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/api_diff_analyzer.py",
        "main"
      ],
      [
        "./core/symbolic_boot.py",
        "main"
      ],
      [
        "./core/__init__.py",
        "__dir__"
      ],
      [
        "./core/practical_optimizations.py",
        "wrapper"
      ],
      [
        "./core/notion_sync.py",
        "run_legacy_streamlit_mode"
      ],
      [
        "./core/notion_sync.py",
        "print_banner"
      ],
      [
        "./core/notion_sync.py",
        "test_system"
      ],
      [
        "./core/notion_sync.py",
        "main"
      ],
      [
        "./core/notion_sync.py",
        "schedule_sync"
      ],
      [
        "./core/validation_script_fixes.py",
        "fix_validation_script"
      ],
      [
        "./core/validation_script_fixes.py",
        "fix_efficient_communication"
      ],
      [
        "./core/validation_script_fixes.py",
        "main"
      ],
      [
        "./core/targeted_api_fixes.py",
        "apply_actor_ref_fixes"
      ],
      [
        "./core/targeted_api_fixes.py",
        "fix_communication_fabric"
      ],
      [
        "./core/targeted_api_fixes.py",
        "fix_integrated_system"
      ],
      [
        "./core/targeted_api_fixes.py",
        "update_validation_script"
      ],
      [
        "./core/targeted_api_fixes.py",
        "main"
      ],
      [
        "./core/identity_integration.py",
        "wrapper"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "sync_wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_srd"
      ],
      [
        "./core/audit/audit_decorators.py",
        "sync_wrapper"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "sync_wrapper"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "wrapper"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "register_core_nodes"
      ],
      [
        "./core/services/personality/empathy.py",
        "display_visual_traits"
      ],
      [
        "./core/interfaces/cli.py",
        "display_mood"
      ],
      [
        "./core/interfaces/cli.py",
        "display_flashback_preview"
      ],
      [
        "./core/interfaces/cli.py",
        "display_system_status"
      ],
      [
        "./core/interfaces/cli.py",
        "voice_welcome"
      ],
      [
        "./core/interfaces/cli.py",
        "launch"
      ],
      [
        "./core/interfaces/launcher.py",
        "launch_lukhas"
      ],
      [
        "./core/interfaces/main.py",
        "symbolic_intro"
      ],
      [
        "./core/interfaces/main.py",
        "symbolic_menu"
      ],
      [
        "./core/interfaces/main.py",
        "launch_gui"
      ],
      [
        "./core/interfaces/main.py",
        "launch_cli"
      ],
      [
        "./core/interfaces/main.py",
        "launch_socket"
      ],
      [
        "./core/interfaces/main.py",
        "launch_narration"
      ],
      [
        "./core/interfaces/main.py",
        "main"
      ],
      [
        "./core/interfaces/web_formatter.py",
        "load_latest_expression"
      ],
      [
        "./core/interfaces/ui/components/audio_exporter.py",
        "export_as_text_narration"
      ],
      [
        "./core/interfaces/tools/research/research_dashboard.py",
        "log_session_end"
      ],
      [
        "./core/interfaces/tools/dao/dao_vote.py",
        "main"
      ],
      [
        "./core/interfaces/tools/dao/dao_propose.py",
        "main"
      ],
      [
        "./core/interfaces/tools/cli/command_registry.py",
        "list_commands"
      ],
      [
        "./core/interfaces/nias/generate_nias_docs.py",
        "generate_nias_documentation"
      ],
      [
        "./core/interfaces/nias/generate_nias_docs.py",
        "start_documentation_server"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "generate_dream_digest"
      ],
      [
        "./core/interfaces/logic/agent_core.py",
        "run_agent_simulation"
      ],
      [
        "./core/interfaces/voice/listen.py",
        "loop_symbolic_conversation"
      ],
      [
        "./core/interfaces/voice/edge_voice.py",
        "load_config"
      ],
      [
        "./core/interfaces/api/v1/rest/routers/process.py",
        "get_lukhas_core"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/dream_narrator_queue.py",
        "extract_narratable_dreams"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/replay_heatmap.py",
        "load_replay_data"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/generate_payload_cli.py",
        "generate_payload"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/narration_controller.py",
        "load_user_settings"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/narration_controller.py",
        "fetch_narration_entries"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/narration_controller.py",
        "print_debug_narration_summary"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast_core.py",
        "get_current_tags"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/launcher.py",
        "startup_sequence"
      ],
      [
        "./core/interfaces/as_agent/news_and_social/s_dispatcher.py",
        "load_pending_posts"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_all_providers"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "wrapper"
      ],
      [
        "./core/hub_services/service_registry.py",
        "create_memory_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "create_learning_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "create_consciousness_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "create_identity_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "create_bio_optimizer"
      ],
      [
        "./memory/services.py",
        "create_memory_service"
      ],
      [
        "./memory/connection_visualizer.py",
        "print_data_flow_diagram"
      ],
      [
        "./memory/connection_visualizer.py",
        "print_integration_interfaces"
      ],
      [
        "./memory/connection_visualizer.py",
        "print_implementation_checklist"
      ],
      [
        "./memory/connection_visualizer.py",
        "main"
      ],
      [
        "./memory/memory_optimization.py",
        "clear_empty_collections"
      ],
      [
        "./memory/memory_optimization.py",
        "force_gc"
      ],
      [
        "./memory/memory_optimization.py",
        "compress_large_objects"
      ],
      [
        "./memory/dreamseed_example.py",
        "demonstrate_dreamseed_integration"
      ],
      [
        "./memory/dreamseed_example.py",
        "demonstrate_safeguard_edge_cases"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "main"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "main"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "main"
      ],
      [
        "./memory/adapters/creativity_adapter.py",
        "get_emotional_modulator"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "main"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "register_with_fold_engine"
      ],
      [
        "./memory/systems/memory_helix.py",
        "__validate_module__"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "demo_resonance_system"
      ],
      [
        "./memory/systems/pin_memory.py",
        "do_one_step"
      ],
      [
        "./memory/systems/tier_system.py",
        "symbolic_access_test"
      ],
      [
        "./memory/systems/tier_system.py",
        "wrapper"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_name"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "replay_dreams_with_current_state"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "display_visual_traits"
      ],
      [
        "./memory/systems/memoria/reflector.py",
        "run_dream_reflection_cycle"
      ],
      [
        "./memory/systems/memoria/dream_cron.py",
        "run_lukhas_symbolic_dream_script"
      ],
      [
        "./memory/systems/memoria/dream_cron.py",
        "main_dream_scheduler_loop"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "main"
      ],
      [
        "./identity/qrg_integration.py",
        "demo_qrg_integration"
      ],
      [
        "./identity/__init__.py",
        "__dir__"
      ],
      [
        "./identity/qrg_showcase.py",
        "main"
      ],
      [
        "./identity/deployment_package.py",
        "main"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "run_100_percent_coverage_suite"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "failing_method"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "get_entropy_status"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "get_trust_scores"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "get_sync_status"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "background_health_monitor"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "handle_dashboard_connect"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "handle_dashboard_disconnect"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "handle_health_snapshot_request"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "start_background_monitor"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "main"
      ],
      [
        "./identity/api/__init__.py",
        "id_api_info_endpoint"
      ],
      [
        "./identity/api/__init__.py",
        "health_check_endpoint_func"
      ],
      [
        "./identity/api/__init__.py",
        "log_incoming_request_info"
      ],
      [
        "./identity/api/api.py",
        "Field"
      ],
      [
        "./identity/api/onboarding_api.py",
        "start_enhanced_onboarding_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "progress_onboarding_stage_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "complete_enhanced_onboarding_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "get_personality_templates_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "get_cultural_templates_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "get_symbolic_suggestions_endpoint"
      ],
      [
        "./identity/api/auth/onboarding.py",
        "start_onboarding_endpoint"
      ],
      [
        "./identity/api/auth/onboarding.py",
        "setup_user_tier_endpoint"
      ],
      [
        "./identity/api/auth/onboarding.py",
        "collect_user_consent_endpoint"
      ],
      [
        "./identity/api/auth/onboarding.py",
        "complete_onboarding_process_endpoint"
      ],
      [
        "./identity/api/auth/flows.py",
        "register_user_endpoint"
      ],
      [
        "./identity/api/auth/flows.py",
        "login_user_endpoint"
      ],
      [
        "./identity/api/auth/flows.py",
        "logout_user_endpoint"
      ],
      [
        "./identity/api/auth/flows.py",
        "verify_authentication_token_endpoint"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "generate_lambda_id_route"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "validate_lambda_id_route"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "calculate_entropy_route"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "get_tier_information_route"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "request_tier_upgrade_route"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "health_check_route"
      ],
      [
        "./config/read_settings.py",
        "display_settings"
      ],
      [
        "./creativity/services.py",
        "create_creativity_service"
      ],
      [
        "./creativity/quantum_creative_types.py",
        "__validate_module__"
      ],
      [
        "./creativity/__init__.py",
        "__dir__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "__validate_module__"
      ],
      [
        "./creativity/personality/narrative_engine_dream_narrator_queue.py",
        "load_dreams"
      ],
      [
        "./creativity/personality/narrative_engine_dream_narrator_queue.py",
        "run_narration_queue_builder"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "main"
      ],
      [
        "./bridge/model_communication_engine.py",
        "disable_sdpa"
      ],
      [
        "./learning/services.py",
        "create_learning_service"
      ],
      [
        "./learning/__init__.py",
        "__dir__"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "demo_meta_learning"
      ],
      [
        "./learning/enhancement_engine.py",
        "main"
      ],
      [
        "./learning/tutor_learning_engine.py",
        "skg"
      ],
      [
        "./learning/tutor_learning_engine.py",
        "sample_config"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "demo_meta_learning"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "main"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "listen_and_log_feedback"
      ],
      [
        "./consciousness/services.py",
        "create_consciousness_service"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "recharge_loop"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidation_loop"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/__init__.py",
        "__dir__"
      ],
      [
        "./consciousness/dream_bridge.py",
        "register_with_hub"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "__consciousness_bootstrap__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/core/engine.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "wrapper"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "main"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "create_dream_reflection_loop"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "main"
      ],
      [
        "./tests/test_main_server.py",
        "mock_config"
      ],
      [
        "./tests/security/test_red_team_integration.py",
        "test_red_team_framework_integration"
      ],
      [
        "./tests/security/test_red_team_integration.py",
        "main"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "run_compliance_tests"
      ],
      [
        "./tests/governance/test_compliance_integration.py",
        "test_imports"
      ],
      [
        "./compliance/compliance_digest.py",
        "load_emergency_logs"
      ],
      [
        "./compliance/compliance_digest.py",
        "generate_digest"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "create_reasoning_loop"
      ],
      [
        "./reasoning/dashboard/trace_dashboard.py",
        "render_dashboard"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "get_srd"
      ],
      [
        "./ethics/tier_enforcer.py",
        "collapse_kernel"
      ],
      [
        "./ethics/tier_enforcer.py",
        "wrapper"
      ],
      [
        "./ethics/audit_ethics_monitor.py",
        "main"
      ],
      [
        "./ethics/redteam_sim.py",
        "main"
      ],
      [
        "./ethics/meg_guard.py",
        "demo_meg_usage"
      ],
      [
        "./ethics/meg_guard.py",
        "sync_wrapper"
      ],
      [
        "./ethics/ethics.py",
        "main"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "patch_openai_with_meg"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "unpatch_openai"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "_generate"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "_complete"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "create"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "main"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "main"
      ],
      [
        "./ethics/sentinel/ethical_sentinel_dashboard.py",
        "initialize_sentinel"
      ],
      [
        "./ethics/safety/compliance_digest.py",
        "load_emergency_logs"
      ],
      [
        "./ethics/safety/compliance_digest.py",
        "generate_digest"
      ],
      [
        "./voice/dream_voice_pipeline.py",
        "run_dream_voice_pipeline"
      ],
      [
        "./voice/interfaces/eleven_tts.py",
        "main"
      ],
      [
        "./orchestration/__init__.py",
        "__dir__"
      ],
      [
        "./orchestration/learning_initializer.py",
        "_create_learning_service"
      ],
      [
        "./orchestration/learning_initializer.py",
        "initialize_learning_service"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "test_module_imports"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "test_core_classes"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "test_basic_functionality"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "check_design_compliance"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "main"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "main"
      ],
      [
        "./orchestration/brain/pr_security_review_github_actions.py",
        "parse_args"
      ],
      [
        "./orchestration/brain/pr_security_review_github_actions.py",
        "main"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "consolidation_loop"
      ],
      [
        "./orchestration/brain/monitor.py",
        "monitor_agi_system"
      ],
      [
        "./orchestration/brain/validate_pr_security_review.py",
        "validate_pr_security_review"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "integrate_transparency_with_cognitive_core"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "main"
      ],
      [
        "./orchestration/brain/pr_security_review_starter.py",
        "run_security_review"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "main"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "main"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "main"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "main"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "main"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "main"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "main"
      ],
      [
        "./orchestration/brain/vulnerability_dashboard.py",
        "main"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "main"
      ],
      [
        "./orchestration/brain/expression.py",
        "load_latest_flashback"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "load_traits"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "load_meta_reflections"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "run"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "get_cpu_usage"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "check_vscode_cpu"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "run_compliance_scan"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "main"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "main"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "quick_test"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "main"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "goal_execution_loop"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "prompt_consent"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "timestamp"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "prompt_emotion"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "main"
      ],
      [
        "./orchestration/brain/spine/emotion_trend_tracker.py",
        "analyze_emotion_trends"
      ],
      [
        "./orchestration/brain/spine/self_reflect_cron.py",
        "run_reflection"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "load_all_traits"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "load_all_reflections"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "run"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "blend_emotions"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "summarize_emotions"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "default_traits"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "load_traits"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "reset_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "export_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "load_all_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "run"
      ],
      [
        "./orchestration/brain/spine/hash.py",
        "get_manifest_hash"
      ],
      [
        "./orchestration/brain/spine/hash.py",
        "get_license_hash"
      ],
      [
        "./orchestration/brain/spine/hash.py",
        "get_symbolic_fingerprint"
      ],
      [
        "./orchestration/brain/spine/hash.py",
        "main"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "export_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "load_all_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "run"
      ],
      [
        "./orchestration/brain/config/paths.py",
        "ensure_paths"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "print_all_settings"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "preview_defaults"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "list_all_keys"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "consolidation_loop"
      ],
      [
        "./orchestration/brain/output/report_generator.py",
        "load_previous_reflections"
      ],
      [
        "./orchestration/brain/output/report_generator.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/rem/generate_dream.py",
        "generate_dream"
      ],
      [
        "./orchestration/brain/rem/generate_dream.py",
        "main"
      ],
      [
        "./orchestration/brain/rem/dream_stats.py",
        "load_dreams"
      ],
      [
        "./orchestration/brain/rem/dream_stats.py",
        "summarize_dreams"
      ],
      [
        "./orchestration/brain/rem/generate_dream_data.py",
        "generate_dream"
      ],
      [
        "./orchestration/brain/rem/generate_dream_data.py",
        "main"
      ],
      [
        "./orchestration/brain/rem/rem.py",
        "run_rem_cycle"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "human_review_required"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "oscillator_scope"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "optimize_gc"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/dream_engine/dream_replay_cli.py",
        "run_cli"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "run_narrator_queue"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "run_voice_narrator"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "inject_test_dream"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "run_all"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "main"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_warn_deprecated"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "fix_orchestration_imports"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "wrapper"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "human_review_required"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "oscillator_scope"
      ],
      [
        "./governance/common.py",
        "wrapper"
      ],
      [
        "./api/core/controllers.py",
        "_get_learning_service"
      ],
      [
        "./api/core/controllers.py",
        "ethics_assess_action_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "ethics_check_compliance_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "memory_store_item_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "memory_search_items_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "creativity_generate_content_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "creativity_synthesize_dream_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "consciousness_process_awareness_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "consciousness_perform_introspection_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "consciousness_get_state_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "learning_learn_from_data_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "learning_adapt_behavior_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "quantum_perform_computation_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "quantum_create_entanglement_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "system_health_check_endpoint"
      ],
      [
        "./api/core/controllers.py",
        "system_api_info_endpoint"
      ],
      [
        "./symbolic/__init__.py",
        "__dir__"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "log_bio_state"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "log_any_symbol"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "get_system_status"
      ],
      [
        "./symbolic/foundry/__init__.py",
        "get_module_status"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "main"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "main"
      ],
      [
        "./symbolic/features/security/main.py",
        "demo"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "sample_redaction_scenario"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_dmb"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_srd"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "instrument_reasoning"
      ],
      [
        "./dream/dream_stats.py",
        "load_dreams"
      ],
      [
        "./dream/dream_stats.py",
        "summarize_dreams"
      ],
      [
        "./dream/visualization.py",
        "get_visualization"
      ],
      [
        "./dream/commerce_api.py",
        "get_commerce_api"
      ],
      [
        "./dream/visualization/dream_viewer.py",
        "load_dreams"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "main"
      ],
      [
        "./dream/tools/run_dream_analysis.py",
        "main"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "main"
      ],
      [
        "./dream/core/dream_cli.py",
        "run_narrator_queue"
      ],
      [
        "./dream/core/dream_cli.py",
        "run_voice_narrator"
      ],
      [
        "./dream/core/dream_cli.py",
        "inject_test_dream"
      ],
      [
        "./dream/core/dream_cli.py",
        "run_all"
      ],
      [
        "./dream/core/dream_cli.py",
        "main"
      ],
      [
        "./dream/core/dream_injector.py",
        "run_batch_validation"
      ],
      [
        "./dream/core/dream_injector.py",
        "record_dream_message"
      ],
      [
        "./dream/core/dream_viewer.py",
        "load_dreams"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "index"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "interpret_dream"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "get_dream_engine"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "main"
      ],
      [
        "./emotion/__init__.py",
        "__dir__"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "main"
      ],
      [
        "./quantum/validator.py",
        "__validate_module__"
      ],
      [
        "./quantum/system_orchestrator.py",
        "__validate_module__"
      ],
      [
        "./quantum/web_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/coordinator.py",
        "__validate_module__"
      ],
      [
        "./quantum/service.py",
        "__validate_module__"
      ],
      [
        "./quantum/system.py",
        "__validate_module__"
      ],
      [
        "./quantum/neural_symbolic_processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/metadata.py",
        "__validate_module__"
      ],
      [
        "./quantum/ui_generator.py",
        "__validate_module__"
      ],
      [
        "./quantum/awareness_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/voice_enhancer.py",
        "__validate_module__"
      ],
      [
        "./quantum/healix_mapper.py",
        "__validate_module__"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio.py",
        "__validate_module__"
      ],
      [
        "./quantum/dream_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/oscillator.py",
        "__validate_module__"
      ],
      [
        "./quantum/consensus_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/__init__.py",
        "__dir__"
      ],
      [
        "./quantum/processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_components.py",
        "__validate_module__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__validate_module__"
      ],
      [
        "./quantum/integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__validate_module__"
      ],
      [
        "./quantum/vault_manager.py",
        "main"
      ],
      [
        "./quantum/vault_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/certificate_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/setup_api_keys.py",
        "setup_api_keys"
      ],
      [
        "./quantum/setup_api_keys.py",
        "verify_setup"
      ],
      [
        "./quantum/setup_api_keys.py",
        "__validate_module__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__validate_module__"
      ],
      [
        "./quantum/creative_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/layer.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__validate_module__"
      ],
      [
        "./quantum/safe_blockchain.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing_core.py",
        "__validate_module__"
      ],
      [
        "./quantum/main.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__validate_module__"
      ],
      [
        "./quantum/api_manager.py",
        "demo_quantum_api_management"
      ],
      [
        "./quantum/api_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/entanglement.py",
        "__validate_module__"
      ],
      [
        "./quantum/phase_quantum_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/engine.py",
        "__quantum_bootstrap__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/neural_symbolic_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/privacy/zero_knowledge_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "human_review_required"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/utils/add_module_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "main"
      ],
      [
        "./quantum/utils/fix_proper_ascii.py",
        "main"
      ],
      [
        "./quantum/utils/fix_ascii_headers.py",
        "main"
      ],
      [
        "./quantum/utils/regenerate_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/fix_module_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_compliant_headers.py",
        "main"
      ],
      [
        "./quantum/utils/add_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "run_cost_analysis"
      ],
      [
        "./quantum/utils/add_template_reference.py",
        "main"
      ],
      [
        "./quantum/cloud/__init__.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/bio_integration/awareness/quantum_bio.py",
        "__validate_module__"
      ]
    ],
    "1:None": [
      [
        "./tools/radical_simplifier.py",
        "__init__"
      ],
      [
        "./tools/session_logger.py",
        "is_access_allowed"
      ],
      [
        "./tools/generate_lukhas_ecosystem_documentation.py",
        "__init__"
      ],
      [
        "./tools/tier.py",
        "print_tier"
      ],
      [
        "./tools/enhanced_ecosystem_documentation.py",
        "__init__"
      ],
      [
        "./tools/generate_html_post.py",
        "generate_html"
      ],
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "__init__"
      ],
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "clear"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "access"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "decay_knowledge"
      ],
      [
        "./tools/documentation/memory_evolution/memory_evolution.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/memory_evolution.py",
        "get_evolution_metrics"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "clear_cache"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_OPERATIONAL_SUMMARY.py",
        "generate_operational_summary"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "scan_workspace"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "analyze_connectivity"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "identify_working_systems"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "generate_report"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "print_summary"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "identify_gaps"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "generate_recommendations"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "run_analysis"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "print_report"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "scan_python_files"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "build_connectivity_graph"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "calculate_file_metrics"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "identify_critical_vs_isolated"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "generate_report"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "analyze_directories"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "identify_system_capabilities"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "find_entry_points"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "load_history"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_analyze_connectivity"
      ],
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "__init__"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "find_duplicates"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_start_background_tasks"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "_init_metrics"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "_register_default_checks"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "_add_lukhas_alert_rules"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "__init__"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "generate_report"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "__init__"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "_initialize_core_components"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "_initialize_consciousness_components"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "_initialize_ethics_components"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "_establish_working_connections"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "_generate_integration_report"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "undo_bad_consolidation"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "generate_smart_consolidation_plan"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/documentation_analytics.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/documentation_analytics.py",
        "_initialize_analyzers"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "__post_init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "_initialize_templates"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "_initialize_step_generators"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "_load_templates"
      ],
      [
        "./bio/endocrine_integration.py",
        "_setup_default_modulations"
      ],
      [
        "./bio/endocrine_integration.py",
        "_register_callbacks"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/stress_signal.py",
        "__repr__"
      ],
      [
        "./bio/curiosity_spark.py",
        "__repr__"
      ],
      [
        "./bio/bio_integration_hub.py",
        "__init__"
      ],
      [
        "./bio/bio_integration_hub.py",
        "_establish_connections"
      ],
      [
        "./bio/bio_engine.py",
        "__init__"
      ],
      [
        "./bio/trust_binder.py",
        "__init__"
      ],
      [
        "./bio/resilience_boost.py",
        "__repr__"
      ],
      [
        "./bio/simulation_controller.py",
        "__init__"
      ],
      [
        "./bio/simulation_controller.py",
        "recover"
      ],
      [
        "./bio/simulation_controller.py",
        "_initialize_default_hormones"
      ],
      [
        "./bio/simulation_controller.py",
        "_setup_hormone_interactions"
      ],
      [
        "./bio/simulation_controller.py",
        "_update_circadian_phase"
      ],
      [
        "./bio/simulation_controller.py",
        "_apply_circadian_effects"
      ],
      [
        "./bio/simulation_controller.py",
        "_apply_hormone_interactions"
      ],
      [
        "./bio/simulation_controller.py",
        "_check_system_states"
      ],
      [
        "./bio/__init__.py",
        "__getattr__"
      ],
      [
        "./bio/quantum_layer.py",
        "__post_init__"
      ],
      [
        "./bio/quantum_layer.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./bio/quantum_layer.py",
        "reset_oscillator"
      ],
      [
        "./bio/bio_hub.py",
        "__init__"
      ],
      [
        "./bio/bio_hub.py",
        "_initialize_services"
      ],
      [
        "./bio/bio_hub.py",
        "_register_bio_processing_services"
      ],
      [
        "./bio/bio_hub.py",
        "_register_bio_symbolic_services"
      ],
      [
        "./bio/bio_hub.py",
        "_register_analysis_services"
      ],
      [
        "./bio/bio_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_setup_hormone_responses"
      ],
      [
        "./bio/stability_anchor.py",
        "__repr__"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_initialize_oscillation"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_post_freq_update"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_post_phase_update"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_post_amplitude_update"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "update_metrics"
      ],
      [
        "./bio/core/hormonal_system.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "_decay_stress"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "reset"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "__init__"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "_register_voice_modules"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "optimize_for_realtime"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "generate_cl_signature"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_bind_resource"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_induce_fission"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_induce_fusion"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "__post_init__"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_stabilize_topology"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "report_state"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_post_freq_update"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_post_phase_update"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_post_amplitude_update"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "update_metrics"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "__iter__"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "enhanced_attention_hook"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_initialize_quantum_matrices"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "adaptive_tune"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "reset"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "entropy_balance_pass"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "relink_drifted_edges"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "reset_performance_metrics"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "__post_init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "entropy_balance_pass"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "relink_drifted_edges"
      ],
      [
        "./bio/awareness/awareness.py",
        "__init__"
      ],
      [
        "./trace/drift_metrics.py",
        "__init__"
      ],
      [
        "./trace/drift_metrics.py",
        "get_drift"
      ],
      [
        "./core/minimal_actor.py",
        "_run"
      ],
      [
        "./core/integration_hub.py",
        "__post_init__"
      ],
      [
        "./core/integration_hub.py",
        "cleanup"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "start_monitoring"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "stop_monitoring"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_monitoring_loop"
      ],
      [
        "./core/plugin_registry.py",
        "__init__"
      ],
      [
        "./core/plugin_registry.py",
        "_load_entry_points"
      ],
      [
        "./core/symbolic_contract.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "lukhas_tier_required"
      ],
      [
        "./core/integrator.py",
        "decorator"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/config_manager.py",
        "set_config"
      ],
      [
        "./core/resource_optimization_integration.py",
        "_setup_communication_energy_tracking"
      ],
      [
        "./core/resource_optimization_integration.py",
        "_register_integrated_optimizations"
      ],
      [
        "./core/id.py",
        "__post_init__"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__post_init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "analyze"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_extract_test_calls"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_extract_implementations"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_find_mismatches"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_generate_report"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_generate_fixes"
      ],
      [
        "./core/p2p_fabric.py",
        "_listen"
      ],
      [
        "./core/benchmark_swarm.py",
        "event_to_actor_bridge"
      ],
      [
        "./core/benchmark_swarm.py",
        "handle_event"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_subscribe_to_events"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "print_alert"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "print_alert"
      ],
      [
        "./core/oracle_nervous_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "_update_safety_metrics"
      ],
      [
        "./core/tier_unification_adapter.py",
        "oneiric_tier_required"
      ],
      [
        "./core/tier_unification_adapter.py",
        "emotional_tier_required"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/core_hub.py",
        "__init__"
      ],
      [
        "./core/core_hub.py",
        "_register_infrastructure_services"
      ],
      [
        "./core/core_hub.py",
        "_register_integration_services"
      ],
      [
        "./core/core_hub.py",
        "_register_event_services"
      ],
      [
        "./core/core_hub.py",
        "_register_monitoring_services"
      ],
      [
        "./core/core_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/core_hub.py",
        "__init__"
      ],
      [
        "./core/core_hub.py",
        "get_health"
      ],
      [
        "./core/__init__.py",
        "__getattr__"
      ],
      [
        "./core/enhanced_swarm.py",
        "_create_agent_network"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "_detect_swarm_patterns"
      ],
      [
        "./core/event_sourcing.py",
        "_get_connection"
      ],
      [
        "./core/event_sourcing.py",
        "_initialize_database"
      ],
      [
        "./core/event_sourcing.py",
        "replay_events"
      ],
      [
        "./core/symbolic_arbitration.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "get_history"
      ],
      [
        "./core/core_system.py",
        "__init__"
      ],
      [
        "./core/core_system.py",
        "_initialize_core_systems"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "reset"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "_generate_optimization_recommendations"
      ],
      [
        "./core/practical_optimizations.py",
        "access"
      ],
      [
        "./core/practical_optimizations.py",
        "_evict_one"
      ],
      [
        "./core/practical_optimizations.py",
        "clear_expired"
      ],
      [
        "./core/practical_optimizations.py",
        "borrowed"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "lazy_property"
      ],
      [
        "./core/practical_optimizations.py",
        "__del__"
      ],
      [
        "./core/practical_optimizations.py",
        "_process_loop"
      ],
      [
        "./core/practical_optimizations.py",
        "flush"
      ],
      [
        "./core/practical_optimizations.py",
        "shutdown"
      ],
      [
        "./core/practical_optimizations.py",
        "cleanup"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "_monitor_resources"
      ],
      [
        "./core/practical_optimizations.py",
        "_adjust_for_memory_pressure"
      ],
      [
        "./core/practical_optimizations.py",
        "_adjust_for_cpu_pressure"
      ],
      [
        "./core/practical_optimizations.py",
        "expensive_computation"
      ],
      [
        "./core/practical_optimizations.py",
        "fibonacci"
      ],
      [
        "./core/practical_optimizations.py",
        "wrapper"
      ],
      [
        "./core/practical_optimizations.py",
        "decorator"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "reset"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/module_registry.py",
        "__init__"
      ],
      [
        "./core/module_registry.py",
        "shutdown"
      ],
      [
        "./core/event_bus.py",
        "__init__"
      ],
      [
        "./core/notion_sync.py",
        "generate_summary"
      ],
      [
        "./core/core_utilities.py",
        "_run"
      ],
      [
        "./core/supervision.py",
        "record_success"
      ],
      [
        "./core/supervision.py",
        "record_failure"
      ],
      [
        "./core/supervision.py",
        "reset"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/bot.py",
        "_init_ai_routing"
      ],
      [
        "./core/efficient_communication.py",
        "__post_init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "start"
      ],
      [
        "./core/observability_steering.py",
        "stop"
      ],
      [
        "./core/observability_steering.py",
        "_aggregation_loop"
      ],
      [
        "./core/observability_steering.py",
        "_clean_old_data"
      ],
      [
        "./core/observability_steering.py",
        "_detect_patterns"
      ],
      [
        "./core/observability_steering.py",
        "_detect_hotspots"
      ],
      [
        "./core/observability_steering.py",
        "_detect_cascades"
      ],
      [
        "./core/observability_steering.py",
        "_calculate_system_health"
      ],
      [
        "./core/task_manager.py",
        "_load_config"
      ],
      [
        "./core/task_manager.py",
        "_setup_default_queues"
      ],
      [
        "./core/task_manager.py",
        "_setup_default_agents"
      ],
      [
        "./core/task_manager.py",
        "_register_task_handlers"
      ],
      [
        "./core/validation_script_fixes.py",
        "replace_send_message"
      ],
      [
        "./core/validation_script_fixes.py",
        "add_message_count"
      ],
      [
        "./core/validation_script_fixes.py",
        "add_counter_increment"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "_load_index"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "_initialize_identity_integration"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "_setup_tier_capability_matrix"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "_initialize_oracle_ethics_integration"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/quantum_identity_manager.py",
        "__init__"
      ],
      [
        "./core/quantum_identity_manager.py",
        "_initialize_quantum_components"
      ],
      [
        "./core/quantum_identity_manager.py",
        "_initialize_tier_system"
      ],
      [
        "./core/quantum_identity_manager.py",
        "_initialize_legacy_integration"
      ],
      [
        "./core/hub_registry.py",
        "__init__"
      ],
      [
        "./core/hub_registry.py",
        "_initialize_hubs"
      ],
      [
        "./core/targeted_api_fixes.py",
        "add_total_messages"
      ],
      [
        "./core/targeted_api_fixes.py",
        "add_send_large_data"
      ],
      [
        "./core/targeted_api_fixes.py",
        "fix_import"
      ],
      [
        "./core/identity_aware_base.py",
        "tier_required"
      ],
      [
        "./core/identity_aware_base.py",
        "_initialize_identity"
      ],
      [
        "./core/identity_aware_base.py",
        "_create_fallback_client"
      ],
      [
        "./core/actor_model.py",
        "__init__"
      ],
      [
        "./core/actor_model.py",
        "_run"
      ],
      [
        "./core/agent_coordination.py",
        "actorref_to_dict"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "_register_handlers"
      ],
      [
        "./core/agent_coordination.py",
        "_register_coordination_handlers"
      ],
      [
        "./core/coordination.py",
        "call_for_proposals"
      ],
      [
        "./core/coordination.py",
        "award_contract"
      ],
      [
        "./core/identity_integration.py",
        "__enter__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "_initialize_proxy_configuration"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "_analyze_target_colony"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "_setup_method_interception"
      ],
      [
        "./core/actor_system.py",
        "__str__"
      ],
      [
        "./core/service_discovery.py",
        "__init__"
      ],
      [
        "./core/global_initialization.py",
        "__init__"
      ],
      [
        "./core/state_management.py",
        "_load_latest_snapshot"
      ],
      [
        "./core/state_management.py",
        "_replay_events"
      ],
      [
        "./core/state_management.py",
        "take_snapshot"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "record_failure"
      ],
      [
        "./core/agi/self_healing.py",
        "record_recovery"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "trip"
      ],
      [
        "./core/agi/self_healing.py",
        "reset"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "snapshot_state"
      ],
      [
        "./core/colonies/creativity_colony.py",
        "update_task_slots"
      ],
      [
        "./core/colonies/tensor_colony_ops.py",
        "plot_throughput"
      ],
      [
        "./core/colonies/base_colony.py",
        "prune_expired_tags"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/integration/system_coordinator.py",
        "_component_monitoring_loop"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "_initialize_modules"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "update_heartbeat"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "instrument_reasoning"
      ],
      [
        "./core/integration/layer.py",
        "__init__"
      ],
      [
        "./core/integration/layer.py",
        "shutdown"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/creative_personality.py",
        "__init__"
      ],
      [
        "./core/personality/creative_personality.py",
        "federated_lifecycle"
      ],
      [
        "./core/personality/creative_personality.py",
        "adaptive_learning_loop"
      ],
      [
        "./core/personality/creative_personality.py",
        "meta_haiku"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_load_style_preferences"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_create_base_haiku"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "__init__"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "federated_lifecycle"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "adaptive_learning_loop"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "meta_haiku"
      ],
      [
        "./core/symbolic_diagnostics/trace_repair_engine.py",
        "__init__"
      ],
      [
        "./core/utils/symbolic_utils.py",
        "tier_label"
      ],
      [
        "./core/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "__post_init__"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_energy_monitor_loop"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_cleanup_completed_tasks"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_update_energy_budget"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_update_energy_metrics"
      ],
      [
        "./core/observability/collector.py",
        "__init__"
      ],
      [
        "./core/observability/collector.py",
        "start"
      ],
      [
        "./core/observability/collector.py",
        "stop"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/__init__.py",
        "__init__"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/tagging/tagging_system.py",
        "__init__"
      ],
      [
        "./core/safety/safety_hub.py",
        "__init__"
      ],
      [
        "./core/safety/safety_hub.py",
        "_initialize_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_core_safety_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_testing_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_monitoring_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_consensus_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_initialize_safety_policies"
      ],
      [
        "./core/safety/safety_hub.py",
        "_initialize_bridges"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "__post_init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_learning"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_security"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_trail.py",
        "_init_database"
      ],
      [
        "./core/ai/integration_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./core/ai/integration_manager.py",
        "decorator"
      ],
      [
        "./core/symbolism/archiver.py",
        "create_snapshot"
      ],
      [
        "./core/symbolism/archiver.py",
        "stop"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "decorator"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "__init__"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_setup_logging_structlog"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_log_agent_startup"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "shutdown"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "replay_dream_by_id"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "replay_recent_dreams"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "generate_collapse_hash"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "consolidate_memories"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "optimize_performance"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__enter__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "__post_init__"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "__init__"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "_update_alert_level"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "_update_principles"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "get_active_goals"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "_initialize_council"
      ],
      [
        "./core/modules/nias/__init__.py",
        "narrate_dreams"
      ],
      [
        "./core/modules/nias/__init__.py",
        "_setup_dream_integration"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "__init__"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_initialize_services"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_register_core_nias_services"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_register_processing_services"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_register_bridge_services"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "set_dream_recorder"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_expand_architecture"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_optimize_architecture"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_neural_processing_loop"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "_advance_capability"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_advance_capability_level"
      ],
      [
        "./core/base/base_health.py",
        "clear_checks"
      ],
      [
        "./core/base/symbolic.py",
        "__init__"
      ],
      [
        "./core/base/base_module.py",
        "initialize"
      ],
      [
        "./core/base/base_module.py",
        "shutdown"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "__post_init__"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "__init__"
      ],
      [
        "./core/services/personality/personas.py",
        "load_persona"
      ],
      [
        "./core/interfaces/interfaces_hub.py",
        "__init__"
      ],
      [
        "./core/interfaces/interfaces_hub.py",
        "_establish_connections"
      ],
      [
        "./core/interfaces/dashboad.py",
        "generate_symbolic_html_url"
      ],
      [
        "./core/interfaces/dashboad.py",
        "build_publish_payload"
      ],
      [
        "./core/interfaces/dashboad.py",
        "show_social_post_preview"
      ],
      [
        "./core/interfaces/web_formatter.py",
        "format_html"
      ],
      [
        "./core/interfaces/web_formatter.py",
        "format_markdown"
      ],
      [
        "./core/interfaces/web_formatter.py",
        "format_caption"
      ],
      [
        "./core/interfaces/ui/gui_launcher.py",
        "launch_dashboard"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "list_active_widgets"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "get_paired_apps"
      ],
      [
        "./core/interfaces/ui/components/audio_exporter.py",
        "generate_filename"
      ],
      [
        "./core/interfaces/ui/components/audio_exporter.py",
        "safe_subprocess_run"
      ],
      [
        "./core/interfaces/tools/security/session_logger.py",
        "is_access_allowed"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "start_monitoring"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "stop_monitoring"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_monitor_engines"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_check_engine_heartbeats"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_perform_health_checks"
      ],
      [
        "./core/interfaces/logic/consent_manager.py",
        "revoke_access"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "initialize_agent"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "sync_user_mood"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "verify_access_level"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "store_memory_echo"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "activate_delegate_mode"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "check_and_quarantine"
      ],
      [
        "./core/interfaces/dashboard/core/fallback_system.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/fallback_system.py",
        "_calculate_recovery_success_rate"
      ],
      [
        "./core/interfaces/dashboard/core/self_healing_manager.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/api/websocket_server.py",
        "_setup_fastapi"
      ],
      [
        "./core/interfaces/voice/voice_agent.py",
        "speak"
      ],
      [
        "./core/interfaces/voice/core/sayit.py",
        "classify"
      ],
      [
        "./core/interfaces/voice/core/sayit.py",
        "route"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "__init__"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_initialize_builtin_assessors"
      ],
      [
        "./core/interfaces/as_agent/core/generate_image.py",
        "dalle_generate"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "validate_user_tier"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "get_user_preferences"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "can_recover_full_state"
      ],
      [
        "./core/interfaces/as_agent/utils/symbolic_utils.py",
        "tier_label"
      ],
      [
        "./core/interfaces/as_agent/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/voice_narrator.py",
        "narrate_dreams"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/delivery_loop.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/validate_payload.py",
        "validate_payload"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/replay_heatmap.py",
        "plot_heatmap"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/replay_visualizer.py",
        "visualize_replays"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast_core.py",
        "add_tag"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast_core.py",
        "remove_tag"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "load_tags_from_file"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "__new__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "__new__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "__new__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "register_task"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "handle_dream_summary"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "handle_delegate_payment"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "handle_ethical_signal"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "wrapper"
      ],
      [
        "./core/interfaces/as_agent/sys/abas/abas.py",
        "is_allowed_now"
      ],
      [
        "./core/interfaces/as_agent/widgets/live_renderer_widget.py",
        "render_widget_preview"
      ],
      [
        "./core/interfaces/as_agent/widgets/widget_archive.py",
        "render_widget_preview"
      ],
      [
        "./core/interfaces/as_agent/news_and_social/s_dispatcher.py",
        "simulate_publish"
      ],
      [
        "./core/interfaces/as_agent/news_and_social/s_dispatcher.py",
        "update_dispatch_log"
      ],
      [
        "./core/interfaces/as_agent/news_and_social/s_dispatcher.py",
        "rewrite_queue"
      ],
      [
        "./core/hub_services/coordinator.py",
        "__post_init__"
      ],
      [
        "./core/hub_services/coordinator.py",
        "__init__"
      ],
      [
        "./core/hub_services/service_registry.py",
        "__init__"
      ],
      [
        "./core/hub_services/service_registry.py",
        "clear"
      ],
      [
        "./memory/openai_memory_adapter.py",
        "__init__"
      ],
      [
        "./memory/service.py",
        "__init__"
      ],
      [
        "./memory/service.py",
        "configure_cross_module_storage"
      ],
      [
        "./memory/unified_memory_core.py",
        "__init__"
      ],
      [
        "./memory/services.py",
        "__init__"
      ],
      [
        "./memory/services.py",
        "_ensure_services"
      ],
      [
        "./memory/connection_visualizer.py",
        "print_connection_summary"
      ],
      [
        "./memory/structural_conscience.py",
        "_load_conscience_chain"
      ],
      [
        "./memory/memory_hub.py",
        "__init__"
      ],
      [
        "./memory/memory_hub.py",
        "_register_memory_management_services"
      ],
      [
        "./memory/memory_hub.py",
        "_register_memory_systems"
      ],
      [
        "./memory/memory_hub.py",
        "_register_specialized_memory_services"
      ],
      [
        "./memory/memory_hub.py",
        "_register_processing_services"
      ],
      [
        "./memory/memory_hub.py",
        "_register_additional_services"
      ],
      [
        "./memory/memory_hub.py",
        "_register_neurosymbolic_layer"
      ],
      [
        "./memory/memory_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./memory/fold_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/fold_engine.py",
        "decorator"
      ],
      [
        "./memory/fold_engine.py",
        "_ensure_log_directory"
      ],
      [
        "./memory/evolution.py",
        "__init__"
      ],
      [
        "./memory/evolution.py",
        "_setup_default_rules"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_init_subsystems"
      ],
      [
        "./memory/emotional.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/emotional.py",
        "decorator"
      ],
      [
        "./memory/emotional.py",
        "_update_derived_metrics"
      ],
      [
        "./memory/emotional.py",
        "_update_emotional_history_log"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "track_drift"
      ],
      [
        "./memory/emotional.py",
        "register_drift"
      ],
      [
        "./memory/emotional.py",
        "record_drift"
      ],
      [
        "./memory/core.py",
        "_rebuild_matrix"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_load_existing_lineage"
      ],
      [
        "./memory/memory_fold.py",
        "_init_database"
      ],
      [
        "./memory/memory_fold.py",
        "_cleanup_old_folds"
      ],
      [
        "./memory/memory_fold.py",
        "_load_prompts"
      ],
      [
        "./memory/memory_optimization.py",
        "update_access"
      ],
      [
        "./memory/memory_optimization.py",
        "clear"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "register_default_optimizations"
      ],
      [
        "./memory/memory_optimization.py",
        "_trigger_optimization"
      ],
      [
        "./memory/memory_optimization.py",
        "__del__"
      ],
      [
        "./memory/dashboard.py",
        "__init__"
      ],
      [
        "./memory/distributed_state_manager.py",
        "access"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_start_background_tasks"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_ttl_cleanup_loop"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_cleanup_expired_entries"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_snapshot_loop"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_analyze_access_patterns"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_optimize_state_types"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_create_snapshot"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_restore_state"
      ],
      [
        "./memory/distributed_state_manager.py",
        "shutdown"
      ],
      [
        "./memory/distributed_state_manager.py",
        "shutdown_all"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "update_access_tracking"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "_initialize_default_policies"
      ],
      [
        "./memory/basic.py",
        "access"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/basic.py",
        "clear"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_initialize_glyph_affects"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "_optimize_memory"
      ],
      [
        "./memory/memory_colonies.py",
        "__init__"
      ],
      [
        "./memory/memory_visualization.py",
        "__init__"
      ],
      [
        "./memory/visualizer.py",
        "setup_visualization"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/core/base_manager.py",
        "_load_index"
      ],
      [
        "./memory/core/base_manager.py",
        "_save_index"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_register_memory_colonies"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_initialize_memory_subsystems"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_register_colonies_with_validator"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_start_background_tasks"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "test_memory_lifecycle"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "test_error_conditions"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "activate"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "has_cycle"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "reset_competitive_weights"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "mark_replayed"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_evict_oldest_memory"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_strengthen_important_memories"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_integrate_related_memories"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_extract_patterns"
      ],
      [
        "./memory/episodic/episodic_memory.py",
        "__init__"
      ],
      [
        "./memory/memory_systems/memoria-checkpoint.py",
        "trace"
      ],
      [
        "./memory/convergence/memory_trace_harmonizer.py",
        "__init__"
      ],
      [
        "./memory/adapters/creativity_adapter.py",
        "__init__"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_load_quarantine_entries"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "cool_value"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "cool_structure"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_load_existing_lineage"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "_rebuild_matrix"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/foldin.py",
        "importer"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "verify_lkf_pack"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "json_serial"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "update_coherence"
      ],
      [
        "./memory/hooks/registry.py",
        "__post_init__"
      ],
      [
        "./memory/hooks/registry.py",
        "enable_circuit_breaker"
      ],
      [
        "./memory/hooks/registry.py",
        "disable_circuit_breaker"
      ],
      [
        "./memory/hooks/base.py",
        "__post_init__"
      ],
      [
        "./memory/hooks/base.py",
        "__init__"
      ],
      [
        "./memory/hooks/base.py",
        "enable"
      ],
      [
        "./memory/hooks/base.py",
        "disable"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "__init__"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "_rebuild_tree"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "_rebuild_leaves_from_tree"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "collect_leaves"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "calculate_metrics"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_evict_oldest"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_rebuild_priority_tree"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__post_init__"
      ],
      [
        "./memory/systems/replay_system.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "validate"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_gradients_and_temporaries"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_parameters_using_python_tracer"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_inputs"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_parameters_using_data_flow"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_activations"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_optimizer_state"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_set_autograd_detail"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "children_fn"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "close"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "get_logger"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "analyze_drift"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "_load_recent_drifts"
      ],
      [
        "./memory/systems/symbolic_snapshot.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "calibrate_drift_metrics"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "decorator"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "_init_projections"
      ],
      [
        "./memory/systems/memory_loop_rebuilder.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "_prune_semantic_cache"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "maintenance_cycle"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "track_changes"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "adapt_knowledge"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "update_relationships"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "learn_from_usage"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "record_interaction"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "identify_patterns"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_document_effectiveness"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "update_user_preferences"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "adapt_oscillations"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "analyze_structure"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "synthesize"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "synthesize_content"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "clear_cache"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_last_synthesis"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "__post_init__"
      ],
      [
        "./memory/systems/memory_helix.py",
        "_load_memory"
      ],
      [
        "./memory/systems/memory_helix.py",
        "save_memory"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "_update_strength"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_resonance_analyzer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "_evict_oldest_memory"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/integration_example.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_comprehensive_new.py",
        "test_memory_lifecycle"
      ],
      [
        "./memory/systems/memory_comprehensive_new.py",
        "test_error_conditions"
      ],
      [
        "./memory/systems/memory_comprehensive.py",
        "test_memory_lifecycle"
      ],
      [
        "./memory/systems/memory_comprehensive.py",
        "test_error_conditions"
      ],
      [
        "./memory/systems/memory_node.py",
        "clear_working_memory"
      ],
      [
        "./memory/systems/memory_helix_golden.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "setup_visualization"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/helix_dna.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/helix_dna.py",
        "decorator"
      ],
      [
        "./memory/systems/helix_dna.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__len__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "begin"
      ],
      [
        "./memory/systems/memory_planning.py",
        "end"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ],
      [
        "./memory/systems/memory_planning.py",
        "device"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "mark_allocated"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ],
      [
        "./memory/systems/memory_planning.py",
        "clear_cache"
      ],
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__hash__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "pprint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "sym_nbytes"
      ],
      [
        "./memory/systems/memory_planning.py",
        "make_allocation"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "node"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate_groups"
      ],
      [
        "./memory/systems/__init__.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/core.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/core.py",
        "ethical_validation"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "reset_profiler"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "decorator"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_adapt_meta_parameters"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "stop"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_clear_state"
      ],
      [
        "./memory/systems/trace_injector.py",
        "clear_traces"
      ],
      [
        "./memory/systems/agent_memory.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/agent_memory.py",
        "decorator"
      ],
      [
        "./memory/systems/agent_memory.py",
        "_ensure_memory_file"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "reset_profiler"
      ],
      [
        "./memory/systems/memory_checkpoint.py",
        "trace"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "__init__"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "decorator"
      ],
      [
        "./memory/systems/simple_memory.py",
        "_load_memory"
      ],
      [
        "./memory/systems/simple_memory.py",
        "_save_memory"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "__init__"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "__str__"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "decorator"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "decorator"
      ],
      [
        "./memory/systems/recall_handler.py",
        "__init__"
      ],
      [
        "./memory/systems/tier_system.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_stabilizer.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "_register_callbacks"
      ],
      [
        "./memory/systems/module_integrations.py",
        "_setup_creative_anchors"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "decorator"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "_consolidate_knowledge_base"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__post_init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "_evict_if_needed"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "_evict_oldest"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "clear"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "_init_database"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_load_existing_data"
      ],
      [
        "./memory/systems/collapse_buffer.py",
        "__init__"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "decorator"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_block_extra_legacy"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_block_extra"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_format_size"
      ],
      [
        "./memory/systems/memory_viz.py",
        "calc_active"
      ],
      [
        "./memory/systems/memory_viz.py",
        "segsum"
      ],
      [
        "./memory/systems/memory_viz.py",
        "trace"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_profile_to_snapshot"
      ],
      [
        "./memory/systems/memory_viz.py",
        "frames_fragment"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_seg_key"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_seg_info"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "format"
      ],
      [
        "./memory/systems/memory_viz.py",
        "to_device"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_output"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_read"
      ],
      [
        "./memory/systems/memory_viz.py",
        "find_segment"
      ],
      [
        "./memory/systems/memory_research.py",
        "__post_init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "close"
      ],
      [
        "./memory/systems/memory_research.py",
        "__del__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__post_init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "close"
      ],
      [
        "./memory/systems/memory_research.py",
        "__del__"
      ],
      [
        "./memory/systems/voice_memory_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_init_access_requirements"
      ],
      [
        "./memory/consolidation/memory_consolidation.py",
        "__init__"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "consolidate"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "_consolidate_memory_files"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "_tag_critical_files"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_update_metrics"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_wrapper.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "_update_statistics"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_initialize_columns"
      ],
      [
        "./identity/qrg_integration.py",
        "__init__"
      ],
      [
        "./identity/qrg_integration.py",
        "__call__"
      ],
      [
        "./identity/__init__.py",
        "__getattr__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "create_identity_component"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "get_status"
      ],
      [
        "./identity/privacy_manager.py",
        "__init__"
      ],
      [
        "./identity/privacy_manager.py",
        "_generate_encryption_key"
      ],
      [
        "./identity/privacy_manager.py",
        "anonymize_dict"
      ],
      [
        "./identity/privacy_manager.py",
        "encrypt_dict"
      ],
      [
        "./identity/privacy_manager.py",
        "should_retain"
      ],
      [
        "./identity/qrg_showcase.py",
        "__init__"
      ],
      [
        "./identity/deployment_package.py",
        "__init__"
      ],
      [
        "./identity/deployment_package.py",
        "run_interactive_demo"
      ],
      [
        "./identity/deployment_package.py",
        "run_fallback_demo"
      ],
      [
        "./identity/deployment_package.py",
        "run_comprehensive_tests"
      ],
      [
        "./identity/deployment_package.py",
        "run_basic_tests"
      ],
      [
        "./identity/deployment_package.py",
        "test_python_env"
      ],
      [
        "./identity/deployment_package.py",
        "test_file_structure"
      ],
      [
        "./identity/deployment_package.py",
        "test_basic_imports"
      ],
      [
        "./identity/deployment_package.py",
        "test_mock_generation"
      ],
      [
        "./identity/deployment_package.py",
        "run_performance_benchmarks"
      ],
      [
        "./identity/deployment_package.py",
        "benchmark_qrg_speed"
      ],
      [
        "./identity/deployment_package.py",
        "benchmark_memory_usage"
      ],
      [
        "./identity/deployment_package.py",
        "benchmark_concurrent"
      ],
      [
        "./identity/deployment_package.py",
        "benchmark_security"
      ],
      [
        "./identity/deployment_package.py",
        "check_deployment_readiness"
      ],
      [
        "./identity/deployment_package.py",
        "check_system_validation"
      ],
      [
        "./identity/deployment_package.py",
        "check_performance_standards"
      ],
      [
        "./identity/deployment_package.py",
        "check_security_compliance"
      ],
      [
        "./identity/deployment_package.py",
        "check_documentation"
      ],
      [
        "./identity/deployment_package.py",
        "check_test_coverage"
      ],
      [
        "./identity/deployment_package.py",
        "__init__"
      ],
      [
        "./identity/deployment_package.py",
        "run_validation"
      ],
      [
        "./identity/deployment_package.py",
        "run_demo"
      ],
      [
        "./identity/deployment_package.py",
        "run_tests"
      ],
      [
        "./identity/deployment_package.py",
        "run_benchmarks"
      ],
      [
        "./identity/deployment_package.py",
        "check_deployment"
      ],
      [
        "./identity/deployment_package.py",
        "run_complete_package"
      ],
      [
        "./identity/deployment_package.py",
        "mock_generation"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_extreme_consciousness_levels"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_invalid_security_levels"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_empty_and_null_inputs"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_extremely_long_user_ids"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_unicode_and_special_characters"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_concurrent_stress_test"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_missing_dependencies_graceful_handling"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_memory_exhaustion_protection"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_circular_reference_protection"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_exception_recovery"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_entropy_quality_validation"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_temporal_security"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_security_level_escalation"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_all_cultural_contexts"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_cultural_safety_edge_cases"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_cultural_preferences_respect"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_all_quantum_influence_types"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_all_glyph_styles"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_constellation_encoding_completeness"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_large_scale_generation"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_memory_efficiency"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_configuration_optimization"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_session_management"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_statistics_collection"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "test_adaptive_qrg_selection_logic"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "generate_qrg"
      ],
      [
        "./identity/connector.py",
        "__init__"
      ],
      [
        "./identity/connector.py",
        "setup_cross_module_auth"
      ],
      [
        "./identity/connector.py",
        "decorator"
      ],
      [
        "./identity/router.py",
        "route_user_dashboard"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "cross_validate_entropy"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "expire_stale_sessions"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "generate_session_keys"
      ],
      [
        "./identity/auth_backend/webrtc_peer_sync.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "cleanup_expired_data"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "expire_sessions"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "start_trust_scorer_cleanup"
      ],
      [
        "./identity/auth_backend/entropy_health_api.py",
        "get_trust_score_session"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/qr_entropy_generator.py",
        "__init__"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "__init__"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "run_interactive_demo"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_cultural_context_demo"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "show_config_info"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_calculate_personal_thresholds"
      ],
      [
        "./identity/core/qrs_manager.py",
        "__init__"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "_load_database"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "_save_database"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "_initialize_default_users"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_create_mock_registry"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_create_mock_brain"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "get_user_id"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "apply_secure_wrappers"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "wrapped_function"
      ],
      [
        "./identity/core/verifold_connector.py",
        "connect_to_chain"
      ],
      [
        "./identity/core/verifold_connector.py",
        "verify_chain_integrity"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "to_dict"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "__post_init__"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "__init__"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_load_brand_registry"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__post_init__"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__post_init__"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_get_biographical_connector"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_get_authentication_connector"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_get_consciousness_connector"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "relevance_score"
      ],
      [
        "./identity/core/events/identity_event_types.py",
        "calculate_processing_duration"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/qrg_generator.py",
        "cleanup_expired_codes"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_initialize_default_stage_configs"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_initialize_default_personality_flows"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_initialize_default_cultural_configs"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "__init__"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "__init__"
      ],
      [
        "./identity/enterprise/auth.py",
        "_load_authentication_providers"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "assess_awareness"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_generate_context_vector"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_determine_tier"
      ],
      [
        "./identity/lukhas_identity/security/kyi_check.py",
        "get_user_interactions"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "__init__"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "stop_broadcast"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "get_current_time"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "__init__"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "__post_init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "__init__"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "detect_anomalies"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "predict_sync_rate"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "validate_sync_rate"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "__init__"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "__init__"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "__init__"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "__init__"
      ],
      [
        "./identity/api/__init__.py",
        "_initialize_extensions"
      ],
      [
        "./identity/api/__init__.py",
        "_register_blueprints"
      ],
      [
        "./identity/api/__init__.py",
        "_register_error_handlers"
      ],
      [
        "./identity/api/__init__.py",
        "_add_health_check_endpoint"
      ],
      [
        "./identity/api/__init__.py",
        "_add_request_response_logging"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "_setup_fastapi_middleware"
      ],
      [
        "./identity/api/api.py",
        "_setup_fastapi_routes"
      ],
      [
        "./identity/api/api.py",
        "Depends"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "generate_qrg_for_lambda_id"
      ],
      [
        "./identity/api/api.py",
        "validate_qrg_authentication"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "enroll_biometric"
      ],
      [
        "./identity/api/api.py",
        "verify_biometric"
      ],
      [
        "./identity/api/onboarding_api.py",
        "get_onboarding_status_endpoint"
      ],
      [
        "./identity/api/onboarding_api.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_init_core_services"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_load_configuration"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "generate"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "calculate_entropy"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "get_entropy_breakdown"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "get_progression_map"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "log_activity"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "_get_req_id"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "handle_rate_limit_exceeded_on_bp"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "handle_not_found_on_bp"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "handle_method_not_allowed_on_bp"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "__init__"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "generate_id"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "validate_id"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "calculate_entropy"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "get_tier_information"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "request_tier_upgrade"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "check_service_health"
      ],
      [
        "./config/fallback_settings.py",
        "__init__"
      ],
      [
        "./config/validators.py",
        "validate_config"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "list_active_widgets"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "get_paired_apps"
      ],
      [
        "./config/dashboard_settings.py",
        "list_active_widgets"
      ],
      [
        "./config/dashboard_settings.py",
        "get_paired_apps"
      ],
      [
        "./security/hardware_root.py",
        "__init__"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_initialize_cryptographic_keys"
      ],
      [
        "./security/safety/coordinator.py",
        "__init__"
      ],
      [
        "./security/safety/emergency_override.py",
        "__init__"
      ],
      [
        "./security/safety/emergency_override.py",
        "_hard_shutdown"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "_initialize_control_catalog"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "_initialize_validation_tests"
      ],
      [
        "./security/red_team_framework/penetration_testing/ai_penetration_tester.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/penetration_testing/ai_penetration_tester.py",
        "_initialize_attack_modules"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/service.py",
        "__init__"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_create_base_haiku"
      ],
      [
        "./creativity/services.py",
        "__init__"
      ],
      [
        "./creativity/services.py",
        "_ensure_services"
      ],
      [
        "./creativity/healix_visualizer.py",
        "animate_frame"
      ],
      [
        "./creativity/__init__.py",
        "__getattr__"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_get_default_symbolic_db"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/personality/narrative_engine_dream_narrator_queue.py",
        "filter_narratable_dreams"
      ],
      [
        "./creativity/personality/narrative_engine_dream_narrator_queue.py",
        "save_to_queue"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "meta_haiku"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_build_knowledge_graph"
      ],
      [
        "./creativity/personality/creative_core.py",
        "adaptive_learning_loop"
      ],
      [
        "./creativity/personality/voice/voice_narrator.py",
        "narrate_dreams"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_init_components"
      ],
      [
        "./creativity/engines/engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_create_base_haiku"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_init_components"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "_ensure_default_parameters"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "_load_profiles"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_initialize_lukhas_integration"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "handle_complex_scenario"
      ],
      [
        "./bridge/colony_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "lukhas_tier_required"
      ],
      [
        "./bridge/integration_bridge.py",
        "decorator"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/trace_logger.py",
        "_setup_file_logging"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "__init__"
      ],
      [
        "./bridge/shared_state.py",
        "__post_init__"
      ],
      [
        "./bridge/shared_state.py",
        "_cleanup_expired"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "device"
      ],
      [
        "./bridge/model_communication_engine.py",
        "is_multilingual"
      ],
      [
        "./bridge/model_communication_engine.py",
        "num_languages"
      ],
      [
        "./bridge/model_communication_engine.py",
        "install_hooks"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "load_models"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_register_core_models"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/learning_gateway.py",
        "__post_init__"
      ],
      [
        "./learning/learning_gateway.py",
        "__init__"
      ],
      [
        "./learning/service.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "_initialize_services"
      ],
      [
        "./learning/learning_hub.py",
        "_register_core_learning_services"
      ],
      [
        "./learning/learning_hub.py",
        "_register_meta_learning_services"
      ],
      [
        "./learning/learning_hub.py",
        "_register_adaptive_services"
      ],
      [
        "./learning/learning_hub.py",
        "_register_federated_services"
      ],
      [
        "./learning/learning_hub.py",
        "_register_analysis_services"
      ],
      [
        "./learning/learning_hub.py",
        "_initialize_learning_metrics"
      ],
      [
        "./learning/learning_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./learning/learning_hub.py",
        "reset_learning_metrics"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "_setup_logging"
      ],
      [
        "./learning/services.py",
        "__init__"
      ],
      [
        "./learning/services.py",
        "_ensure_services"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "load_models"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_register_core_models"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_learning_system.py",
        "load_models"
      ],
      [
        "./learning/__init__.py",
        "__getattr__"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/tutor_learning_engine.py",
        "tutor_engine"
      ],
      [
        "./learning/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "_ensure_storage_exists"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "_setup_logging"
      ],
      [
        "./learning/exponential_learning.py",
        "_consolidate_knowledge"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ],
      [
        "./learning/_dict_learning.py",
        "n_components_"
      ],
      [
        "./learning/_dict_learning.py",
        "n_features_in_"
      ],
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ],
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ],
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ],
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ],
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "__init__"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "__init__"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "init_components"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "register_event_handlers"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "_get_memory_usage"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "_save_system_state"
      ],
      [
        "./learning/embodied_thought/generative_reflex.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "load_models"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_register_core_models"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "__post_init__"
      ],
      [
        "./learning/meta_learning/meta_core.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_update_dashboard_symbolic_feedback"
      ],
      [
        "./learning/systems/intent_language.py",
        "interpret_intent"
      ],
      [
        "./learning/systems/core_system.py",
        "process_user_input"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "speak"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "reflect_with_lukhas"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "generate_dream_outcomes"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "lukhas_emotional_response"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "load_models"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_ensure_storage_exists"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "__post_init__"
      ],
      [
        "./red_team/__init__.py",
        "__init__"
      ],
      [
        "./red_team/__init__.py",
        "_load_test_scenarios"
      ],
      [
        "./consciousness/services.py",
        "__init__"
      ],
      [
        "./consciousness/services.py",
        "_ensure_services"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_load_config"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_set_defaults"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_save_config"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "decorator"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_load_foundational_knowledge"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_start_recharge_thread"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_scheduler_loop"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_schedule_processes"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_check_completed_processes"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_monitor_loop"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_check_system_health"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_check_memory_pressure"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_check_process_health"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_update_metrics"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_start_consolidation_thread"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/openai_consciousness_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/dream_bridge_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/__init__.py",
        "__getattr__"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "decorator"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "setup_quantum_entanglement"
      ],
      [
        "./consciousness/dream_bridge.py",
        "__init__"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "_create_metrics_monitor"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "_create_ethics_monitor"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "__post_init__"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "decorator"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_load_memories"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_save_memories"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__post_init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__post_init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_monitor_loop"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_analyze_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_apply_decay"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "reset_state"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "decorator"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_initialize_anthropic_client"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "decorator"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__post_init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/core/engine.py",
        "decorator"
      ],
      [
        "./consciousness/core/engine.py",
        "__post_init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_visualizer.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_creative_consciousness.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_flush_metric_buffers"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_decay_resources"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_adjust_learning_rate"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "mean"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "std"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "process"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "attend"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "filter"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "encode"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "decorator"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "__init__"
      ],
      [
        "./consciousness/systems/integrator.py",
        "_event_processing_loop"
      ],
      [
        "./consciousness/systems/mapper.py",
        "__post_init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_initialize_integrations"
      ],
      [
        "./consciousness/systems/\u039bBot_consciousness_monitor.py",
        "__init__"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_init_components"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "stop_dream_cycle"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "consolidate_memories"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "extract_insights"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "recognize_patterns"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "synthesize_dream"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "start"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "stop"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_reflection_loop"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "dream_synthesis_summary"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "dream_snapshot"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "__init__"
      ],
      [
        "./tests/__init__.py",
        "__init__"
      ],
      [
        "./tests/test_audit_trail.py",
        "test_audit_event_integrity"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "setUp"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "test_eu_ai_act_validator_initialization"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "test_framework_compatibility"
      ],
      [
        "./tests/governance/test_comprehensive_governance.py",
        "__init__"
      ],
      [
        "./tests/governance/test_comprehensive_governance.py",
        "generate_comprehensive_report"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "__init__"
      ],
      [
        "./compliance/entropy_tuning.py",
        "recheck_entropy"
      ],
      [
        "./compliance/ethics_monitor.py",
        "log_ethics_event"
      ],
      [
        "./compliance/compliance_hooks.py",
        "log_compliance_event"
      ],
      [
        "./compliance/ai_compliance.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/global_compliance/multi_jurisdiction_engine.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/eu_ai_act/compliance_validator.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "mean"
      ],
      [
        "./compliance/ai_regulatory_framework/gdpr/data_protection_validator.py",
        "__init__"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "test_logic_fallbacks"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "test_unstable_inference"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "__init__"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "adjust_dream_trajectory"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "record_emotional_alignment_impact"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "__init__"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "stop_reasoning"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "reset"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__post_init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/master_loop.py",
        "process_user_input"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "log_event"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_initialize_default_constraints"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "__init__"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "__init__"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "clear_cache"
      ],
      [
        "./reasoning/ethical/ConsentManager.py",
        "revoke_access"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_initialize_default_constraints"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "__init__"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "__init__"
      ],
      [
        "./reasoning/utils/agentic_trace.py",
        "get_trace"
      ],
      [
        "./reasoning/hooks/dream_reflect_hook.py",
        "dream_reflect_hook"
      ],
      [
        "./reasoning/diagnostics/trace_mapper.py",
        "__init__"
      ],
      [
        "./reasoning/diagnostics/trace_mapper.py",
        "map_traces"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "__init__"
      ],
      [
        "./ethics/service.py",
        "__init__"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "__init__"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "_build_legal_knowledge_graph"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "ethical_checkpoint"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_load_default_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_load_default_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_initialize_default_engines"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_load_cultural_adapters"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "decorator"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "instrument_reasoning"
      ],
      [
        "./ethics/monitor.py",
        "log_ethics_event"
      ],
      [
        "./ethics/monitor.py",
        "log_self_reflection"
      ],
      [
        "./ethics/ethics_engine.py",
        "__init__"
      ],
      [
        "./ethics/ethics_engine.py",
        "reset_scrutiny_level"
      ],
      [
        "./ethics/tier_enforcer.py",
        "tier_required"
      ],
      [
        "./ethics/tier_enforcer.py",
        "decorator"
      ],
      [
        "./ethics/policy_manager.py",
        "determine_active_regulations"
      ],
      [
        "./ethics/simplified_ethics_integration.py",
        "__init__"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "generate_collapse_hash"
      ],
      [
        "./ethics/__init__.py",
        "__init__"
      ],
      [
        "./ethics/__init__.py",
        "_load_pwm_ethics"
      ],
      [
        "./ethics/community_feedback.py",
        "save_rules"
      ],
      [
        "./ethics/community_feedback.py",
        "apply_proposal"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "__post_init__"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_setup_default_rules"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "configure_human_oversight"
      ],
      [
        "./ethics/hitlo_bridge_simple.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge_simple.py",
        "configure_human_oversight"
      ],
      [
        "./ethics/meg_guard.py",
        "temporary_disable_ethics"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_initialize_default_constraints"
      ],
      [
        "./ethics/ethics_integration.py",
        "__init__"
      ],
      [
        "./ethics/ethics_integration.py",
        "_establish_connections"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "__init__"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_initialize_constraints"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_initialize_principle_weights"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "__init__"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "init_components"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "register_event_handlers"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_get_memory_usage"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_save_system_state"
      ],
      [
        "./ethics/security/emergency_override.py",
        "check_safety_flags"
      ],
      [
        "./ethics/security/emergency_override.py",
        "shutdown_systems"
      ],
      [
        "./ethics/security/security_engine.py",
        "__init__"
      ],
      [
        "./ethics/security/secure_utils.py",
        "_validate_command"
      ],
      [
        "./ethics/security/privacy.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "reset_scrutiny_level"
      ],
      [
        "./ethics/compliance/engine.py",
        "_ensure_log_dir"
      ],
      [
        "./ethics/compliance/engine.py",
        "_build_default_legal_knowledge_graph"
      ],
      [
        "./ethics/compliance/engine.py",
        "_build_default_sensitive_vocab"
      ],
      [
        "./ethics/compliance/engine.py",
        "get_score"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_check_cascade_conditions"
      ],
      [
        "./ethics/safety/entropy_tuning.py",
        "recheck_entropy"
      ],
      [
        "./ethics/safety/compliance_hooks.py",
        "log_compliance_event"
      ],
      [
        "./ethics/safety/integration_bridge.py",
        "__init__"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "initialize_default_policies"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "shutdown"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__post_init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__post_init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "initialize"
      ],
      [
        "./ethics/policy_engines/base.py",
        "shutdown"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "initialize"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "shutdown"
      ],
      [
        "./voice/message_handler.py",
        "__init__"
      ],
      [
        "./voice/message_handler.py",
        "start"
      ],
      [
        "./voice/message_handler.py",
        "stop"
      ],
      [
        "./voice/message_handler.py",
        "_process_messages"
      ],
      [
        "./voice/voice_narrator.py",
        "narrate_dreams"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "_get_emotion_mapper"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "_get_memory_helix"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "emotions"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "baby_modes"
      ],
      [
        "./voice/voice_integration.py",
        "__init__"
      ],
      [
        "./voice/cognitive_voice.py",
        "__init__"
      ],
      [
        "./voice/voice_profiling.py",
        "_ensure_default_parameters"
      ],
      [
        "./voice/voice_profiling.py",
        "_load_profiles"
      ],
      [
        "./voice/processor.py",
        "setup_voice_properties"
      ],
      [
        "./voice/processor.py",
        "cleanup"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "__init__"
      ],
      [
        "./voice/voice_hub.py",
        "__init__"
      ],
      [
        "./voice/voice_hub.py",
        "_initialize_core_services"
      ],
      [
        "./voice/speech_processor.py",
        "start_listening"
      ],
      [
        "./voice/speech_processor.py",
        "stop_listening"
      ],
      [
        "./voice/speech_processor.py",
        "_process_audio_stream"
      ],
      [
        "./voice/speech_processor.py",
        "__init__"
      ],
      [
        "./voice/speech_framework.py",
        "__init__"
      ],
      [
        "./voice/speech_framework.py",
        "initialize_recognition_engine"
      ],
      [
        "./voice/speech_framework.py",
        "start_recognition"
      ],
      [
        "./voice/speech_framework.py",
        "stop_recognition"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/adaptation_module.py",
        "__init__"
      ],
      [
        "./voice/voice_system_integrator.py",
        "_create_default_profiles"
      ],
      [
        "./voice/bio_core/voice/quantum_voice_enhancer.py",
        "_enhance_voice_methods"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/quantum_layer.py",
        "activate"
      ],
      [
        "./voice/bio_core/oscillator/quantum_layer.py",
        "deactivate"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "setUp"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "test_validate_response_positive_intent"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "test_validate_response_negative_intent"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "test_check_ethical_issues_no_issues"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "test_check_ethical_issues_with_issues"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "test_apply_ethical_fixes"
      ],
      [
        "./voice/systems/synthesis.py",
        "__post_init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "__init__"
      ],
      [
        "./voice/interfaces/input/stream_handler.py",
        "__init__"
      ],
      [
        "./voice/interfaces/input/stream_handler.py",
        "start_stream"
      ],
      [
        "./voice/interfaces/input/stream_handler.py",
        "stop_stream"
      ],
      [
        "./voice/interfaces/input/stream_handler.py",
        "_process_stream"
      ],
      [
        "./orchestration/integration_hub.py",
        "__init__"
      ],
      [
        "./orchestration/integration_hub.py",
        "_initialize_oscillator"
      ],
      [
        "./orchestration/integration_hub.py",
        "_connect_systems"
      ],
      [
        "./orchestration/integration_hub.py",
        "_connect_core_systems"
      ],
      [
        "./orchestration/integration_hub.py",
        "_connect_golden_trio"
      ],
      [
        "./orchestration/integration_hub.py",
        "_connect_ethics_systems"
      ],
      [
        "./orchestration/integration_hub.py",
        "_connect_learning_systems"
      ],
      [
        "./orchestration/integration_hub.py",
        "_establish_cross_connections"
      ],
      [
        "./orchestration/integration_hub.py",
        "_start_health_monitoring"
      ],
      [
        "./orchestration/__init__.py",
        "__getattr__"
      ],
      [
        "./orchestration/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/main_node.py",
        "_load_dependencies"
      ],
      [
        "./orchestration/main_node.py",
        "init_components"
      ],
      [
        "./orchestration/main_node.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/main_node.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/main_node.py",
        "_save_system_state"
      ],
      [
        "./orchestration/service_registry.py",
        "__init__"
      ],
      [
        "./orchestration/service_registry.py",
        "clear"
      ],
      [
        "./orchestration/integration_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./orchestration/integration_engine.py",
        "decorator"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "_setup_protocol_handlers"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "_initialize_context"
      ],
      [
        "./orchestration/swarm/swarm_integration.py",
        "__init__"
      ],
      [
        "./orchestration/swarm/swarm_integration.py",
        "_setup_event_handlers"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "__init__"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "_check_for_silent_drops"
      ],
      [
        "./orchestration/config/migration_router.py",
        "record_success"
      ],
      [
        "./orchestration/config/migration_router.py",
        "record_failure"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_get_flags"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_initialize_ai_components"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "priority_key"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "__init__"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_initialize_lukhas_integration"
      ],
      [
        "./orchestration/agents/registry.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_assess_current_state"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_capability_level"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/builtin/codex.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "nodes"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "edges"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_on_success"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_on_failure"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_initialize_enterprise_modules"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "setup_prometheus_metrics"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/loop_recovery_simulator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_setup_us_logging"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_setup_us_registry"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_get_nlp_engine"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_get_emotion_detector"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_get_time_analyzer"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_get_location_analyzer"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_get_device_analyzer"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_setup_gdpr_controls"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_setup_ai_act_compliance"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_setup_eu_logging"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_setup_gdpr_registry"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "_log_to_transparency_system"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "decorator"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "save_scan_results"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_update_meta_parameters"
      ],
      [
        "./orchestration/brain/integration_bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "_generate_encryption_key"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "anonymize_dict"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "encrypt_dict"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "should_retain"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_initialize_advanced_components"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_initialize_basic_components"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "collapse_handler"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "reset_stats"
      ],
      [
        "./orchestration/brain/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/main_node.py",
        "init_components"
      ],
      [
        "./orchestration/brain/main_node.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_save_system_state"
      ],
      [
        "./orchestration/brain/dream_mutator.py",
        "load_latest_dream"
      ],
      [
        "./orchestration/brain/dream_mutator.py",
        "mutate_emotional_wave"
      ],
      [
        "./orchestration/brain/dream_mutator.py",
        "mutate_dream"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "collapse_handler"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "run_interactive_session"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/fix_lambda_symbols.py",
        "fix_lambda_symbols"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/experience_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "create_enhanced_brain_integration"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_synchronize_brains"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_initialize_compliance_frameworks"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_gdpr_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_eu_ai_act_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_ccpa_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_hipaa_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_sox_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_fedramp_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_pipeda_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_cppa_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_uk_gdpr_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_init_au_privacy_framework"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_initialize_institutional_compliance"
      ],
      [
        "./orchestration/brain/demo.py",
        "__init__"
      ],
      [
        "./orchestration/brain/demo.py",
        "init_components"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "_ensure_log_directories"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "close"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "load_state"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "save_state"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "check_daily_reset"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "update_efficiency_score"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "refresh_daily_budget"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "_initialize_agent_team"
      ],
      [
        "./orchestration/brain/expression.py",
        "synthesize_expression"
      ],
      [
        "./orchestration/brain/expression.py",
        "save_expression"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "run_gpt"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "save_snapshot"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_global_compliance"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "wait_for_low_cpu"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "heartbeat"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/healix_visualizer.py",
        "animate_frame"
      ],
      [
        "./orchestration/brain/visualization/golden_healix_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/tracing/trace_tools.py",
        "load_symbolic_trace_dashboard"
      ],
      [
        "./orchestration/brain/tracing/trace_tools.py",
        "get_summary_stats"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "__init__"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/cognitive/voice_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "close"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "close"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__repr__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__del__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "create"
      ],
      [
        "./orchestration/brain/context/context_sync.py",
        "generate_daily_context"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "show_optimization_tips"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "_initialize_client"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "log_publish_queue"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "anonymize"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "log_feedback"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "get_voice_params_for_emotion"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "request_data_deletion"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "is_valid"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "execute"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "prioritize_goals"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "execute_goals"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate_performance"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "analyze_logs"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "average_traits"
      ],
      [
        "./orchestration/brain/spine/emotional_sorter.py",
        "evaluate_emotional_state"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "decay_emotion"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "save_emotion_log"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "load_emotion_log"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "save_traits"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "process_traits"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "emoji_trait_bar"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "recalculate_importance"
      ],
      [
        "./orchestration/brain/spine/emotion_intent_link.py",
        "load_jsonl"
      ],
      [
        "./orchestration/brain/spine/emotion_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/guardian.py",
        "guard_output"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "generate_gpt_commentary"
      ],
      [
        "./orchestration/brain/spine/emotion_log.py",
        "decay_emotion"
      ],
      [
        "./orchestration/brain/spine/emotion_log.py",
        "save_emotion_log"
      ],
      [
        "./orchestration/brain/spine/emotion_log.py",
        "load_emotion_log"
      ],
      [
        "./orchestration/brain/config/settings_editor.py",
        "load_settings"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "load_settings"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "is_module_enabled"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "validate_settings"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "log_setting_access"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "_load_profile"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "_save_profile"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "export_personality_vector"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_init_components"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_initialize_prediction_models"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_initialize_optimization_strategies"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "extract_strings"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "reset_synchronization"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "get_brain_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "stop_real_time_monitoring"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_initialize_infrastructure"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "load_models"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_register_core_models"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_meta_parameters"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__init__"
      ],
      [
        "./orchestration/brain/self_improvement/meta_learner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "setup_core_constitution"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/intent_inference.py",
        "infer_intent"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/dissonance_detector.py",
        "detect_dissonance"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/dream_generator.py",
        "generate_dream"
      ],
      [
        "./orchestration/brain/rem/dream_log.py",
        "log_dream"
      ],
      [
        "./orchestration/brain/rem/lidar_emotion_interpreter.py",
        "interpret_emotional_state"
      ],
      [
        "./orchestration/brain/rem/lidar_emotion_interpreter.py",
        "generate_collapse_hash"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_initialize_optimizers"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_default_config"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "reset_scrutiny_level"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "_build_legal_knowledge_graph"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/seamless/experience_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "_load_vocabulary"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "fetch_live_compliance_updates"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "activate_safeguards"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "recalibrate_safeguards"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "initiate_emergency_shutdown"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "recalibrate_autonomy"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compute_system_health_factor"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compute_context_entropy"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "adaptive_context_simplification"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_safe_fallback_response"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_anonymize_data"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "monitor_post_market"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "init_components"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_save_system_state"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "memory_limit"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "performance_context"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "start_monitoring"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "stop_monitoring"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "_monitor_loop"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "enable"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "disable"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "clear_profiles"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "start"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "stop"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "clear"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "cleanup_expired"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_initialize_core_components"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_initialize_lukhas_innovations"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_initialize_system_state"
      ],
      [
        "./orchestration/user_feedback/feedback_collector.py",
        "store_feedback"
      ],
      [
        "./orchestration/core_modules/signals.py",
        "__post_init__"
      ],
      [
        "./orchestration/core_modules/plugin_loader.py",
        "load_plugins"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_request_processing_loop"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_interaction_processing_loop"
      ],
      [
        "./orchestration/core_modules/symbolic_signal_router.py",
        "route_signal"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/symbolic_handshake.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "lukhas_tier_required"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "decorator"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "fetch_live_compliance_updates"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "activate_safeguards"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "recalibrate_safeguards"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "initiate_emergency_shutdown"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "recalibrate_autonomy"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compute_system_health_factor"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compute_context_entropy"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "adaptive_context_simplification"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_safe_fallback_response"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_anonymize_data"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "monitor_post_market"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_initialize_infrastructure"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_initialize_voice_handler"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_initialize_dream_engine"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "create_orchestrator_health_checks"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "__init__"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "__init__"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "_initialize_services"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "_register_dream_processing_services"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "_register_integration_services"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__str__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./governance/compliance_report_generator.py",
        "load_drift_logs"
      ],
      [
        "./governance/policy_manager.py",
        "determine_active_regulations"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/audit_logger.py",
        "__init__"
      ],
      [
        "./governance/audit_logger.py",
        "recalibrate"
      ],
      [
        "./governance/audit_logger.py",
        "escalate_to_human"
      ],
      [
        "./governance/common.py",
        "symbolic_vocabulary"
      ],
      [
        "./governance/common.py",
        "symbolic_message"
      ],
      [
        "./governance/common.py",
        "ethical_validation"
      ],
      [
        "./governance/common.py",
        "initialize"
      ],
      [
        "./governance/common.py",
        "__init__"
      ],
      [
        "./governance/common.py",
        "__init__"
      ],
      [
        "./governance/integration/policy_board.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "_ensure_service"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/controllers.py",
        "memory_retrieve_item_endpoint"
      ],
      [
        "./api/core/dream_commerce.py",
        "__init__"
      ],
      [
        "./api/core/api_hub.py",
        "__init__"
      ],
      [
        "./api/core/api_hub.py",
        "_initialize_core_services"
      ],
      [
        "./api/core/api_hub.py",
        "_register_common_endpoints"
      ],
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "__init__"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "__init__"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_initialize_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_core_symbolic_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_bio_symbolic_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_processing_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_vocabulary_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_neural_symbolic_services"
      ],
      [
        "./symbolic/__init__.py",
        "__getattr__"
      ],
      [
        "./symbolic/loop_engine.py",
        "__post_init__"
      ],
      [
        "./symbolic/loop_engine.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "log_dream_phase"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "perform_identity_operation"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_load_glyph_registry"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_save_glyph_registry"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_stabilize_topology"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "report_state"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "_decay_stress"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "reset"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "generate_cl_signature"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_bind_resource"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_induce_fission"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_induce_fusion"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "_init_mock_components"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "sigmoid"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "tanh"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/bio_symbolic.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "_initialize_default_rules"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "_initialize_core_vocabulary"
      ],
      [
        "./symbolic/features/memory_reflection_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/moral_agent_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/tracer.py",
        "to_json"
      ],
      [
        "./symbolic/features/tracer.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "update_access"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "__post_init__"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "update_symbolic_hash"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "touch"
      ],
      [
        "./symbolic/features/glyphs/__init__.py",
        "get_glyph_meaning"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_monitoring_loop"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_perform_monitoring_cycle"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_perform_cleanup_cycle"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "clear_events"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_init_drift_integration"
      ],
      [
        "./symbolic/features/collapse/buffer.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/score.py",
        "__init__"
      ],
      [
        "./symbolic/utils/symbolic_utils.py",
        "tier_label"
      ],
      [
        "./symbolic/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "__init__"
      ],
      [
        "./dream/dream_log.py",
        "log_dream"
      ],
      [
        "./dream/dream_pipeline.py",
        "dummy_evaluate"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__post_init__"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__init__"
      ],
      [
        "./dream/core.py",
        "__init__"
      ],
      [
        "./dream/visualization.py",
        "__init__"
      ],
      [
        "./dream/visualization.py",
        "_initialize_components"
      ],
      [
        "./dream/dream_mutator.py",
        "load_latest_dream"
      ],
      [
        "./dream/dream_mutator.py",
        "mutate_emotional_wave"
      ],
      [
        "./dream/dream_mutator.py",
        "mutate_dream"
      ],
      [
        "./dream/feedback_propagator.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "store_snapshot"
      ],
      [
        "./dream/dream_seed.py",
        "generate_episodic_dream"
      ],
      [
        "./dream/dream_generator.py",
        "generate_dream"
      ],
      [
        "./dream/commerce_api.py",
        "__init__"
      ],
      [
        "./dream/commerce_api.py",
        "_initialize_components"
      ],
      [
        "./dream/dream_data_sources.py",
        "__init__"
      ],
      [
        "./dream/visualization/memoryscape_viewport.py",
        "__init__"
      ],
      [
        "./dream/visualization/dream_timeline_visualizer.py",
        "render_timeline"
      ],
      [
        "./dream/visualization/dream_viewer.py",
        "display_dreams"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "__hash__"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "avg_emotions"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./dream/core/dream_seed_simple.py",
        "generate_symbol"
      ],
      [
        "./dream/core/dream_stats.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "_log_cycle_stats"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "adapt"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_emotion_bridge.py",
        "trigger_dream_replay_if_needed"
      ],
      [
        "./dream/core/dream_seed.py",
        "generate_episodic_dream"
      ],
      [
        "./dream/core/dream_seed.py",
        "generate_semantic_dream"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "synthesize"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "filter_content"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "__post_init__"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "reset_quantum_like_state"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./dream/core/dream_viewer.py",
        "display_dreams"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "ai_complete_function"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "get_translations"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "to_json"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "get_translations_for_locale"
      ],
      [
        "./dream/oneiric/oneiric_core/utils/symbolic_logger.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/utils/symbolic_logger.py",
        "get_logs"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "_log_cycle_stats"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/cli/dream_processor.py",
        "__init__"
      ],
      [
        "./dream/dashboard/dream_metrics_db.py",
        "_init_db"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "__init__"
      ],
      [
        "./dream/processors/dream_processor.py",
        "__init__"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "__init__"
      ],
      [
        "./dream/engine/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "__init__"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./emotion/models.py",
        "as_array"
      ],
      [
        "./emotion/__init__.py",
        "__getattr__"
      ],
      [
        "./emotion/emotion_hub.py",
        "__init__"
      ],
      [
        "./emotion/emotion_hub.py",
        "_initialize_core_services"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "update_bio_oscillator"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "__init__"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_compile_patterns"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "align_drift"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "update_bio_oscillator"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "__init__"
      ],
      [
        "./quantum/web_integration.py",
        "__init__"
      ],
      [
        "./quantum/web_integration.py",
        "__init__"
      ],
      [
        "./quantum/coordinator.py",
        "_create_mock_quantum_core"
      ],
      [
        "./quantum/coordinator.py",
        "_create_mock_bio_coordinator"
      ],
      [
        "./quantum/coordinator.py",
        "_create_simple_bio_coordinator"
      ],
      [
        "./quantum/service.py",
        "__init__"
      ],
      [
        "./quantum/ui_generator.py",
        "__init__"
      ],
      [
        "./quantum/awareness_system.py",
        "_cleanup_old_metrics"
      ],
      [
        "./quantum/voice_enhancer.py",
        "_enhance_voice_methods"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "rotate_keys"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "_secure_cleanup"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_initialize_quantum_bio_systems"
      ],
      [
        "./quantum/bio.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/__init__.py",
        "__getattr__"
      ],
      [
        "./quantum/bio_components.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/integration.py",
        "setUp"
      ],
      [
        "./quantum/integration.py",
        "test_superposition_transition"
      ],
      [
        "./quantum/integration.py",
        "test_entanglement"
      ],
      [
        "./quantum/integration.py",
        "test_decoherence"
      ],
      [
        "./quantum/integration.py",
        "test_measurement"
      ],
      [
        "./quantum/integration.py",
        "test_orchestrator_quantum_management"
      ],
      [
        "./quantum/integration.py",
        "test_generate_quantum_values"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/certificate_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_advance_capability_level"
      ],
      [
        "./quantum/layer.py",
        "measure"
      ],
      [
        "./quantum/layer.py",
        "__repr__"
      ],
      [
        "./quantum/layer.py",
        "__post_init__"
      ],
      [
        "./quantum/layer.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./quantum/layer.py",
        "reset_oscillator"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/safe_blockchain.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_create_mock_id_manager"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_cleanup_cache"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/processing_core.py",
        "__init__"
      ],
      [
        "./quantum/main.py",
        "__init__"
      ],
      [
        "./quantum/main.py",
        "get_consciousness_state"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_discover_and_register_agi_bots"
      ],
      [
        "./quantum/api_manager.py",
        "__init__"
      ],
      [
        "./quantum/phase_quantum_integration.py",
        "__init__"
      ],
      [
        "./quantum/core/engine.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_initialize_superposition"
      ],
      [
        "./quantum/privacy/zero_knowledge_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "normalize"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "oracle"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "cost_function"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "_initialize_priority_services"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "fetch_live_compliance_updates"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "activate_safeguards"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "recalibrate_safeguards"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "initiate_emergency_shutdown"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "recalibrate_autonomy"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compute_system_health_factor"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compute_context_entropy"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "adaptive_context_simplification"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_safe_fallback_response"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_anonymize_data"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "monitor_post_market"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "sync_cluster_states"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__post_init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_attention_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_state_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_integration_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_bridge_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "to_dict"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "get_status"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_load_connectivity_analysis"
      ]
    ],
    "1:Dict": [
      [
        "./tools/radical_simplifier.py",
        "analyze_codebase"
      ],
      [
        "./bio/symbolic_entropy_observer.py",
        "get_latest_entropy_snapshot"
      ],
      [
        "./core/id.py",
        "to_dict"
      ],
      [
        "./core/id.py",
        "to_dict"
      ],
      [
        "./core/id.py",
        "_load_compliance_rules"
      ],
      [
        "./core/id.py",
        "get_compliance_status"
      ],
      [
        "./core/identity/mapper.py",
        "get_status"
      ],
      [
        "./core/identity/processor.py",
        "get_status"
      ],
      [
        "./core/identity/engine.py",
        "get_status"
      ],
      [
        "./core/identity/persona_engine.py",
        "get_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "get_biological_status"
      ],
      [
        "./memory/systems/processor.py",
        "get_status"
      ],
      [
        "./memory/systems/memory_validator.py",
        "get_status"
      ],
      [
        "./memory/systems/simple_memory.py",
        "read_all_memory"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "get_validation_stats"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_load_validation_rules"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "get_entropy_statistics"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_load_tier_requirements"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "get_generation_stats"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_load_tier_permissions"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_get_default_tier_config"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_build_progression_map"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "_load_cultural_norms"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "_load_human_rights_charter"
      ],
      [
        "./learning/federated_meta_learning.py",
        "serialize"
      ],
      [
        "./learning/federated_meta_learning.py",
        "reflect"
      ],
      [
        "./learning/federated_meta_learning.py",
        "get_status_report"
      ],
      [
        "./learning/federated_meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./learning/federated_meta_learning.py",
        "trigger_reflection"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "serialize"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "reflect"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_status_report"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "generate_learning_report"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "trigger_reflection"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_initialize_strategies"
      ],
      [
        "./learning/federated_learning_system.py",
        "serialize"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_system_status"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "generate_learning_report"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_initialize_strategies"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_analyze_performance_trends"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_analyze_performance_trends"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_load_device_profiles"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_load_components"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_get_base_style"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "serialize"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "reflect"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_status_report"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "trigger_reflection"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "serialize"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_system_status"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_default_consciousness_config"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "to_dict"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "get_status"
      ],
      [
        "./consciousness/systems/validator.py",
        "get_status"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "get_status"
      ],
      [
        "./consciousness/systems/state.py",
        "get_status"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "get_status"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_load_compliance_rules"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "get_compliance_status"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_load_compliance_rules"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "get_compliance_status"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "get_causal_insights"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "get_causal_insights"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "get_symbolic_insights"
      ],
      [
        "./ethics/compliance_validator.py",
        "get_status"
      ],
      [
        "./voice/validator.py",
        "get_status"
      ],
      [
        "./voice/recognition.py",
        "get_status"
      ],
      [
        "./voice/speech_engine.py",
        "get_status"
      ],
      [
        "./voice/audio_processor.py",
        "get_status"
      ],
      [
        "./voice/audio_engine.py",
        "get_status"
      ],
      [
        "./orchestration/workflow_engine.py",
        "get_status"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_productivity_insights"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_analyze_bottlenecks"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_ai_predictions"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_analyze_performance_trends"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_assess_capability_level"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "get_agi_status"
      ],
      [
        "./orchestration/brain/controller.py",
        "get_system_metrics"
      ],
      [
        "./orchestration/brain/controller.py",
        "_analyze_memory_patterns"
      ],
      [
        "./orchestration/brain/controller.py",
        "_update_causal_models"
      ],
      [
        "./orchestration/brain/controller.py",
        "_calibrate_prediction_models"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "generate_learning_report"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_initialize_strategies"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "get_agi_status"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "get_agi_status"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "get_attention_state"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "get_priority_services_for_agi"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "create_12_month_roadmap"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "calculate_cost_savings"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "_load_secure_config"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "get_status"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "predict_all_resources"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "get_prediction_statistics"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "serialize"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "reflect"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_status_report"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "generate_learning_report"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "trigger_reflection"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_initialize_strategies"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "reflect"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "get_status_report"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "analyze_system_performance"
      ],
      [
        "./orchestration/brain/neural/neural_intelligence_main.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/neural/neural_intelligence_main.py",
        "get_innovations_status"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "get_lukhas_innovations_status"
      ],
      [
        "./orchestration/user_feedback/symbolic_tuner.py",
        "apply_feedback_adjustments"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "get_status"
      ],
      [
        "./quantum/validator.py",
        "get_status"
      ],
      [
        "./quantum/processor.py",
        "get_status"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "get_biological_status"
      ],
      [
        "./quantum/entanglement.py",
        "get_status"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "get_self_assessment_report"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "get_status"
      ]
    ],
    "3:None": [
      [
        "./tools/radical_simplifier.py",
        "_analyze_imports"
      ],
      [
        "./tools/radical_simplifier.py",
        "_find_duplicates"
      ],
      [
        "./tools/radical_simplifier.py",
        "execute_phase_1_delete"
      ],
      [
        "./tools/speak.py",
        "log_output"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_process_class"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "add_relationship"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "update_user_preferences"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "check_missing_dependencies"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "scan_for_capabilities"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_check_class_name"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_check_function_name"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "train_model"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "_calculate_baselines"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "register_notification_handler"
      ],
      [
        "./bio/endocrine_integration.py",
        "_handle_state_change"
      ],
      [
        "./bio/simulation_controller.py",
        "trigger_phase_shift"
      ],
      [
        "./bio/simulation_controller.py",
        "inject_stimulus"
      ],
      [
        "./bio/simulation_controller.py",
        "register_state_callback"
      ],
      [
        "./bio/core.py",
        "__init__"
      ],
      [
        "./bio/recovery_protocol.py",
        "__init__"
      ],
      [
        "./bio/bio_hub.py",
        "register_service"
      ],
      [
        "./bio/bio_hub.py",
        "register_event_handler"
      ],
      [
        "./bio/core/hormonal_system.py",
        "register_effect_callback"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_tag_for_methylation"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "register_service"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_tag_anomaly_status"
      ],
      [
        "./bio/core/symbolic_dna_simulator.py",
        "entangle_with_colony"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_update_stats"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "update_mood"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "_log_event"
      ],
      [
        "./bio/embodiment/body_state.py",
        "update_joint"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./trace/symbolic_trace_logger.py",
        "log_symbolic_event"
      ],
      [
        "./trace/restabilization_index.py",
        "link_to_drift"
      ],
      [
        "./trace/drift_alignment_controller.py",
        "__init__"
      ],
      [
        "./trace/drift_dashboard.py",
        "_check_alerts"
      ],
      [
        "./trace/entropy/radar.py",
        "__init__"
      ],
      [
        "./trace/entropy/radar.py",
        "_render_matplotlib_graph"
      ],
      [
        "./trace/entropy/radar.py",
        "_render_plotly_graph"
      ],
      [
        "./trace/entropy/radar.py",
        "_export_markdown_summary"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_trigger_cascade_alert"
      ],
      [
        "./core/minimal_actor.py",
        "__init__"
      ],
      [
        "./core/fault_tolerance.py",
        "add_child"
      ],
      [
        "./core/fault_tolerance.py",
        "handle_failure"
      ],
      [
        "./core/fault_tolerance.py",
        "_escalate_failure"
      ],
      [
        "./core/integrated_system.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "create_agent"
      ],
      [
        "./core/swarm.py",
        "populate_agents"
      ],
      [
        "./core/swarm.py",
        "handle_failure"
      ],
      [
        "./core/symbolic_contract.py",
        "validate_propagation"
      ],
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/distributed_tracing.py",
        "add_tag"
      ],
      [
        "./core/distributed_tracing.py",
        "add_log"
      ],
      [
        "./core/distributed_tracing.py",
        "set_baggage_item"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "finish_span"
      ],
      [
        "./core/distributed_tracing.py",
        "trace_operation"
      ],
      [
        "./core/distributed_tracing.py",
        "take_snapshot"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/p2p_fabric.py",
        "__init__"
      ],
      [
        "./core/p2p_fabric.py",
        "_handle_connection"
      ],
      [
        "./core/p2p_fabric.py",
        "connect"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_handle_event"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_handle_call_for_proposals"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_publish_result"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_publish_failure"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_handle_result_event"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_publish_completion_event"
      ],
      [
        "./core/image_processing_pipeline.py",
        "subscribe"
      ],
      [
        "./core/image_processing_pipeline.py",
        "publish"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_update_drift_phase"
      ],
      [
        "./core/oracle_nervous_system.py",
        "_update_performance_metrics"
      ],
      [
        "./core/tier_unification_adapter.py",
        "create_unified_decorator"
      ],
      [
        "./core/core_hub.py",
        "register_service"
      ],
      [
        "./core/core_hub.py",
        "register_event_handler"
      ],
      [
        "./core/cluster_sharding.py",
        "move_actor"
      ],
      [
        "./core/enhanced_swarm.py",
        "_update_trust"
      ],
      [
        "./core/enhanced_swarm.py",
        "_establish_colony_links"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "create_agent"
      ],
      [
        "./core/event_sourcing.py",
        "update_memory"
      ],
      [
        "./core/event_sourcing.py",
        "add_capability"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "resolve"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "export_metrics"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/module_registry.py",
        "require_module_tier"
      ],
      [
        "./core/event_bus.py",
        "unsubscribe"
      ],
      [
        "./core/notion_sync.py",
        "make_toggle_block"
      ],
      [
        "./core/notion_sync.py",
        "make_flat_block"
      ],
      [
        "./core/notion_sync.py",
        "process"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/bot.py",
        "__init__"
      ],
      [
        "./core/common.py",
        "__init__"
      ],
      [
        "./core/common.py",
        "add_metadata"
      ],
      [
        "./core/efficient_communication.py",
        "record_message_sent"
      ],
      [
        "./core/efficient_communication.py",
        "subscribe"
      ],
      [
        "./core/efficient_communication.py",
        "unsubscribe"
      ],
      [
        "./core/efficient_communication.py",
        "subscribe_to_events"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "record_system_event"
      ],
      [
        "./core/observability_steering.py",
        "register_steering_policy"
      ],
      [
        "./core/observability_steering.py",
        "_log_intervention"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "register_visualization"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/task_manager.py",
        "add_queue"
      ],
      [
        "./core/task_manager.py",
        "register_agent"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "add_span_event"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "_update_metrics"
      ],
      [
        "./core/tiered_state_management.py",
        "subscribe_to_replicated_state"
      ],
      [
        "./core/tiered_state_management.py",
        "unsubscribe_from_replicated_state"
      ],
      [
        "./core/direct_ai_router.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "verify_user_access"
      ],
      [
        "./core/identity_aware_base.py",
        "check_consent"
      ],
      [
        "./core/agent_coordination.py",
        "update_metrics"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/coordination.py",
        "__init__"
      ],
      [
        "./core/coordination.py",
        "__init__"
      ],
      [
        "./core/identity_integration.py",
        "__init__"
      ],
      [
        "./core/identity_integration.py",
        "memory_operation_example"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "register_handler"
      ],
      [
        "./core/actor_system.py",
        "register_response_handler"
      ],
      [
        "./core/actor_system.py",
        "handle_response"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/p2p_communication.py",
        "register_handler"
      ],
      [
        "./core/governance.py",
        "__init__"
      ],
      [
        "./core/state_management.py",
        "__init__"
      ],
      [
        "./core/state_management.py",
        "apply_event"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "__init__"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "_apply_operations"
      ],
      [
        "./core/colonies/base_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/base_colony.py",
        "request_permission_escalation"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/reasoning_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/reasoning_colony.py",
        "propagate_tags"
      ],
      [
        "./core/identity/manager.py",
        "update_vector"
      ],
      [
        "./core/identity/manager.py",
        "create_hash"
      ],
      [
        "./core/identity/manager.py",
        "store_hash"
      ],
      [
        "./core/identity/manager.py",
        "_calculate_hash_similarity"
      ],
      [
        "./core/identity/manager.py",
        "unlock"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "add_data_route"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "add_event_callback"
      ],
      [
        "./core/personality/personality.py",
        "update_shyness"
      ],
      [
        "./core/personality/personality.py",
        "set_cultural_preference"
      ],
      [
        "./core/personality/creative_personality.py",
        "_update_metrics"
      ],
      [
        "./core/personality/creative_personality.py",
        "_federated_update"
      ],
      [
        "./core/personality/creative_personality.py",
        "optimize_learning_approach"
      ],
      [
        "./core/personality/creative_personality.py",
        "get_model_output"
      ],
      [
        "./core/personality/creative_personality.py",
        "get_model"
      ],
      [
        "./core/personality/creative_expressions.py",
        "__init__"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_build_line"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_expand_haiku"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_update_metrics"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_federated_update"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "optimize_learning_approach"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "get_model_output"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "get_model"
      ],
      [
        "./core/introspection/introspector.py",
        "_process_special_tags"
      ],
      [
        "./core/introspection/introspector.py",
        "_analyze_ast"
      ],
      [
        "./core/bridges/core_consciousness_bridge.py",
        "__init__"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "_log_violation"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "__init__"
      ],
      [
        "./core/safety/safety_hub.py",
        "register_service"
      ],
      [
        "./core/safety/safety_hub.py",
        "register_event_handler"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/ai/integration_manager.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/symbolism/archiver.py",
        "__init__"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "__init__"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "emit_voice_alert"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "replay_memories"
      ],
      [
        "./core/meta_learning/federated_integration.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "register_health_check"
      ],
      [
        "./core/telemetry/monitoring.py",
        "register_alert_handler"
      ],
      [
        "./core/telemetry/monitoring.py",
        "set_baseline"
      ],
      [
        "./core/telemetry/monitoring.py",
        "register_anomaly_detector"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "add_metadata"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "_update_loop_statistics"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./core/monitoring/collapse_integration.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "refine_intent"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "retrieve"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "update_progress"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "subscribe"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "__init__"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "register_service"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "register_event_handler"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "_update_average_metric"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "_update_average_metric"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_update_biological_metrics"
      ],
      [
        "./core/base/base_config.py",
        "set"
      ],
      [
        "./core/base/symbolic.py",
        "__init__"
      ],
      [
        "./core/base/base_module.py",
        "__init__"
      ],
      [
        "./core/interfaces/main.py",
        "log_event"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "set_user_preference"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "get_user_preference"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "toggle_widget_visibility"
      ],
      [
        "./core/interfaces/ui/components/audio_exporter.py",
        "get_env_var"
      ],
      [
        "./core/interfaces/tools/dao/dao_vote.py",
        "cast_vote"
      ],
      [
        "./core/interfaces/tools/dao/dao_propose.py",
        "submit_proposal"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "add_event_handler"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_update_indices"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_fire_event"
      ],
      [
        "./core/interfaces/logic/consent_manager.py",
        "verify_or_revoke"
      ],
      [
        "./core/interfaces/dashboard/api/websocket_server.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/listen.py",
        "log_daily_entry"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_log_ethical_concerns"
      ],
      [
        "./core/interfaces/api/v1/grpc/client.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/rest/app.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/auth/vendor_hospitality_sync.py",
        "pair_with_vendor"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "share_preferences"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "pair_device"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/feedback_log_viewer.py",
        "view_feedback"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/symbolic_reply_generator.py",
        "generate_symbolic_reply"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "save_tags_to_file"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "receive_partner_input"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/schedule_manager.py",
        "is_time_to_deliver"
      ],
      [
        "./core/interfaces/as_agent/widgets/terminal_widget.py",
        "render_terminal_widget"
      ],
      [
        "./core/interfaces/as_agent/widgets/terminal_widget.py",
        "show_dst_status"
      ],
      [
        "./core/interfaces/as_agent/widgets/delivery_tracker_widget.py",
        "update_delivery_status"
      ],
      [
        "./core/hub_services/coordinator.py",
        "register_module_handler"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_factory"
      ],
      [
        "./memory/service.py",
        "configure_storage"
      ],
      [
        "./memory/services.py",
        "_update_index"
      ],
      [
        "./memory/memory_hub.py",
        "register_service"
      ],
      [
        "./memory/memory_hub.py",
        "register_event_handler"
      ],
      [
        "./memory/fold_engine.py",
        "update"
      ],
      [
        "./memory/fold_engine.py",
        "_update_drift_metrics"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_update_metrics"
      ],
      [
        "./memory/emotional.py",
        "_update_current_emotional_state"
      ],
      [
        "./memory/emotional.py",
        "_activate_emotion_identity_fuse"
      ],
      [
        "./memory/core.py",
        "add_vector"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "add_vector"
      ],
      [
        "./memory/memory_optimization.py",
        "_store_in_tier"
      ],
      [
        "./memory/memory_optimization.py",
        "release_pooled_object"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/dashboard.py",
        "_cache_data"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_entangle_quantum_like_states"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_record_drift_event"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_update_emotion_history"
      ],
      [
        "./memory/drift_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_record_drift_event"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "__init__"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_track_user_memory"
      ],
      [
        "./memory/loop_monitor.py",
        "report_entanglement"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_entangle_quantum_like_states"
      ],
      [
        "./memory/visualizer.py",
        "launch_3d_viewer"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_process_text_vault"
      ],
      [
        "./memory/core/base_manager.py",
        "__init__"
      ],
      [
        "./memory/core/base_manager.py",
        "_save_to_disk"
      ],
      [
        "./memory/core/base_manager.py",
        "_update_index"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_create_memory_metadata"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_update_indices"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "register_interface"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "register_factory"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "_update_indices"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "update_strength"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_update_indices"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_remove_from_indices"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "phase_lock"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "register_phase_callback"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "update_priority"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "update_priorities"
      ],
      [
        "./memory/memory_systems/memoria-checkpoint.py",
        "store"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "register_memory_interface"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "register_interface_factory"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "register_colony"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "_cache_memory"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "add_audit_entry"
      ],
      [
        "./memory/fold_system/foldout_simple.py",
        "create_fold_bundle"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "add_vector"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "add_vector"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/hooks/registry.py",
        "__init__"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_update_motif_database"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "update_priority"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "update_priorities"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "_update_colony_tags"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "set_by_id"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "set_by_key"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "export_memory_timeline"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "export_memory_timeline_raw"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "update"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "set"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "_write_to_mem_cache"
      ],
      [
        "./memory/systems/symbolic_snapshot.py",
        "create_snapshot"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "add_reality_anchor"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "_check_for_instability"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_loop_rebuilder.py",
        "rebuild_loop"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "_find_semantic_relations"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "run_multi_cycle_recursion"
      ],
      [
        "./memory/systems/memory_reflector.py",
        "store_interaction"
      ],
      [
        "./memory/systems/memory_helix.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "add_memory"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_resonance_analyzer.py",
        "analyze_resonance"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "codegen_create"
      ],
      [
        "./memory/systems/memory_planning.py",
        "codegen_destroy"
      ],
      [
        "./memory/systems/__init__.py",
        "store_trace"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_update_strategy_performance_record"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_tune_strategy_parameters"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_plot_figure"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_post_forward_hook"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_backward_hook"
      ],
      [
        "./memory/systems/trace_injector.py",
        "end_memory_operation"
      ],
      [
        "./memory/systems/agent_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_checkpoint.py",
        "store"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_bases.py",
        "link_memory_to_identity"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_stabilizer.py",
        "stabilize_memory"
      ],
      [
        "./memory/systems/memory_helix_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_helix_visualizer.py",
        "update_memory_links"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "register_trust_callback"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "set_module_drift_threshold"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "register_calibration_callback"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "register_validation_callback"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "register_colony_validator"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "_update_knowledge_base"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "put"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "store_embedding"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_frames_fmt"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_write_blocks"
      ],
      [
        "./memory/systems/memory_viz.py",
        "compare"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_format_viz"
      ],
      [
        "./memory/systems/memory_viz.py",
        "trace_plot"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "_update_colony_performance"
      ],
      [
        "./memory/systems/voice_memory_bridge.py",
        "process_voice_memory"
      ],
      [
        "./memory/systems/voice_memory_bridge.py",
        "_calculate_resonance"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_persist_memory"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "speak"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "_merge_implementations"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "add_checkpoint"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "prune_unused"
      ],
      [
        "./identity/qrg_integration.py",
        "_log_generation"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/identity_hub.py",
        "register_service"
      ],
      [
        "./identity/identity_hub.py",
        "register_event_handler"
      ],
      [
        "./identity/privacy_manager.py",
        "set_privacy_setting"
      ],
      [
        "./identity/privacy_manager.py",
        "set_user_permissions"
      ],
      [
        "./identity/privacy_manager.py",
        "apply_retention_policy"
      ],
      [
        "./identity/connector.py",
        "connect_to_module"
      ],
      [
        "./identity/connector.py",
        "configure_auth"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "update_entropy"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "link_session"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "resolve_conflict"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "exchange_public_keys"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "simulate_session_token_collision"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "track_entropy_reliability"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "update_regional_preferences"
      ],
      [
        "./identity/auth_utils/replay_protection.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/replay_protection.py",
        "add_nonce"
      ],
      [
        "./identity/auth_utils/replay_protection.py",
        "is_replay"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_update_vault_usage_stats"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_register_qrg_mapping"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_register_public_hash_mapping"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "register_user"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "store"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "update"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_generate_entropy_recommendations"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_track_entropy_history"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/mnemonic.py",
        "to_seed"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_store_entropy_analysis"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "__init__"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "__init__"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_geo_symbolic_trace"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_entropy_drift"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "detect_anomalies"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "generate_insights"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "__init__"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "_log_to_trace"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "create_policy"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "update_policy"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "check_compliance"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_update_usage_stats"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "register_event_handler"
      ],
      [
        "./identity/core/qrs/qrg_generator.py",
        "generate_pairing_code"
      ],
      [
        "./identity/core/qrs/qrg_generator.py",
        "validate_pairing_code"
      ],
      [
        "./identity/core/qrs/session_replay.py",
        "create_replay_session"
      ],
      [
        "./identity/core/qrs/session_replay.py",
        "restore_session"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_register_qrg_mapping"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_invalidate_token"
      ],
      [
        "./identity/core/sing/cross_device_manager.py",
        "sync_token_to_device"
      ],
      [
        "./identity/core/sing/cross_device_manager.py",
        "get_device_tokens"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "__init__"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "validate_tier_requirements"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "check_tier_eligibility"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "start_broadcast"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "assign_entropy_weight"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "track_contribution"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "register_environmental_trigger"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "_log_enforcement_action"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "__init__"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "__init__"
      ],
      [
        "./identity/governance/policy_board.py",
        "__init__"
      ],
      [
        "./identity/governance/policy_board.py",
        "cast_vote"
      ],
      [
        "./identity/api/api.py",
        "authenticate_with_symbolic_challenge"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "set_user_preference"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "get_user_preference"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "toggle_widget_visibility"
      ],
      [
        "./config/dashboard_settings.py",
        "set_user_preference"
      ],
      [
        "./config/dashboard_settings.py",
        "get_user_preference"
      ],
      [
        "./config/dashboard_settings.py",
        "toggle_widget_visibility"
      ],
      [
        "./security/moderator.py",
        "__init__"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_add_audit_entry"
      ],
      [
        "./security/risk_management/risk_management_hooks.py",
        "risk_mitigation_check"
      ],
      [
        "./creativity/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_expression_core.py",
        "__init__"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_build_line"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_expand_haiku"
      ],
      [
        "./creativity/creative_market.py",
        "__init__"
      ],
      [
        "./creativity/creative_market.py",
        "update_reputation"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "__init__"
      ],
      [
        "./creativity/voice_integrator.py",
        "_record_session_usage"
      ],
      [
        "./creativity/personality/brain.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "optimize_learning_approach"
      ],
      [
        "./creativity/personality/creative_core.py",
        "get_model"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_run_model"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_update_federated_models"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "__init__"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_build_line"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_expand_haiku"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_update_metrics"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "_update_module_stats"
      ],
      [
        "./bridge/trace_logger.py",
        "log_symbolic_event"
      ],
      [
        "./bridge/model_communication_engine.py",
        "sinusoids"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "logits"
      ],
      [
        "./bridge/model_communication_engine.py",
        "save_to_cache"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/learning_hub.py",
        "register_service"
      ],
      [
        "./learning/learning_hub.py",
        "register_event_handler"
      ],
      [
        "./learning/learning_hub.py",
        "register_learning_feedback"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/usage_learning.py",
        "update_user_preferences"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/enhancement_engine.py",
        "start_sprint"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "__init__"
      ],
      [
        "./learning/exponential_learning.py",
        "_update_knowledge"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/_dict_learning.py",
        "_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "_inverse_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "fit"
      ],
      [
        "./learning/_dict_learning.py",
        "transform"
      ],
      [
        "./learning/_dict_learning.py",
        "fit"
      ],
      [
        "./learning/_dict_learning.py",
        "fit_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "_initialize_dict"
      ],
      [
        "./learning/_dict_learning.py",
        "fit"
      ],
      [
        "./learning/_dict_learning.py",
        "partial_fit"
      ],
      [
        "./learning/federated_colony_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_colony_learning.py",
        "__init__"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "_calculate_duration"
      ],
      [
        "./learning/embodied_thought/generative_reflex.py",
        "load_reflex"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_update_node_trust"
      ],
      [
        "./learning/systems/voice_duet.py",
        "synthesize_voice"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_update_node_trust"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "update_skill_level"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "create_entanglement"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "_record_state_transition"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_update_knowledge"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "log_interaction"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_update_metrics"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_update_pattern_memory"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "clip"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "__init__"
      ],
      [
        "./consciousness/systems/consciousness_colony_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/consciousness_colony_integration.py",
        "_update_colony_metrics"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "__init__"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "dream_to_memory_feedback"
      ],
      [
        "./consciousness/systems/reflection/reflection.py",
        "write_reflection_event"
      ],
      [
        "./tests/simulation/agents_of_failure.py",
        "__init__"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "register_service"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "connect_to_hub"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_update_evaluation_metrics"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "register_service"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "_record_emotional_alignment"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "emit_collapse_event"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "log_entropy_threshold_crossing"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "_adjust_weights"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_update_causal_graph_knowledge"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_add_to_reasoning_history"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "add_conclusion"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "remember"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "search"
      ],
      [
        "./reasoning/ethical/ConsentManager.py",
        "verify_or_revoke"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_are_elements_related"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "update_goal_progress"
      ],
      [
        "./reasoning/utils/agentic_trace.py",
        "log_action"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_update_history"
      ],
      [
        "./reasoning/decision/bridge.py",
        "register_decision_strategy"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_validate_decision_inputs"
      ],
      [
        "./ethics/compliance_engine.py",
        "add_laplace_noise"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "add_event_callback"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "resolve_human_review"
      ],
      [
        "./ethics/oscillating_conscience.py",
        "__init__"
      ],
      [
        "./ethics/compliance.py",
        "_update_plugin_risk_score"
      ],
      [
        "./ethics/intrinsic_governor.py",
        "__init__"
      ],
      [
        "./ethics/compliance_simple.py",
        "_update_plugin_risk_score"
      ],
      [
        "./ethics/policy_manager.py",
        "log_active_regulations"
      ],
      [
        "./ethics/_spikethickness.py",
        "__init__"
      ],
      [
        "./ethics/engine.py",
        "__init__"
      ],
      [
        "./ethics/governance_checker.py",
        "log_governance_trace"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_update_metrics"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "configure_oversight"
      ],
      [
        "./ethics/hitlo_bridge_simple.py",
        "configure_oversight"
      ],
      [
        "./ethics/meg_bridge.py",
        "add_meg_callback"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/ethics_integration.py",
        "_record_decision"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "apply_symbolic_correction"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "generate_entanglement_heatmap"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "plot_phase_synchronization"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_export_markdown_report"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_export_html_report"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_export_json_snapshot"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "register_subsystem_callback"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_update_stats"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_calculate_duration"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_update_ethical_state"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "register_symbol"
      ],
      [
        "./ethics/policy_engines/base.py",
        "_update_metrics"
      ],
      [
        "./ethics/policy_engines/base.py",
        "register_policy"
      ],
      [
        "./voice/personality.py",
        "__init__"
      ],
      [
        "./voice/personality.py",
        "_update_emotional_state"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "__init__"
      ],
      [
        "./voice/integrator.py",
        "_record_session_usage"
      ],
      [
        "./voice/interface.py",
        "__init__"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "__init__"
      ],
      [
        "./voice/voice_hub.py",
        "register_service"
      ],
      [
        "./voice/speech_processor.py",
        "get_speaker_identity"
      ],
      [
        "./voice/adaptation_module.py",
        "get_voice_settings"
      ],
      [
        "./voice/adaptation_module.py",
        "log_awakening_event"
      ],
      [
        "./voice/bio_core/oscillator/quantum_layer.py",
        "__init__"
      ],
      [
        "./voice/integrations/elevenlabs/elevenlabs_client.py",
        "__init__"
      ],
      [
        "./voice/integrations/openai/dalle_client.py",
        "__init__"
      ],
      [
        "./voice/integrations/openai/whisper_client.py",
        "__init__"
      ],
      [
        "./orchestration/integration_hub.py",
        "_update_phase"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/main_node.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/service_registry.py",
        "register_service"
      ],
      [
        "./orchestration/service_registry.py",
        "register_factory"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "register_system_handler"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "__init__"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "ping"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "record_execution"
      ],
      [
        "./orchestration/config/migration_router.py",
        "should_use_new_orchestrator"
      ],
      [
        "./orchestration/security/LGOV_validator.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_record_api_call"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "register_component"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_evaluate_and_modify"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "canadian_audit_log"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_record_us_processing_activity"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "structured_log"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_update_node_trust"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_handle_processing_error"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_record_processing_activity"
      ],
      [
        "./orchestration/brain/adaptive_image_generator.py",
        "_update_cache"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_should_generate_image"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "create_transparent_decision"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_update_learning_progress"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_update_research_tracking"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "structured_log"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_persist_to_store"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "register_process"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "uk_audit_log"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/llm_engine.py",
        "generate"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "_make_api_call_with_override"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_update_strategy_performance"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "set_privacy_setting"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "set_user_permissions"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "apply_retention_policy"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "register_component"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "orchestrate"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "check_compliance"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "structured_log"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_persist_to_store"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "australian_audit_log"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/demo.py",
        "modulate_voice"
      ],
      [
        "./orchestration/brain/demo.py",
        "validate_response"
      ],
      [
        "./orchestration/brain/demo.py",
        "validate_voice_parameters"
      ],
      [
        "./orchestration/brain/demo.py",
        "check_voice_data_compliance"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "track_conservation"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "mark_recommendation_applied"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_handle_institutional_error"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "add_node"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "add_edge"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "update_memory_links"
      ],
      [
        "./orchestration/brain/tracing/trace_tools.py",
        "filter_trace_by_column"
      ],
      [
        "./orchestration/brain/tracing/trace_tools.py",
        "export_filtered_trace_jsonl"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "chat_completion"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "elevenlabs_speak"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "send_message"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "log_emotion"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "decay_traits"
      ],
      [
        "./orchestration/brain/spine/emotion_mapper.py",
        "map_ethics_to_emotion"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "add_data_point"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_check_optimization_needed"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_strategy_performance"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "add_temporal_chain"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "update_property"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_should_generate_image"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "_check_permissions"
      ],
      [
        "./orchestration/brain/subsystems/__init__.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "create_ethical_circuit"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "measure_ethical_state"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "modulate_emotion"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "generate_reflection"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "translate"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "generate_opinion"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "reword_draft"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "map"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_signal_handler"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_update_module_status_post_optimization"
      ],
      [
        "./orchestration/core_modules/symbolic_handshake.py",
        "register_module"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "create_ethical_circuit"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "measure_ethical_state"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "explain_decision"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "modulate_emotion"
      ],
      [
        "./orchestration/monitoring/sub_agents/memory_cleaner.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "__init__"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "register_service"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "register_event_handler"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "register_signal_handler"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "register_message_handler"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "add_lifecycle_hook"
      ],
      [
        "./governance/policy_manager.py",
        "log_active_regulations"
      ],
      [
        "./governance/audit_logger.py",
        "log_drift_event"
      ],
      [
        "./governance/common.py",
        "set"
      ],
      [
        "./governance/common.py",
        "update_metric"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "__init__"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "_log_event"
      ],
      [
        "./api/core/api_hub.py",
        "register_service"
      ],
      [
        "./api/core/api_hub.py",
        "register_endpoint"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "register_service"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "register_event_handler"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "log_bio"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "log_foundry_event"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_log_foundry_event"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "set_temporal_link"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "calculate_emotional_delta"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "set_intent_tag"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "set_retrieval_filter"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "add_decay_handler"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_check_integrity"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_check_expiration"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_fire_decay_handlers"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_fire_integrity_handlers"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "emit_collapse_event"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "log_entropy_threshold_crossing"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "_append_log"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "record_collapse"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_trigger_cascade_prevention"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_report_to_drift_monitor"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_update_collapse_tracking"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_trigger_cascade_safety_measures"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_alert_collapse_reasoner"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_trigger_cascade_safety_measures"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_alert_collapse_reasoner"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "register_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "_track_dream_memory_causation"
      ],
      [
        "./dream/dream_seed.py",
        "seed_dream"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "__init__"
      ],
      [
        "./dream/visualization/dream_timeline_visualizer.py",
        "__init__"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "cli_analysis"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "__init__"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "render_theme_overview"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_render_json_overview"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_render_markdown_overview"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_loop_generator.py",
        "generate_loop"
      ],
      [
        "./dream/core/dream_snapshot.py",
        "save_snapshot"
      ],
      [
        "./dream/core/dream_feedback_controller.py",
        "_select_redirect"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "modulate_voice_output"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_register_in_symbolic_world"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_log_symbolic_commentary"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "update_memory_metrics"
      ],
      [
        "./dream/rl/rl_dream_cycle.py",
        "__init__"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "react"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "__init__"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "_log_to_file"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "__init__"
      ],
      [
        "./emotion/emotion_hub.py",
        "register_service"
      ],
      [
        "./emotion/cycler.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/affect_detection/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./quantum/coordinator.py",
        "_update_processing_stats"
      ],
      [
        "./quantum/healix_mapper.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "register_oscillator"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/dream_adapter.py",
        "__init__"
      ],
      [
        "./quantum/consensus_system.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "protect_session_data"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_update_biological_metrics"
      ],
      [
        "./quantum/bio_system.py",
        "adapt_models"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/processing_core.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_causal_graph"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_should_generate_image"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_apply_rotation"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "_update_system_state_metrics"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "register_service"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "create_ethical_circuit"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "measure_ethical_state"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "explain_decision"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "register_glyph_state"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "add_signature"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "add_vote"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "register_service"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "register_event_handler"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "__init__"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_update_pattern_statistics"
      ]
    ],
    "2:str": [
      [
        "./tools/radical_simplifier.py",
        "_function_fingerprint"
      ],
      [
        "./tools/radical_simplifier.py",
        "generate_simplification_plan"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_extract_type_hint"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "_get_annotation_string"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "generate_api_docs"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_to_snake_case"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_to_pascal_case"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_suggest_file_name"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "generate_markdown_docs"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_get_function_signature"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_get_class_structure"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_get_import_pattern"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_update_hash_chain"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_compute_file_hash"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "_extract_tag_from_path"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "_get_module_name"
      ],
      [
        "./bio/bio_utilities.py",
        "inject_narrative_repair"
      ],
      [
        "./bio/simulation_controller.py",
        "_calculate_overall_state"
      ],
      [
        "./bio/bio_affect_model.py",
        "inject_narrative_repair"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_assess_overall_quality"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_create_data_signature"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_assess_network_health"
      ],
      [
        "./trace/drift_alignment_controller.py",
        "suggest_modulation"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_get_user_tier"
      ],
      [
        "./trace/diagnostics/engine.py",
        "get_critical_alert_message"
      ],
      [
        "./core/ai_interface.py",
        "ai_audit"
      ],
      [
        "./core/ai_interface.py",
        "ai_docs"
      ],
      [
        "./core/ai_interface.py",
        "ai_chat"
      ],
      [
        "./core/ai_interface.py",
        "ai_research"
      ],
      [
        "./core/ai_interface.py",
        "security_audit"
      ],
      [
        "./core/ai_interface.py",
        "web_research"
      ],
      [
        "./core/ai_interface.py",
        "documentation_assist"
      ],
      [
        "./core/ai_interface.py",
        "creative_generation"
      ],
      [
        "./core/ai_interface.py",
        "chat"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_time_to_oom"
      ],
      [
        "./core/integrator.py",
        "sign_message"
      ],
      [
        "./core/id.py",
        "_generate_quantum_signature"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_infer_class_name"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_event_type_to_stage"
      ],
      [
        "./core/integrated_safety_system.py",
        "_hash_output"
      ],
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ],
      [
        "./core/bot.py",
        "_get_optimal_model"
      ],
      [
        "./core/identity_integration.py",
        "normalize_tier"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "_categorize_method"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "_generate_memory_id"
      ],
      [
        "./core/identity/id_manager.py",
        "register_new_user"
      ],
      [
        "./core/security/agi_security.py",
        "sanitize_input"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_extract_pattern_signature"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_classify_neural_pattern"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "submit_task"
      ],
      [
        "./core/introspection/introspector.py",
        "_get_decorator_name"
      ],
      [
        "./core/introspection/introspector.py",
        "_get_base_name"
      ],
      [
        "./core/introspection/introspector.py",
        "report_symbolic_state"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "_get_poetic_response"
      ],
      [
        "./core/audit/audit_trail.py",
        "_calculate_checksum"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_compute_verifold_hash"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_generate_quantum_signature"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_determine_risk_level"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "_to_node_id"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_serialize_behavior"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_predict_user_intent"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_classify_processing_type"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_generate_access_token"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_select_voice"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_hash_identifier"
      ],
      [
        "./core/interfaces/api/v1/rest/models.py",
        "validate_input"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "create_access_token"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_generate_session_id"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_generate_request_id"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_generate_symbolic_signature"
      ],
      [
        "./memory/structural_conscience.py",
        "_compute_entry_hash"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_extract_dream_emotion"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_build_dream_context"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_classify_drift_pattern"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_suggest_intervention_type"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_assess_intervention_risk"
      ],
      [
        "./memory/dashboard.py",
        "_determine_system_status"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_compute_data_hash"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_calculate_drift_trend"
      ],
      [
        "./memory/basic.py",
        "remember"
      ],
      [
        "./memory/basic.py",
        "store"
      ],
      [
        "./memory/basic.py",
        "store"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_consolidate_memories"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_abstract_memories"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_synthesize_memories"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_compute_data_hash"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_calculate_drift_trend"
      ],
      [
        "./memory/fold_entropy_visualizer.py",
        "render_mermaid_timeline"
      ],
      [
        "./memory/fold_entropy_visualizer.py",
        "render_ascii_chart"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_generate_markdown_report"
      ],
      [
        "./memory/core/base_manager.py",
        "generate_memory_id"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_assess_threat_level"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_duration"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_classify_drift_pattern"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_suggest_intervention_type"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_assess_intervention_risk"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "_generate_tag_id"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "_compute_content_hash"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "_infer_semantic_category"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "compute_hash"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "_hash_data"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "add_episodic_memory"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "add_semantic_memory"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "_calculate_checksum"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "compute_collapse_hash"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "_normalize_memory_data"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "get_url"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_hash_payload"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_select_learning_strategy"
      ],
      [
        "./memory/systems/trace_injector.py",
        "start_memory_trace"
      ],
      [
        "./memory/systems/trace_injector.py",
        "export_traces"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "encode_to_dna"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "generate_collapse_hash"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_temporal_link"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_get_or_create_chain_id"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_classify_trajectory_type"
      ],
      [
        "./memory/systems/memory_utils.py",
        "encrypt_memory_data"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_identify_primary_concept"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "create_authentication_session"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_get_user_session"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "generate_recovery_phrase"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_generate_recovery_phrase"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_create_sync_package"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_get_verification_depth"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_generate_consciousness_signature"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_calculate_activity_frequency"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_generate_pattern_hash"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_calculate_integrity_hash"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_link_to_audit_chain"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_categorize_heart_rate"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_get_emotion_symbol"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_get_consciousness_symbol"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_get_synchrony_symbol"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "get_symbolic_consent_status"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "_map_action_to_scope"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "get_symbolic_consent_history"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "get_symbolic_representation"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_calculate_trend"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_create_emotional_signature"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_create_consciousness_fingerprint"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "submit_inference_request"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_generate_glyph_id"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "_calculate_risk_level"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "_get_colony_type"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "_determine_healing_strategy"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_generate_challenge_seed"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_generate_biometric_hint"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_generate_vault_access_key"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_generate_qrg_id"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_generate_access_token"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_create_symbolic_challenge"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_sign_qr_glyph"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_register_sync_token"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "get_symbolic_tier_status"
      ],
      [
        "./identity/enterprise/auth.py",
        "_generate_mfa_token"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "_hash_trigger_data"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_generate_neural_signature"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_generate_cultural_signature"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "assess_entropy_strength"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_normalize_value"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "interpret_symbols"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_sanitize_input"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_get_format_description"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_assess_security_strength"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "_get_session_id"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_hash_user_id"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_hash_dream_id"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "_encode_command"
      ],
      [
        "./creativity/quantum_creative_types.py",
        "generate_haiku"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_ensure_syllable_structure"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_select_concept"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_add_emphasis"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_add_pauses"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_generate_thread_hash"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_determine_overall_status"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_symbol_for_analysis_type"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_symbol_for_provider"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_dominant_color_symbol"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_add_emphasis"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_add_pauses"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "select_profile_for_context"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_format_simple_proof"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_format_technical_proof"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "_adjust_formality"
      ],
      [
        "./bridge/openai_core_service.py",
        "_generate_request_id"
      ],
      [
        "./bridge/trace_logger.py",
        "export_trace_data"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_select_strategy"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_select_strategy"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_select_strategy"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_check_label_availability"
      ],
      [
        "./learning/meta_learning.py",
        "_select_learning_strategy"
      ],
      [
        "./learning/federated_learning.py",
        "_get_model_path"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_select_strategy"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_check_label_availability"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "determine_target_directory"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_select_strategy"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_coordination_signature"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_generate_quantum_signature"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_generate_loop_id"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_get_model_path"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_coordination_signature"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "submit_process"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_summarize_state"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_get_improvement_suggestion"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_get_improvement_suggestion"
      ],
      [
        "./consciousness/core/engine.py",
        "_get_improvement_suggestion"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_get_ion_channel"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_generate_cardiolipin_code"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_markdown_reflection"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_add_emphasis"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_add_pauses"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "reflect"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_markdown_reflection"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_determine_trend"
      ],
      [
        "./compliance/ai_regulatory_framework/global_compliance/multi_jurisdiction_engine.py",
        "_determine_jurisdiction_status"
      ],
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "_determine_compliance_status"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_assess_risk_tier"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_warning_severity"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_generate_markdown_prediction_report"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_generate_json_prediction_report"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_extract_bridge_theme"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_semantic_content"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_resolve_duty_conflicts"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_summarize_node"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_format_insight"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_generate_cache_key"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_resolve_duty_conflicts"
      ],
      [
        "./reasoning/reporting/reasoning_report_generator.py",
        "generate_report"
      ],
      [
        "./reasoning/reporting/reasoning_report_generator.py",
        "_format_trace"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_summarize_chain"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_semantic_content"
      ],
      [
        "./ethics/compliance_engine.py",
        "_generate_anonymous_id"
      ],
      [
        "./ethics/compliance_engine.py",
        "detect_regulatory_region"
      ],
      [
        "./ethics/compliance_engine.py",
        "_map_location_string_to_region"
      ],
      [
        "./ethics/ethics_engine.py",
        "_extract_action_type"
      ],
      [
        "./ethics/ethics_engine.py",
        "_extract_content"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "_generate_anonymous_id"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "_calculate_violation_severity"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "_generate_recommendation"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "crypto_trace_index"
      ],
      [
        "./ethics/ethics_guard.py",
        "_generate_recommendation"
      ],
      [
        "./ethics/export_report.py",
        "_generate_html_report"
      ],
      [
        "./ethics/export_report.py",
        "generate_audit_trail"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_recommend_intervention"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_generate_system_prompt"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_sign_with_lambda_id"
      ],
      [
        "./ethics/engine.py",
        "interpret_score"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_categorize_risk_level"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_resolve_duty_conflicts"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_create_html_template"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_format_entanglements_html"
      ],
      [
        "./ethics/security/secure_utils.py",
        "sanitize_input"
      ],
      [
        "./ethics/security/secure_utils.py",
        "secure_file_path"
      ],
      [
        "./ethics/compliance/engine.py",
        "_extract_action_type"
      ],
      [
        "./ethics/compliance/engine.py",
        "_extract_content"
      ],
      [
        "./ethics/compliance/engine.py",
        "_generate_anonymous_id"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "_prepare_evaluation_prompt"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "_get_cache_key"
      ],
      [
        "./voice/modulator.py",
        "_select_voice"
      ],
      [
        "./voice/voice_profiling.py",
        "select_profile_for_context"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_select_voice"
      ],
      [
        "./voice/synthesis.py",
        "_select_provider"
      ],
      [
        "./voice/synthesis.py",
        "_select_provider"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_extract_reasoning_conclusion"
      ],
      [
        "./voice/systems/synthesis.py",
        "_select_provider"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "_generate_imports"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "_generate_header"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_recommend_approach"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_extract_title"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_classify_focus_type"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_extract_problem_pattern"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_extract_solution_pattern"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_map_jira_priority"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_map_jira_status"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_map_github_priority"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_map_dast_to_jira_priority"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_semantic_content"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/agents/builtin/codex.py",
        "respond"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_get_module_name"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_assess_provincial_compliance"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_assess_bias_risk"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "export_consensus_data"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_calculate_optimal_timing"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_assess_cognitive_state"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_coordination_signature"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "determine_fix_strategy"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_calculate_optimal_timing"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_assess_cognitive_state"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_determine_interaction_style"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_sector_compliance"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "determine_vulnerability_fix_strategy"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_select_strategy"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_extract_text_content"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_determine_ecosystem"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_categorize_workflow_issue"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_predict_mood_trend"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "_level_to_name"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_system_event"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_core_event"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_symbolic"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_dream"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_reflection"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_generate_compliance_attestation"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_add_emphasis"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_add_pauses"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_assess_resource_risk"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_generate_prediction_summary"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_trend_direction"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_generate_context_key"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_extract_reasoning_conclusion"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "export_session_analytics"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "_generate_anonymous_id"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_categorize_drift_severity"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_select_strategy"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "get_validation_report"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_sanitize_for_symbol_name"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_semantic_content"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_classify"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "explain_action"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_extract_action_type"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_extract_content"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "_get_symbolic_response"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_determine_trend"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "spawn_ethics_guardian"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "spawn_memory_cleaner"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_generate_voice_text"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_map_mood_to_emotion"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_categorize_drift_severity"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_generate_quantum_signature"
      ],
      [
        "./governance/core.py",
        "_generate_symbolic_pattern"
      ],
      [
        "./governance/pwm_workspace_guardian.py",
        "_get_health_status"
      ],
      [
        "./governance/pwm_workspace_guardian.py",
        "_get_health_symbol"
      ],
      [
        "./governance/enhanced_pwm_guardian.py",
        "_get_enhanced_health_status"
      ],
      [
        "./governance/enhanced_pwm_guardian.py",
        "_get_enhanced_health_symbol"
      ],
      [
        "./symbolic/symbolic_glyph_hash.py",
        "compute_glyph_hash"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_symbol_for_emotion"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_symbol_for_provider"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "dream_phase_transition"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "pattern_discovered"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "emotional_context"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "memory_processing"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "cycle_completion"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "get_dream_symbol"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_symbol_for_analysis_type"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_symbol_for_provider"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_dominant_color_symbol"
      ],
      [
        "./symbolic/vocabularies/bio_vocabulary.py",
        "format_bio_log"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_categorize_strength"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_categorize_volatility"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_calculate_conflict_severity"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_markdown_report"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_json_report"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_entropy_lineage"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_markdown_reflection"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_classify_mutation_safety"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "generate_flow_diagram"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_extract_pattern_signature"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_classify_neural_pattern"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_season"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_time_of_day"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_get_ethical_lens"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_get_emotional_lens"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_get_contextual_lens"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "display_ascii_heatmap"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_categorize_symbol_theme"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_identify_archetypal_source"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_extract_narrative_context"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_get_dominant_emotion"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_detect_emotional_tone"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_determine_redirect_cause"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "get_dream_symbol"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "phase_transition"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "pattern_discovered"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "emotional_context"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "memory_processing"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "cycle_completion"
      ],
      [
        "./dream/rl/rl_dream_cycle.py",
        "_state_key"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_identify_source_type"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_format_report_markdown"
      ],
      [
        "./quantum/vault_manager.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_classify_processing_type"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_create_synthesized_content_from_responses"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_quantum_visual"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_tier_indicators"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_entanglement_lines"
      ],
      [
        "./quantum/api_manager.py",
        "_create_steganographic_layer"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "format_poetry"
      ]
    ],
    "2:List[Dict]": [
      [
        "./tools/radical_simplifier.py",
        "_generate_simplifications"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "get_popular_sequences"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "get_document_history"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_document_history"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_usage_patterns"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_generate_improvement_plans"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_generate_improvement_plans"
      ],
      [
        "./learning/usage_learning.py",
        "get_popular_sequences"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_generate_improvement_plans"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_logical_contradictions"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_ethical_contradictions"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_emotional_contradictions"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_glyph_contradictions"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_recursive_loops"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_identify_causal_elements"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_extract_reasoning_path"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "apply_violation_tagging"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "optimize_priorities"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_find_related_contexts"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_identify_bottlenecks"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_format_tasks_for_api"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_jira_to_dast_format"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_github_to_dast_format"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_legacy_to_dast_format"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_generic_to_dast_format"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_identify_causal_elements"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_comprehensive_reasoning_path"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_generate_self_modification_recommendations"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_generate_improvement_plans"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_symbolic_reasoning_path"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_generate_improvement_plans"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "apply_architectural_adaptations"
      ],
      [
        "./dream/dream_data_sources.py",
        "_extract_emotional_traces"
      ],
      [
        "./dream/dream_data_sources.py",
        "_synthesize_dream_seeds"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_find_convergent_patterns"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_generate_sample_dream_sessions"
      ],
      [
        "./dream/core/dream_stats.py",
        "get_trends"
      ]
    ],
    "2:None": [
      [
        "./tools/session_logger.py",
        "log_session_event"
      ],
      [
        "./tools/gen_architecture_log_update.py",
        "add_architecture_log_entry"
      ],
      [
        "./tools/documentation/plugin.py",
        "__init__"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_analyze_source"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_analyze_python_file"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "update_confidence"
      ],
      [
        "./tools/documentation/memory_evolution/memory_evolution.py",
        "evolve_memory"
      ],
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "speak_text"
      ],
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "update"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "identify_patterns"
      ],
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "update_state"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "analyze_file"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "save_report"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "analyze_module"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "save_detailed_report"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "__init__"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "analyze_imports"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "analyze_functional_capability"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "_persist_decision"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "__init__"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_check_file_naming"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_scan_file_contents"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_analyze_file"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "__init__"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "analyze_file"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "__init__"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "validate_risk_score"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_init_encryption"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "_update_metrics"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "_add_to_history"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "register_alert_callback"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "validate_range"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "validate_tier_requirements"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "__init__"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "_save_results"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "create_memory_fold"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "save_fallback"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "create_markdown_export"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "__init__"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "backup_file"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "__init__"
      ],
      [
        "./bio/endocrine_integration.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/stress_signal.py",
        "__init__"
      ],
      [
        "./bio/curiosity_spark.py",
        "__init__"
      ],
      [
        "./bio/resilience_boost.py",
        "__init__"
      ],
      [
        "./bio/simulation_controller.py",
        "update_level"
      ],
      [
        "./bio/simulation_controller.py",
        "stabilize_oscillator"
      ],
      [
        "./bio/simulation_controller.py",
        "_trigger_callbacks"
      ],
      [
        "./bio/quantum_layer.py",
        "__init__"
      ],
      [
        "./bio/protein_synthesizer.py",
        "__init__"
      ],
      [
        "./bio/symbolic_entropy_observer.py",
        "__init__"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "__init__"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_update_average_completion_time"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_handle_high_stress"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_handle_optimal_state"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_handle_rest_needed"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_handle_high_focus"
      ],
      [
        "./bio/stability_anchor.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_update_history"
      ],
      [
        "./bio/core/systems_mitochondria_model.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_tag_threshold_quality"
      ],
      [
        "./bio/core/symbolic_preprocessing_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_preprocessing_colony.py",
        "_log_preprocessing_event"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "update_stress"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "allocate"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_calculate_cristae_topology"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_route_to_instrument"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_synchronize"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "perform"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "optimize"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_tag_orchestration_quality"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_log_orchestration_event"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_log_anomaly_event"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_update_glyph_history"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_tag_mapping_quality"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "optimize"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "frequency"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "phase"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "amplitude"
      ],
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "register_neuroplastic_event"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "bio_affect_feedback"
      ],
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "add_node"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "remove_node"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "merge_nodes"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_update_network_error"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "remove_connection"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "__init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "merge_nodes"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "__init__"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "record_optimization"
      ],
      [
        "./bio/awareness/awareness.py",
        "_update_awareness_state"
      ],
      [
        "./bio/awareness/awareness.py",
        "_update_metrics"
      ],
      [
        "./bio/awareness/awareness.py",
        "_handle_monitoring_error"
      ],
      [
        "./trace/drift_tools.py",
        "__init__"
      ],
      [
        "./trace/drift_harmonizer.py",
        "__init__"
      ],
      [
        "./trace/drift_harmonizer.py",
        "record_drift"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./trace/restabilization_index.py",
        "__init__"
      ],
      [
        "./trace/drift_metrics.py",
        "track"
      ],
      [
        "./trace/drift_dashboard.py",
        "_update_statistics"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "__init__"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_log_unified_drift"
      ],
      [
        "./trace/diagnostics/engine.py",
        "__init__"
      ],
      [
        "./core/minimal_actor.py",
        "echo_behavior"
      ],
      [
        "./core/minimal_actor.py",
        "send"
      ],
      [
        "./core/fault_tolerance.py",
        "_restart_child"
      ],
      [
        "./core/fault_tolerance.py",
        "_stop_child"
      ],
      [
        "./core/ai_interface.py",
        "_missing_"
      ],
      [
        "./core/ai_interface.py",
        "__init__"
      ],
      [
        "./core/integration_hub.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "receive"
      ],
      [
        "./core/swarm.py",
        "_handle_message"
      ],
      [
        "./core/swarm.py",
        "update_resource_state"
      ],
      [
        "./core/swarm.py",
        "add_symbolic_tag"
      ],
      [
        "./core/swarm.py",
        "get_colony"
      ],
      [
        "./core/swarm.py",
        "handle_heartbeat"
      ],
      [
        "./core/swarm.py",
        "check_colony_health"
      ],
      [
        "./core/swarm.py",
        "get_symbolic_address"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "export_metrics"
      ],
      [
        "./core/quorum_override.py",
        "__init__"
      ],
      [
        "./core/resource_scheduler.py",
        "__init__"
      ],
      [
        "./core/resource_scheduler.py",
        "schedule_task"
      ],
      [
        "./core/resource_scheduler.py",
        "_calculate_score"
      ],
      [
        "./core/plugin_registry.py",
        "register_plugin"
      ],
      [
        "./core/symbolic_contract.py",
        "validate_payload"
      ],
      [
        "./core/symbolic_contract.py",
        "register"
      ],
      [
        "./core/actor_supervision_integration.py",
        "new_init"
      ],
      [
        "./core/actor_supervision_integration.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "verify_component_state"
      ],
      [
        "./core/integrator.py",
        "verify_message_state"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "process_message"
      ],
      [
        "./core/integrator.py",
        "process_event"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/config.py",
        "validate_database_url"
      ],
      [
        "./core/config.py",
        "validate_secret_strength"
      ],
      [
        "./core/config.py",
        "validate_environment"
      ],
      [
        "./core/resource_optimization_integration.py",
        "_update_resource_state"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "finish"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "add_span"
      ],
      [
        "./core/distributed_tracing.py",
        "_check_trace_completion"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "visit_Call"
      ],
      [
        "./core/api_diff_analyzer.py",
        "visit_Attribute"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "visit_ClassDef"
      ],
      [
        "./core/api_diff_analyzer.py",
        "visit_FunctionDef"
      ],
      [
        "./core/api_diff_analyzer.py",
        "visit_AsyncFunctionDef"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_generate_migration_script"
      ],
      [
        "./core/p2p_fabric.py",
        "broadcast"
      ],
      [
        "./core/benchmark_swarm.py",
        "bench_behavior"
      ],
      [
        "./core/event_replayer.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_trigger_alert_callback"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "register_alert_callback"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "export_analysis_report"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "_update_safety_level"
      ],
      [
        "./core/integrated_safety_system.py",
        "trip_circuit_breaker"
      ],
      [
        "./core/tier_unification_adapter.py",
        "create_middleware"
      ],
      [
        "./core/symbolic_boot.py",
        "__init__"
      ],
      [
        "./core/cluster_sharding.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "receive"
      ],
      [
        "./core/enhanced_swarm.py",
        "_initialize_agents"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "apply_event"
      ],
      [
        "./core/event_sourcing.py",
        "apply_event"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "_majority_rule"
      ],
      [
        "./core/symbolic_arbitration.py",
        "_seniority_based"
      ],
      [
        "./core/symbolic_arbitration.py",
        "add_event"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "_update_model"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "set_active_budget"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "set_energy_profile"
      ],
      [
        "./core/practical_optimizations.py",
        "_prefetch_related"
      ],
      [
        "./core/practical_optimizations.py",
        "_prepopulate"
      ],
      [
        "./core/practical_optimizations.py",
        "release"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "memoize"
      ],
      [
        "./core/practical_optimizations.py",
        "invalidate_dependents"
      ],
      [
        "./core/consistency_manager.py",
        "__init__"
      ],
      [
        "./core/module_registry.py",
        "require_tier"
      ],
      [
        "./core/module_registry.py",
        "_log_audit"
      ],
      [
        "./core/module_registry.py",
        "wrapper"
      ],
      [
        "./core/event_bus.py",
        "filtered_callback"
      ],
      [
        "./core/notion_sync.py",
        "make_code_block"
      ],
      [
        "./core/notion_sync.py",
        "make_minimal_block"
      ],
      [
        "./core/notion_sync.py",
        "sync_to_notion_legacy"
      ],
      [
        "./core/notion_sync.py",
        "log_audit_with_lid"
      ],
      [
        "./core/notion_sync.py",
        "log_audit_with_lid"
      ],
      [
        "./core/core_utilities.py",
        "echo_behavior"
      ],
      [
        "./core/core_utilities.py",
        "send"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "register_child"
      ],
      [
        "./core/common.py",
        "set_status"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "record_energy_usage"
      ],
      [
        "./core/observability_steering.py",
        "record_actor_snapshot"
      ],
      [
        "./core/observability_steering.py",
        "record_message_flow"
      ],
      [
        "./core/observability_steering.py",
        "register_pattern_detector"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "run_pipeline"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "run_negotiation"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "run_training"
      ],
      [
        "./core/task_manager.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__lt__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "add_message_filter"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "restore_to_actor"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/quantized_cycle_manager.py",
        "__init__"
      ],
      [
        "./core/tiered_state_management.py",
        "register_aggregator"
      ],
      [
        "./core/tiered_state_management.py",
        "__init__"
      ],
      [
        "./core/hub_registry.py",
        "get_hub"
      ],
      [
        "./core/identity_aware_base.py",
        "clear_user_cache"
      ],
      [
        "./core/identity_aware_base.py",
        "wrapper"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ],
      [
        "./core/actor_model.py",
        "send"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ],
      [
        "./core/agent_coordination.py",
        "actorref_from_dict"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/coordination.py",
        "receive_proposal"
      ],
      [
        "./core/coordination.py",
        "handle_call_for_proposals"
      ],
      [
        "./core/coordination.py",
        "can_perform_task"
      ],
      [
        "./core/coordination.py",
        "calculate_bid"
      ],
      [
        "./core/identity_integration.py",
        "require_identity"
      ],
      [
        "./core/identity_integration.py",
        "dream_generation_example"
      ],
      [
        "./core/identity_integration.py",
        "quantum_operation_example"
      ],
      [
        "./core/identity_integration.py",
        "context_manager_example"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "become"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "unregister_response_handler"
      ],
      [
        "./core/governance.py",
        "add_rule"
      ],
      [
        "./core/governance.py",
        "validate_action"
      ],
      [
        "./core/state_management.py",
        "log_event"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "update_metrics"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/creativity_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/tensor_colony_ops.py",
        "batch_propagate"
      ],
      [
        "./core/colonies/memory_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/base_colony.py",
        "set_governance_colony"
      ],
      [
        "./core/colonies/base_colony.py",
        "link_symbolic_contexts"
      ],
      [
        "./core/colonies/base_colony.py",
        "entangle_tags"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/governance_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "_update_swarm_metrics"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "__init__"
      ],
      [
        "./core/symbolic_bridge/token_map.py",
        "__init__"
      ],
      [
        "./core/symbolic_bridge/integrator.py",
        "__init__"
      ],
      [
        "./core/symbolic_bridge/integrator.py",
        "route_symbolic_event"
      ],
      [
        "./core/identity/mapper.py",
        "__init__"
      ],
      [
        "./core/identity/processor.py",
        "__init__"
      ],
      [
        "./core/identity/engine.py",
        "__init__"
      ],
      [
        "./core/identity/persona_engine.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "extract_vector"
      ],
      [
        "./core/identity/manager.py",
        "get_vector"
      ],
      [
        "./core/identity/manager.py",
        "_update_composite_vector"
      ],
      [
        "./core/identity/manager.py",
        "secure"
      ],
      [
        "./core/identity/manager.py",
        "_calculate_trauma_score"
      ],
      [
        "./core/identity/manager.py",
        "authenticate"
      ],
      [
        "./core/identity/manager.py",
        "apply_trauma_lock"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./core/integration/system_coordinator.py",
        "__init__"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "__init__"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "__init__"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "set_fusion_context"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "adapt_fusion_weights"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_store_pattern"
      ],
      [
        "./core/integration/connectivity_engine.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/system_bridge.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "set_mood"
      ],
      [
        "./core/personality/personality.py",
        "set_energy_level"
      ],
      [
        "./core/personality/creative_personality.py",
        "_attention_fusion"
      ],
      [
        "./core/personality/creative_personality.py",
        "analyze_context"
      ],
      [
        "./core/personality/creative_personality.py",
        "generate_insights"
      ],
      [
        "./core/personality/creative_personality.py",
        "incorporate_feedback"
      ],
      [
        "./core/personality/creative_personality.py",
        "ethical_reasoning"
      ],
      [
        "./core/personality/creative_personality.py",
        "meta_draw"
      ],
      [
        "./core/personality/creative_personality.py",
        "plan_protest"
      ],
      [
        "./core/personality/creative_personality.py",
        "early_fusion"
      ],
      [
        "./core/personality/creative_personality.py",
        "synthesize_response"
      ],
      [
        "./core/personality/creative_expressions.py",
        "generate_haiku"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_apply_expansion_rules"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_add_sensory_detail"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_infuse_emotion"
      ],
      [
        "./core/personality/creative_expressions.py",
        "_create_juxtaposition"
      ],
      [
        "./core/personality/creative_expressions.py",
        "load_inspiration_profile"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_attention_fusion"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "analyze_context"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "generate_insights"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "incorporate_feedback"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "ethical_reasoning"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "meta_draw"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "plan_protest"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "early_fusion"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "synthesize_response"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "__init__"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_validate_task"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_insert_task_by_priority"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_allocate_energy"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_apply_adaptive_optimizations"
      ],
      [
        "./core/introspection/introspector.py",
        "__init__"
      ],
      [
        "./core/bridges/__init__.py",
        "get_bridge"
      ],
      [
        "./core/tagging/tagging_system.py",
        "__init__"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "__init__"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "update_constitution"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "__init__"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "__init__"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_update_baseline"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_decision"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__call__"
      ],
      [
        "./core/engines/identity_engine.py",
        "__init__"
      ],
      [
        "./core/engines/learning_engine.py",
        "__init__"
      ],
      [
        "./core/engines/creative_engine.py",
        "__init__"
      ],
      [
        "./core/engines/consciousness_engine.py",
        "__init__"
      ],
      [
        "./core/engines/communication_engine.py",
        "__init__"
      ],
      [
        "./core/ai/integration_manager.py",
        "_save_ai_task_response"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/symbolism/methylation_model.py",
        "__init__"
      ],
      [
        "./core/symbolism/archiver.py",
        "start"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "require_identity"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_monitor_system_entropy"
      ],
      [
        "./core/governance/governance_colony.py",
        "__init__"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "update_dashboard"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "calculate_drift_score"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "generate_hash"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "update_remediation_status"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "adjust_for_drift"
      ],
      [
        "./core/meta_learning/monitor_dashboard.py",
        "_generate_quantum_signature"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./core/user_interface_manager/text_handler.py",
        "__init__"
      ],
      [
        "./core/user_interface_manager/voice_handler.py",
        "__init__"
      ],
      [
        "./core/monitoring/collapse_integration.py",
        "update_entropy_from_components"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "process"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "evaluate_action"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "create_goal"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "get_goal"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "create_proposal"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "_finalize_proposal"
      ],
      [
        "./core/infrastructure/base_node.py",
        "add_link"
      ],
      [
        "./core/infrastructure/base_node.py",
        "evolve"
      ],
      [
        "./core/infrastructure/base_node.py",
        "trigger_event"
      ],
      [
        "./core/infrastructure/base_node.py",
        "reflect"
      ],
      [
        "./core/infrastructure/base_node.py",
        "activate"
      ],
      [
        "./core/infrastructure/base_node.py",
        "_propagate_activation"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "discover_nodes"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "handle_node_status_change"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "_process_queued_messages"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "__init__"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "__init__"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "_save_to_file"
      ],
      [
        "./core/data/crud_operations.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "forward"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "adapt_architecture"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_rebuild_network"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "_update_metrics"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/interaction/symptom_reporter.py",
        "__init__"
      ],
      [
        "./core/base/base_config.py",
        "__init__"
      ],
      [
        "./core/base/base_health.py",
        "__init__"
      ],
      [
        "./core/base/base_health.py",
        "add_check"
      ],
      [
        "./core/base/symbolic.py",
        "register"
      ],
      [
        "./core/base/ethics.py",
        "__init__"
      ],
      [
        "./core/services/location/tracker.py",
        "__init__"
      ],
      [
        "./core/services/location/tracker.py",
        "add_update_callback"
      ],
      [
        "./core/services/location/tracker.py",
        "remove_update_callback"
      ],
      [
        "./core/services/personality/empathy.py",
        "generate_empathic_response"
      ],
      [
        "./core/services/personality/empathy.py",
        "trait_bar"
      ],
      [
        "./core/interfaces/custom_llm.py",
        "log_creation"
      ],
      [
        "./core/interfaces/web_formatter.py",
        "save_formats"
      ],
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "store_paired_app"
      ],
      [
        "./core/interfaces/tools/security/session_logger.py",
        "log_session_event"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "__init__"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "set_health_checker"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "save_registry_state"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_check_engine_health"
      ],
      [
        "./core/interfaces/logic/consent_manager.py",
        "is_action_allowed"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "generate_response"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "ethical_review"
      ],
      [
        "./core/interfaces/logic/agent_core.py",
        "start_agent"
      ],
      [
        "./core/interfaces/logic/voice/voice_renderer.py",
        "render_voice"
      ],
      [
        "./core/interfaces/dashboard/core/dashboard_colony_agent.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/dynamic_tab_system.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/universal_adaptive_dashboard.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/fallback_system.py",
        "_update_average_fallback_duration"
      ],
      [
        "./core/interfaces/dashboard/core/morphing_engine.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/listen.py",
        "listen_to_human"
      ],
      [
        "./core/interfaces/voice/listen.py",
        "gpt_symbolic_response"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "add_LukhasServiceServicer_to_server"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "add_AwarenessServiceServicer_to_server"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "add_IntelligenceRegistryServicer_to_server"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "__init__"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/core/generate_image.py",
        "generate_symbolic_image"
      ],
      [
        "./core/interfaces/as_agent/auth/registry.py",
        "auto_login"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/delivery_loop.py",
        "run_delivery_queue"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/nias_core.py",
        "push_symbolic_message"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/symbolic_matcher.py",
        "match_message_to_context"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/consent_filter.py",
        "is_allowed"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/replay_visualizer.py",
        "color_emotion"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/narration_controller.py",
        "filter_narration_queue"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "save_tags_to_file"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "load_tags_from_file"
      ],
      [
        "./core/interfaces/as_agent/widgets/travel_widget.py",
        "suggest_long_distance_travel"
      ],
      [
        "./memory/voice_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/quantum_manager.py",
        "__init__"
      ],
      [
        "./memory/fold_engine.py",
        "_write_ledger_entry"
      ],
      [
        "./memory/fold_engine.py",
        "_write_compressed_memory"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "_log_fuse_activation"
      ],
      [
        "./memory/emotional.py",
        "_update_emotion_associations"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "decay_all_weights"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "__init__"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_log_causation_event"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_log_fold_state"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_update_lineage_chains"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_store_lineage_analysis"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_store_lineage_graph"
      ],
      [
        "./memory/memory_fold.py",
        "log_dream"
      ],
      [
        "./memory/memory_fold.py",
        "update_relevance_scores"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "_add_dynamic_emotion"
      ],
      [
        "./memory/memory_fold.py",
        "_add_dynamic_emotion"
      ],
      [
        "./memory/memory_optimization.py",
        "release"
      ],
      [
        "./memory/memory_optimization.py",
        "_evict_from_tier"
      ],
      [
        "./memory/memory_optimization.py",
        "_consider_promotion"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "register_optimization"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "append"
      ],
      [
        "./memory/memory_optimization.py",
        "add"
      ],
      [
        "./memory/memory_optimization.py",
        "__getattr__"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_restore_from_snapshot"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_apply_state_event"
      ],
      [
        "./memory/distributed_state_manager.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/node.py",
        "__init__"
      ],
      [
        "./memory/loop_monitor.py",
        "report_corruption"
      ],
      [
        "./memory/dream_memory_fold.py",
        "add_snapshot"
      ],
      [
        "./memory/dream_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "release_actor"
      ],
      [
        "./memory/memoria.py",
        "__init__"
      ],
      [
        "./memory/visualizer.py",
        "__init__"
      ],
      [
        "./memory/visualizer.py",
        "__init__"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "__init__"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "__init__"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_update_episodic_indices"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "register_peer_colony"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "register_message_callback"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "_update_response_time"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "_create_mock_operation"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "unregister_colony"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "_update_colony_trust_scores"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "register_consensus_callback"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_initialize_lukhas_subsystems"
      ],
      [
        "./memory/core/quantum_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "update_access"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "register_operation_callback"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "_remove_from_indices"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "co_activate_with"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "phase_unlock"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "modulate_frequency"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "modulate_amplitude"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_initialize_place_cells"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_initialize_grid_cells"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "consolidate_memories"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "unregister_colony"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "_invalidate_cache"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "register_governor_callback"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "register_sentinel_callback"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "register_archive_callback"
      ],
      [
        "./memory/fold_system/foldout.py",
        "create_memory_exporter"
      ],
      [
        "./memory/fold_system/foldout.py",
        "exporter"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "__init__"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_log_causation_event"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_log_fold_state"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_update_lineage_chains"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_store_lineage_analysis"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_store_lineage_graph"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "decay_all_weights"
      ],
      [
        "./memory/fold_system/foldin.py",
        "create_memory_importer"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_update_resonance_network"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_check_cluster_formation"
      ],
      [
        "./memory/hooks/registry.py",
        "_record_failure"
      ],
      [
        "./memory/hooks/registry.py",
        "reset_circuit_breaker"
      ],
      [
        "./memory/hooks/base.py",
        "add_to_lineage"
      ],
      [
        "./memory/hooks/base.py",
        "add_glyph"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_store_compressed_memory"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_log_ethical_concern"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_log_intervention"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_store_governance_report"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "_update_integrity_chain"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/systems/replay_system.py",
        "__init__"
      ],
      [
        "./memory/systems/replay_system.py",
        "_cache_sequence"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_update_values"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__getitem__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "bump"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "delete"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_coalesce_timeline"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "get_category_index"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "delete"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "_remove_from_mem_cache"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "_store_classification"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "_emit_warnings"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "traverse_causal_chain"
      ],
      [
        "./memory/systems/memory_lock.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "add_evidence"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "add_causal_relation"
      ],
      [
        "./memory/systems/memory_identity.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_identity.py",
        "notify_memory_removal"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_log_validation_result"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_store_threat"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_store_protection_action"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_example.py",
        "__init__"
      ],
      [
        "./memory/systems/pin_memory.py",
        "pin_memory"
      ],
      [
        "./memory/systems/memory_node.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_node.py",
        "_update_memory_access"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "delete_file"
      ],
      [
        "./memory/systems/memory_format.py",
        "convert_conv2d_weight_memory_format"
      ],
      [
        "./memory/systems/memory_format.py",
        "convert_conv3d_weight_memory_format"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "launch_3d_viewer"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "save"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "delete"
      ],
      [
        "./memory/systems/memory_planning.py",
        "contains"
      ],
      [
        "./memory/systems/memory_planning.py",
        "join"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "overlaps"
      ],
      [
        "./memory/systems/memory_planning.py",
        "codegen_alloc_from_pool"
      ],
      [
        "./memory/systems/memory_planning.py",
        "create"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate_at_end"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__eq__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_pools"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate_output"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "update_usage"
      ],
      [
        "./memory/systems/memory_planning.py",
        "codegen"
      ],
      [
        "./memory/systems/memory_planning.py",
        "codegen"
      ],
      [
        "./memory/systems/memory_planning.py",
        "drop_removed_buffers"
      ],
      [
        "./memory/systems/memory_planning.py",
        "compute_buffer_groups"
      ],
      [
        "./memory/systems/memory_planning.py",
        "convert_to_pool_lines"
      ],
      [
        "./memory/systems/memory_planning.py",
        "compute_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "mark_first_last_usage"
      ],
      [
        "./memory/systems/__init__.py",
        "retrieve_trace"
      ],
      [
        "./memory/systems/memory_processing.py",
        "__init__"
      ],
      [
        "./memory/systems/core.py",
        "__init__"
      ],
      [
        "./memory/systems/core.py",
        "symbolic_vocabulary"
      ],
      [
        "./memory/systems/core.py",
        "__init__"
      ],
      [
        "./memory/systems/processor.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "record_deallocation"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "__init__"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "incorporate_feedback"
      ],
      [
        "./memory/systems/memory_validator.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "start_monitor"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "summary"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "show_traces"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "save_stats"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "load"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_record_memory_stats"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_add_marker"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_pre_forward_hook"
      ],
      [
        "./memory/systems/trace_injector.py",
        "end_memory_trace"
      ],
      [
        "./memory/systems/trace_injector.py",
        "__init__"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "record_deallocation"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "__init__"
      ],
      [
        "./memory/systems/quantum_memory_architecture.py",
        "__init__"
      ],
      [
        "./memory/systems/simple_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "remove"
      ],
      [
        "./memory/systems/simple_store.py",
        "__init__"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "update_emotional_state"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "__init__"
      ],
      [
        "./memory/systems/recall_handler.py",
        "recall_memory"
      ],
      [
        "./memory/systems/tier_system.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/tier_system.py",
        "_log_access_decision"
      ],
      [
        "./memory/systems/tier_system.py",
        "_log_elevation"
      ],
      [
        "./memory/systems/memory_drift_stabilizer.py",
        "analyze_drift_log"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "set_swarm_threshold"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "incorporate_experience"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "_invalidate_similarity_cache"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_track_dream_causation"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_update_session_tracking"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_log_dream_trace_link"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "put_batch"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_store_identity_anchor"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_store_causal_origin"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_store_chain_validation"
      ],
      [
        "./memory/systems/collapse_buffer.py",
        "buffer_event"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_frame_fmt"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_frame_filter"
      ],
      [
        "./memory/systems/memory_viz.py",
        "format_flamegraph"
      ],
      [
        "./memory/systems/memory_viz.py",
        "segments"
      ],
      [
        "./memory/systems/memory_viz.py",
        "memory"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_report_free"
      ],
      [
        "./memory/systems/memory_viz.py",
        "profile_plot"
      ],
      [
        "./memory/systems/memory_viz.py",
        "segment_plot"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__add__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "free"
      ],
      [
        "./memory/systems/memory_viz.py",
        "_write"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "send_nowait"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_log_drift"
      ],
      [
        "./memory/systems/voice_memory_bridge.py",
        "_create_symbolic_map"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "__init__"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "log_symbolic_ai_memory_event"
      ],
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "__init__"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "_update_oscillations"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "register_stage_callback"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "register_cycle_callback"
      ],
      [
        "./memory/consolidation/memory_consolidation.py",
        "compute_decay_rate"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "__init__"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "add_ripple"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "set_memory_pool"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "set_priority_memories"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "update_sleep_stage"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "register_ripple_callback"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "register_sequence_callback"
      ],
      [
        "./memory/repair/helix_repair_module.py",
        "__init__"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "add_child"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "remove_child"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "_compress_path"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "_split_node"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "_remove_concept"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "decay_activations"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "initialize_layers"
      ],
      [
        "./identity/qrg_integration.py",
        "__init__"
      ],
      [
        "./identity/qrg_integration.py",
        "__getattr__"
      ],
      [
        "./identity/interface.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/privacy_manager.py",
        "get_privacy_setting"
      ],
      [
        "./identity/privacy_manager.py",
        "apply_privacy_mechanisms"
      ],
      [
        "./identity/privacy_manager.py",
        "anonymize_data"
      ],
      [
        "./identity/privacy_manager.py",
        "encrypt_sensitive_fields"
      ],
      [
        "./identity/privacy_manager.py",
        "decrypt_field"
      ],
      [
        "./identity/privacy_manager.py",
        "create_gdpr_report"
      ],
      [
        "./identity/privacy_manager.py",
        "log_privacy_event"
      ],
      [
        "./identity/privacy_manager.py",
        "get_privacy_logs"
      ],
      [
        "./identity/privacy_manager.py",
        "_hash_pii_value"
      ],
      [
        "./identity/privacy_manager.py",
        "_encrypt_value"
      ],
      [
        "./identity/qrg_showcase.py",
        "save_showcase_results"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "__init__"
      ],
      [
        "./identity/connector.py",
        "require_tier"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "add_user"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "validate_entropy"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "quorum_arbitration"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "fingerprint_device"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "refresh_session"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "renegotiate_session_keys"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "get_session"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "validate_nonce"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "apply_delay_penalty"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "expire_session"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_display_recommendations"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_display_result"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "run_batch_test"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_display_batch_results"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "add_custom_rule"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "update_performance_tracking"
      ],
      [
        "./identity/auth_utils/replay_protection.py",
        "_expire_old_nonces"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_register_lambda_id_profile"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "__init__"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "_revert_to_base_tier"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_create_mock_identity"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_get_operation_enum"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_get_access_policy_enum"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "get_user"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "validate_session"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "retrieve"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "delete"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "has_access_to_tier"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "connect_registry"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "connect_brain"
      ],
      [
        "./identity/core/verifold_connector.py",
        "__init__"
      ],
      [
        "./identity/core/verifold_connector.py",
        "submit_replay_session"
      ],
      [
        "./identity/core/verifold_connector.py",
        "retrieve_replay_data"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "__init__"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "calibrate"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "__init__"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "import_state"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_analyze_strengths_weaknesses"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_log_registration"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_log_unregistration"
      ],
      [
        "./identity/core/id_service/mnemonic.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/mnemonic.py",
        "generate"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "__init__"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_persist_trace_record"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "__init__"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "analyze_patterns"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "__init__"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "__init__"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "add_error"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "__init__"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "generate_compliance_report"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "__init__"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "update_interaction"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "__init__"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "both_dicts"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/qrg_generator.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/session_replay.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/session_replay.py",
        "invalidate_session"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "__init__"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_get_error_correction_level"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_notify_services_token_revoked"
      ],
      [
        "./identity/core/sing/cross_device_manager.py",
        "__init__"
      ],
      [
        "./identity/core/sing/cross_device_manager.py",
        "invalidate_device_tokens"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "__init__"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "generate_tier_report"
      ],
      [
        "./identity/enterprise/auth.py",
        "__init__"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_calculate_confidence"
      ],
      [
        "./identity/lukhas_identity/security/kyi_check.py",
        "record_interaction"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "generate_entropy_fingerprint"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "sign_broadcast"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "__init__"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "__init__"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "adjust_sync_rate"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "add_sync_callback"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "add_adaptation_callback"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "emergency_ui_reset"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "__init__"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "__init__"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "__init__"
      ],
      [
        "./identity/api/__init__.py",
        "_configure_app"
      ],
      [
        "./identity/api/__init__.py",
        "_configure_app_logging"
      ],
      [
        "./identity/api/api.py",
        "create_lambda_id_with_qrg"
      ],
      [
        "./identity/api/api.py",
        "get_user_tier"
      ],
      [
        "./identity/api/api.py",
        "get_tier_benefits"
      ],
      [
        "./identity/api/api.py",
        "get_tier_upgrade_info"
      ],
      [
        "./identity/api/api.py",
        "get_symbolic_tier_status"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "validate_format"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "calculate_id_entropy"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "get_tier_info"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "store_paired_app"
      ],
      [
        "./config/dashboard_settings.py",
        "store_paired_app"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "__init__"
      ],
      [
        "./security/moderator.py",
        "__init__"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "_add_control"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "_add_validation_test"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "generate_haiku"
      ],
      [
        "./creativity/creative_expression_core.py",
        "generate_haiku"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/creative_expression_core.py",
        "load_inspiration_profile"
      ],
      [
        "./creativity/healix_visualizer.py",
        "__init__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "generate_neural_haiku"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_create_base_haiku_neural"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "__init__"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "analyze_context"
      ],
      [
        "./creativity/personality/creative_core.py",
        "incorporate_feedback"
      ],
      [
        "./creativity/personality/creative_core.py",
        "get_model"
      ],
      [
        "./creativity/personality/creative_core.py",
        "log_interaction"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "plan_protest"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "meta_draw"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_attention_fusion"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "adapt_to_interaction"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_update_personality_traits"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "generate_haiku"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "load_inspiration_profile"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "generate_expression"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "generate_expression"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "adapt_to_interaction"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_update_personality_traits"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "add_feedback"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "record_usage"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "update_shyness"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "update_personality"
      ],
      [
        "./bridge/colony_bridge.py",
        "register_colony"
      ],
      [
        "./bridge/colony_bridge.py",
        "_register_protocol_handlers"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/trace_logger.py",
        "__init__"
      ],
      [
        "./bridge/shared_state.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "set_alignment_heads"
      ],
      [
        "./bridge/model_communication_engine.py",
        "embed_audio"
      ],
      [
        "./bridge/model_communication_engine.py",
        "install_kv_cache_hooks"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "log_interaction"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_implement_improvements"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/service.py",
        "_update_knowledge_base"
      ],
      [
        "./learning/service.py",
        "_update_knowledge_graph"
      ],
      [
        "./learning/plugin_learning_engine.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "log_interaction"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_implement_improvements"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "incorporate_feedback"
      ],
      [
        "./learning/usage_learning.py",
        "update"
      ],
      [
        "./learning/usage_learning.py",
        "identify_patterns"
      ],
      [
        "./learning/federated_learning_system.py",
        "__init__"
      ],
      [
        "./learning/federated_learning_system.py",
        "_trigger_aggregation"
      ],
      [
        "./learning/federated_learning_system.py",
        "save_model"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "__init__"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "incorporate_feedback"
      ],
      [
        "./learning/enhancement_engine.py",
        "__init__"
      ],
      [
        "./learning/meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/meta_learning.py",
        "_update_metrics"
      ],
      [
        "./learning/meta_learning.py",
        "_update_federated_models"
      ],
      [
        "./learning/meta_learning.py",
        "_update_symbolic_db"
      ],
      [
        "./learning/meta_learning.py",
        "_adapt_learning_strategies"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "_persist_model"
      ],
      [
        "./learning/federated_learning.py",
        "_load_model"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/exponential_learning.py",
        "__init__"
      ],
      [
        "./learning/exponential_learning.py",
        "incorporate_experience"
      ],
      [
        "./learning/exponential_learning.py",
        "_extract_patterns"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/_dict_learning.py",
        "_check_positive_coding"
      ],
      [
        "./learning/_dict_learning.py",
        "_sparse_encode_precomputed"
      ],
      [
        "./learning/_dict_learning.py",
        "sparse_encode"
      ],
      [
        "./learning/_dict_learning.py",
        "_sparse_encode"
      ],
      [
        "./learning/_dict_learning.py",
        "_dict_learning"
      ],
      [
        "./learning/_dict_learning.py",
        "dict_learning_online"
      ],
      [
        "./learning/_dict_learning.py",
        "dict_learning"
      ],
      [
        "./learning/_dict_learning.py",
        "transform"
      ],
      [
        "./learning/_dict_learning.py",
        "inverse_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "inverse_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "_check_params"
      ],
      [
        "./learning/embodied_thought/generative_reflex.py",
        "generate_response"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "log_interaction"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_implement_improvements"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_analyze_intent_patterns"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_analyze_memoria_patterns"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_analyze_dream_patterns"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_schedule_rehearsal_if_needed"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_apply_symbolic_optimizations"
      ],
      [
        "./learning/systems/duet_conductor.py",
        "manage_voice_handoff"
      ],
      [
        "./learning/systems/intent_language.py",
        "log_interpretation"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "_trigger_aggregation"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "save_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_persist_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_load_model"
      ],
      [
        "./consciousness/service.py",
        "__init__"
      ],
      [
        "./consciousness/service.py",
        "_update_internal_consciousness_state"
      ],
      [
        "./consciousness/service.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "release"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "release"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_execute_process"
      ],
      [
        "./consciousness/quantum_consciousness_hub.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_save_config"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_update_state_from_input"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_save_config"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "_update_consciousness_metrics"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "log_awareness_trace"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_update_internal_metrics"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_write_trace_to_file"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "update_bio_metrics"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_promote_stable_patterns"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "corrcoef"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "create_base_pattern"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_update_awareness"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_record_metrics"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "__init__"
      ],
      [
        "./consciousness/perception/symbolic_nervous_system.py",
        "__init__"
      ],
      [
        "./consciousness/systems/validator.py",
        "__init__"
      ],
      [
        "./consciousness/systems/integrator.py",
        "__init__"
      ],
      [
        "./consciousness/systems/mapper.py",
        "__init__"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "adapt_to_interaction"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_update_personality_traits"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "connect_brain"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "register_with_core"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "handle_system_idle"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "handle_system_active"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "start_dream_cycle"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_run_dream_cycle"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_sleep_with_check"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_log_dream"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_extract_themes"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "process_message"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "update_scores"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "calculate_drift"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "calculate_convergence"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "calculate_affect_delta"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "calculate_entropy_delta"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "__init__"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "__init__"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "run_async_test"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./compliance/entropy_tuning.py",
        "final_entropy_tune"
      ],
      [
        "./compliance/ethics_monitor.py",
        "ethics_drift_detect"
      ],
      [
        "./compliance/compliance_registry.py",
        "__init__"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_store_evaluation_history"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "emit_resolution_trace"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_write_resolution_audit_log"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_notify_mesh_components"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "_update_health_status"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "log_oracle_prediction"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_log_oracular_warning"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "update_symbol_registry"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "set_dream_state"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_write_collapse_audit_log"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_update_symbolic_memory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_integration.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_create_agents"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "recall"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "set_baseline"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "add_child"
      ],
      [
        "./reasoning/ethical/ConsentManager.py",
        "is_action_allowed"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/analysis/__init__.py",
        "analyze"
      ],
      [
        "./reasoning/analysis/engine.py",
        "__init__"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_update_causal_graph"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_update_history"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_process_semantic_causes"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_process_emotional_causes"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_process_contextual_causes"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_build_causal_chains"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_calculate_causal_confidences"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_summarize_chain"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_update_causal_graph"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_identify_primary_cause"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_extract_reasoning_path"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_update_history"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "__init__"
      ],
      [
        "./reasoning/utils/agentic_trace.py",
        "__init__"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "__init__"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "__init__"
      ],
      [
        "./reasoning/diagnostics/trace_mapper.py",
        "load_trace"
      ],
      [
        "./reasoning/decision/bridge.py",
        "__init__"
      ],
      [
        "./reasoning/decision/bridge.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "add_principle"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "add_ethical_engine"
      ],
      [
        "./ethics/monitor.py",
        "ethics_drift_detect"
      ],
      [
        "./ethics/ethics_engine.py",
        "increase_scrutiny_level"
      ],
      [
        "./ethics/ethics_engine.py",
        "incorporate_feedback"
      ],
      [
        "./ethics/ethics_engine.py",
        "_add_to_history"
      ],
      [
        "./ethics/compliance.py",
        "__init__"
      ],
      [
        "./ethics/compliance_simple.py",
        "__init__"
      ],
      [
        "./ethics/batch_guard.py",
        "__init__"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "_send_real_time_alerts"
      ],
      [
        "./ethics/decision_node.py",
        "__init__"
      ],
      [
        "./ethics/decision_node.py",
        "_record_decision"
      ],
      [
        "./ethics/decision_node.py",
        "_log_audit_event"
      ],
      [
        "./ethics/ethics_guard.py",
        "__init__"
      ],
      [
        "./ethics/ethics_guard.py",
        "update_rules"
      ],
      [
        "./ethics/export_report.py",
        "export_ethics_report"
      ],
      [
        "./ethics/export_report.py",
        "__init__"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "add_escalation_rule"
      ],
      [
        "./ethics/meg_guard.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/meg_bridge.py",
        "__init__"
      ],
      [
        "./ethics/compliance_validator.py",
        "__init__"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/bases.py",
        "add_compliance_rule"
      ],
      [
        "./ethics/bases.py",
        "add_rule"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "__init__"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_update_trends"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "emit_tuning_log"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "__init__"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "register_mesh_router"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "register_dream_coordinator"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "register_memory_manager"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "__init__"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_check_proposal_status"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_execute_proposal"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_execute_system_update"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_execute_ethical_decision"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_execute_resource_allocation"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_simulate_voting"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "add_constraint"
      ],
      [
        "./ethics/fallback/ethics_layer.py",
        "__init__"
      ],
      [
        "./ethics/security/emergency_override.py",
        "log_incident"
      ],
      [
        "./ethics/security/security_engine.py",
        "detect_threats"
      ],
      [
        "./ethics/security/security_engine.py",
        "sanitize_data"
      ],
      [
        "./ethics/security/flagship_security_engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "increase_scrutiny_level"
      ],
      [
        "./ethics/compliance/engine.py",
        "incorporate_feedback"
      ],
      [
        "./ethics/compliance/engine.py",
        "_add_to_history"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "_ensure_log_dir"
      ],
      [
        "./ethics/compliance/engine.py",
        "incorporate_ethics_feedback"
      ],
      [
        "./ethics/compliance/engine.py",
        "_log_ethics_drift_event"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_log_violation"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_log_escalation"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "unregister_symbol"
      ],
      [
        "./ethics/safety/entropy_tuning.py",
        "final_entropy_tune"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "add_custom_policy"
      ],
      [
        "./ethics/policy_engines/base.py",
        "unregister_policy"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "__init__"
      ],
      [
        "./voice/validator.py",
        "__init__"
      ],
      [
        "./voice/emotional_modulator.py",
        "__init__"
      ],
      [
        "./voice/recognition.py",
        "__init__"
      ],
      [
        "./voice/message_handler.py",
        "register_input_handler"
      ],
      [
        "./voice/message_handler.py",
        "register_output_handler"
      ],
      [
        "./voice/symbolic_voice_core.py",
        "speak"
      ],
      [
        "./voice/voice_replay.py",
        "narrate_dream_log"
      ],
      [
        "./voice/speech_engine.py",
        "__init__"
      ],
      [
        "./voice/modulator.py",
        "__init__"
      ],
      [
        "./voice/voice_profiling.py",
        "add_feedback"
      ],
      [
        "./voice/voice_profiling.py",
        "record_usage"
      ],
      [
        "./voice/voice_profiling.py",
        "__init__"
      ],
      [
        "./voice/duet_conductor.py",
        "manage_voice_handoff"
      ],
      [
        "./voice/processor.py",
        "__init__"
      ],
      [
        "./voice/audio_processor.py",
        "__init__"
      ],
      [
        "./voice/audio_engine.py",
        "__init__"
      ],
      [
        "./voice/speech_processor.py",
        "__init__"
      ],
      [
        "./voice/speech_processor.py",
        "_update_context_window"
      ],
      [
        "./voice/speech_processor.py",
        "_emit_transcription_result"
      ],
      [
        "./voice/speech_processor.py",
        "analyze"
      ],
      [
        "./voice/speech_framework.py",
        "process_transcription"
      ],
      [
        "./voice/speech_framework.py",
        "handle_error"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/voice_system_integrator.py",
        "__init__"
      ],
      [
        "./voice/modularity_system.py",
        "__init__"
      ],
      [
        "./voice/synthesis.py",
        "__init__"
      ],
      [
        "./voice/synthesis.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "__init__"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "update_configuration"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "register_input_handler"
      ],
      [
        "./orchestration/workflow_engine.py",
        "__init__"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "_update_average_response_time"
      ],
      [
        "./orchestration/core.py",
        "__init__"
      ],
      [
        "./orchestration/service_registry.py",
        "register_service"
      ],
      [
        "./orchestration/service_registry.py",
        "register_factory"
      ],
      [
        "./orchestration/integration_engine.py",
        "__init__"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/base.py",
        "__init__"
      ],
      [
        "./orchestration/base.py",
        "_load_additional_config"
      ],
      [
        "./orchestration/base.py",
        "unregister_component"
      ],
      [
        "./orchestration/base.py",
        "_update_average_operation_time"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "__init__"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "_check_for_echo_loops"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "_output_alert"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_log_comparison"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_ensure_orchestrator_tracking"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_orchestrator_mode"
      ],
      [
        "./orchestration/config/migration_router.py",
        "is_orchestrator_enabled"
      ],
      [
        "./orchestration/config/migration_router.py",
        "should_use_legacy_orchestrator"
      ],
      [
        "./orchestration/config/production_config.py",
        "save_to_file"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "__init__"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "_output_alert"
      ],
      [
        "./orchestration/security/dast_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/__init__.py",
        "track"
      ],
      [
        "./orchestration/security/dast/__init__.py",
        "optimize_workflow"
      ],
      [
        "./orchestration/security/dast/api.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_optimize_workflow_async"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_update_workflow_metrics_sync"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_update_workflow_metrics"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_record_operation_time"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_update_pattern_library"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_create_sync_function"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_create_push_function"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_create_status_function"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/agents/registry.py",
        "register"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "__init__"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "_complete_task"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_history"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_perform_self_modification"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "add_node"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "in_degree"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "out_degree"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "degree"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "mark_endpoint_unhealthy"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "mark_endpoint_healthy"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "call"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/immune/system_watchdog.py",
        "__init__"
      ],
      [
        "./orchestration/immune/system_watchdog.py",
        "_quarantine_entry"
      ],
      [
        "./orchestration/examples/endocrine_module_example.py",
        "__init__"
      ],
      [
        "./orchestration/examples/endocrine_module_example.py",
        "set_endocrine_integration"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "print_summary"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/controller.py",
        "__init__"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "validate_consent_basis"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_apply_data_minimization"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/adaptive_image_generator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_update_swarm"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_validate_research_ethics"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "_evolve_to"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "unregister_process"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/llm_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/llm_engine.py",
        "batch_generate"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prime_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prime_oscillator.py",
        "generate_harmonic"
      ],
      [
        "./orchestration/brain/prime_oscillator.py",
        "get_harmonic_series"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "__init__"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "get_privacy_setting"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "apply_privacy_mechanisms"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "anonymize_data"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "encrypt_sensitive_fields"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "decrypt_field"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "create_gdpr_report"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "log_privacy_event"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "get_privacy_logs"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "_hash_pii_value"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "_encrypt_value"
      ],
      [
        "./orchestration/brain/core_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "__init__"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "adjust_config"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "_update_identity_from_experience"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "_take_identity_snapshot"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "_load_identity"
      ],
      [
        "./orchestration/brain/dream_mutator.py",
        "save_mutated_dream"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "add_issue_to_batch"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "format"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "deep_merge"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_chain_integrity.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "save_autonomous_fix_results"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "process"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "analyze"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "process"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "analyze_performance"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "evaluate"
      ],
      [
        "./orchestration/brain/integrity_probe.py",
        "__init__"
      ],
      [
        "./orchestration/brain/drift_pattern_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_fixer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "sync_with_orchestra"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_validate_institutional_compliance"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "__init__"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/demo.py",
        "generate_simple_response"
      ],
      [
        "./orchestration/brain/demo.py",
        "determine_parameters"
      ],
      [
        "./orchestration/brain/demo.py",
        "anonymize_metadata"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "__init__"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "_write_trace"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "_cache_trace"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_chain_simulator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "build_gpt_prompt"
      ],
      [
        "./orchestration/brain/compliance_registry.py",
        "__init__"
      ],
      [
        "./orchestration/brain/entropy_probe.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "add_neighbor"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/healix_visualizer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "adjust_attention_gates"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_update_awareness"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/net/client.py",
        "timeout"
      ],
      [
        "./orchestration/brain/net/client.py",
        "event_hooks"
      ],
      [
        "./orchestration/brain/net/client.py",
        "auth"
      ],
      [
        "./orchestration/brain/net/client.py",
        "base_url"
      ],
      [
        "./orchestration/brain/net/client.py",
        "headers"
      ],
      [
        "./orchestration/brain/net/client.py",
        "cookies"
      ],
      [
        "./orchestration/brain/net/client.py",
        "params"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_set_timeout"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "_unpack_response"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "prompt_dream_feedback"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "speak_text"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "handle_talk"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "handle_dream"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_goal"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_agent"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "receive_message"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_rule"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate_action"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_interaction"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_log"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "synthesize_unified_self"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "save_snapshot"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "adjust_traits_from_context"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "log_trait_shift"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_add_to_indices"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_remove_from_indices"
      ],
      [
        "./orchestration/brain/spine/emotion_intent_link.py",
        "crosslink_emotion_to_intent"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "compare_traits"
      ],
      [
        "./orchestration/brain/spine/emotion_mapper.py",
        "map_intent_to_emoji"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "compare_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "summarize_comparisons"
      ],
      [
        "./orchestration/brain/spine/emotion_log.py",
        "log_emotion"
      ],
      [
        "./orchestration/brain/config/settings_editor.py",
        "save_settings"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "get_setting"
      ],
      [
        "./orchestration/brain/config/settings_loader.py",
        "flatten"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "refine_with_feedback"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "get_trait"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "adapt_to_interaction"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_update_personality_traits"
      ],
      [
        "./orchestration/brain/consciousness/dream_narrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "notify_memory_removal"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "_handle_awareness_update"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "_handle_focus_request"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "_handle_reflection_request"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "_handle_start_cycle"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "_handle_stop_cycle"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "_handle_get_state"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "_handle_speak_request"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "_handle_audio_input"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "_handle_voice_config"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "register_legacy_handler"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "_handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_update_cognitive_state"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "add_node"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_update_quantum_like_state"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "_handle_input_processing"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "_handle_memory_consolidation"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "_handle_dream_cycle"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_update_calibration_model"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "sync_with_master"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "log_reflection"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_implement_improvements"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "add_constitutional_rule"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "add_issue"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "add_custom_validator"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/episodic_recall.py",
        "recall"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_update_reasoning_graph"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "increase_scrutiny_level"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_add_to_history"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "adapt_weights"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethical_conflict_resolution.py",
        "resolve_ethical_conflict"
      ],
      [
        "./orchestration/brain/ethics/ethical_conflict_resolution.py",
        "analyze_historical_impact"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/ethical_conflict_resolution.py",
        "resolve_ethical_conflict"
      ],
      [
        "./orchestration/brain/emotional/ethical_conflict_resolution.py",
        "analyze_historical_impact"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compliance_score"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_compliance"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "log_violation"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "adapt_weights"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "get_priority_weights"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "fallback_protocol"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "symbolic_fallback_ethics"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "validate_operation"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_transparency"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_data_protection"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_bias"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "play_sound"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "process_decision"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_modulate_ethical_weights"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_human_oversight_protocol"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_analyze_context"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_synthesize_output"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_adversarial_input"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "assess_stakeholder_impact"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "modulate_emotional_state"
      ],
      [
        "./orchestration/brain/orchestration/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "_log_to_trace"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "add_call"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "take_snapshot"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "submit"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "shutdown"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_implement_improvements"
      ],
      [
        "./orchestration/brain/neural/neural_intelligence_main.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/signal_middleware.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "_log_symbolic_trace"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compliance_score"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_compliance"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "log_violation"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "adapt_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "get_priority_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "fallback_protocol"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "symbolic_fallback_ethics"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "validate_operation"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_transparency"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_data_protection"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_bias"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "play_sound"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "process_decision"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_modulate_ethical_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_human_oversight_protocol"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_analyze_context"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_synthesize_output"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_adversarial_input"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "assess_stakeholder_impact"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "modulate_emotional_state"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "log_reflection"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "unregister_check"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "save_registry_state"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "register_capability"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "update_status"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "__init__"
      ],
      [
        "./governance/compliance_report_generator.py",
        "plot_drift_scores"
      ],
      [
        "./governance/compliance_report_generator.py",
        "generate_report"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/pwm_workspace_guardian.py",
        "__init__"
      ],
      [
        "./governance/audit_logger.py",
        "evaluate_decision"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "recalibrate"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "escalate_to_human"
      ],
      [
        "./governance/enhanced_pwm_guardian.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/dream_commerce.py",
        "check_consent"
      ],
      [
        "./api/core/dream_commerce.py",
        "verify_access"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "__init__"
      ],
      [
        "./api/commercial/memory_services/memory_api.py",
        "__init__"
      ],
      [
        "./symbolic/colony_tag_propagation.py",
        "__init__"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "register"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_markdown_report"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_json_report"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "__init__"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "optimize"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "__init__"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "update_stress"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "allocate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_calculate_cristae_topology"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_route_to_instrument"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_synchronize"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "perform"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "optimize"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "allocate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "perform"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__call__"
      ],
      [
        "./symbolic/bio/bio_symbolic.py",
        "process"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "add_symbol"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "add_relation"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "add_symbol"
      ],
      [
        "./symbolic/features/causal_reasoner_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/trace_verifier.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "add_child"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "remove_child"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "add_semantic_tag"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "remove_semantic_tag"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "add_memory_key"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "remove_memory_key"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "update_drift_anchor"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "update_trend"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "add_expiry_handler"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "add_integrity_handler"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_check_decay_transitions"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_handle_expiration"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_remove_expired_glyph"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_write_collapse_audit_log"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_update_symbolic_memory"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "clear_inactive_fields"
      ],
      [
        "./symbolic/features/collapse/buffer.py",
        "buffer_event"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_analyze_drift_for_session"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_implement_symbolic_quarantine"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_emit_to_external_systems"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "__init__"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "add_pre_recall_hook"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "add_post_recall_hook"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "__init__"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_analyze_drift_for_session"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_implement_symbolic_quarantine"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_emit_to_external_systems"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "set_fusion_context"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "adapt_fusion_weights"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_store_pattern"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "_update_processing_metrics"
      ],
      [
        "./dream/dream_pipeline.py",
        "_log_dream"
      ],
      [
        "./dream/dream_pipeline.py",
        "allows"
      ],
      [
        "./dream/dream_pipeline.py",
        "pick_emotional_memory"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "add_decision"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "add_outcome"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_log_token_warning"
      ],
      [
        "./dream/core.py",
        "_adjust_dream_state_for_phase"
      ],
      [
        "./dream/core.py",
        "set_memory_module"
      ],
      [
        "./dream/core.py",
        "set_governance_module"
      ],
      [
        "./dream/core.py",
        "set_emotion_module"
      ],
      [
        "./dream/dream_mutator.py",
        "save_mutated_dream"
      ],
      [
        "./dream/feedback_propagator.py",
        "propagate"
      ],
      [
        "./dream/feedback_propagator.py",
        "_cross_check_redirection_ethics"
      ],
      [
        "./dream/feedback_propagator.py",
        "_finalize_causality_trace"
      ],
      [
        "./dream/redirect_trace_replayer.py",
        "__init__"
      ],
      [
        "./dream/openai_dream_integration.py",
        "__init__"
      ],
      [
        "./dream/openai_dream_integration.py",
        "_save_dream_record"
      ],
      [
        "./dream/dream_seed.py",
        "generate_semantic_dream"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_update_tag_registry"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "__init__"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "__init__"
      ],
      [
        "./dream/core/dream_log.py",
        "__init__"
      ],
      [
        "./dream/core/dream_log.py",
        "get_recent_dreams"
      ],
      [
        "./dream/core/dream_loop_generator.py",
        "__init__"
      ],
      [
        "./dream/core/dream_seed_simple.py",
        "__init__"
      ],
      [
        "./dream/core/dream_stats.py",
        "update_stats"
      ],
      [
        "./dream/core/dream_snapshot.py",
        "__init__"
      ],
      [
        "./dream/core/dream_feedback_controller.py",
        "__init__"
      ],
      [
        "./dream/core/dream_emotion_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/dream_emotion_bridge.py",
        "_trigger_dream_replay"
      ],
      [
        "./dream/core/dream_reflection_loop_simple.py",
        "reflect"
      ],
      [
        "./dream/core/dream_reflection_loop_simple.py",
        "is_stable"
      ],
      [
        "./dream/core/dream_seed.py",
        "seed_dream"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_injector.py",
        "process_payload"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "__init__"
      ],
      [
        "./dream/core/dream_limiter.py",
        "__init__"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/utils/symbolic_logger.py",
        "log_dream"
      ],
      [
        "./dream/dashboard/dream_metrics_db.py",
        "__init__"
      ],
      [
        "./dream/stability/redirect_forecaster.py",
        "__init__"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "__init__"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "affect_vector_velocity"
      ],
      [
        "./emotion/colony_emotions.py",
        "__init__"
      ],
      [
        "./emotion/emotion_hub.py",
        "_update_emotional_state"
      ],
      [
        "./emotion/mood_regulator.py",
        "adjust_baseline_from_drift"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "integrate_with_tuner"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "integrate_with_governor"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "add_mood_vector"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "log_mood"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "suggest_modulation"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "inject_dream_snapshot"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "__init__"
      ],
      [
        "./deployments/memory_services/memory_services/memory_api.py",
        "__init__"
      ],
      [
        "./quantum/validator.py",
        "__init__"
      ],
      [
        "./quantum/system_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/coordinator.py",
        "__init__"
      ],
      [
        "./quantum/service.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/service.py",
        "_apply_observation_effects"
      ],
      [
        "./quantum/metadata.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "_protect_memory"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processor.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "_initialize_filter_state_params"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "secure_cleanup"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__init__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__init__"
      ],
      [
        "./quantum/vault_manager.py",
        "__init__"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_update_cumulative_efficiency_gain"
      ],
      [
        "./quantum/certificate_manager.py",
        "__init__"
      ],
      [
        "./quantum/attention_economics.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/creative_integration.py",
        "__init__"
      ],
      [
        "./quantum/layer.py",
        "entangle"
      ],
      [
        "./quantum/layer.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/processing_core.py",
        "_set_coherence_level"
      ],
      [
        "./quantum/api_manager.py",
        "_update_usage_tracking"
      ],
      [
        "./quantum/entanglement.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neural_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_build_causal_chains"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_summarize_chain"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_history"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compliance_score"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_compliance"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "log_violation"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "adapt_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "get_priority_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "fallback_protocol"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "symbolic_fallback_ethics"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "validate_operation"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_transparency"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_data_protection"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_bias"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "play_sound"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "process_decision"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_modulate_ethical_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_human_oversight_protocol"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_analyze_context"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_synthesize_output"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_adversarial_input"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "assess_stakeholder_impact"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "modulate_emotional_state"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "_validate_quantum_like_state"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "record_consensus"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "display_final_status"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_set_coherence_level"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "quantum_modulate"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "adjust_entanglement"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "process_quantum_like_state"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "__init__"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "__init__"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "quantum_modulate"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "adjust_entanglement"
      ]
    ],
    "1:bool": [
      [
        "./tools/generate_lukhas_ecosystem_documentation.py",
        "_check_lambda_easydoc"
      ],
      [
        "./tools/generate_lukhas_ecosystem_documentation.py",
        "_check_lambda_doc"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "is_deprecated"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "validate_config"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "initialize_ai_documentation_engine"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "should_fallback"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "repair"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "repair"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "_check_verification"
      ],
      [
        "./trace/commit_log_checker.py",
        "validate_commit_message"
      ],
      [
        "./core/config.py",
        "is_production"
      ],
      [
        "./core/config.py",
        "is_development"
      ],
      [
        "./core/image_processing_pipeline.py",
        "is_healthy"
      ],
      [
        "./core/symbolic_boot.py",
        "validate_workspace"
      ],
      [
        "./core/event_sourcing.py",
        "commit_events"
      ],
      [
        "./core/practical_optimizations.py",
        "is_expired"
      ],
      [
        "./core/practical_optimizations.py",
        "is_computed"
      ],
      [
        "./core/core_utilities.py",
        "run_consistency_check"
      ],
      [
        "./core/supervision.py",
        "can_proceed"
      ],
      [
        "./core/common.py",
        "validate_component_id"
      ],
      [
        "./core/efficient_communication.py",
        "is_expired"
      ],
      [
        "./core/integrity_probe.py",
        "run_consistency_check"
      ],
      [
        "./core/mailbox.py",
        "is_full"
      ],
      [
        "./core/direct_ai_router.py",
        "is_available"
      ],
      [
        "./core/agent_coordination.py",
        "is_expired"
      ],
      [
        "./core/agent_coordination.py",
        "all_skills_covered"
      ],
      [
        "./core/agi/self_healing.py",
        "is_open"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "revert_last"
      ],
      [
        "./core/helpers/__init__.py",
        "to_bool"
      ],
      [
        "./core/interfaces/api/v1/common/validators.py",
        "validate_api_key"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "validate_api_key"
      ],
      [
        "./memory/emotional.py",
        "is_fuse_active"
      ],
      [
        "./memory/distributed_state_manager.py",
        "is_expired"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "is_expired"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "should_be_deleted"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_verify_chronological_order"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "is_functional"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "is_encoding_optimal"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "is_retrieval_optimal"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "is_active"
      ],
      [
        "./memory/fold_system/foldin_simple.py",
        "verify_lkf_pack"
      ],
      [
        "./memory/hooks/base.py",
        "is_enabled"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "is_leaf"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "_verify_tree_structure"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "verify_node"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "verify_integrity"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "is_allocation"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "is_deletion"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_is_gradient"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "matches"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "leaf_op"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_check_identity_module"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "_check_image_support"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "_check_audio_support"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "_check_video_support"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_is_optimal_phase"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "is_consensus_reached"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "is_valid"
      ],
      [
        "./identity/core/events/identity_event_types.py",
        "is_security_critical"
      ],
      [
        "./identity/core/events/identity_event_types.py",
        "requires_colony_coordination"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "save_config"
      ],
      [
        "./identity/governance/policy_board.py",
        "is_approved"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "is_available"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_analyze_trace_sequence_for_pattern"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "is_approved"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "is_safe"
      ],
      [
        "./ethics/governance_checker.py",
        "is_fine_tunable"
      ],
      [
        "./ethics/meg_guard.py",
        "_ethical_check"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "is_unstable"
      ],
      [
        "./ethics/security/secure_utils.py",
        "_is_safe_ast"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./orchestration/service_registry.py",
        "unregister_service"
      ],
      [
        "./orchestration/config/migration_router.py",
        "can_execute"
      ],
      [
        "./orchestration/config/production_config.py",
        "is_production"
      ],
      [
        "./orchestration/config/production_config.py",
        "is_development"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "_detect_recursive_misfire"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "_detect_governance_tier_escalation"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "_detect_drift_score_threshold_breach"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_should_attempt_reset"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "stop_consolidation_thread"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "is_sustainable_location"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "is_indoor_location"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "evolve_consciousness"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "_can_evolve"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "is_sustainable_location"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "is_indoor_location"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "rate_limit_check"
      ],
      [
        "./orchestration/brain/net/client.py",
        "is_closed"
      ],
      [
        "./orchestration/brain/net/client.py",
        "trust_env"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "test_connection"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "stop_dream_consolidation"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "stop_radar_monitoring"
      ],
      [
        "./orchestration/brain/qrl_code/com_validator.py",
        "validate_compliance"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "is_bidirectional"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "should_run"
      ],
      [
        "./orchestration/monitoring/sub_agents/memory_cleaner.py",
        "perform_cleanup"
      ],
      [
        "./orchestration/monitoring/sub_agents/memory_cleaner.py",
        "consolidate_dream_sequences"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "should_fallback"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_expired"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_stable"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_expired"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "start_monitoring"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "stop_monitoring"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_should_trigger_dream_cycle"
      ],
      [
        "./quantum/utils/add_module_descriptions.py",
        "add_module_description"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "has_existing_header"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "add_poetic_header"
      ],
      [
        "./quantum/utils/fix_proper_ascii.py",
        "fix_ascii_in_file"
      ],
      [
        "./quantum/utils/fix_ascii_headers.py",
        "fix_ascii_in_file"
      ],
      [
        "./quantum/utils/regenerate_intelligent_descriptions.py",
        "regenerate_description"
      ],
      [
        "./quantum/utils/fix_module_descriptions.py",
        "fix_description"
      ],
      [
        "./quantum/utils/add_compliant_headers.py",
        "has_existing_lukhas_header"
      ],
      [
        "./quantum/utils/add_compliant_headers.py",
        "add_compliant_header"
      ],
      [
        "./quantum/utils/add_intelligent_descriptions.py",
        "add_intelligent_description"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "add_verbose_description"
      ],
      [
        "./quantum/utils/add_template_reference.py",
        "add_template_reference"
      ]
    ],
    "3:int": [
      [
        "./tools/documentation/plugin.py",
        "get_optimal_complexity"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_calculate_optimal_complexity"
      ],
      [
        "./core/cluster_sharding.py",
        "assign_actor"
      ],
      [
        "./core/interfaces/dashboard/core/morphing_engine.py",
        "_calculate_transition_priority"
      ],
      [
        "./memory/memory_optimization.py",
        "_hash"
      ],
      [
        "./memory/memory_optimization.py",
        "_optimal_size"
      ],
      [
        "./memory/memory_optimization.py",
        "_optimal_hash_count"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_count_harmonic_matches"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_apply_cognitive_load_adjustment"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_apply_screen_constraints"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_apply_accessibility_adjustments"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "calculate_adaptive_grid_size"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_calculate_initial_tier"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_calculate_qr_version"
      ],
      [
        "./learning/plugin_learning_engine.py",
        "get_optimal_complexity"
      ],
      [
        "./learning/tutor.py",
        "_estimate_learning_time"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_get_rate_limit_remaining"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "assign_emotional_tier"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_lcs_length"
      ]
    ],
    "2:bool": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "add_node"
      ],
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "add_relationship"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "_is_text_file"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_detect_burnout_risk"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_detect_understimulation"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "_should_circuit_break"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "_verify_session_token"
      ],
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "is_synchronized"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "is_connected_to"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "add_node"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "remove_node"
      ],
      [
        "./trace/vdf.py",
        "verify_vdf_proof"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./trace/drift_alignment_controller.py",
        "assess_alignment"
      ],
      [
        "./trace/drift_dashboard.py",
        "_is_oscillating"
      ],
      [
        "./trace/drift_dashboard.py",
        "_is_escalating"
      ],
      [
        "./core/quorum_override.py",
        "request_access"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_can_handle_work"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_is_processing_complete"
      ],
      [
        "./core/integrated_safety_system.py",
        "check_circuit_breaker"
      ],
      [
        "./core/event_sourcing.py",
        "append_event"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "is_within_budget"
      ],
      [
        "./core/core_utilities.py",
        "request_access"
      ],
      [
        "./core/efficient_communication.py",
        "can_afford_message"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "remove_proxy"
      ],
      [
        "./core/agi/self_improvement.py",
        "is_safe"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "_requires_ethical_review"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "cancel_task"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_can_start_task"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_is_dependency_satisfied"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "verify_verifold_hash"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "execute_remediation"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "run_monitoring_cycle"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "_synchronize_quantum_signatures"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./core/user_interface_manager/voice_handler.py",
        "speak"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "_is_node_file"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_passes_ethical_arbitration"
      ],
      [
        "./core/services/location/tracker.py",
        "_should_update_location"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "record_heartbeat"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_validate_access"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "should_retain_data"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "register_assessor"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "register_assessor"
      ],
      [
        "./core/hub_services/service_registry.py",
        "has_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "unregister_service"
      ],
      [
        "./memory/fold_engine.py",
        "add_association"
      ],
      [
        "./memory/fold_engine.py",
        "add_tag"
      ],
      [
        "./memory/fold_engine.py",
        "matches_tag"
      ],
      [
        "./memory/core.py",
        "is_alive"
      ],
      [
        "./memory/memory_fold.py",
        "add_fold"
      ],
      [
        "./memory/memory_optimization.py",
        "contains"
      ],
      [
        "./memory/dashboard.py",
        "_is_cache_valid"
      ],
      [
        "./memory/basic.py",
        "delete"
      ],
      [
        "./memory/basic.py",
        "delete"
      ],
      [
        "./memory/basic.py",
        "forget"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_validate_memory_snapshot"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_is_binary_file"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "_can_handle_operation"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_has_circular_relations"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_has_violation_history"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "is_alive"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_is_in_coherent_cluster"
      ],
      [
        "./memory/hooks/registry.py",
        "unregister_hook"
      ],
      [
        "./memory/hooks/registry.py",
        "_is_circuit_broken"
      ],
      [
        "./memory/hooks/base.py",
        "validate_fold_integrity"
      ],
      [
        "./memory/hooks/base.py",
        "validate_symbolic_consistency"
      ],
      [
        "./memory/systems/replay_system.py",
        "close_session"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__eq__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__lt__"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "_is_logically_consistent"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "force_flush"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "force_flush"
      ],
      [
        "./memory/systems/memory_node.py",
        "forget"
      ],
      [
        "./memory/systems/memory_node.py",
        "add_to_working_memory"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "verify_collapse_integrity"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "overlaps"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "deallocate_tensor"
      ],
      [
        "./memory/systems/memory_bases.py",
        "delete"
      ],
      [
        "./memory/systems/memory_bases.py",
        "can_access"
      ],
      [
        "./memory/systems/tier_system.py",
        "check_access_level"
      ],
      [
        "./memory/systems/tier_system.py",
        "_has_approval"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_check_cooldown"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_recursive_amplification"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "add_fragment"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "exists"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "delete_embedding"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "exists"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "matches_threat"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "_detect_corruption"
      ],
      [
        "./identity/interface.py",
        "verify_access"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./identity/interface.py",
        "validate_identity"
      ],
      [
        "./identity/interface.py",
        "validate_identity"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "validate_entropy_data"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "validate_authentication_request"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_check_collision"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "check_tier_access"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "notify_memory_removal"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "register_lambda_id"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "unregister_lambda_id"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "_can_allocate_resources"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_geo_consent_granted"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_verify_dream_response_integrity"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "_is_scope_revocable"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "verify_consent_chain"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_validate_brand_code"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_establish_baseline_patterns"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_validate_inference_request"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_check_inference_permissions"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_validate_memory_data"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "customize_personality_flow"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_check_session_limits"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_is_token_expired"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_check_biometric_availability"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_validate_qr_glyph_signature"
      ],
      [
        "./identity/core/tier/tier_system.py",
        "validate_tier_permission"
      ],
      [
        "./identity/enterprise/auth.py",
        "logout"
      ],
      [
        "./identity/enterprise/auth.py",
        "_requires_mfa"
      ],
      [
        "./identity/lukhas_identity/security/kyi_check.py",
        "check_kyi_threshold"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_constitutional_validation"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_contains_emoji"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_has_mixed_content"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_is_cultural_content"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_has_special_characters"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "validate_qr_format"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "validate_glymph_sequence"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_validate_tier"
      ],
      [
        "./security/moderator.py",
        "is_emotionally_intense"
      ],
      [
        "./security/moderator.py",
        "is_compliant"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_verify_proof_structure"
      ],
      [
        "./security/safety/coordinator.py",
        "_needs_emergency_response"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "_save_profile"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "delete_profile"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "archive_memory_map"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "should_offer_help"
      ],
      [
        "./bridge/openai_core_service.py",
        "_is_cache_valid"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "establish_symbolic_handshake"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "close_bridge"
      ],
      [
        "./bridge/shared_state.py",
        "_is_expired"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "bridge_reasoning_flow"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "close_reasoning_context"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_aggregate_model"
      ],
      [
        "./learning/federated_meta_learning.py",
        "save_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_aggregate_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "save_model"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_synchronize_quantum_signatures"
      ],
      [
        "./learning/tutor.py",
        "_should_adjust_difficulty"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_synchronize_quantum_signatures"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_aggregate_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "save_model"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_should_sync_with_node"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_should_sync_with_node"
      ],
      [
        "./consciousness/service.py",
        "initialize"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "allocate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "allocate"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "has_permission"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "_is_content_type_supported"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_detect_significant_pattern"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_verify_channel"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "_validate_safety"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_has_dream_experiences"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_is_binary_file"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "is_stable"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_is_binary_file"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "_detect_unfair_advantage"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "apply_logic_operator"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "_detect_reasoning_loop"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_is_insight_node"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "apply_logic_operator"
      ],
      [
        "./ethics/compliance_engine.py",
        "should_retain_data"
      ],
      [
        "./ethics/ethics_engine.py",
        "evaluate_action"
      ],
      [
        "./ethics/compliance.py",
        "_contains_sensitive_data"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "should_retain_data"
      ],
      [
        "./ethics/compliance_simple.py",
        "_contains_sensitive_data"
      ],
      [
        "./ethics/batch_guard.py",
        "_contains_sensitive_data"
      ],
      [
        "./ethics/batch_guard.py",
        "_has_ai_disclosure"
      ],
      [
        "./ethics/batch_guard.py",
        "_validate_symbol_compliance"
      ],
      [
        "./ethics/governance_checker.py",
        "validate_symbolic_integrity"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "should_escalate"
      ],
      [
        "./ethics/meg_guard.py",
        "_check_rate_limit"
      ],
      [
        "./ethics/compliance_validator.py",
        "validate"
      ],
      [
        "./ethics/bases.py",
        "validate_action"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_in_cooldown_period"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_requires_consent"
      ],
      [
        "./ethics/fallback/ethics_layer.py",
        "is_allowed"
      ],
      [
        "./ethics/compliance/engine.py",
        "evaluate_action"
      ],
      [
        "./ethics/compliance/engine.py",
        "evaluate_action_ethics"
      ],
      [
        "./ethics/compliance/engine.py",
        "evaluate_action"
      ],
      [
        "./ethics/compliance/engine.py",
        "should_retain_data"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_is_consent_valid"
      ],
      [
        "./voice/voice_profiling.py",
        "_save_profile"
      ],
      [
        "./voice/voice_profiling.py",
        "delete_profile"
      ],
      [
        "./voice/voice_system_integrator.py",
        "_contains_complex_emotion"
      ],
      [
        "./voice/voice_system_integrator.py",
        "end_session"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "_should_use_system_voice"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "_validate_colony_config"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "_can_create_colony"
      ],
      [
        "./orchestration/service_registry.py",
        "unregister_service"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "_would_create_circular_dependency"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "_is_cache_valid"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "detect_misalignment"
      ],
      [
        "./orchestration/security/LGOV_validator.py",
        "validate_decision"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "register_adapter"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_is_reviewer_available_now"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "_assign_agents_to_task"
      ],
      [
        "./orchestration/agents/base.py",
        "validate_context"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "validate_context"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_should_exclude_file"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "execute_scaling"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "enqueue_task"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_should_exclude_file"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_gdpr_compliance"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_ccpa_compliance"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_processes_personal_data"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_consent_management"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_encryption"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_audit_logging"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_is_ai_module"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_ai_transparency"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_is_critical_module"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_has_obvious_security_issues"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_requires_impact_assessment"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "start_consolidation_thread"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_is_sustainable_location"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_detect_anomalies"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_should_sync_with_node"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_check_retention_compliance"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "quantum_anomaly_check"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_validate_lawful_basis"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_is_portable_data"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "_is_identity_relevant"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "save_identity"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "quantum_anomaly_check"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_assess_state_territory_compliance"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "add_security_review"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "auto_fix_security_issues"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "can_use_flex_budget"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_validate_retention_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_validate_cross_border_transfers"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_is_https_redirect"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_same_origin"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "is_access_allowed"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "update"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "add_association"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "add_tag"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "matches_tag"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "remove_fold"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "start_dream_consolidation"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "configure_radar_analytics"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "should_retain_data"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_aggregate_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "save_model"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "_is_high_risk_ai_system"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_load_model"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "set_default_method"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "evaluate_action"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "_check_peaceful_intent"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "_check_peaceful_intent"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "delete"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "initialize_awareness_protocol"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_requires_ethical_intervention"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_requires_memory_intervention"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_perform_vocalization"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "has_capability"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_is_binary_file"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "is_synchronized"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "_evaluate_conditions"
      ],
      [
        "./symbolic/features/trace_verifier.py",
        "verify_trace"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "register_glyph"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "unregister_glyph"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "record_access"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "force_refresh"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_refresh_glyph"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_evaluate_conditional_persistence"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "check_access"
      ],
      [
        "./symbolic/features/collapse/__init__.py",
        "trigger_collapse"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_detect_exact_sequence_loops"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_detect_similar_pattern_loops"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_detect_frequency_oscillations"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_detect_cascade_patterns"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_detect_exact_sequence_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_detect_similar_pattern_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_detect_frequency_oscillations"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_detect_cascade_patterns"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "add_timeline"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_has_cyclic_pattern"
      ],
      [
        "./dream/core/dream_emotion_bridge.py",
        "_is_trigger_emotion"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "enforce_emotional_safety"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "enforce_emotional_safety"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_passes_ethical_arbitration"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_is_cache_valid"
      ],
      [
        "./quantum/api_manager.py",
        "_verify_glyph_integrity"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "_verify_signature"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_has_imports"
      ]
    ],
    "3:List[SKGRelationship]": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "get_outgoing_relationships"
      ],
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "get_incoming_relationships"
      ]
    ],
    "3:Dict[str, Any]": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "get_neighborhood"
      ],
      [
        "./bio/quantum_layer.py",
        "oscillate"
      ],
      [
        "./bio/quantum_layer.py",
        "create_entanglement"
      ],
      [
        "./bio/quantum_layer.py",
        "synchronize_with_rhythm"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_synthesize_results_basic"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "process_audio_chunk"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_apply_soft_filter"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_apply_hard_filter"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_apply_interpolation"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_apply_quantum_healing"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "optimize"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "analyze_drift_trends"
      ],
      [
        "./core/distributed_tracing.py",
        "replay_trace"
      ],
      [
        "./core/enhanced_swarm.py",
        "_achieve_consensus"
      ],
      [
        "./core/event_sourcing.py",
        "analyze_agent_behavior"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "predict_operation_energy"
      ],
      [
        "./core/bot.py",
        "process_task"
      ],
      [
        "./core/bot.py",
        "_process_classic"
      ],
      [
        "./core/bot.py",
        "_process_ai"
      ],
      [
        "./core/bot.py",
        "_process_enterprise"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "simulate_future_state"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "process"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "_neural_process"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "_symbolic_process"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "_integrate_results"
      ],
      [
        "./core/personality/personality.py",
        "get_personality_profile"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "export_dreams"
      ],
      [
        "./core/interfaces/logic/delegate_logic.py",
        "delegate_action"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_analyze_memory"
      ],
      [
        "./memory/service.py",
        "search_memory"
      ],
      [
        "./memory/service.py",
        "retrieve_memory"
      ],
      [
        "./memory/service.py",
        "delete_memory"
      ],
      [
        "./memory/emotional.py",
        "affect_delta"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "analyze_fold_lineage"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "generate_lineage_graph"
      ],
      [
        "./memory/memory_fold.py",
        "create_memory_fold"
      ],
      [
        "./memory/memory_fold.py",
        "get_prompt_for_fold"
      ],
      [
        "./memory/memory_fold.py",
        "filter_data_by_tier"
      ],
      [
        "./memory/memory_fold.py",
        "log_dream"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "_apply_differential_privacy"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_collapse_superposition"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_evolve_quantum_like_state"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_apply_drift_correction"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "process_dream_state"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_extract_emotional_state"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_blend_emotional_states"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_apply_drift_correction"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_apply_tier_filtering"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_collapse_superposition"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_evolve_quantum_like_state"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "detect_stale_symbols"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "generate_audit_report"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "analyze_fold_lineage"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "generate_lineage_graph"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_content_delta"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_analyze_motif_complexity_ratio"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "assess_trauma_impact"
      ],
      [
        "./memory/systems/replay_system.py",
        "_apply_filters"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "explain_attention"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "create_retrieval_filter"
      ],
      [
        "./memory/systems/memory_lock.py",
        "encrypt_memory"
      ],
      [
        "./memory/systems/memory_lock.py",
        "decrypt_memory"
      ],
      [
        "./memory/systems/memory_identity.py",
        "encrypt_memory_content"
      ],
      [
        "./memory/systems/memory_identity.py",
        "decrypt_memory_content"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_evaluate_protection_response"
      ],
      [
        "./memory/systems/memory_processing.py",
        "export_memories"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "optimize_learning_approach"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "encrypt_memory"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "decrypt_memory"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "create_allocation_pool"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "modulate_emotion"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "integrate_memory_emotion"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "_enhance_memory_with_emotion"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_recursive_amplification_enhanced"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_memory_amplification_risk"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_assess_quantum_entanglement_risk"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_knowledge"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "extract_user_insights"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_find_subcategories"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_extract_attributes"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "establish_quantum_safe_channel"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "quantum_safe_encrypt"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_generate_demo_result"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_validate_grid_calculation"
      ],
      [
        "./identity/core/qrs_manager.py",
        "authenticate_with_symbolic_challenge"
      ],
      [
        "./identity/core/qrs_manager.py",
        "generate_qrg_for_lambda_id"
      ],
      [
        "./identity/core/qrs_manager.py",
        "validate_qrg_authentication"
      ],
      [
        "./identity/core/qrs_manager.py",
        "update_symbolic_vault"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_validate_symbolic_elements"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_check_automatic_upgrade"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_check_manual_upgrade"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_fallback_encrypt"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_fallback_decrypt"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "encrypt_memory_content"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "decrypt_memory_content"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "calculate_live_entropy"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "optimize_lambda_id"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_analyze_tier_compliance"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "create_backup_file"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_create_backup_data"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_apply_cultural_adaptations"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "enroll_biometric"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_calculate_billing"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "validate_commercial_lambda_id"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "get_consciousness_pattern_analysis"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "detect_consciousness_spoofing"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_perform_initial_sync"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_consciousness_coherence"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "verify_biographical_memory"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "verify_glyph"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_add_steganographic_layers"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_generate_orb_visualization"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "validate_stage_completion"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_evaluate_validation_rule"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "progress_onboarding_stage"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_process_welcome_data"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_process_symbolic_foundation_data"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_stage_content"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_build_final_user_profile"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_create_qrg_metadata"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "encrypt_memory"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "generate_consciousness_qr"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "generate_cultural_qr"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_validate_cultural_safety"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "generate_quantum_qr"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "generate_demo_lambda_id"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_validate_symbolic_preferences"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_create_pedersen_commitment"
      ],
      [
        "./creativity/service.py",
        "generate_emotional_content"
      ],
      [
        "./creativity/service.py",
        "_process_dream_content"
      ],
      [
        "./creativity/emotional_resonance.py",
        "emotional_feedback_loop"
      ],
      [
        "./creativity/voice_integrator.py",
        "_adapt_cultural_context"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "get_voice_modulation"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "generate_thread_trace_json"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "get_voice_modulation"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "get_provider_parameters"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "provide_feedback"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_get_depth_content"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "adapt_symbolic_reasoning"
      ],
      [
        "./learning/service.py",
        "learn_from_data"
      ],
      [
        "./learning/service.py",
        "adapt_behavior"
      ],
      [
        "./learning/service.py",
        "get_learning_metrics"
      ],
      [
        "./learning/service.py",
        "_synthesize_knowledge_sources"
      ],
      [
        "./learning/meta_learning.py",
        "_generate_learning_plan"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_meta_learning_with_federation"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_analyze_cross_node_patterns"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "execute_symbolic_rehearsal"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_analyze_performance_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_meta_learning_with_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_analyze_cross_node_patterns"
      ],
      [
        "./consciousness/service.py",
        "process_awareness_api"
      ],
      [
        "./consciousness/service.py",
        "get_current_consciousness_state_report"
      ],
      [
        "./consciousness/service.py",
        "_execute_consciousness_stream_processing"
      ],
      [
        "./consciousness/service.py",
        "_execute_metacognitive_processing"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "learn"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "plan"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "decide"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "create"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "reflect"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_visualizer.py",
        "generate_neural_radiance_field"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_reflect_on_state"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_build_error_context"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_reflect_on_error"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "get_voice_modulation"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "filter_content"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_build_causal_chains"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_calculate_causal_confidences"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_extract_temporal_relationships"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "_create_query_plan"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "_create_task_plan"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "_create_dialogue_plan"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_symbolic_process"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_extract_features"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_integrate_results"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "_create_action_plan"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_create_monitoring_plan"
      ],
      [
        "./ethics/compliance_engine.py",
        "check_voice_data_compliance"
      ],
      [
        "./ethics/compliance_engine.py",
        "_analyze_text_content"
      ],
      [
        "./ethics/compliance_engine.py",
        "check_module_compliance"
      ],
      [
        "./ethics/service.py",
        "evaluate_safety"
      ],
      [
        "./ethics/service.py",
        "_evaluate_action_ethics"
      ],
      [
        "./ethics/service.py",
        "_check_regulation_compliance"
      ],
      [
        "./ethics/service.py",
        "_assess_operation_safety"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "check_voice_data_compliance"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "validate_content_against_ethical_constraints"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "enrich_trace_metadata"
      ],
      [
        "./ethics/decision_node.py",
        "evaluate_action"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_parse_audit_response"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "load_entanglement_data"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_voice_data_compliance"
      ],
      [
        "./ethics/compliance/engine.py",
        "validate_content_against_harmful_patterns"
      ],
      [
        "./ethics/compliance/engine.py",
        "perform_ethics_drift_detection"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "_evaluate_second_law"
      ],
      [
        "./voice/integrator.py",
        "_adapt_cultural_context"
      ],
      [
        "./voice/voice_profiling.py",
        "get_provider_parameters"
      ],
      [
        "./voice/voice_profiling.py",
        "provide_feedback"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_analyze_time_context"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_analyze_memory"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "_apply_emotion"
      ],
      [
        "./voice/systems/synthesis.py",
        "_generate_voice_parameters"
      ],
      [
        "./orchestration/signal_router.py",
        "route_signal"
      ],
      [
        "./orchestration/service_registry.py",
        "learn_from_data"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_compare_dicts"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_compare_sequences"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "analyze_task_complexity"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "track_context"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "apply_reasoning"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "analyze_workflow"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_success_response"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_error_response"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "process_tags"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "process_attention_request"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "assess_bias"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "exercise_consumer_rights"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "_determine_theme"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_time"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_memory"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_check_compliance"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_meta_learning_with_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_analyze_cross_node_patterns"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "detect_bias"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "detect_bias"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "exercise_data_subject_rights"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_calculate_innovation_metrics"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_generate_research_insights"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "execute_fix_strategy"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_forecast_productivity"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "scan_repository"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "analyze_repository_prs"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_python_execution"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_git_run"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_harmful_content"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_misinformation"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_bias"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_privacy_violations"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "process_experience"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "retrieve_memory"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "update_identity"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_process_repository_batch"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_batch_fix_vulnerabilities"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_batch_fix_workflows"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_batch_fix_dependencies"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_batch_fix_generic"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "autonomous_fix_github_notifications"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "_generate_final_report"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "analyze_decision_patterns"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_jurisdiction_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_comprehensive_risk"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "assess_bias"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_generate_institutional_certification"
      ],
      [
        "./orchestration/brain/cognitive/voice_engine.py",
        "_generate_modulation"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_reflect_on_state"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_generate_recovery_plan"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "speak_with_emotion"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "get_voice_modulation"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "encrypt_memory_content"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "decrypt_memory_content"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_generate_response"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "extract_reasoning_metrics"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "check_voice_data_compliance"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "validate_content_against_ethical_constraints"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_apply_symbolic_reasoning"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_integrate_results"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "train"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "_find_memory_relationship"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "coordinate_modules"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "get_system_status"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_process_coordination"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_execute_sequential_coordination"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_execute_parallel_coordination"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_execute_workflow_steps"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_manage_module_resources"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_route_inter_module_event"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_spawn_ethics_guardian"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_spawn_memory_cleaner"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_execute_ethics_workflow"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_execute_memory_workflow"
      ],
      [
        "./api/core/controllers.py",
        "handle_api_error"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_entropy_indicators"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_blend_content"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "process"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "_neural_process"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "_symbolic_process"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "_integrate_results"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_evaluate_ethical_outcome"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_evaluate_emotional_resonance"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "generate_summary_json"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_extract_symbolic_content"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_analyze_dream_content"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_apply_dream_fade"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_combine_dream_content"
      ],
      [
        "./dream/cli/dream_processor.py",
        "_find_memory_relationship"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "regulate_drift_feedback"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "isolate_codreamer_affect"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "analyze_emotional_patterns_unified"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "isolate_codreamer_affect"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "regulate_drift_feedback"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_update_emotional_state"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "emit_symbolic_echo_alert"
      ],
      [
        "./quantum/coordinator.py",
        "_combine_quantum_outputs"
      ],
      [
        "./quantum/service.py",
        "quantum_compute"
      ],
      [
        "./quantum/service.py",
        "quantum_entangle"
      ],
      [
        "./quantum/service.py",
        "get_quantum_metrics"
      ],
      [
        "./quantum/service.py",
        "_create_consciousness_quantum_bridge"
      ],
      [
        "./quantum/service.py",
        "_create_quantum_superposition"
      ],
      [
        "./quantum/service.py",
        "_perform_quantum_observation"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_validate_against_targets"
      ],
      [
        "./quantum/oscillator.py",
        "_apply_quantum_transforms"
      ],
      [
        "./quantum/bio_components.py",
        "_apply_gradient_to_data"
      ],
      [
        "./quantum/layer.py",
        "oscillate"
      ],
      [
        "./quantum/layer.py",
        "create_entanglement"
      ],
      [
        "./quantum/layer.py",
        "synchronize_with_rhythm"
      ],
      [
        "./quantum/bio_system.py",
        "process_with_awareness"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_fallback_attention_processing"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_fallback_causal_reasoning"
      ],
      [
        "./quantum/processing/quantum_waveform.py",
        "_request_recursive_dream"
      ]
    ],
    "3:str": [
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "generate_documentation"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_build_function_signature"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_render_documentation"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "add_knowledge"
      ],
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "_generate_cache_key"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "_generate_title"
      ],
      [
        "./trace/drift_dashboard.py",
        "trigger_remediation"
      ],
      [
        "./trace/entropy/radar.py",
        "generate_entropy_radar"
      ],
      [
        "./trace/entropy/radar.py",
        "export_summary"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_trend_direction"
      ],
      [
        "./trace/diagnostics/engine.py",
        "get_next_question"
      ],
      [
        "./core/ai_interface.py",
        "ai_code"
      ],
      [
        "./core/ai_interface.py",
        "code_assistance"
      ],
      [
        "./core/ai_interface.py",
        "analysis"
      ],
      [
        "./core/id.py",
        "_encrypt_data"
      ],
      [
        "./core/image_processing_pipeline.py",
        "handle_worker_failure"
      ],
      [
        "./core/tier_unification_adapter.py",
        "normalize_any_tier"
      ],
      [
        "./core/bot.py",
        "_make_ai_request"
      ],
      [
        "./core/direct_ai_router.py",
        "route_ai_request"
      ],
      [
        "./core/agi/self_healing.py",
        "_get_health_recommendation"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "_synthesize_explanation"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "_basic_summary"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "_filter_narrative"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "create_node"
      ],
      [
        "./core/helpers/__init__.py",
        "truncate_string"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "validate_response"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_apply_ethical_fixes"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_ensure_positive_intent"
      ],
      [
        "./core/router/llm_multiverse_router.py",
        "multiverse_route"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_estimate_intervention_impact"
      ],
      [
        "./memory/basic.py",
        "remember"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "export_vault_report"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "visualize_memory_timeline"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_determine_memory_family"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_build_markdown_content"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "generate_archive_report"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_generate_memory_id"
      ],
      [
        "./memory/adapters/creativity_adapter.py",
        "store_creative_memory"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_estimate_intervention_impact"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "importance_based_pruning"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "add_memory"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "add_rule"
      ],
      [
        "./memory/systems/memory_identity.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_identity.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "_calculate_file_id"
      ],
      [
        "./memory/systems/trace_injector.py",
        "generate_trace_id"
      ],
      [
        "./memory/systems/trace_injector.py",
        "start_memory_operation"
      ],
      [
        "./memory/systems/memory_bases.py",
        "store"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "anonymize_sequence"
      ],
      [
        "./memory/systems/memory_helix_visualizer.py",
        "create_interactive_visualization"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "_get_drift_recommendation"
      ],
      [
        "./memory/systems/module_integrations.py",
        "_get_learning_recommendation"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "_generate_memory_id"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_determine_symbolic_origin"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_generate_event_chain_hash"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_domain"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "_classify_entity_type"
      ],
      [
        "./identity/qrg_integration.py",
        "_create_dream_pattern"
      ],
      [
        "./identity/qrg_integration.py",
        "_create_emergency_pattern"
      ],
      [
        "./identity/qrg_showcase.py",
        "create_ascii_qr_pattern"
      ],
      [
        "./identity/qrg_showcase.py",
        "_create_user_specific_ascii_pattern"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_generate_public_hash"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_select_symbolic_element"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_create_symbolic_representation"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_generate_qr_geo_code"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_add_security_layer"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "encode_with_location"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_select_symbolic_element"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_generate_entropy_hash"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_generate_trace_id"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_generate_symbolic_prompt"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_generate_symbolic_encoding"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_create_secure_biometric_hash"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_generate_challenge_id"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "_generate_record_hash"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_generate_symbolic_signature"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "extract_hidden_data"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_decrypt_hidden_data"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "generate_secure_string"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "_generate_decision_id"
      ],
      [
        "./security/moderator.py",
        "respond"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_proof_hash"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_validator_signature"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "_assess_impact_level"
      ],
      [
        "./creativity/creative_engine.py",
        "_generate_cache_key"
      ],
      [
        "./creativity/emotional_resonance.py",
        "_map_valence_arousal_to_emotion"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_expand_haiku"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_fix_syllable_count"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_add_syllables"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_remove_syllables"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_build_line"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_apply_personality_traits"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_analyze_motif_evolution"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_generate_thread_title"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "generate_narrative_markdown"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "generate_thread_map"
      ],
      [
        "./creativity/engines/engine.py",
        "_generate_main_content"
      ],
      [
        "./creativity/engines/engine.py",
        "_generate_creative_content"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_apply_personality_traits"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "create_profile"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "create_memory_map"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_format_proof"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "create_conversation"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "generate_response"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_update_signature"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_update_signature"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "think"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "_enhance_haiku_consciousness"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_metacognitive_insight"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_reflection_narrative"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration.py",
        "_enhance_haiku_consciousness"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_apply_personality_traits"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_justification"
      ],
      [
        "./compliance/ai_regulatory_framework/global_compliance/multi_jurisdiction_engine.py",
        "_calculate_overall_status"
      ],
      [
        "./compliance/ai_regulatory_framework/gdpr/data_protection_validator.py",
        "_determine_compliance_status"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_encrypt_data"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_project_timestamp"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "generate_prediction_report"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_create_symbolic_summary"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_risk_level"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_encrypt_data"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_humanity_reasoning"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_kingdom_reasoning"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_summarize_causal_chain"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_synthesize_creative_insight"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_humanity_reasoning"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_kingdom_reasoning"
      ],
      [
        "./reasoning/analysis/engine.py",
        "_generate_cache_key"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_create_symbolic_summary"
      ],
      [
        "./ethics/export_report.py",
        "_export_json"
      ],
      [
        "./ethics/export_report.py",
        "_export_yaml"
      ],
      [
        "./ethics/export_report.py",
        "_export_csv"
      ],
      [
        "./ethics/export_report.py",
        "_export_html"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_generate_user_prompt"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_generate_audit_hash"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_humanity_reasoning"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_kingdom_reasoning"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_generate_justification"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "list_active_conflict_pairs"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "generate_interactive_dashboard"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_generate_static_dashboard"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_format_conflicts_html"
      ],
      [
        "./ethics/security/secure_utils.py",
        "get_env_var"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_generate_consent_version"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_generate_session_id"
      ],
      [
        "./voice/voice_profiling.py",
        "create_profile"
      ],
      [
        "./voice/interface.py",
        "_select_provider"
      ],
      [
        "./voice/interface.py",
        "_map_actor_to_voice"
      ],
      [
        "./voice/synthesis.py",
        "_apply_emotion_modulation"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "validate_response"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "_apply_ethical_fixes"
      ],
      [
        "./voice/systems/synthesis.py",
        "_apply_emotion_modulation"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_explain_priority_decision"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_determine_priority"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_generate_cache_key"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_generate_solution_id"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_create_symbolic_summary"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "save_report"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_calculate_sustainability_rating"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_update_signature"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_estimate_time_to_peak"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_enforcement_risk"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_generate_workflow_fix_description"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_fixer.py",
        "_generate_pr_description"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_emotional"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_ethical"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "create_interactive_visualization"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_redirect_method"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_apply_personality_traits"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "_encrypt_data"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "_decrypt_data"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_assess_risk_level"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_generate_context_key"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_hex_to_rgba"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_generate_symbolic_element"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_create_symbolic_summary"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "_format_props"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_justification"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_generate_symbolic_element"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_quality_indicators"
      ],
      [
        "./symbolic/vocabularies/__init__.py",
        "get_symbol"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "generate_archetype_report"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "export_csv"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_semantic_blend_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_emotional_shift_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_entropy_driven_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_contextual_merge_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_creative_synthesis_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_repair_focused_mutation"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_classify_safety"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "generate_mutation_report"
      ],
      [
        "./symbolic/features/tracer.py",
        "start_trail"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_blend_symbols"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_generate_synthesis_symbol"
      ],
      [
        "./symbolic/features/glyphs/glyph_engine.py",
        "encode_concept"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "redact_stream"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_risk_level"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_generate_field_id"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_determine_collapse_strategy"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "export_report_json"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "export_summary_markdown"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "calculate_redirect_severity"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "assign_unified_emotional_tier"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_generate_alert_description"
      ],
      [
        "./quantum/web_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_create_classical_signature"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_create_pq_signature"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_create_enhanced_signature"
      ],
      [
        "./quantum/vault_manager.py",
        "create_lambda_id_hash"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_generate_cache_key"
      ],
      [
        "./quantum/api_manager.py",
        "decrypt_api_key"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_professional_symbols"
      ],
      [
        "./quantum/api_manager.py",
        "_embed_qr_in_visual"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "_sign_proposal"
      ]
    ],
    "4:None": [
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_process_function"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "update_relationships"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "update_knowledge"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "__init__"
      ],
      [
        "./bio/endocrine_integration.py",
        "inject_system_feedback"
      ],
      [
        "./bio/simulation_controller.py",
        "add_hormone"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "_update_component_health"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "wrapped_attention"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "update_metrics"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "add_connection"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./trace/snapshot_divergence_plot.py",
        "plot_snapshot_drift_overlay"
      ],
      [
        "./trace/drift_dashboard.py",
        "__init__"
      ],
      [
        "./trace/drift_dashboard.py",
        "_create_alert"
      ],
      [
        "./core/fault_tolerance.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "create_colony"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "__init__"
      ],
      [
        "./core/resource_optimization_integration.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "add_tag"
      ],
      [
        "./core/distributed_tracing.py",
        "add_log"
      ],
      [
        "./core/distributed_tracing.py",
        "trace_agent_operation"
      ],
      [
        "./core/distributed_tracing.py",
        "trace_agent_collaboration"
      ],
      [
        "./core/distributed_tracing.py",
        "trace_memory_operation"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "remember"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "raise_event"
      ],
      [
        "./core/event_sourcing.py",
        "assign_task"
      ],
      [
        "./core/event_sourcing.py",
        "complete_task"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "log_activity"
      ],
      [
        "./core/event_bus.py",
        "subscribe"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "register_node"
      ],
      [
        "./core/integrity_probe.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "__init__"
      ],
      [
        "./core/tiered_state_management.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "log_user_activity"
      ],
      [
        "./core/identity_aware_base.py",
        "log_activity"
      ],
      [
        "./core/agent_coordination.py",
        "add_member"
      ],
      [
        "./core/identity_integration.py",
        "__exit__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__init__"
      ],
      [
        "./core/observatory.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "register_component"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "_update_stats"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "verify"
      ],
      [
        "./core/identity/manager.py",
        "register_user"
      ],
      [
        "./core/identity/manager.py",
        "update"
      ],
      [
        "./core/identity/manager.py",
        "_log_identity_event"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "update_from_interaction"
      ],
      [
        "./core/observability/collector.py",
        "record_metric"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "inject_components"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_operation"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_trail.py",
        "__init__"
      ],
      [
        "./core/meta_learning/federated_integration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./core/telemetry/monitoring.py",
        "increment_counter"
      ],
      [
        "./core/telemetry/monitoring.py",
        "set_gauge"
      ],
      [
        "./core/telemetry/monitoring.py",
        "record_histogram"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__exit__"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "store"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/core/overview_log.py",
        "log_event"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "receive_partner_input"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "dispatch"
      ],
      [
        "./core/interfaces/as_agent/widgets/travel_widget.py",
        "suggest_travel_action"
      ],
      [
        "./core/hub_services/coordinator.py",
        "register_handler"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_factory"
      ],
      [
        "./memory/service.py",
        "log_activity"
      ],
      [
        "./memory/voice_memory_manager.py",
        "store_voice_preference"
      ],
      [
        "./memory/structural_conscience.py",
        "__init__"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "store_emotional_memory"
      ],
      [
        "./memory/core.py",
        "update_tag_importance"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "trace_recursive"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "put"
      ],
      [
        "./memory/memory_optimization.py",
        "store"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "store"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/loop_monitor.py",
        "__init__"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_process_memory_entry"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "__init__"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "register_colony"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/convergence/memory_trace_harmonizer.py",
        "harmonize_traces"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "__init__"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "add_lineage_entry"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "update_tag_importance"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "trace_recursive"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "__init__"
      ],
      [
        "./memory/hooks/base.py",
        "_update_metrics"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "set_by_version"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "setdefault_by_version"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "create_document"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "_update_semantic_relationships"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "update_document"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "update_document_relationships"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "_link_glyph_to_memory"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_node.py",
        "process_message"
      ],
      [
        "./memory/systems/memory_processing.py",
        "update_memory_references"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "record_allocation"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "record_allocation"
      ],
      [
        "./memory/systems/memory_bases.py",
        "log_access"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "add_module_anchor"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "compress_memory_with_motifs"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "allocate"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__exit__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__exit__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "register_colony"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "__init__"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/interface.py",
        "log_security_event"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/privacy_manager.py",
        "check_permissions"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "set_active_configuration"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_log_generation_event"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "wrap_memory_function"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_log_generation"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "_update_tier_metrics"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_session_event"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "add_step"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "__init__"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "add_vote"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_update_identity_context"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_update_access_patterns"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_create_verification_anchor"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "__init__"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "__init__"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_register_device"
      ],
      [
        "./identity/enterprise/auth.py",
        "_create_session"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "verify_broadcast_signature"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "validate_upgrade_eligibility"
      ],
      [
        "./creativity/service.py",
        "log_activity"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/shared_state.py",
        "_notify_subscribers"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "update_with_gradients"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_update_metrics"
      ],
      [
        "./learning/service.py",
        "log_activity"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "update_with_gradients"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_metrics"
      ],
      [
        "./learning/federated_learning_system.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "register_model"
      ],
      [
        "./learning/federated_learning.py",
        "_weighted_update"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/tutor.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "update_with_gradients"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_metrics"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_update_pattern_confidence"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "update_with_gradients"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "register_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_weighted_update"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./consciousness/service.py",
        "log_activity"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./compliance/compliance_hooks.py",
        "compliance_drift_detect"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "__init__"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_extract_causal_elements"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_track_decision_for_learning"
      ],
      [
        "./ethics/compliance_engine.py",
        "_record_audit"
      ],
      [
        "./ethics/service.py",
        "log_activity"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "log_violation"
      ],
      [
        "./ethics/decision_node.py",
        "process_message"
      ],
      [
        "./ethics/meg_guard.py",
        "guard"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "export_visual_summary"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "add_log_entry"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "__init__"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "__init__"
      ],
      [
        "./ethics/safety/compliance_hooks.py",
        "compliance_drift_detect"
      ],
      [
        "./voice/message_handler.py",
        "enqueue_input"
      ],
      [
        "./voice/message_handler.py",
        "enqueue_output"
      ],
      [
        "./voice/voice_profiling.py",
        "__init__"
      ],
      [
        "./voice/adaptation_module.py",
        "adapt_parameters"
      ],
      [
        "./voice/bio_core/voice/quantum_voice_enhancer.py",
        "__init__"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "add_to_conversation"
      ],
      [
        "./orchestration/base.py",
        "register_component"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_record_metrics"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_cache_result"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "add_edge"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "complete_task"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_reasoning_step"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_alternative_considered"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_confidence_factor"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_safety_check"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_bias_consideration"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "finalize_decision"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "research_audit_log"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "check_permissions"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_update_learning_memory"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__exit__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__init__"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "log_access_attempt"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "prompt_feedback"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "save_report"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "update_resource_usage"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "update_beliefs"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "update_with_gradients"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_metrics"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "add_inference_rule"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "log_violation"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "adjust_parameters"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "learn_term_loop"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "generate_social_post"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "generate_text_message"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "_log_output"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "log_activity"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "adjust_parameters"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "_write_log"
      ],
      [
        "./governance/integration/policy_board.py",
        "__init__"
      ],
      [
        "./governance/integration/policy_board.py",
        "cast_quantum_vote"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "log_collision"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "log_state"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_update_decay_metrics"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "record_event"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "add_trace_node"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "register_symbolic_state"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "__init__"
      ],
      [
        "./dream/dream_pipeline.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "_track_redirection_causality"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "render_divergence_map"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "_render_with_plotly"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "_render_with_matplotlib"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "_render_ascii_matrix"
      ],
      [
        "./dream/core/dream_log.py",
        "log_dream"
      ],
      [
        "./dream/core/dream_replay.py",
        "replay_recent_dreams"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "__init__"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_log_redirect"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "update_dream_metrics"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "__init__"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "__init__"
      ],
      [
        "./quantum/service.py",
        "log_activity"
      ],
      [
        "./quantum/system.py",
        "__init__"
      ],
      [
        "./quantum/voice_enhancer.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_cache_optimization_results"
      ],
      [
        "./quantum/consensus_system.py",
        "_record_consensus"
      ],
      [
        "./quantum/layer.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_update_orchestration_and_bot_metrics"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ]
    ],
    "2:Dict[str, Any]": [
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_process_arguments"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "analyze_decisions"
      ],
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "assess_files"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "_load_config"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "_generate_summary"
      ],
      [
        "./bio/endocrine_integration.py",
        "get_system_recommendations"
      ],
      [
        "./bio/quantum_layer.py",
        "apply_entanglement_effects"
      ],
      [
        "./bio/quantum_layer.py",
        "measure_quantum_property"
      ],
      [
        "./bio/quantum_layer.py",
        "evolve_quantum_like_state"
      ],
      [
        "./bio/quantum_layer.py",
        "create_coherence_field"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_summarize_context"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_rhythm"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_energy"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_dna"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_stress"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_homeostasis"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_neural"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process_generic"
      ],
      [
        "./trace/drift_dashboard.py",
        "_reset_drift_component"
      ],
      [
        "./trace/drift_dashboard.py",
        "_trigger_dream_harmonization"
      ],
      [
        "./trace/drift_dashboard.py",
        "_trigger_memory_compression"
      ],
      [
        "./trace/drift_dashboard.py",
        "_trigger_ethics_enforcement"
      ],
      [
        "./trace/drift_dashboard.py",
        "_quarantine_symbol"
      ],
      [
        "./core/integration_hub.py",
        "get_component_status"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_analyze_memory_usage"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_analyze_gc_pressure"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_analyze_cpu_usage"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_analyze_io_patterns"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_analyze_energy_consumption"
      ],
      [
        "./core/image_processing_pipeline.py",
        "_create_proposal"
      ],
      [
        "./core/tier_unification_adapter.py",
        "get_emotional_access_matrix"
      ],
      [
        "./core/core_hub.py",
        "receive_message"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "get_energy_statistics"
      ],
      [
        "./core/module_registry.py",
        "get_module_health"
      ],
      [
        "./core/bot.py",
        "run_component_task"
      ],
      [
        "./core/bot.py",
        "_run_audit"
      ],
      [
        "./core/bot.py",
        "_run_documentation"
      ],
      [
        "./core/bot.py",
        "_run_web_management"
      ],
      [
        "./core/bot.py",
        "_run_agent_task"
      ],
      [
        "./core/bot.py",
        "_run_default"
      ],
      [
        "./core/identity_aware_base.py",
        "get_user_resource_limits"
      ],
      [
        "./core/colonies/governance_colony.py",
        "review_scenario"
      ],
      [
        "./core/integration/system_coordinator.py",
        "_load_config"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "translate_neural_to_symbolic"
      ],
      [
        "./core/integration/layer.py",
        "integrate_systems"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "get_task_status"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_execute_task"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_simulate_task_execution"
      ],
      [
        "./core/introspection/introspector.py",
        "analyze_module"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "transform_data_identity_to_core"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "transform_data_core_to_identity"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "transform_data_consciousness_to_quantum"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "transform_data_quantum_to_consciousness"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "transform_data_bio_to_symbolic"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "transform_data_symbolic_to_bio"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "_extract_bio_metadata"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "_extract_symbolic_metadata"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "transform_data_memory_to_learning"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "transform_data_learning_to_memory"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "transform_quantum_to_memory"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "transform_memory_to_quantum"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "transform_memory_to_consciousness"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "transform_consciousness_to_memory"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "transform_data_core_to_safety"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "transform_data_safety_to_core"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "_check_immediate_risk"
      ],
      [
        "./core/ethics/__init__.py",
        "evaluate_ethics"
      ],
      [
        "./core/audit/audit_analytics.py",
        "analyze_patterns"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_analyze_actor_patterns"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_analyze_event_sequences"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_analyze_error_patterns"
      ],
      [
        "./core/audit/audit_analytics.py",
        "calculate_metrics"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_analyze_tier_risks"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_load_config"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_load_manifest"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "_create_mock_system"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "get_drift_summary"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "get_node_info"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "_load_config"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "process_message"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_build_preference_profile"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_basic_fusion"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "clear_dreams"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_load_config"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "determine_parameters"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "anonymize_metadata"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "aggregate_symbolic_tags"
      ],
      [
        "./memory/service.py",
        "retrieve_memory"
      ],
      [
        "./memory/service.py",
        "delete_memory"
      ],
      [
        "./memory/service.py",
        "get_memory_stats"
      ],
      [
        "./memory/voice_memory_manager.py",
        "get_voice_preferences"
      ],
      [
        "./memory/memory_hub.py",
        "receive_message"
      ],
      [
        "./memory/fold_engine.py",
        "_get_full_contextual_content"
      ],
      [
        "./memory/evolution.py",
        "_consolidation_rule"
      ],
      [
        "./memory/evolution.py",
        "_adaptation_rule"
      ],
      [
        "./memory/evolution.py",
        "_strengthening_rule"
      ],
      [
        "./memory/evolution.py",
        "_decay_rule"
      ],
      [
        "./memory/evolution.py",
        "_integration_rule"
      ],
      [
        "./memory/emotional.py",
        "get_emotional_response"
      ],
      [
        "./memory/emotional.py",
        "symbolic_affect_trace"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_analyze_causation_patterns"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "get_causal_insights"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_assess_causal_vulnerabilities"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_predict_drift_patterns"
      ],
      [
        "./memory/memory_fold.py",
        "load_config"
      ],
      [
        "./memory/memory_fold.py",
        "_get_emotion_state"
      ],
      [
        "./memory/memory_fold.py",
        "_get_emotion_state"
      ],
      [
        "./memory/dashboard.py",
        "get_dashboard_summary"
      ],
      [
        "./memory/dashboard.py",
        "get_dream_integration_analytics"
      ],
      [
        "./memory/dashboard.py",
        "_calculate_drift_trends"
      ],
      [
        "./memory/dashboard.py",
        "_calculate_cascade_trends"
      ],
      [
        "./memory/dashboard.py",
        "_get_system_performance_metrics"
      ],
      [
        "./memory/dashboard.py",
        "_get_tier_usage_statistics"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get_shard_stats"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_create_symbolic_state"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_apply_emotion_decay"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_create_symbolic_state"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_strip_symbolic_data"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_analyze_symbolic_patterns"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./memory/visualizer.py",
        "_quantum_modulate_memory"
      ],
      [
        "./memory/visualizer.py",
        "_prepare_3d_data"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "load_memory_snapshots"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "detect_memory_drift"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "trace_collapse_events"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_entropy_drift"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_symbol_divergence"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_identity_drift"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_assess_collapse_severity"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_summary_statistics"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_analyze_drift_patterns"
      ],
      [
        "./memory/core/base_manager.py",
        "_load_from_disk"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_find_subcategories"
      ],
      [
        "./memory/adapters/creativity_adapter.py",
        "retrieve_creative_context"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_analyze_causation_patterns"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "get_causal_insights"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_assess_causal_vulnerabilities"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_predict_drift_patterns"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "analyze_compression_patterns"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_analyze_pattern_repetition"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_check_historical_compression_patterns"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_execute_intervention"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "generate_governance_report"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "build_tree"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "_classify_drift_sequence"
      ],
      [
        "./memory/systems/memory_identity.py",
        "get_permission_status"
      ],
      [
        "./memory/systems/memory_node.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_node.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/memory_node.py",
        "_prepare_memory_for_return"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "_quantum_modulate_memory"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "_prepare_3d_data"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "get_emotional_context"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_module_trust_report"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_module_drift_report"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "process_dream_integration"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_analyze_dream_content"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "get_identity_stability_report"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "analyze_trajectory"
      ],
      [
        "./memory/systems/memory_utils.py",
        "decrypt_memory_data"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "extract_ontology"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "extract_semantics"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_extract_episode_features"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_extract_relationships"
      ],
      [
        "./identity/qrg_showcase.py",
        "demonstrate_user_profile"
      ],
      [
        "./identity/qrg_showcase.py",
        "run_specific_qrg_type_demo"
      ],
      [
        "./identity/qrg_showcase.py",
        "_generate_showcase_summary"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "validate_entropy_quality"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_run_demo_onboarding"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "process_eye_tracking_data"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "process_input_event"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_analyze_input_lag"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "get_ui_adaptations"
      ],
      [
        "./identity/core/qrs_manager.py",
        "create_lambda_id_with_qrg"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "get_animation_frame"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_generate_aura"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_generate_pattern_animation"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_suggest_next_character"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "get_recovery_analytics"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_load_config"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "get_dream_statistics"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "get_fusion_statistics"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "get_enrolled_biometrics"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "get_identity_reputation"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_load_config"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_parse_commercial_format"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "get_brand_analytics"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_consciousness_levels"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_emotional_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_synchrony_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_stress_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_authenticity_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_attention_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_calculate_pattern_coherence"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_extract_verification_indicators"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "get_inference_statistics"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "get_authentication_patterns"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_integrate_with_external_memory"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_serialize_query"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_parse_identity_data"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_prepare_identity_data"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_create_user_profile"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "export_config_template"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_config_to_dict"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "start_onboarding_session"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "complete_onboarding"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "get_onboarding_status"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_welcome_stage"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_symbolic_foundation_content"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "generate_lambda_id_qrg"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_create_qrg_package"
      ],
      [
        "./identity/enterprise/auth.py",
        "_load_config"
      ],
      [
        "./identity/enterprise/auth.py",
        "_extract_saml_attributes"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "_encrypt_data"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "emergency_lockdown"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "get_cultural_insights"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_analyze_format"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_validate_commercial_lambda_id"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_format_validation_details"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_get_educational_content"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "analyze_entropy_live"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "check_service_health"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_get_tier_permissions"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_check_collision"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_analyze_id_patterns"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "_prepare_reasoning_integration"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_decrypt_sensitive_data"
      ],
      [
        "./security/safety/emergency_override.py",
        "_verify_authorization"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "_analyze_attack_breakdown"
      ],
      [
        "./creativity/service.py",
        "synthesize_dream"
      ],
      [
        "./creativity/services.py",
        "_synthesize_contributions"
      ],
      [
        "./creativity/emotional_resonance.py",
        "map_emotion"
      ],
      [
        "./creativity/emotional_resonance.py",
        "analyze_emotional_trend"
      ],
      [
        "./creativity/emotional_resonance.py",
        "get_emotion_from_context"
      ],
      [
        "./creativity/voice_integrator.py",
        "_get_voice_profile"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "evaluate_thread_alignment"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_detailed_identity_analysis"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_detailed_ethical_analysis"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_analyze_narrative_coherence"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_get_emotional_consistency_analysis"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_assess_thread_health"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "get_parameters_for_emotion"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "evolve"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "map_to_core_structures"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "translate_dream_symbols"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "get_model_info"
      ],
      [
        "./learning/service.py",
        "synthesize_knowledge"
      ],
      [
        "./learning/services.py",
        "_aggregate_updates"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_create_mock_system"
      ],
      [
        "./learning/enhancement_engine.py",
        "run_enhancement_sprint"
      ],
      [
        "./learning/meta_learning.py",
        "_apply_federated_knowledge"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_calculate_overall_enhancement"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "recover_meta_learning_components"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_calculate_overall_enhancement"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_create_mock_system"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_existing_meta_learning_system"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_apply_privacy_filter"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_process_federation_update"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_synchronize_with_node"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_existing_meta_learning_system"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_apply_privacy_filter"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_process_federation_update"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_synchronize_with_node"
      ],
      [
        "./consciousness/service.py",
        "get_consciousness_state_api"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "get_consciousness_status"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_extract_features"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_apply_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_apply_emotional_modulation"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "extract_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_extract_attention_pattern"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_extract_emotional_pattern"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_extract_coherence_pattern"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "analyze_recent_interactions"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_ensure_interaction_data"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_analyze_consciousness_state"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_visualizer.py",
        "render_symbolic_layer"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_apply_quantum_enhancement"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "get_status"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "get_status"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "_apply_quantum_processing"
      ],
      [
        "./consciousness/systems/integrator.py",
        "_load_config"
      ],
      [
        "./consciousness/systems/integrator.py",
        "process_consciousness_event"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "get_transparency_level"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "receive_message"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "validate_harmonization"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "get_validation_summary"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "emit_feedback_glyphs"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_get_glyph_properties"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "reason"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_parse_prediction_response"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_parse_prophecy_response"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_parse_dream_response"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_parse_analysis_response"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_parse_temporal_response"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "get_harmony_summary"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "reason"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_analyze_causality"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_merge_insights"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_analyze_confidence"
      ],
      [
        "./reasoning/analysis/__init__.py",
        "analyze"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "process"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "_create_goal"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "_create_action_plan"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "process"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "_process_text"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "_process_structured"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "_extract_entities"
      ],
      [
        "./reasoning/decision/bridge.py",
        "get_decision_status"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_create_evaluation_summary"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_analyze_decision_timing"
      ],
      [
        "./ethics/compliance_engine.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance_engine.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/compliance_engine.py",
        "update_compliance_settings"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "_classify_symbolically"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "check_escalation_requirements"
      ],
      [
        "./ethics/decision_node.py",
        "_add_privacy_protections"
      ],
      [
        "./ethics/decision_node.py",
        "_add_transparency"
      ],
      [
        "./ethics/decision_node.py",
        "_add_user_choice"
      ],
      [
        "./ethics/decision_node.py",
        "_add_safety_measures"
      ],
      [
        "./ethics/decision_node.py",
        "_add_human_oversight"
      ],
      [
        "./ethics/ethics_guard.py",
        "check_content_safety"
      ],
      [
        "./ethics/ethics_guard.py",
        "check_privacy_compliance"
      ],
      [
        "./ethics/ethics_guard.py",
        "ethical_review"
      ],
      [
        "./ethics/ethics_guard.py",
        "anonymize_data"
      ],
      [
        "./ethics/export_report.py",
        "generate_dashboard_data"
      ],
      [
        "./ethics/export_report.py",
        "generate_governance_summary"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_load_config"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "integrate_ethics_mesh"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "calculate_phase_entanglement_matrix"
      ],
      [
        "./ethics/utils.py",
        "validate_content_ethics"
      ],
      [
        "./ethics/utils.py",
        "check_compliance_status"
      ],
      [
        "./ethics/meg_bridge.py",
        "get_cultural_context_info"
      ],
      [
        "./ethics/bases.py",
        "check_compliance"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_load_config"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_load_from_logs"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_summarize_context"
      ],
      [
        "./ethics/compliance/engine.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance/engine.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "_generate_template_response"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "_evaluate_first_law"
      ],
      [
        "./voice/integrator.py",
        "_get_voice_profile"
      ],
      [
        "./voice/modulator.py",
        "determine_parameters"
      ],
      [
        "./voice/voice_profiling.py",
        "get_parameters_for_emotion"
      ],
      [
        "./voice/voice_profiling.py",
        "evolve"
      ],
      [
        "./voice/processor.py",
        "_load_config"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_analyze_device_context"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "check_transcription_safety"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_orchestrator_health"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_analyze_context_insights"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_extract_workflow_insights"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "process_task"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_apply_ai_enhancements"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_ai_assess_risks"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_analyze_tag_usage"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_create_adapter_instance"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_load_config"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_assess_cross_border_transfers"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "process_message"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_apply_ccpa_minimization"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_handle_ccpa_access_request"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_handle_ccpa_delete_request"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_handle_ccpa_opt_out_request"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_handle_non_discrimination_request"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_text"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_location"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_device"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_existing_meta_learning_system"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_apply_privacy_filter"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_process_federation_update"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_synchronize_with_node"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_validate_gdpr_compliance"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_trace_data_lineage"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_handle_access_request"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_handle_erasure_request"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_handle_rectification_request"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_handle_portability_request"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_core_research_processing"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_advanced_analytics"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "attempt_autonomous_fix"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_calculate_sustainability_metrics"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_create_advanced_widget_customization"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_analyze_emotional_triggers"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_forecast_mood_trajectory"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_analyze_group_dynamics"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_transfer_compliance"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_childrens_code"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "fix_critical_vulnerabilities"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "attempt_vulnerability_fix"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "create_vulnerability_fix_pr"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "fix_vulnerabilities_batch"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "check_safety"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_detect_uncertainty"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_reasoning_transparency"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_confidence"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_process_single_batch"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_apply_vulnerability_fix"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_apply_workflow_fix"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_apply_dependency_fix"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "_load_visionary_config"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_calculate_sustainability_metrics"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_assess_app8_compliance"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_assess_cdr_compliance"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_assess_breach_risk"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_fallback_creative_processing"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_fallback_memory_processing"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_analyze_associative_patterns"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_analyze_learning_patterns"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "process"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_ai_governance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_data_protection"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "process"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_validate_institutional_compliance"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_reflect_on_error"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "analyze_memory_fold"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "get_permission_status"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_analyze_processing_complexity"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "_configure_attention_gates"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "_integrate_responses"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_create_mock_reasoning_result"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "anonymize_metadata"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "generate_compliance_report"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "get_consciousness_trend"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_analyze_emotional_context"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_get_embeddings"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_get_predictions"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "process"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_apply_attention"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "_consolidate_memories"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_load_config"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "execute_workflow"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "get_message_bus_stats"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "_load_config"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "process_awareness_alert"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "get_component_status"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "detect_and_remediate"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "_execute_remediation_workflow"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "get_consciousness_trend"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "assess_ethical_violation"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "propose_realignment"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "_fallback_assessment"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "analyze_resonance_strength"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "process_attention"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "optimize_network"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "evaluate"
      ],
      [
        "./symbolic/features/memory_reflection_template.py",
        "process_signal"
      ],
      [
        "./symbolic/features/moral_agent_template.py",
        "process_signal"
      ],
      [
        "./symbolic/features/causal_reasoner_template.py",
        "reason"
      ],
      [
        "./symbolic/features/trace_verifier.py",
        "_load_agent_flow_map"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_synthesize_content"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "execute_pre_recall_hooks"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "translate_neural_to_symbolic"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "_synthesize_insights"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "_calculate_synthesis_consensus"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_analyze_convergence"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_analyze_risks"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_scenario_status"
      ],
      [
        "./dream/redirect_trace_replayer.py",
        "replay_episode"
      ],
      [
        "./dream/dream_data_sources.py",
        "_create_emotional_palette"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_synthesize_ethical_outcomes"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_synthesize_emotional_resonances"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "summarize_symbolic_trends"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "transform_data_nias_to_dream"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "transform_data_dream_to_nias"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_deliver_screen"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_deliver_email"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_deliver_notification"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_select_new_narrative"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "create_dream_superposition"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "measure_quantum_like_state"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "evolve_quantum_like_state"
      ],
      [
        "./dream/cli/dream_processor.py",
        "_consolidate_memories"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_analyze_emotional_context"
      ],
      [
        "./dream/stability/redirect_forecaster.py",
        "forecast"
      ],
      [
        "./dream/rl/rl_dream_cycle.py",
        "_ethical_mutation"
      ],
      [
        "./dream/rl/rl_dream_cycle.py",
        "run_cycle"
      ],
      [
        "./emotion/colony_emotions.py",
        "_merge_emotions"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "get_session_metrics"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_get_unified_tier_features"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_analyze_symbolic_patterns"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_format_report_json"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "adjust_baseline_from_drift"
      ],
      [
        "./quantum/coordinator.py",
        "_prepare_consciousness_signal"
      ],
      [
        "./quantum/coordinator.py",
        "_extract_consciousness_insights"
      ],
      [
        "./quantum/coordinator.py",
        "_process_consciousness_fallback"
      ],
      [
        "./quantum/service.py",
        "consciousness_quantum_bridge"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_apply_quantum_coherence"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_apply_quantum_entanglement"
      ],
      [
        "./quantum/oscillator.py",
        "_extract_sync_parameters"
      ],
      [
        "./quantum/bio_components.py",
        "process"
      ],
      [
        "./quantum/bio_components.py",
        "encode"
      ],
      [
        "./quantum/attention_economics.py",
        "get_user_attention_balance"
      ],
      [
        "./quantum/layer.py",
        "apply_entanglement_effects"
      ],
      [
        "./quantum/layer.py",
        "measure_quantum_property"
      ],
      [
        "./quantum/layer.py",
        "evolve_quantum_like_state"
      ],
      [
        "./quantum/layer.py",
        "create_coherence_field"
      ],
      [
        "./quantum/processing/quantum_waveform.py",
        "generate_dream"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_generate_neighbor"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_aggregate_quantum_results"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "recombine_dreams"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_extract_import_patterns"
      ]
    ],
    "3:DocSection": [
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_generate_module_section"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_generate_class_section"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_generate_function_section"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_add_cultural_context"
      ]
    ],
    "1:str": [
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_format_type_name"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "_sanitize_markdown"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "_generate_hash"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "to_json"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_load_hash_chain"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "generate_emotional_signature"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "_generate_scan_id"
      ],
      [
        "./bio/quantum_layer.py",
        "_get_timestamp"
      ],
      [
        "./bio/core/hormonal_system.py",
        "get_system_state"
      ],
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "generate_signature"
      ],
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "generate_base64_glyph"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "_generate_access_token"
      ],
      [
        "./trace/drift_harmonizer.py",
        "suggest_realignment"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "to_json"
      ],
      [
        "./core/plugin_registry.py",
        "get_plugin_name"
      ],
      [
        "./core/plugin_registry.py",
        "get_version"
      ],
      [
        "./core/symbolic_contract.py",
        "to_json"
      ],
      [
        "./core/integrator.py",
        "get_status"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_get_timestamp"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "generate_cli_summary"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_generate_text_summary"
      ],
      [
        "./core/practical_optimizations.py",
        "create_resource_report"
      ],
      [
        "./core/event_replay_snapshot.py",
        "to_json"
      ],
      [
        "./core/quantum_identity_manager.py",
        "lambda_tier"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__str__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__repr__"
      ],
      [
        "./core/agi/self_improvement.py",
        "_generate_goal_id"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "_generate_goal_id"
      ],
      [
        "./core/agi/self_healing.py",
        "_generate_failure_id"
      ],
      [
        "./core/security/agi_security.py",
        "_generate_session_id"
      ],
      [
        "./core/security/agi_security.py",
        "_generate_incident_id"
      ],
      [
        "./core/utils/__init__.py",
        "generate_symbolic_id"
      ],
      [
        "./core/introspection/introspector.py",
        "report_symbolic_state"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "_get_timestamp"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "_get_timestamp"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "_get_timestamp"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "risk_level"
      ],
      [
        "./core/audit/audit_trail.py",
        "_generate_event_id"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_generate_agent_id"
      ],
      [
        "./core/telemetry/monitoring.py",
        "_generate_alert_id"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "_generate_session_id"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "get_capability_level"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_capability_level"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_generate_cellular_signature"
      ],
      [
        "./core/interaction/symptom_reporter.py",
        "_get_comfort_phrase"
      ],
      [
        "./core/helpers/__init__.py",
        "sanitize_string_for_logging"
      ],
      [
        "./core/helpers/__init__.py",
        "get_utc_timestamp"
      ],
      [
        "./core/base/symbolic.py",
        "hash"
      ],
      [
        "./core/base/symbolic.py",
        "__str__"
      ],
      [
        "./core/base/symbolic.py",
        "__repr__"
      ],
      [
        "./memory/emotional.py",
        "__str__"
      ],
      [
        "./memory/core.py",
        "endpoint"
      ],
      [
        "./memory/node.py",
        "store"
      ],
      [
        "./memory/memoria.py",
        "record_consciousness_phase"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_assess_overall_health"
      ],
      [
        "./memory/core/base_manager.py",
        "__repr__"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "endpoint"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "_generate_item_id"
      ],
      [
        "./memory/hooks/base.py",
        "get_hook_name"
      ],
      [
        "./memory/hooks/base.py",
        "get_hook_version"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "seal_nucleus"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "_generate_quantum_signature"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "create_coil"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "_select_optimal_coil"
      ],
      [
        "./memory/systems/memory_recall.py",
        "generate_sid"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__repr__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_content"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "get_extension_for_mimetype"
      ],
      [
        "./memory/systems/trace_injector.py",
        "export_trace_data"
      ],
      [
        "./memory/systems/trace_injector.py",
        "_export_symbolic_format"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "_get_timestamp"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_get_dominant_emotion"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_content"
      ],
      [
        "./memory/systems/memory_research.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_utils.py",
        "generate_memory_id"
      ],
      [
        "./memory/systems/memory_utils.py",
        "format_memory_timestamp"
      ],
      [
        "./identity/interface.py",
        "_get_calling_module"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "_calculate_coverage_trend"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_get_default_config_path"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "get_user_tier"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "consciousness_category"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_generate_attempt_id"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_generate_timestamp_hash"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_generate_request_id"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "to_base64"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_session_id"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_generate_token_id"
      ],
      [
        "./identity/enterprise/auth.py",
        "_generate_session_id"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_generate_stego_key"
      ],
      [
        "./identity/api/onboarding_api.py",
        "_generate_request_id"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_get_validator_id"
      ],
      [
        "./creativity/creative_market.py",
        "_generate_glyph"
      ],
      [
        "./creativity/emotional_resonance.py",
        "visualize_emotional_state"
      ],
      [
        "./bridge/connectors/blockchain_bridge.py",
        "anchor_hash"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_quantum_signature"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_feeling_tone"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_meditative_insight"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "_determine_tier"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "summarize_reason_trace"
      ],
      [
        "./ethics/service.py",
        "_get_ethics_version"
      ],
      [
        "./ethics/sentinel/ethical_sentinel_dashboard.py",
        "format_violation"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_policy_name"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_policy_version"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "get_policy_name"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "get_policy_version"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "_get_default_system_prompt"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "get_policy_name"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "get_policy_version"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./orchestration/base.py",
        "__repr__"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "_generate_message_id"
      ],
      [
        "./orchestration/agents/base.py",
        "get_agent_id"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "get_agent_id"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/adaptive_image_generator.py",
        "_generate_request_id"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "generate_comprehensive_report"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "save_results"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "get_consciousness_context"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_calculate_sar_deadline"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/vulnerability_dashboard.py",
        "generate_dashboard_report"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "get_tier_description"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "get_tier_badge"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "to_symbol"
      ],
      [
        "./orchestration/brain/dream_engine/visualizer_core.py",
        "build_visual_prompt"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "get_trend_direction"
      ],
      [
        "./governance/core.py",
        "to_symbolic"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "_get_coherence_trend"
      ],
      [
        "./api/commercial/memory_services/memory_api.py",
        "_generate_id"
      ],
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "_generate_dream_id"
      ],
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "_get_timestamp"
      ],
      [
        "./symbolic/glyph_engine.py",
        "generate_glyph"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "dream_cycle_start"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "insight_generated"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "get_dream_narrative"
      ],
      [
        "./symbolic/vocabularies/dream_vocabulary.py",
        "get_visual_hint"
      ],
      [
        "./symbolic/vocabularies/bio_vocabulary.py",
        "get_bio_symbol"
      ],
      [
        "./symbolic/vocabularies/bio_vocabulary.py",
        "get_bio_message"
      ],
      [
        "./symbolic/vocabularies/emotion_vocabulary.py",
        "get_emotion_symbol"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "generate_signature"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "generate_base64_glyph"
      ],
      [
        "./symbolic/features/glyphs.py",
        "get_glyph_meaning"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "_generate_symbolic_hash"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "replace_match"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "compute_hash"
      ],
      [
        "./symbolic/features/drift/__init__.py",
        "get_drift_status"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_determine_system_status"
      ],
      [
        "./dream/visualization/visualizer_core.py",
        "build_visual_prompt"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "_get_timestamp"
      ],
      [
        "./dream/core/dream_utils.py",
        "calculate_rem_phase"
      ],
      [
        "./dream/core/dream_utils.py",
        "dream_to_text"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_calculate_coherence_trend"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_get_timestamp"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "to_json"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "get_dream_narrative"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "get_visual_hint"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "cycle_start"
      ],
      [
        "./dream/symbolic/vocabulary.py",
        "insight_generated"
      ],
      [
        "./emotion/models.py",
        "get_dominant"
      ],
      [
        "./emotion/cycler.py",
        "next_emotion"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "_get_coherence_trend"
      ],
      [
        "./deployments/memory_services/memory_services/memory_api.py",
        "_generate_id"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "_generate_dream_id"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "_get_timestamp"
      ],
      [
        "./quantum/awareness_system.py",
        "_calculate_adaptation_trend"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_generate_session_id"
      ],
      [
        "./quantum/vault_manager.py",
        "_generate_artistic_glyph"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_generate_cellular_signature"
      ],
      [
        "./quantum/layer.py",
        "_get_timestamp"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "calculate_hash"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "_get_lukhas_id_ref"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "get_module_description"
      ],
      [
        "./quantum/utils/regenerate_intelligent_descriptions.py",
        "generate_intelligent_description"
      ],
      [
        "./quantum/utils/add_intelligent_descriptions.py",
        "generate_intelligent_description"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "generate_verbose_description"
      ]
    ],
    "3:List[str]": [
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "get_related_knowledge"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "recommend_next_docs"
      ],
      [
        "./core/integrated_safety_system.py",
        "_generate_recommendations"
      ],
      [
        "./core/efficient_communication.py",
        "find_optimal_path"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "find_related"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "_generate_insights"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "_generate_transformations"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_extract_symbols_from_text"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "_select_colonies_for_validation"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "get_consolidation_candidates"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_identify_contamination_vectors"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "_generate_auto_tags"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_generate_recommendations"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_memories_in_range"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_causal_sequence"
      ],
      [
        "./memory/systems/replay_system.py",
        "find_temporal_neighbors"
      ],
      [
        "./memory/systems/replay_system.py",
        "find_memories_by_content"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_recommendations"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "get_causal_ancestors"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "get_causal_descendants"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_generate_protection_recommendations"
      ],
      [
        "./memory/systems/tier_system.py",
        "_check_restrictions"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_extract_context_phrases"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_find_identity_related_memories"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "_select_validators"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_identify_load_factors"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_determine_attention_focus"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_generate_optimizations"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "generate_emergency_codes"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_generate_emergency_codes"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_generate_recommendations"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_detect_entropy_warnings"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "_determine_required_colonies"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "_get_trust_network"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_get_risk_mitigations"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_determine_required_fragments"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_generate_qrs_upgrade_recommendations"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_calculate_unlocked_capabilities"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "enforce_cultural_safety"
      ],
      [
        "./creativity/engines/engine.py",
        "_generate_suggestions"
      ],
      [
        "./learning/usage_learning.py",
        "recommend_next_docs"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_identify_rehearsal_opportunities"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_generate_recommendations"
      ],
      [
        "./consciousness/perception/symbolic_nervous_system.py",
        "map_inputs_to_tags"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_drift_causes"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_alignment_factors"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_dream_recommendations"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_drift_causes"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_alignment_factors"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_recommendations"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_drift_recommendations"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_predict_conflicts"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_identify_drift_conflict_themes"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_identify_monitoring_symbols"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_generate_drift_mitigation_advice"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_generate_mesh_mitigation_advice"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_relevant_duties"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_relevant_values"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_specific_impacts"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_mitigation_needs"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_generate_recommendations"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_relevant_duties"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_relevant_values"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_specific_impacts"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_mitigation_needs"
      ],
      [
        "./ethics/compliance_engine.py",
        "_apply_region_specific_rules"
      ],
      [
        "./ethics/batch_guard.py",
        "_determine_required_badges"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_generate_creation_recommendations"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_generate_decay_recommendations"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_generate_review_questions"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_relevant_duties"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_relevant_values"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_specific_impacts"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_mitigation_needs"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_generate_intervention_tags"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_generate_optimization_suggestions"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_extract_tags"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_identify_dependencies"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_suggest_additional_tags"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_categorize_solution"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_find_related_solutions"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "generate_us_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "generate_eu_recommendations"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "generate_eu_recommendations"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_identify_emergent_properties"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_recommend_cognitive_strategies"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_recommend_mood_interventions"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_generate_resource_recommendations"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_drift_recommendations"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_identify_symbolic_patterns"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_suggest_mutations"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_drift_causes"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_alignment_factors"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_generate_recommendations"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_analyze_transition_patterns"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_generate_narrative_fragments"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_extract_symbolic_themes"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_inject_symbolic_tags_unified"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_get_alert_actions"
      ],
      [
        "./quantum/vault_manager.py",
        "_create_quantum_shards"
      ]
    ],
    "2:Dict": [
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "analyze_structure"
      ],
      [
        "./bio/symbolic_entropy.py",
        "entropy_state_snapshot"
      ],
      [
        "./core/personality/creative_personality.py",
        "unified_processing"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "unified_processing"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "quantum_ethical_arbitration"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_create_ethical_wavefunction"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_collapse_wavefunction"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_tunneling_probabilities"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "create_attention_gradient"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_generate_attention_flow"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_design_optimal_cristae"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_atp_distribution"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "audit_collapse_operation"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_load_config"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_build_forensic_context"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_analyze_activity_breakdown"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_generate_enterprise_summary"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_generate_qr_glyph"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_parse_qr_glyph"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "calculate_eligible_tier_qrs"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "get_tier_benefits"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "visualize_tier_progression_map"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "calculate_entropy_unlock_paths"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_get_tier_requirements"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_initialize_new_user_tier"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "parse_qr_code"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "extract_metadata"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "parse_glymph"
      ],
      [
        "./creativity/personality/creative_core.py",
        "unified_processing"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "get_interaction_style"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "adapt_behavior"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "_apply_ethical_rules"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "resolve_dilemma"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "interact"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "generate_response"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "adjust_greeting"
      ],
      [
        "./learning/federated_meta_learning.py",
        "get_parameters"
      ],
      [
        "./learning/federated_meta_learning.py",
        "get_client_status"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_parameters"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_client_status"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_parameters"
      ],
      [
        "./learning/federated_colony_learning.py",
        "_federate_models"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_get_user_profile"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_get_device_layout"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_define_interactions"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_define_animations"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_enhance_accessibility"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_rotate_grid"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_get_standard_interactions"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_parameters"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_client_status"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_parameters"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_analyze_emotional_trajectory"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_analyze_attention_patterns"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_analyze_phi_evolution"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "reason"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_build_causal_chains"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_calculate_causal_confidences"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "reason"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "analyze_counterfactuals"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "reason"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_workflow_analytics"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_trend_analytics"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_comprehensive_analytics"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_single_generic_item"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_dast_to_jira_format"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_dast_to_github_format"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_convert_dast_to_legacy_format"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_features"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "reason"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "reason"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./orchestration/brain/controller.py",
        "_apply_meta_cognitive_adaptations"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "get_processing_stats"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_parameters"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_client_status"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "reason"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_detect_formal_logic"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_contextual_content"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_identify_primary_conclusion"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_symbolic_structure"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "reason"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "plan_protest"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "validate"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "plan_protest"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "validate"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "track_theme_transitions"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "quantum_ethical_arbitration"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_create_ethical_wavefunction"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_collapse_wavefunction"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_tunneling_probabilities"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "create_attention_gradient"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_generate_attention_flow"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_design_optimal_cristae"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_atp_distribution"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_features"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "get_processing_stats"
      ]
    ],
    "2:float": [
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "_analyze_section_depth"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "_analyze_code_blocks"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "_analyze_link_density"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "_analyze_readability"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "_analyze_formatting"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "get_document_effectiveness"
      ],
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "_interaction_type_to_value"
      ],
      [
        "./bio/symbolic_entropy.py",
        "calculate_entropy_delta"
      ],
      [
        "./bio/quantum_layer.py",
        "_calculate_variance"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_get_task_energy_requirement"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "generate_value"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_calculate_colony_consensus"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_calculate_detection_confidence"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_calculate_explanation_confidence"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "_compute_amplitude"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "_compute_phase"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "_compute_entropy_change"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "_calculate_phase_alignment"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_validate_frequency"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_validate_phase"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "_validate_amplitude"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "generate_value"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "_calculate_phase_relation"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "_get_default_frequency"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "get_connection_strength"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "_calculate_network_efficiency_from_metrics"
      ],
      [
        "./trace/drift_tools.py",
        "compute_entropy"
      ],
      [
        "./trace/drift_tools.py",
        "score_resilience"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./trace/entropy/radar.py",
        "shannon_entropy"
      ],
      [
        "./core/integrated_system.py",
        "task_priority_score"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_energy_consumption"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_cpu_efficiency"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_energy_efficiency"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_carbon_footprint"
      ],
      [
        "./core/distributed_tracing.py",
        "_calculate_trace_duration"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "calculate_shannon_entropy"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "calculate_tag_entropy"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "calculate_temporal_entropy"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "calculate_semantic_entropy"
      ],
      [
        "./core/supervision.py",
        "calculate_restart_delay"
      ],
      [
        "./core/quantum_identity_manager.py",
        "_calculate_credential_strength"
      ],
      [
        "./core/quantum_identity_manager.py",
        "_calculate_consistency_score"
      ],
      [
        "./core/agent_coordination.py",
        "_estimate_task_time"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "_calculate_intensity"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "_calculate_coherence"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_fusion_strength"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_translation_confidence"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_calculate_priority_score"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "_calculate_recent_safety_rate"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_calculate_entropy_score"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "calculate_entropy_measure"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "calculate_shannon_entropy"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_calculate_context_receptivity"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_calculate_fusion_confidence"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_ethical_resonance"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_proton_concentration"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_atp_potential"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_processing_cost"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_bio_confidence"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./core/interfaces/dashboard/core/dashboard_colony_agent.py",
        "_calculate_intelligence_confidence"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_calculate_importance"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_calculate_confidence"
      ],
      [
        "./memory/voice_memory_manager.py",
        "_calculate_importance"
      ],
      [
        "./memory/fold_engine.py",
        "_calculate_folding_stability"
      ],
      [
        "./memory/fold_engine.py",
        "_calculate_current_importance"
      ],
      [
        "./memory/fold_engine.py",
        "_calculate_dream_drift_factor"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_calculate_memory_priority"
      ],
      [
        "./memory/core.py",
        "get_tag_importance"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_memory_resilience"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_trend"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./memory/memory_fold.py",
        "calculate_emotion_distance"
      ],
      [
        "./memory/memory_optimization.py",
        "_get_promotion_threshold"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_apply_decoherence"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_calculate_emotional_significance"
      ],
      [
        "./memory/node.py",
        "_calculate_importance"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_apply_decoherence"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_calculate_snapshot_entropy"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_calculate_information_content"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "calculate_archive_score"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_calculate_entry_entropy"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_calculate_emotional_weight"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_calculate_heuristic_entropy"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_analyze_temporal_distinctiveness"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_analyze_spatial_distinctiveness"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_calculate_personal_significance"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "_get_consensus_threshold"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "_get_average_response_time"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "calculate_synergy"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "_calculate_complex_compatibility"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_phase_coherence"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "activation"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "activation"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_surprise_value"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_entropy_score"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_contradiction_metrics"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_emotional_volatility"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_drift_patterns"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_memory_resilience"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_trend"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "get_tag_importance"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "calculate_resonance_with"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_extract_fundamental_frequency"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_emotional_weight"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_max_theoretical_entropy"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_calculate_intervention_success_rate"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_calculate_avg_response_time"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "calculate_sampling_weight"
      ],
      [
        "./memory/systems/replay_system.py",
        "_calculate_sequence_duration"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "_recency_factor"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "_calculate_drift_score"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_document_effectiveness"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "_calculate_temporal_strength"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "cosine_similarity"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "frequency_resonance"
      ],
      [
        "./memory/systems/memory_processing.py",
        "_calculate_importance"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_calculate_data_sparsity"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "check_emotional_consistency"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "_calculate_trust_score"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_get_cooldown_remaining"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_calculate_entropy_ratio"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_identity_drift_susceptibility"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_volatility_cascade_risk"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_assess_identity_drift_risk"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_entanglement_feedback_loops"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_detect_memory_reference_cycling"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_calculate_symbolic_weight"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_calculate_acceleration"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_estimate_strategy_acceleration"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_calculate_evolution_score"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_estimate_difficulty"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_estimate_success"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_estimate_learning_rate"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_estimate_consolidation"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "get_stage_proportion"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_calculate_amplitude"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_calculate_duration"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_calculate_complexity"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "calculate_similarity"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_entropy_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_device_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "get_trust_threshold"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_estimate_stress_level"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_estimate_fatigue_level"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_calculate_load_score"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_arousal"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_neural_synchrony"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_get_emotional_pulse_rate"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_component_entropy"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_symbolic_strength"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_overall_score"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_calculate_entropy_score"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_calculate_combined_shannon_entropy"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_calculate_character_diversity"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_analyze_component_entropy"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_analyze_patterns"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_detect_repetitive_sequences"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_detect_sequential_patterns"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_analyze_randomness"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_test_character_distribution"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_test_runs"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_test_chi_square"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_assess_environmental_impact"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_get_verification_threshold"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_get_required_confidence"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_get_consensus_threshold"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_calculate_internal_coherence"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_check_stress_emotion_coherence"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_archetypal_resonance"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_dream_confidence_score"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_consciousness_coherence"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_expected_consciousness_for_emotion"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_get_adaptive_threshold"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_fusion_score"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "_calculate_trust_network_boost"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "_calculate_trust_reputation"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "_calculate_network_influence"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_get_sync_frequency"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_calculate_emotion_coherence"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_calculate_stress_recovery_rate"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_calculate_tier_progress"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_measure_quantum_coherence"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "calculate_vault_entropy"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "calculate_entry_entropy"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "_calculate_character_entropy"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "_calculate_pattern_entropy"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "_calculate_uniqueness_score"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "shannon_entropy"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_calculate_character_diversity"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_validate_emotional_range_proof"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_validate_ethical_compliance_proof"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_validate_trauma_processing_proof"
      ],
      [
        "./security/safety/coordinator.py",
        "quantum_modulate"
      ],
      [
        "./security/safety/emergency_override.py",
        "quantum_modulate"
      ],
      [
        "./creativity/creative_market.py",
        "_compute_value"
      ],
      [
        "./creativity/creative_engine.py",
        "_compute_syllable_accuracy"
      ],
      [
        "./creativity/emotional_resonance.py",
        "_get_frequency_for_emotion"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_sequence_coherence"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_evaluate_identity_alignment"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_evaluate_ethical_alignment"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_check_emotional_consistency"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_thematic_coherence"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_thread_drift_score"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_thread_resonance"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "calculate_visual_harmony"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_calculate_clarity"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_calculate_std"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_calculate_trend"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/system.py",
        "_calculate_generalization_score"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_trend"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/usage_learning.py",
        "get_document_effectiveness"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_estimate_noise_level"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_confidence"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_normalize_membrane_potential"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_calculate_enhancement_factor"
      ],
      [
        "./learning/learning_system.py",
        "_calculate_generalization_score"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_estimate_noise_level"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_confidence"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_normalize_membrane_potential"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_calculate_enhancement_factor"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_trend"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_confidence"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_calculate_adaptation_rate"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_calculate_temporal_coherence"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_calculate_symbolic_resonance"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_measure_intentionality"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_analyze_symbolic_usage"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_detect_intentional_patterns"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_assess_emotional_context"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_analyze_symbolic_usage"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_detect_intentional_patterns"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_assess_emotional_context"
      ],
      [
        "./consciousness/core/engine.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine.py",
        "_analyze_symbolic_usage"
      ],
      [
        "./consciousness/core/engine.py",
        "_detect_intentional_patterns"
      ],
      [
        "./consciousness/core/engine.py",
        "_assess_emotional_context"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "_calculate_base_coherence"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_drift_velocity"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_stability_score"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_emotional_coherence"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_symbolic_alignment"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_identity_continuity"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_value_resonance"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_growth_trajectory"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_relational_awareness"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_time_window"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_emotional_weight"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_dream_emotional_weight"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_dream_coherence"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_lucidity_percentage"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_dream_alignment_impact"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_drift_velocity"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_stability_score"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_emotional_coherence"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_symbolic_alignment"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_identity_continuity"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_value_resonance"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_growth_trajectory"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_relational_awareness"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_time_window"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_emotional_weight"
      ],
      [
        "./tests/simulation/agents_of_failure.py",
        "_entropic_decay"
      ],
      [
        "./tests/simulation/agents_of_failure.py",
        "_collapse_probability"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_synthesize_moral_score"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_calculate_drift_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_coherence_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_stability_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_drift_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_symbol_consistency"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_logical_validity"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_temporal_alignment"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_drift_velocity"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_get_entropy_trend"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_assess_structure"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "evaluate_branch_stability"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "_evaluate_performance"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_deontological_confidence"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_priority_weighted_aggregation"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_consequentialist_confidence"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_get_memory_emotion"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "logic_drift_index"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "recall_efficiency_score"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_coherence_score"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_conclusion_stability"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_path_optimality"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_confidence_calibration"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_overall_score"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_deontological_confidence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_priority_weighted_aggregation"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_consequentialist_confidence"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_estimate_likelihood"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_calculate_type_coherence"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_calculate_pattern_strength"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_utility_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_risk_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_ethics_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_efficiency_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_feasibility_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_confidence_trend"
      ],
      [
        "./ethics/compliance.py",
        "get_plugin_risk_score"
      ],
      [
        "./ethics/compliance_simple.py",
        "get_plugin_risk_score"
      ],
      [
        "./ethics/batch_guard.py",
        "_detect_harmful_content"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "calculate_weighted_drift_score"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_weighted_coherence"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_weighted_confidence"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_weighted_entropy"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_weighted_alignment"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_phase_synchronization"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_stability_index"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_assess_cascade_risk"
      ],
      [
        "./ethics/guardian.py",
        "assess_risk"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_deontological_confidence"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_priority_weighted_aggregation"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_consequentialist_confidence"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "get_trend_slope"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_calculate_severity"
      ],
      [
        "./ethics/policy_engines/base.py",
        "validate_symbolic_alignment"
      ],
      [
        "./ethics/policy_engines/base.py",
        "assess_drift_risk"
      ],
      [
        "./ethics/policy_engines/base.py",
        "assess_collapse_risk"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "validate_symbolic_alignment"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_calculate_importance"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_calculate_entanglement_strength"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_calculate_multi_brain_coherence"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "calculate_zscore"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "kolmogorov_smirnov_test"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "moving_average_deviation"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_calculate_dynamic_priority"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_task_age_days"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_tag_completeness"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_attention_score"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_reusability_score"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_quantum_complexity"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_calculate_risk_score"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_assess_pipeda_compliance"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_assess_transparency"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_calculate_solution_coherence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_assess_data_accuracy"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_calculate_exploration_efficiency"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_calculate_emotional_resilience"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_uk_gdpr_compliance"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_assess_ico_accountability"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_sparsity"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_gdpr_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_eu_ai_act_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_ccpa_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_hipaa_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_sox_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_assess_fedramp_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_calculate_overall_compliance_score"
      ],
      [
        "./orchestration/brain/entropy_probe.py",
        "calculate_entropy"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_assess_institutional_data_quality"
      ],
      [
        "./orchestration/brain/consciousness/dream_narrator.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_estimate_improvement"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_volatility"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_calculate_temporal_confidence"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "_calculate_phase_coherence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_evidence_strength"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_likelihood"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_coherence_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_entanglement_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_superposition_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_consistency_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_premise_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_completeness_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_detect_contradictions"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_aesthetic_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_intuitive_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_empathy_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_calculate_entanglement_strength"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_calculate_multi_brain_coherence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "_calculate_coherence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "_calculate_reasoning_complexity"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_get_brain_frequency"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_sparsity"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_calculate_pattern_confidence"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_calculate_relationship_strength"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "matches_pattern"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_calculate_error_signal"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_calculate_symbolic_confidence"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_calculate_confidence"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_synthesize_moral_score"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_calculate_drift_score"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_assess_complexity"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_calculate_awareness_level"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_assess_processing_quality"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_estimate_cognitive_load"
      ],
      [
        "./governance/integration/policy_board.py",
        "quantum_modulate"
      ],
      [
        "./symbolic/service_analysis.py",
        "compute_modularity_score"
      ],
      [
        "./symbolic/symbolic_glyph_hash.py",
        "entropy_delta"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "analyze_emotional_weight"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "calculate_visual_harmony"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_novelty_score"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_composite_viability"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_emotional_harmony"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_drift_velocity"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_stability_score"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_emotional_coherence"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_symbolic_alignment"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_identity_continuity"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_value_resonance"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_growth_trajectory"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_relational_awareness"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_time_window"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_emotional_weight"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "distance_to"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_assess_fusion_compatibility"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_calculate_type_compatibility"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_calculate_emotion_harmony"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_calculate_temporal_alignment"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_calculate_semantic_coherence"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_calculate_importance_weight"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "_calculate_initial_decay_rate"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "evaluate_branch_stability"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_calculate_collapse_score"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_calculate_node_entropy"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_calculate_average_similarity"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_emotional_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_ethical_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_temporal_decay"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_apply_nonlinear_scaling"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/features/drift/__init__.py",
        "calculate_drift_score"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_emotional_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_ethical_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_temporal_decay"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_apply_nonlinear_scaling"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_fusion_strength"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_translation_confidence"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "distance_to"
      ],
      [
        "./dream/dream_data_sources.py",
        "_calculate_emotional_complexity"
      ],
      [
        "./dream/dream_data_sources.py",
        "_calculate_symbolic_resonance"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "_calculate_convergence_strength"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_calculate_temporal_span"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_calculate_narrative_consistency"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_calculate_symbolic_intensity"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_calculate_pattern_confidence"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_calculate_relationship_strength"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_calculate_modulation_strength"
      ],
      [
        "./quantum/oscillator.py",
        "_calculate_phase_coherence"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_simulated_atp_efficiency"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_simulated_membrane_potential"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_optimal_cardiolipin_for_stability"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_optimal_proton_gradient_for_potential"
      ],
      [
        "./quantum/attention_economics.py",
        "_time_of_day_multiplier"
      ],
      [
        "./quantum/attention_economics.py",
        "_emotional_value_multiplier"
      ],
      [
        "./quantum/attention_economics.py",
        "_calculate_rarity_multiplier"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_ethical_resonance"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_proton_concentration"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_atp_potential"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_processing_cost"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_bio_confidence"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./quantum/layer.py",
        "_calculate_variance"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_calculate_collaboration_quality_metric"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_calculate_response_consensus_level"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_calculate_response_diversity_score"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "calculate_distance"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_calculate_fusion_potential"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_calculate_pattern_confidence"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_calculate_quantum_strength"
      ]
    ],
    "1:Optional[Dict]": [
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "get_last_synthesis"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_last_voice_synthesis"
      ]
    ],
    "5:None": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "record_interaction"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "register_check"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "add_task"
      ],
      [
        "./bio/core/symbolic_preprocessing_colony.py",
        "_apply_tag"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "update_metrics"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "register_colony"
      ],
      [
        "./core/swarm.py",
        "update_colony_resource_state"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "record_observation"
      ],
      [
        "./core/practical_optimizations.py",
        "put"
      ],
      [
        "./core/event_bus.py",
        "subscribe_to_dream_events"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/common.py",
        "__init__"
      ],
      [
        "./core/p2p_communication.py",
        "__init__"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "_log_decision"
      ],
      [
        "./core/symbolic_bridge/token_map.py",
        "add_mapping"
      ],
      [
        "./core/personality/creative_personality.py",
        "contribute_gradients"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "contribute_gradients"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "record_metric"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "vote"
      ],
      [
        "./core/interfaces/as_agent/widgets/delivery_tracker_widget.py",
        "create_delivery_widget"
      ],
      [
        "./core/interfaces/as_agent/news_and_social/affiliate_log.py",
        "log_referral_click"
      ],
      [
        "./memory/fold_engine.py",
        "log_fold_transition"
      ],
      [
        "./memory/fold_engine.py",
        "log_collapse_event"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_track_fold_lineage"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_log_emotional_modification"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "__init__"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "__init__"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "__init__"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_record_drift_event"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "__init__"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "export_memory_timeline_html"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "record_interaction"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_log_access_attempt"
      ],
      [
        "./memory/systems/pin_memory.py",
        "_pin_memory_loop"
      ],
      [
        "./memory/systems/memory_processing.py",
        "store_interaction"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "__torch_dispatch__"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_log_access_attempt"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "log_collapse"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "calculate_optimal_grid_size"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "calculate_trust_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "update_risk_factors"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_store_lambda_id"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_id_creation"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_tier_change"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_consent_trail"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "define_scope"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_create_consciousness_event"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_persist_tier_change"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "__init__"
      ],
      [
        "./creativity/emotional_resonance.py",
        "__init__"
      ],
      [
        "./creativity/emotional_resonance.py",
        "_integrate_with_memory"
      ],
      [
        "./creativity/personality/creative_core.py",
        "contribute_gradients"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "record_interaction"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/_dict_learning.py",
        "_update_inner_stats"
      ],
      [
        "./learning/_dict_learning.py",
        "_minibatch_step"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "contribute_gradients"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/systems/state.py",
        "__init__"
      ],
      [
        "./compliance/compliance_digest.py",
        "plot_bar"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "__init__"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "__init__"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/decision/bridge.py",
        "integrate_components"
      ],
      [
        "./ethics/compliance_engine.py",
        "__init__"
      ],
      [
        "./ethics/service.py",
        "audit_decision"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "log_violation"
      ],
      [
        "./ethics/safety/compliance_digest.py",
        "plot_bar"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "normalize"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "structured_audit_log"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "add_data_influence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "normalize_with_optimal"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "normalize_with_optimal"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "register_pattern"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "log_cultural_interaction"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "remember_location"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "update_calibration"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "update_from_outcome"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_add_unified_confidence_radar"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_add_brain_performance_radar"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_add_quantum_metrics_radar"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_add_bio_oscillation_radar"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_add_confidence_zones"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "link_symbols"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "register_pattern"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "generate_email_draft"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "evaluate_decision"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "add_attribute"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "log_collapse"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "record_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "log_phase_mismatch"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__init__"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_emit_token_warning"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "__init__"
      ],
      [
        "./quantum/awareness_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "__init__"
      ]
    ],
    "1:List[Dict]": [
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "list_versions"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "load_unused_files"
      ],
      [
        "./bio/symbolic_entropy_observer.py",
        "get_entropy_history"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_analyze_interactions"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_detect_user_patterns"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_detect_error_patterns"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_analyze_interactions"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_detect_user_patterns"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_detect_error_patterns"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_analyze_interactions"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_detect_user_patterns"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_detect_error_patterns"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "get_deployment_priorities"
      ],
      [
        "./orchestration/brain/spine/emotion_log_alt.py",
        "search_emotions"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_analyze_interactions"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_detect_user_patterns"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_detect_error_patterns"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_analyze_interactions"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_detect_user_patterns"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_detect_error_patterns"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "identify_bottlenecks"
      ],
      [
        "./dream/dream_data_sources.py",
        "_load_dream_archive"
      ]
    ],
    "4:DocVersion": [
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "create_document"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "update_document"
      ]
    ],
    "3:float": [
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "process_knowledge"
      ],
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "_calculate_resonance"
      ],
      [
        "./bio/endocrine_integration.py",
        "get_modulation_factor"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_calculate_circadian_modifier"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_calculate_stress_modifier"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_calculate_methylation_modifier"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_calculate_user_modifier"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_calculate_threshold_confidence"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_fuzzy_membership"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_calculate_mapping_confidence"
      ],
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "update_phase"
      ],
      [
        "./trace/restabilization_index.py",
        "score_recovery"
      ],
      [
        "./trace/drift_metrics.py",
        "compute_drift_score"
      ],
      [
        "./trace/drift_dashboard.py",
        "predict"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_calculate_cascade_risk"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_memory_efficiency"
      ],
      [
        "./core/id.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./core/oracle_nervous_system.py",
        "_calculate_confidence"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "_estimate_component_energy"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "_calculate_similarity"
      ],
      [
        "./core/agi/self_healing.py",
        "_assess_severity"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_energy_cost"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "calculate_drift_score"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "update_entropy_score"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_calculate_emotional_drift"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_calculate_temporal_drift"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_calculate_intent_drift"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_calculate_theta_delta"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_relevance"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_improvement"
      ],
      [
        "./core/interfaces/dashboard/core/dynamic_tab_system.py",
        "_calculate_sequence_probability"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_determine_formality"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_calculate_confidence"
      ],
      [
        "./memory/openai_memory_adapter.py",
        "_cosine_similarity"
      ],
      [
        "./memory/memory_fold.py",
        "calculate_emotion_distance"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "add_noise"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "add_gaussian_noise"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "calculate_glyph_affinity"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_calculate_emotion_change"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_calculate_temporal_span"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_calculate_pattern_divergence"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_calculate_identity_change"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_calculate_encoding_strength"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_traveling_wave_offset"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_pattern_similarity"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_memory_similarity"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_state_similarity"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_insight_value"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_novelty_score"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_importance_score"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_calculate_change_velocity"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_calculate_similarity"
      ],
      [
        "./memory/systems/replay_system.py",
        "_calculate_coherence_score"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_calculate_vector_similarity"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "_calculate_tag_overlap"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "temporal_decay"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "access_boost"
      ],
      [
        "./memory/systems/memory_node.py",
        "_calculate_importance"
      ],
      [
        "./memory/systems/memory_node.py",
        "_calculate_similarity"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_estimate_problem_complexity"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_calculate_strategy_feature_match"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_calculate_vector_similarity"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "_calculate_integration_score"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "calculate_drift_score"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_detect_pattern_repetition"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_semantic_density"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_emotional_propagation_strength"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_emotional_decay_factor"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_analyze_glyph_pattern_recursion"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_calculate_link_strength"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_calculate_integration_score"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_anchor_stability"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_calculate_entropy_delta"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_calculate_emotional_delta"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_calculate_symbolic_vector_shift"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_semantic_distance"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "_calculate_match_score"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_compute_activation"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "find_semantic_similarity"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_compare_sequences"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_compare_attributes"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_behavioral_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_contextual_score"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_calculate_confidence"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "calculate_entropy_score"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_calculate_entropy"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_consciousness_level"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_valence"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_stress_level"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_relaxation_level"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "_calculate_authenticity_score"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_normalize_entropy"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_analyze_symbolic_entropy"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_calculate_confidence"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_calculate_historical_coherence"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_calculate_symbol_meaning"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_assess_personal_relevance"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_symbolic_alignment"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_consciousness_coherence"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_pattern_match"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_symbol_similarity"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_personal_significance"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_pattern_stability"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_pattern_similarity"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_emotional_match"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_check_pattern_consistency"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_calculate_biographical_match"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_evaluate_fragment_quality"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_validate_device_trust"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_calculate_validation_score"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "_calculate_entropy_quality"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "_calculate_semantic_entropy"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "_calculate_cultural_entropy"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "pattern_entropy"
      ],
      [
        "./security/safety/coordinator.py",
        "_calculate_safety_score"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "_calculate_success_probability"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "_calculate_detection_probability"
      ],
      [
        "./creativity/creative_q_expression.py",
        "_predict_user_resonance"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_time_gap"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_motif_resonance"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_calculate_completeness"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_estimate_complexity"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/federated_learning_system.py",
        "_calculate_client_weight"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_estimate_complexity"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/tutor.py",
        "_analyze_understanding"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_calculate_confidence_adjustment"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "_calculate_client_weight"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_relevance"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_calculate_emotional_depth"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_transparency"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_user_agency"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_privacy"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_transparency"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_user_agency"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_privacy"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_transparency"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_user_agency"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_privacy"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_time_delta"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_assess_virtue_alignment"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_assess_duty_compliance"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_calculate_utility"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_assess_care_preservation"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_patch_effectiveness"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "calculate_entropy_drift"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_calculate_path_entropy"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_calculate_glyph_distance"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_calculate_entropy_delta"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_calculate_confidence_impact"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_entropy_delta"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_final_confidence"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_check_preference_satisfaction"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_estimate_impact_magnitude"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_estimate_impact_valence"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_calculate_novelty"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_calculate_insight_similarity"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_logic_drift"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_recall_efficiency"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_temporal_consistency"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_check_preference_satisfaction"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_estimate_impact_magnitude"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_estimate_impact_valence"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_get_expected_entanglement"
      ],
      [
        "./ethics/ethical_auditor.py",
        "_calculate_cost"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_calculate_ethical_score"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_calculate_safety_score"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_calculate_decay_ethical_score"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_calculate_decay_safety_score"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_check_preference_satisfaction"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_estimate_impact_magnitude"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_estimate_impact_valence"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_calculate_decision_confidence"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "_calculate_drift_impact"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_determine_formality"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_calculate_confidence"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_calculate_context_similarity"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_calculate_priority_score"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_template_match_score"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_similarity"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_calculate_reviewer_suitability_score"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_calculate_average_jurisdiction_score"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "calculate_distance"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_calculate_system_energy"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_determine_formality"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_calculate_confidence"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "evaluate_eu_compliance"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "evaluate_eu_compliance"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_calculate_meta_learning"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_assess_self_awareness"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "_calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_calculate_pr_quality_score"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_estimate_complexity"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_strategy_match"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_calculate_batch_similarity"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "_calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "calculate_drift_score"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_calculate_pattern_match"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "_calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_calculate_simulation_confidence"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "_calculate_resource_need"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_get_prior_probability"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_estimate_aleatory_uncertainty"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_estimate_epistemic_uncertainty"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_estimate_linguistic_uncertainty"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_estimate_temporal_uncertainty"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_estimate_quantum_uncertainty"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "_calculate_optimal_phase_offset"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_estimate_complexity"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_strategy_match"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_calculate_pattern_match"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_assess_virtue_alignment"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_assess_duty_compliance"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_calculate_utility"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_assess_care_preservation"
      ],
      [
        "./symbolic/colony_tag_propagation.py",
        "_get_agent_distance"
      ],
      [
        "./symbolic/service_analysis.py",
        "compute_digital_friction"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_urgency_score"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_coherence_score"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "update_phase"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_predict_fusion_stability"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_assess_mutation_viability"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_assess_mutation_novelty"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_entropy_delta"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_final_confidence"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "calculate_entropy_slope"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_calculate_assessment_confidence"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_semantic_similarity"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_symbol_set_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_entropy_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_state_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_symbol_set_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_entropy_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_state_entropy"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_energy_cost"
      ],
      [
        "./dream/feedback_propagator.py",
        "_calculate_causation_strength"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_calculate_consolidation_score"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_calculate_lucidity"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_calculate_snapshot_health_score"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_calculate_quantum_correlation"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_direct_sequence_match"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_order_sensitive_match"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_simple_semantic_match"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_calculate_time_span"
      ],
      [
        "./quantum/oscillator.py",
        "calculate_phase_alignment"
      ],
      [
        "./quantum/oscillator.py",
        "_calculate_qubo_energy"
      ],
      [
        "./quantum/consensus_system.py",
        "_calculate_energy"
      ],
      [
        "./quantum/bio_components.py",
        "_apply_quantum_filter_to_value"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_optimal_density_for_atp"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_simulated_membrane_stability"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_relevance"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_improvement"
      ],
      [
        "./quantum/bio_system.py",
        "calculate_coherence"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_calculate_bot_response_weight"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_calculate_bot_specialization_match_score"
      ]
    ],
    "2:List[str]": [
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "get_resonant_knowledge"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "_suggest_actions"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_get_bio_capabilities"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_select_colonies_for_consciousness_state"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_generate_recommendations"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "_get_neighbors"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "suggest_topology_improvements"
      ],
      [
        "./core/id.py",
        "_get_tier_permissions"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_identify_emerging_tags"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_identify_declining_tags"
      ],
      [
        "./core/enhanced_swarm.py",
        "_get_capabilities_for_type"
      ],
      [
        "./core/enhanced_swarm.py",
        "_find_capable_agents"
      ],
      [
        "./core/supervision.py",
        "get_affected_children"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "get_supported_capabilities_for_tier"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "_identify_prerequisites"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "_identify_resources"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_find_symbolic_templates"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_generate_predicates"
      ],
      [
        "./core/personality/creative_personality.py",
        "_select_models"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_select_models"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "_serialize_args"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_suggest_context_adaptations"
      ],
      [
        "./core/hub_services/coordinator.py",
        "get_registered_operations"
      ],
      [
        "./memory/evolution.py",
        "_extract_key_features"
      ],
      [
        "./memory/evolution.py",
        "_find_integration_links"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_identify_risk_factors"
      ],
      [
        "./memory/memory_fold.py",
        "_extract_common_themes"
      ],
      [
        "./memory/memory_fold.py",
        "_extract_common_themes"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get_shard_keys"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "_check_compliance_requirements"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_generate_emotional_tags"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_drift_recommendations"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_extract_forensic_markers"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_extract_lambda_tags"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_extract_symbol_ids"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_extract_memory_ids"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_normalize_tag_list"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_normalize_id_list"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_generate_recommendations"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_find_similar_episodes"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_select_validation_colonies"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_improve_memory_consolidation"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_extract_symbol_ids"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_extract_memory_ids"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_extract_lambda_tags"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_identify_risk_factors"
      ],
      [
        "./memory/systems/memory_helix.py",
        "get_due_practice_words"
      ],
      [
        "./memory/systems/memory_identity.py",
        "get_shared_memories"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_get_affected_anchors"
      ],
      [
        "./memory/systems/memory_bases.py",
        "get_identity_memories"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_extract_dream_emotions"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_find_resonant_memory_emotions"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "find_related_dreams"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "detect_trauma_markers"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_strategies"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_errors"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_corrections"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_path"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "_generate_readiness_recommendations"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_get_demo_stages"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_generate_dynamic_challenge"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_get_tier_symbols"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_identify_risk_patterns"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_generate_compliance_tags"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_extract_symbolic_content"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_analyze_temporal_structure"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_get_symbolic_equivalents"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_get_most_common_symbols"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_get_cultural_colors"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_get_tier_security_features"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "get_adaptive_flow"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_determine_platform_compatibility"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_get_trusted_devices"
      ],
      [
        "./identity/enterprise/auth.py",
        "get_user_permissions"
      ],
      [
        "./identity/enterprise/auth.py",
        "_get_user_permissions"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "_get_accessibility_considerations"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "recommend_entropy_improvements"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "extract_patterns"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_extract_emojis"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_detect_cultural_markers"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_detect_language_hints"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_get_security_recommendations"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_get_commercial_benefits"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_select_models"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "extract_symbols"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "extract_glyphs"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "extract_emotions"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_identify_protagonist_elements"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_identify_conflict_elements"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_identify_resolution_elements"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "analyze_symbolic_composition"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_context_symbols"
      ],
      [
        "./learning/system.py",
        "_extract_applicable_domains"
      ],
      [
        "./learning/learning_system.py",
        "_extract_applicable_domains"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_learning_insights"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_symbolic_insights"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "simulate_intent_node_integration"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_extract_common_suggestions"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_learning_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_symbolic_insights"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "identify_reflection_prompts"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_emotional_indicators"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_symbolic_tags"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_experience_prompts"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_learning_recommendations"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_dream_symbols"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_dream_themes"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_dream_prompts"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_collective_symbols"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "identify_reflection_prompts"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_emotional_indicators"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_symbolic_tags"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_experience_prompts"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_identify_concerns"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_identify_drift_factors"
      ],
      [
        "./compliance/compliance_registry.py",
        "get_component_requirements"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_get_tier_permissions"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "_generate_recommendations"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_identify_drift_causal_factors"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_extract_themes"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_extract_dream_symbols"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_extract_insights"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_extract_temporal_connections"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_get_tier_permissions"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_suggest_alignment_interventions"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_suggest_alignment_interventions"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_identify_uncertainties"
      ],
      [
        "./ethics/ethics_engine.py",
        "suggest_alternatives"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "detect_ethics_phase_conflict"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_suggest_alignment_interventions"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "get_applicable_stabilizers"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "select_stabilizers"
      ],
      [
        "./ethics/compliance/engine.py",
        "suggest_alternatives"
      ],
      [
        "./ethics/compliance/engine.py",
        "suggest_ethical_alternatives"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "_segment_text"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_extract_supporting_evidence"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_generate_alternative_hypotheses"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "_determine_target_orchestrators"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "_analyze_cross_orchestrator_targets"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "_route_by_capability"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_detect_context_patterns"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_predict_context_needs"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_ai_suggest_tags"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_ai_suggest_success_criteria"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_normalize_tags"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_suggest_tag_optimizations"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_suggest_distraction_mitigation"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_generate_metacognitive_insights"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "discover_service"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_generate_workspace_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_identify_optimizations"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_learning_insights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_symbolic_insights"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_extract_reasoning_steps"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_generate_peer_review_suggestions"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_identify_optimization_opportunities"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_generate_comprehensive_personality_insights"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_recommend_adaptive_features"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_suggest_accessibility_adjustments"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_generate_social_interaction_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_identify_emotional_growth_opportunities"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_generate_social_recommendations"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_get_automated_safeguards"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "_generate_dream_associations"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_generate_pr_recommendations"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "_generate_dream_associations"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_symbol_validation_issues"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_critical_path_issues"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_dependency_issues"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_pre_commit_issues"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_generic_ci_issues"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_identify_optimization_opportunities"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_generate_creative_insights"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_generate_adaptation_recommendations"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_extract_meta_cognitive_insights"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_generate_compliance_recommendations"
      ],
      [
        "./orchestration/brain/compliance_registry.py",
        "get_component_requirements"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_associated_folds"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_folds_by_tag"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_folds_by_type"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_folds_by_priority"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_folds_by_owner"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "get_important_folds"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "_generate_dream_associations"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "get_shared_memories"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_identify_optimization_opportunities"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "find_contradictions"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_extract_statements"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_extract_supporting_evidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_generate_alternative_hypotheses"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "_generate_compliance_recommendations"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "suggest_alternatives"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_identify_concerns"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_identify_drift_factors"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_generate_adaptation_suggestions"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "_get_dependent_plugins"
      ],
      [
        "./api/core/services.py",
        "_get_tier_permissions"
      ],
      [
        "./symbolic/colony_tag_propagation.py",
        "_get_agent_neighbors"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_context_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "analyze_symbolic_composition"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_context_symbols"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "identify_reflection_prompts"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_emotional_indicators"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_symbolic_tags"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_experience_prompts"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_find_symbolic_templates"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_generate_predicates"
      ],
      [
        "./dream/dream_data_sources.py",
        "_extract_memory_themes"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_active_thoughts"
      ],
      [
        "./dream/dream_data_sources.py",
        "_extract_dream_patterns"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_dominant_influences"
      ],
      [
        "./dream/dream_data_sources.py",
        "_suggest_themes"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_generate_narrative_elements"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "summarize_theme_clusters"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "extract_recurring_symbols"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_map_to_archetypes"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "inject_symbolic_tags"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "inject_symbolic_tags"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_emotions_from_text"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_symbols_from_text"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_emotions_from_vector"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_emotions_from_memory_log"
      ],
      [
        "./quantum/attention_economics.py",
        "_get_allowed_uses"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_select_optimal_bots_for_task"
      ],
      [
        "./quantum/api_manager.py",
        "_get_professional_colors"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_generate_recommendations"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_generate_next_steps"
      ]
    ],
    "2:np.ndarray": [
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "_content_to_pattern"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "_extract_features"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_apply_superposition"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_apply_barrier_effects"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "translate_symbolic_to_neural"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_symbolic_to_neural_embedding"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_apply_bio_transformations"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_normalize_neural_pattern"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_calculate_emotion_delta"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "separate"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "create_content_vector"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_pattern_separation"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_calculate_importance_weights"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_extract_features"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "_reshape_for_heads"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "_reshape_from_heads"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "_text_to_embedding"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_generate_secure_vector"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_generate_context_vector"
      ],
      [
        "./memory/systems/memory_node.py",
        "_generate_embedding"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_generate_secure_vector"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_generate_context_vector"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_extract_features"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_flower_of_life"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_metatron_cube"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_fibonacci_spiral"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_default_consciousness_pattern"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_extract_consciousness_pattern"
      ],
      [
        "./consciousness/perception/sensor_fusion.py",
        "fuse_lidar_and_camera"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_encode_to_quantum_like_state"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_encode_to_quantum_like_state"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_text_to_features"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "translate_symbolic_to_neural"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_symbolic_to_neural_embedding"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_apply_bio_transformations"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_normalize_neural_pattern"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_data_to_quantum_vector"
      ],
      [
        "./quantum/bio.py",
        "_simulate_proton_gradient_generation"
      ],
      [
        "./quantum/bio.py",
        "_generate_quantum_enhanced_output"
      ],
      [
        "./quantum/bio.py",
        "_prepare_for_concat"
      ],
      [
        "./quantum/bio.py",
        "quantum_modulate"
      ],
      [
        "./quantum/bio.py",
        "modulate_frequencies"
      ],
      [
        "./quantum/oscillator.py",
        "_construct_qubo_matrix"
      ],
      [
        "./quantum/oscillator.py",
        "_generate_wave"
      ],
      [
        "./quantum/bio_components.py",
        "_normalize_attention_weights"
      ],
      [
        "./quantum/bio_components.py",
        "quantum_modulate"
      ],
      [
        "./quantum/bio_components.py",
        "modulate_frequencies"
      ],
      [
        "./quantum/bio_system.py",
        "_generate_proton_gradient"
      ],
      [
        "./quantum/bio_system.py",
        "_generate_quantum_output"
      ],
      [
        "./quantum/bio_system.py",
        "cached_quantum_modulate"
      ],
      [
        "./quantum/processing_core.py",
        "_prepare_quantum_signal"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_apply_superposition"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "_prepare_quantum_signal"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "cached_quantum_modulate"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_prepare_quantum_signal"
      ]
    ],
    "1:Dict[str, Any]": [
      [
        "./tools/analysis/generate_function_index.py",
        "generate_index"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "_create_report"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "to_dict"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "scan_codebase"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_generate_report"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "generate_registry"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "_create_report"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "analyze_directory"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_create_report"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_calculate_module_stats"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "to_dict"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "get_integration_status"
      ],
      [
        "./bio/endocrine_integration.py",
        "get_daily_rhythm_phase"
      ],
      [
        "./bio/bio_engine.py",
        "_get_vitals"
      ],
      [
        "./bio/simulation_controller.py",
        "get_cognitive_state"
      ],
      [
        "./bio/simulation_controller.py",
        "suggest_action"
      ],
      [
        "./bio/core.py",
        "get_system_status"
      ],
      [
        "./bio/quantum_layer.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./bio/quantum_layer.py",
        "get_oscillator_metrics"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "get_operational_status"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "get_state"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "_initialize_emergency_values"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "get_system_health_report"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_get_swarm_state"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_get_collective_memory"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_get_bio_processing_state"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "get_voice_metrics"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "get_quantum_summary"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "get_diagnostics"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "get_diagnostics"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "get_status"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "get_statistics"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_stabilize_topology"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "get_performance_summary"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "get_state_summary"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "get_network_statistics"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "export_network_state"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "validate_network_integrity"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "get_optimization_trends"
      ],
      [
        "./bio/awareness/awareness.py",
        "_check_system_health"
      ],
      [
        "./trace/drift_tools.py",
        "to_dict"
      ],
      [
        "./trace/drift_dashboard.py",
        "to_dict"
      ],
      [
        "./trace/drift_dashboard.py",
        "to_dict"
      ],
      [
        "./trace/drift_dashboard.py",
        "get_dashboard_state"
      ],
      [
        "./trace/drift_dashboard.py",
        "_calculate_system_health"
      ],
      [
        "./core/integration_hub.py",
        "get_integration_metrics"
      ],
      [
        "./core/integration_hub.py",
        "export_configuration"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "to_dict"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "get_quick_stats"
      ],
      [
        "./core/integrator.py",
        "get_system_status"
      ],
      [
        "./core/resource_optimization_integration.py",
        "to_dict"
      ],
      [
        "./core/resource_optimization_integration.py",
        "get_resource_summary"
      ],
      [
        "./core/distributed_tracing.py",
        "to_dict"
      ],
      [
        "./core/distributed_tracing.py",
        "get_trace_statistics"
      ],
      [
        "./core/image_processing_pipeline.py",
        "to_dict"
      ],
      [
        "./core/image_processing_pipeline.py",
        "get_pipeline_stats"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/integrated_safety_system.py",
        "get_event_metrics"
      ],
      [
        "./core/integrated_safety_system.py",
        "get_system_status"
      ],
      [
        "./core/symbolic_boot.py",
        "symbolic_boot"
      ],
      [
        "./core/symbolic_boot.py",
        "load_system_modules"
      ],
      [
        "./core/symbolic_boot.py",
        "symbolic_boot"
      ],
      [
        "./core/symbolic_boot.py",
        "get_status"
      ],
      [
        "./core/enhanced_swarm.py",
        "get_status"
      ],
      [
        "./core/enhanced_swarm.py",
        "get_colony_status"
      ],
      [
        "./core/enhanced_swarm.py",
        "get_swarm_status"
      ],
      [
        "./core/event_sourcing.py",
        "to_dict"
      ],
      [
        "./core/core_system.py",
        "get_status"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "to_dict"
      ],
      [
        "./core/practical_optimizations.py",
        "deserialize_swarm_message"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/fallback_services.py",
        "assess_action"
      ],
      [
        "./core/fallback_services.py",
        "check_compliance"
      ],
      [
        "./core/fallback_services.py",
        "store_memory"
      ],
      [
        "./core/fallback_services.py",
        "retrieve_memory"
      ],
      [
        "./core/fallback_services.py",
        "search_memory"
      ],
      [
        "./core/fallback_services.py",
        "generate_content"
      ],
      [
        "./core/fallback_services.py",
        "synthesize_dream"
      ],
      [
        "./core/fallback_services.py",
        "process_awareness"
      ],
      [
        "./core/fallback_services.py",
        "introspect"
      ],
      [
        "./core/fallback_services.py",
        "get_consciousness_state"
      ],
      [
        "./core/fallback_services.py",
        "learn_from_data"
      ],
      [
        "./core/fallback_services.py",
        "adapt_behavior"
      ],
      [
        "./core/fallback_services.py",
        "quantum_compute"
      ],
      [
        "./core/fallback_services.py",
        "quantum_entangle"
      ],
      [
        "./core/event_bus.py",
        "get_event_bus_stats"
      ],
      [
        "./core/core_utilities.py",
        "collect_metrics"
      ],
      [
        "./core/supervision.py",
        "get_supervision_stats"
      ],
      [
        "./core/efficient_communication.py",
        "to_dict"
      ],
      [
        "./core/efficient_communication.py",
        "get_connection_stats"
      ],
      [
        "./core/efficient_communication.py",
        "get_communication_stats"
      ],
      [
        "./core/efficient_communication.py",
        "get_statistics"
      ],
      [
        "./core/efficient_communication.py",
        "get_stats"
      ],
      [
        "./core/observability_steering.py",
        "get_system_overview"
      ],
      [
        "./core/observability_steering.py",
        "get_custom_metrics"
      ],
      [
        "./core/observability_steering.py",
        "get_pattern_summary"
      ],
      [
        "./core/observability_steering.py",
        "get_custom_metrics"
      ],
      [
        "./core/task_manager.py",
        "get_system_status"
      ],
      [
        "./core/mailbox.py",
        "get_stats"
      ],
      [
        "./core/mailbox.py",
        "get_mailbox_stats"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "get_identity_statistics"
      ],
      [
        "./core/monitoring_observability.py",
        "get_performance_summary"
      ],
      [
        "./core/quantum_identity_manager.py",
        "to_dict"
      ],
      [
        "./core/quantum_identity_manager.py",
        "get_identity_stats"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "get_metrics"
      ],
      [
        "./core/tiered_state_management.py",
        "to_dict"
      ],
      [
        "./core/tiered_state_management.py",
        "get_statistics"
      ],
      [
        "./core/hub_registry.py",
        "get_all_hubs"
      ],
      [
        "./core/identity_aware_base.py",
        "get_service_info"
      ],
      [
        "./core/resource_efficiency.py",
        "collect_metrics"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "get_proxy_statistics"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "get_manager_statistics"
      ],
      [
        "./core/actor_system.py",
        "to_dict"
      ],
      [
        "./core/actor_system.py",
        "get_stats"
      ],
      [
        "./core/actor_system.py",
        "get_system_stats"
      ],
      [
        "./core/p2p_communication.py",
        "to_dict"
      ],
      [
        "./core/p2p_communication.py",
        "get_network_stats"
      ],
      [
        "./core/observatory.py",
        "get_system_status"
      ],
      [
        "./core/colonies/base_colony.py",
        "get_status"
      ],
      [
        "./core/symbolic_bridge/token_map.py",
        "get_schema"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "get_system_status"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "get_metrics"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_default_config"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "get_fusion_metrics"
      ],
      [
        "./core/integration/connectivity_engine.py",
        "get_status"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "to_dict"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_status"
      ],
      [
        "./core/integration/layer.py",
        "get_integration_status"
      ],
      [
        "./core/integration/system_bridge.py",
        "get_status"
      ],
      [
        "./core/personality/personality.py",
        "get_status"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_default_config"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "optimize_energy_allocation"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "get_energy_metrics"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_analyze_task_queue"
      ],
      [
        "./core/observability/collector.py",
        "get_metrics"
      ],
      [
        "./core/introspection/introspector.py",
        "analyze_module"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "get_safety_status"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "_calculate_intervention_stats"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "get_agent_performance_metrics"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "get_consensus_statistics"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_safety_status"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "get_dream_statistics"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "to_dict"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "get_safety_statistics"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_load_compliance_rules"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_load_rules"
      ],
      [
        "./core/audit/audit_trail.py",
        "to_dict"
      ],
      [
        "./core/engines/identity_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/learning_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/creative_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/consciousness_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/communication_engine.py",
        "get_metrics"
      ],
      [
        "./core/ai/integration_manager.py",
        "_load_ai_service_config"
      ],
      [
        "./core/symbolism/archiver.py",
        "get_full_symbolic_state"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "get_system_metrics"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "get_agent_status"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "to_dict"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "get_system_health"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "get_dream_stats"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "get_biological_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_biological_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_biological_status"
      ],
      [
        "./core/base/base_config.py",
        "to_dict"
      ],
      [
        "./core/base/base_health.py",
        "get_report"
      ],
      [
        "./core/base/base_module.py",
        "get_status"
      ],
      [
        "./core/interfaces/common_interfaces.py",
        "get_ethical_context"
      ],
      [
        "./core/interfaces/common_interfaces.py",
        "get_dream_state"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "get_registry_metrics"
      ],
      [
        "./core/interfaces/logic/context/context_builder.py",
        "build_user_context"
      ],
      [
        "./core/interfaces/dashboard/core/universal_adaptive_dashboard.py",
        "_initialize_morphing_rules"
      ],
      [
        "./core/interfaces/dashboard/core/universal_adaptive_dashboard.py",
        "_initialize_healing_protocols"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_load_ethical_guidelines"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "get_current_user"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_assessor_info"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_protocol_metrics"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_assessor_info"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "aggregate_dast_tags"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "aggregate_symbolic_tags"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "get_status"
      ],
      [
        "./core/hub_services/service_registry.py",
        "get_service_info"
      ],
      [
        "./memory/structural_conscience.py",
        "to_dict"
      ],
      [
        "./memory/structural_conscience.py",
        "get_conscience_summary"
      ],
      [
        "./memory/fold_engine.py",
        "to_dict"
      ],
      [
        "./memory/fold_engine.py",
        "_get_emotional_weighted_content"
      ],
      [
        "./memory/evolution.py",
        "get_evolution_stats"
      ],
      [
        "./memory/emotional.py",
        "to_dict"
      ],
      [
        "./memory/emotional.py",
        "get_current_emotional_state"
      ],
      [
        "./memory/core.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/core.py",
        "get_memory_usage_stats"
      ],
      [
        "./memory/core.py",
        "get_optimization_statistics"
      ],
      [
        "./memory/core.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/core.py",
        "to_dict"
      ],
      [
        "./memory/core.py",
        "get_network_status"
      ],
      [
        "./memory/memory_fold.py",
        "get_default_config"
      ],
      [
        "./memory/memory_fold.py",
        "get_statistics"
      ],
      [
        "./memory/memory_fold.py",
        "get_system_statistics"
      ],
      [
        "./memory/memory_optimization.py",
        "get_stats"
      ],
      [
        "./memory/memory_optimization.py",
        "get_stats"
      ],
      [
        "./memory/memory_optimization.py",
        "get_memory_stats"
      ],
      [
        "./memory/dashboard.py",
        "_analyze_fold_integrity_log"
      ],
      [
        "./memory/dashboard.py",
        "_analyze_compression_efficiency"
      ],
      [
        "./memory/dashboard.py",
        "_analyze_dream_integration_metrics"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get_global_stats"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get_cluster_stats"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "get_compliance_status"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "get_vault_status"
      ],
      [
        "./memory/basic.py",
        "to_dict"
      ],
      [
        "./memory/basic.py",
        "memory_stats"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "fold_recent_memories"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "get_dream_glyph_landscape"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "get_memory_glyph_statistics"
      ],
      [
        "./memory/dream_memory_fold.py",
        "to_dict"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "get_stats"
      ],
      [
        "./memory/memoria.py",
        "get_component_status"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "load_memory_snapshots"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "detect_missing_links"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "assess_vault_health"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_default_config"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_collapse_signatures"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_compile_audit_data"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_temporal_span"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_temporal_coverage"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "get_health_status"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "get_colony_stats"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "get_metrics"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "to_dict"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "get_memory_statistics"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "run_memory_lifecycle_test"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "run_error_condition_test"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "get_comprehensive_memory_status"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "get_metrics"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "get_metrics"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "get_concept_hierarchy"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "get_metrics"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "get_metrics"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "to_dict"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "get_replay_statistics"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "get_replay_statistics"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "get_adapter_stats"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "get_sanctum_report"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "to_dict"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "get_network_status"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "get_memory_usage_stats"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "get_optimization_statistics"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/fold_system/foldin.py",
        "verify_lkf_pack"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "get_statistics"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "get_resonance_stats"
      ],
      [
        "./memory/hooks/base.py",
        "get_metrics"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "to_dict"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "get_metrics"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "get_metrics"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_system_status"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "get_status"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "get_safety_report"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_metadata"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "get_statistics"
      ],
      [
        "./memory/systems/memory_lock.py",
        "get_access_stats"
      ],
      [
        "./memory/systems/memory_helix.py",
        "generate_accent_report"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "analyze_causal_structure"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "get_causal_reasoning_statistics"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "get_identity_protection_status"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "analyze_resonance_patterns"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "get_system_health"
      ],
      [
        "./memory/systems/memory_node.py",
        "get_memory_stats"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_create_helix_structure"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "analyze_memory_patterns"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "generate_learning_report"
      ],
      [
        "./memory/systems/trace_injector.py",
        "to_dict"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "get_access_stats"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "analyze_memory_patterns"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "get_allocation_stats"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "optimize_memory_layout"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "get_allocation_stats"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "optimize_memory_layout"
      ],
      [
        "./memory/systems/simple_store.py",
        "to_dict"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "_default_emotional_state"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "get_memory_statistics"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "get_memory_stats"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "generate_compliance_report"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "create_memory_landscape_plot_data"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "get_memory_statistics"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_consensus_report"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_integration_status"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "get_status"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "to_dict"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "get_session_analytics"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "integrate_dream"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "get_system_status"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_stats"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_storage_stats"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_performance_stats"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "optimize_cache"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_metadata"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "to_dict"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "get_pattern_statistics"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "get_knowledge_statistics"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "get_swarm_status"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "process_dream_cycle"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "get_metrics"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "get_metrics"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "get_healing_report"
      ],
      [
        "./memory/repair/trauma_repair_wrapper.py",
        "get_repair_statistics"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "get_repair_statistics"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_metrics"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "get_concept_hierarchy"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "get_metrics"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "get_metrics"
      ],
      [
        "./identity/qrg_integration.py",
        "get_generation_statistics"
      ],
      [
        "./identity/identity_hub.py",
        "get_enterprise_auth_config_template"
      ],
      [
        "./identity/identity_hub.py",
        "get_persona_engine_status"
      ],
      [
        "./identity/qrg_showcase.py",
        "run_comprehensive_showcase"
      ],
      [
        "./identity/qrg_showcase.py",
        "run_performance_benchmark"
      ],
      [
        "./identity/deployment_package.py",
        "validate_python_environment"
      ],
      [
        "./identity/deployment_package.py",
        "validate_file_structure"
      ],
      [
        "./identity/deployment_package.py",
        "validate_module_functionality"
      ],
      [
        "./identity/deployment_package.py",
        "run_complete_validation"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "get_crypto_config"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_cultural_context"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_symbolic_elements"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_entropy_preferences"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_biometric_preferences"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_consciousness_data"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "get_cultural_status"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "get_grid_status"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_analyze_eye_movement_patterns"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_extract_attention_from_input_patterns"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "get_attention_status"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_initialize_adaptation_rules"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "get_cognitive_status"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "get_service_stats"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_load_tier_config"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_get_default_config"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "to_dict"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_get_fallback_metrics"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "get_access_metrics"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "to_dict"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "export_state"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "get_entropy_statistics"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "to_dict"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "get_hub_statistics"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "get_tier_performance_report"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "get_colony_health_status"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "get_system_health_report"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "get_resolver_statistics"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "list_commercial_tiers"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "get_colony_statistics"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "get_pipeline_statistics"
      ],
      [
        "./identity/core/events/identity_event_types.py",
        "to_dict"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "get_event_statistics"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "_get_current_anchors"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "get_enforcement_report"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "get_generation_stats"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "get_entropy_summary"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "get_ui_state_summary"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_load_educational_content"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "get_tier_comparison"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "get_format_specifications"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "get_public_api_info"
      ],
      [
        "./identity/governance/policy_board.py",
        "status_report"
      ],
      [
        "./identity/api/onboarding_api.py",
        "start_onboarding_session"
      ],
      [
        "./identity/api/onboarding_api.py",
        "progress_onboarding_stage"
      ],
      [
        "./identity/api/onboarding_api.py",
        "complete_onboarding"
      ],
      [
        "./identity/api/onboarding_api.py",
        "get_onboarding_status"
      ],
      [
        "./config/fallback_settings.py",
        "validate_fallback_config"
      ],
      [
        "./config/fallback_settings.py",
        "to_dict"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "get_integration_status"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_default_config"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_initialize_pedersen_commitment"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_initialize_bulletproof_parameters"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "get_validator_status"
      ],
      [
        "./security/safety/emergency_override.py",
        "_verify_quantum_safety"
      ],
      [
        "./security/safety/emergency_override.py",
        "_get_quantum_like_state"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "get_system_status"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "get_weaver_status"
      ],
      [
        "./creativity/engines/engine.py",
        "_analyze_creation_patterns"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "to_dict"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "get_metrics"
      ],
      [
        "./bridge/openai_core_service.py",
        "get_usage_report"
      ],
      [
        "./bridge/openai_core_service.py",
        "_load_mock_responses"
      ],
      [
        "./bridge/trace_logger.py",
        "get_trace_summary"
      ],
      [
        "./bridge/shared_state.py",
        "get_stats"
      ],
      [
        "./learning/service.py",
        "_get_knowledge_updates"
      ],
      [
        "./learning/service.py",
        "_get_detailed_learning_patterns"
      ],
      [
        "./learning/service.py",
        "_analyze_adaptation_trends"
      ],
      [
        "./learning/service.py",
        "_track_knowledge_evolution"
      ],
      [
        "./learning/learning_hub.py",
        "get_learning_metrics"
      ],
      [
        "./learning/system.py",
        "_analyze_learning_history"
      ],
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "get_integration_status"
      ],
      [
        "./learning/enhancement_engine.py",
        "enhance_bio_symbolic_core"
      ],
      [
        "./learning/enhancement_engine.py",
        "enhance_adaptive_learning"
      ],
      [
        "./learning/enhancement_engine.py",
        "enhance_voice_memory_integration"
      ],
      [
        "./learning/enhancement_engine.py",
        "extract_prototype_gold"
      ],
      [
        "./learning/enhancement_engine.py",
        "optimize_api_costs"
      ],
      [
        "./learning/enhancement_engine.py",
        "complete_sprint"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "get_integration_status"
      ],
      [
        "./learning/learning_system.py",
        "_analyze_learning_history"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "explore_meta_learning_directory"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "execute_recovery"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_get_default_metrics"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_symbolic_reasoning_federation"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "synchronize_federation"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "get_federation_status"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_federation_wisdom"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "get_optimization_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_symbolic_reasoning_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "synchronize_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "get_federation_status"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_federation_wisdom"
      ],
      [
        "./consciousness/service.py",
        "_get_advanced_consciousness_metrics_internal"
      ],
      [
        "./consciousness/service.py",
        "_analyze_current_awareness_patterns_internal"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "get_status"
      ],
      [
        "./consciousness/quantum_consciousness_hub.py",
        "to_quantum_representation"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "get_consciousness_integration_status"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "_default_consciousness_config"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_load_config"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "get_user_context"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "get_state_summary"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_identify_interaction_patterns"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "get_status"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_load_config"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_calculate_recent_performance"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get_consciousness_state"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get_system_status"
      ],
      [
        "./consciousness/core/engine.py",
        "to_dict"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration.py",
        "get_consciousness_status"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "get_pattern_analysis"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "_get_fallback_consciousness_state"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "get_status"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "get_metrics"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "get_status"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "get_hub_status"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "get_status"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "get_status"
      ],
      [
        "./compliance/ai_compliance.py",
        "get_transparency_report"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "get_engine_status"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "get_resolution_statistics"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "get_reasoning_status"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "to_dict"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "get_symbolic_insights"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "harmonize_symbolic_loop"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "to_dict"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "get_collapse_statistics"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "get_status"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "get_reasoning_status"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "get_causal_reasoning_insights"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "get_colony_status"
      ],
      [
        "./reasoning/abstract_reasoning_demo.original.py",
        "get_brain_status"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "to_dict"
      ],
      [
        "./reasoning/analysis/engine.py",
        "get_capabilities"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_default_config"
      ],
      [
        "./reasoning/decision/bridge.py",
        "analyze_decision_patterns"
      ],
      [
        "./reasoning/decision/bridge.py",
        "get_decision_metrics"
      ],
      [
        "./ethics/compliance_engine.py",
        "get_compliance_status"
      ],
      [
        "./ethics/compliance_engine.py",
        "_initialize_ethical_framework"
      ],
      [
        "./ethics/service.py",
        "_load_ethics_rules"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "get_status"
      ],
      [
        "./ethics/ethics_engine.py",
        "get_metrics"
      ],
      [
        "./ethics/compliance.py",
        "get_compliance_report"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "get_compliance_status"
      ],
      [
        "./ethics/compliance_simple.py",
        "get_compliance_report"
      ],
      [
        "./ethics/simplified_ethics_integration.py",
        "get_ethics_status"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "load_ethics_config"
      ],
      [
        "./ethics/decision_node.py",
        "analyze_ethical_trends"
      ],
      [
        "./ethics/ethics_guard.py",
        "_load_default_rules"
      ],
      [
        "./ethics/ethics_guard.py",
        "get_compliance_report"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "get_mesh_status"
      ],
      [
        "./ethics/ethical_auditor.py",
        "get_audit_summary"
      ],
      [
        "./ethics/utils.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/utils.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "get_validation_statistics"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "get_metrics"
      ],
      [
        "./ethics/meg_guard.py",
        "get_stats"
      ],
      [
        "./ethics/meg_bridge.py",
        "get_meg_status"
      ],
      [
        "./ethics/bases.py",
        "to_dict"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "get_stabilization_status"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_setup_color_schemes"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_load_live_data"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "_generate_synthetic_data"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "to_dict"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "to_dict"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "get_governor_status"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "get_ethics_report"
      ],
      [
        "./ethics/compliance/engine.py",
        "get_metrics"
      ],
      [
        "./ethics/compliance/engine.py",
        "get_core_ethics_metrics"
      ],
      [
        "./ethics/compliance/engine.py",
        "get_overall_compliance_status"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "to_dict"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "to_dict"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "get_sentinel_status"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_initialize_ethical_constraints"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "get_policy_metrics"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_metrics"
      ],
      [
        "./voice/emotional_modulator.py",
        "get_emotional_influence"
      ],
      [
        "./voice/voice_integration.py",
        "_get_voice_settings"
      ],
      [
        "./voice/voice_integration.py",
        "_get_modulator_settings"
      ],
      [
        "./voice/voice_profiling.py",
        "to_dict"
      ],
      [
        "./voice/interface.py",
        "get_status"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "get_system_status"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "get_status"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "get_safety_status"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "_default_config"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "get_colony_status"
      ],
      [
        "./orchestration/core.py",
        "get_system_status"
      ],
      [
        "./orchestration/integration_engine.py",
        "get_status"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "_default_config"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "get_master_status"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "get_status"
      ],
      [
        "./orchestration/base.py",
        "get_status"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "get_monitoring_status"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "get_api_status"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_comparison_summary"
      ],
      [
        "./orchestration/config/production_config.py",
        "to_dict"
      ],
      [
        "./orchestration/security/dast_orchestrator.py",
        "get_system_state"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_initialize_reasoning_rules"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_initialize_ai_models"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "get_performance_stats"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "get_metrics"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "get_orchestration_status"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "get_status"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "get_simulation_status"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "get_current_state"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "store_memory"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "retrieve_memory"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "speak"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "get_us_compliance_report"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "_load_widget_registry"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_symbolic_reasoning_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "synchronize_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "get_federation_status"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_federation_wisdom"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_compliance_report"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "get_user_explanation"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "get_transparency_summary"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "certify_research_compliance"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "get_research_summary"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "awaken"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "get_state_info"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "scan_all_repositories"
      ],
      [
        "./orchestration/brain/core_system.py",
        "get_status"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "get_stats"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "get_identity_state"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "get_batch_statistics"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "run_autonomous_cycle"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "_process_github_notifications_batch"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "run_fully_autonomous"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "process_all_repositories"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "get_status"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_get_consolidation_status"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "get_symphony_status"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "certify_global_institutional_compliance"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "get_financial_intelligence_report"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "get_team_status"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "get_transparency_report"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_eu_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_us_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_canada_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_uk_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_setup_global_standards"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "get_status"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "get_mesh_status"
      ],
      [
        "./orchestration/brain/cognitive/voice_engine.py",
        "_learn_from_patterns"
      ],
      [
        "./orchestration/brain/core/types.py",
        "get_status"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "get_comprehensive_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "get_calibration_summary"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "get_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "get_radar_performance_summary"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "generate_rhythm"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "get_synchronization_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "get_performance_metrics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "get_brain_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_get_performance_summary"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "get_compliance_status"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_load_manifest"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "get_transparency_report"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/dream_generator.py",
        "_apply_ethical_filter"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "get_metrics"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "get_ethical_status"
      ],
      [
        "./orchestration/brain/orchestration/core.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "_load_governance_config"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "get_governance_status"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "get_status"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get_stats"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "get_system_status"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_get_detailed_module_metrics"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_get_workflow_details"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_get_resource_utilization"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_get_performance_metrics"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_assess_cross_module_health"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_analyze_workflow_performance_impact"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "get_system_status"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_load_manifest"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "to_dict"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "get_overall_health"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "export_health_report"
      ],
      [
        "./orchestration/monitoring/sub_agents/memory_cleaner.py",
        "analyze_memory_fragmentation"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "get_operation_summary"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "_fallback_realignment"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "to_dict"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "get_metadata_dict"
      ],
      [
        "./governance/core.py",
        "_load_threat_patterns"
      ],
      [
        "./governance/core.py",
        "_load_ethical_principles"
      ],
      [
        "./governance/common.py",
        "get_status"
      ],
      [
        "./governance/integration/policy_board.py",
        "compute_quantum_approval"
      ],
      [
        "./governance/integration/policy_board.py",
        "get_status"
      ],
      [
        "./api/core/dream_commerce.py",
        "get_commerce_stats"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "get_system_state"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "to_dict"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "get_fusion_statistics"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "get_mutation_statistics"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "get_statistics"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "get_collapse_statistics"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "get_system_metrics"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "to_dict"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "get_collapse_metrics"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "visualize_collapse_graph"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_default_config"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "get_fusion_metrics"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "get_coordinator_status"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_system_status"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_token_usage_report"
      ],
      [
        "./dream/immersive_ingestion.py",
        "_reflect_dream"
      ],
      [
        "./dream/immersive_ingestion.py",
        "run_dream_breath"
      ],
      [
        "./dream/dream_generator.py",
        "_apply_ethical_filter"
      ],
      [
        "./dream/dream_generator.py",
        "generate_dream_sync"
      ],
      [
        "./dream/dream_data_sources.py",
        "_simulate_memory_data"
      ],
      [
        "./dream/dream_data_sources.py",
        "_simulate_consciousness_data"
      ],
      [
        "./dream/dream_data_sources.py",
        "_simulate_emotional_data"
      ],
      [
        "./dream/dream_data_sources.py",
        "_simulate_quantum_symbolic_data"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "to_dict"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_calculate_symbolic_trends"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "to_dict"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "to_dict"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "to_dict"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_initialize_archetypal_mappings"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "get_statistics"
      ],
      [
        "./dream/core/dream_stats.py",
        "get_summary"
      ],
      [
        "./dream/core/dream_utils.py",
        "analyze_dream_symbols"
      ],
      [
        "./dream/core/dream_utils.py",
        "merge_dream_sequences"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "get_quantum_metrics"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "to_dict"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "get_system_health_report"
      ],
      [
        "./emotion/emotion_hub.py",
        "get_emotional_state"
      ],
      [
        "./quantum/service.py",
        "_get_quantum_like_state_summary"
      ],
      [
        "./quantum/service.py",
        "_get_detailed_entanglement_metrics"
      ],
      [
        "./quantum/service.py",
        "_analyze_superposition_states"
      ],
      [
        "./quantum/service.py",
        "_calculate_quantum_error_rates"
      ],
      [
        "./quantum/system.py",
        "get_system_status"
      ],
      [
        "./quantum/metadata.py",
        "get_metadata_statistics"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "get_optimization_status"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "config_to_dict"
      ],
      [
        "./quantum/oscillator.py",
        "verify_quantum_security"
      ],
      [
        "./quantum/oscillator.py",
        "_get_current_metrics"
      ],
      [
        "./quantum/consensus_system.py",
        "get_status"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "to_dict"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "get_security_status"
      ],
      [
        "./quantum/vault_manager.py",
        "generate_vault_report"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_simulate_crista_optimizer_state"
      ],
      [
        "./quantum/creative_integration.py",
        "get_system_status"
      ],
      [
        "./quantum/layer.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./quantum/layer.py",
        "get_oscillator_metrics"
      ],
      [
        "./quantum/bio_system.py",
        "get_self_assessment_report"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "get_processing_statistics"
      ],
      [
        "./quantum/processing_core.py",
        "_get_entanglement_state"
      ],
      [
        "./quantum/processing_core.py",
        "get_quantum_like_state"
      ],
      [
        "./quantum/processing_core.py",
        "get_quantum_metrics"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_initialize_mitochondrial_network_sim"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "get_orchestration_system_status"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "get_ethics_report"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "get_security_metrics"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "to_dict"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "get_consensus_status"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "get_summary"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "get_neuro_symbolic_statistics"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "create_fallback_components"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_get_entanglement_state"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "get_quantum_like_state"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "get_quantum_metrics"
      ]
    ],
    "2:int": [
      [
        "./tools/analysis/generate_function_index.py",
        "_extract_functions"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "_extract_classes"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "run_phase"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_get_max_concurrent_tasks"
      ],
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ],
      [
        "./core/cluster_sharding.py",
        "get_shard_id"
      ],
      [
        "./core/practical_optimizations.py",
        "_estimate_size"
      ],
      [
        "./core/tiered_state_management.py",
        "_get_next_version"
      ],
      [
        "./core/identity_integration.py",
        "get_tier_index"
      ],
      [
        "./core/actor_system.py",
        "_get_shard"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_get_tier_level"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_get_shard_id"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_load_jsonl_file"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_load_json_file"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_load_vault_file"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_scan_python_file"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "lookup"
      ],
      [
        "./memory/systems/memory_identity.py",
        "cleanup"
      ],
      [
        "./memory/systems/memory_processing.py",
        "import_memories"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_get_compression_depth"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "_get_replication_factor"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_determine_identity_protection_level"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_count_plateau_periods"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_count_breakthroughs"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "get_recent_auth_count"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "get_recent_failures"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_calculate_base_grid_size"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_normalize_tier"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_get_user_tier"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_get_priority_weight"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_calculate_image_capacity"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_estimate_onboarding_time"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_calculate_remaining_time"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "get_user_tier"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_get_quantum_version"
      ],
      [
        "./creativity/creative_engine.py",
        "count_syllables"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_count_syllables"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_count_syllables_in_line"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_get_prediction_steps"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_calculate_tree_depth"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_count_nodes"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_calculate_reasoning_depth"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_severity_rank"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_calculate_data_age"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_ai_estimate_duration"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_recommend_focus_duration"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_get_reviewer_count_for_priority"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_get_priority_value"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "cleanup"
      ],
      [
        "./dream/dream_seed.py",
        "_seed_diversity_index"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_severity_rank"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_count_broken_imports"
      ]
    ],
    "4:Dict[str, Any]": [
      [
        "./tools/analysis/generate_function_index.py",
        "_analyze_function"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "_analyze_class"
      ],
      [
        "./core/distributed_tracing.py",
        "replay_agent_state"
      ],
      [
        "./memory/service.py",
        "store_memory"
      ],
      [
        "./memory/fold_engine.py",
        "compress_fold_delta"
      ],
      [
        "./memory/emotional.py",
        "process_experience"
      ],
      [
        "./memory/memory_fold.py",
        "dream_consolidate_memories"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_apply_state_correction"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "create_glyph_memory"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "perform_temporal_folding"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_modulate_memory_by_emotion"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_apply_state_correction"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_apply_modulation_limits"
      ],
      [
        "./memory/memoria.py",
        "process_symbolic_trace"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_detect_compression_loops"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "validate_memory_operation"
      ],
      [
        "./memory/systems/tier_system.py",
        "_create_audit_entry"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_create_emotional_bridge"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "_extract_entity_properties"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "track_drift"
      ],
      [
        "./identity/auth_backend/qr_entropy_generator.py",
        "generate_authentication_qr"
      ],
      [
        "./identity/core/qrs_manager.py",
        "_validate_symbolic_challenge"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "check_upgrade_eligibility"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "generate_qr_geo_recovery"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "sync_across_devices"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_verify_geographic_proximity"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "create_biometric_challenge"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "resolve_identity_permissions"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_validate_commercial_specific"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_fragment_params"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "extract_identity_data"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_embed_lsb"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_embed_dct"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_embed_fractal"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_embed_identity_features"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_compile_security_metadata"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_process_stage_data"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_completion_report"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "generate_steganographic_qr"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "generate_adaptive_qr"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_generate_analysis"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "get_tier_information"
      ],
      [
        "./creativity/service.py",
        "generate_content"
      ],
      [
        "./creativity/service.py",
        "synthesize_dream"
      ],
      [
        "./creativity/service.py",
        "_generate_emotional_content"
      ],
      [
        "./learning/service.py",
        "synthesize_knowledge"
      ],
      [
        "./learning/service.py",
        "_process_learning_data"
      ],
      [
        "./learning/service.py",
        "_process_behavior_adaptation"
      ],
      [
        "./learning/service.py",
        "_process_transfer_learning"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_simulate_rehearsal_iteration"
      ],
      [
        "./consciousness/service.py",
        "perform_introspection_api"
      ],
      [
        "./consciousness/service.py",
        "process_awareness_stream"
      ],
      [
        "./consciousness/service.py",
        "engage_metacognitive_analysis"
      ],
      [
        "./consciousness/service.py",
        "_execute_introspection_process"
      ],
      [
        "./consciousness/service.py",
        "_execute_attention_directive"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_generate_recovery_plan"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "emit_feedback_glyphs_internal"
      ],
      [
        "./ethics/compliance_engine.py",
        "validate_content_against_ethical_constraints"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_bias"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_harm"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_oversight"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_value_alignment"
      ],
      [
        "./ethics/compliance_engine.py",
        "_apply_differential_privacy"
      ],
      [
        "./ethics/service.py",
        "evaluate_safety"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_utilitarian"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_deontological"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_virtue_ethics"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_justice"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_care_ethics"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_non_maleficence"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_beneficence"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_justice_principle"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/decision_node.py",
        "evaluate_content"
      ],
      [
        "./ethics/ethics_guard.py",
        "comprehensive_compliance_check"
      ],
      [
        "./ethics/export_report.py",
        "export_comprehensive_ethics_report"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_create_review_context"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_calculate_decision"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_utilitarian"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_deontological"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_virtue_ethics"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_justice"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_care_ethics"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_non_maleficence"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_beneficence"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_justice_principle"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "evaluate_with_policies"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "_evaluate_third_law"
      ],
      [
        "./voice/personality.py",
        "adapt_to_emotion"
      ],
      [
        "./voice/interface.py",
        "_get_voice_parameters"
      ],
      [
        "./voice/voice_system_integrator.py",
        "provide_feedback"
      ],
      [
        "./voice/synthesis.py",
        "synthesize"
      ],
      [
        "./voice/synthesis.py",
        "_synthesize_elevenlabs"
      ],
      [
        "./voice/synthesis.py",
        "_synthesize_coqui"
      ],
      [
        "./voice/synthesis.py",
        "_synthesize_edge_tts"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "_synthesize_coherent_solution"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_apply_symbolic_reasoning"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "process_solution"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "speak_with_emotional_context"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "find_ethical_consensus"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "_generate_optimal_layout"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "analyze"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "create_workflow_fix_pr"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "create_security_fix_pr"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "create_dependency_update_pr"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "create_general_fix_pr"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_python_run"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "_create_batch_pr"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process_cognitive_load"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process_emotional_state"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "determine_widget_animation"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "analyze_social_context"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_synthesize_brain_outputs"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "_synthesize_coherent_solution"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_integrate_results"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_weighted_integration"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_maximal_integration"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_adaptive_integration"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "_weighted_average"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "_symbolic_first"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "_neural_first"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "_confidence_based"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_utilitarian"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_deontological"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_virtue_ethics"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_justice"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_care_ethics"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_non_maleficence"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_beneficence"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_justice_principle"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_transparency"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_privacy"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "coordinate_modules"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "execute_workflow"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "manage_resources"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "route_event"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "_execute_conditional_coordination"
      ],
      [
        "./dream/redirect_justifier.py",
        "justify"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "deliver_dream"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_create_entangled_properties"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "modulate_emotional_state_unified"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_isolate_codreamer_affect_unified"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_regulate_drift_feedback_unified"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_apply_modulation_limits_unified"
      ],
      [
        "./quantum/service.py",
        "consciousness_quantum_bridge"
      ],
      [
        "./quantum/service.py",
        "quantum_superposition"
      ],
      [
        "./quantum/service.py",
        "observe_quantum_like_state"
      ],
      [
        "./quantum/service.py",
        "_execute_quantum_computation"
      ],
      [
        "./quantum/service.py",
        "_create_quantum_entanglement"
      ],
      [
        "./quantum/consensus_system.py",
        "_run_annealing"
      ]
    ],
    "3:bool": [
      [
        "./tools/analysis/generate_function_index.py",
        "_is_lukhas_function"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "_evaluate_rule"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_can_start_task"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "remove_connection"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "_are_merge_compatible"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "_are_connected"
      ],
      [
        "./core/id.py",
        "_verify_emoji_seed"
      ],
      [
        "./core/id.py",
        "_verify_biometrics"
      ],
      [
        "./core/id.py",
        "_verify_sid_puzzle"
      ],
      [
        "./core/id.py",
        "_verify_emergency_gesture"
      ],
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/enhanced_swarm.py",
        "_are_capabilities_related"
      ],
      [
        "./core/fallback_services.py",
        "verify_user_access"
      ],
      [
        "./core/module_registry.py",
        "_check_tier_access"
      ],
      [
        "./core/module_registry.py",
        "register_connection"
      ],
      [
        "./core/monitoring_observability.py",
        "_matches_suppression_rule"
      ],
      [
        "./core/identity_aware_base.py",
        "validate_user_tier"
      ],
      [
        "./core/identity_integration.py",
        "validate_and_log"
      ],
      [
        "./core/security/agi_security.py",
        "check_permission"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "can_allocate"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "verify_verifold_record"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "trigger_dream_replay"
      ],
      [
        "./core/user_interface_manager/text_handler.py",
        "send_message"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "_is_recent"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "register_node_type"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "_load_node"
      ],
      [
        "./core/modules/nias/__init__.py",
        "is_allowed"
      ],
      [
        "./core/data/crud_operations.py",
        "update_diagnostic_session"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "register_engine"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "unregister_engine"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "update_engine_metrics"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_matches_filter"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_validate_engine_access"
      ],
      [
        "./memory/service.py",
        "verify_user_access"
      ],
      [
        "./memory/service.py",
        "check_consent"
      ],
      [
        "./memory/evolution.py",
        "add_evolution_rule"
      ],
      [
        "./memory/emotional.py",
        "check_identity_emotion_cascade"
      ],
      [
        "./memory/distributed_state_manager.py",
        "delete"
      ],
      [
        "./memory/distributed_state_manager.py",
        "set"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_matches_drift_pattern"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_matches_drift_pattern"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_check_memory_access"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_check_memory_ownership"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_matches_query"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "_text_matches"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_is_insightful_combination"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_is_novel_episode_combination"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_detect_rapid_changes"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "verify_proof"
      ],
      [
        "./memory/systems/replay_system.py",
        "seek_to_position"
      ],
      [
        "./memory/systems/memory_recall.py",
        "decrypt_user_file"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "_matches_context"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_types_match"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "_memories_agree"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "update_memory_resonance"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "validate_semantic_preservation"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "check_overlaps"
      ],
      [
        "./memory/systems/memory_encryptor.py",
        "encrypt_user_file"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "check_overlaps"
      ],
      [
        "./memory/systems/simple_memory.py",
        "append_to_shared_memory"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_is_learning_memory"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "applies_to"
      ],
      [
        "./memory/systems/memory_utils.py",
        "validate_memory_access"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "forget"
      ],
      [
        "./identity/interface.py",
        "verify_user_access"
      ],
      [
        "./identity/interface.py",
        "validate_session"
      ],
      [
        "./identity/interface.py",
        "validate_tier"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./identity/auth_backend/qr_entropy_generator.py",
        "validate_qr_scan"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_check_rate_limit"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "check_permission"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_verify_additional_factors"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_sync_to_device"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_check_logging_consent"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_verify_lucidity_claims"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_check_cultural_compatibility"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_verify_quantum_signatures"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_check_tier_biometric_requirements"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_validate_cultural_biometric_context"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_validate_consciousness_biometric_markers"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "validate_consent"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "_validate_tier_consent_access"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "validate_scope_access"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_is_unnatural_emotion_transition"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_detect_temporal_anomalies"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_check_memory_access"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_verify_steganographic_layers"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_verify_identity_embedding"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "should_skip_stage"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "_evaluate_skip_condition"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_validate_challenge_elements"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_validate_emoji_challenge"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_validate_word_challenge"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_validate_biometric_challenge"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_validate_scope_access"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_verify_symbolic_challenge"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_validate_biometric_data"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "validate_permission"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "validate_tier"
      ],
      [
        "./identity/enterprise/auth.py",
        "check_permission"
      ],
      [
        "./identity/enterprise/auth.py",
        "_verify_totp_code"
      ],
      [
        "./identity/enterprise/auth.py",
        "_verify_sms_code"
      ],
      [
        "./identity/enterprise/auth.py",
        "_verify_email_code"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "verify_access"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "validate_entropy_sync"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "update_profile"
      ],
      [
        "./security/hardware_root.py",
        "store_key"
      ],
      [
        "./creativity/service.py",
        "verify_user_access"
      ],
      [
        "./creativity/service.py",
        "check_consent"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_should_continue_thread"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "record_usage"
      ],
      [
        "./bridge/shared_state.py",
        "delete_shared_state"
      ],
      [
        "./learning/service.py",
        "verify_user_access"
      ],
      [
        "./learning/service.py",
        "check_consent"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_component_addresses_need"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_ethical_audit_insight"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_apply_update_to_meta_learning_system"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_ethical_audit_insight"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_apply_update_to_meta_learning_system"
      ],
      [
        "./consciousness/service.py",
        "verify_user_access"
      ],
      [
        "./consciousness/service.py",
        "check_consent"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_matches_pattern"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_is_improvement"
      ],
      [
        "./consciousness/perception/cross_modal_validation.py",
        "validate_modal_agreement"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "_conflicts_similar"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "_detect_discriminatory_pattern"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_emoji_seed"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_biometrics"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_sid_puzzle"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_emergency_gesture"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_are_contradictory_glyphs"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_contradicts_memory"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_matches_contradiction_pattern"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_circular_references"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_elements_related"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_emoji_seed"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_biometrics"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_sid_puzzle"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_emergency_gesture"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_affects_capability"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_affects_capability"
      ],
      [
        "./reasoning/analysis/engine.py",
        "can_analyze"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_elements_related"
      ],
      [
        "./ethics/service.py",
        "verify_user_access"
      ],
      [
        "./ethics/service.py",
        "check_consent"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_check_principle_conditions"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "_check_violation"
      ],
      [
        "./ethics/decision_node.py",
        "set_principle_weight"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "is_applicable"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_glyphs_have_conflicting_ethics"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_affects_capability"
      ],
      [
        "./ethics/bases.py",
        "_check_rule"
      ],
      [
        "./ethics/bases.py",
        "_validate_rule"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_is_recent"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_is_recent"
      ],
      [
        "./voice/voice_profiling.py",
        "record_usage"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_check_rate_limit"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_check_role_suitability"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_elements_related"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_ethical_audit_insight"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_apply_update_to_meta_learning_system"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_assess_publication_readiness"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "_should_override_budget"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "associate_folds"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "tag_fold"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "update_fold_content"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "update_fold_priority"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_match_temporal_pattern"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_match_causal_pattern"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_match_spatial_pattern"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_match_emotional_pattern"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_are_contradictory"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "vocalize_conscience"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "_is_rule_applicable"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_check_semantic_overlap"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "register_integration_method"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "verify_user_access"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "check_consent"
      ],
      [
        "./orchestration/core_modules/symbolic_handshake.py",
        "validate_handshake"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "register_message_handler"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "vocalize_conscience"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "_check_condition"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_is_oscillating_pattern"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_is_oscillating_pattern"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./dream/core/dream_feedback_controller.py",
        "check_drift_event"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_enforce_emotional_safety_unified"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_verify_emotion_ownership"
      ],
      [
        "./quantum/service.py",
        "verify_user_access"
      ],
      [
        "./quantum/service.py",
        "check_consent"
      ],
      [
        "./quantum/vault_manager.py",
        "_verify_qr_authentication"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "_evaluate_proposal"
      ]
    ],
    "2:List[float]": [
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "generate_embedding"
      ],
      [
        "./core/colonies/tensor_colony_ops.py",
        "simulate_throughput"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_extract_symbolic_features"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "_generate_harmonics"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_smooth_series"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_calculate_emotional_tone_vector"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "get_vector"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_generate_embeddings"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_extract_symbolic_features"
      ]
    ],
    "4:str": [
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "_generate_decision_id"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_generate_anomaly_details"
      ],
      [
        "./trace/restabilization_index.py",
        "register_recovery"
      ],
      [
        "./trace/entropy/radar.py",
        "render_trend_graphs"
      ],
      [
        "./core/id.py",
        "lock_memory"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_get_status_emoji"
      ],
      [
        "./core/practical_optimizations.py",
        "store_array"
      ],
      [
        "./core/direct_ai_router.py",
        "route_request"
      ],
      [
        "./core/agi/self_improvement.py",
        "_select_strategy"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "spawn_sub_agent"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "record_collapse_event"
      ],
      [
        "./memory/dashboard.py",
        "_determine_alert_level"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_generate_markdown_report"
      ],
      [
        "./memory/systems/memory_helix.py",
        "_blend_pronunciations"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "create_recovery_protocol"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "store_memory_with_frequency"
      ],
      [
        "./memory/systems/module_integrations.py",
        "_construct_narrative"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_determine_tier_gate"
      ],
      [
        "./identity/qrg_integration.py",
        "_create_consciousness_pattern"
      ],
      [
        "./identity/qrg_integration.py",
        "_create_quantum_pattern"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "generate_lambda_id"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_handle_collision"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_activity"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_apply_cultural_adaptation"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_generate_integrity_hash"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_create_symbolic_representation"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_proof_id"
      ],
      [
        "./creativity/creative_engine.py",
        "_default_expansion"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "create_analysis_phrase"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_quality_indicators"
      ],
      [
        "./bridge/trace_logger.py",
        "trace_symbolic_handshake"
      ],
      [
        "./bridge/trace_logger.py",
        "trace_memory_mapping"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "share_learning_insight"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "share_learning_insight"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_reflection_title"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_reflection_title"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "lock_memory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "lock_memory"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_universalization_reasoning"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_utilitarian_justification"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_universalization_reasoning"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_utilitarian_justification"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_build_decision_rationale"
      ],
      [
        "./ethics/decision_node.py",
        "_generate_explanation"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_universalization_reasoning"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_utilitarian_justification"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_generate_reasoning"
      ],
      [
        "./voice/personality.py",
        "enhance_text_expression"
      ],
      [
        "./voice/voice_system_integrator.py",
        "_select_provider"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "share_learning_insight"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "start_decision_trace"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "_generate_assessment_reasoning"
      ],
      [
        "./governance/core.py",
        "_generate_guardian_signature"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "create_synthesis_phrase"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "create_analysis_phrase"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_quality_indicators"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_reflection_title"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_mutate_symbol"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_generate_state_hash"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_generate_state_hash"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_identify_dominant_theme_name"
      ]
    ],
    "1:List[str]": [
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_generate_recommendations"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "_generate_health_recommendations"
      ],
      [
        "./core/core_hub.py",
        "list_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_service_list"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "_analyze_common_ethical_issues"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "discover_nodes"
      ],
      [
        "./core/interfaces/dashboard/core/fallback_system.py",
        "_get_optimal_features"
      ],
      [
        "./memory/quantum_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/memory_hub.py",
        "list_services"
      ],
      [
        "./memory/unified_memory_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/unified_memory_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_overall_recommendations"
      ],
      [
        "./memory/core/quantum_memory_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "_select_colonies"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_tags"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_generate_meta_learning_insights"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_tags"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "extract_visual_prompts_from_dream"
      ],
      [
        "./memory/systems/memoria/reflector.py",
        "reflect_on_dream_memories"
      ],
      [
        "./identity/identity_hub.py",
        "list_services"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "_get_successful_test_areas"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_symbolic_elements_demo"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_get_qr_recovery_instructions"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_load_weak_patterns"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_load_reserved_combinations"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_analyze_common_ethical_issues"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_analyze_common_ethical_issues"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_dream_symbols"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_check_resource_warnings"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_get_recommended_actions"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_system_recommendations"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_get_recent_dream_symbols"
      ],
      [
        "./reasoning/ethical_reasoning_integration.py",
        "get_supported_frameworks"
      ],
      [
        "./reasoning/ethical_reasoning_integration.py",
        "get_moral_principles"
      ],
      [
        "./reasoning/ethical_reasoning_integration.py",
        "get_stakeholder_types"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_misalignment_risks"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_misalignment_risks"
      ],
      [
        "./ethics/compliance_engine.py",
        "_get_applicable_regulations"
      ],
      [
        "./ethics/redteam_sim.py",
        "parse_prompts_from_file"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_identify_cascade_triggers"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_misalignment_risks"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_active_policies"
      ],
      [
        "./voice/voice_hub.py",
        "list_services"
      ],
      [
        "./orchestration/config/production_config.py",
        "validate"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_optimization_suggestions"
      ],
      [
        "./orchestration/immune/system_watchdog.py",
        "scan"
      ],
      [
        "./orchestration/examples/endocrine_module_example.py",
        "get_modulatable_parameters"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_get_risk_mitigations"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "_get_accountability_measures"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_generate_meta_insights"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_get_active_components"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "list_folds"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_generate_meta_insights"
      ],
      [
        "./api/core/api_hub.py",
        "list_services"
      ],
      [
        "./api/core/api_hub.py",
        "list_endpoints"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "get_endangered_glyphs"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "check_constraints"
      ],
      [
        "./dream/immersive_ingestion.py",
        "_compose_dream"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_resonance_patterns"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_quantum_possibilities"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_recent_inputs"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_narrative_seeds"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_artistic_themes"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_cultural_elements"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_inspiration_sources"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "extract_lambda_tags"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "extract_phase_markers"
      ],
      [
        "./emotion/emotion_hub.py",
        "list_services"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_generate_system_recommendations"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "list_services"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "get_supported_algorithms"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "list_glyphs"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "list_services"
      ]
    ],
    "3:Dict[str, str]": [
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "_categorize_file"
      ],
      [
        "./identity/qrg_showcase.py",
        "_analyze_qrg_adaptation"
      ]
    ],
    "1:dict": [
      [
        "./tools/analysis/duplicate_detector.py",
        "generate_plan"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_plan_memory_consolidation"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_plan_dream_consolidation"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_plan_emotion_consolidation"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_plan_quantum_consolidation"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "_plan_utility_extraction"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "get_config"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "report"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "evaluate_memory_action"
      ],
      [
        "./memory/systems/memory_seeder.py",
        "generate_seed_memory"
      ],
      [
        "./config/validators.py",
        "validate_optional_config"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "map_symbolic_payload_to_memory"
      ],
      [
        "./red_team/__init__.py",
        "get_protocol_summary"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "generate_symbolic_id_summary"
      ],
      [
        "./orchestration/brain/qrl_code/qrly.py",
        "map_emoji_archetypes"
      ],
      [
        "./orchestration/brain/qrl_code/qrly.py",
        "generate_glymph_backstory"
      ],
      [
        "./orchestration/brain/dream_engine/visualizer_core.py",
        "load_latest_flashback"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "report"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "get_current_metrics"
      ],
      [
        "./dream/visualization/visualizer_core.py",
        "load_latest_flashback"
      ],
      [
        "./quantum/system_orchestrator.py",
        "get_dream_adapter_status"
      ],
      [
        "./quantum/system_orchestrator.py",
        "get_voice_enhancer_status"
      ]
    ],
    "1:Path": [
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_get_current_log_file"
      ],
      [
        "./orchestration/brain/config/paths.py",
        "get_path"
      ],
      [
        "./quantum/system.py",
        "_get_metrics_path"
      ]
    ],
    "1:bytes": [
      [
        "./tools/enterprise/health_check_system.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "optimize_swarm_communication"
      ],
      [
        "./core/p2p_communication.py",
        "to_bytes"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "serialize"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_generate_system_key"
      ],
      [
        "./memory/systems/memory_node.py",
        "_generate_encryption_key"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_generate_system_key"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_initialize_crypto_key"
      ],
      [
        "./orchestration/brain/qrl_code/qrly.py",
        "encrypt_qrlymph"
      ],
      [
        "./quantum/web_integration.py",
        "_initialize_quantum_random"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_gather_enhanced_entropy"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_generate_bio_quantum_entropy"
      ],
      [
        "./quantum/vault_manager.py",
        "_generate_or_load_master_key"
      ]
    ],
    "5:str": [
      [
        "./tools/enterprise/observability_system.py",
        "_generate_explanation"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "_categorize_purpose"
      ],
      [
        "./core/ai_interface.py",
        "generate_response"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_classify_io_pattern"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "send_message"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "send_message"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "register_memory"
      ],
      [
        "./memory/systems/memory_node.py",
        "store"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "load_and_get_id"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "create_recovery_link"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "add_concept"
      ],
      [
        "./identity/qrg_integration.py",
        "_create_cultural_pattern"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_generate_id_components"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "record_consent_event"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_generate_business_format"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_generate_enterprise_format"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_generate_corporate_format"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_generate_white_label_format"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "create_symbolic_feedback_loop"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_analytical_reflection"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_analytical_reflection"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "create_proposal"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "send_message"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_analytical_reflection"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "redact_glyph"
      ]
    ],
    "2:pd.DataFrame": [
      [
        "./tools/enterprise/observability_system.py",
        "_prometheus_to_dataframe"
      ],
      [
        "./trace/entropy/radar.py",
        "parse_entropy_logs"
      ],
      [
        "./trace/entropy/radar.py",
        "generate_time_series"
      ]
    ],
    "3:List[float]": [
      [
        "./tools/enterprise/observability_system.py",
        "_get_metric_values_for_duration"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "get_recent_values"
      ]
    ],
    "1:int": [
      [
        "./tools/enterprise/api_framework.py",
        "offset"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "consolidate_dream_systems"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "consolidate_memory_systems"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "consolidate_engines"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/identity/id_manager.py",
        "get_user_tier"
      ],
      [
        "./core/tagging/tagging_system.py",
        "__len__"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_service_count"
      ],
      [
        "./memory/fold_engine.py",
        "_get_required_tier"
      ],
      [
        "./memory/memory_optimization.py",
        "_get_memory_usage"
      ],
      [
        "./memory/memory_optimization.py",
        "__len__"
      ],
      [
        "./memory/memory_optimization.py",
        "memory_usage"
      ],
      [
        "./memory/memory_optimization.py",
        "memory_usage"
      ],
      [
        "./memory/basic.py",
        "size"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__sizeof__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__hash__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "start_time"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "memory_usage"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "get_chain_length"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "content_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "memory_usage"
      ],
      [
        "./memory/systems/memory_utils.py",
        "calculate_memory_size"
      ],
      [
        "./identity/core/tier/tier_system.py",
        "get_user_tier"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "_calculate_total_entropy_bits"
      ],
      [
        "./ethics/redteam_sim.py",
        "__hash__"
      ],
      [
        "./ethics/meg_guard.py",
        "critical_operation"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "upgrade_tier"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "downgrade_tier"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "get_user_tier"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "_get_processing_depth"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_count_active_quarantines"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_count_active_quarantines"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "_get_processing_depth"
      ]
    ],
    "1:float": [
      [
        "./tools/enterprise/security_scanner.py",
        "risk_score"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "__next__"
      ],
      [
        "./bio/core/systems_mitochondria_model.py",
        "energy_output"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_calculate_temporal_stability"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "frequency"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "phase"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "amplitude"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "__next__"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "_calculate_clustering_coefficient"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "_calculate_average_path_length"
      ],
      [
        "./trace/drift_tools.py",
        "overall_health"
      ],
      [
        "./trace/drift_tools.py",
        "recovery_efficiency"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_cpu_tdp"
      ],
      [
        "./core/integrator.py",
        "get_coherence"
      ],
      [
        "./core/integrator.py",
        "get_health"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_calculate_co_occurrence_score"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_calculate_tag_evolution_rate"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_calculate_divergence_rate"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "power_watts"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "remaining_budget"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "budget_percentage_used"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "time_elapsed"
      ],
      [
        "./core/practical_optimizations.py",
        "score"
      ],
      [
        "./core/efficient_communication.py",
        "_calculate_energy_cost"
      ],
      [
        "./core/efficient_communication.py",
        "_calculate_efficiency_score"
      ],
      [
        "./core/monitoring_observability.py",
        "_get_memory_usage"
      ],
      [
        "./core/monitoring_observability.py",
        "_get_gpu_usage"
      ],
      [
        "./core/agi/self_healing.py",
        "_calculate_overall_health"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "calculate_coherence"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "get_usable_energy"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "_calculate_prediction_accuracy"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "_calculate_entropy_slope"
      ],
      [
        "./memory/fold_engine.py",
        "_calculate_initial_importance"
      ],
      [
        "./memory/memory_optimization.py",
        "age_seconds"
      ],
      [
        "./memory/memory_optimization.py",
        "access_frequency"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "calculate_health_score"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "calculate_salience"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "calculate_stability"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "phase_degrees"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_gamma_phase"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "compute_phase_amplitude_coupling"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "calculate_salience"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "success_rate"
      ],
      [
        "./memory/hooks/base.py",
        "calculate_symbolic_weight"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "calculate_stability"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "ttl_seconds"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "max_entries"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "calculate_drift"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "memory_usage_kb"
      ],
      [
        "./memory/systems/memory_processing.py",
        "calculate_relevance"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_calculate_adaptation_progress_metric"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "_get_emotional_stability"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "_check_memory_pressure"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "memory_usage_kb"
      ],
      [
        "./memory/systems/integrity_collapser.py",
        "collapse_score"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "compute_survival_score"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "calculate_duration"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "_calculate_rem_pressure"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "calculate_power"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_calculate_coupling_strength"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "calculate_priority"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "_calculate_healing_capacity"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "calculate_activation_energy"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "calculate_health_score"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "_calculate_fatigue_level"
      ],
      [
        "./creativity/creative_engine.py",
        "_calculate_cache_hit_rate"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "maintain_memory_coherence"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "maintain_phase_resonance"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "validate_reasoning_coherence"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/system.py",
        "_calculate_memory_efficiency"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_calculate_rate_stability"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_calculate_adaptation_speed"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "_calculate_overall_stability"
      ],
      [
        "./learning/learning_system.py",
        "_calculate_memory_efficiency"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_calculate_rate_stability"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_calculate_adaptation_speed"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "_calculate_overall_stability"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_calculate_ethical_variance"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_calculate_symbolic_reasoning_confidence"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_calculate_ethical_variance"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "available"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "_calculate_meta_cognitive_depth"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_calculate_success_rate"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_system_health"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_efficiency"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_safety_score"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_pattern_stability"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_insight_effectiveness"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_dream_integration_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "overall_score"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "stability_score"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_value_drift_rate"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "get_consensus_score"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_value_drift_rate"
      ],
      [
        "./ethics/oscillating_conscience.py",
        "update"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_value_drift_rate"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "calculate_urgency_score"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "phase_harmonics_score"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "calculate_risk_score"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_calculate_system_risk"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_avg_latency"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_error_rate"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_p95_latency"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_calculate_average_api_response_time"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_calculate_error_rate"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_average_modularity"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_assess_entanglement_quality"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_pattern_accuracy"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_optimization_success_rate"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_failure_rate"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_encoding_success_rate"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_syntax_tolerance"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "calculate_quantum_modularity"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_calculate_ethical_variance"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_calculate_convergence"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_measure_collective_performance"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "priority_score"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "get_daily_budget_remaining"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "vulnerability_score"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "overall_vision_score"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "score_node"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_calculate_initial_importance"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_calculate_importance"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_overall_accuracy"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_marginal_likelihood"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "get_calibration_score"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_get_actual_drift_score"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_get_actual_intent_alignment"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_get_actual_emotional_stability"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_get_actual_ethical_compliance"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_calculate_reflection_based_drift"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_simple_drift_heuristic"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_calculate_ethical_compliance_fallback"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "_get_uptime"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "_calculate_avg_awareness"
      ],
      [
        "./symbolic/glyph_engine.py",
        "evaluate_entropy"
      ],
      [
        "./symbolic/glyph_engine.py",
        "evaluate_resonance"
      ],
      [
        "./symbolic/vocabularies/emotion_vocabulary.py",
        "get_guardian_weight"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "_compute_relation_strength"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "age_seconds"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "assess_collapse_risk"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "calculate_coherence"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "calculate_symbolic_density"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "calculate_entropy"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "calculate_emotional_magnitude"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "calculate_entropy"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "get_entropy"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "_get_uptime"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "_calculate_avg_awareness"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_calculate_system_stability_index"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "get_coherence"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "measure_entanglement"
      ],
      [
        "./quantum/bio_components.py",
        "get_coherence"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_calculate_overall_efficiency_score"
      ],
      [
        "./quantum/attention_economics.py",
        "calculate_quantum_value"
      ],
      [
        "./quantum/processing_core.py",
        "_calculate_coherence"
      ],
      [
        "./quantum/core/engine.py",
        "_calculate_coherence"
      ],
      [
        "./quantum/processing/quantum_flux.py",
        "measure_entropy"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "to_probability"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_calculate_coherence"
      ]
    ],
    "4:float": [
      [
        "./tools/enterprise/security_scanner.py",
        "_calculate_secret_confidence"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_calculate_task_suitability"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_apply_context_modulation"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "z_collapse"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_symbolic_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_emotional_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_memory_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_coherence_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_identity_drift"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_analyze_ethical_drift"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_disk_utilization"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_estimate_network_utilization"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "_estimate_operation_energy"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_determine_urgency"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_intervention_leverage"
      ],
      [
        "./memory/dashboard.py",
        "_calculate_system_stability"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_intervention_leverage"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_entropy_contribution"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "track_drift"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_glyph_entropy"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_identity_confidence"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_dream_entropy_delta"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_stability_score"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_calculate_safety_score"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_calculate_optimal_spacing"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_calculate_vote_weight"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_calculate_symbolic_alignment"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_calculate_biometric_match_confidence"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_calculate_cultural_diversity_score"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_archetypal_score"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_calculate_fragment_coherence"
      ],
      [
        "./creativity/engines/engine.py",
        "_calculate_confidence"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_calculate_coordinated_rate"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_calculate_coordinated_rate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "get_float"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_calculate_step_entropy"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_project_entropy"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_project_glyph_harmony"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_project_mesh_stability"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_overall_confidence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_overall_confidence"
      ],
      [
        "./ethics/decision_node.py",
        "_evaluate_principle"
      ],
      [
        "./ethics/decision_node.py",
        "_apply_context_adjustments"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_overall_confidence"
      ],
      [
        "./voice/emotional_modulator.py",
        "_interpolate_param"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_determine_urgency"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_calculate_coordinated_rate"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "estimate_fix_cost"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_calculate_emotional_balance"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_phase_mismatch_score"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_phase_mismatch_score"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "calculate_symbolic_drift"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_symbolic_weight"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_lambda_similarity"
      ],
      [
        "./quantum/consensus_system.py",
        "evaluate"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "_find_simulated_balanced_density"
      ],
      [
        "./quantum/bio_system.py",
        "evaluate_performance"
      ],
      [
        "./quantum/processing_core.py",
        "_calculate_quantum_advantage"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_evaluate_qaoa"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_calculate_quantum_advantage"
      ]
    ],
    "2:Dict[str, any]": [
      [
        "./tools/dev/smart_consolidation.py",
        "analyze_file_purpose"
      ],
      [
        "./ethics/batch_guard.py",
        "generate_ethics_report"
      ]
    ],
    "2:Any": [
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "_generate_parameter_example"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "_extract_literal_value"
      ],
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ],
      [
        "./core/common.py",
        "get_config"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__getattr__"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "get_node"
      ],
      [
        "./core/helpers/__init__.py",
        "safe_json_loads"
      ],
      [
        "./core/base/base_module.py",
        "process"
      ],
      [
        "./memory/memory_optimization.py",
        "acquire_pooled_object"
      ],
      [
        "./memory/visualizer.py",
        "quantum_modulate"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "_create_memory_plot"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "_create_emotion_plot"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "_create_collapse_plot"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_anonymize_data"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_anonymize_data"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_reasoning"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_learning"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_perception"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_planning"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_action"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_reflection"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_decision"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_attention"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_handle_creativity"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_minimal_process"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "quantum_modulate"
      ],
      [
        "./ethics/security/secure_utils.py",
        "safe_eval"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_anonymize_data"
      ],
      [
        "./governance/common.py",
        "process"
      ]
    ],
    "0:dict": [
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "get_supported_formats"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "get_version_info"
      ],
      [
        "./bridge/llm_wrappers/env_loader.py",
        "get_openai_config"
      ],
      [
        "./bridge/llm_wrappers/env_loader.py",
        "get_azure_openai_config"
      ],
      [
        "./ethics/community_feedback.py",
        "load_rules"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "get_metrics"
      ]
    ],
    "2:Optional[str]": [
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "_extract_return_annotation"
      ],
      [
        "./core/distributed_tracing.py",
        "get_baggage_item"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_estimate_completion_time"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_estimate_start_time"
      ],
      [
        "./core/telemetry/monitoring.py",
        "_create_pattern_signature"
      ],
      [
        "./core/user_interface_manager/text_handler.py",
        "get_message"
      ],
      [
        "./core/user_interface_manager/voice_handler.py",
        "listen"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_extract_timestamp_from_content"
      ],
      [
        "./memory/systems/replay_system.py",
        "create_sequence"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_encrypt_data"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_extract_concept"
      ],
      [
        "./identity/core/qrs_manager.py",
        "get_lambda_id_from_public_hash"
      ],
      [
        "./identity/core/qrs_manager.py",
        "get_lambda_id_from_qrg"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_categorize_emoji"
      ],
      [
        "./bridge/openai_core_service.py",
        "_get_cache_key"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_check_self_model_update"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_extract_pattern"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "export_ethics_report"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "_find_suitable_agent"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_resolve_module_name"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "_get_keychain_value"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "export_radar_analytics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "create_bio_quantum_radar"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "trigger_dream_simulation"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "get_glyph_sensitivity"
      ],
      [
        "./dream/core/dream_limiter.py",
        "_dominant_emotion"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "_find_origin_dream"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "_find_origin_dream"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_get_remediation_action"
      ]
    ],
    "2:Dict[str, float]": [
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/stress_signal.py",
        "weight_modulator"
      ],
      [
        "./bio/curiosity_spark.py",
        "weight_modulator"
      ],
      [
        "./bio/trust_binder.py",
        "process_affect"
      ],
      [
        "./bio/resilience_boost.py",
        "weight_modulator"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_get_task_performance_modulation"
      ],
      [
        "./bio/stability_anchor.py",
        "weight_modulator"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_apply_temporal_evolution"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_temporal_features"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_environmental_features"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_activity_features"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_historical_features"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_symbolic_features"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "bio_drift_response"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_get_user_baseline"
      ],
      [
        "./core/personality/personality.py",
        "get_interaction_style"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "_calculate_decision_distribution"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_find_correlations"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_extract_attention_metrics"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "_extract_emotional_indicators"
      ],
      [
        "./memory/evolution.py",
        "_calculate_adaptive_features"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_stability_metrics"
      ],
      [
        "./memory/memory_fold.py",
        "get_emotional_neighborhood"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_analyze_valence_trends"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "activate_concept_network"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_encode_spatial_context"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_stability_metrics"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "assess_memory_drift"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_emotional_delta"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "get_stage_duration"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_extract_consciousness_patterns"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_analyze_emotional_content"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_extract_consciousness_markers"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_identify_archetypal_content"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "validate_randomness"
      ],
      [
        "./creativity/emotional_resonance.py",
        "modulate_voice_parameters"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_stability_metrics"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_recommend_parameter_adjustments"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_assess_dream_emotional_processing"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_extract_values_from_text"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_strategy_effectiveness"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "compare_to_baseline"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_extract_values_from_text"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_assess_risks"
      ],
      [
        "./ethics/decision_node.py",
        "_select_framework"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_extract_values_from_text"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_calculate_jurisdictional_scores"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_get_known_module_scores"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_calculate_alignment_with_principles"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_estimate_carbon_impact"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_compute_quality_metrics"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_assess_emotional_regulation"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_assess_social_readiness"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_assess_all_apps"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_get_metrics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_extract_quantum_metrics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_extract_bio_oscillation_metrics"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "get_priority_weights"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_extract_emotional_context"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_extract_emotional_context"
      ],
      [
        "./dream/dream_data_sources.py",
        "_calculate_dream_parameters"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_generate_thematic_emotions"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_analyze_cluster_emotional_tone"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_analyze_emotional_patterns"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_analyze_text_for_voice_adjustments"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_analyze_valence_trends"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_extract_quantum_features"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_optimize_mitochondrial_function"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_optimize_membrane_potential"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_optimize_proton_gradient"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_optimize_atp_synthesis"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "_calculate_current_performance_metrics"
      ],
      [
        "./quantum/consensus_system.py",
        "_get_mode_weights"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "estimate_costs"
      ]
    ],
    "0:float": [
      [
        "./bio/bio_utilities.py",
        "fatigue_level"
      ],
      [
        "./bio/bio_homeostasis.py",
        "fatigue_level"
      ]
    ],
    "3:Dict[str, float]": [
      [
        "./bio/bio_engine.py",
        "_calculate_adaptation"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_process_quantum_superposition"
      ],
      [
        "./core/personality/personality.py",
        "get_etiquette_adjustments"
      ],
      [
        "./memory/memory_fold.py",
        "get_emotional_neighborhood"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "privatize_histogram"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "compute_separation_quality"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_calculate_trajectory_stats"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_performance_metrics"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_cognitive_state"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_extract_attention_patterns"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_boost_factors"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "_extract_emotional_correlations"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_calculate_glyph_quality"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_alignment_gradients"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_emotion_gradients"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_influence_strengths"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "validate_voice_parameters"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_calculate_entity_changes"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "decompose_uncertainty"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "calculate_volatility_index"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_emotional_profile"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_assess_fusion_risks"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_estimate_emotional_impact"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_calculate_correlation_factors"
      ]
    ],
    "1:Dict[str, float]": [
      [
        "./bio/bio_engine.py",
        "_calculate_state_distribution"
      ],
      [
        "./bio/simulation_controller.py",
        "get_hormone_state"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "_calculate_performance"
      ],
      [
        "./bio/core/hormonal_system.py",
        "get_hormone_levels"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "analyze_topology"
      ],
      [
        "./bio/embodiment/body_state.py",
        "to_dict"
      ],
      [
        "./trace/drift_tools.py",
        "to_dict"
      ],
      [
        "./trace/entropy/radar.py",
        "calculate_module_entropy"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_calculate_efficiency_metrics"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_initialize_thresholds"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_analyze_entropy_distribution"
      ],
      [
        "./memory/systems/integration_example.py",
        "_analyze_attention_patterns"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_tier_compliance_rates"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_pattern_weights"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "coordinate_learning_rates"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "coordinate_learning_rates"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_calculate_performance_metrics"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "calculate_consciousness_metrics"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_generate_dream_emotion"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_init_symbolic_map"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_init_symbolic_map"
      ],
      [
        "./consciousness/core/engine.py",
        "_init_symbolic_map"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_analyze_buffered_bio_metrics"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "_analyze_buffered_quantum_like_states"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_adaptation_trend"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "to_dict"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_initialize_specialization"
      ],
      [
        "./ethics/decision_node.py",
        "_initialize_principles"
      ],
      [
        "./ethics/decision_node.py",
        "_healthcare_principles"
      ],
      [
        "./ethics/decision_node.py",
        "_finance_principles"
      ],
      [
        "./ethics/decision_node.py",
        "_content_moderation_principles"
      ],
      [
        "./ethics/decision_node.py",
        "get_principle_weights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "coordinate_learning_rates"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "to_dict"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "get_mood_harmonics"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "_initialize_bot_metrics"
      ]
    ],
    "2:Optional[Any]": [
      [
        "./bio/bio_hub.py",
        "get_service"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "get_service"
      ],
      [
        "./core/core_hub.py",
        "get_service"
      ],
      [
        "./core/enhanced_swarm.py",
        "recall"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_service"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "get_service"
      ],
      [
        "./memory/memory_hub.py",
        "get_service"
      ],
      [
        "./memory/memory_optimization.py",
        "get"
      ],
      [
        "./memory/memory_optimization.py",
        "retrieve"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_restore_key_from_events"
      ],
      [
        "./memory/basic.py",
        "recall"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "retrieve"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "_get_from_cache"
      ],
      [
        "./memory/systems/memory_bases.py",
        "retrieve"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "decode_from_dna"
      ],
      [
        "./identity/identity_hub.py",
        "get_service"
      ],
      [
        "./learning/learning_hub.py",
        "get_service"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "get_service"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "get_service"
      ],
      [
        "./voice/voice_hub.py",
        "get_service"
      ],
      [
        "./orchestration/service_registry.py",
        "get_service"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "get_service"
      ],
      [
        "./api/core/api_hub.py",
        "get_service"
      ],
      [
        "./api/core/api_hub.py",
        "get_endpoint"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "get_service"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "get_attribute"
      ],
      [
        "./emotion/emotion_hub.py",
        "get_service"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "get_service"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "get_service"
      ]
    ],
    "3:List[Dict[str, Any]]": [
      [
        "./bio/endocrine_daily_operations.py",
        "_select_suitable_tasks"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_identify_bottlenecks"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_generate_recommendations"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "compare_states"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "compare_states"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "get_collapse_history"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "search_dreams"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "get_relevant_memories"
      ],
      [
        "./memory/voice_memory_manager.py",
        "get_relevant_memories"
      ],
      [
        "./memory/memory_fold.py",
        "recall_memory_folds"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "recall_by_glyphs"
      ],
      [
        "./memory/node.py",
        "semantic_search"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_filter_by_time_window"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "get_memory_by_causal_link"
      ],
      [
        "./memory/systems/memory_node.py",
        "retrieve_by_type"
      ],
      [
        "./memory/systems/memory_node.py",
        "semantic_search"
      ],
      [
        "./memory/systems/memory_helix_visualizer.py",
        "get_authorized_memories"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_generate_dream_insights"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_identify_learning_phases"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "_identify_critical_moments"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "get_interaction_history"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "load_recent_dream_logs"
      ],
      [
        "./memory/systems/memoria/reflector.py",
        "load_dream_memories_from_log"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "_detect_coherence_anomalies"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "query_integrated_knowledge"
      ],
      [
        "./bridge/shared_state.py",
        "get_change_history"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "get_conversation_messages"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "issue_oracular_warnings"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_potential_harms"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_identify_causal_elements"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_extract_simplified_reasoning_path"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_apply_deduction"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_build_causal_chain"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_generate_associations"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_potential_harms"
      ],
      [
        "./ethics/decision_node.py",
        "_identify_content_issues"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_potential_harms"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "monitor_entanglement"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "get_relevant_memories"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_build_audit_trail"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_build_institutional_audit_trail"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "get_authorized_memories"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "find_resonant_memories"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_merge_pattern_matches"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get_top_stats"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "compare_snapshots"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "_cross_validate_insights"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_get_user_emotional_memories"
      ]
    ],
    "2:Dict[str, Dict[str, float]]": [
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_get_base_thresholds"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_apply_ab_tests"
      ]
    ],
    "1:Dict[str, Dict[str, Any]]": [
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "_load_user_calibration"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_initialize_fuzzy_boundaries"
      ],
      [
        "./core/practical_optimizations.py",
        "get_all_metrics"
      ],
      [
        "./core/module_registry.py",
        "register_core_connections"
      ],
      [
        "./core/hub_services/service_registry.py",
        "list_services"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "get_colony_stats"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_initialize_access_policies"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "get_memory_usage_by_category"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_initialize_strategies"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_initialize_access_policies"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "get_memory_usage_by_category"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "get_active_tensors"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_initialize_regional_preferences"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "_load_emoji_cultural_mappings"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_gather_federation_convergence_signals"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_gather_federation_convergence_signals"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_load_entropy_logs"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_load_memory_fold_logs"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_load_trace_logs"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_policy_metrics"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_all_orchestrator_status"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_gather_federation_convergence_signals"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "to_dict"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "get_active_sessions"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_initialize_cultural_symbols"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_initialize_fusion_patterns"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_initialize_mutation_strategies"
      ]
    ],
    "1:List[Dict[str, Any]]": [
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "_get_active_tasks"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "identify_bottlenecks"
      ],
      [
        "./core/enhanced_swarm.py",
        "detect_emergent_patterns"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "_analyze_risk_trends"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "_analyze_harm_trends"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "_simulate_meta_learning_system_discovery"
      ],
      [
        "./core/modules/nias/__init__.py",
        "get_pending_dreams"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_identify_common_drift_patterns"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_identify_common_drift_patterns"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_detect_information_loss"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_detect_phase_gaps"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_detect_integrity_breaks"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_cascade_patterns"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "_get_fallback_consolidation_candidates"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "get_checkpoint_history"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "load_all_entries"
      ],
      [
        "./identity/qrg_showcase.py",
        "_create_demo_user_profiles"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "list_profiles"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_simulate_meta_learning_system_discovery"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_simulate_meta_learning_system_discovery"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "receive_federation_updates"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_collaborative_reasoning_insights"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_discover_federation_patterns"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_federation_ethical_audit"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "receive_federation_updates"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_collaborative_reasoning_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_discover_federation_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_federation_ethical_audit"
      ],
      [
        "./consciousness/service.py",
        "_get_cognitive_trace_summary_internal"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_emotional_patterns"
      ],
      [
        "./ethics/meg_bridge.py",
        "get_human_review_queue"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_initialize_council"
      ],
      [
        "./voice/voice_profiling.py",
        "list_profiles"
      ],
      [
        "./voice/voice_system_integrator.py",
        "get_available_profiles"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "export_message_log"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "get_consensus_history"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "receive_federation_updates"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_collaborative_reasoning_insights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_discover_federation_patterns"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_federation_ethical_audit"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "get_evolution_history"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "get_identity_evolution"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "process_ready_batches"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "_fetch_github_notifications"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "get_all_repositories"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "_initialize_council"
      ],
      [
        "./orchestration/core_modules/symbolic_handshake.py",
        "get_emotion_state_history"
      ],
      [
        "./symbolic/glyph_engine.py",
        "detect_attractors"
      ],
      [
        "./dream/redirect_trace_replayer.py",
        "_load_log_entries"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_load_sample_data"
      ],
      [
        "./quantum/certificate_manager.py",
        "get_all_certificates_status"
      ]
    ],
    "2:List[Tuple[str, str]]": [
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_find_related_glyphs"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "generate_proof"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "detect_instability"
      ]
    ],
    "4:List[Dict[str, Any]]": [
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_classify_anomalies"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "get_messages"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "retrieve_by_glyph_affect"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_drift_events"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_synthesize_collapse_events"
      ],
      [
        "./memory/systems/memory_recall.py",
        "recall_memories"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "recall_by_glyph"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "retrieve_by_resonance"
      ],
      [
        "./memory/systems/agent_memory.py",
        "_read_memory_internal"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_generate_recommendations"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_drift_cascade_conflicts"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_emotion_recursion_conflicts"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_glyph_deterioration_conflicts"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_mesh_instability_conflicts"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_logical_elements"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_generate_implementation_timeline"
      ],
      [
        "./ethics/compliance_engine.py",
        "get_audit_trail"
      ],
      [
        "./ethics/redteam_sim.py",
        "run_redteam_simulation"
      ],
      [
        "./ethics/decision_node.py",
        "_generate_alternatives"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "find_emotionally_similar_memories"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "get_recent_traces"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_extract_reasoning_trace"
      ]
    ],
    "4:List[float]": [
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "_prepare_feature_vector"
      ],
      [
        "./memory/core.py",
        "compute_attention_scores"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "compute_attention_scores"
      ]
    ],
    "4:Dict[str, float]": [
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_calculate_fuzzy_activations"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "activate_concept"
      ],
      [
        "./voice/emotional_modulator.py",
        "adapt_to_user_emotion"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_analyze_current_usage"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_calculate_unified_confidence"
      ]
    ],
    "2:List[Tuple[str, float]]": [
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_select_final_glyphs"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "get_linked_memories"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_trace_emotional_arc"
      ],
      [
        "./dream/dream_data_sources.py",
        "_get_dominant_emotions"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_find_related_emotions"
      ]
    ],
    "5:float": [
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "drift_score"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_efficiency_score"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "_calculate_distance"
      ],
      [
        "./core/services/location/tracker.py",
        "_calculate_distance"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "_calculate_entity_confidence"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_calculate_detection_resistance"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_calculate_path_confidence"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_symbol_similarity"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "_calculate_harmony_score"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_calculate_harmony_score"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_calculate_pattern_match"
      ]
    ],
    "3:bytes": [
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "_digest_component"
      ],
      [
        "./core/id.py",
        "_generate_emotional_key"
      ],
      [
        "./core/security/agi_security.py",
        "_simple_xor"
      ],
      [
        "./memory/memory_optimization.py",
        "decompress"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_decrypt_data"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "derive_authentication_key"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "quantum_safe_decrypt"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_encrypt_with_password"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_decrypt_with_password"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_generate_quantum_seed"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_encrypt_identity_data"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_decrypt_identity_data"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_encrypt_hidden_data"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_emotional_key"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_emotional_key"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "_digest_component"
      ],
      [
        "./quantum/web_integration.py",
        "_xor_encrypt"
      ]
    ],
    "3:np.ndarray": [
      [
        "./bio/core/symbolic_quantum_attention.py",
        "process"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_apply_phase_adjustment"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "process"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_calculate_drift_vector"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_calculate_drift_vector"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_calculate_importance_weights"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "_softmax"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "compute_temporal_bias"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_fractal_pattern"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_blend_consciousness_colors"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_encode_consciousness_data"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_overlay_dream_patterns"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_simulate_steganographic_embedding"
      ],
      [
        "./creativity/creative_q_expression.py",
        "_compute_personalization_vector"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_propose_quantum_like_state"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_similarity_matrix"
      ],
      [
        "./quantum/bio.py",
        "_compute_simulated_quantum_interference"
      ],
      [
        "./quantum/bio.py",
        "_calculate_plasticity_delta_signal"
      ],
      [
        "./quantum/consensus_system.py",
        "_quantum_perturbation"
      ],
      [
        "./quantum/bio_system.py",
        "_compute_quantum_interference"
      ],
      [
        "./quantum/bio_system.py",
        "_calculate_plasticity_delta"
      ],
      [
        "./quantum/core/engine.py",
        "_process_entanglement"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_prepare_variational_state"
      ]
    ],
    "3:dict": [
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "assess_alignment"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "revoke_consent"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "get_scope_requirements"
      ],
      [
        "./orchestration/learning_initializer.py",
        "get_learning_metrics"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "_encrypt_record"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "assess_alignment"
      ],
      [
        "./dream/core/dream_feedback_controller.py",
        "trigger_redirection"
      ]
    ],
    "1:List[SymbolicNode]": [
      [
        "./bio/optimization/crista_optimizer.py",
        "high_error_nodes"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "high_error_nodes"
      ]
    ],
    "1:List[Tuple[SymbolicNode, SymbolicNode]]": [
      [
        "./bio/optimization/crista_optimizer.py",
        "low_activity_pairs"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "low_activity_pairs"
      ]
    ],
    "2:OptimizationMode": [
      [
        "./bio/optimization/crista_optimizer.py",
        "recommend_optimization"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "recommend_optimization"
      ]
    ],
    "3:Tuple[float, float, float]": [
      [
        "./bio/optimization/symbolic_network.py",
        "_calculate_child_position"
      ],
      [
        "./dream/visualization/memoryscape_viewport.py",
        "_coords_for_dream"
      ]
    ],
    "5:bool": [
      [
        "./bio/optimization/symbolic_network.py",
        "add_connection"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "register_node"
      ],
      [
        "./memory/systems/memory_node.py",
        "update_memory"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "add_dream_fragment"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "set_user_tier"
      ],
      [
        "./bridge/shared_state.py",
        "_check_access"
      ],
      [
        "./bridge/shared_state.py",
        "_resolve_conflict"
      ],
      [
        "./bridge/shared_state.py",
        "subscribe"
      ],
      [
        "./bridge/shared_state.py",
        "rollback_to_version"
      ],
      [
        "./learning/federated_meta_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated_learning_system.py",
        "contribute_gradients"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "register_node"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "register_node"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "vote_on_proposal"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "register_service"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "register_node"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "contribute_gradients"
      ],
      [
        "./symbolic/loop_engine.py",
        "_symbol_in_pattern"
      ]
    ],
    "2:Dict[str, int]": [
      [
        "./bio/optimization/topology_manager.py",
        "_bfs_distances"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_analyze_dominant_emotions"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_severity_distribution"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_event_type_distribution"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_temporal_distribution"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "_analyze_test_distribution"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_entropy_distribution"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "_count_trust_relationships"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_emotion_transitions"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "_summarize_by_level"
      ],
      [
        "./ethics/export_report.py",
        "_group_violations_by_severity"
      ],
      [
        "./ethics/export_report.py",
        "_group_violations_by_attribute"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_get_phase_distribution"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_analyze_dominant_emotions"
      ]
    ],
    "1:go.Figure": [
      [
        "./trace/drift_dashboard_visual.py",
        "create_component_traces"
      ],
      [
        "./trace/drift_dashboard_visual.py",
        "create_alert_timeline"
      ],
      [
        "./ethics/sentinel/ethical_sentinel_dashboard.py",
        "create_risk_gauge"
      ],
      [
        "./ethics/sentinel/ethical_sentinel_dashboard.py",
        "create_violation_timeline"
      ],
      [
        "./ethics/sentinel/ethical_sentinel_dashboard.py",
        "create_symbol_health_charts"
      ]
    ],
    "1:Optional[float]": [
      [
        "./trace/drift_tools.py",
        "time_to_recovery"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "predict_next"
      ]
    ],
    "2:dict": [
      [
        "./trace/vdf.py",
        "generate_vdf_proof"
      ],
      [
        "./trace/vdf.py",
        "vdf_for_log"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./trace/restabilization_index.py",
        "summarize_restabilization"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "get_consent_status"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "bridge_dream_to_memory"
      ],
      [
        "./ethics/monitor.py",
        "self_reflection_report"
      ],
      [
        "./ethics/engine.py",
        "evaluate"
      ],
      [
        "./ethics/security/security_engine.py",
        "validate_request"
      ],
      [
        "./orchestration/agents/builtin/codex.py",
        "parse_query"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "_decrypt_record"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "boost_memory"
      ],
      [
        "./orchestration/brain/qrl_code/qrly.py",
        "decrypt_qrlymph"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "evaluate_proposal"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "summarize_drift"
      ],
      [
        "./dream/engine/dream_engine.py",
        "run_adversarial_simulation"
      ]
    ],
    "3:LoopType": [
      [
        "./trace/drift_dashboard.py",
        "detect"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "_determine_loop_type"
      ]
    ],
    "2:Dict[str, List[str]]": [
      [
        "./trace/entropy/radar.py",
        "collect_sid_hashes"
      ],
      [
        "./memory/memory_fold.py",
        "create_emotion_clusters"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "reconstruct_symbolic_linkage"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_categorize_tags"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "_map_all_jurisdiction_rights"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_map_subject_rights"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_categorize_tags"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "cluster_motifs_by_similarity"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_generate_interpretations"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_group_related_modules"
      ]
    ],
    "2:Optional[Dict[str, Any]]": [
      [
        "./trace/entropy/radar.py",
        "_extract_entropy_data"
      ],
      [
        "./core/distributed_tracing.py",
        "get_trace"
      ],
      [
        "./core/cluster_sharding.py",
        "get_actor_state"
      ],
      [
        "./core/task_manager.py",
        "get_task_status"
      ],
      [
        "./core/identity_aware_base.py",
        "get_user_context"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "get_state"
      ],
      [
        "./memory/emotional.py",
        "get_associated_emotion"
      ],
      [
        "./memory/node.py",
        "retrieve"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "get_quarantine_status"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_next_memory"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_session_status"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "get_memory_by_id"
      ],
      [
        "./memory/systems/memory_node.py",
        "retrieve"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_get_dream_summary"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_load_memory"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "get_session_info"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_run_real_onboarding"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "get_tier_information"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_get_tier_info"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "get_user_profile"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "decode_from_payload"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "_extract_consciousness_markers"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "get_component_health_details"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "get_qrg_for_lambda_id"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "get_profile_summary"
      ],
      [
        "./bridge/shared_state.py",
        "get_user_info"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "get_cached_summary"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "get_stabilizer"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "get_proposal"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "get_request_status"
      ],
      [
        "./orchestration/config/migration_router.py",
        "get_shadow_summary"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "get_decision_status"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "get_reviewer_workload"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "get_trace_by_id"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "get_proposal"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "get_agent_status"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "get_patterns"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "get_decay_status"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "get_field_status"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "get_dream_glyph_lineage"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "check_and_redirect"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "preemptive_stabilize"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_get_emotional_state"
      ],
      [
        "./emotion/affect_detection/affect_stagnation_detector.py",
        "check_for_stagnation"
      ],
      [
        "./quantum/certificate_manager.py",
        "get_certificate_status"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "get_glyph_state"
      ]
    ],
    "4:List[str]": [
      [
        "./trace/drift/unified_drift_system.py",
        "_generate_recommendations"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "broadcast_message"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "broadcast_message"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "_generate_health_recommendations"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "_apply_protection_measures"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_check_safeguards"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "get_safe_emoji_suggestions"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_generate_recommendations"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_generate_live_suggestions"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "suggest_alternative_emojis"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_generate_suggestions"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_generate_warnings"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_generate_entropy_recommendations"
      ],
      [
        "./bridge/shared_state.py",
        "get_keys_by_prefix"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_lambda_tags"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_lambda_tags"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_detect_path_contradictions"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_uncertainty_factors"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_mitigation_strategies"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_uncertainty_factors"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_mitigation_strategies"
      ],
      [
        "./ethics/export_report.py",
        "_generate_governance_recommendations"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_generate_mutation_recommendations"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_generate_fusion_recommendations"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_uncertainty_factors"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_mitigation_strategies"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_generate_cognitive_recommendations"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_identify_learning_opportunities"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_lambda_tags"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_identify_risk_factors"
      ]
    ],
    "1:Dict[str, Dict[str, float]]": [
      [
        "./trace/diagnostics/entropy_radar.py",
        "load_brief_metrics"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_tier_thresholds"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_boost_factors"
      ]
    ],
    "3:Path": [
      [
        "./trace/diagnostics/entropy_radar.py",
        "render_entropy_radar"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "save_dream_to_log"
      ]
    ],
    "4:Dict": [
      [
        "./trace/diagnostics/diagnostic_payloads.py",
        "create_diagnostic_payload"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_apply_learning_strategy"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_evaluate_strategy_performance"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "generate_sso_token"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "validate_token"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "authenticate_with_biometric_fallback"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "sync_tokens_across_devices"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "upgrade_tier"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_apply_strategy"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_evaluate_performance"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_apply_strategy"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_evaluate_performance"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "get_dict"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_synthesize_results"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_apply_strategy"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_evaluate_performance"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_apply_optimization_action"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_apply_strategy"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_evaluate_performance"
      ]
    ],
    "1:logging.Logger": [
      [
        "./core/integration_hub.py",
        "_setup_logger"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "_setup_logger"
      ],
      [
        "./identity/auth_utils/shared_logging.py",
        "get_logger"
      ],
      [
        "./orchestration/base.py",
        "_setup_logging"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "_setup_visionary_logging"
      ]
    ],
    "2:IntegrationResult": [
      [
        "./core/integration_hub.py",
        "unregister_component"
      ],
      [
        "./core/integration_hub.py",
        "create_data_pipeline"
      ],
      [
        "./core/integration_hub.py",
        "import_configuration"
      ]
    ],
    "2:List[Dict[str, Any]]": [
      [
        "./core/resource_efficiency_analyzer.py",
        "_check_io_bottlenecks"
      ],
      [
        "./core/distributed_tracing.py",
        "get_traces_by_operation"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_generate_synthetic_dreams"
      ],
      [
        "./core/module_registry.py",
        "list_modules"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "get_cycle_trace"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "_get_most_used_methods"
      ],
      [
        "./core/agi/self_healing.py",
        "_detect_failure_patterns"
      ],
      [
        "./core/symbolic_diagnostics/trace_repair_engine.py",
        "repair_trace"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_find_cycles"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "get_recorded_dreams"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_check_ethical_issues"
      ],
      [
        "./memory/voice_memory_manager.py",
        "get_user_interactions"
      ],
      [
        "./memory/fold_engine.py",
        "_detect_recurring_motifs"
      ],
      [
        "./memory/emotional.py",
        "get_emotional_history"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_identify_critical_points"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_identify_intervention_points"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "get_dream_flagged"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "_analyze_transitions"
      ],
      [
        "./memory/node.py",
        "retrieve_recent"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_load_file_snapshots"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_detect_drift_anomalies"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_build_forensic_timeline"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_identify_recovery_opportunities"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_analyze_memory_combinations"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_find_novel_combinations"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "get_lineage"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_identify_critical_points"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_identify_intervention_points"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_analyze_common_patterns"
      ],
      [
        "./memory/systems/memory_node.py",
        "retrieve_recent"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "get_memory_timeline"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "get_memory_timeline"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "_extract_patterns"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "get_dream_insights"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "find_dreams_by_memory"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "get_collapse_history"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_get_recent_memories"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_get_fallback_logs"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "get_access_logs"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "get_access_logs"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_generate_particles"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_detect_coherence_periods"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_get_personalized_symbolic_suggestions"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "query_knowledge"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_find_relevant_success_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_detect_cycles"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_analyze_dream_patterns"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_identify_coherence_issues"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "detect_upcoming_conflict_zones"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_premises"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_find_novel_connections"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_trace_decision_path"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_generate_synthetic_log_data"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "_check_ethical_issues"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "get_conversation_history"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_detect_tag_conflicts"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_prepare_constraint_penalties"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "_get_available_widgets"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_detect_patterns"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_apply_symbolic_rules"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "analyze_notification_patterns"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "get_unreviewed_prs"
      ],
      [
        "./orchestration/brain/cognitive/voice_engine.py",
        "_generate_adaptations"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "map_helix_from_memory"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_search_episodic"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_search_semantic"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_search_procedural"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_search_emotional"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_extract_brain_performance"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_extract_patterns"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_find_memory_relationships"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "find_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "_find_property_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "_find_relationship_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "recognize_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_symbolic_pattern_match"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_neural_pattern_extract"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_extract_patterns"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "_identify_violations"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "_group_similar_patterns"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "get_remediation_history"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "list_plugins"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "detect_integration_conflicts"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "get_collapse_history"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "execute_post_recall_hooks"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "get_trace"
      ],
      [
        "./dream/core/dream_engine.py",
        "_extract_dream_insights"
      ],
      [
        "./dream/core/dream_limiter.py",
        "filter_dreams"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "_extract_dream_insights"
      ],
      [
        "./dream/cli/dream_processor.py",
        "_group_similar_patterns"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_extract_patterns"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_find_memory_relationships"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_analyze_transitions"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_generate_synthetic_emotional_data"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_generate_archetype_alerts"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_animation_sequence"
      ]
    ],
    "4:bool": [
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/integrator.py",
        "subscribe_to_event"
      ],
      [
        "./core/integrator.py",
        "check_permission"
      ],
      [
        "./core/monitoring_observability.py",
        "_compare_values"
      ],
      [
        "./core/identity_aware_base.py",
        "check_user_consent"
      ],
      [
        "./core/identity_aware_base.py",
        "check_resource_availability"
      ],
      [
        "./core/identity_aware_base.py",
        "consume_resource"
      ],
      [
        "./core/service_discovery.py",
        "register_service_globally"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_verify_signature"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "establish_relationship"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "update_engine_status"
      ],
      [
        "./memory/emotional.py",
        "_check_for_affect_loop"
      ],
      [
        "./memory/memory_fold.py",
        "validate_access"
      ],
      [
        "./memory/systems/replay_system.py",
        "add_memory_timestamp"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "_is_consistent_with_anchor"
      ],
      [
        "./memory/systems/memory_identity.py",
        "verify_access_permission"
      ],
      [
        "./memory/systems/memory_identity.py",
        "share_memory"
      ],
      [
        "./memory/systems/memory_identity.py",
        "revoke_memory_access"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "protect_identity_anchor"
      ],
      [
        "./memory/systems/agent_memory.py",
        "_append_memory_internal"
      ],
      [
        "./memory/systems/memory_encryptor.py",
        "encrypt_memory"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "allocate_tensor"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "_check_consistency"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "create_memory_link"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "_evaluate_conditions"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_verify_access"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "verify_entropy_packet"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "verify_signature"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_should_approve_context_dependent"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "elevate_user_tier"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_verify_quantum_signature"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "_should_enhance_text"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_should_enhance_text"
      ],
      [
        "./bridge/shared_state.py",
        "subscribe_to_state"
      ],
      [
        "./bridge/shared_state.py",
        "delete_state"
      ],
      [
        "./bridge/shared_state.py",
        "unsubscribe"
      ],
      [
        "./learning/federated_learning_system.py",
        "update_with_gradients"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "remember"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_should_enhance_text"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "check_access"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_inject_stabilizer"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_check_constraint_violation"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_access"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_data_access_permission"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_check_consent_level"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "register_agent"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "update_task_progress"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "complete_task"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "deregister_service"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_should_enhance_text"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "verify_access_permission"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "share_memory"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "revoke_memory_access"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "check_access"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "set"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "register_component"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "subscribe_to_events"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "_check_action_permitted"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "register_glyph"
      ]
    ],
    "5:Dict[str, Any]": [
      [
        "./core/integrator.py",
        "send_message_to_component"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "dispatch_message"
      ],
      [
        "./memory/service.py",
        "store_memory"
      ],
      [
        "./memory/fold_engine.py",
        "fold_dream_experience"
      ],
      [
        "./memory/memory_fold.py",
        "create_memory_fold"
      ],
      [
        "./memory/fold_system/foldout.py",
        "export_folds"
      ],
      [
        "./memory/fold_system/foldout.py",
        "export_folds_streaming"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "compress_memory_delta"
      ],
      [
        "./memory/systems/tier_system.py",
        "elevate_session"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_dream_drift_metrics"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_validate_single_emoji"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_calculate_optimal_layout"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_embed_quantum_lsb"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_embed_multi_layer"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "validate_id"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "calculate_entropy"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "request_tier_upgrade"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_compliance_proof"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_safety_proof"
      ],
      [
        "./creativity/service.py",
        "generate_emotional_content"
      ],
      [
        "./creativity/service.py",
        "collaborate_creatively"
      ],
      [
        "./creativity/service.py",
        "_generate_creative_content"
      ],
      [
        "./creativity/service.py",
        "_process_collaboration"
      ],
      [
        "./learning/service.py",
        "learn_from_data"
      ],
      [
        "./learning/service.py",
        "adapt_behavior"
      ],
      [
        "./learning/service.py",
        "transfer_learning"
      ],
      [
        "./consciousness/service.py",
        "perform_introspection"
      ],
      [
        "./consciousness/service.py",
        "direct_attention_focus"
      ],
      [
        "./reasoning/analysis/engine.py",
        "_format_response"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_against_framework"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_against_principle"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "detect_ethical_drift"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_against_framework"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_against_principle"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "evaluate_governance_decision"
      ],
      [
        "./voice/synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "complete_trace"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "_create_actual_pr"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_run"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "integrate"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_against_framework"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_against_principle"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "send_message"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_profile_decision_tokens"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_profile_outcome_tokens"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "entangle_dreams"
      ],
      [
        "./quantum/service.py",
        "quantum_compute"
      ],
      [
        "./quantum/service.py",
        "quantum_entangle"
      ]
    ],
    "4:int": [
      [
        "./core/integrator.py",
        "broadcast_event"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "_calculate_entanglement_level"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "get_int"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "_assess_quantum_branches"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "broadcast_event"
      ]
    ],
    "0:LukhasConfig": [
      [
        "./core/config.py",
        "get_config"
      ],
      [
        "./core/config_manager.py",
        "get_config"
      ]
    ],
    "4:Optional[Any]": [
      [
        "./core/id.py",
        "unlock_memory"
      ],
      [
        "./memory/visualizer.py",
        "_create_memory_plot"
      ],
      [
        "./memory/visualizer.py",
        "_create_emotion_plot"
      ],
      [
        "./memory/visualizer.py",
        "_create_collapse_plot"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "unlock_memory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "unlock_memory"
      ]
    ],
    "2:bytes": [
      [
        "./core/id.py",
        "_generate_standard_key"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "get"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "_read_from_mem_cache"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_derive_memory_key"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "_read_file"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_derive_memory_key"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_encrypt_data"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_decrypt_data"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_prepare_identity_data"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_get_quantum_entropy"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_extract_hidden_data"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "generate_secure_bytes"
      ],
      [
        "./security/hardware_root.py",
        "retrieve_key"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_encrypt_sensitive_data"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_standard_key"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_standard_key"
      ],
      [
        "./quantum/api_manager.py",
        "derive_key_from_\u03bbid"
      ]
    ],
    "3:Any": [
      [
        "./core/id.py",
        "_decrypt_data"
      ],
      [
        "./core/enhanced_swarm.py",
        "_make_informed_decision"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "execute_node"
      ],
      [
        "./core/base/base_config.py",
        "get"
      ],
      [
        "./memory/fold_engine.py",
        "retrieve"
      ],
      [
        "./memory/fold_engine.py",
        "_get_tier_filtered_content"
      ],
      [
        "./memory/memory_optimization.py",
        "create_memory_efficient_collection"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "_generate_functional_output"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "create_allocation_pool"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "get"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_decrypt_data"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_decrypt_data"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "get_property"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get"
      ],
      [
        "./governance/common.py",
        "get"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "get_retrieval_filter"
      ]
    ],
    "3:Tuple[bool, List[str]]": [
      [
        "./core/id.py",
        "check_compliance"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_validate_tier_compliance"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "check_compliance"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "check_compliance"
      ]
    ],
    "1:Optional[str]": [
      [
        "./core/distributed_tracing.py",
        "span_id"
      ],
      [
        "./core/distributed_tracing.py",
        "parent_span_id"
      ],
      [
        "./memory/emotional.py",
        "get_primary_emotion"
      ],
      [
        "./memory/memoria.py",
        "get_last_consciousness_phase"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "get_root_hash"
      ],
      [
        "./memory/systems/replay_system.py",
        "start_session"
      ],
      [
        "./memory/systems/memory_helix.py",
        "get_curious_word"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_get_peak_recovery_day"
      ],
      [
        "./creativity/emotional_resonance.py",
        "generate_valence_arousal_plot"
      ],
      [
        "./bridge/llm_wrappers/env_loader.py",
        "get_api_key"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "find_optimal_timeline"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "get_semantic_group"
      ]
    ],
    "2:'TraceContext'": [
      [
        "./core/distributed_tracing.py",
        "with_span"
      ],
      [
        "./core/telemetry/monitoring.py",
        "start_trace"
      ]
    ],
    "1:Dict[str, str]": [
      [
        "./core/distributed_tracing.py",
        "to_headers"
      ],
      [
        "./core/core_hub.py",
        "get_endpoints"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "_initialize_role_prompts"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "initialize_standard_nodes"
      ],
      [
        "./memory/memory_fold.py",
        "_get_default_prompts"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_load_templates"
      ],
      [
        "./compliance/ai_compliance.py",
        "_get_processing_purposes"
      ],
      [
        "./orchestration/service_registry.py",
        "list_services"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "_create_isolated_env"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "_get_processing_purposes"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "_get_processing_purposes"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "get_vocabulary"
      ],
      [
        "./governance/core.py",
        "_initialize_vocabulary"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "consensus"
      ],
      [
        "./quantum/utils/regenerate_intelligent_descriptions.py",
        "analyze_code_content"
      ],
      [
        "./quantum/utils/add_compliant_headers.py",
        "get_module_info"
      ],
      [
        "./quantum/utils/add_intelligent_descriptions.py",
        "analyze_code_content"
      ]
    ],
    "3:TraceContext": [
      [
        "./core/distributed_tracing.py",
        "start_trace"
      ],
      [
        "./core/distributed_tracing.py",
        "start_span"
      ]
    ],
    "2:List[Event]": [
      [
        "./core/event_replayer.py",
        "_load_events"
      ],
      [
        "./core/event_sourcing.py",
        "get_events_by_correlation_id"
      ],
      [
        "./core/event_sourcing.py",
        "get_causal_chain"
      ]
    ],
    "3:List[Event]": [
      [
        "./core/event_replayer.py",
        "filter_events_by_tag"
      ],
      [
        "./core/event_sourcing.py",
        "get_events_for_aggregate"
      ],
      [
        "./core/event_sourcing.py",
        "get_events_in_time_range"
      ]
    ],
    "5:List[str]": [
      [
        "./core/symbolic_drift_analyzer.py",
        "_generate_recommendations"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_generate_strategic_recommendations"
      ],
      [
        "./memory/dashboard.py",
        "_generate_system_recommendations"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_generate_strategic_recommendations"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "_get_present_modalities"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_generate_recommendations"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_generate_optimization_suggestions"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_generate_social_recommendations"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_generate_recommendations"
      ]
    ],
    "1:Callable": [
      [
        "./core/tier_unification_adapter.py",
        "middleware"
      ],
      [
        "./core/tier_unification_adapter.py",
        "decorator"
      ],
      [
        "./core/module_registry.py",
        "decorator"
      ],
      [
        "./core/identity_aware_base.py",
        "decorator"
      ],
      [
        "./core/identity_integration.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "glyph_bind"
      ],
      [
        "./core/decorators.py",
        "trace"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_consciousness_change"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/hub_services/service_registry.py",
        "decorator"
      ],
      [
        "./memory/systems/tier_system.py",
        "decorator"
      ],
      [
        "./consciousness/service.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/service.py",
        "decorator"
      ],
      [
        "./ethics/meg_guard.py",
        "decorator"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "timed"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "profile_function"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "profile_async_function"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "decorator"
      ],
      [
        "./api/core/controllers.py",
        "require_auth"
      ],
      [
        "./api/core/controllers.py",
        "decorator"
      ]
    ],
    "2:Dict[str, List[Any]]": [
      [
        "./core/core_hub.py",
        "broadcast_to_all_hubs"
      ],
      [
        "./memory/memory_hub.py",
        "broadcast_to_all_hubs"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "_find_common_patterns"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "broadcast_to_all_hubs"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_recognize_patterns"
      ]
    ],
    "2:'Event'": [
      [
        "./core/event_sourcing.py",
        "from_dict"
      ],
      [
        "./core/event_replay_snapshot.py",
        "from_json"
      ]
    ],
    "6:None": [
      [
        "./core/energy_consumption_analysis.py",
        "record_energy_consumption"
      ],
      [
        "./core/colonies/base_colony.py",
        "override_tag"
      ],
      [
        "./core/telemetry/monitoring.py",
        "create_alert"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "store_interaction"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/feedback_loop.py",
        "record_feedback"
      ],
      [
        "./memory/voice_memory_manager.py",
        "store_interaction"
      ],
      [
        "./memory/fold_engine.py",
        "log_drift_event"
      ],
      [
        "./memory/distributed_state_manager.py",
        "__init__"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_register_memory_with_id_integration"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "_log_access"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/voice_integrator.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "__init__"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "__init__"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "__init__"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "add_datapoint"
      ],
      [
        "./voice/integrator.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "store_interaction"
      ],
      [
        "./voice/adaptation_module.py",
        "record_feedback"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "institutional_compliance_audit_log"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "record_api_call"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "register_check"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "_log_decision"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "__init__"
      ],
      [
        "./symbolic/features/tracer.py",
        "trace"
      ],
      [
        "./dream/dashboard/dream_metrics_db.py",
        "add_dream_metrics"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ]
    ],
    "1:Any": [
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./memory/fold_engine.py",
        "_get_collapse_filtered_content"
      ],
      [
        "./identity/api/__init__.py",
        "log_outgoing_response_info"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "_initialize_drift_detector"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_initialize_drift_detector"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_initialize_drift_detector"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "retrieve"
      ],
      [
        "./api/core/memory.py",
        "convert_numpy_to_serializable"
      ],
      [
        "./api/core/controllers.py",
        "handle_not_found_error"
      ],
      [
        "./api/core/controllers.py",
        "handle_method_not_allowed_error"
      ],
      [
        "./api/core/controllers.py",
        "handle_internal_server_error"
      ],
      [
        "./emotion/emotion_hub.py",
        "_create_emotional_memory"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "decorator"
      ],
      [
        "./quantum/bio.py",
        "decorator"
      ],
      [
        "./quantum/bio_components.py",
        "decorator"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "decorator"
      ],
      [
        "./quantum/certificate_manager.py",
        "decorator"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "decorator"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "decorator"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "decorator"
      ]
    ],
    "3:Optional[Any]": [
      [
        "./core/practical_optimizations.py",
        "get"
      ],
      [
        "./core/module_registry.py",
        "get_module"
      ],
      [
        "./core/service_discovery.py",
        "find_service"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "recall"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_get_from_cache"
      ]
    ],
    "1:T": [
      [
        "./core/practical_optimizations.py",
        "acquire"
      ],
      [
        "./core/practical_optimizations.py",
        "get"
      ],
      [
        "./memory/memory_optimization.py",
        "acquire"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__enter__"
      ]
    ],
    "4:Any": [
      [
        "./core/practical_optimizations.py",
        "share_computation"
      ],
      [
        "./core/practical_optimizations.py",
        "optimize_computation"
      ],
      [
        "./core/identity_aware_base.py",
        "execute_tiered_operation"
      ],
      [
        "./core/helpers/__init__.py",
        "get_nested_value"
      ],
      [
        "./identity/api/onboarding_api.py",
        "api_response"
      ],
      [
        "./bridge/shared_state.py",
        "get_shared_state"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "export_traces"
      ]
    ],
    "9:bool": [
      [
        "./core/module_registry.py",
        "register_module"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "store"
      ]
    ],
    "0:List[Dict[str, str]]": [
      [
        "./core/core_utilities.py",
        "get_resource_efficiency_table"
      ],
      [
        "./core/resource_efficiency.py",
        "get_resource_efficiency_table"
      ]
    ],
    "1:UnifiedBot": [
      [
        "./core/bot.py",
        "create_bot"
      ],
      [
        "./core/bot.py",
        "create_auditor"
      ],
      [
        "./core/bot.py",
        "create_doc_generator"
      ],
      [
        "./core/bot.py",
        "create_web_manager"
      ],
      [
        "./core/bot.py",
        "create_agent"
      ]
    ],
    "0:str": [
      [
        "./core/common.py",
        "get_timestamp"
      ],
      [
        "./core/identity/id_manager.py",
        "get_current_sid"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "get_web_interface_template"
      ],
      [
        "./consciousness/service.py",
        "_get_user_id_for_logging"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "now_iso"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "eu_timestamp"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "now_iso"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "now_iso"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "global_timestamp"
      ],
      [
        "./api/core/controllers.py",
        "get_request_user_id"
      ]
    ],
    "8:str": [
      [
        "./core/task_manager.py",
        "create_task"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "log_intent_node_interaction"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_trace"
      ]
    ],
    "1:Dict[str, int]": [
      [
        "./core/mailbox.py",
        "get_priority_stats"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_get_priority_distribution"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "_analyze_violations"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_get_phase_distribution"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "_get_tier_activity"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "_get_active_vocabulary"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_memory_type_distribution"
      ],
      [
        "./memory/systems/integration_example.py",
        "_analyze_tag_clusters"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_get_agent_distribution"
      ],
      [
        "./ethics/training/alignment_overseer.py",
        "train_overseer_from_scenarios"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "_count_agents_by_status"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "_count_plugins_by_status"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_analyze_symbolic_reasons"
      ]
    ],
    "0:bool": [
      [
        "./core/direct_ai_router.py",
        "is_ai_available"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "__validate_consciousness_hub__"
      ]
    ],
    "1:Dict[str, List[str]]": [
      [
        "./core/service_discovery.py",
        "list_all_services"
      ],
      [
        "./memory/connection_visualizer.py",
        "analyze_connections"
      ],
      [
        "./memory/memory_fold.py",
        "create_emotion_clusters"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_initialize_safe_emoji_sets"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_load_tier_symbols"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_load_symbolic_chars"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_load_cultural_suggestions"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_load_symbolic_suggestions"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_initialize_patterns"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_initialize_content_filters"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_initialize_tag_hierarchy"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_load_compliance_patterns"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_initialize_symbolic_vocabulary"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "_initialize_risk_patterns"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_initialize_symbolic_vocabulary"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_initialize_narrative_templates"
      ]
    ],
    "2:Optional[DecisionTrail]": [
      [
        "./core/observatory.py",
        "get_decision_trail"
      ],
      [
        "./symbolic/features/tracer.py",
        "get_trail"
      ]
    ],
    "2:Callable": [
      [
        "./core/decorators.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_create_pre_forward_hook"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_create_post_forward_hook"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "_create_backward_hook"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__call__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "profile"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "profile_async"
      ]
    ],
    "4:List[Dict]": [
      [
        "./core/agi/self_improvement.py",
        "_generate_milestones"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_logical_elements"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_logical_elements"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_logical_elements"
      ]
    ],
    "1:torch.Tensor": [
      [
        "./core/colonies/tensor_colony_ops.py",
        "tags_to_tensor"
      ],
      [
        "./core/colonies/tensor_colony_ops.py",
        "colony_reasoning_tensor"
      ]
    ],
    "4:Optional[str]": [
      [
        "./core/symbolic_bridge/token_map.py",
        "get_mapping"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_markdown_report"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_json_report"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "initiate_dream_formation"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_complete_with_system"
      ],
      [
        "./voice/voice_system_integrator.py",
        "create_custom_profile"
      ],
      [
        "./quantum/vault_manager.py",
        "authenticate_and_decrypt_api_key"
      ]
    ],
    "2:Optional[Callable]": [
      [
        "./core/integration/system_coordinator.py",
        "_get_request_handler"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_get_request_handler"
      ]
    ],
    "1:NeuroSymbolicFusionLayer": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "create_nsfl_instance"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "create_nsfl_instance"
      ]
    ],
    "4:NeuroSymbolicPattern": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "fuse_neural_symbolic"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_create_error_pattern"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "fuse_neural_symbolic"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_create_error_pattern"
      ]
    ],
    "3:NeuroSymbolicPattern": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_apply_fusion_mode"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_create_low_energy_pattern"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_apply_fusion_mode"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_create_low_energy_pattern"
      ]
    ],
    "2:NeuroSymbolicPattern": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_enhance_pattern_coherence"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_create_minimal_pattern"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_enhance_pattern_coherence"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_create_minimal_pattern"
      ]
    ],
    "1:List[ModalityCapability]": [
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ]
    ],
    "3:Dict": [
      [
        "./core/personality/creative_personality.py",
        "_multimodal_fusion"
      ],
      [
        "./core/personality/creative_personality.py",
        "_generate_output"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_multimodal_fusion"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_generate_output"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "_integrate_knowledge"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "synthesize_symbolic_atp"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "optimize_cristae_topology"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_analyze_topology_efficiency"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_apply_cristae_transformation"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_apply_tubular_folding"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_apply_lamellar_folding"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_apply_hybrid_folding"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_extract_learning_features"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "generate_trace_pattern"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_build_trace_context"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "authenticate_with_qr_glyph"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "revoke_token"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "register_service"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_create_device_sync_token"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "validate_tier_access"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_multimodal_fusion"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_generate_output"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "adjust"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "_apply_vocal_characteristics"
      ],
      [
        "./learning/federated_meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_extract_learning_features"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_extract_learning_features"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_arrange_components"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_apply_styling"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_adjust_for_user"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_update_self_model_from_reflection"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_performance_analytics"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_apply_template"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "attend"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "orchestrate"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "check_compliance"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "optimize_learning_approach"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_extract_learning_features"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "attend"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "predict_resource_needs"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "optimize_resource_allocation"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "analyze_resource_trends"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "optimize_learning_approach"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_extract_learning_features"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "attend"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "verify"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "verify"
      ],
      [
        "./emotion/multimodal_sentiment.py",
        "analyze_multimodal_sentiment"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "synthesize_symbolic_atp"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "optimize_cristae_topology"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_analyze_topology_efficiency"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_apply_cristae_transformation"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_apply_tubular_folding"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_apply_lamellar_folding"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_apply_hybrid_folding"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ]
    ],
    "1:Optional[Dict[str, Any]]": [
      [
        "./core/utils/__init__.py",
        "legacy_parse_lukhas_command"
      ],
      [
        "./memory/fold_engine.py",
        "auto_reflect"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_next"
      ],
      [
        "./memory/systems/memory_reflector.py",
        "recall_last_interaction"
      ],
      [
        "./creativity/affect_stagnation_detector.py",
        "check_for_stagnation"
      ],
      [
        "./ethics/compliance/engine.py",
        "_get_last_drift_log_summary"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "check_for_stagnation"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "check_for_recurrence"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "check_for_recurrence"
      ]
    ],
    "2:Tag": [
      [
        "./core/tagging/tagging_system.py",
        "resolve_tag"
      ],
      [
        "./core/tagging/tagging_system.py",
        "resolve_tag"
      ],
      [
        "./core/tagging/tagging_system.py",
        "store"
      ],
      [
        "./creativity/creative_market.py",
        "_create_tag"
      ]
    ],
    "2:List[HarmPrediction]": [
      [
        "./core/safety/predictive_harm_prevention.py",
        "_consolidate_predictions"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "_basic_harm_prediction"
      ]
    ],
    "2:List[Anomaly]": [
      [
        "./core/audit/audit_analytics.py",
        "_detect_activity_anomalies"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_detect_error_anomalies"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_detect_consciousness_anomalies"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_detect_decision_anomalies"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_detect_security_anomalies"
      ]
    ],
    "2:List[ComplianceViolation]": [
      [
        "./core/audit/audit_analytics.py",
        "_check_gdpr_compliance"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_check_ai_ethics_compliance"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_check_security_compliance"
      ],
      [
        "./ethics/compliance.py",
        "get_violation_history"
      ],
      [
        "./ethics/compliance_simple.py",
        "get_violation_history"
      ]
    ],
    "3:List[ComplianceViolation]": [
      [
        "./core/audit/audit_analytics.py",
        "_check_regulation"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_analyze_content_for_violations"
      ]
    ],
    "2:Dict[str, str]": [
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "_serialize_kwargs"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_module_anchors"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_get_audience_style"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_select_color_scheme"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_optimize_communication_style"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "_interpret_confidence"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_find_cultural_variants"
      ]
    ],
    "2:AIResponse": [
      [
        "./core/ai/integration_manager.py",
        "use_github_copilot_cli"
      ],
      [
        "./core/ai/integration_manager.py",
        "_local_analysis_fallback"
      ]
    ],
    "3:Optional[float]": [
      [
        "./core/symbolism/methylation_model.py",
        "adjust_lifespan"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_estimate_time_to_critical_drift"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_estimate_time_to_critical_drift"
      ]
    ],
    "7:None": [
      [
        "./core/infrastructure/base_node.py",
        "__init__"
      ],
      [
        "./memory/fold_engine.py",
        "__init__"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "track_fold_state"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "__init__"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "track_fold_state"
      ],
      [
        "./memory/hooks/registry.py",
        "register_hook"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "__init__"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "institutional_audit_log"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_log_operation"
      ]
    ],
    "3:Optional[str]": [
      [
        "./core/data/crud_operations.py",
        "create_diagnostic_session"
      ],
      [
        "./memory/systems/replay_system.py",
        "create_associative_sequence"
      ],
      [
        "./memory/systems/memory_helix.py",
        "get_pronunciation_for_word"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "initiate_dream"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "generate_dream_narrative"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_extract_cultural_context"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_find_shorter_word"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_choose_word"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "detect_contradictions"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "get_endpoint"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "generate_reminiscence"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "branch_timeline"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_identify_dream_sequence"
      ],
      [
        "./quantum/api_manager.py",
        "authenticate_with_glyph"
      ]
    ],
    "2:Optional[Dict]": [
      [
        "./core/data/crud_operations.py",
        "get_diagnostic_session"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_get_next_tier_requirements"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "_load_user_tier_data"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_get_component_spec"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_match_template"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_identify_primary_cause"
      ]
    ],
    "0:Optional[ABASQuantumSpecialistWrapper]": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "get_abas_quantum_specialist"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_quantum_biological_agi"
      ]
    ],
    "2:List[EngineInfo]": [
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "query_engines"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "get_engines_by_capability"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "get_engines_by_type"
      ]
    ],
    "3:Tuple[bool, str]": [
      [
        "./core/interfaces/logic/delegate_logic.py",
        "can_delegate"
      ],
      [
        "./ethics/ethical_guardian.py",
        "ethical_check"
      ]
    ],
    "1:List[AwarenessType]": [
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_supported_types"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_supported_types"
      ]
    ],
    "2:Optional[SessionContext]": [
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_session_status"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_session_status"
      ]
    ],
    "6:Dict[str, Any]": [
      [
        "./memory/service.py",
        "search_memory"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "create_glyph_indexed_memory"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_trust_score"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "register_brand_prefix"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "generate_id"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_generate_range_proof"
      ],
      [
        "./creativity/service.py",
        "generate_content"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "chat_completion_sync"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_create_simulated_pr"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "_deliver_voice"
      ]
    ],
    "0:Dict[str, Any]": [
      [
        "./memory/connection_visualizer.py",
        "load_all_specifications"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_replayer_status"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "get_dream_status"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "load_traits"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "load_traits"
      ],
      [
        "./identity/enterprise/auth.py",
        "get_enterprise_auth_config_template"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "get_quantum_status"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration.py",
        "get_consciousness_integration_status"
      ],
      [
        "./reasoning/analysis/engine.py",
        "get_default"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "get_system_capabilities"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_chat_completion"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_chat_completion_critical"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_chat_completion_extended"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_chat_completion_long"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "certify_canadian_compliance"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "certify_uk_compliance"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_subprocess_run"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "certify_australian_compliance"
      ],
      [
        "./orchestration/brain/vulnerability_dashboard.py",
        "load_latest_scan_results"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "create_bio_quantum_radar_config"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get_system_info"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "memory_check"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "cpu_check"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "disk_check"
      ],
      [
        "./quantum/creative_integration.py",
        "get_quantum_status"
      ]
    ],
    "3:Optional[Dict[str, Any]]": [
      [
        "./memory/evolution.py",
        "evolve_memory_globally"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "retrieve"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "_collect_stage_data"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_detect_consciousness_anomalies"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_update_orb_visualization"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "_identify_primary_cause_from_chains"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_create_rollback_plan"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_determine_quarantine_scope"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_create_rollback_plan"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_calculate_linear_trend"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "_check_recurrence"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "_check_recurrence"
      ],
      [
        "./quantum/processing/quantum_waveform.py",
        "collapse"
      ]
    ],
    "4:Optional[Dict[str, Any]]": [
      [
        "./memory/evolution.py",
        "evolve_memory"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "fold_memory_group"
      ],
      [
        "./bridge/shared_state.py",
        "get_state_info"
      ]
    ],
    "2:EmotionVector": [
      [
        "./memory/emotional.py",
        "_infer_emotion_from_experience"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "_emotion_to_vector"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_consolidate_emotions"
      ]
    ],
    "2:Optional[float]": [
      [
        "./memory/emotional.py",
        "affect_vector_velocity"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_calculate_emotional_drift"
      ]
    ],
    "4:HybridMemoryFold": [
      [
        "./memory/core.py",
        "create_hybrid_memory_fold"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "create_hybrid_memory_fold"
      ]
    ],
    "9:OptimizedHybridMemoryFold": [
      [
        "./memory/core.py",
        "create_optimized_hybrid_memory_fold_with_lazy_loading"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "create_optimized_hybrid_memory_fold_with_lazy_loading"
      ]
    ],
    "6:OptimizedHybridMemoryFold": [
      [
        "./memory/core.py",
        "create_optimized_hybrid_memory_fold"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "create_optimized_hybrid_memory_fold"
      ]
    ],
    "5:OptimizedHybridMemoryFold": [
      [
        "./memory/core.py",
        "create_optimized_hybrid_memory_fold_512"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "create_optimized_hybrid_memory_fold_512"
      ]
    ],
    "4:List[Tuple[str, float]]": [
      [
        "./memory/core.py",
        "search_similar"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "search_similar"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_divergence_trajectory"
      ]
    ],
    "10:None": [
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "__init__"
      ]
    ],
    "5:int": [
      [
        "./memory/core.py",
        "_estimate_legacy_size"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "_estimate_legacy_size"
      ]
    ],
    "2:'DistributedMemoryEntry'": [
      [
        "./memory/core.py",
        "from_dict"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "from_dict"
      ]
    ],
    "0:FoldLineageTracker": [
      [
        "./memory/fold_lineage_tracker.py",
        "create_lineage_tracker"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "create_lineage_tracker"
      ]
    ],
    "1:FoldLineageTracker": [
      [
        "./memory/fold_lineage_tracker.py",
        "create_enhanced_lineage_tracker"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "create_enhanced_lineage_tracker"
      ]
    ],
    "7:str": [
      [
        "./memory/fold_lineage_tracker.py",
        "track_causation"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "track_causation"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "create_causal_origin"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "log_memoria_snapshot"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "log_dream_replay"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_narrative_reflection"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_narrative_reflection"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_generate_executive_summary"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_narrative_reflection"
      ]
    ],
    "3:List[FoldLineageNode]": [
      [
        "./memory/fold_lineage_tracker.py",
        "_trace_lineage_backwards"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_trace_lineage_backwards"
      ]
    ],
    "6:List[Dict[str, Any]]": [
      [
        "./memory/memory_fold.py",
        "enhanced_recall_memory_folds"
      ],
      [
        "./memory/memory_fold.py",
        "get_folds"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "read_traces"
      ]
    ],
    "5:List[Dict[str, Any]]": [
      [
        "./memory/memory_fold.py",
        "recall_memory_folds"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "recall_by_glyph_pattern"
      ]
    ],
    "2:Optional[MemoryTier]": [
      [
        "./memory/memory_optimization.py",
        "_get_higher_tier"
      ],
      [
        "./memory/memory_optimization.py",
        "_get_lower_tier"
      ]
    ],
    "1:List[CascadeBlockInfo]": [
      [
        "./memory/dashboard.py",
        "list_active_cascade_blocks"
      ],
      [
        "./memory/dashboard.py",
        "_get_emotional_cascade_blocks"
      ],
      [
        "./memory/dashboard.py",
        "_get_ethical_governance_blocks"
      ],
      [
        "./memory/dashboard.py",
        "_get_compression_loop_blocks"
      ]
    ],
    "2:List[DriftEventSummary]": [
      [
        "./memory/dashboard.py",
        "_analyze_drift_events_from_integrity_log"
      ],
      [
        "./memory/dashboard.py",
        "_analyze_dream_induced_drifts"
      ]
    ],
    "6:bool": [
      [
        "./memory/distributed_state_manager.py",
        "set"
      ],
      [
        "./memory/systems/memory_identity.py",
        "register_memory"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_fallback_authorization"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "_fallback_register_memory"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "register_memory"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "register_memory"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "authorize_access"
      ],
      [
        "./bridge/shared_state.py",
        "set_shared_state"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "register_memory"
      ]
    ],
    "1:Optional[Any]": [
      [
        "./memory/basic.py",
        "recall"
      ],
      [
        "./orchestration/service_registry.py",
        "get_service"
      ]
    ],
    "2:List[MemoryEntry]": [
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./memory/basic.py",
        "list_all"
      ],
      [
        "./memory/basic.py",
        "list_all"
      ],
      [
        "./memory/basic.py",
        "recent_memories"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "scan_memory_vault"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_parse_memory_file"
      ]
    ],
    "2:'MemoryEntry'": [
      [
        "./memory/basic.py",
        "from_dict"
      ],
      [
        "./memory/systems/simple_store.py",
        "from_dict"
      ]
    ],
    "2:Optional[MemoryEntry]": [
      [
        "./memory/basic.py",
        "retrieve"
      ],
      [
        "./memory/basic.py",
        "retrieve"
      ],
      [
        "./memory/basic.py",
        "recall_entry"
      ]
    ],
    "3:List[MemoryEntry]": [
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./memory/basic.py",
        "search_memories"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_parse_jsonl_file"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_parse_json_file"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_parse_markdown_file"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_parse_text_file"
      ]
    ],
    "2:List[SymbolicAnomaly]": [
      [
        "./memory/tools/lambda_archive_inspector.py",
        "detect_high_entropy_clusters"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "detect_forgotten_symbols"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "detect_symbolic_anomalies"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_symbolic_conflicts"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_recursive_loops"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_emotional_dissonance"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_motif_mutations"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_drift_acceleration"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_detect_narrative_fractures"
      ]
    ],
    "2:List[np.ndarray]": [
      [
        "./memory/hippocampal/pattern_separator.py",
        "separate_batch"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "create_hierarchical_representations"
      ],
      [
        "./quantum/oscillator.py",
        "_generate_moral_patterns"
      ]
    ],
    "8:None": [
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "__init__"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "__init__"
      ],
      [
        "./bridge/shared_state.py",
        "_add_change_to_history"
      ],
      [
        "./learning/_dict_learning.py",
        "_update_dict"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "_check_convergence"
      ],
      [
        "./consciousness/quantum_consciousness_hub.py",
        "inject_components"
      ],
      [
        "./ethics/ethical_auditor.py",
        "__init__"
      ]
    ],
    "9:str": [
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "add_experience"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "add_experience"
      ]
    ],
    "2:List[EpisodicMemory]": [
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_sample_uniform_random"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_sample_priority_based"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_sample_consciousness_weighted"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_sample_surprise_based"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_sample_mixed_strategy"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "get_episode_trajectory"
      ]
    ],
    "3:Generator[Dict[str, Any], None, None]": [
      [
        "./memory/fold_system/foldin.py",
        "import_folds"
      ],
      [
        "./memory/fold_system/foldin.py",
        "import_folds_safe"
      ]
    ],
    "3:MemoryItem": [
      [
        "./memory/hooks/registry.py",
        "execute_before_store"
      ],
      [
        "./memory/hooks/registry.py",
        "execute_after_recall"
      ]
    ],
    "4:MemoryItem": [
      [
        "./memory/hooks/registry.py",
        "_execute_hooks"
      ],
      [
        "./memory/hooks/registry.py",
        "_execute_single_hook"
      ]
    ],
    "1:Dict[str, any]": [
      [
        "./memory/hooks/registry.py",
        "get_registry_metrics"
      ],
      [
        "./orchestration/agents/base.py",
        "get_metadata"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "analyze_quantum_code"
      ]
    ],
    "2:MemoryItem": [
      [
        "./memory/hooks/base.py",
        "before_store"
      ],
      [
        "./memory/hooks/base.py",
        "after_recall"
      ]
    ],
    "2:List[Experience]": [
      [
        "./memory/replay/replay_buffer.py",
        "_sample_prioritized"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_sample_uniform"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_sample_temporal"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_sample_curiosity"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_sample_semantic"
      ]
    ],
    "5:Optional[str]": [
      [
        "./memory/systems/replay_system.py",
        "create_replay_sequence"
      ],
      [
        "./memory/systems/replay_system.py",
        "start_replay_session"
      ],
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "generate_gpt_reflection"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "meg_generate_text"
      ]
    ],
    "2:Optional['TensorKey']": [
      [
        "./memory/systems/memory_profiler.py",
        "from_allocation"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "from_tensor"
      ]
    ],
    "1:tuple[_ProfilerEvent, ...]": [
      [
        "./memory/systems/memory_profiler.py",
        "sorted_nodes"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "leaf_events"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "_extract_leaf_events"
      ]
    ],
    "1:list[CacheStat]": [
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "get_stats"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "get_stats"
      ]
    ],
    "3:List[Tuple[str, float]]": [
      [
        "./memory/systems/memory_evolution.py",
        "get_related_documents"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "closest_emotion"
      ]
    ],
    "3:Tuple[bytes, ModalityMetadata]": [
      [
        "./memory/systems/multimodal_memory_support.py",
        "process_image"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "process_audio"
      ]
    ],
    "2:Optional[np.ndarray]": [
      [
        "./memory/systems/multimodal_memory_support.py",
        "extract_image_features"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "extract_audio_features"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_modality_embedding"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "load_embedding"
      ]
    ],
    "2:Optional[bytes]": [
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_modality_data"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_extract_lsb"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_extract_dct"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_binary_to_bytes"
      ]
    ],
    "7:Dict[str, Any]": [
      [
        "./memory/systems/glyph_memory_bridge.py",
        "create_glyph_indexed_memory"
      ],
      [
        "./voice/voice_system_integrator.py",
        "speak"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "store_memory_with_emotion"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "store_memory_with_emotion"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "store_memory_with_emotion"
      ]
    ],
    "4:Glyph": [
      [
        "./memory/systems/glyph_memory_bridge.py",
        "create_drift_anchor"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_enhancement_mutation"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_create_dream_glyph"
      ]
    ],
    "2:Set[str]": [
      [
        "./memory/systems/glyph_memory_bridge.py",
        "_find_glyphs_by_filters"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_analyze_unicode_scripts"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_extract_dream_symbols"
      ]
    ],
    "1:List[float]": [
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "emotional_state_to_frequency"
      ],
      [
        "./memory/systems/integrity_collapser.py",
        "snapshot_entropy"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "_generate_quantum_pattern"
      ]
    ],
    "2:list": [
      [
        "./memory/systems/integration_example.py",
        "_extract_tags"
      ],
      [
        "./memory/systems/integration_example.py",
        "_auto_tag"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "parse_symbolic_consent"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "get_user_memory_chain"
      ]
    ],
    "1:LiveRanges": [
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ]
    ],
    "1:sympy.Expr": [
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ]
    ],
    "4:List[MemoryNode]": [
      [
        "./memory/systems/memory_processing.py",
        "get_relevant_memories"
      ],
      [
        "./memory/systems/memory_processing.py",
        "get_memory_timeline"
      ]
    ],
    "0:Optional[MemoryProfiler]": [
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "get_memory_profiler"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "get_memory_profiler"
      ]
    ],
    "0:Optional[MemoryPlanner]": [
      [
        "./memory/systems/memory_planning_wrapper.py",
        "get_memory_planner"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "get_memory_planner"
      ]
    ],
    "4:LiveRange": [
      [
        "./memory/systems/memory_planning_wrapper.py",
        "track_live_range"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "track_live_range"
      ]
    ],
    "3:List[Dict]": [
      [
        "./memory/systems/simple_memory.py",
        "read_from_shared_memory"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_analyze_context_needs"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_select_components"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_detect_memory_contradictions"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_apply_dependency_reasoning"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_apply_priority_reasoning"
      ],
      [
        "./orchestration/brain/controller.py",
        "find_similar_memories"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "_get_awareness_history"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "extract_motifs_from_dreams"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_load_dream_sessions"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "_get_awareness_history"
      ]
    ],
    "1:Dict[str, List[float]]": [
      [
        "./memory/systems/memory_advanced_manager.py",
        "_load_emotion_vectors"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_alignment_trends"
      ]
    ],
    "1:np.ndarray": [
      [
        "./memory/systems/healix_memory_core.py",
        "get_baseline_state"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "to_feature_vector"
      ],
      [
        "./quantum/oscillator.py",
        "_generate_lattice_basis"
      ]
    ],
    "0:DynamicTierSystem": [
      [
        "./memory/systems/tier_system.py",
        "_get_tier_system_instance"
      ],
      [
        "./memory/systems/tier_system.py",
        "create_tier_system"
      ]
    ],
    "4:Tuple[float, float, float]": [
      [
        "./memory/systems/memory_helix_visualizer.py",
        "get_memory_coordinates"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "get_memory_coordinates"
      ]
    ],
    "5:go.Figure": [
      [
        "./memory/systems/memory_helix_visualizer.py",
        "visualize_memory_helix"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "visualize_memory_helix"
      ]
    ],
    "6:str": [
      [
        "./memory/systems/causal_identity_tracker.py",
        "create_identity_anchor"
      ],
      [
        "./bridge/trace_logger.py",
        "log_bridge_event"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "create_task"
      ]
    ],
    "0:CollapseTrace": [
      [
        "./memory/systems/collapse_trace.py",
        "get_global_tracer"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "get_global_tracer"
      ]
    ],
    "6:float": [
      [
        "./memory/systems/neurosymbolic_integration.py",
        "_calculate_relation_confidence"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_calculate_layout_confidence"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "_calculate_complexity_score"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_calculate_temporal_correlation"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "_calculate_meta_confidence"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_calculate_overall_risk"
      ]
    ],
    "1:MemoryObjectStreamStatistics": [
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ],
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ],
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ]
    ],
    "1:MemoryObjectReceiveStream[T_co]": [
      [
        "./memory/systems/memory_research.py",
        "clone"
      ],
      [
        "./memory/systems/memory_research.py",
        "__enter__"
      ]
    ],
    "1:MemoryObjectSendStream[T_contra]": [
      [
        "./memory/systems/memory_research.py",
        "clone"
      ],
      [
        "./memory/systems/memory_research.py",
        "__enter__"
      ]
    ],
    "3:Dict[str, bool]": [
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "batch_forget"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_sync_with_external_systems"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "validate_qrg_challenge"
      ]
    ],
    "0:Optional[MemoryTraumaRepair]": [
      [
        "./memory/repair/trauma_repair_wrapper.py",
        "get_memory_trauma_repair"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "get_memory_trauma_repair"
      ]
    ],
    "1:List['ConceptNode']": [
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_ancestors"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_descendants"
      ]
    ],
    "2:QRGResult": [
      [
        "./identity/qrg_integration.py",
        "generate_consciousness_qrg"
      ],
      [
        "./identity/qrg_integration.py",
        "generate_cultural_qrg"
      ],
      [
        "./identity/qrg_integration.py",
        "generate_quantum_qrg"
      ],
      [
        "./identity/qrg_integration.py",
        "generate_dream_state_qrg"
      ],
      [
        "./identity/qrg_integration.py",
        "generate_emergency_override_qrg"
      ]
    ],
    "2:QRGType": [
      [
        "./identity/qrg_integration.py",
        "_determine_optimal_qrg_type"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_select_qrg_type"
      ]
    ],
    "2:PQCKeyPair": [
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "generate_kem_keypair"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "generate_signature_keypair"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "rotate_keys"
      ]
    ],
    "3:Tuple[bytes, bytes]": [
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "encapsulate_secret"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "generate_keypair"
      ]
    ],
    "2:Dict[str, bytes]": [
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "_derive_channel_keys"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_generate_embedding_keys"
      ]
    ],
    "3:Image.Image": [
      [
        "./identity/auth_backend/qr_entropy_generator.py",
        "embed_steganographic_layers"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_generate_qr_image"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_apply_tier_styling"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_apply_consciousness_adaptation"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_apply_cultural_styling"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_color_accent"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_corner_emblems"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_security_pattern"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_consciousness_styling"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_neural_overlay"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_cultural_styling"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_geometric_pattern"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_organic_pattern"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_ornate_pattern"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_embed_hidden_data"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_apply_quantum_styling"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_add_quantum_interference_pattern"
      ]
    ],
    "3:AttentionMetrics": [
      [
        "./identity/auth_utils/attention_monitor.py",
        "update_attention_metrics"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_combine_attention_metrics"
      ]
    ],
    "2:CognitiveIndicators": [
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_parse_calibration_data"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_extract_cognitive_indicators"
      ]
    ],
    "2:Dict[str, bool]": [
      [
        "./identity/core/qrs_manager.py",
        "_calculate_tier_eligibility"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "_get_default_permissions"
      ]
    ],
    "5:LambdaIDResult": [
      [
        "./identity/core/lambd_id_service.py",
        "generate_lambda_id"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_handle_collision"
      ]
    ],
    "3:ValidationResult": [
      [
        "./identity/core/lambd_id_service.py",
        "validate_lambda_id"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_symbolic_character"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_entropy"
      ]
    ],
    "2:Tuple[bool, List[str]]": [
      [
        "./identity/core/lambd_id_service.py",
        "_validate_format"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "validate_neurodivergent_accessibility"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "validate_post_quantum_security"
      ]
    ],
    "2:Optional[int]": [
      [
        "./identity/core/lambd_id_service.py",
        "_extract_tier"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_extract_tier_from_id"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_estimate_duration"
      ]
    ],
    "2:OrbVisualization": [
      [
        "./identity/core/visualization/lukhas_orb.py",
        "update_state"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_generate_visualization"
      ]
    ],
    "4:Tuple[int, int, int]": [
      [
        "./identity/core/visualization/lukhas_orb.py",
        "_blend_colors"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_hsv_to_rgb"
      ]
    ],
    "2:EntropyLevel": [
      [
        "./identity/core/id_service/entropy_engine.py",
        "_determine_entropy_level"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_determine_security_level"
      ]
    ],
    "1:Set[str]": [
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_unicode_categories"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_load_reserved_ids"
      ]
    ],
    "3:RecoveryAttempt": [
      [
        "./identity/core/id_service/portability_system.py",
        "recover_from_qr_geo"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "recover_from_emergency_code"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "restore_from_backup"
      ]
    ],
    "2:datetime": [
      [
        "./identity/core/id_service/portability_system.py",
        "_calculate_expiry_date"
      ],
      [
        "./compliance/ai_regulatory_framework/global_compliance/multi_jurisdiction_engine.py",
        "_calculate_next_assessment_date"
      ],
      [
        "./compliance/ai_regulatory_framework/eu_ai_act/compliance_validator.py",
        "_calculate_next_review_date"
      ],
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "_calculate_next_assessment_date"
      ],
      [
        "./compliance/ai_regulatory_framework/gdpr/data_protection_validator.py",
        "_calculate_next_review_date"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "_calculate_due_date"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_parse_timestamp"
      ]
    ],
    "4:ValidationResult": [
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "validate"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_determine_validation_result"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_determine_decay_validation_result"
      ]
    ],
    "2:ValidationResult": [
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_format"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_tier"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_check_collision"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_check_reserved"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_checksum"
      ]
    ],
    "4:dict": [
      [
        "./identity/core/sent/consent_manager.py",
        "collect_consent"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "generate_consent_proof"
      ],
      [
        "./orchestration/learning_initializer.py",
        "synthesize_knowledge"
      ],
      [
        "./orchestration/user_feedback/feedback_collector.py",
        "collect_feedback"
      ]
    ],
    "2:InferenceResult": [
      [
        "./identity/core/integrations/inference_adapter.py",
        "process_inference_request"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_route_inference_request"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_identity_verification"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_pattern_analysis"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_anomaly_detection"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_risk_assessment"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_authentication_decision"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_process_generic_inference"
      ]
    ],
    "3:InferenceResult": [
      [
        "./identity/core/integrations/inference_adapter.py",
        "verify_identity_inference"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "analyze_authentication_patterns"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "detect_authentication_anomalies"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "assess_authentication_risk"
      ]
    ],
    "3:MemoryIntegrationResult": [
      [
        "./identity/core/integrations/memory_connector.py",
        "store_identity_memory"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "create_biographical_anchor"
      ]
    ],
    "3:List[MemoryRecord]": [
      [
        "./identity/core/integrations/memory_connector.py",
        "_apply_memory_filters"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "_sort_memories_by_relevance"
      ]
    ],
    "4:np.ndarray": [
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "_create_identity_gradient"
      ],
      [
        "./quantum/oscillator.py",
        "_apply_zone_correction"
      ],
      [
        "./quantum/consensus_system.py",
        "_anneal"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "_calculate_gradient"
      ]
    ],
    "3:Optional[bytes]": [
      [
        "./identity/core/glyph/steganographic_id.py",
        "_extract_quantum_lsb"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "_extract_multi_layer"
      ]
    ],
    "2:List[IdentityEvent]": [
      [
        "./identity/core/events/identity_event_publisher.py",
        "get_session_events"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "get_correlation_events"
      ]
    ],
    "2:Image.Image": [
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_biometric_indicators"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_quantum_indicators"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_rainbow_gradient"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "_add_consciousness_indicators"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_add_quantum_entanglement_visual"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_add_consciousness_resonance_pattern"
      ]
    ],
    "5:Dict": [
      [
        "./identity/core/tier/tier_manager.py",
        "_validate_tier_upgrade"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "generate_interface"
      ]
    ],
    "4:AuthenticationResult": [
      [
        "./identity/enterprise/auth.py",
        "_authenticate_ldap"
      ],
      [
        "./identity/enterprise/auth.py",
        "verify_mfa"
      ]
    ],
    "3:AuthenticationResult": [
      [
        "./identity/enterprise/auth.py",
        "_authenticate_oauth"
      ],
      [
        "./identity/enterprise/auth.py",
        "_authenticate_saml"
      ],
      [
        "./identity/enterprise/auth.py",
        "_authenticate_jwt"
      ],
      [
        "./identity/enterprise/auth.py",
        "_authenticate_certificate"
      ],
      [
        "./identity/enterprise/auth.py",
        "_failed_auth_result"
      ]
    ],
    "2:EnterpriseUser": [
      [
        "./identity/enterprise/auth.py",
        "_create_enterprise_user_from_ldap"
      ],
      [
        "./identity/enterprise/auth.py",
        "_create_enterprise_user_from_oauth"
      ],
      [
        "./identity/enterprise/auth.py",
        "_create_enterprise_user_from_saml"
      ]
    ],
    "1:tuple[str, int]": [
      [
        "./identity/api/__init__.py",
        "handle_bad_request"
      ],
      [
        "./identity/api/__init__.py",
        "handle_unauthorized"
      ],
      [
        "./identity/api/__init__.py",
        "handle_forbidden"
      ],
      [
        "./identity/api/__init__.py",
        "handle_not_found"
      ],
      [
        "./identity/api/__init__.py",
        "handle_method_not_allowed"
      ],
      [
        "./identity/api/__init__.py",
        "handle_rate_limit_exceeded"
      ],
      [
        "./identity/api/__init__.py",
        "handle_internal_server_error"
      ],
      [
        "./identity/api/__init__.py",
        "handle_generic_exception"
      ]
    ],
    "1:List[SecurityControl]": [
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "get_critical_controls"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "get_all_controls"
      ]
    ],
    "2:List[SymbolicFragment]": [
      [
        "./creativity/narrative/symbolic_weaver.py",
        "load_symbolic_fragments"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_load_jsonl_fragments"
      ]
    ],
    "2:Optional[SymbolicFragment]": [
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_load_json_fragment"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_load_markdown_fragment"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_load_text_fragment"
      ]
    ],
    "1:Dict[str, VisualSymbol]": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_analysis_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_object_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_color_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_emotion_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_composition_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_provider_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_quality_symbols"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_symbolic_elements"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_all_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_analysis_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_object_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_color_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_emotion_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_composition_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_provider_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_quality_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_symbolic_elements"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_all_symbols"
      ]
    ],
    "2:List[Tuple[int, int, int]]": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_emotional_color_mapping"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_emotional_color_mapping"
      ]
    ],
    "1:'VoiceProfile'": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "from_dict"
      ],
      [
        "./voice/voice_profiling.py",
        "from_dict"
      ]
    ],
    "2:Optional[VoiceProfile]": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "get_profile"
      ],
      [
        "./voice/personality.py",
        "_get_emotional_profile"
      ],
      [
        "./voice/voice_profiling.py",
        "get_profile"
      ]
    ],
    "2:Tensor": [
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ]
    ],
    "0:Dict[str, str]": [
      [
        "./bridge/llm_wrappers/env_loader.py",
        "load_lukhas_env"
      ],
      [
        "./orchestration/service_registry.py",
        "list_services"
      ]
    ],
    "2:'FederatedModel'": [
      [
        "./learning/federated_meta_learning.py",
        "deserialize"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "deserialize"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "deserialize"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "deserialize"
      ]
    ],
    "4:FederatedModel": [
      [
        "./learning/federated_meta_learning.py",
        "register_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "register_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "register_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "register_model"
      ]
    ],
    "3:Optional[Dict]": [
      [
        "./learning/federated_meta_learning.py",
        "get_model"
      ],
      [
        "./learning/federated_meta_learning.py",
        "get_federated_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_federated_model"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_model"
      ],
      [
        "./learning/federated_learning.py",
        "get_model"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "_find_optimal_placement"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_federated_model"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "get_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_federated_model"
      ]
    ],
    "1:Optional[MetaLearningEnhancementWrapper]": [
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "get_meta_learning_enhancement"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "get_meta_learning_enhancement"
      ]
    ],
    "1:LukhasFederatedLearningManager": [
      [
        "./learning/federated_learning_system.py",
        "initialize_lukhas_federated_learning"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "initialize_lukhas_federated_learning"
      ]
    ],
    "2:'LukhasFederatedModel'": [
      [
        "./learning/federated_learning_system.py",
        "deserialize"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "deserialize"
      ]
    ],
    "4:LukhasFederatedModel": [
      [
        "./learning/federated_learning_system.py",
        "register_model"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "register_model"
      ]
    ],
    "2:TutorMessage": [
      [
        "./learning/tutor.py",
        "_generate_welcome_message"
      ],
      [
        "./learning/tutor.py",
        "_generate_hint"
      ]
    ],
    "1:Dict[str, List[Dict[str, Any]]]": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_gather_symbolic_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_gather_symbolic_patterns"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_gather_symbolic_patterns"
      ]
    ],
    "3:FeedbackType": [
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_determine_learning_outcome"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_determine_feedback_type"
      ]
    ],
    "0:Any": [
      [
        "./consciousness/service.py",
        "wrapper_sync"
      ],
      [
        "./api/core/controllers.py",
        "decorated_function"
      ]
    ],
    "3:Dict[str, List[str]]": [
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "_generate_analytical_insights"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_sklearn_clustering"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_simple_clustering"
      ]
    ],
    "5:Optional[ExperienceEntry]": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_experience_from_data"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_experience_from_data"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_experience_from_data"
      ]
    ],
    "2:EmotionalTone": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_classify_emotional_tone"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_classify_emotional_tone"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_classify_emotional_tone"
      ]
    ],
    "1:EmotionalDrift": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_neutral_drift"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_neutral_drift"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_neutral_drift"
      ]
    ],
    "1:AlignmentScore": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_neutral_alignment"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_neutral_alignment"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_neutral_alignment"
      ]
    ],
    "2:Optional[datetime]": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_parse_timestamp"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_parse_timestamp"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_extract_due_date"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_parse_timestamp"
      ]
    ],
    "1:GuardianReflector": [
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "create_plugin"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "create_plugin"
      ]
    ],
    "3:MoralSeverity": [
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_determine_severity"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_determine_severity"
      ]
    ],
    "2:ComplianceStatus": [
      [
        "./compliance/ai_regulatory_framework/eu_ai_act/compliance_validator.py",
        "_calculate_compliance_status"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_compliance_status"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_determine_compliance_status"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_compliance_status"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_compliance_status"
      ]
    ],
    "3:ConflictResolutionResult": [
      [
        "./reasoning/conflict_resolver.py",
        "resolve_conflict"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_merge_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_veto_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_suppress_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_escalate_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_freeze_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_reconcile_strategy"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_apply_isolate_strategy"
      ]
    ],
    "2:Optional[TimeSeriesPattern]": [
      [
        "./reasoning/oracle_predictor.py",
        "_detect_trend"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_cycles"
      ]
    ],
    "4:CollapseResult": [
      [
        "./reasoning/collapse_reasoner.py",
        "initiate_collapse"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "initiate_collapse"
      ]
    ],
    "4:CollapseType": [
      [
        "./reasoning/collapse_reasoner.py",
        "_determine_collapse_type"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_determine_collapse_type"
      ]
    ],
    "5:ResolutionStrategy": [
      [
        "./reasoning/collapse_reasoner.py",
        "_select_resolution_strategy"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_select_resolution_strategy"
      ]
    ],
    "5:ReasoningChain": [
      [
        "./reasoning/collapse_reasoner.py",
        "_apply_resolution_strategy"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_apply_resolution_strategy"
      ]
    ],
    "3:List[Dict[str, str]]": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_find_duty_conflicts"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_find_duty_conflicts"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_find_duty_conflicts"
      ]
    ],
    "4:MoralJudgment": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_create_constraint_violation_judgment"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_create_constraint_violation_judgment"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_create_constraint_violation_judgment"
      ]
    ],
    "3:Dict[MoralPrinciple, float]": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_extract_principle_weights"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_extract_principle_weights"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_extract_principle_weights"
      ]
    ],
    "2:Dict[EthicalFramework, float]": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_framework_consensus"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_framework_consensus"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_framework_consensus"
      ]
    ],
    "3:List[DecisionEvaluation]": [
      [
        "./reasoning/decision/bridge.py",
        "evaluate_alternatives"
      ],
      [
        "./reasoning/decision/bridge.py",
        "evaluate_alternatives"
      ]
    ],
    "2:Tuple[str, float]": [
      [
        "./reasoning/decision/bridge.py",
        "select_best_alternative"
      ],
      [
        "./reasoning/decision/bridge.py",
        "select_best_alternative"
      ]
    ],
    "3:Tuple[bool, Dict[str, Any]]": [
      [
        "./ethics/service.py",
        "check_compliance"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_compare_results"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "verify_identity_claim"
      ]
    ],
    "3:list": [
      [
        "./ethics/lukhas_ethics_guard.py",
        "check_cultural_context"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_cultural_context"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_cultural_appropriateness"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "check_cultural_context"
      ],
      [
        "./dream/core/dream_snapshot.py",
        "get_recent_snapshots"
      ]
    ],
    "3:ValidationReport": [
      [
        "./ethics/glyph_ethics_validator.py",
        "validate_glyph_creation"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "validate_glyph_decay"
      ]
    ],
    "4:ValidationReport": [
      [
        "./ethics/glyph_ethics_validator.py",
        "validate_glyph_mutation"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "validate_glyph_fusion"
      ]
    ],
    "2:List[EthicalViolationType]": [
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_content_safety"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_emotional_boundaries"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_symbolic_integrity"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_mutation_authorization"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_fusion_compatibility"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_decay_dependencies"
      ]
    ],
    "3:List[EthicalViolationType]": [
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_privacy_compliance"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_mutation_impact"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_mutation_continuity"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_fusion_consent"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_fusion_result_integrity"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_memory_preservation"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_validate_data_retention"
      ]
    ],
    "3:EthicsEvaluation": [
      [
        "./ethics/meg_bridge.py",
        "meg_evaluation_to_ethics_evaluation"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "_parse_gpt_response"
      ]
    ],
    "2:EthicsEvaluation": [
      [
        "./ethics/policy_engines/base.py",
        "evaluate_decision"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_consensus_evaluation"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "evaluate_decision"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "evaluate_decision"
      ]
    ],
    "2:tuple": [
      [
        "./voice/speech_processor.py",
        "_map_emotion_to_voice_parameters"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_calculate_security_score"
      ]
    ],
    "5:dict": [
      [
        "./orchestration/learning_initializer.py",
        "learn_from_data"
      ],
      [
        "./orchestration/learning_initializer.py",
        "adapt_behavior"
      ],
      [
        "./orchestration/learning_initializer.py",
        "transfer_learning"
      ]
    ],
    "2:'ProductionOrchestratorConfig'": [
      [
        "./orchestration/config/production_config.py",
        "load_from_file"
      ],
      [
        "./orchestration/config/production_config.py",
        "from_dict"
      ]
    ],
    "2:List[Task]": [
      [
        "./orchestration/security/dast/engine.py",
        "_ai_filter_tasks"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_ai_prioritize_tasks"
      ]
    ],
    "1:List[AgentCapability]": [
      [
        "./orchestration/agents/base.py",
        "get_capabilities"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "get_capabilities"
      ]
    ],
    "2:AgentResponse": [
      [
        "./orchestration/agents/base.py",
        "process"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "process"
      ]
    ],
    "2:List[ModuleComplianceReport]": [
      [
        "./orchestration/brain/symbol_validator.py",
        "_scan_files_parallel"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_scan_files_sequential"
      ]
    ],
    "2:ComplianceLevel": [
      [
        "./orchestration/brain/symbol_validator.py",
        "_determine_compliance_level"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_determine_overall_workspace_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_determine_overall_compliance_level"
      ]
    ],
    "2:CanadianOutput": [
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process_awareness"
      ]
    ],
    "1:Dict[str, np.ndarray]": [
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "_initialize_ethical_embeddings"
      ],
      [
        "./quantum/consensus_system.py",
        "_initialize_ethical_embeddings"
      ]
    ],
    "3:Dict[str, Dict[str, Any]]": [
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "validate_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "validate_compliance"
      ]
    ],
    "3:USInstitutionalOutput": [
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_convert_to_us_output"
      ]
    ],
    "2:AwarenessOutput": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__call__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__call__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__call__"
      ]
    ],
    "1:AwarenessType": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ]
    ],
    "3:AwarenessOutput": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process_awareness"
      ]
    ],
    "2:UKOutput": [
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "process_awareness"
      ]
    ],
    "2:List[SecurityIssue]": [
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_scan_secrets"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_scan_dependencies"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_check_permissions"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_get_github_security_alerts"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_scan_code_quality"
      ]
    ],
    "1:List[List[Any]]": [
      [
        "./orchestration/brain/unified_collapse_system.py",
        "collapse_trace_matrix"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "collapse_trace_matrix"
      ]
    ],
    "1:_StubColony": [
      [
        "./orchestration/brain/colony_coordinator.py",
        "_create_perception_colony"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "_create_action_colony"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "_create_emotion_colony"
      ]
    ],
    "2:AutonomousFixResult": [
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "execute_autonomous_fix"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_workflow_failure"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_dependency_vulnerability"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "_fix_generic_issue"
      ]
    ],
    "2:AustralianOutput": [
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "process_awareness"
      ]
    ],
    "2:URL": [
      [
        "./orchestration/brain/net/client.py",
        "_enforce_trailing_slash"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_merge_url"
      ]
    ],
    "3:Request": [
      [
        "./orchestration/brain/net/client.py",
        "build_request"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_build_redirect_request"
      ]
    ],
    "8:BaseTransport": [
      [
        "./orchestration/brain/net/client.py",
        "_init_transport"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_init_proxy_transport"
      ]
    ],
    "2:Response": [
      [
        "./orchestration/brain/net/client.py",
        "send"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_send_single_request"
      ],
      [
        "./orchestration/brain/net/client.py",
        "get"
      ],
      [
        "./orchestration/brain/net/client.py",
        "options"
      ],
      [
        "./orchestration/brain/net/client.py",
        "head"
      ],
      [
        "./orchestration/brain/net/client.py",
        "post"
      ],
      [
        "./orchestration/brain/net/client.py",
        "put"
      ],
      [
        "./orchestration/brain/net/client.py",
        "patch"
      ],
      [
        "./orchestration/brain/net/client.py",
        "delete"
      ]
    ],
    "8:AsyncBaseTransport": [
      [
        "./orchestration/brain/net/client.py",
        "_init_transport"
      ],
      [
        "./orchestration/brain/net/client.py",
        "_init_proxy_transport"
      ]
    ],
    "2:complex": [
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_compute_query_amplitude"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_compute_task_amplitude"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_compute_dialogue_amplitude"
      ]
    ],
    "1:ReflectionLayer": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "create_reflection_layer"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "create_reflection_layer"
      ]
    ],
    "3:ReflectiveStatement": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "reflect_on_drift_score"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "synthesize_memory_insights"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "reflect_on_drift_score"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "synthesize_memory_insights"
      ]
    ],
    "4:ReflectiveStatement": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "reflect_on_intent_deviation"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "contemplate_ethical_conflict"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "model_symbolic_future"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "reflect_on_intent_deviation"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "contemplate_ethical_conflict"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "model_symbolic_future"
      ]
    ],
    "2:ReflectiveStatement": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "reflect_on_emotional_state"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "reflect_on_emotional_state"
      ]
    ],
    "1:ConscienceSnapshot": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "capture_consciousness_snapshot"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "capture_consciousness_snapshot"
      ]
    ],
    "2:List[ReflectiveStatement]": [
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "process_reflection_cycle"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "get_reflection_history"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "get_reflection_history"
      ]
    ],
    "2:List[ValidationIssue]": [
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "get_issues_by_severity"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "get_issues_by_type"
      ]
    ],
    "1:Dict[str, VoiceSymbol]": [
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_synthesis_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_emotion_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_provider_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_quality_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_expression_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_all_symbols"
      ]
    ],
    "4:List[SymbolicElement]": [
      [
        "./symbolic/foundry/lambda_sage.py",
        "load_symbolic_archive"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_extract_symbols_from_file"
      ]
    ],
    "3:List[SymbolicElement]": [
      [
        "./symbolic/foundry/lambda_sage.py",
        "_load_dream_symbols"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_load_memory_symbols"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_extract_glyph_patterns"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_load_from_taxonomy"
      ]
    ],
    "2:List[SymbolicElement]": [
      [
        "./symbolic/foundry/lambda_sage.py",
        "_load_glyph_lineage"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_load_reasoning_symbols"
      ]
    ],
    "3:List[EntropyZone]": [
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "analyze_entropy_pressure"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_analyze_directory_entropy"
      ]
    ],
    "2:List[Symbol]": [
      [
        "./symbolic/core/symbolic_language.py",
        "get_decision_trace"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "get_symbols_by_domain"
      ]
    ],
    "2:Glyph": [
      [
        "./symbolic/features/glyphs/glyph.py",
        "create_memory_glyph"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "create_causal_link_glyph"
      ],
      [
        "./symbolic/features/glyphs/glyph_engine.py",
        "create_emotion_glyph"
      ]
    ],
    "1:Glyph": [
      [
        "./symbolic/features/glyphs/glyph.py",
        "create_drift_anchor"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "create_dream_seed"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "create_ethical_constraint"
      ]
    ],
    "3:Glyph": [
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_semantic_blend_fusion"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_emotional_merge_fusion"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_symbolic_synthesis_fusion"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_evolutionary_mutation"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_drift_correction_mutation"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_creative_mutation"
      ],
      [
        "./symbolic/features/glyphs/glyph_engine.py",
        "create_memory_glyph"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "create_memory_consolidation_glyph"
      ]
    ],
    "4:EmotionVector": [
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_blend_emotions"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_boost_emotion_vector"
      ]
    ],
    "3:EmotionVector": [
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_synthesize_emotions"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_evolve_emotion_vector"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_stabilize_emotion_vector"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_enhance_emotion_vector"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "_creative_emotion_evolution"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_extract_dream_emotions"
      ]
    ],
    "2:CollapseResult": [
      [
        "./symbolic/features/collapse/engine.py",
        "_consolidate_nodes"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_compress_nodes"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "_fuse_nodes"
      ]
    ],
    "3:DriftScore": [
      [
        "./symbolic/features/drift/score.py",
        "calculate"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "_calculate_pairwise_drift"
      ]
    ],
    "2:AnomalyReport": [
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "analyze_recent_dreams"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "generate_anomaly_report"
      ]
    ],
    "2:List[DreamSession]": [
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "load_recent_dreams"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_generate_synthetic_sessions"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "_generate_sample_sessions"
      ]
    ],
    "2:Optional[EmotionalSequence]": [
      [
        "./emotion/tools/emotional_echo_detector.py",
        "extract_emotional_sequence"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_from_dream"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_from_memory"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_from_drift_log"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_extract_from_generic"
      ]
    ],
    "1:lukhasQuantumValidator": [
      [
        "./quantum/validator.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "create_quantum_component"
      ]
    ],
    "2:'QuantumLikeState'": [
      [
        "./quantum/bio_optimization_adapter.py",
        "create_superposition"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "from_dict"
      ]
    ],
    "2:Tuple[np.ndarray, Dict[str, Any]]": [
      [
        "./quantum/bio.py",
        "_simulate_quantum_atp_synthesis"
      ],
      [
        "./quantum/bio_system.py",
        "_quantum_synthesis"
      ]
    ]
  },
  "similar_classes": {
    "__init__": [
      [
        "./tools/enhanced_ecosystem_documentation.py",
        "EnhancedLUKHASDocumentationOrchestrator"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "UserInteraction"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "DatabaseHealthCheck"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "RedisHealthCheck"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "HTTPHealthCheck"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "LukhasMemoryHealthCheck"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "RateLimitMiddleware"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "APIDocumentationGenerator"
      ],
      [
        "./bio/bio_utilities.py",
        "ProteinSynthesizer"
      ],
      [
        "./bio/protein_synthesizer.py",
        "ProteinSynthesizer"
      ],
      [
        "./bio/recovery_protocol.py",
        "BioRecoveryProtocol"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "FallbackCoherenceMetrics"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "FallbackCoherenceMetrics"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "FallbackCoherenceMetrics"
      ],
      [
        "./core/actor_supervision_integration.py",
        "SupervisedActorSystem"
      ],
      [
        "./core/integrator.py",
        "QuantumAuthenticator"
      ],
      [
        "./core/integrator.py",
        "ComplianceMonitor"
      ],
      [
        "./core/integrator.py",
        "UnifiedIntegration"
      ],
      [
        "./core/image_processing_pipeline.py",
        "ValidationColony"
      ],
      [
        "./core/image_processing_pipeline.py",
        "PreprocessingColony"
      ],
      [
        "./core/image_processing_pipeline.py",
        "FeatureExtractionColony"
      ],
      [
        "./core/image_processing_pipeline.py",
        "ClassificationColony"
      ],
      [
        "./core/image_processing_pipeline.py",
        "ThumbnailColony"
      ],
      [
        "./core/specialized_colonies.py",
        "ReasoningColony"
      ],
      [
        "./core/specialized_colonies.py",
        "MemoryColony"
      ],
      [
        "./core/specialized_colonies.py",
        "CreativityColony"
      ],
      [
        "./core/consistency_manager.py",
        "ConsistencyManager"
      ],
      [
        "./core/core_utilities.py",
        "ReasoningColony"
      ],
      [
        "./core/core_utilities.py",
        "MemoryColony"
      ],
      [
        "./core/core_utilities.py",
        "CreativityColony"
      ],
      [
        "./core/core_utilities.py",
        "ConsistencyManager"
      ],
      [
        "./core/core_utilities.py",
        "QuantizedCycleManager"
      ],
      [
        "./core/supervision.py",
        "DefaultSupervisionDecider"
      ],
      [
        "./core/supervision.py",
        "OneForOneStrategy"
      ],
      [
        "./core/supervision.py",
        "RootSupervisor"
      ],
      [
        "./core/supervision.py",
        "DepartmentSupervisor"
      ],
      [
        "./core/common.py",
        "BaseMessage"
      ],
      [
        "./core/mailbox.py",
        "DeadLetterQueue"
      ],
      [
        "./core/mailbox.py",
        "PersistentMailbox"
      ],
      [
        "./core/mailbox.py",
        "PriorityActor"
      ],
      [
        "./core/event_replay_snapshot.py",
        "EventStore"
      ],
      [
        "./core/event_replay_snapshot.py",
        "EventSourcedActor"
      ],
      [
        "./core/event_replay_snapshot.py",
        "ReplayController"
      ],
      [
        "./core/event_replay_snapshot.py",
        "DemoActor"
      ],
      [
        "./core/monitoring_observability.py",
        "ModelDriftDetector"
      ],
      [
        "./core/monitoring_observability.py",
        "ObservabilitySystem"
      ],
      [
        "./core/quantized_cycle_manager.py",
        "QuantizedCycleManager"
      ],
      [
        "./core/tiered_state_management.py",
        "StateCoordinator"
      ],
      [
        "./core/agent_coordination.py",
        "SkillRegistry"
      ],
      [
        "./core/agent_coordination.py",
        "DataProcessorAgent"
      ],
      [
        "./core/agent_coordination.py",
        "AnalyticsAgent"
      ],
      [
        "./core/agent_coordination.py",
        "MLModelAgent"
      ],
      [
        "./core/actor_system.py",
        "AIAgentActor"
      ],
      [
        "./core/global_initialization.py",
        "GlobalSystemInitializer"
      ],
      [
        "./core/agi/self_improvement.py",
        "AGIGoalAlignment"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "ConsciousnessStreamClient"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "ExperienceReplaySource"
      ],
      [
        "./core/agi/self_healing.py",
        "HealingLearner"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "MemoryAgent"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "OracleAgent"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "OracleColony"
      ],
      [
        "./core/colonies/memory_colony.py",
        "MemoryColony"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "EthicsAgent"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "EthicalSimulationEngine"
      ],
      [
        "./core/security/agi_security.py",
        "SessionManager"
      ],
      [
        "./core/security/agi_security.py",
        "RateLimiter"
      ],
      [
        "./core/security/agi_security.py",
        "SecureChannel"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "WorkflowOrchestrator"
      ],
      [
        "./core/bridges/core_consciousness_bridge.py",
        "CoreConsciousnessBridge"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "EthicalPolicy"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "PolicyViolation"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "AuditedMemorySystem"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "AuditedDecisionEngine"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "AuditedSecurityGateway"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "DecisionAuditColony"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "EventBusAuditIntegration"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "SequentialCounterActor"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "PriorityTaskActor"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "BackPressureActor"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "PersistentStateActor"
      ],
      [
        "./core/governance/governance_colony.py",
        "GovernanceColony"
      ],
      [
        "./core/telemetry/monitoring.py",
        "ConsciousnessMetrics"
      ],
      [
        "./core/telemetry/monitoring.py",
        "LearningMetrics"
      ],
      [
        "./core/modules/nias/__init__.py",
        "SymbolicMatcher"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "LucasVoiceSystem"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "LukhasServiceStub"
      ],
      [
        "./core/interfaces/api/v1/grpc/client.py",
        "LukhasGRPCClient"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "AwarenessRequest"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "AwarenessResponse"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "EngineRegistrationRequest"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "EngineRegistrationResponse"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "EngineQueryRequest"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "EngineQueryResponse"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "ValidationError"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "ProcessingError"
      ],
      [
        "./core/interfaces/api/v1/rest/app.py",
        "APIError"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "AuthMiddleware"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/delivery_loop.py",
        "NIASDeliveryLoop"
      ],
      [
        "./memory/unified_memory_core.py",
        "ConsolidatedUnifiedmemorycore"
      ],
      [
        "./memory/core.py",
        "ConsensusProtocol"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "AESGCMProvider"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "FernetProvider"
      ],
      [
        "./memory/dream_memory_fold.py",
        "DreamMemoryFold"
      ],
      [
        "./memory/memory_colonies.py",
        "ConsolidatedMemorycolonies"
      ],
      [
        "./memory/memory_visualization.py",
        "ConsolidatedMemoryvisualization"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "EpisodicMemoryColony"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "EpisodicMemoryRecord"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "MockOperation"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "MolecularChaperone"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "SymbolicTag"
      ],
      [
        "./memory/episodic/episodic_memory.py",
        "ConsolidatedEpisodicmemory"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "ConsensusProtocol"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "Linear"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "MultiheadAttention"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "SafeMemoryFold"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "MultiModalMemoryProcessor"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "CausalMemoryWrapper"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "MemoryTrackerIntegration"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "MemoryTracker"
      ],
      [
        "./memory/systems/memory_helix_golden.py",
        "HealixMapper"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "ProtonGradient"
      ],
      [
        "./memory/systems/core.py",
        "MemoryModule"
      ],
      [
        "./memory/systems/core.py",
        "BaseModule"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "HelixMapper"
      ],
      [
        "./memory/systems/simple_store.py",
        "UnifiedMemoryManager"
      ],
      [
        "./memory/systems/module_integrations.py",
        "VoiceModuleIntegration"
      ],
      [
        "./memory/systems/module_integrations.py",
        "MetaModuleIntegration"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "SymbolicMotif"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "CompressionMetrics"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "FoldLineageTracker"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "EmotionalMemory"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "WorkingMemoryBuffer"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "MemoryConsolidationEngine"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "BioSymbolicMemory"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "ColonyMemoryValidator"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "OpenAI"
      ],
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "OpenAI"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "TraumaSignature"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "TraumaRepairSystem"
      ],
      [
        "./memory/repair/helix_repair_module.py",
        "HelixRepairModule"
      ],
      [
        "./identity/identity_hub.py",
        "EnterpriseAuthenticationModule"
      ],
      [
        "./identity/identity_hub.py",
        "AttentionMonitor"
      ],
      [
        "./identity/auth_backend/webrtc_peer_sync.py",
        "WebRTCPeerSync"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "BrainIdentityConnector"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "MemoryIdentityIntegration"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "MockBrainIntegration"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "EntropyAnalysis"
      ],
      [
        "./identity/api/api.py",
        "QRGType"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "DataPoisoningDetector"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "AttackSimulationEngine"
      ],
      [
        "./creativity/creative_q_expression.py",
        "QuantumCreativeEngine"
      ],
      [
        "./creativity/creative_q_expression.py",
        "QuantumHaikuGenerator"
      ],
      [
        "./creativity/creative_q_expression.py",
        "QuantumMusicComposer"
      ],
      [
        "./creativity/creative_q_expression.py",
        "BioCognitiveCreativityLayer"
      ],
      [
        "./creativity/creative_q_expression.py",
        "CreativeIPProtector"
      ],
      [
        "./creativity/creative_q_expression.py",
        "CollaborativeCreativityOrchestrator"
      ],
      [
        "./creativity/creative_q_expression.py",
        "LukhasCreativeExpressionEngine"
      ],
      [
        "./creativity/healix_visualizer.py",
        "HealixVisualizer"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "MockEngine"
      ],
      [
        "./creativity/personality/brain.py",
        "LUKHASBrain"
      ],
      [
        "./bridge/integration_bridge.py",
        "PluginModuleAdapter"
      ],
      [
        "./bridge/integration_bridge.py",
        "IntegrationBridge"
      ],
      [
        "./bridge/integration_bridge.py",
        "BaseLucasModule"
      ],
      [
        "./bridge/integration_bridge.py",
        "LucasPluginManifest"
      ],
      [
        "./bridge/openai_core_service.py",
        "RateLimiter"
      ],
      [
        "./learning/learning_gateway.py",
        "LearningGateway"
      ],
      [
        "./learning/learning_hub.py",
        "CoreSystemIntegrationStatus"
      ],
      [
        "./learning/learning_hub.py",
        "CoreMetaLearningEnhancementSystem"
      ],
      [
        "./learning/system.py",
        "FewShotLearner"
      ],
      [
        "./learning/system.py",
        "ContinualLearner"
      ],
      [
        "./learning/usage_learning.py",
        "UserInteraction"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "MockMonitorDashboard"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "MockRateModulator"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "MockSymbolicFeedback"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "MetaLearningEnhancementsystem"
      ],
      [
        "./learning/learning_system.py",
        "FewShotLearner"
      ],
      [
        "./learning/learning_system.py",
        "ContinualLearner"
      ],
      [
        "./learning/federated_colony_learning.py",
        "LearningAgent"
      ],
      [
        "./learning/meta_learning/meta_core.py",
        "MetaCore"
      ],
      [
        "./consciousness/openai_consciousness_adapter.py",
        "ConsciousnessOpenAIAdapter"
      ],
      [
        "./consciousness/dream_bridge_adapter.py",
        "DreamBridge"
      ],
      [
        "./consciousness/dream_bridge.py",
        "DreamConsciousnessBridge"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "MetaLearningLoop"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "CoreComponent"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "AnthropicEthicsEngine"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "SelfAwareAdaptationModule"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "LUKHASConsciousnessEngine"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "SelfAwareAdaptationModule"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "LUKHASConsciousnessEngine"
      ],
      [
        "./consciousness/core/engine.py",
        "SelfAwareAdaptationModule"
      ],
      [
        "./consciousness/core/engine.py",
        "LUKHASConsciousnessEngine"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "QuantumCreativeConsciousness"
      ],
      [
        "./consciousness/quantum_integration/quantum_creative_consciousness.py",
        "QuantumCreativeDemo"
      ],
      [
        "./consciousness/systems/mapper.py",
        "ConsciousnessMapper"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "\u039bBotConsciousnessMonitor"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "\u039bBotAGICore"
      ],
      [
        "./consciousness/systems/\u039bBot_consciousness_monitor.py",
        "\u039bBotConsciousnessMonitor"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "DreamLoggerLoop"
      ],
      [
        "./tests/__init__.py",
        "PWMTestOrchestrator"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "PositiveGatingFilter"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "ContextAwareRecommendation"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "NIASEngine"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "DASTEngine"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "TaskCompatibilityEngine"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "SymbolicActivityTracker"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "GestureInterpretationSystem"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "RealtimeDataAggregator"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "ABASRegistry"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "ConflictDetector"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "ResolutionAlgorithm"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "ABASEngine"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "BioQuantumSymbolicReasoner"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "AdvancedConfidenceCalibrator"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "MultiBrainSymphonyOrchestrator"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "ReasoningContext"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "ScientificTheoryFormer"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "EthicalReasoner"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "MathematicalReasoner"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "MultiScaleReasoning"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "CrossBrainReasoningOrchestrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "QuantumBioSymbolicConfidenceIntegrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "BioQuantumSymbolicReasoner"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "AdvancedConfidenceCalibrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "MultiBrainSymphonyOrchestrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "ScientificTheoryFormer"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "EthicalReasoner"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "MathematicalReasoner"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "MultiScaleReasoning"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "CrossBrainReasoningOrchestrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "QuantumBioSymbolicConfidenceIntegrator"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "SymbolicEngine"
      ],
      [
        "./ethics/intrinsic_governor.py",
        "IntrinsicEthicalGovernor"
      ],
      [
        "./ethics/_spikethickness.py",
        "SpikethicknessValidator"
      ],
      [
        "./ethics/security/flagship_security_engine.py",
        "LukhasFlagshipSecurityEngine"
      ],
      [
        "./ethics/security/privacy.py",
        "PrivacyManager"
      ],
      [
        "./ethics/safety/integration_bridge.py",
        "LUKHASSafetyBridge"
      ],
      [
        "./voice/cognitive_voice.py",
        "CognitiveVoice"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "VoiceSwarmAgent"
      ],
      [
        "./voice/modularity_system.py",
        "LUKHASVoiceSystem"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "BrainSymphony"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "OscillationSynchronizer"
      ],
      [
        "./voice/integrations/elevenlabs/elevenlabs_client.py",
        "ElevenLabsClient"
      ],
      [
        "./voice/integrations/openai/dalle_client.py",
        "DALLEClient"
      ],
      [
        "./voice/integrations/openai/whisper_client.py",
        "WhisperClient"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "BaseColony"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "AlertManager"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "CPISecurityScanner"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "OllamaCodeFixer"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "TransformersCodeFixer"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "OpenAICodeFixer"
      ],
      [
        "./orchestration/specialized/loop_recovery_simulator.py",
        "LoopRecoverySimulation"
      ],
      [
        "./orchestration/brain/collapse_bridge.py",
        "CollapseBridge"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "EnhancedBrainIntegration"
      ],
      [
        "./orchestration/brain/integration_bridge.py",
        "LUKHASBrainBridge"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "CollapseSynchronizer"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "CollapseBridge"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "_StubColony"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "EnhancedBrainIntegration"
      ],
      [
        "./orchestration/brain/collapse_chain_integrity.py",
        "CollapseChainIntegrity"
      ],
      [
        "./orchestration/brain/brain.py",
        "LUKHASBrain"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "CollapseSynchronizer"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "AGIResponse"
      ],
      [
        "./orchestration/brain/integrity_probe.py",
        "IntegrityProbe"
      ],
      [
        "./orchestration/brain/drift_pattern_analyzer.py",
        "DriftPatternAnalyzer"
      ],
      [
        "./orchestration/brain/experience_manager.py",
        "ExperienceManager"
      ],
      [
        "./orchestration/brain/collapse_chain_simulator.py",
        "CollapseChainSimulator"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "LukhasAIAgent"
      ],
      [
        "./orchestration/brain/visualization/healix_visualizer.py",
        "HealixVisualizer"
      ],
      [
        "./orchestration/brain/visualization/golden_healix_mapper.py",
        "HealixMapper"
      ],
      [
        "./orchestration/brain/net/client.py",
        "BoundAsyncStream"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "_ProxyClient"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginError"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "PhysicsEngine"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "LUKHASCoreAdapter"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "BrainIntegrationAdapter"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "BrainSymphony"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "OscillationSynchronizer"
      ],
      [
        "./orchestration/brain/self_improvement/meta_learner.py",
        "MetaLearner"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "BaseValidator"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "SymbolicIntegrationValidator"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "EthicsValidator"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "ComplianceValidator"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "SecurityValidator"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "ConsciousnessValidator"
      ],
      [
        "./orchestration/brain/seamless/experience_core.py",
        "SeamlessExperience"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "EmotionConfig"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "EmotionHealth"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "AsyncTaskManager"
      ],
      [
        "./orchestration/core_modules/signal_middleware.py",
        "SignalMiddleware"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "ExamplePlugin"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "FunctionPlugin"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "SimpleAgent"
      ],
      [
        "./governance/core.py",
        "LucasGovernanceConfig"
      ],
      [
        "./governance/core.py",
        "LucasGovernanceHealth"
      ],
      [
        "./governance/core.py",
        "SymbolicFirewall"
      ],
      [
        "./governance/integration/policy_board.py",
        "EnhancedPolicyBoard"
      ],
      [
        "./api/core/services.py",
        "MemoryAPIService"
      ],
      [
        "./api/core/services.py",
        "DreamAPIService"
      ],
      [
        "./api/core/services.py",
        "ConsciousnessAPIService"
      ],
      [
        "./api/core/services.py",
        "EmotionAPIService"
      ],
      [
        "./api/core/services.py",
        "LearningAPIService"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "ColonyOrchestrator"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "ModalityData"
      ],
      [
        "./dream/core/dream_engine.py",
        "DreamQuantumConfig"
      ],
      [
        "./dream/core/dream_engine.py",
        "BioOrchestrator"
      ],
      [
        "./dream/core/dream_engine.py",
        "QuantumBioOscillator"
      ],
      [
        "./dream/core/dream_engine.py",
        "UnifiedIntegration"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "QuantumDreamAdapter"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "DreamQuantumConfig"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "BioOrchestrator"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "QuantumBioOscillator"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "UnifiedIntegration"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "DreamEngineSystem"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "DreamMemoryManager"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "DreamReflectionLoop"
      ],
      [
        "./dream/processors/dream_processor.py",
        "DreamProcessor"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "DummyMemory"
      ],
      [
        "./quantum/web_integration.py",
        "QuantumWebAuthenticator"
      ],
      [
        "./quantum/ui_generator.py",
        "QuantumUIOptimizer"
      ],
      [
        "./quantum/healix_mapper.py",
        "QuantumHealixMapper"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "QuantumLikeState"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "QuantumConfig"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "MockQuantumAwarenessSystem"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "MockQuantumDreamAdapter"
      ],
      [
        "./quantum/dream_adapter.py",
        "QuantumDreamAdapter"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "QuantumKeyDerivation"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "DistributedQuantumSafeOrchestrator"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "SecureProcessingNode"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "PostQuantumCryptographyEngine"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "BioSymbolicThreatDetector"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "QuantumVulnerabilityAnalyzer"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "AdaptiveSecurityOrchestrator"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "\u039bBotQuantumSecurityOrchestrator"
      ],
      [
        "./quantum/safe_blockchain.py",
        "QuantumSafeAuditBlockchain"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "QuantumNeuroSymbolicEngine"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "QuantumInspiredAttention"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "CausalReasoningModule"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "MockIDManager"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "MockAccessTier"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "MultiAGIOrchestratorMetrics"
      ],
      [
        "./quantum/phase_quantum_integration.py",
        "QuantumIntegrationTestSuite"
      ],
      [
        "./quantum/core/creative_engine.py",
        "MockQuantumContext"
      ],
      [
        "./quantum/core/creative_engine.py",
        "MockCreativeExpression"
      ],
      [
        "./quantum/core/creative_engine.py",
        "MockQuantumHaiku"
      ],
      [
        "./quantum/core/neural_symbolic_engine.py",
        "QuantumNeuralSymbolicProcessor"
      ],
      [
        "./quantum/privacy/zero_knowledge_system.py",
        "ZeroKnowledgePrivacyEngine"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "PartitionDetector"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "FallbackQuantumAttentionGate"
      ]
    ],
    "__init__:get_optimal_complexity": [
      [
        "./tools/documentation/plugin.py",
        "DocuTutorPlugin"
      ],
      [
        "./learning/plugin_learning_engine.py",
        "PluginLearningEngine"
      ]
    ],
    "__init__:update": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "InteractionPattern"
      ],
      [
        "./learning/usage_learning.py",
        "InteractionPattern"
      ],
      [
        "./ethics/oscillating_conscience.py",
        "OscillatingConscience"
      ]
    ],
    "__init__:get_document_effectiveness:get_popular_sequences:identify_patterns:recommend_next_docs:record_interaction:update_user_preferences": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "UsageBasedLearning"
      ],
      [
        "./learning/usage_learning.py",
        "UsageBasedLearning"
      ]
    ],
    "to_dict": [
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "AuditDecision"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "HealthCheckResult"
      ],
      [
        "./trace/drift_dashboard.py",
        "DriftSnapshot"
      ],
      [
        "./trace/drift_dashboard.py",
        "DriftAlert"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "ResourceSnapshot"
      ],
      [
        "./core/resource_optimization_integration.py",
        "ResourceMetrics"
      ],
      [
        "./core/id.py",
        "EmotionalMemoryVector"
      ],
      [
        "./core/id.py",
        "AuditLogEntry"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "EntropyMetrics"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "TagVarianceMetrics"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "DriftAlert"
      ],
      [
        "./core/tiered_state_management.py",
        "StateSnapshot"
      ],
      [
        "./core/actor_system.py",
        "ActorMessage"
      ],
      [
        "./core/p2p_communication.py",
        "PeerInfo"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "DreamEthicalAssessment"
      ],
      [
        "./core/audit/audit_trail.py",
        "AuditEvent"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "CollapseState"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "MemoryEntry"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "SymbolicAnomaly"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "ArchiveReport"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "MemoryTrace"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "RepairProtocol"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "SanctumManifest"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "Checkpoint"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "CausalEvidence"
      ],
      [
        "./memory/systems/trace_injector.py",
        "MemoryTrace"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "DistributedMemory"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "OrbVisualization"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "ConsciousnessState"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "ConsciousnessState"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "ExperienceEntry"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "EmotionalDrift"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "AlignmentScore"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "ReflectionEntry"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "ExperienceEntry"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "EmotionalDrift"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "AlignmentScore"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "ReflectionEntry"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "EmotionalMemoryVector"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "AuditLogEntry"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "SymbolicEvaluation"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "ReasoningChain"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "PredictionResult"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "ArbitrationResponse"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "EthicalViolation"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "InterventionAction"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "PerformanceMetrics"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "PluginMetadata"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "SymbolicElement"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "ArchetypalMapping"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "ArchetypalSession"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "ExperienceEntry"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "EmotionalDrift"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "AlignmentScore"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "ReflectionEntry"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "FusionCandidate"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "MutationResult"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "SymbolicAnomaly"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "DriftScore"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "DreamSeed"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "DreamGlyph"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "SecurityConfig"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "FallbackSimpleConfig"
      ]
    ],
    "__post_init__": [
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "TutorialStep"
      ],
      [
        "./bio/quantum_layer.py",
        "QuantumBioConfig"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "QuantumState"
      ],
      [
        "./core/integration_hub.py",
        "IntegrationConfig"
      ],
      [
        "./core/id.py",
        "QuantumSignature"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "EnergyTask"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "DreamMessage"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "SymbolicOperation"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "GeofenceRegion"
      ],
      [
        "./core/hub_services/coordinator.py",
        "CoordinationRequest"
      ],
      [
        "./memory/hooks/registry.py",
        "RegisteredHook"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "AtomicRule"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "GlyphMemoryIndex"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "EmbeddingCacheEntry"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "EmotionalAnchor"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "InferenceRequest"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "InferenceResult"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "ConstitutionalThresholds"
      ],
      [
        "./bridge/shared_state.py",
        "StateValue"
      ],
      [
        "./learning/learning_gateway.py",
        "LearningRequest"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "MetaLearningCycle"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "CognitiveState"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "EmotionalModulation"
      ],
      [
        "./consciousness/systems/mapper.py",
        "ConsciousnessProfile"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "EthicalState"
      ],
      [
        "./ethics/policy_engines/base.py",
        "Decision"
      ],
      [
        "./ethics/policy_engines/base.py",
        "EthicsEvaluation"
      ],
      [
        "./voice/systems/synthesis.py",
        "VoiceProfile"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "ConsciousnessState"
      ],
      [
        "./orchestration/brain/core/types.py",
        "SymbolicMetadata"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginCapabilities"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginPricing"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginDependencies"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginSecurity"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginManifest"
      ],
      [
        "./orchestration/brain/core/types.py",
        "LucasSystemState"
      ],
      [
        "./orchestration/brain/core/types.py",
        "UserSession"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginContext"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginExecutionContext"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginValidationSchema"
      ],
      [
        "./orchestration/brain/core/types.py",
        "SymbolicTrace"
      ],
      [
        "./orchestration/brain/core/types.py",
        "ConsciousnessMapping"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginMessage"
      ],
      [
        "./orchestration/brain/core/types.py",
        "PluginResponse"
      ],
      [
        "./orchestration/brain/core/types.py",
        "LoadedPlugin"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "EnhancementRequest"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "EnhancementResponse"
      ],
      [
        "./orchestration/core_modules/signals.py",
        "SymbolicSignal"
      ],
      [
        "./symbolic/loop_engine.py",
        "SymbolicState"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "DreamQuantumConfig"
      ],
      [
        "./quantum/layer.py",
        "QuantumBioConfig"
      ]
    ],
    "__init__:__repr__": [
      [
        "./bio/bio_utilities.py",
        "StressSignal"
      ],
      [
        "./bio/bio_utilities.py",
        "CuriositySpark"
      ],
      [
        "./bio/bio_utilities.py",
        "ResilienceBoost"
      ],
      [
        "./bio/bio_utilities.py",
        "StabilityAnchor"
      ],
      [
        "./bio/stress_signal.py",
        "StressSignal"
      ],
      [
        "./bio/curiosity_spark.py",
        "CuriositySpark"
      ],
      [
        "./bio/resilience_boost.py",
        "ResilienceBoost"
      ],
      [
        "./bio/stability_anchor.py",
        "StabilityAnchor"
      ]
    ],
    "__init__:_establish_connections": [
      [
        "./bio/bio_integration_hub.py",
        "BioSymbolicIntegrationHub"
      ],
      [
        "./core/interfaces/interfaces_hub.py",
        "CoreInterfacesHub"
      ]
    ],
    "__init__:get_system_status": [
      [
        "./bio/core.py",
        "BioCore"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "QuantumCreativeBridge"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "ContextAwareVoiceSystem"
      ],
      [
        "./orchestration/core.py",
        "OrchestrationCore"
      ],
      [
        "./orchestration/brain/orchestration/core.py",
        "OrchestrationCore"
      ],
      [
        "./quantum/creative_integration.py",
        "QuantumCreativeBridge"
      ]
    ],
    "__init__:_apply_measurement_decoherence:_calculate_variance:_get_timestamp:_initialize_quantum_like_state:apply_entanglement_effects:create_coherence_field:create_entanglement:evolve_quantum_like_state:get_oscillator_metrics:measure_quantum_property:oscillate:reset_oscillator:synchronize_with_rhythm": [
      [
        "./bio/quantum_layer.py",
        "QuantumBioOscillator"
      ],
      [
        "./quantum/layer.py",
        "QuantumBioOscillator"
      ]
    ],
    "__init__:_decay_stress:report:reset:should_fallback:update_stress": [
      [
        "./bio/core/symbolic_stress_gate.py",
        "StressGate"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "StressGate"
      ]
    ],
    "forward": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "QuantumTunnelFilter"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "VivoxAttention"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "OxintusReasoner"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "MAELayer"
      ],
      [
        "./bridge/model_communication_engine.py",
        "ModelCommunicationEngine"
      ],
      [
        "./bridge/model_communication_engine.py",
        "ModelCommunicationEngine"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "QuantumTunnelFilter"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "VivoxAttention"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "OxintusReasoner"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "MAELayer"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "MockQuantumTunnelFilter"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "MockRespiModule"
      ]
    ],
    "__init__:forward": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "CristaGate"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "RespiModule"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "CrossModalAttention"
      ],
      [
        "./bridge/model_communication_engine.py",
        "ModelCommunicationEngine"
      ],
      [
        "./bridge/model_communication_engine.py",
        "ModelCommunicationEngine"
      ],
      [
        "./bridge/model_communication_engine.py",
        "ModelCommunicationEngine"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "CristaGate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "RespiModule"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "MockCristaGate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "Module"
      ]
    ],
    "__init__:_bind_resource:allocate": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "ATPAllocator"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "ATPAllocator"
      ]
    ],
    "play": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "VivoxSection"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "OxintusBrass"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "MAEPercussion"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "VivoxSection"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "OxintusBrass"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "MAEPercussion"
      ]
    ],
    "__init__:_calculate_cristae_topology:_route_to_instrument:_synchronize:perform": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "MitochondrialConductor"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "MitochondrialConductor"
      ]
    ],
    "__init__:_induce_fission:_induce_fusion:optimize": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "CristaOptimizer"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "CristaOptimizer"
      ]
    ],
    "__init__:_induce_fission:_induce_fusion:_stabilize_topology:optimize:report_state": [
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "CristaOptimizer"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "CristaOptimizer"
      ]
    ],
    "__init__:_digest_component:generate_base64_glyph:generate_signature": [
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "GlyphIDHasher"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "GlyphIDHasher"
      ]
    ],
    "__init__:assess_alignment:is_synchronized:update_phase": [
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "MitoEthicsSync"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "MitoEthicsSync"
      ]
    ],
    "__init__:calculate_entropy:calculate_symbolic_drift:detect_recursive_drift_loops:emit_drift_alert:log_phase_mismatch:record_drift:register_drift:register_symbolic_state:summarize_drift": [
      [
        "./trace/symbolic_drift_tracker.py",
        "SymbolicDriftTracker"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "SymbolicDriftTracker"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "SymbolicDriftTracker"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "SymbolicDriftTracker"
      ]
    ],
    "__init__:_run:send": [
      [
        "./core/minimal_actor.py",
        "Actor"
      ],
      [
        "./core/core_utilities.py",
        "Actor"
      ]
    ],
    "to_json": [
      [
        "./core/resource_efficiency_analyzer.py",
        "EfficiencyReport"
      ],
      [
        "./symbolic/features/tracer.py",
        "DecisionTrail"
      ]
    ],
    "__init__:request_access": [
      [
        "./core/quorum_override.py",
        "QuorumOverride"
      ],
      [
        "./core/core_utilities.py",
        "QuorumOverride"
      ]
    ],
    "__init__:_calculate_emotional_similarity:_decrypt_data:_encrypt_data:_generate_emotional_key:_generate_standard_key:lock_memory:unlock_memory": [
      [
        "./core/id.py",
        "TraumaLockedMemory"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "TraumaLockedMemory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ]
    ],
    "__init__:_load_compliance_rules:check_compliance": [
      [
        "./core/id.py",
        "ComplianceMonitor"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "ComplianceMonitor"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ]
    ],
    "__init__:_generate_quantum_signature:_get_tier_permissions:_verify_biometrics:_verify_emergency_gesture:_verify_emoji_seed:_verify_sid_puzzle:get_compliance_status": [
      [
        "./core/id.py",
        "LukhosIDManager"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "LukhasIdManager"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "LukhasIdEnhancedReasoningEngine"
      ]
    ],
    "from_dict:to_dict": [
      [
        "./core/image_processing_pipeline.py",
        "ImageEvent"
      ],
      [
        "./core/event_sourcing.py",
        "Event"
      ],
      [
        "./core/quantum_identity_manager.py",
        "QuantumUserContext"
      ],
      [
        "./memory/structural_conscience.py",
        "ConscienceEntry"
      ],
      [
        "./memory/core.py",
        "DistributedMemoryEntry"
      ],
      [
        "./memory/dream_memory_fold.py",
        "DreamSnapshot"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "DistributedMemoryEntry"
      ],
      [
        "./memory/systems/simple_store.py",
        "MemoryEntry"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "MetaLearningPattern"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "SymbolicEntity"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "UserTierProfile"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "ComponentHealth"
      ]
    ],
    "process": [
      [
        "./core/notion_sync.py",
        "LambdaLoggerAdapter"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "ProtonGradient"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "QuantumInspiredAttention"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "SymbolicEngine"
      ]
    ],
    "__init__:run_consistency_check": [
      [
        "./core/core_utilities.py",
        "IntegrityProbe"
      ],
      [
        "./core/integrity_probe.py",
        "IntegrityProbe"
      ]
    ],
    "collect_metrics": [
      [
        "./core/core_utilities.py",
        "ResourceEfficiencyAnalyzer"
      ],
      [
        "./core/resource_efficiency.py",
        "ResourceEfficiencyAnalyzer"
      ]
    ],
    "__init__:get_custom_metrics": [
      [
        "./core/observability_steering.py",
        "ObservableActor"
      ],
      [
        "./core/observability_steering.py",
        "ObservableAgent"
      ]
    ],
    "__init__:qsize": [
      [
        "./core/mailbox.py",
        "UnboundedMailbox"
      ],
      [
        "./core/mailbox.py",
        "BoundedMailbox"
      ]
    ],
    "aggregate:can_handle": [
      [
        "./core/tiered_state_management.py",
        "StateAggregator"
      ],
      [
        "./core/tiered_state_management.py",
        "DefaultStateAggregator"
      ],
      [
        "./core/tiered_state_management.py",
        "CounterAggregator"
      ],
      [
        "./core/tiered_state_management.py",
        "MetricsAggregator"
      ]
    ],
    "check_consent:log_activity:verify_user_access": [
      [
        "./core/identity_aware_base.py",
        "FallbackIdentityClient"
      ],
      [
        "./memory/service.py",
        "IdentityClient"
      ],
      [
        "./creativity/service.py",
        "IdentityClient"
      ],
      [
        "./learning/service.py",
        "IdentityClient"
      ],
      [
        "./ethics/service.py",
        "IdentityClient"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "IdentityClient"
      ],
      [
        "./quantum/service.py",
        "IdentityClient"
      ]
    ],
    "receive": [
      [
        "./core/actor_model.py",
        "PingActor"
      ],
      [
        "./core/actor_model.py",
        "PongActor"
      ]
    ],
    "__init__:get_status": [
      [
        "./core/identity/mapper.py",
        "IdentityMapper"
      ],
      [
        "./core/identity/processor.py",
        "IdentityProcessor"
      ],
      [
        "./core/identity/engine.py",
        "IdentityEngine"
      ],
      [
        "./core/identity/persona_engine.py",
        "PersonaEngine"
      ],
      [
        "./core/integration/connectivity_engine.py",
        "ConnectivityEngine"
      ],
      [
        "./core/integration/system_bridge.py",
        "SystemBridge"
      ],
      [
        "./memory/systems/processor.py",
        "MemoryProcessor"
      ],
      [
        "./memory/systems/memory_validator.py",
        "MemoryValidator"
      ],
      [
        "./identity/identity_hub.py",
        "PersonaEngine"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "AwarenessEngine"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "AwarenessProcessor"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "AwarenessTracker"
      ],
      [
        "./consciousness/systems/validator.py",
        "ConsciousnessValidator"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "MetaCognition"
      ],
      [
        "./consciousness/systems/state.py",
        "ConsciousnessState"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "SelfReflectionEngine"
      ],
      [
        "./voice/validator.py",
        "VoiceValidator"
      ],
      [
        "./voice/recognition.py",
        "VoiceRecognition"
      ],
      [
        "./voice/speech_engine.py",
        "SpeechEngine"
      ],
      [
        "./voice/audio_processor.py",
        "AudioProcessor"
      ],
      [
        "./voice/audio_engine.py",
        "AudioEngine"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "MockBrainCore"
      ],
      [
        "./orchestration/workflow_engine.py",
        "WorkflowEngine"
      ],
      [
        "./orchestration/integration_engine.py",
        "LukhasIntegrationEngine"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "Agent"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "CognitiveNode"
      ],
      [
        "./orchestration/brain/core/types.py",
        "BaseLucasPlugin"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "MockBrainCore"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "WorkflowEngine"
      ],
      [
        "./quantum/validator.py",
        "QuantumValidator"
      ],
      [
        "./quantum/processor.py",
        "QuantumInspiredProcessor"
      ],
      [
        "./quantum/entanglement.py",
        "QuantumEntanglement"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "QuantumEntanglement"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "QuantumInspiredProcessor"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "QuantumValidator"
      ]
    ],
    "__init__:_integrate_results:_neural_process:_symbolic_process:process": [
      [
        "./core/integration/neural_symbolic_bridge.py",
        "NeuralSymbolicIntegration"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "NeuralSymbolicIntegration"
      ]
    ],
    "__init__:calculate_coherence": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "NeuroSymbolicPattern"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "NeuroSymbolicPattern"
      ]
    ],
    "__init__:_apply_bio_transformations:_apply_fusion_mode:_calculate_energy_cost:_calculate_fusion_strength:_calculate_pattern_complexity:_calculate_translation_confidence:_classify_neural_pattern:_create_error_pattern:_create_low_energy_pattern:_create_minimal_pattern:_default_config:_enhance_pattern_coherence:_extract_pattern_signature:_extract_symbolic_features:_find_symbolic_templates:_generate_predicates:_normalize_neural_pattern:_store_pattern:_symbolic_to_neural_embedding:adapt_fusion_weights:fuse_neural_symbolic:get_fusion_metrics:set_fusion_context:translate_neural_to_symbolic:translate_symbolic_to_neural": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "NeuroSymbolicFusionLayer"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "NeuroSymbolicFusionLayer"
      ]
    ],
    "__init__:get_capabilities": [
      [
        "./core/integration/dynamic_modality_broker.py",
        "VisionModality"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "AudioModality"
      ]
    ],
    "__init__:get_interaction_style:update_shyness": [
      [
        "./core/personality/personality.py",
        "ShynessModule"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "ShynessModule"
      ]
    ],
    "__init__:_attention_fusion:_federated_update:_generate_output:_multimodal_fusion:_select_models:_update_metrics:adaptive_learning_loop:federated_lifecycle:unified_processing": [
      [
        "./core/personality/creative_personality.py",
        "LucasAGI"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "LucasAGI"
      ]
    ],
    "analyze_context:generate_insights:get_model:get_model_output:incorporate_feedback:optimize_learning_approach": [
      [
        "./core/personality/creative_personality.py",
        "MetaLearningSystem"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "MetaLearningSystem"
      ]
    ],
    "contribute_gradients": [
      [
        "./core/personality/creative_personality.py",
        "FederatedLearningManager"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "FederatedLearningManager"
      ]
    ],
    "ethical_reasoning": [
      [
        "./core/personality/creative_personality.py",
        "ReflectiveIntrospectionSystem"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "ReflectiveIntrospectionSystem"
      ]
    ],
    "meta_haiku": [
      [
        "./core/personality/creative_personality.py",
        "NeuroHaikuGenerator"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "NeuroHaikuGenerator"
      ]
    ],
    "meta_draw": [
      [
        "./core/personality/creative_personality.py",
        "MetaDoodler"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "MetaDoodler"
      ]
    ],
    "plan_protest": [
      [
        "./core/personality/creative_personality.py",
        "EthicalProtestModule"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "EthicalProtestModule"
      ]
    ],
    "early_fusion:synthesize_response": [
      [
        "./core/personality/creative_personality.py",
        "HarmonyEngine"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "HarmonyEngine"
      ]
    ],
    "__init__:_add_sensory_detail:_apply_expansion_rules:_build_line:_create_base_haiku:_create_juxtaposition:_expand_haiku:_infuse_emotion:_load_style_preferences:generate_haiku:load_inspiration_profile": [
      [
        "./core/personality/creative_expressions.py",
        "NeuroHaikuGenerator"
      ],
      [
        "./creativity/creative_expression_core.py",
        "NeuroHaikuGenerator"
      ]
    ],
    "__call__:__init__": [
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "DecisionAuditDecorator"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "DecisionAuditDecorator"
      ],
      [
        "./creativity/creative_engine.py",
        "CircuitBreaker"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "Linear"
      ]
    ],
    "__init__:get_metrics": [
      [
        "./core/engines/identity_engine.py",
        "Identityengine"
      ],
      [
        "./core/engines/learning_engine.py",
        "Learningengine"
      ],
      [
        "./core/engines/creative_engine.py",
        "Creativeengine"
      ],
      [
        "./core/engines/consciousness_engine.py",
        "Consciousnessengine"
      ],
      [
        "./core/engines/communication_engine.py",
        "Communicationengine"
      ]
    ],
    "__init__:_analyze_common_ethical_issues:_create_mock_system:_simulate_meta_learning_system_discovery:_synchronize_quantum_signatures": [
      [
        "./core/meta_learning/enhancement_system.py",
        "MetaLearningEnhancementSystem"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "MetaLearningEnhancementsystem"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "MetaLearningEnhancementSystem"
      ]
    ],
    "__init__:_update_average_metric:get_biological_status:get_capability_level": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "ABASQuantumSpecialistWrapper"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "ABASQuantumSpecialistWrapper"
      ]
    ],
    "__init__:_calculate_ethical_resonance:_calculate_relevance:_calculate_tunneling_probabilities:_collapse_wavefunction:_create_ethical_wavefunction:quantum_ethical_arbitration": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "QuantumTunnelingEthics"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "QuantumTunnelingEthics"
      ]
    ],
    "__init__:_calculate_atp_potential:_calculate_processing_cost:_calculate_proton_concentration:_generate_attention_flow:create_attention_gradient:synthesize_symbolic_atp": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "ProtonMotiveProcessor"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "ProtonMotiveProcessor"
      ]
    ],
    "__init__:_analyze_topology_efficiency:_apply_cristae_transformation:_apply_hybrid_folding:_apply_lamellar_folding:_apply_tubular_folding:_calculate_atp_distribution:_calculate_improvement:_design_optimal_cristae:optimize_cristae_topology": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "CristaeTopologyManager"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "CristaeTopologyManager"
      ]
    ],
    "__init__:_advance_capability_level:_calculate_bio_confidence:_calculate_quantum_coherence:_classify_processing_type:_generate_cellular_signature:_passes_ethical_arbitration:_update_biological_metrics:get_biological_status": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "QuantumBiologicalAGI"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "QuantumBiologicalAGI"
      ]
    ],
    "analyze": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "NLPEngine"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "LocationAnalyzer"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "TimeAnalyzer"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "DeviceAnalyzer"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "CausalReasoningModule"
      ]
    ],
    "__init__:_select_voice:determine_parameters": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "VoiceModulator"
      ],
      [
        "./voice/modulator.py",
        "VoiceModulator"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "VoiceModulator"
      ]
    ],
    "__init__:_calculate_importance:get_relevant_memories:store_interaction": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "MemoryManager"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "MemoryManager"
      ]
    ],
    "HasField:SerializeToString:__init__": [
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "ProcessRequest"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "ProcessResponse"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HealthRequest"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HealthResponse"
      ]
    ],
    "register": [
      [
        "./core/hub_services/service_registry.py",
        "MemoryServiceProvider"
      ],
      [
        "./core/hub_services/service_registry.py",
        "LearningServiceProvider"
      ],
      [
        "./core/hub_services/service_registry.py",
        "ConsciousnessServiceProvider"
      ],
      [
        "./core/hub_services/service_registry.py",
        "IdentityServiceProvider"
      ],
      [
        "./core/hub_services/service_registry.py",
        "QuantumBioOptimizerProvider"
      ]
    ],
    "__init__:get_active_folds": [
      [
        "./memory/quantum_manager.py",
        "EnhancedMemoryManager"
      ],
      [
        "./memory/unified_memory_manager.py",
        "EnhancedMemoryManager"
      ],
      [
        "./memory/unified_memory_manager.py",
        "EnhancedMemoryManager"
      ],
      [
        "./memory/core/quantum_memory_manager.py",
        "EnhancedMemoryManager"
      ]
    ],
    "__init__:_rebuild_matrix:add_vector:search_similar": [
      [
        "./memory/core.py",
        "VectorStorageLayer"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "VectorStorageLayer"
      ]
    ],
    "__init__:compute_attention_scores": [
      [
        "./memory/core.py",
        "MemoryAttentionLayer"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "MemoryAttentionLayer"
      ]
    ],
    "__init__:decay_all_weights:get_tag_importance:update_tag_importance": [
      [
        "./memory/core.py",
        "ContinuousLearningEngine"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "ContinuousLearningEngine"
      ]
    ],
    "__init__:get_enhanced_statistics": [
      [
        "./memory/core.py",
        "HybridMemoryFold"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "HybridMemoryFold"
      ]
    ],
    "__init__:add_vector:get_memory_usage_stats": [
      [
        "./memory/core.py",
        "OptimizedVectorStorageLayer"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "OptimizedVectorStorageLayer"
      ]
    ],
    "__init__:_estimate_legacy_size:get_enhanced_statistics:get_optimization_statistics": [
      [
        "./memory/core.py",
        "OptimizedHybridMemoryFold"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "OptimizedHybridMemoryFold"
      ]
    ],
    "endpoint:is_alive": [
      [
        "./memory/core.py",
        "NodeInfo"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "NodeInfo"
      ]
    ],
    "__init__:get_network_status": [
      [
        "./memory/core.py",
        "DistributedMemoryFold"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "DistributedMemoryFold"
      ]
    ],
    "__init__:_apply_decoherence:_collapse_superposition:_entangle_quantum_like_states:_evolve_quantum_like_state:_initialize_quantum_like_state:_matches_criteria": [
      [
        "./memory/unified_memory_manager.py",
        "QuantumMemoryManager"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "QuantumMemoryManager"
      ]
    ],
    "__init__:_apply_drift_correction:_apply_state_correction:_calculate_drift_trend:_calculate_drift_vector:_compute_data_hash:_create_symbolic_state:_identify_common_drift_patterns:_matches_criteria:_matches_drift_pattern:_record_drift_event": [
      [
        "./memory/unified_memory_manager.py",
        "DriftMemoryManager"
      ],
      [
        "./memory/drift_memory_manager.py",
        "DriftMemoryManager"
      ]
    ],
    "__init__:_create_collapse_plot:_create_emotion_plot:_create_memory_plot:_quantum_modulate_memory:setup_visualization": [
      [
        "./memory/visualizer.py",
        "EnhancedMemoryVisualizer"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "EnhancedMemoryVisualizer"
      ]
    ],
    "__init__:_prepare_3d_data:launch_3d_viewer": [
      [
        "./memory/visualizer.py",
        "Enhanced3DVisualizer"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "Enhanced3DVisualizer"
      ]
    ],
    "quantum_modulate": [
      [
        "./memory/visualizer.py",
        "QuantumOscillator"
      ],
      [
        "./security/safety/coordinator.py",
        "QuantumOscillator"
      ],
      [
        "./security/safety/emergency_override.py",
        "QuantumOscillator"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "QuantumOscillator"
      ],
      [
        "./governance/integration/policy_board.py",
        "QuantumOscillator"
      ],
      [
        "./quantum/bio.py",
        "QuantumOscillator"
      ],
      [
        "./quantum/bio_components.py",
        "QuantumOscillator"
      ]
    ],
    "activation": [
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "PlaceCell"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "GridCell"
      ]
    ],
    "store:trace": [
      [
        "./memory/memory_systems/memoria-checkpoint.py",
        "Memoria"
      ],
      [
        "./memory/systems/memory_checkpoint.py",
        "Memoria"
      ]
    ],
    "__init__:_calculate_vector_similarity:_decrypt_data:_derive_memory_key:_encrypt_data:_generate_context_vector:_generate_secure_vector:_generate_system_key:_initialize_access_policies:_log_access_attempt:decrypt_memory:encrypt_memory:get_access_stats": [
      [
        "./memory/systems/memory_lock.py",
        "TraumaLockSystem"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "TraumaLockSystem"
      ]
    ],
    "__init__:_decrypt_data:_encrypt_data:cleanup:decrypt_memory_content:encrypt_memory_content:get_permission_status:get_shared_memories:notify_memory_removal:register_memory:revoke_memory_access:share_memory:verify_access_permission": [
      [
        "./memory/systems/memory_identity.py",
        "MemoryIdentityIntegration"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "MemoryIdentityIntegration"
      ]
    ],
    "codegen": [
      [
        "./memory/systems/memory_planning.py",
        "AllocFromPoolLine"
      ],
      [
        "./memory/systems/memory_planning.py",
        "DeallocFromPoolLine"
      ]
    ],
    "__init__:create_interactive_visualization:get_authorized_memories:get_memory_coordinates:update_memory_links:visualize_memory_helix": [
      [
        "./memory/systems/memory_helix_visualizer.py",
        "MemoryHelixVisualizer"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "MemoryHelixVisualizer"
      ]
    ],
    "__init__:get_integration_status": [
      [
        "./memory/systems/integration_adapters.py",
        "MemorySafetyIntegration"
      ],
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "MetaLearningEnhancementWrapper"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "MetaLearningEnhancementWrapper"
      ]
    ],
    "__init__:buffer_event": [
      [
        "./memory/systems/collapse_buffer.py",
        "CollapseBuffer"
      ],
      [
        "./symbolic/features/collapse/buffer.py",
        "CollapseBuffer"
      ]
    ],
    "__init__:get_collapse_history:log_collapse": [
      [
        "./memory/systems/collapse_trace.py",
        "CollapseTrace"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "CollapseTrace"
      ]
    ],
    "create": [
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "_MockChatCompletions"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "MEGChatCompletion"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "ProxyClientChatCompletions"
      ]
    ],
    "__init__:get_repair_statistics": [
      [
        "./memory/repair/trauma_repair_wrapper.py",
        "MemoryTraumaRepair"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "MemoryTraumaRepair"
      ]
    ],
    "__init__:_encrypt_value:_generate_encryption_key:_hash_pii_value:anonymize_data:apply_privacy_mechanisms:apply_retention_policy:check_permissions:create_gdpr_report:decrypt_field:encrypt_sensitive_fields:get_privacy_logs:get_privacy_setting:log_privacy_event:set_privacy_setting:set_user_permissions": [
      [
        "./identity/privacy_manager.py",
        "PrivacyManager"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "PrivacyManager"
      ]
    ],
    "__init__:to_dict": [
      [
        "./identity/core/id_service/entropy_engine.py",
        "EntropyAnalysis"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "PortabilityPackage"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "RecoveryAttempt"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "ValidationResult"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "UserContext"
      ],
      [
        "./config/fallback_settings.py",
        "FallbackSettings"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "CoherencePatch"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "DiagnosticResult"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "SymbolicPatch"
      ],
      [
        "./ethics/bases.py",
        "ComplianceViolation"
      ]
    ],
    "__init__:check_for_stagnation": [
      [
        "./creativity/affect_stagnation_detector.py",
        "AffectStagnationDetector"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "AffectStagnationDetector"
      ],
      [
        "./emotion/affect_detection/affect_stagnation_detector.py",
        "AffectStagnationDetector"
      ]
    ],
    "__init__:_adapt_cultural_context:_get_voice_profile:_record_session_usage": [
      [
        "./creativity/voice_integrator.py",
        "EnhancedVoiceIntegrator"
      ],
      [
        "./voice/integrator.py",
        "EnhancedVoiceIntegrator"
      ]
    ],
    "__init__:plan_protest": [
      [
        "./creativity/personality/creative_core.py",
        "EthicalProtestModule"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "EthicalProtestModule"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "EthicalProtestModule"
      ]
    ],
    "__init__:_add_emphasis:_add_pauses:_apply_personality_traits:_init_components:_should_enhance_text:_update_personality_traits:adapt_to_interaction:get_voice_modulation": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "VoicePersonalityIntegrator"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "VoicePersonalityCreativityEngine"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "VoicePersonalityIntegrator"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "VoicePersonalityIntegrator"
      ]
    ],
    "__init__:_init_analysis_symbols:_init_color_symbols:_init_composition_symbols:_init_emotion_symbols:_init_object_symbols:_init_provider_symbols:_init_quality_symbols:_init_symbolic_elements:analyze_symbolic_composition:calculate_visual_harmony:create_analysis_phrase:get_all_symbols:get_context_symbols:get_dominant_color_symbol:get_emotional_color_mapping:get_quality_indicators:get_symbol_for_analysis_type:get_symbol_for_provider": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "VocabularyCreativityEngine"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "Visionsymbolicvocabulary"
      ]
    ],
    "__init__:_ensure_default_parameters:add_feedback:evolve:from_dict:get_parameters_for_emotion:get_provider_parameters:record_usage:to_dict": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "VoiceProfilingEmotionEngine"
      ],
      [
        "./voice/voice_profiling.py",
        "VoiceProfile"
      ]
    ],
    "__init__:_load_profiles:_save_profile:create_profile:delete_profile:get_profile:list_profiles:provide_feedback:record_usage:select_profile_for_context": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "VoiceProfilingEmotionEngine"
      ],
      [
        "./voice/voice_profiling.py",
        "VoiceProfileManager"
      ]
    ],
    "__init__:generate_response:is_available": [
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "PerplexityWrapper"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "GeminiWrapper"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "AnthropicWrapper"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "AzureOpenaiWrapper"
      ]
    ],
    "__init__:deserialize:get_parameters:serialize:update_with_gradients": [
      [
        "./learning/federated_meta_learning.py",
        "FederatedModel"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "FederatedModel"
      ],
      [
        "./learning/federated_learning_system.py",
        "LukhasFederatedModel"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "FederatedModel"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "LukhasFederatedModel"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "FederatedModel"
      ]
    ],
    "__init__:_aggregate_model:_update_metrics:contribute_gradients:get_client_status:get_model:load_models:register_model:save_model": [
      [
        "./learning/federated_meta_learning.py",
        "FederatedLearningManager"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "FederatedLearningManager"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "FederatedLearningManager"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "FederatedLearningManager"
      ]
    ],
    "__init__:_analyze_interactions:_calculate_trend:_detect_error_patterns:_detect_user_patterns:_generate_improvement_plans:_implement_improvements:get_status_report:log_interaction:reflect": [
      [
        "./learning/federated_meta_learning.py",
        "ReflectiveIntrospectionSystem"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "ReflectiveIntrospectionSystem"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "ReflectiveIntrospectionSystem"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "ReflectiveIntrospectionSystem"
      ]
    ],
    "__init__:_adjust_strategy_parameters:_apply_strategy:_calculate_adaptation_progress:_calculate_sparsity:_calculate_strategy_match:_estimate_complexity:_evaluate_performance:_extract_learning_features:_generate_meta_insights:_initialize_strategies:_register_core_models:_select_strategy:_update_meta_parameters:_update_strategy_performance:generate_learning_report:get_federated_model:incorporate_feedback:optimize_learning_approach:trigger_reflection": [
      [
        "./learning/federated_meta_learning.py",
        "MetaLearningSystem"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "MetaLearningSystem"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "MetaLearningSystem"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "MetaLearningSystem"
      ]
    ],
    "__init__:_calculate_generalization_score:_calculate_memory_efficiency:_extract_applicable_domains": [
      [
        "./learning/system.py",
        "ModelAgnosticMetaLearner"
      ],
      [
        "./learning/learning_system.py",
        "ModelAgnosticMetaLearner"
      ]
    ],
    "__init__:_analyze_learning_history:_setup_logging": [
      [
        "./learning/system.py",
        "AdvancedLearningSystem"
      ],
      [
        "./learning/learning_system.py",
        "AdvancedLearningSystem"
      ]
    ],
    "__init__:_calculate_client_weight:_trigger_aggregation:contribute_gradients:get_model:get_system_status:load_models:register_model:save_model": [
      [
        "./learning/federated_learning_system.py",
        "LukhasFederatedLearningManager"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "LukhasFederatedLearningManager"
      ]
    ],
    "__init__:_adjust_strategy_parameters:_analyze_performance_trends:_apply_strategy:_calculate_adaptation_progress:_calculate_confidence:_calculate_sparsity:_calculate_strategy_match:_check_label_availability:_estimate_complexity:_estimate_noise_level:_evaluate_performance:_extract_learning_features:_generate_meta_insights:_initialize_strategies:_select_strategy:_update_meta_parameters:_update_strategy_performance:generate_learning_report:incorporate_feedback:optimize_learning_approach": [
      [
        "./learning/adaptive_meta_learning_system.py",
        "AdaptiveMetaLearningSystem"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "AdaptiveMetaLearningSystem"
      ]
    ],
    "__init__:_ensure_storage_exists:_get_model_path:_load_model:_persist_model:_weighted_update:contribute_gradients:get_model:register_model": [
      [
        "./learning/federated_learning.py",
        "FederatedLearningManager"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "FederatedLearningManager"
      ]
    ],
    "__init__:_calculate_adaptation_speed:_calculate_enhancement_factor:_calculate_overall_enhancement:_calculate_overall_stability:_calculate_rate_stability:_get_default_metrics:_normalize_membrane_potential": [
      [
        "./learning/meta_learning_adapter.py",
        "MetaLearningEnhancementAdapter"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "MetaLearningEnhancementAdapter"
      ]
    ],
    "__init__:_calculate_duration:_get_memory_usage:_save_system_state:init_components:register_event_handlers": [
      [
        "./learning/integrated_system_orchestrator.py",
        "AdaptiveAGISystem"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "MainNodeSecurityEngine"
      ],
      [
        "./orchestration/brain/main_node.py",
        "AdaptiveAGISystem"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "AdaptiveAGISystem"
      ]
    ],
    "__post_init__:_generate_quantum_signature": [
      [
        "./learning/meta_learning/federated_integration.py",
        "FederatedNode"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "Federatednode"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "FederatedNode"
      ]
    ],
    "__init__:_analyze_cross_node_patterns:_anonymize_data:_apply_privacy_filter:_apply_update_to_meta_learning_system:_calculate_coordinated_rate:_calculate_ethical_variance:_discover_federation_patterns:_ethical_audit_insight:_extract_federation_wisdom:_extract_learning_insights:_extract_symbolic_insights:_federation_ethical_audit:_gather_federation_convergence_signals:_gather_symbolic_patterns:_generate_collaborative_reasoning_insights:_generate_coordination_signature:_generate_update_signature:_process_federation_update:_should_sync_with_node:_synchronize_with_node:_update_node_trust:coordinate_learning_rates:enhance_existing_meta_learning_system:enhance_symbolic_reasoning_federation:get_federation_status:integrate_with_enhancement_system:receive_federation_updates:register_node:share_learning_insight:synchronize_federation": [
      [
        "./learning/meta_learning/federated_integration.py",
        "FederatedLearningIntegration"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "Federatedlearningintegration"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "FederatedLearningIntegration"
      ]
    ],
    "__post_init__:to_dict": [
      [
        "./consciousness/core/engine_complete.py",
        "ConsciousnessState"
      ],
      [
        "./consciousness/core/engine.py",
        "ConsciousnessState"
      ]
    ],
    "__init__:_analyze_symbolic_usage:_analyze_temporal_patterns:_assess_emotional_context:_detect_intentional_patterns:_generate_consciousness_signature:_init_symbolic_map": [
      [
        "./consciousness/core/engine_codex.py",
        "ConsciousnessPattern"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "ConsciousnessPattern"
      ]
    ],
    "__init__:_evaluate_privacy:_evaluate_transparency:_evaluate_user_agency:_get_improvement_suggestion": [
      [
        "./consciousness/core/engine_codex.py",
        "AnthropicEthicsEngine"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "AnthropicEthicsEngine"
      ],
      [
        "./consciousness/core/engine.py",
        "AnthropicEthicsEngine"
      ]
    ],
    "__init__:_calculate_drift_magnitude:_calculate_drift_velocity:_calculate_emotional_weight:_calculate_reflection_confidence:_calculate_stability_score:_calculate_time_window:_classify_emotional_tone:_create_experience_from_data:_create_neutral_alignment:_create_neutral_drift:_extract_emotional_indicators:_extract_symbolic_tags:_extract_symbolic_themes:_generate_alignment_recommendations:_generate_analytical_reflection:_generate_experience_prompts:_generate_lambda_tags:_generate_markdown_reflection:_generate_narrative_reflection:_generate_reflection_title:_identify_alignment_factors:_identify_drift_causes:_identify_misalignment_concerns:_is_binary_file:_parse_timestamp:_score_emotional_coherence:_score_growth_trajectory:_score_identity_continuity:_score_relational_awareness:_score_symbolic_alignment:_score_value_resonance:_synthesize_insights:identify_reflection_prompts": [
      [
        "./consciousness/reflection/lambda_mirror.py",
        "LambdaMirror"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "LambdaMirror"
      ]
    ],
    "__init__:_assess_care_preservation:_assess_duty_compliance:_assess_virtue_alignment:_calculate_drift_score:_calculate_utility:_determine_severity:_determine_trend:_generate_drift_recommendations:_generate_justification:_generate_recommendations:_identify_concerns:_identify_drift_factors:_synthesize_moral_score:get_status": [
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "GuardianReflector"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "GuardianReflector"
      ]
    ],
    "__init__:get_component_requirements": [
      [
        "./compliance/compliance_registry.py",
        "ComplianceRegistry"
      ],
      [
        "./orchestration/brain/compliance_registry.py",
        "ComplianceRegistry"
      ]
    ],
    "__init__:_get_processing_purposes:get_transparency_report": [
      [
        "./compliance/ai_compliance.py",
        "AIComplianceManager"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "AIComplianceManager"
      ]
    ],
    "__init__:get_reasoning_status": [
      [
        "./reasoning/\u039bBot_reasoning.py",
        "\u039bBotAdvancedReasoningOrchestrator"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "\u039bBotAdvancedReasoningOrchestrator"
      ]
    ],
    "__init__:_build_symbolic_logical_chains:_calculate_symbolic_confidences:_create_symbolic_summary:_elements_related:_extract_logical_elements:_extract_semantic_content:_extract_symbolic_patterns:apply_logic_operator:get_symbolic_insights:reason": [
      [
        "./reasoning/symbolic_reasoning.py",
        "SymbolicEngine"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "SymbolicEngine"
      ]
    ],
    "__init__:_apply_resolution_strategy:_calculate_entropy_delta:_calculate_final_confidence:_calculate_risk_level:_calculate_symbolic_coherence:_determine_collapse_type:_select_resolution_strategy:_update_symbolic_memory:_write_collapse_audit_log:emit_collapse_event:evaluate_branch_stability:get_collapse_statistics:initiate_collapse:log_entropy_threshold_crossing": [
      [
        "./reasoning/collapse_reasoner.py",
        "QuantumCollapseEngine"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "QuantumCollapseEngine"
      ]
    ],
    "__init__:_calculate_deontological_confidence:_find_duty_conflicts:_generate_humanity_reasoning:_generate_kingdom_reasoning:_generate_universalization_reasoning:_identify_relevant_duties:_resolve_duty_conflicts": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "DeontologicalReasoner"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "DeontologicalReasoner"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "DeontologicalReasoner"
      ]
    ],
    "__init__:_affects_capability:_calculate_consequentialist_confidence:_check_preference_satisfaction:_generate_utilitarian_justification:_priority_weighted_aggregation": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "ConsequentialistReasoner"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "ConsequentialistReasoner"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "ConsequentialistReasoner"
      ]
    ],
    "__init__:_calculate_value_drift_rate:_extract_values_from_text:_identify_misalignment_risks:_identify_relevant_values:_suggest_alignment_interventions": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "ValueAlignmentSystem"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "ValueAlignmentSystem"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "ValueAlignmentSystem"
      ]
    ],
    "__init__:_calculate_framework_consensus:_calculate_overall_confidence:_create_constraint_violation_judgment:_estimate_impact_magnitude:_estimate_impact_valence:_extract_principle_weights:_generate_mitigation_strategies:_identify_mitigation_needs:_identify_potential_harms:_identify_specific_impacts:_identify_uncertainty_factors:_initialize_default_constraints:_initialize_drift_detector": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "EthicalReasoningSystem"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "EthicalReasoningSystem"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "EthicalReasoningSystem"
      ]
    ],
    "__init__:_build_legal_knowledge_graph:check_access:check_cultural_context:log_violation": [
      [
        "./ethics/lukhas_ethics_guard.py",
        "LegalComplianceAssistant"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "LegalComplianceAssistant"
      ]
    ],
    "__init__:_add_to_history:_evaluate_against_framework:_evaluate_against_principle:_evaluate_autonomy:_evaluate_beneficence:_evaluate_care_ethics:_evaluate_deontological:_evaluate_justice:_evaluate_justice_principle:_evaluate_non_maleficence:_evaluate_privacy:_evaluate_transparency:_evaluate_utilitarian:_evaluate_virtue_ethics:_extract_action_type:_extract_content:evaluate_action:get_metrics:incorporate_feedback:increase_scrutiny_level:reset_scrutiny_level:suggest_alternatives": [
      [
        "./ethics/ethics_engine.py",
        "EthicsEngine"
      ],
      [
        "./ethics/compliance/engine.py",
        "_CorePrivateEthicsEngine"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "EthicsEngine"
      ]
    ],
    "__init__:_contains_sensitive_data:_update_plugin_risk_score:get_compliance_report:get_plugin_risk_score:get_violation_history": [
      [
        "./ethics/compliance.py",
        "EthicsComplianceEngine"
      ],
      [
        "./ethics/compliance_simple.py",
        "EthicsComplianceEngine"
      ]
    ],
    "__init__:_generate_anonymous_id:anonymize_metadata:check_voice_data_compliance:generate_compliance_report:get_compliance_status:should_retain_data:validate_content_against_ethical_constraints": [
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "Complianceengine"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "ComplianceEngine"
      ]
    ],
    "__hash__": [
      [
        "./ethics/redteam_sim.py",
        "HashableDict"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "SymbolicTag"
      ]
    ],
    "__init__:_enhance_voice_methods": [
      [
        "./voice/bio_core/voice/quantum_voice_enhancer.py",
        "QuantumVoiceEnhancer"
      ],
      [
        "./quantum/voice_enhancer.py",
        "QuantumVoiceEnhancer"
      ]
    ],
    "__init__:_calculate_entanglement_strength:_calculate_multi_brain_coherence:_encode_to_quantum_like_state:_extract_reasoning_conclusion:_extract_supporting_evidence:_generate_alternative_hypotheses:_synthesize_coherent_solution": [
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "BioQuantumSymbolicReasoner"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "BioQuantumSymbolicReasoner"
      ]
    ],
    "__init__:get_available_voices:get_default_voice_id:is_available:synthesize": [
      [
        "./voice/systems/voice_synthesis.py",
        "ElevenLabsProvider"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "EdgeTTSProvider"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "CoquiProvider"
      ]
    ],
    "__init__:_check_availability": [
      [
        "./voice/systems/synthesis.py",
        "EdgeTTSProvider"
      ],
      [
        "./voice/systems/synthesis.py",
        "CoquiProvider"
      ],
      [
        "./voice/systems/synthesis.py",
        "ElevenLabsProvider"
      ],
      [
        "./voice/systems/synthesis.py",
        "LocalTTSProvider"
      ]
    ],
    "__init__:_apply_attention_gates:_apply_superposition:_calculate_attention_distribution:_extract_features:_initialize_superposition:_update_entanglement_map:attend": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "QuantumInspiredAttention"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "QuantumInspiredAttention"
      ]
    ],
    "__init__:_generate_safe_response:_update_conversation_history:_update_performance_metrics:get_agi_status": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "EnhancedAGIBot"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "EnhancedAGIBot"
      ]
    ],
    "__init__:process_awareness": [
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "CanadianAwarenessEngine"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "UKAwarenessEngine"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "AustralianAwarenessEngine"
      ]
    ],
    "get_confidence:process": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "DastReasoner"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "Reasoner"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "Reasoner"
      ]
    ],
    "_get_module_type:calculate_sustainability_impact:evaluate_alignment:generate_recommendations": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "EnvironmentalAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "EnvironmentalAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "CognitiveAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "EmotionalAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "EnvironmentalAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "CognitiveAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "EmotionalAwarenessModule"
      ]
    ],
    "__init__:_initialize_modules:_setup_logging:get_system_status:process_awareness": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "DastAwarenessEngine"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "LukhasAwarenessEngine"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "LukhasAwarenessEngine"
      ]
    ],
    "detect_bias:explain_decision:get_confidence:process": [
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "EUReasoner"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "EUEnvironmentalReasoner"
      ]
    ],
    "__init__:_apply_attention_gates:_apply_superposition:_calculate_attention_distribution:_extract_features:_initialize_superposition:_update_entanglement_map": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "QuantumInspiredAttention"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "QuantumInspiredAttention"
      ]
    ],
    "__init__:_build_causal_chains:_calculate_causal_confidences:_extract_causal_elements:_extract_reasoning_path:_identify_primary_cause:_summarize_chain:_update_causal_graph:_update_history": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "CausalReasoningModule"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "CausalReasoningModule"
      ]
    ],
    "__init__:_create_high_confidence_response:_create_low_confidence_response:_create_medium_confidence_response:_generate_image_prompt:_generate_suggested_actions:_should_generate_image:get_processing_stats": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "QuantumNeuroSymbolicEngine"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "QuantumNeuroSymbolicEngine"
      ]
    ],
    "__init__:process": [
      [
        "./orchestration/brain/research_awareness_engine.py",
        "QuantumInspiredProcessor"
      ],
      [
        "./symbolic/bio/bio_symbolic.py",
        "BioSymbolic"
      ]
    ],
    "__call__:__init__:_compliance_status:_generate_quantum_signature:_get_module_type:_identify_risk_factors:_persist_to_store:calculate_sustainability_impact:evaluate_alignment:generate_recommendations": [
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "AwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "AwarenessModule"
      ]
    ],
    "_calculate_sustainability_metrics:_identify_optimization_opportunities:get_confidence:process": [
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "EnhancedEnvReasoner"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "EnhancedEnvReasoner"
      ]
    ],
    "_get_module_type:evaluate_alignment": [
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "SocialAwarenessModule"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "SocialAwarenessModule"
      ]
    ],
    "__init__:_calculate_emotion_distance:get_voice_modulation_params:update_emotional_state": [
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "EnhancedEmotionalProcessor"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "EnhancedEmotionalProcessor"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "EnhancedEmotionalProcessor"
      ]
    ],
    "__init__:_generate_dream_associations:dream_consolidate_memories:retrieve_with_emotional_context:store_memory_with_emotion": [
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "EnhancedMemorySystem"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "EnhancedMemorySystem"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "EnhancedMemorySystem"
      ]
    ],
    "__init__:collapse_trace_matrix": [
      [
        "./orchestration/brain/unified_collapse_system.py",
        "BrainCollapseManager"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "BrainCollapseManager"
      ]
    ],
    "__init__:_analyze_emotional_context:_calculate_pattern_confidence:_calculate_relationship_strength:_extract_patterns:_find_memory_relationships": [
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "DreamProcessorIntegration"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "DreamProcessorIntegration"
      ]
    ],
    "validate": [
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "ProtestEthicsValidator"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "ProtestEthicsValidator"
      ]
    ],
    "__init__:_check_peaceful_intent:verify": [
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "LegalComplianceAssistant"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "LegalComplianceAssistant"
      ]
    ],
    "__init__:activate_safeguards:check_compliance:compliance_score:fetch_live_compliance_updates:initiate_emergency_shutdown:log_violation:recalibrate_safeguards": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "GlobalComplianceFramework"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "GlobalComplianceFramework"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "GlobalComplianceFramework"
      ]
    ],
    "__init__:adapt_weights:get_priority_weights": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "EthicalHierarchy"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "EthicalHierarchy"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "EthicalHierarchy"
      ]
    ],
    "__init__:create_ethical_circuit:explain_decision:fallback_protocol:human_review_required:measure_ethical_state:symbolic_fallback_ethics": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "QuantumEthicalHandler"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "QuantumEthicalHandler"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "QuantumEthicalHandler"
      ]
    ],
    "__init__:check_bias:check_data_protection:check_transparency:validate_operation": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "LegalComplianceLayer"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "LegalComplianceLayer"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "LegalComplianceLayer"
      ]
    ],
    "__init__:_analyze_context:_anonymize_data:_human_oversight_protocol:_modulate_ethical_weights:_safe_fallback_response:_synthesize_output:adaptive_context_simplification:assess_stakeholder_impact:check_adversarial_input:compute_context_entropy:compute_system_health_factor:modulate_emotional_state:monitor_post_market:play_sound:process_decision:recalibrate_autonomy": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "LucasAGI"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "LucasAGI"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "LucasAGI"
      ]
    ],
    "__init__:adjust_parameters:modulate_emotion": [
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "EmotionalOscillator"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "EmotionalOscillator"
      ]
    ],
    "__init__:_consolidate_memories:_find_memory_relationship:_group_similar_patterns": [
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "DreamProcessor"
      ],
      [
        "./dream/cli/dream_processor.py",
        "DreamProcessor"
      ]
    ],
    "__init__:_calculate_avg_awareness:_get_awareness_history:_get_coherence_trend:_get_processing_depth:_get_uptime": [
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "ConsciousnessPlatformAPI"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "ConsciousnessPlatformAPI"
      ]
    ],
    "__init__:_generate_id": [
      [
        "./api/commercial/memory_services/memory_api.py",
        "MemoryServicesAPI"
      ],
      [
        "./deployments/memory_services/memory_services/memory_api.py",
        "MemoryServicesAPI"
      ]
    ],
    "__init__:_generate_dream_id:_get_timestamp": [
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "DreamCommerceAPI"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "DreamCommerceAPI"
      ]
    ],
    "__init__:process_signal": [
      [
        "./symbolic/features/memory_reflection_template.py",
        "MemoryReflectionTemplate"
      ],
      [
        "./symbolic/features/moral_agent_template.py",
        "MoralAgentTemplate"
      ]
    ],
    "__init__:_alert_collapse_reasoner:_analyze_drift_for_session:_apply_nonlinear_scaling:_calculate_emotional_drift:_calculate_entropy_drift:_calculate_ethical_drift:_calculate_phase_mismatch_score:_calculate_shannon_entropy:_calculate_state_entropy:_calculate_symbol_set_drift:_calculate_temporal_decay:_count_active_quarantines:_detect_cascade_patterns:_detect_exact_sequence_loops:_detect_frequency_oscillations:_detect_similar_pattern_loops:_emit_to_external_systems:_generate_recommendations:_generate_state_hash:_implement_symbolic_quarantine:_is_oscillating_pattern:_trigger_cascade_safety_measures:calculate_entropy:calculate_symbolic_drift:detect_recursive_drift_loops:emit_drift_alert:log_phase_mismatch:record_drift:register_drift:register_symbolic_state:summarize_drift": [
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "SymbolicDriftTracker"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "SymbolicDriftTracker"
      ]
    ],
    "__init__:_initialize_components": [
      [
        "./dream/visualization.py",
        "ConsolidatedVisualization"
      ],
      [
        "./dream/commerce_api.py",
        "ConsolidatedCommerceapi"
      ]
    ],
    "__init__:adjust_baseline_from_drift": [
      [
        "./emotion/mood_regulator.py",
        "MoodRegulator"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "MoodRegulator"
      ]
    ],
    "__init__:_calculate_coherence:_calculate_quantum_advantage:_get_entanglement_state:_prepare_quantum_signal:_set_coherence_level:_update_quantum_like_state:get_quantum_like_state:get_quantum_metrics": [
      [
        "./quantum/processing_core.py",
        "QuantumProcessingCore"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "QuantumProcessingCore"
      ]
    ],
    "__init__:adjust_entanglement:quantum_modulate": [
      [
        "./quantum/systems/quantum_engine.py",
        "Quantumoscillator"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "QuantumOscillator"
      ]
    ]
  },
  "common_imports": {
    "import:os": 326,
    "import:ast": 24,
    "import:json": 686,
    "from:collections:defaultdict": 73,
    "from:pathlib:Path": 291,
    "import:hashlib": 234,
    "import:sys": 130,
    "import:datetime": 36,
    "import:argparse": 52,
    "import:asyncio": 628,
    "from:datetime:datetime": 472,
    "from:datetime:datetime,timedelta": 193,
    "import:logging": 823,
    "from:typing:Dict,Any,List": 30,
    "from:typing:Dict,Any,List,Optional": 53,
    "from:typing:Optional,Dict,Any": 36,
    "from:enum:Enum": 367,
    "from:pydantic:BaseModel": 9,
    "from:pydantic:BaseModel,Field": 13,
    "from:typing:Dict,List,Optional": 12,
    "import:numpy": 314,
    "import:re": 113,
    "from:collections:Counter": 19,
    "from:typing:Dict,Optional": 12,
    "from:dataclasses:dataclass": 150,
    "import:time": 307,
    "from:collections:defaultdict,Counter": 17,
    "import:importlib.util": 8,
    "import:traceback": 27,
    "from:typing:Dict,List,Any,Optional": 44,
    "from:dataclasses:dataclass,asdict": 48,
    "from:datetime:datetime,timezone": 120,
    "from:typing:Dict,List,Any,Optional,Union": 16,
    "import:structlog": 303,
    "from:cryptography.fernet:Fernet": 18,
    "from:cryptography.hazmat.primitives:hashes": 9,
    "from:cryptography.hazmat.primitives.kdf.pbkdf2:PBKDF2HMAC": 10,
    "import:aiofiles": 6,
    "import:uuid": 183,
    "import:psutil": 19,
    "import:aiohttp": 16,
    "from:dataclasses:dataclass,field": 237,
    "import:pandas": 25,
    "from:collections:defaultdict,deque": 54,
    "from:fastapi.middleware.cors:CORSMiddleware": 6,
    "import:uvicorn": 8,
    "import:subprocess": 38,
    "from:typing:Dict,List,Any,Optional,Tuple,Set": 15,
    "import:yaml": 8,
    "import:shutil": 12,
    "from:typing:Dict,Any,Optional": 44,
    "from:typing:Dict,List,Any,Optional,Tuple,Union": 16,
    "import:inspect": 10,
    "import:statistics": 11,
    "from:typing:Dict,Any": 34,
    "import:random": 110,
    "from:typing:Dict": 13,
    "from:typing:Dict,Any,List,Optional,Tuple": 27,
    "import:math": 99,
    "import:importlib": 14,
    "from:typing:Dict,List,Any,Optional,Tuple": 55,
    "from:__future__:annotations": 33,
    "from:typing:Dict,Any,Optional,List": 71,
    "from:core.service_discovery:get_service_discovery": 9,
    "from:typing:Any,Dict,List,Optional": 33,
    "from:typing:Optional": 20,
    "from:collections:deque": 23,
    "from:core.colonies.base_colony:BaseColony": 32,
    "from:core.symbolism.tags:TagScope,TagPermission": 16,
    "from:typing:Dict,Any,List,Optional,Union": 9,
    "import:torch": 29,
    "import:torch.nn": 13,
    "from:typing:Dict,Any,List,Optional,Tuple,Set": 10,
    "from:collections:deque,defaultdict": 9,
    "import:warnings": 7,
    "from:abc:ABC,abstractmethod": 86,
    "import:base64": 54,
    "from:dataclasses:dataclass,field,asdict": 12,
    "import:streamlit": 34,
    "import:plotly.graph_objects": 11,
    "import:plotly.express": 8,
    "from:plotly.subplots:make_subplots": 8,
    "from:datetime:datetime,timezone,timedelta": 53,
    "from:core.symbolic.drift.symbolic_drift_tracker:SymbolicDriftTracker": 7,
    "from:typing:Dict,List,Optional,Tuple,Any": 22,
    "from:typing:List": 11,
    "import:matplotlib.pyplot": 21,
    "from:memory.emotional:EmotionalMemory": 13,
    "from:typing:Dict,Any,List,Optional,Set,Tuple,Union": 12,
    "from:dataclasses:dataclass,asdict,field": 20,
    "from:memory.emotional:EmotionalMemory,EmotionVector": 9,
    "import:queue": 9,
    "import:threading": 52,
    "from:core.colonies.reasoning_colony:ReasoningColony": 7,
    "from:core.colonies.memory_colony:MemoryColony": 6,
    "from:core.colonies.creativity_colony:CreativityColony": 6,
    "import:gc": 6,
    "from:typing:Any,Dict,List": 11,
    "from:typing:List,Dict,Any": 8,
    "import:secrets": 27,
    "import:openai": 54,
    "from:enum:Enum,auto": 20,
    "from:cryptography.hazmat.primitives:hashes,serialization": 8,
    "from:cryptography.hazmat.primitives.asymmetric:rsa,padding": 8,
    "from:cryptography.hazmat.primitives.ciphers:Cipher,algorithms,modes": 7,
    "from:PIL:Image": 6,
    "from:functools:wraps": 9,
    "from:orchestration.golden_trio.trio_orchestrator:TrioOrchestrator": 10,
    "from:typing:Any,Dict,Optional": 10,
    "from:core.efficient_communication:MessagePriority": 6,
    "import:sqlite3": 6,
    "import:pickle": 14,
    "import:weakref": 9,
    "import:zlib": 6,
    "from:identity.interface:IdentityClient": 16,
    "from:dotenv:load_dotenv": 10,
    "import:copy": 12,
    "import:gzip": 10,
    "import:torch.nn.functional": 7,
    "from:typing:Dict,Any,List,Optional,Tuple,Union": 7,
    "from:typing:Dict,Any,Optional,List,Callable": 6,
    "import:struct": 9,
    "import:typing": 7,
    "from:typing:Dict,List,Optional,Any": 40,
    "import:requests": 20,
    "from:io:BytesIO": 11,
    "from:typing:Any": 7,
    "from:concurrent.futures:ThreadPoolExecutor": 6,
    "from:memory.enhanced_memory_manager:EnhancedMemoryManager": 10,
    "from:typing:Any,Dict,List,Optional,Set,Tuple,Union,Callable": 12,
    "from:reasoning.symbolic_reasoning:SymbolicEngine": 8,
    "from:uuid:uuid4": 24,
    "from:typing:Any,Dict,List,Optional,Tuple": 10,
    "from:typing:Dict,List,Optional,Any,Tuple": 8,
    "from:typing:Any,Dict,Optional,List": 6,
    "from:openai:AsyncOpenAI": 8,
    "from:ethics.seedra.seedra_core:SEEDRACore": 7,
    "from:datetime:datetime,timedelta,timezone": 14,
    "from:orchestration.brain.spine.trait_manager:load_traits": 7,
    "from:typing:Dict,Any,List,Optional,Set,Tuple": 9,
    "from:pydantic:BaseModel,Field,field_validator": 8,
    "import:seaborn": 6,
    "from:typing:Dict,Any,Optional,List,Union": 13,
    "from:typing:Any,Dict,List,Optional,Set,Tuple,Union": 16,
    "from:memory.structural_conscience:create_structural_conscience": 8,
    "from:typing:Dict,List,Optional,Tuple,Any,Union": 10,
    "from:typing:Dict,List,Any": 17,
    "from:typing_extensions:Literal": 10,
    "import:io": 7,
    "import:networkx": 6,
    "from:typing:Dict,Any,Optional,List,Tuple": 20,
    "from:typing:Dict,List,Any,Tuple,Optional": 9,
    "import:tempfile": 8,
    "from:typing:List,Dict,Any,Optional": 9,
    "import:unittest": 6,
    "from:utils.shared_logging:get_logger": 6,
    "import:anthropic": 6,
    "from:backend.security.privacy_manager:PrivacyManager": 6,
    "from:core.models:BaseModel": 9,
    "from:typing:Dict,List,Tuple,Protocol,Optional,Any,Union": 6,
    "from:MultiBrainSymphony:MultiBrainSymphonyOrchestrator,DreamsBrainSpecialist,MemoryBrainSpecialist,LearningBrainSpecialist": 6
  },
  "naming_patterns": {
    "main": [
      [
        "./tools/radical_simplifier.py",
        "main"
      ],
      [
        "./tools/speak.py",
        "main"
      ],
      [
        "./tools/manifesto.py",
        "main"
      ],
      [
        "./tools/about.py",
        "main"
      ],
      [
        "./tools/tier.py",
        "main"
      ],
      [
        "./tools/ethics.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_OPERATIONAL_SUMMARY.py",
        "main"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "main"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "main"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "main"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "main"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "main"
      ],
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "main"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "main"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "main"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "main"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "main"
      ],
      [
        "./trace/drift_dashboard_visual.py",
        "main"
      ],
      [
        "./trace/entropy/radar.py",
        "main"
      ],
      [
        "./trace/diagnostics/entropy_radar.py",
        "main"
      ],
      [
        "./core/api_diff_analyzer.py",
        "main"
      ],
      [
        "./core/symbolic_boot.py",
        "main"
      ],
      [
        "./core/notion_sync.py",
        "main"
      ],
      [
        "./core/validation_script_fixes.py",
        "main"
      ],
      [
        "./core/targeted_api_fixes.py",
        "main"
      ],
      [
        "./core/interfaces/main.py",
        "main"
      ],
      [
        "./core/interfaces/tools/dao/dao_vote.py",
        "main"
      ],
      [
        "./core/interfaces/tools/dao/dao_propose.py",
        "main"
      ],
      [
        "./memory/connection_visualizer.py",
        "main"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "main"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "main"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "main"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "main"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "main"
      ],
      [
        "./identity/qrg_showcase.py",
        "main"
      ],
      [
        "./identity/deployment_package.py",
        "main"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "main"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "main"
      ],
      [
        "./learning/enhancement_engine.py",
        "main"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "main"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "main"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "main"
      ],
      [
        "./tests/security/test_red_team_integration.py",
        "main"
      ],
      [
        "./ethics/audit_ethics_monitor.py",
        "main"
      ],
      [
        "./ethics/redteam_sim.py",
        "main"
      ],
      [
        "./ethics/ethics.py",
        "main"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "main"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "main"
      ],
      [
        "./voice/interfaces/eleven_tts.py",
        "main"
      ],
      [
        "./orchestration/security/dast/verify.py",
        "main"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "main"
      ],
      [
        "./orchestration/brain/pr_security_review_github_actions.py",
        "main"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "main"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "main"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "main"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "main"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "main"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "main"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "main"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "main"
      ],
      [
        "./orchestration/brain/vulnerability_dashboard.py",
        "main"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "main"
      ],
      [
        "./orchestration/brain/cpu_friendly_compliance.py",
        "main"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "main"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "main"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "main"
      ],
      [
        "./orchestration/brain/spine/hash.py",
        "main"
      ],
      [
        "./orchestration/brain/rem/generate_dream.py",
        "main"
      ],
      [
        "./orchestration/brain/rem/generate_dream_data.py",
        "main"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_cli.py",
        "main"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "main"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "main"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "main"
      ],
      [
        "./dream/tools/run_dream_analysis.py",
        "main"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "main"
      ],
      [
        "./dream/core/dream_cli.py",
        "main"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "main"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "main"
      ],
      [
        "./quantum/vault_manager.py",
        "main"
      ],
      [
        "./quantum/utils/add_module_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_poetic_headers.py",
        "main"
      ],
      [
        "./quantum/utils/fix_proper_ascii.py",
        "main"
      ],
      [
        "./quantum/utils/fix_ascii_headers.py",
        "main"
      ],
      [
        "./quantum/utils/regenerate_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/fix_module_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_compliant_headers.py",
        "main"
      ],
      [
        "./quantum/utils/add_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_verbose_intelligent_descriptions.py",
        "main"
      ],
      [
        "./quantum/utils/add_template_reference.py",
        "main"
      ]
    ],
    "init": [
      [
        "./tools/radical_simplifier.py",
        "__init__"
      ],
      [
        "./tools/generate_lukhas_ecosystem_documentation.py",
        "__init__"
      ],
      [
        "./tools/enhanced_ecosystem_documentation.py",
        "__init__"
      ],
      [
        "./tools/documentation/plugin.py",
        "__init__"
      ],
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "__init__"
      ],
      [
        "./tools/documentation/content_generation_engine/doc_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/memory_evolution.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/document_analyzer.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/version_control.py",
        "__init__"
      ],
      [
        "./tools/documentation/memory_evolution/bio_oscillator.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/generate_function_index.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_FUNCTIONAL_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "__init__"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "__init__"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "__init__"
      ],
      [
        "./tools/analysis/ISOLATED_FILES_ASSESSMENT.py",
        "__init__"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "__init__"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "__init__"
      ],
      [
        "./tools/enterprise/structured_audit_logger.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/observability_system.py",
        "__init__"
      ],
      [
        "./tools/enterprise/api_framework.py",
        "__init__"
      ],
      [
        "./tools/enterprise/security_scanner.py",
        "__init__"
      ],
      [
        "./tools/scripts/claude_memory_integration.py",
        "__init__"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "__init__"
      ],
      [
        "./tools/dev/practical_integration_hub.py",
        "__init__"
      ],
      [
        "./tools/dev/smart_consolidation.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/api_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/documentation_analytics.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "__init__"
      ],
      [
        "./tools/documentation_suite/ai_documentation_engine/ecosystem_documentation_generator.py",
        "__init__"
      ],
      [
        "./bio/endocrine_integration.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/bio_utilities.py",
        "__init__"
      ],
      [
        "./bio/stress_signal.py",
        "__init__"
      ],
      [
        "./bio/curiosity_spark.py",
        "__init__"
      ],
      [
        "./bio/bio_integration_hub.py",
        "__init__"
      ],
      [
        "./bio/bio_engine.py",
        "__init__"
      ],
      [
        "./bio/trust_binder.py",
        "__init__"
      ],
      [
        "./bio/resilience_boost.py",
        "__init__"
      ],
      [
        "./bio/simulation_controller.py",
        "__init__"
      ],
      [
        "./bio/core.py",
        "__init__"
      ],
      [
        "./bio/quantum_layer.py",
        "__init__"
      ],
      [
        "./bio/protein_synthesizer.py",
        "__init__"
      ],
      [
        "./bio/recovery_protocol.py",
        "__init__"
      ],
      [
        "./bio/symbolic_entropy_observer.py",
        "__init__"
      ],
      [
        "./bio/bio_hub.py",
        "__init__"
      ],
      [
        "./bio/endocrine_daily_operations.py",
        "__init__"
      ],
      [
        "./bio/stability_anchor.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/hormonal_system.py",
        "__init__"
      ],
      [
        "./bio/core/systems_mitochondria_model.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_adaptive_threshold_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_preprocessing_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_stress_gate.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "__init__"
      ],
      [
        "./bio/core/bio_symbolic_swarm_hub.py",
        "__init__"
      ],
      [
        "./bio/core/adapters_voice_adapter.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_anomaly_filter_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_glyph_id_hash.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/oscillators_oscillator.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "__init__"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "__init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "__init__"
      ],
      [
        "./bio/optimization/topology_manager.py",
        "__init__"
      ],
      [
        "./bio/awareness/awareness.py",
        "__init__"
      ],
      [
        "./trace/drift_tools.py",
        "__init__"
      ],
      [
        "./trace/drift_harmonizer.py",
        "__init__"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./trace/restabilization_index.py",
        "__init__"
      ],
      [
        "./trace/drift_alignment_controller.py",
        "__init__"
      ],
      [
        "./trace/drift_metrics.py",
        "__init__"
      ],
      [
        "./trace/drift_dashboard.py",
        "__init__"
      ],
      [
        "./trace/entropy/radar.py",
        "__init__"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "__init__"
      ],
      [
        "./trace/diagnostics/engine.py",
        "__init__"
      ],
      [
        "./core/minimal_actor.py",
        "__init__"
      ],
      [
        "./core/fault_tolerance.py",
        "__init__"
      ],
      [
        "./core/integrated_system.py",
        "__init__"
      ],
      [
        "./core/ai_interface.py",
        "__init__"
      ],
      [
        "./core/integration_hub.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/swarm.py",
        "__init__"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "__init__"
      ],
      [
        "./core/quorum_override.py",
        "__init__"
      ],
      [
        "./core/resource_scheduler.py",
        "__init__"
      ],
      [
        "./core/plugin_registry.py",
        "__init__"
      ],
      [
        "./core/symbolic_contract.py",
        "__init__"
      ],
      [
        "./core/actor_supervision_integration.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/integrator.py",
        "__init__"
      ],
      [
        "./core/resource_optimization_integration.py",
        "__init__"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/id.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/api_diff_analyzer.py",
        "__init__"
      ],
      [
        "./core/p2p_fabric.py",
        "__init__"
      ],
      [
        "./core/event_replayer.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/image_processing_pipeline.py",
        "__init__"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "__init__"
      ],
      [
        "./core/oracle_nervous_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/integrated_safety_system.py",
        "__init__"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/tier_unification_adapter.py",
        "__init__"
      ],
      [
        "./core/symbolic_boot.py",
        "__init__"
      ],
      [
        "./core/core_hub.py",
        "__init__"
      ],
      [
        "./core/core_hub.py",
        "__init__"
      ],
      [
        "./core/cluster_sharding.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/enhanced_swarm.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/event_sourcing.py",
        "__init__"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/specialized_colonies.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "__init__"
      ],
      [
        "./core/symbolic_arbitration.py",
        "__init__"
      ],
      [
        "./core/core_system.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/practical_optimizations.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/fallback_services.py",
        "__init__"
      ],
      [
        "./core/consistency_manager.py",
        "__init__"
      ],
      [
        "./core/module_registry.py",
        "__init__"
      ],
      [
        "./core/event_bus.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/core_utilities.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/supervision.py",
        "__init__"
      ],
      [
        "./core/bot.py",
        "__init__"
      ],
      [
        "./core/common.py",
        "__init__"
      ],
      [
        "./core/common.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/efficient_communication.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/observability_steering.py",
        "__init__"
      ],
      [
        "./core/integrity_probe.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/collaboration.py",
        "__init__"
      ],
      [
        "./core/task_manager.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/mailbox.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/event_replay_snapshot.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base_colony.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/monitoring_observability.py",
        "__init__"
      ],
      [
        "./core/quantum_identity_manager.py",
        "__init__"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "__init__"
      ],
      [
        "./core/quantized_cycle_manager.py",
        "__init__"
      ],
      [
        "./core/tiered_state_management.py",
        "__init__"
      ],
      [
        "./core/tiered_state_management.py",
        "__init__"
      ],
      [
        "./core/hub_registry.py",
        "__init__"
      ],
      [
        "./core/direct_ai_router.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "__init__"
      ],
      [
        "./core/identity_aware_base.py",
        "__init__"
      ],
      [
        "./core/actor_model.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/agent_coordination.py",
        "__init__"
      ],
      [
        "./core/coordination.py",
        "__init__"
      ],
      [
        "./core/coordination.py",
        "__init__"
      ],
      [
        "./core/identity_integration.py",
        "__init__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__init__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/actor_system.py",
        "__init__"
      ],
      [
        "./core/p2p_communication.py",
        "__init__"
      ],
      [
        "./core/service_discovery.py",
        "__init__"
      ],
      [
        "./core/global_initialization.py",
        "__init__"
      ],
      [
        "./core/governance.py",
        "__init__"
      ],
      [
        "./core/state_management.py",
        "__init__"
      ],
      [
        "./core/observatory.py",
        "__init__"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/self_improvement.py",
        "__init__"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "__init__"
      ],
      [
        "./core/agi/consciousness_stream.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/autonomous_learning.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/agi/self_healing.py",
        "__init__"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/creativity_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/oracle_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/memory_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/base_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/governance_colony_enhanced.py",
        "__init__"
      ],
      [
        "./core/colonies/governance_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/reasoning_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "__init__"
      ],
      [
        "./core/colonies/ethics_swarm_colony.py",
        "__init__"
      ],
      [
        "./core/symbolic_bridge/token_map.py",
        "__init__"
      ],
      [
        "./core/symbolic_bridge/integrator.py",
        "__init__"
      ],
      [
        "./core/identity/mapper.py",
        "__init__"
      ],
      [
        "./core/identity/processor.py",
        "__init__"
      ],
      [
        "./core/identity/engine.py",
        "__init__"
      ],
      [
        "./core/identity/persona_engine.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/identity/manager.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/security/agi_security.py",
        "__init__"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./core/integration/system_coordinator.py",
        "__init__"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "__init__"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "__init__"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./core/integration/connectivity_engine.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "__init__"
      ],
      [
        "./core/integration/layer.py",
        "__init__"
      ],
      [
        "./core/integration/system_bridge.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/personality.py",
        "__init__"
      ],
      [
        "./core/personality/creative_personality.py",
        "__init__"
      ],
      [
        "./core/personality/creative_expressions.py",
        "__init__"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "__init__"
      ],
      [
        "./core/symbolic_diagnostics/trace_repair_engine.py",
        "__init__"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "__init__"
      ],
      [
        "./core/observability/collector.py",
        "__init__"
      ],
      [
        "./core/introspection/introspector.py",
        "__init__"
      ],
      [
        "./core/bridges/identity_core_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/__init__.py",
        "__init__"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/core_consciousness_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "__init__"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "__init__"
      ],
      [
        "./core/tagging/tagging_system.py",
        "__init__"
      ],
      [
        "./core/tagging/tagging_system.py",
        "__init__"
      ],
      [
        "./core/safety/constitutional_safety.py",
        "__init__"
      ],
      [
        "./core/safety/predictive_harm_prevention.py",
        "__init__"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "__init__"
      ],
      [
        "./core/safety/multi_agent_consensus.py",
        "__init__"
      ],
      [
        "./core/safety/safety_hub.py",
        "__init__"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "__init__"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_analytics.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_integration_example.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./core/audit/audit_trail.py",
        "__init__"
      ],
      [
        "./core/engines/identity_engine.py",
        "__init__"
      ],
      [
        "./core/engines/learning_engine.py",
        "__init__"
      ],
      [
        "./core/engines/creative_engine.py",
        "__init__"
      ],
      [
        "./core/engines/consciousness_engine.py",
        "__init__"
      ],
      [
        "./core/engines/communication_engine.py",
        "__init__"
      ],
      [
        "./core/ai/integration_manager.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/examples/mailbox_demo.py",
        "__init__"
      ],
      [
        "./core/symbolism/methylation_model.py",
        "__init__"
      ],
      [
        "./core/symbolism/archiver.py",
        "__init__"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "__init__"
      ],
      [
        "./core/governance/governance_colony.py",
        "__init__"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "__init__"
      ],
      [
        "./core/meta_learning/federated_integration.py",
        "__init__"
      ],
      [
        "./core/meta_learning/enhancement_system.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__init__"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "__init__"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./core/user_interface_manager/text_handler.py",
        "__init__"
      ],
      [
        "./core/user_interface_manager/voice_handler.py",
        "__init__"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "__init__"
      ],
      [
        "./core/monitoring/collapse_integration.py",
        "__init__"
      ],
      [
        "./core/monitoring/drift_monitor.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "__init__"
      ],
      [
        "./core/infrastructure/base_node.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "__init__"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "__init__"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/__init__.py",
        "__init__"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "__init__"
      ],
      [
        "./core/modules/nias/openai_adapter.py",
        "__init__"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "__init__"
      ],
      [
        "./core/data/crud_operations.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./core/interaction/symptom_reporter.py",
        "__init__"
      ],
      [
        "./core/base/base_config.py",
        "__init__"
      ],
      [
        "./core/base/base_health.py",
        "__init__"
      ],
      [
        "./core/base/symbolic.py",
        "__init__"
      ],
      [
        "./core/base/symbolic.py",
        "__init__"
      ],
      [
        "./core/base/ethics.py",
        "__init__"
      ],
      [
        "./core/base/base_module.py",
        "__init__"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "__init__"
      ],
      [
        "./core/services/location/tracker.py",
        "__init__"
      ],
      [
        "./core/interfaces/interfaces_hub.py",
        "__init__"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/dashboard_colony_agent.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/dynamic_tab_system.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/universal_adaptive_dashboard.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/fallback_system.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/self_healing_manager.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/core/morphing_engine.py",
        "__init__"
      ],
      [
        "./core/interfaces/dashboard/api/websocket_server.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/client.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/common/errors.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/rest/app.py",
        "__init__"
      ],
      [
        "./core/interfaces/api/v1/rest/middleware.py",
        "__init__"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "__init__"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/delivery_loop.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "__init__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "__init__"
      ],
      [
        "./core/hub_services/coordinator.py",
        "__init__"
      ],
      [
        "./core/hub_services/service_registry.py",
        "__init__"
      ],
      [
        "./memory/openai_memory_adapter.py",
        "__init__"
      ],
      [
        "./memory/service.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_core.py",
        "__init__"
      ],
      [
        "./memory/services.py",
        "__init__"
      ],
      [
        "./memory/voice_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/structural_conscience.py",
        "__init__"
      ],
      [
        "./memory/quantum_manager.py",
        "__init__"
      ],
      [
        "./memory/memory_hub.py",
        "__init__"
      ],
      [
        "./memory/fold_engine.py",
        "__init__"
      ],
      [
        "./memory/evolution.py",
        "__init__"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/emotional.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/core.py",
        "__init__"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_fold.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/memory_optimization.py",
        "__init__"
      ],
      [
        "./memory/dashboard.py",
        "__init__"
      ],
      [
        "./memory/distributed_state_manager.py",
        "__init__"
      ],
      [
        "./memory/distributed_state_manager.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/unified_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/basic.py",
        "__init__"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/drift_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/emotional_memory_manager_unified.py",
        "__init__"
      ],
      [
        "./memory/node.py",
        "__init__"
      ],
      [
        "./memory/loop_monitor.py",
        "__init__"
      ],
      [
        "./memory/dream_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "__init__"
      ],
      [
        "./memory/memory_colonies.py",
        "__init__"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/memoria.py",
        "__init__"
      ],
      [
        "./memory/memory_visualization.py",
        "__init__"
      ],
      [
        "./memory/visualizer.py",
        "__init__"
      ],
      [
        "./memory/visualizer.py",
        "__init__"
      ],
      [
        "./memory/tools/lambda_vault_scan.py",
        "__init__"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "__init__"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_colony.py",
        "__init__"
      ],
      [
        "./memory/colonies/base_memory_colony.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/colonies/episodic_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/core/base_manager.py",
        "__init__"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "__init__"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "__init__"
      ],
      [
        "./memory/core/quantum_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "__init__"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "__init__"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "__init__"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/episodic/episodic_memory.py",
        "__init__"
      ],
      [
        "./memory/convergence/memory_trace_harmonizer.py",
        "__init__"
      ],
      [
        "./memory/adapters/creativity_adapter.py",
        "__init__"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "__init__"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "__init__"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "__init__"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "__init__"
      ],
      [
        "./memory/resonance/resonant_memory_access.py",
        "__init__"
      ],
      [
        "./memory/hooks/registry.py",
        "__init__"
      ],
      [
        "./memory/hooks/base.py",
        "__init__"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "__init__"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "__init__"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "__init__"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "__init__"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__init__"
      ],
      [
        "./memory/systems/replay_system.py",
        "__init__"
      ],
      [
        "./memory/systems/replay_system.py",
        "__init__"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_mirror.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_snapshot.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_loop_rebuilder.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "__init__"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_lock.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_helix.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_identity.py",
        "__init__"
      ],
      [
        "./memory/systems/identity_lineage_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_resonance_analyzer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/resonance_memory_retrieval.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_example.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_example.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_node.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_helix_golden.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "__init__"
      ],
      [
        "./memory/systems/helix_dna.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__init__"
      ],
      [
        "./memory/systems/__init__.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_processing.py",
        "__init__"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "__init__"
      ],
      [
        "./memory/systems/core.py",
        "__init__"
      ],
      [
        "./memory/systems/core.py",
        "__init__"
      ],
      [
        "./memory/systems/processor.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_validator.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/trace_injector.py",
        "__init__"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_collapse_verifier.py",
        "__init__"
      ],
      [
        "./memory/systems/agent_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning_wrapper.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_planning_mock.py",
        "__init__"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "__init__"
      ],
      [
        "./memory/systems/quantum_memory_architecture.py",
        "__init__"
      ],
      [
        "./memory/systems/simple_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_bases.py",
        "__init__"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "__init__"
      ],
      [
        "./memory/systems/simple_store.py",
        "__init__"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "__init__"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "__init__"
      ],
      [
        "./memory/systems/recall_handler.py",
        "__init__"
      ],
      [
        "./memory/systems/tier_system.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_stabilizer.py",
        "__init__"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_helix_visualizer.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/module_integrations.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/symbolic_delta_compression.py",
        "__init__"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "__init__"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_trace_linker.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "__init__"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__init__"
      ],
      [
        "./memory/systems/causal_identity_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "__init__"
      ],
      [
        "./memory/systems/collapse_buffer.py",
        "__init__"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__init__"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "__init__"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "__init__"
      ],
      [
        "./memory/systems/voice_memory_bridge.py",
        "__init__"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "__init__"
      ],
      [
        "./memory/systems/memoria/dreams.py",
        "__init__"
      ],
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "__init__"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "__init__"
      ],
      [
        "./memory/consolidation/memory_consolidation.py",
        "__init__"
      ],
      [
        "./memory/consolidation/memory_consolidator.py",
        "__init__"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "__init__"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "__init__"
      ],
      [
        "./memory/repair/advanced_trauma_repair.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_wrapper.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./memory/repair/trauma_repair_mock.py",
        "__init__"
      ],
      [
        "./memory/repair/helix_repair_module.py",
        "__init__"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "__init__"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "__init__"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "__init__"
      ],
      [
        "./identity/qrg_integration.py",
        "__init__"
      ],
      [
        "./identity/qrg_integration.py",
        "__init__"
      ],
      [
        "./identity/interface.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/identity_hub.py",
        "__init__"
      ],
      [
        "./identity/privacy_manager.py",
        "__init__"
      ],
      [
        "./identity/qrg_showcase.py",
        "__init__"
      ],
      [
        "./identity/deployment_package.py",
        "__init__"
      ],
      [
        "./identity/deployment_package.py",
        "__init__"
      ],
      [
        "./identity/qrg_coverage_integration.py",
        "__init__"
      ],
      [
        "./identity/connector.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/multi_user_sync.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/webrtc_peer_sync.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/authentication_server.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "__init__"
      ],
      [
        "./identity/auth_backend/qr_entropy_generator.py",
        "__init__"
      ],
      [
        "./identity/tools/onboarding_cli.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "__init__"
      ],
      [
        "./identity/auth_utils/replay_protection.py",
        "__init__"
      ],
      [
        "./identity/core/qrs_manager.py",
        "__init__"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "__init__"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "__init__"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "__init__"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "__init__"
      ],
      [
        "./identity/core/verifold_connector.py",
        "__init__"
      ],
      [
        "./identity/core/visualization/consciousness_mapper.py",
        "__init__"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/mnemonic.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "__init__"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "__init__"
      ],
      [
        "./identity/core/swarm/tier_aware_swarm_hub.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/consciousness_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "__init__"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "__init__"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "__init__"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "__init__"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "__init__"
      ],
      [
        "./identity/core/auth/biometric_integration.py",
        "__init__"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "__init__"
      ],
      [
        "./identity/core/sent/consent_manager.py",
        "__init__"
      ],
      [
        "./identity/core/sent/consent_history.py",
        "__init__"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "__init__"
      ],
      [
        "./identity/core/sent/symbolic_scopes.py",
        "__init__"
      ],
      [
        "./identity/core/tagging/identity_tag_resolver.py",
        "__init__"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__init__"
      ],
      [
        "./identity/core/integrations/memory_connector.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/distributed_glyph_generation.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/steganographic_id.py",
        "__init__"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "__init__"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/qrg_generator.py",
        "__init__"
      ],
      [
        "./identity/core/qrs/session_replay.py",
        "__init__"
      ],
      [
        "./identity/core/onboarding/onboarding_config.py",
        "__init__"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "__init__"
      ],
      [
        "./identity/core/qrg/qrg_manager.py",
        "__init__"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "__init__"
      ],
      [
        "./identity/core/sing/cross_device_manager.py",
        "__init__"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "__init__"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "__init__"
      ],
      [
        "./identity/enterprise/auth.py",
        "__init__"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "__init__"
      ],
      [
        "./identity/wearables_integration/entropy_beacon.py",
        "__init__"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "__init__"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "__init__"
      ],
      [
        "./identity/auth/cultural_profile_manager.py",
        "__init__"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "__init__"
      ],
      [
        "./identity/auth/entropy_synchronizer.py",
        "__init__"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "__init__"
      ],
      [
        "./identity/utils/entropy_calculator.py",
        "__init__"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "__init__"
      ],
      [
        "./identity/utils/entropy_helpers.py",
        "__init__"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "__init__"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "__init__"
      ],
      [
        "./identity/utils/qrg_parser.py",
        "__init__"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "__init__"
      ],
      [
        "./identity/governance/policy_board.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/api.py",
        "__init__"
      ],
      [
        "./identity/api/onboarding_api.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "__init__"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "__init__"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__init__"
      ],
      [
        "./config/fallback_settings.py",
        "__init__"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "__init__"
      ],
      [
        "./security/hardware_root.py",
        "__init__"
      ],
      [
        "./security/moderator.py",
        "__init__"
      ],
      [
        "./security/moderator.py",
        "__init__"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "__init__"
      ],
      [
        "./security/safety/coordinator.py",
        "__init__"
      ],
      [
        "./security/safety/emergency_override.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/adversarial_testing/prompt_injection_suite.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/validation_frameworks/security_control_validation.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/penetration_testing/ai_penetration_tester.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "__init__"
      ],
      [
        "./security/red_team_framework/attack_simulation/attack_scenario_generator.py",
        "__init__"
      ],
      [
        "./creativity/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/creative_q_expression.py",
        "__init__"
      ],
      [
        "./creativity/service.py",
        "__init__"
      ],
      [
        "./creativity/creative_expression_core.py",
        "__init__"
      ],
      [
        "./creativity/services.py",
        "__init__"
      ],
      [
        "./creativity/healix_visualizer.py",
        "__init__"
      ],
      [
        "./creativity/creative_market.py",
        "__init__"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/creative_engine.py",
        "__init__"
      ],
      [
        "./creativity/emotional_resonance.py",
        "__init__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "__init__"
      ],
      [
        "./creativity/voice_integrator.py",
        "__init__"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "__init__"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "__init__"
      ],
      [
        "./creativity/personality/brain.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/creative_core.py",
        "__init__"
      ],
      [
        "./creativity/personality/voice/voice_personality.py",
        "__init__"
      ],
      [
        "./creativity/narrative/symbolic_weaver.py",
        "__init__"
      ],
      [
        "./creativity/engines/engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "__init__"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "__init__"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "__init__"
      ],
      [
        "./bridge/symbolic_memory_mapper.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/colony_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/integration_bridge.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/openai_core_service.py",
        "__init__"
      ],
      [
        "./bridge/trace_logger.py",
        "__init__"
      ],
      [
        "./bridge/symbolic_dream_bridge.py",
        "__init__"
      ],
      [
        "./bridge/shared_state.py",
        "__init__"
      ],
      [
        "./bridge/symbolic_reasoning_adapter.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/model_communication_engine.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/unified_openai_client.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "__init__"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/learning_gateway.py",
        "__init__"
      ],
      [
        "./learning/service.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/learning_hub.py",
        "__init__"
      ],
      [
        "./learning/plugin_learning_engine.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/system.py",
        "__init__"
      ],
      [
        "./learning/services.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/usage_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_learning_system.py",
        "__init__"
      ],
      [
        "./learning/federated_learning_system.py",
        "__init__"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "__init__"
      ],
      [
        "./learning/enhancement_engine.py",
        "__init__"
      ],
      [
        "./learning/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "__init__"
      ],
      [
        "./learning/federated_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_adapter.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/learning_system.py",
        "__init__"
      ],
      [
        "./learning/exponential_learning.py",
        "__init__"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/_dict_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_learning_recovery.py",
        "__init__"
      ],
      [
        "./learning/federated_colony_learning.py",
        "__init__"
      ],
      [
        "./learning/federated_colony_learning.py",
        "__init__"
      ],
      [
        "./learning/tutor.py",
        "__init__"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "__init__"
      ],
      [
        "./learning/embodied_thought/generative_reflex.py",
        "__init__"
      ],
      [
        "./learning/meta/MetaLearningAdapter.py",
        "__init__"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/adaptive_interface_generator.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/meta_core.py",
        "__init__"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "__init__"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "__init__"
      ],
      [
        "./red_team/__init__.py",
        "__init__"
      ],
      [
        "./consciousness/service.py",
        "__init__"
      ],
      [
        "./consciousness/service.py",
        "__init__"
      ],
      [
        "./consciousness/services.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "__init__"
      ],
      [
        "./consciousness/openai_consciousness_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/dream_bridge_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_consciousness_hub.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/dream_bridge.py",
        "__init__"
      ],
      [
        "./consciousness/consciousness_hub.py",
        "__init__"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__init__"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration_wrapper.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_visualizer.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_creative_consciousness.py",
        "__init__"
      ],
      [
        "./consciousness/quantum_integration/quantum_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "__init__"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "__init__"
      ],
      [
        "./consciousness/perception/symbolic_nervous_system.py",
        "__init__"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "__init__"
      ],
      [
        "./consciousness/systems/validator.py",
        "__init__"
      ],
      [
        "./consciousness/systems/integrator.py",
        "__init__"
      ],
      [
        "./consciousness/systems/mapper.py",
        "__init__"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_bot_consciousness_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/consciousness_colony_integration.py",
        "__init__"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "__init__"
      ],
      [
        "./consciousness/systems/\u039bBot_consciousness_monitor.py",
        "__init__"
      ],
      [
        "./consciousness/systems/state.py",
        "__init__"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "__init__"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "__init__"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "__init__"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "__init__"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "__init__"
      ],
      [
        "./tests/__init__.py",
        "__init__"
      ],
      [
        "./tests/simulation/agents_of_failure.py",
        "__init__"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "__init__"
      ],
      [
        "./tests/governance/test_comprehensive_governance.py",
        "__init__"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/core/nias_engine.py",
        "__init__"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/core/dast_engine.py",
        "__init__"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/core/abas_engine.py",
        "__init__"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "__init__"
      ],
      [
        "./compliance/compliance_registry.py",
        "__init__"
      ],
      [
        "./compliance/ai_compliance.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/global_compliance/multi_jurisdiction_engine.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/eu_ai_act/compliance_validator.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "__init__"
      ],
      [
        "./compliance/ai_regulatory_framework/gdpr/data_protection_validator.py",
        "__init__"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "__init__"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/\u039bBot_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "__init__"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "__init__"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "__init__"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "__init__"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "__init__"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "__init__"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "__init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_integration.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "__init__"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "__init__"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "__init__"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "__init__"
      ],
      [
        "./reasoning/analysis/engine.py",
        "__init__"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "__init__"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "__init__"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "__init__"
      ],
      [
        "./reasoning/utils/agentic_trace.py",
        "__init__"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "__init__"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "__init__"
      ],
      [
        "./reasoning/diagnostics/trace_mapper.py",
        "__init__"
      ],
      [
        "./reasoning/decision/bridge.py",
        "__init__"
      ],
      [
        "./reasoning/decision/bridge.py",
        "__init__"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "__init__"
      ],
      [
        "./ethics/compliance_engine.py",
        "__init__"
      ],
      [
        "./ethics/service.py",
        "__init__"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "__init__"
      ],
      [
        "./ethics/oscillating_conscience.py",
        "__init__"
      ],
      [
        "./ethics/ethics_engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance.py",
        "__init__"
      ],
      [
        "./ethics/intrinsic_governor.py",
        "__init__"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "__init__"
      ],
      [
        "./ethics/compliance_simple.py",
        "__init__"
      ],
      [
        "./ethics/batch_guard.py",
        "__init__"
      ],
      [
        "./ethics/simplified_ethics_integration.py",
        "__init__"
      ],
      [
        "./ethics/__init__.py",
        "__init__"
      ],
      [
        "./ethics/_spikethickness.py",
        "__init__"
      ],
      [
        "./ethics/decision_node.py",
        "__init__"
      ],
      [
        "./ethics/ethics_guard.py",
        "__init__"
      ],
      [
        "./ethics/export_report.py",
        "__init__"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "__init__"
      ],
      [
        "./ethics/ethical_auditor.py",
        "__init__"
      ],
      [
        "./ethics/engine.py",
        "__init__"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "__init__"
      ],
      [
        "./ethics/hitlo_bridge_simple.py",
        "__init__"
      ],
      [
        "./ethics/meg_guard.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "__init__"
      ],
      [
        "./ethics/meg_bridge.py",
        "__init__"
      ],
      [
        "./ethics/compliance_validator.py",
        "__init__"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/bases.py",
        "__init__"
      ],
      [
        "./ethics/ethics_integration.py",
        "__init__"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "__init__"
      ],
      [
        "./ethics/tools/quantum_mesh_visualizer.py",
        "__init__"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "__init__"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "__init__"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "__init__"
      ],
      [
        "./ethics/fallback/ethics_layer.py",
        "__init__"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "__init__"
      ],
      [
        "./ethics/security/security_engine.py",
        "__init__"
      ],
      [
        "./ethics/security/flagship_security_engine.py",
        "__init__"
      ],
      [
        "./ethics/security/privacy.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/compliance/engine.py",
        "__init__"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "__init__"
      ],
      [
        "./ethics/safety/integration_bridge.py",
        "__init__"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "__init__"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "__init__"
      ],
      [
        "./voice/validator.py",
        "__init__"
      ],
      [
        "./voice/emotional_modulator.py",
        "__init__"
      ],
      [
        "./voice/recognition.py",
        "__init__"
      ],
      [
        "./voice/message_handler.py",
        "__init__"
      ],
      [
        "./voice/personality.py",
        "__init__"
      ],
      [
        "./voice/voice_cultural_integrator.py",
        "__init__"
      ],
      [
        "./voice/voice_integration.py",
        "__init__"
      ],
      [
        "./voice/integrator.py",
        "__init__"
      ],
      [
        "./voice/speech_engine.py",
        "__init__"
      ],
      [
        "./voice/modulator.py",
        "__init__"
      ],
      [
        "./voice/cognitive_voice.py",
        "__init__"
      ],
      [
        "./voice/voice_profiling.py",
        "__init__"
      ],
      [
        "./voice/voice_profiling.py",
        "__init__"
      ],
      [
        "./voice/interface.py",
        "__init__"
      ],
      [
        "./voice/processor.py",
        "__init__"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "__init__"
      ],
      [
        "./voice/swarm_voice_generator.py",
        "__init__"
      ],
      [
        "./voice/voice_hub.py",
        "__init__"
      ],
      [
        "./voice/audio_processor.py",
        "__init__"
      ],
      [
        "./voice/audio_engine.py",
        "__init__"
      ],
      [
        "./voice/speech_processor.py",
        "__init__"
      ],
      [
        "./voice/speech_processor.py",
        "__init__"
      ],
      [
        "./voice/speech_framework.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "__init__"
      ],
      [
        "./voice/adaptation_module.py",
        "__init__"
      ],
      [
        "./voice/voice_system_integrator.py",
        "__init__"
      ],
      [
        "./voice/modularity_system.py",
        "__init__"
      ],
      [
        "./voice/synthesis.py",
        "__init__"
      ],
      [
        "./voice/synthesis.py",
        "__init__"
      ],
      [
        "./voice/bio_core/voice/quantum_voice_enhancer.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./voice/bio_core/oscillator/quantum_layer.py",
        "__init__"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "__init__"
      ],
      [
        "./voice/integrations/elevenlabs/elevenlabs_client.py",
        "__init__"
      ],
      [
        "./voice/integrations/openai/dalle_client.py",
        "__init__"
      ],
      [
        "./voice/integrations/openai/whisper_client.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__init__"
      ],
      [
        "./voice/interfaces/voice_interface.py",
        "__init__"
      ],
      [
        "./voice/interfaces/input/stream_handler.py",
        "__init__"
      ],
      [
        "./orchestration/integration_hub.py",
        "__init__"
      ],
      [
        "./orchestration/workflow_engine.py",
        "__init__"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/core.py",
        "__init__"
      ],
      [
        "./orchestration/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/service_registry.py",
        "__init__"
      ],
      [
        "./orchestration/integration_engine.py",
        "__init__"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/base.py",
        "__init__"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/swarm/swarm_integration.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "__init__"
      ],
      [
        "./orchestration/apis/code_process_integration_api.py",
        "__init__"
      ],
      [
        "./orchestration/echo/echo_controller.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/config/migration_router.py",
        "__init__"
      ],
      [
        "./orchestration/security/ethics_loop_guard.py",
        "__init__"
      ],
      [
        "./orchestration/security/LGOV_validator.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/api.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "__init__"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "__init__"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/agents/registry.py",
        "__init__"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "__init__"
      ],
      [
        "./orchestration/agents/builtin/codex.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "__init__"
      ],
      [
        "./orchestration/specialized/loop_recovery_simulator.py",
        "__init__"
      ],
      [
        "./orchestration/immune/system_watchdog.py",
        "__init__"
      ],
      [
        "./orchestration/examples/endocrine_module_example.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_annealed_consensus.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/controller.py",
        "__init__"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/dynamic_adaptive_dashboard.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/adaptive_image_generator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "__init__"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/autonomous_github_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "__init__"
      ],
      [
        "./orchestration/brain/llm_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prime_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "__init__"
      ],
      [
        "./orchestration/brain/integration_bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_collapse_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "__init__"
      ],
      [
        "./orchestration/brain/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambda_bot_batch_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/colony_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visionary_orchestrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_chain_integrity.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/autonomous_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/brain_collapse_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/integrity_probe.py",
        "__init__"
      ],
      [
        "./orchestration/brain/drift_pattern_analyzer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/lambdabot_autonomous_fixer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "__init__"
      ],
      [
        "./orchestration/brain/experience_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "__init__"
      ],
      [
        "./orchestration/brain/demo.py",
        "__init__"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "__init__"
      ],
      [
        "./orchestration/brain/token_budget_controller.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collapse_chain_simulator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/collaborative_ai_agent_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance_registry.py",
        "__init__"
      ],
      [
        "./orchestration/brain/entropy_probe.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/healix_visualizer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/golden_healix_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/visualization/memory_helix_visualizer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive/voice_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/azure_free_tier_strategy.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__init__"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/accent_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/spine/emotion_mapper.py",
        "__init__"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness/dream_narrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/interface.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__init__"
      ],
      [
        "./orchestration/brain/self_improvement/meta_learner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "__init__"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/reasoning/symbolic_validator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/seamless/experience_core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "__init__"
      ],
      [
        "./orchestration/brain/subsystems/__init__.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/core.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "__init__"
      ],
      [
        "./orchestration/brain/dna/dna_link.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "__init__"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "__init__"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neural/neural_intelligence_main.py",
        "__init__"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/symbolic_handshake.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/signal_middleware.py",
        "__init__"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/remediator_agent.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/sub_agents/memory_cleaner.py",
        "__init__"
      ],
      [
        "./orchestration/monitoring/sub_agents/ethics_guardian.py",
        "__init__"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "__init__"
      ],
      [
        "./orchestration/interfaces/agent_interface.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/core.py",
        "__init__"
      ],
      [
        "./governance/pwm_workspace_guardian.py",
        "__init__"
      ],
      [
        "./governance/audit_logger.py",
        "__init__"
      ],
      [
        "./governance/common.py",
        "__init__"
      ],
      [
        "./governance/common.py",
        "__init__"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "__init__"
      ],
      [
        "./governance/enhanced_pwm_guardian.py",
        "__init__"
      ],
      [
        "./governance/integration/policy_board.py",
        "__init__"
      ],
      [
        "./governance/integration/policy_board.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/services.py",
        "__init__"
      ],
      [
        "./api/core/dream_commerce.py",
        "__init__"
      ],
      [
        "./api/core/api_hub.py",
        "__init__"
      ],
      [
        "./api/commercial/consciousness_platform/consciousness_api.py",
        "__init__"
      ],
      [
        "./api/commercial/memory_services/memory_api.py",
        "__init__"
      ],
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "__init__"
      ],
      [
        "./symbolic/colony_tag_propagation.py",
        "__init__"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "__init__"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "__init__"
      ],
      [
        "./symbolic/loop_engine.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "__init__"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "__init__"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "__init__"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "__init__"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "__init__"
      ],
      [
        "./symbolic/bio/glyph_id_hash.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__init__"
      ],
      [
        "./symbolic/bio/bio_symbolic.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "__init__"
      ],
      [
        "./symbolic/features/memory_reflection_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/moral_agent_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/causal_reasoner_template.py",
        "__init__"
      ],
      [
        "./symbolic/features/tracer.py",
        "__init__"
      ],
      [
        "./symbolic/features/trace_verifier.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "__init__"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "__init__"
      ],
      [
        "./symbolic/features/collapse/buffer.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/features/drift/score.py",
        "__init__"
      ],
      [
        "./symbolic/features/memoria/recall_hooks.py",
        "__init__"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "__init__"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "__init__"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "__init__"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "__init__"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "__init__"
      ],
      [
        "./dream/dream_pipeline.py",
        "__init__"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__init__"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__init__"
      ],
      [
        "./dream/core.py",
        "__init__"
      ],
      [
        "./dream/visualization.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "__init__"
      ],
      [
        "./dream/feedback_propagator.py",
        "__init__"
      ],
      [
        "./dream/redirect_trace_replayer.py",
        "__init__"
      ],
      [
        "./dream/openai_dream_integration.py",
        "__init__"
      ],
      [
        "./dream/commerce_api.py",
        "__init__"
      ],
      [
        "./dream/dream_data_sources.py",
        "__init__"
      ],
      [
        "./dream/quantum_dream_adapter.py",
        "__init__"
      ],
      [
        "./dream/visualization/memoryscape_viewport.py",
        "__init__"
      ],
      [
        "./dream/visualization/dream_timeline_visualizer.py",
        "__init__"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "__init__"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "__init__"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "__init__"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/dream_log.py",
        "__init__"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_loop_generator.py",
        "__init__"
      ],
      [
        "./dream/core/dream_seed_simple.py",
        "__init__"
      ],
      [
        "./dream/core/dream_stats.py",
        "__init__"
      ],
      [
        "./dream/core/dream_snapshot.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/core/dream_feedback_controller.py",
        "__init__"
      ],
      [
        "./dream/core/dream_emotion_bridge.py",
        "__init__"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "__init__"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "__init__"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "__init__"
      ],
      [
        "./dream/core/dream_limiter.py",
        "__init__"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/utils/symbolic_logger.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/oneiric/oneiric_core/engine/dream_engine_fastapi.py",
        "__init__"
      ],
      [
        "./dream/cli/dream_processor.py",
        "__init__"
      ],
      [
        "./dream/dashboard/dream_metrics_db.py",
        "__init__"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "__init__"
      ],
      [
        "./dream/processors/dream_processor.py",
        "__init__"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "__init__"
      ],
      [
        "./dream/stability/redirect_forecaster.py",
        "__init__"
      ],
      [
        "./dream/engine/dream_engine.py",
        "__init__"
      ],
      [
        "./dream/rl/rl_dream_cycle.py",
        "__init__"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "__init__"
      ],
      [
        "./dream/base/dream_refold/dream_refold.py",
        "__init__"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./emotion/colony_emotions.py",
        "__init__"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "__init__"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "__init__"
      ],
      [
        "./emotion/emotion_hub.py",
        "__init__"
      ],
      [
        "./emotion/cycler.py",
        "__init__"
      ],
      [
        "./emotion/recurring_emotion_tracker.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "__init__"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/mood_regulation/mood_regulator.py",
        "__init__"
      ],
      [
        "./emotion/affect_detection/affect_stagnation_detector.py",
        "__init__"
      ],
      [
        "./emotion/affect_detection/recurring_emotion_tracker.py",
        "__init__"
      ],
      [
        "./deployments/consciousness_platform/consciousness_platform/consciousness_api.py",
        "__init__"
      ],
      [
        "./deployments/memory_services/memory_services/memory_api.py",
        "__init__"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "__init__"
      ],
      [
        "./quantum/validator.py",
        "__init__"
      ],
      [
        "./quantum/system_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/web_integration.py",
        "__init__"
      ],
      [
        "./quantum/web_integration.py",
        "__init__"
      ],
      [
        "./quantum/coordinator.py",
        "__init__"
      ],
      [
        "./quantum/service.py",
        "__init__"
      ],
      [
        "./quantum/system.py",
        "__init__"
      ],
      [
        "./quantum/metadata.py",
        "__init__"
      ],
      [
        "./quantum/ui_generator.py",
        "__init__"
      ],
      [
        "./quantum/awareness_system.py",
        "__init__"
      ],
      [
        "./quantum/voice_enhancer.py",
        "__init__"
      ],
      [
        "./quantum/healix_mapper.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__init__"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/bio.py",
        "__init__"
      ],
      [
        "./quantum/dream_adapter.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/oscillator.py",
        "__init__"
      ],
      [
        "./quantum/consensus_system.py",
        "__init__"
      ],
      [
        "./quantum/processor.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/bio_components.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__init__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__init__"
      ],
      [
        "./quantum/vault_manager.py",
        "__init__"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "__init__"
      ],
      [
        "./quantum/certificate_manager.py",
        "__init__"
      ],
      [
        "./quantum/attention_economics.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__init__"
      ],
      [
        "./quantum/creative_integration.py",
        "__init__"
      ],
      [
        "./quantum/layer.py",
        "__init__"
      ],
      [
        "./quantum/layer.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/bio_system.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__init__"
      ],
      [
        "./quantum/safe_blockchain.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "__init__"
      ],
      [
        "./quantum/processing_core.py",
        "__init__"
      ],
      [
        "./quantum/main.py",
        "__init__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__init__"
      ],
      [
        "./quantum/api_manager.py",
        "__init__"
      ],
      [
        "./quantum/entanglement.py",
        "__init__"
      ],
      [
        "./quantum/phase_quantum_integration.py",
        "__init__"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/engine.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neural_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__init__"
      ],
      [
        "./quantum/privacy/zero_knowledge_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_colony.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_glyph_registry.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "__init__"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "__init__"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "__init__"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "__init__"
      ]
    ],
    "isaccessallowed": [
      [
        "./tools/session_logger.py",
        "is_access_allowed"
      ],
      [
        "./core/interfaces/tools/security/session_logger.py",
        "is_access_allowed"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "is_access_allowed"
      ]
    ],
    "logsessionevent": [
      [
        "./tools/session_logger.py",
        "log_session_event"
      ],
      [
        "./core/interfaces/tools/security/session_logger.py",
        "log_session_event"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_session_event"
      ]
    ],
    "addnode": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "add_node"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "add_node"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "add_node"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "add_node"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "add_node"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "add_node"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "add_node"
      ]
    ],
    "getnode": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "get_node"
      ],
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "get_node"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "get_node"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get_node"
      ],
      [
        "./orchestration/brain/mesh/collapse_mesh.py",
        "get_node"
      ]
    ],
    "clear": [
      [
        "./tools/documentation/symbolic_knowledge_core/knowledge_graph.py",
        "clear"
      ],
      [
        "./core/hub_services/service_registry.py",
        "clear"
      ],
      [
        "./memory/memory_optimization.py",
        "clear"
      ],
      [
        "./memory/basic.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "clear"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "clear"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "clear"
      ],
      [
        "./orchestration/service_registry.py",
        "clear"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "clear"
      ]
    ],
    "access": [
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "access"
      ],
      [
        "./core/practical_optimizations.py",
        "access"
      ],
      [
        "./memory/distributed_state_manager.py",
        "access"
      ],
      [
        "./memory/basic.py",
        "access"
      ]
    ],
    "updateknowledge": [
      [
        "./tools/documentation/memory_evolution/knowledge_adaptation.py",
        "update_knowledge"
      ],
      [
        "./learning/exponential_learning.py",
        "_update_knowledge"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_update_knowledge"
      ]
    ],
    "clearcache": [
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "clear_cache"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "clear_cache"
      ],
      [
        "./memory/systems/memory_planning.py",
        "clear_cache"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "clear_cache"
      ]
    ],
    "generatecachekey": [
      [
        "./tools/documentation/memory_evolution/voice_synthesis.py",
        "_generate_cache_key"
      ],
      [
        "./creativity/creative_engine.py",
        "_generate_cache_key"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_generate_cache_key"
      ],
      [
        "./reasoning/analysis/engine.py",
        "_generate_cache_key"
      ],
      [
        "./orchestration/security/dast/engine.py",
        "_generate_cache_key"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_generate_cache_key"
      ]
    ],
    "update": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "update"
      ],
      [
        "./trace/drift_dashboard.py",
        "update"
      ],
      [
        "./core/identity/manager.py",
        "update"
      ],
      [
        "./memory/fold_engine.py",
        "update"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "update"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "update"
      ],
      [
        "./learning/usage_learning.py",
        "update"
      ],
      [
        "./ethics/oscillating_conscience.py",
        "update"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "update"
      ]
    ],
    "recordinteraction": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "record_interaction"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "record_interaction"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "record_interaction"
      ],
      [
        "./identity/lukhas_identity/security/kyi_check.py",
        "record_interaction"
      ],
      [
        "./learning/usage_learning.py",
        "record_interaction"
      ]
    ],
    "identifypatterns": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "identify_patterns"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "identify_patterns"
      ],
      [
        "./learning/usage_learning.py",
        "identify_patterns"
      ]
    ],
    "updateuserpreferences": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "update_user_preferences"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "update_user_preferences"
      ],
      [
        "./learning/usage_learning.py",
        "update_user_preferences"
      ]
    ],
    "getdocumenteffectiveness": [
      [
        "./tools/documentation/memory_evolution/usage_learning.py",
        "get_document_effectiveness"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_document_effectiveness"
      ],
      [
        "./memory/systems/memory_evolution.py",
        "get_document_effectiveness"
      ],
      [
        "./learning/usage_learning.py",
        "get_document_effectiveness"
      ]
    ],
    "analyzefile": [
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "analyze_file"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_analyze_file"
      ],
      [
        "./tools/analysis/duplicate_detector.py",
        "analyze_file"
      ]
    ],
    "generatereport": [
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "generate_report"
      ],
      [
        "./tools/analysis/pwm_deep_analysis.py",
        "generate_report"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_generate_report"
      ],
      [
        "./tools/dev/consolidate_duplicates.py",
        "generate_report"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_generate_report"
      ],
      [
        "./reasoning/reporting/reasoning_report_generator.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/github_vulnerability_manager.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/pr_security_review_task.py",
        "generate_report"
      ],
      [
        "./orchestration/brain/output/report_generator.py",
        "generate_report"
      ],
      [
        "./governance/compliance_report_generator.py",
        "generate_report"
      ]
    ],
    "savereport": [
      [
        "./tools/analysis/PWM_WORKSPACE_STATUS_ANALYSIS.py",
        "save_report"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "save_report"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "save_report"
      ]
    ],
    "createreport": [
      [
        "./tools/analysis/generate_function_index.py",
        "_create_report"
      ],
      [
        "./tools/analysis/generate_class_registry.py",
        "_create_report"
      ],
      [
        "./tools/analysis/PWM_CURRENT_CONNECTIVITY_ANALYSIS.py",
        "_create_report"
      ]
    ],
    "analyzemodule": [
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "analyze_module"
      ],
      [
        "./core/introspection/introspector.py",
        "analyze_module"
      ],
      [
        "./core/introspection/introspector.py",
        "analyze_module"
      ]
    ],
    "generaterecommendations": [
      [
        "./tools/analysis/PWM_SECURITY_COMPLIANCE_GAP_ANALYSIS.py",
        "generate_recommendations"
      ],
      [
        "./tools/analysis/naming_convention_scanner.py",
        "_generate_recommendations"
      ],
      [
        "./bio/core/symbolic_bio_symbolic_orchestrator.py",
        "_generate_recommendations"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_generate_recommendations"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_generate_recommendations"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "_generate_recommendations"
      ],
      [
        "./core/integrated_safety_system.py",
        "_generate_recommendations"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_generate_recommendations"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_generate_recommendations"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_generate_recommendations"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_generate_recommendations"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_generate_recommendations"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_generate_recommendations"
      ],
      [
        "./consciousness/awareness/system_awareness.py",
        "_generate_recommendations"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_recommendations"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "_generate_recommendations"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "_generate_recommendations"
      ],
      [
        "./ethics/core/shared_ethics_engine.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/apis/drift_monitoring_api.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "generate_recommendations"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_generate_recommendations"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_generate_recommendations"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "_generate_recommendations"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_generate_recommendations"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_generate_recommendations"
      ]
    ],
    "todict": [
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "to_dict"
      ],
      [
        "./tools/enterprise/health_check_system.py",
        "to_dict"
      ],
      [
        "./bio/embodiment/body_state.py",
        "to_dict"
      ],
      [
        "./trace/drift_tools.py",
        "to_dict"
      ],
      [
        "./trace/drift_tools.py",
        "to_dict"
      ],
      [
        "./trace/drift_dashboard.py",
        "to_dict"
      ],
      [
        "./trace/drift_dashboard.py",
        "to_dict"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "to_dict"
      ],
      [
        "./core/resource_optimization_integration.py",
        "to_dict"
      ],
      [
        "./core/id.py",
        "to_dict"
      ],
      [
        "./core/id.py",
        "to_dict"
      ],
      [
        "./core/distributed_tracing.py",
        "to_dict"
      ],
      [
        "./core/image_processing_pipeline.py",
        "to_dict"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/symbolic_drift_analyzer.py",
        "to_dict"
      ],
      [
        "./core/event_sourcing.py",
        "to_dict"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "to_dict"
      ],
      [
        "./core/efficient_communication.py",
        "to_dict"
      ],
      [
        "./core/quantum_identity_manager.py",
        "to_dict"
      ],
      [
        "./core/tiered_state_management.py",
        "to_dict"
      ],
      [
        "./core/actor_system.py",
        "to_dict"
      ],
      [
        "./core/p2p_communication.py",
        "to_dict"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "to_dict"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "to_dict"
      ],
      [
        "./core/audit/audit_trail.py",
        "to_dict"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "to_dict"
      ],
      [
        "./core/base/base_config.py",
        "to_dict"
      ],
      [
        "./memory/structural_conscience.py",
        "to_dict"
      ],
      [
        "./memory/fold_engine.py",
        "to_dict"
      ],
      [
        "./memory/emotional.py",
        "to_dict"
      ],
      [
        "./memory/core.py",
        "to_dict"
      ],
      [
        "./memory/basic.py",
        "to_dict"
      ],
      [
        "./memory/dream_memory_fold.py",
        "to_dict"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "to_dict"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "to_dict"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "to_dict"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "to_dict"
      ],
      [
        "./memory/integrity/collapse_hash.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/causal_memory_chains.py",
        "to_dict"
      ],
      [
        "./memory/systems/trace_injector.py",
        "to_dict"
      ],
      [
        "./memory/systems/simple_store.py",
        "to_dict"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "to_dict"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "to_dict"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "to_dict"
      ],
      [
        "./identity/core/visualization/lukhas_orb.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "to_dict"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "to_dict"
      ],
      [
        "./identity/core/events/identity_event_types.py",
        "to_dict"
      ],
      [
        "./config/fallback_settings.py",
        "to_dict"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "to_dict"
      ],
      [
        "./consciousness/core/engine.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "to_dict"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_logic_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/reasoning_diagnostics.py",
        "to_dict"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "to_dict"
      ],
      [
        "./reasoning/symbolic_loop_harmonizer.py",
        "to_dict"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "to_dict"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "to_dict"
      ],
      [
        "./ethics/bases.py",
        "to_dict"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "to_dict"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "to_dict"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "to_dict"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "to_dict"
      ],
      [
        "./voice/voice_profiling.py",
        "to_dict"
      ],
      [
        "./orchestration/config/production_config.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "to_dict"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "to_dict"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "to_dict"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "to_dict"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "to_dict"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "to_dict"
      ],
      [
        "./symbolic/features/glyphs/symbolic_foundry.py",
        "to_dict"
      ],
      [
        "./symbolic/features/collapse/engine.py",
        "to_dict"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "to_dict"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "to_dict"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "to_dict"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "to_dict"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "to_dict"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "to_dict"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "to_dict"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "to_dict"
      ]
    ],
    "auditdecision": [
      [
        "./tools/analysis/audit_decision_embedding_engine.py",
        "audit_decision"
      ],
      [
        "./core/audit/audit_decorators.py",
        "audit_decision"
      ],
      [
        "./ethics/service.py",
        "audit_decision"
      ]
    ],
    "tojson": [
      [
        "./tools/enterprise/structured_audit_logger.py",
        "to_json"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "to_json"
      ],
      [
        "./core/symbolic_contract.py",
        "to_json"
      ],
      [
        "./core/event_replay_snapshot.py",
        "to_json"
      ],
      [
        "./symbolic/features/tracer.py",
        "to_json"
      ],
      [
        "./dream/oneiric/demo/web_app.py",
        "to_json"
      ],
      [
        "./dream/dashboard/dream_metrics_view.py",
        "to_json"
      ]
    ],
    "startbackgroundtasks": [
      [
        "./tools/enterprise/structured_audit_logger.py",
        "_start_background_tasks"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_start_background_tasks"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_start_background_tasks"
      ]
    ],
    "updatemetrics": [
      [
        "./tools/enterprise/health_check_system.py",
        "_update_metrics"
      ],
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "update_metrics"
      ],
      [
        "./bio/core/oscillators_base_oscillator.py",
        "update_metrics"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "update_metrics"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "update_metrics"
      ],
      [
        "./bio/awareness/awareness.py",
        "_update_metrics"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "_update_metrics"
      ],
      [
        "./core/agent_coordination.py",
        "update_metrics"
      ],
      [
        "./core/agi/self_healing.py",
        "update_metrics"
      ],
      [
        "./core/personality/creative_personality.py",
        "_update_metrics"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_update_metrics"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "_update_metrics"
      ],
      [
        "./memory/fold_universal_bridge.py",
        "_update_metrics"
      ],
      [
        "./memory/hooks/base.py",
        "_update_metrics"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_update_metrics"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "_update_metrics"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_update_metrics"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_metrics"
      ],
      [
        "./learning/meta_learning.py",
        "_update_metrics"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_metrics"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_update_metrics"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_update_metrics"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "_update_metrics"
      ],
      [
        "./ethics/policy_engines/base.py",
        "_update_metrics"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_metrics"
      ]
    ],
    "addtohistory": [
      [
        "./tools/enterprise/health_check_system.py",
        "_add_to_history"
      ],
      [
        "./ethics/ethics_engine.py",
        "_add_to_history"
      ],
      [
        "./ethics/compliance/engine.py",
        "_add_to_history"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_add_to_history"
      ]
    ],
    "getmetrics": [
      [
        "./tools/enterprise/health_check_system.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/practical_optimizations.py",
        "get_metrics"
      ],
      [
        "./core/quantized_thought_cycles.py",
        "get_metrics"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "get_metrics"
      ],
      [
        "./core/observability/collector.py",
        "get_metrics"
      ],
      [
        "./core/engines/identity_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/learning_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/creative_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/consciousness_engine.py",
        "get_metrics"
      ],
      [
        "./core/engines/communication_engine.py",
        "get_metrics"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "get_metrics"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "get_metrics"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "get_metrics"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "get_metrics"
      ],
      [
        "./memory/proteome/symbolic_proteome.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/pattern_separator.py",
        "get_metrics"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "get_metrics"
      ],
      [
        "./memory/hooks/base.py",
        "get_metrics"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "get_metrics"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "get_metrics"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "get_metrics"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "get_metrics"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "get_metrics"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "get_metrics"
      ],
      [
        "./memory/neocortical/semantic_extractor.py",
        "get_metrics"
      ],
      [
        "./bridge/explainability_interface_layer.py",
        "get_metrics"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "get_metrics"
      ],
      [
        "./ethics/ethics_engine.py",
        "get_metrics"
      ],
      [
        "./ethics/hitlo_bridge.py",
        "get_metrics"
      ],
      [
        "./ethics/compliance/engine.py",
        "get_metrics"
      ],
      [
        "./ethics/policy_engines/base.py",
        "get_metrics"
      ],
      [
        "./orchestration/integration/human_in_the_loop_orchestrator.py",
        "get_metrics"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_get_metrics"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "get_metrics"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "get_metrics"
      ]
    ],
    "extractfeatures": [
      [
        "./tools/enterprise/observability_system.py",
        "_extract_features"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_extract_features"
      ],
      [
        "./memory/neocortical/neocortical_network.py",
        "_extract_features"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_extract_features"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_extract_features"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_extract_features"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_features"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_features"
      ]
    ],
    "loadconfig": [
      [
        "./tools/enterprise/security_scanner.py",
        "_load_config"
      ],
      [
        "./core/task_manager.py",
        "_load_config"
      ],
      [
        "./core/integration/system_coordinator.py",
        "_load_config"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_load_config"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "_load_config"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "_load_config"
      ],
      [
        "./core/interfaces/voice/edge_voice.py",
        "load_config"
      ],
      [
        "./memory/memory_fold.py",
        "load_config"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_load_config"
      ],
      [
        "./identity/core/id_service/lambd_id_generator.py",
        "_load_config"
      ],
      [
        "./identity/core/commercial/commercial_module.py",
        "_load_config"
      ],
      [
        "./identity/enterprise/auth.py",
        "_load_config"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_load_config"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_load_config"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_load_config"
      ],
      [
        "./consciousness/systems/integrator.py",
        "_load_config"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_load_config"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_load_config"
      ],
      [
        "./voice/processor.py",
        "_load_config"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_load_config"
      ],
      [
        "./orchestration/core_modules/controller.py",
        "_load_config"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "_load_config"
      ]
    ],
    "creatememoryfold": [
      [
        "./tools/scripts/claude_memory_integration.py",
        "create_memory_fold"
      ],
      [
        "./memory/memory_fold.py",
        "create_memory_fold"
      ],
      [
        "./memory/memory_fold.py",
        "create_memory_fold"
      ]
    ],
    "getintegrationstatus": [
      [
        "./tools/dev/practical_integration_hub.py",
        "get_integration_status"
      ],
      [
        "./core/integration/layer.py",
        "get_integration_status"
      ],
      [
        "./memory/systems/integration_adapters.py",
        "get_integration_status"
      ],
      [
        "./config/knowledge/symbolic_knowledge_integration.py",
        "get_integration_status"
      ],
      [
        "./learning/metalearningenhancementsystem_wrapper.py",
        "get_integration_status"
      ],
      [
        "./learning/metalearningenhancementsystem_mock.py",
        "get_integration_status"
      ]
    ],
    "postinit": [
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "__post_init__"
      ],
      [
        "./bio/quantum_layer.py",
        "__post_init__"
      ],
      [
        "./bio/core/symbolic_quantum_coherence_enhancer.py",
        "__post_init__"
      ],
      [
        "./bio/optimization/symbolic_network.py",
        "__post_init__"
      ],
      [
        "./core/integration_hub.py",
        "__post_init__"
      ],
      [
        "./core/id.py",
        "__post_init__"
      ],
      [
        "./core/distributed_tracing.py",
        "__post_init__"
      ],
      [
        "./core/efficient_communication.py",
        "__post_init__"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "__post_init__"
      ],
      [
        "./core/integrations/nias_dream_bridge.py",
        "__post_init__"
      ],
      [
        "./core/symbolic/symbolic_loop_controller.py",
        "__post_init__"
      ],
      [
        "./core/services/location/geofencing_manager.py",
        "__post_init__"
      ],
      [
        "./core/hub_services/coordinator.py",
        "__post_init__"
      ],
      [
        "./memory/hooks/registry.py",
        "__post_init__"
      ],
      [
        "./memory/hooks/base.py",
        "__post_init__"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "__post_init__"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "__post_init__"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "__post_init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__post_init__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__post_init__"
      ],
      [
        "./identity/core/auth/bio_symbolic_fusion.py",
        "__post_init__"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__post_init__"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "__post_init__"
      ],
      [
        "./identity/auth/constitutional_gatekeeper.py",
        "__post_init__"
      ],
      [
        "./bridge/shared_state.py",
        "__post_init__"
      ],
      [
        "./learning/learning_gateway.py",
        "__post_init__"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "__post_init__"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "__post_init__"
      ],
      [
        "./consciousness/loop_meta_learning.py",
        "__post_init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__post_init__"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "__post_init__"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "__post_init__"
      ],
      [
        "./consciousness/core/engine.py",
        "__post_init__"
      ],
      [
        "./consciousness/systems/mapper.py",
        "__post_init__"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "__post_init__"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "__post_init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__post_init__"
      ],
      [
        "./ethics/policy_engines/base.py",
        "__post_init__"
      ],
      [
        "./voice/systems/synthesis.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/consciousness_core.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/core/types.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__post_init__"
      ],
      [
        "./orchestration/brain/meta/integrations/bot_enhancement.py",
        "__post_init__"
      ],
      [
        "./orchestration/core_modules/signals.py",
        "__post_init__"
      ],
      [
        "./symbolic/loop_engine.py",
        "__post_init__"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "__post_init__"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "__post_init__"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "__post_init__"
      ],
      [
        "./quantum/layer.py",
        "__post_init__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__post_init__"
      ]
    ],
    "initializetemplates": [
      [
        "./tools/documentation_suite/ai_documentation_engine/interactive_tutorial_generator.py",
        "_initialize_templates"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_initialize_templates"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_initialize_templates"
      ]
    ],
    "getconfig": [
      [
        "./tools/documentation_suite/ai_documentation_engine/__init__.py",
        "get_config"
      ],
      [
        "./core/config.py",
        "get_config"
      ],
      [
        "./core/config_manager.py",
        "get_config"
      ],
      [
        "./core/common.py",
        "get_config"
      ]
    ],
    "weightmodulator": [
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/bio_utilities.py",
        "weight_modulator"
      ],
      [
        "./bio/stress_signal.py",
        "weight_modulator"
      ],
      [
        "./bio/curiosity_spark.py",
        "weight_modulator"
      ],
      [
        "./bio/resilience_boost.py",
        "weight_modulator"
      ],
      [
        "./bio/stability_anchor.py",
        "weight_modulator"
      ]
    ],
    "repr": [
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/bio_utilities.py",
        "__repr__"
      ],
      [
        "./bio/stress_signal.py",
        "__repr__"
      ],
      [
        "./bio/curiosity_spark.py",
        "__repr__"
      ],
      [
        "./bio/resilience_boost.py",
        "__repr__"
      ],
      [
        "./bio/stability_anchor.py",
        "__repr__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__repr__"
      ],
      [
        "./core/base/symbolic.py",
        "__repr__"
      ],
      [
        "./memory/core/base_manager.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__repr__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__repr__"
      ],
      [
        "./orchestration/base.py",
        "__repr__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__repr__"
      ],
      [
        "./quantum/layer.py",
        "__repr__"
      ]
    ],
    "establishconnections": [
      [
        "./bio/bio_integration_hub.py",
        "_establish_connections"
      ],
      [
        "./core/interfaces/interfaces_hub.py",
        "_establish_connections"
      ],
      [
        "./ethics/ethics_integration.py",
        "_establish_connections"
      ]
    ],
    "calculateentropydelta": [
      [
        "./bio/symbolic_entropy.py",
        "calculate_entropy_delta"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_calculate_entropy_delta"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "calculate_entropy_delta"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_calculate_entropy_delta"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_entropy_delta"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_entropy_delta"
      ]
    ],
    "getattr": [
      [
        "./bio/__init__.py",
        "__getattr__"
      ],
      [
        "./core/__init__.py",
        "__getattr__"
      ],
      [
        "./core/tier_aware_colony_proxy.py",
        "__getattr__"
      ],
      [
        "./memory/memory_optimization.py",
        "__getattr__"
      ],
      [
        "./identity/qrg_integration.py",
        "__getattr__"
      ],
      [
        "./identity/__init__.py",
        "__getattr__"
      ],
      [
        "./creativity/__init__.py",
        "__getattr__"
      ],
      [
        "./learning/__init__.py",
        "__getattr__"
      ],
      [
        "./consciousness/__init__.py",
        "__getattr__"
      ],
      [
        "./orchestration/__init__.py",
        "__getattr__"
      ],
      [
        "./symbolic/__init__.py",
        "__getattr__"
      ],
      [
        "./emotion/__init__.py",
        "__getattr__"
      ],
      [
        "./quantum/__init__.py",
        "__getattr__"
      ]
    ],
    "dir": [
      [
        "./bio/__init__.py",
        "__dir__"
      ],
      [
        "./core/__init__.py",
        "__dir__"
      ],
      [
        "./identity/__init__.py",
        "__dir__"
      ],
      [
        "./creativity/__init__.py",
        "__dir__"
      ],
      [
        "./learning/__init__.py",
        "__dir__"
      ],
      [
        "./consciousness/__init__.py",
        "__dir__"
      ],
      [
        "./orchestration/__init__.py",
        "__dir__"
      ],
      [
        "./symbolic/__init__.py",
        "__dir__"
      ],
      [
        "./emotion/__init__.py",
        "__dir__"
      ],
      [
        "./quantum/__init__.py",
        "__dir__"
      ]
    ],
    "getsystemstatus": [
      [
        "./bio/core.py",
        "get_system_status"
      ],
      [
        "./core/integrator.py",
        "get_system_status"
      ],
      [
        "./core/integrated_safety_system.py",
        "get_system_status"
      ],
      [
        "./core/task_manager.py",
        "get_system_status"
      ],
      [
        "./core/observatory.py",
        "get_system_status"
      ],
      [
        "./core/integration/executive_decision_integrator.py",
        "get_system_status"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_system_status"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "get_system_status"
      ],
      [
        "./creativity/quantum_creative_integration.py",
        "get_system_status"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_system_status"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_system_status"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get_system_status"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "get_system_status"
      ],
      [
        "./orchestration/core.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/orchestration/core.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/neural/neural_intelligence_main.py",
        "get_system_status"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "get_system_status"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "get_system_status"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "get_system_status"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "get_system_status"
      ],
      [
        "./symbolic/vocabularies/usage_examples.py",
        "get_system_status"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_system_status"
      ],
      [
        "./quantum/system.py",
        "get_system_status"
      ],
      [
        "./quantum/creative_integration.py",
        "get_system_status"
      ]
    ],
    "initializequantumlikestate": [
      [
        "./bio/quantum_layer.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_initialize_quantum_like_state"
      ],
      [
        "./quantum/layer.py",
        "_initialize_quantum_like_state"
      ]
    ],
    "createentanglement": [
      [
        "./bio/quantum_layer.py",
        "create_entanglement"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "create_entanglement"
      ],
      [
        "./quantum/layer.py",
        "create_entanglement"
      ]
    ],
    "applymeasurementdecoherence": [
      [
        "./bio/quantum_layer.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_apply_measurement_decoherence"
      ],
      [
        "./quantum/layer.py",
        "_apply_measurement_decoherence"
      ]
    ],
    "evolvequantumlikestate": [
      [
        "./bio/quantum_layer.py",
        "evolve_quantum_like_state"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_evolve_quantum_like_state"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_evolve_quantum_like_state"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "evolve_quantum_like_state"
      ],
      [
        "./quantum/layer.py",
        "evolve_quantum_like_state"
      ]
    ],
    "gettimestamp": [
      [
        "./bio/quantum_layer.py",
        "_get_timestamp"
      ],
      [
        "./core/api_diff_analyzer.py",
        "_get_timestamp"
      ],
      [
        "./core/common.py",
        "get_timestamp"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "_get_timestamp"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "_get_timestamp"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "_get_timestamp"
      ],
      [
        "./memory/systems/emotional_memory_manager.py",
        "_get_timestamp"
      ],
      [
        "./api/commercial/dream_commerce/dream_api.py",
        "_get_timestamp"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "_get_timestamp"
      ],
      [
        "./dream/core/quantum_dream_adapter.py",
        "_get_timestamp"
      ],
      [
        "./deployments/dream_commerce/dream_commerce/dream_api.py",
        "_get_timestamp"
      ],
      [
        "./quantum/layer.py",
        "_get_timestamp"
      ]
    ],
    "initializeservices": [
      [
        "./bio/bio_hub.py",
        "_initialize_services"
      ],
      [
        "./core/safety/safety_hub.py",
        "_initialize_services"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_initialize_services"
      ],
      [
        "./learning/learning_hub.py",
        "_initialize_services"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "_initialize_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_initialize_services"
      ]
    ],
    "registerwithservicediscovery": [
      [
        "./bio/bio_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/core_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/safety/safety_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./memory/memory_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./learning/learning_hub.py",
        "_register_with_service_discovery"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_with_service_discovery"
      ]
    ],
    "registerservice": [
      [
        "./bio/bio_hub.py",
        "register_service"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "register_service"
      ],
      [
        "./core/core_hub.py",
        "register_service"
      ],
      [
        "./core/safety/safety_hub.py",
        "register_service"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "register_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_service"
      ],
      [
        "./memory/memory_hub.py",
        "register_service"
      ],
      [
        "./identity/identity_hub.py",
        "register_service"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "register_service"
      ],
      [
        "./learning/learning_hub.py",
        "register_service"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "register_service"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "register_service"
      ],
      [
        "./voice/voice_hub.py",
        "register_service"
      ],
      [
        "./orchestration/service_registry.py",
        "register_service"
      ],
      [
        "./orchestration/service_registry.py",
        "register_service"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "register_service"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "register_service"
      ],
      [
        "./api/core/api_hub.py",
        "register_service"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "register_service"
      ],
      [
        "./emotion/emotion_hub.py",
        "register_service"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "register_service"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "register_service"
      ]
    ],
    "getservice": [
      [
        "./bio/bio_hub.py",
        "get_service"
      ],
      [
        "./bio/core/symbolic_fallback_systems.py",
        "get_service"
      ],
      [
        "./core/core_hub.py",
        "get_service"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_service"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "get_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "get_service"
      ],
      [
        "./core/hub_services/service_registry.py",
        "get_service"
      ],
      [
        "./memory/memory_hub.py",
        "get_service"
      ],
      [
        "./identity/identity_hub.py",
        "get_service"
      ],
      [
        "./learning/learning_hub.py",
        "get_service"
      ],
      [
        "./architectures/nias/integration/nias_integration_hub.py",
        "get_service"
      ],
      [
        "./reasoning/reasoning_hub.py",
        "get_service"
      ],
      [
        "./voice/voice_hub.py",
        "get_service"
      ],
      [
        "./orchestration/service_registry.py",
        "get_service"
      ],
      [
        "./orchestration/service_registry.py",
        "get_service"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "get_service"
      ],
      [
        "./api/core/api_hub.py",
        "get_service"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "get_service"
      ],
      [
        "./emotion/emotion_hub.py",
        "get_service"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "get_service"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "get_service"
      ]
    ],
    "registereventhandler": [
      [
        "./bio/bio_hub.py",
        "register_event_handler"
      ],
      [
        "./core/core_hub.py",
        "register_event_handler"
      ],
      [
        "./core/safety/safety_hub.py",
        "register_event_handler"
      ],
      [
        "./core/modules/nias/nias_hub.py",
        "register_event_handler"
      ],
      [
        "./memory/memory_hub.py",
        "register_event_handler"
      ],
      [
        "./identity/identity_hub.py",
        "register_event_handler"
      ],
      [
        "./identity/core/events/identity_event_publisher.py",
        "register_event_handler"
      ],
      [
        "./learning/learning_hub.py",
        "register_event_handler"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "register_event_handler"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "register_event_handler"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "register_event_handler"
      ]
    ],
    "updatehistory": [
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "_update_history"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_update_history"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_update_history"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_update_history"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_update_history"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_history"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_history"
      ]
    ],
    "getstate": [
      [
        "./bio/core/oscillators_prime_oscillator.py",
        "get_state"
      ],
      [
        "./core/colonies/temporal_colony.py",
        "get_state"
      ],
      [
        "./bridge/shared_state.py",
        "get_state"
      ]
    ],
    "getsystemstate": [
      [
        "./bio/core/hormonal_system.py",
        "get_system_state"
      ],
      [
        "./orchestration/security/dast_orchestrator.py",
        "get_system_state"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "get_system_state"
      ],
      [
        "./quantum/awareness_system.py",
        "get_system_state"
      ]
    ],
    "reset": [
      [
        "./bio/core/symbolic_stress_gate.py",
        "reset"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "reset"
      ],
      [
        "./core/energy_consumption_analysis.py",
        "reset"
      ],
      [
        "./core/practical_optimizations.py",
        "reset"
      ],
      [
        "./core/supervision.py",
        "reset"
      ],
      [
        "./core/agi/self_healing.py",
        "reset"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "reset"
      ],
      [
        "./symbolic/bio/stress_gate.py",
        "reset"
      ]
    ],
    "getsystemhealthreport": [
      [
        "./bio/core/symbolic_fallback_systems.py",
        "get_system_health_report"
      ],
      [
        "./identity/core/health/identity_health_monitor.py",
        "get_system_health_report"
      ],
      [
        "./emotion/dreamseed_upgrade.py",
        "get_system_health_report"
      ]
    ],
    "forward": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "forward"
      ],
      [
        "./core/neural_architectures/neural_integrator.py",
        "forward"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "forward"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "forward"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "forward"
      ],
      [
        "./memory/systems/attention_memory_layer.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./bridge/model_communication_engine.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "forward"
      ]
    ],
    "allocate": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "_allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_planning.py",
        "allocate"
      ],
      [
        "./memory/systems/memory_viz.py",
        "allocate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "allocate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "allocate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "allocate"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "allocate"
      ]
    ],
    "play": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "play"
      ]
    ],
    "perform": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "perform"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "perform"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "perform"
      ]
    ],
    "optimize": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "optimize"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "optimize"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "optimize"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "optimize"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "optimize"
      ]
    ],
    "inducefission": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_induce_fission"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_induce_fission"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_induce_fission"
      ]
    ],
    "inducefusion": [
      [
        "./bio/core/symbolic_mito_quantum_attention.py",
        "_induce_fusion"
      ],
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_induce_fusion"
      ],
      [
        "./symbolic/bio/mito_quantum_attention.py",
        "_induce_fusion"
      ]
    ],
    "extractsymbolicfeatures": [
      [
        "./bio/core/symbolic_contextual_mapping_colony.py",
        "_extract_symbolic_features"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_extract_symbolic_features"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_extract_symbolic_features"
      ]
    ],
    "stabilizetopology": [
      [
        "./bio/core/symbolic_crista_optimizer.py",
        "_stabilize_topology"
      ],
      [
        "./bio/optimization/crista_optimizer.py",
        "_stabilize_topology"
      ],
      [
        "./symbolic/bio/crista_optimizer.py",
        "_stabilize_topology"
      ]
    ],
    "process": [
      [
        "./bio/core/symbolic_quantum_attention.py",
        "process"
      ],
      [
        "./bio/core/symbolic_quantum_attention.py",
        "process"
      ],
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "process"
      ],
      [
        "./core/notion_sync.py",
        "process"
      ],
      [
        "./core/integration/neural_symbolic_bridge.py",
        "process"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "process"
      ],
      [
        "./core/base/base_module.py",
        "process"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2_grpc.py",
        "Process"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "process"
      ],
      [
        "./reasoning/goals/goal_manager.py",
        "process"
      ],
      [
        "./reasoning/intent/intent_processor.py",
        "process"
      ],
      [
        "./orchestration/agents/base.py",
        "process"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "process"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "process"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "process"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "process"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "process"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "process"
      ],
      [
        "./governance/common.py",
        "process"
      ],
      [
        "./symbolic/bio/bio_symbolic.py",
        "process"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "process"
      ],
      [
        "./quantum/bio_components.py",
        "process"
      ]
    ],
    "applysuperposition": [
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_apply_superposition"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_apply_superposition"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_apply_superposition"
      ]
    ],
    "updatestats": [
      [
        "./bio/core/symbolic_quantum_attention.py",
        "_update_stats"
      ],
      [
        "./core/colonies/memory_colony_enhanced.py",
        "_update_stats"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_update_stats"
      ],
      [
        "./dream/core/dream_stats.py",
        "update_stats"
      ]
    ],
    "getstatus": [
      [
        "./bio/core/oscillators_oscillator.py",
        "get_status"
      ],
      [
        "./core/integrator.py",
        "get_status"
      ],
      [
        "./core/symbolic_boot.py",
        "get_status"
      ],
      [
        "./core/enhanced_swarm.py",
        "get_status"
      ],
      [
        "./core/core_system.py",
        "get_status"
      ],
      [
        "./core/colonies/base_colony.py",
        "get_status"
      ],
      [
        "./core/identity/mapper.py",
        "get_status"
      ],
      [
        "./core/identity/processor.py",
        "get_status"
      ],
      [
        "./core/identity/engine.py",
        "get_status"
      ],
      [
        "./core/identity/persona_engine.py",
        "get_status"
      ],
      [
        "./core/integration/connectivity_engine.py",
        "get_status"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_status"
      ],
      [
        "./core/integration/system_bridge.py",
        "get_status"
      ],
      [
        "./core/personality/personality.py",
        "get_status"
      ],
      [
        "./core/base/base_health.py",
        "get_status"
      ],
      [
        "./core/base/base_module.py",
        "get_status"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "get_status"
      ],
      [
        "./memory/systems/hierarchical_data_store.py",
        "get_status"
      ],
      [
        "./memory/systems/processor.py",
        "get_status"
      ],
      [
        "./memory/systems/memory_validator.py",
        "get_status"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "get_status"
      ],
      [
        "./identity/identity_hub.py",
        "get_status"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "get_status"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "get_status"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "get_status"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "get_status"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "get_status"
      ],
      [
        "./consciousness/systems/validator.py",
        "get_status"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "get_status"
      ],
      [
        "./consciousness/systems/state.py",
        "get_status"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "get_status"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "get_status"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "get_status"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "get_status"
      ],
      [
        "./architectures/abas/integration/abas_integration_hub.py",
        "get_status"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "get_status"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "get_status"
      ],
      [
        "./ethics/compliance_validator.py",
        "get_status"
      ],
      [
        "./voice/validator.py",
        "get_status"
      ],
      [
        "./voice/recognition.py",
        "get_status"
      ],
      [
        "./voice/speech_engine.py",
        "get_status"
      ],
      [
        "./voice/interface.py",
        "get_status"
      ],
      [
        "./voice/audio_processor.py",
        "get_status"
      ],
      [
        "./voice/audio_engine.py",
        "get_status"
      ],
      [
        "./voice/bio_core/oscillator/bio_quantum_engine.py",
        "get_status"
      ],
      [
        "./orchestration/workflow_engine.py",
        "get_status"
      ],
      [
        "./orchestration/integration_engine.py",
        "get_status"
      ],
      [
        "./orchestration/agent_orchestrator.py",
        "get_status"
      ],
      [
        "./orchestration/base.py",
        "get_status"
      ],
      [
        "./orchestration/specialized/inter_agent_simulation.py",
        "get_status"
      ],
      [
        "./orchestration/brain/core_system.py",
        "get_status"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "get_status"
      ],
      [
        "./orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "get_status"
      ],
      [
        "./orchestration/brain/core/types.py",
        "get_status"
      ],
      [
        "./orchestration/brain/core/azure_openai_client.py",
        "get_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "get_status"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "get_status"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "get_status"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "get_status"
      ],
      [
        "./governance/common.py",
        "get_status"
      ],
      [
        "./governance/integration/policy_board.py",
        "get_status"
      ],
      [
        "./quantum/validator.py",
        "get_status"
      ],
      [
        "./quantum/consensus_system.py",
        "get_status"
      ],
      [
        "./quantum/processor.py",
        "get_status"
      ],
      [
        "./quantum/entanglement.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "get_status"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "get_status"
      ]
    ],
    "generateaccesstoken": [
      [
        "./bio/core/oscillators_oscillator.py",
        "_generate_access_token"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_generate_access_token"
      ],
      [
        "./identity/core/sing/sso_engine.py",
        "_generate_access_token"
      ]
    ],
    "updatephase": [
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "update_phase"
      ],
      [
        "./orchestration/integration_hub.py",
        "_update_phase"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "update_phase"
      ]
    ],
    "assessalignment": [
      [
        "./bio/core/symbolic_mito_ethics_sync.py",
        "assess_alignment"
      ],
      [
        "./trace/drift_alignment_controller.py",
        "assess_alignment"
      ],
      [
        "./symbolic/bio/mito_ethics_sync.py",
        "assess_alignment"
      ]
    ],
    "getstatistics": [
      [
        "./bio/core/symbolic_bio_symbolic.py",
        "get_statistics"
      ],
      [
        "./core/efficient_communication.py",
        "get_statistics"
      ],
      [
        "./core/tiered_state_management.py",
        "get_statistics"
      ],
      [
        "./memory/memory_fold.py",
        "get_statistics"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "get_statistics"
      ],
      [
        "./memory/systems/glyph_memory_bridge.py",
        "get_statistics"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "get_statistics"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "get_statistics"
      ]
    ],
    "getperformancesummary": [
      [
        "./bio/optimization/crista_optimizer.py",
        "get_performance_summary"
      ],
      [
        "./core/monitoring_observability.py",
        "get_performance_summary"
      ],
      [
        "./orchestration/brain/abstract_reasoning/bio_quantum_radar_integration.py",
        "_get_performance_summary"
      ]
    ],
    "logevent": [
      [
        "./bio/optimization/symbolic_network.py",
        "_log_event"
      ],
      [
        "./core/state_management.py",
        "log_event"
      ],
      [
        "./core/interfaces/main.py",
        "log_event"
      ],
      [
        "./core/interfaces/as_agent/core/overview_log.py",
        "log_event"
      ],
      [
        "./reasoning/LBot_reasoning_processed.py",
        "log_event"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "_log_event"
      ]
    ],
    "identifybottlenecks": [
      [
        "./bio/optimization/topology_manager.py",
        "identify_bottlenecks"
      ],
      [
        "./core/resource_efficiency_analyzer.py",
        "_identify_bottlenecks"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_identify_bottlenecks"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "identify_bottlenecks"
      ]
    ],
    "checksystemhealth": [
      [
        "./bio/awareness/awareness.py",
        "_check_system_health"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "check_system_health"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_check_system_health"
      ]
    ],
    "recorddrift": [
      [
        "./trace/drift_harmonizer.py",
        "record_drift"
      ],
      [
        "./trace/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./memory/emotional.py",
        "record_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "record_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "record_drift"
      ]
    ],
    "registerdrift": [
      [
        "./trace/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./memory/emotional.py",
        "register_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "register_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "register_drift"
      ]
    ],
    "calculateentropy": [
      [
        "./trace/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_calculate_entropy"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "calculate_entropy"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "calculate_entropy"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "calculate_entropy"
      ],
      [
        "./orchestration/brain/entropy_probe.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "calculate_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "calculate_entropy"
      ],
      [
        "./dream/tools/dream_divergence_map.py",
        "calculate_entropy"
      ],
      [
        "./emotion/mood_regulation/mood_entropy_tracker.py",
        "calculate_entropy"
      ]
    ],
    "logphasemismatch": [
      [
        "./trace/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "log_phase_mismatch"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "log_phase_mismatch"
      ]
    ],
    "summarizedrift": [
      [
        "./trace/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "summarize_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "summarize_drift"
      ]
    ],
    "calculatesymbolicdrift": [
      [
        "./trace/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "calculate_symbolic_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "calculate_symbolic_drift"
      ]
    ],
    "registersymbolicstate": [
      [
        "./trace/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "register_symbolic_state"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "register_symbolic_state"
      ]
    ],
    "detectrecursivedriftloops": [
      [
        "./trace/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "detect_recursive_drift_loops"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "detect_recursive_drift_loops"
      ]
    ],
    "emitdriftalert": [
      [
        "./trace/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./core/symbolic/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/features/drift/trace_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "emit_drift_alert"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker_trace.py",
        "emit_drift_alert"
      ]
    ],
    "calculateseverity": [
      [
        "./trace/drift_dashboard.py",
        "_calculate_severity"
      ],
      [
        "./trace/drift/unified_drift_system.py",
        "_calculate_severity"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "_calculate_severity"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_calculate_severity"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "_calculate_severity"
      ]
    ],
    "calculatesystemhealth": [
      [
        "./trace/drift_dashboard.py",
        "_calculate_system_health"
      ],
      [
        "./core/observability_steering.py",
        "_calculate_system_health"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_system_health"
      ]
    ],
    "getusertier": [
      [
        "./trace/drift/unified_drift_system.py",
        "_get_user_tier"
      ],
      [
        "./core/identity/id_manager.py",
        "get_user_tier"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "get_user_tier"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "get_user_tier"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "_get_user_tier"
      ],
      [
        "./identity/core/tier/tier_manager.py",
        "get_user_tier"
      ],
      [
        "./identity/core/tier/tier_system.py",
        "get_user_tier"
      ],
      [
        "./identity/api/api.py",
        "get_user_tier"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "get_user_tier"
      ]
    ],
    "send": [
      [
        "./core/minimal_actor.py",
        "send"
      ],
      [
        "./core/core_utilities.py",
        "send"
      ],
      [
        "./core/actor_model.py",
        "send"
      ],
      [
        "./orchestration/brain/net/client.py",
        "send"
      ]
    ],
    "run": [
      [
        "./core/minimal_actor.py",
        "_run"
      ],
      [
        "./core/core_utilities.py",
        "_run"
      ],
      [
        "./core/actor_model.py",
        "_run"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "run"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "run"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "run"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "run"
      ]
    ],
    "addchild": [
      [
        "./core/fault_tolerance.py",
        "add_child"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "add_child"
      ],
      [
        "./reasoning/trace_summary_builder.py",
        "add_child"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "add_child"
      ]
    ],
    "generateresponse": [
      [
        "./core/ai_interface.py",
        "generate_response"
      ],
      [
        "./core/interfaces/logic/agent_logic_architecture.py",
        "generate_response"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "generate_response"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "generate_response"
      ],
      [
        "./learning/embodied_thought/generative_reflex.py",
        "generate_response"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_generate_response"
      ]
    ],
    "setuplogger": [
      [
        "./core/integration_hub.py",
        "_setup_logger"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "_setup_logger"
      ],
      [
        "./core/base/logger.py",
        "setup_logger"
      ]
    ],
    "registercomponent": [
      [
        "./core/integration_hub.py",
        "register_component"
      ],
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/integrator.py",
        "register_component"
      ],
      [
        "./core/agi/self_healing.py",
        "register_component"
      ],
      [
        "./orchestration/base.py",
        "register_component"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "register_component"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "register_component"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "register_component"
      ]
    ],
    "getcomponentstatus": [
      [
        "./core/integration_hub.py",
        "get_component_status"
      ],
      [
        "./memory/memoria.py",
        "get_component_status"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "get_component_status"
      ]
    ],
    "cleanup": [
      [
        "./core/integration_hub.py",
        "cleanup"
      ],
      [
        "./core/practical_optimizations.py",
        "cleanup"
      ],
      [
        "./memory/systems/memory_identity.py",
        "cleanup"
      ],
      [
        "./voice/processor.py",
        "cleanup"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "cleanup"
      ]
    ],
    "receive": [
      [
        "./core/swarm.py",
        "receive"
      ],
      [
        "./core/enhanced_swarm.py",
        "receive"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ],
      [
        "./core/actor_model.py",
        "receive"
      ]
    ],
    "handlemessage": [
      [
        "./core/swarm.py",
        "_handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/awareness_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "_handle_message"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "handle_message"
      ]
    ],
    "createagent": [
      [
        "./core/swarm.py",
        "create_agent"
      ],
      [
        "./core/event_sourcing.py",
        "create_agent"
      ],
      [
        "./core/bot.py",
        "create_agent"
      ]
    ],
    "registercolony": [
      [
        "./core/swarm.py",
        "register_colony"
      ],
      [
        "./memory/core/colony_memory_validator.py",
        "register_colony"
      ],
      [
        "./memory/adapters/colony_memory_adapter.py",
        "register_colony"
      ],
      [
        "./memory/systems/colony_swarm_integration.py",
        "register_colony"
      ],
      [
        "./bridge/colony_bridge.py",
        "register_colony"
      ]
    ],
    "startmonitoring": [
      [
        "./core/resource_efficiency_analyzer.py",
        "start_monitoring"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "start_monitoring"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "start_monitoring"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "start_monitoring"
      ]
    ],
    "stopmonitoring": [
      [
        "./core/resource_efficiency_analyzer.py",
        "stop_monitoring"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "stop_monitoring"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "stop_monitoring"
      ],
      [
        "./symbolic/features/glyphs/glyph_sentinel.py",
        "stop_monitoring"
      ]
    ],
    "calculatetrend": [
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_trend"
      ],
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_trend"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_trend"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_calculate_trend"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_calculate_trend"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_trend"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_trend"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_calculate_trend"
      ]
    ],
    "calculatememoryefficiency": [
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_memory_efficiency"
      ],
      [
        "./learning/system.py",
        "_calculate_memory_efficiency"
      ],
      [
        "./learning/learning_system.py",
        "_calculate_memory_efficiency"
      ]
    ],
    "calculateefficiencyscore": [
      [
        "./core/resource_efficiency_analyzer.py",
        "_calculate_efficiency_score"
      ],
      [
        "./core/efficient_communication.py",
        "_calculate_efficiency_score"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_efficiency_score"
      ]
    ],
    "register": [
      [
        "./core/symbolic_contract.py",
        "register"
      ],
      [
        "./core/base/symbolic.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register"
      ],
      [
        "./orchestration/agents/registry.py",
        "register"
      ],
      [
        "./symbolic/swarm_tag_simulation.py",
        "register"
      ]
    ],
    "get": [
      [
        "./core/symbolic_contract.py",
        "get"
      ],
      [
        "./core/practical_optimizations.py",
        "get"
      ],
      [
        "./core/practical_optimizations.py",
        "get"
      ],
      [
        "./core/tagging/tagging_system.py",
        "get"
      ],
      [
        "./core/base/base_config.py",
        "get"
      ],
      [
        "./core/base/symbolic.py",
        "get"
      ],
      [
        "./memory/memory_optimization.py",
        "get"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get"
      ],
      [
        "./memory/distributed_state_manager.py",
        "get"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "get"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "get"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "get"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "get"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "get"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get"
      ],
      [
        "./orchestration/brain/net/client.py",
        "get"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get"
      ],
      [
        "./governance/common.py",
        "get"
      ]
    ],
    "lukhastierrequired": [
      [
        "./core/integrator.py",
        "lukhas_tier_required"
      ],
      [
        "./core/decorators.py",
        "lukhas_tier_required"
      ],
      [
        "./core/ai/integration_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/fold_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/emotional.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/helix_dna.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/core.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/agent_memory.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/tier_system.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "lukhas_tier_required"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "lukhas_tier_required"
      ],
      [
        "./bridge/integration_bridge.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/service.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/core/engine.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "lukhas_tier_required"
      ],
      [
        "./orchestration/integration_engine.py",
        "lukhas_tier_required"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_components.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/certificate_manager.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "lukhas_tier_required"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "lukhas_tier_required"
      ]
    ],
    "decorator": [
      [
        "./core/integrator.py",
        "decorator"
      ],
      [
        "./core/tier_unification_adapter.py",
        "decorator"
      ],
      [
        "./core/practical_optimizations.py",
        "decorator"
      ],
      [
        "./core/module_registry.py",
        "decorator"
      ],
      [
        "./core/identity_aware_base.py",
        "decorator"
      ],
      [
        "./core/identity_integration.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/audit/audit_decorators.py",
        "decorator"
      ],
      [
        "./core/ai/integration_manager.py",
        "decorator"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "decorator"
      ],
      [
        "./core/hub_services/service_registry.py",
        "decorator"
      ],
      [
        "./memory/fold_engine.py",
        "decorator"
      ],
      [
        "./memory/emotional.py",
        "decorator"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "decorator"
      ],
      [
        "./memory/systems/helix_dna.py",
        "decorator"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/core.py",
        "decorator"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "decorator"
      ],
      [
        "./memory/systems/agent_memory.py",
        "decorator"
      ],
      [
        "./memory/systems/helix_mapper.py",
        "decorator"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "decorator"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "decorator"
      ],
      [
        "./memory/systems/tier_system.py",
        "decorator"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "decorator"
      ],
      [
        "./memory/systems/bio_symbolic_memory.py",
        "decorator"
      ],
      [
        "./identity/connector.py",
        "decorator"
      ],
      [
        "./bridge/integration_bridge.py",
        "decorator"
      ],
      [
        "./consciousness/service.py",
        "decorator"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "decorator"
      ],
      [
        "./consciousness/quantum_consciousness_integration.py",
        "decorator"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "decorator"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "decorator"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "decorator"
      ],
      [
        "./consciousness/core/engine.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "decorator"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "decorator"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "decorator"
      ],
      [
        "./ethics/tier_enforcer.py",
        "decorator"
      ],
      [
        "./ethics/meg_guard.py",
        "decorator"
      ],
      [
        "./orchestration/integration_engine.py",
        "decorator"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "decorator"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "decorator"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "decorator"
      ],
      [
        "./api/core/controllers.py",
        "decorator"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "decorator"
      ],
      [
        "./quantum/bio.py",
        "decorator"
      ],
      [
        "./quantum/bio_components.py",
        "decorator"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "decorator"
      ],
      [
        "./quantum/certificate_manager.py",
        "decorator"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "decorator"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "decorator"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "decorator"
      ]
    ],
    "getcoherence": [
      [
        "./core/integrator.py",
        "get_coherence"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "get_coherence"
      ],
      [
        "./quantum/bio_components.py",
        "get_coherence"
      ]
    ],
    "processmessage": [
      [
        "./core/integrator.py",
        "process_message"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "process_message"
      ],
      [
        "./memory/systems/memory_node.py",
        "process_message"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "process_message"
      ],
      [
        "./ethics/decision_node.py",
        "process_message"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "process_message"
      ]
    ],
    "checkpermission": [
      [
        "./core/integrator.py",
        "check_permission"
      ],
      [
        "./core/security/agi_security.py",
        "check_permission"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "check_permission"
      ],
      [
        "./identity/enterprise/auth.py",
        "check_permission"
      ]
    ],
    "lockmemory": [
      [
        "./core/id.py",
        "lock_memory"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "lock_memory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "lock_memory"
      ]
    ],
    "unlockmemory": [
      [
        "./core/id.py",
        "unlock_memory"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "unlock_memory"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "unlock_memory"
      ]
    ],
    "generateemotionalkey": [
      [
        "./core/id.py",
        "_generate_emotional_key"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_emotional_key"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_emotional_key"
      ]
    ],
    "generatestandardkey": [
      [
        "./core/id.py",
        "_generate_standard_key"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_standard_key"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_standard_key"
      ]
    ],
    "encryptdata": [
      [
        "./core/id.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_identity.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/memory_node.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_encrypt_data"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_encrypt_data"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_encrypt_data"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "_encrypt_data"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_encrypt_data"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_encrypt_data"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "_encrypt_data"
      ]
    ],
    "decryptdata": [
      [
        "./core/id.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/memory_lock.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/memory_identity.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/memory_node.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/helix_dna.py",
        "_decrypt_data"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_decrypt_data"
      ],
      [
        "./identity/core/id_service/portability_system.py",
        "_decrypt_data"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_decrypt_data"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_decrypt_data"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "_decrypt_data"
      ]
    ],
    "calculateemotionalsimilarity": [
      [
        "./core/id.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_calculate_emotional_similarity"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_emotional_similarity"
      ]
    ],
    "loadcompliancerules": [
      [
        "./core/id.py",
        "_load_compliance_rules"
      ],
      [
        "./core/audit/audit_analytics.py",
        "_load_compliance_rules"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_load_compliance_rules"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_load_compliance_rules"
      ]
    ],
    "checkcompliance": [
      [
        "./core/id.py",
        "check_compliance"
      ],
      [
        "./core/fallback_services.py",
        "check_compliance"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "check_compliance"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "check_compliance"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "check_compliance"
      ],
      [
        "./ethics/service.py",
        "check_compliance"
      ],
      [
        "./ethics/service.py",
        "check_compliance"
      ],
      [
        "./ethics/bases.py",
        "check_compliance"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "check_compliance"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_check_compliance"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "check_compliance"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_compliance"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_compliance"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_compliance"
      ]
    ],
    "verifyemojiseed": [
      [
        "./core/id.py",
        "_verify_emoji_seed"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_emoji_seed"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_emoji_seed"
      ]
    ],
    "verifybiometrics": [
      [
        "./core/id.py",
        "_verify_biometrics"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_biometrics"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_biometrics"
      ]
    ],
    "verifysidpuzzle": [
      [
        "./core/id.py",
        "_verify_sid_puzzle"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_sid_puzzle"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_sid_puzzle"
      ]
    ],
    "verifyemergencygesture": [
      [
        "./core/id.py",
        "_verify_emergency_gesture"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_verify_emergency_gesture"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_verify_emergency_gesture"
      ]
    ],
    "gettierpermissions": [
      [
        "./core/id.py",
        "_get_tier_permissions"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_get_tier_permissions"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_get_tier_permissions"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_get_tier_permissions"
      ],
      [
        "./api/core/services.py",
        "_get_tier_permissions"
      ]
    ],
    "generatequantumsignature": [
      [
        "./core/id.py",
        "_generate_quantum_signature"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "_generate_quantum_signature"
      ],
      [
        "./core/meta_learning/monitor_dashboard.py",
        "_generate_quantum_signature"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "_generate_quantum_signature"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_generate_quantum_signature"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_generate_quantum_signature"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_quantum_signature"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_generate_quantum_signature"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/web_integration.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/vault_manager.py",
        "_generate_quantum_signature"
      ],
      [
        "./quantum/api_manager.py",
        "_generate_quantum_signature"
      ]
    ],
    "getcompliancestatus": [
      [
        "./core/id.py",
        "get_compliance_status"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "get_compliance_status"
      ],
      [
        "./reasoning/id_reasoning_engine.py",
        "get_compliance_status"
      ],
      [
        "./reasoning/lukhas_id_reasoning_engine.py",
        "get_compliance_status"
      ],
      [
        "./ethics/compliance_engine.py",
        "get_compliance_status"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "get_compliance_status"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "get_compliance_status"
      ]
    ],
    "getglobaltracer": [
      [
        "./core/distributed_tracing.py",
        "get_global_tracer"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "get_global_tracer"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "get_global_tracer"
      ]
    ],
    "addtag": [
      [
        "./core/distributed_tracing.py",
        "add_tag"
      ],
      [
        "./core/distributed_tracing.py",
        "add_tag"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast_core.py",
        "add_tag"
      ],
      [
        "./memory/fold_engine.py",
        "add_tag"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "add_tag"
      ]
    ],
    "addlog": [
      [
        "./core/distributed_tracing.py",
        "add_log"
      ],
      [
        "./core/distributed_tracing.py",
        "add_log"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_log"
      ]
    ],
    "gettrace": [
      [
        "./core/distributed_tracing.py",
        "get_trace"
      ],
      [
        "./reasoning/utils/agentic_trace.py",
        "get_trace"
      ],
      [
        "./orchestration/brain/eu_ai_transparency.py",
        "get_trace"
      ],
      [
        "./symbolic/features/memoria/symbolic_trace_map.py",
        "get_trace"
      ]
    ],
    "takesnapshot": [
      [
        "./core/distributed_tracing.py",
        "take_snapshot"
      ],
      [
        "./core/state_management.py",
        "take_snapshot"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "take_snapshot"
      ]
    ],
    "trace": [
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/distributed_tracing.py",
        "_trace"
      ],
      [
        "./core/decorators.py",
        "trace"
      ],
      [
        "./memory/memory_systems/memoria-checkpoint.py",
        "trace"
      ],
      [
        "./memory/systems/memory_checkpoint.py",
        "trace"
      ],
      [
        "./memory/systems/memory_viz.py",
        "trace"
      ],
      [
        "./symbolic/features/tracer.py",
        "trace"
      ]
    ],
    "analyze": [
      [
        "./core/api_diff_analyzer.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "analyze"
      ],
      [
        "./reasoning/analysis/__init__.py",
        "analyze"
      ],
      [
        "./reasoning/analysis/__init__.py",
        "analyze"
      ],
      [
        "./voice/speech_processor.py",
        "analyze"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "analyze"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "analyze"
      ]
    ],
    "replayevents": [
      [
        "./core/event_replayer.py",
        "replay_events"
      ],
      [
        "./core/event_sourcing.py",
        "replay_events"
      ],
      [
        "./core/state_management.py",
        "_replay_events"
      ]
    ],
    "fromdict": [
      [
        "./core/image_processing_pipeline.py",
        "from_dict"
      ],
      [
        "./core/event_sourcing.py",
        "from_dict"
      ],
      [
        "./core/quantum_identity_manager.py",
        "from_dict"
      ],
      [
        "./memory/structural_conscience.py",
        "from_dict"
      ],
      [
        "./memory/emotional.py",
        "from_dict"
      ],
      [
        "./memory/core.py",
        "from_dict"
      ],
      [
        "./memory/basic.py",
        "from_dict"
      ],
      [
        "./memory/dream_memory_fold.py",
        "from_dict"
      ],
      [
        "./memory/fold_system/distributed_memory_fold.py",
        "from_dict"
      ],
      [
        "./memory/systems/simple_store.py",
        "from_dict"
      ],
      [
        "./memory/systems/meta_learning_patterns.py",
        "from_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "from_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "from_dict"
      ],
      [
        "./memory/systems/neurosymbolic_integration.py",
        "from_dict"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "from_dict"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "from_dict"
      ],
      [
        "./voice/voice_profiling.py",
        "from_dict"
      ],
      [
        "./orchestration/config/production_config.py",
        "from_dict"
      ],
      [
        "./orchestration/monitoring/health_checks.py",
        "from_dict"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "from_dict"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "from_dict"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "from_dict"
      ]
    ],
    "subscribetoevents": [
      [
        "./core/image_processing_pipeline.py",
        "_subscribe_to_events"
      ],
      [
        "./core/efficient_communication.py",
        "subscribe_to_events"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "subscribe_to_events"
      ]
    ],
    "createproposal": [
      [
        "./core/image_processing_pipeline.py",
        "_create_proposal"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "create_proposal"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "create_proposal"
      ]
    ],
    "subscribe": [
      [
        "./core/image_processing_pipeline.py",
        "subscribe"
      ],
      [
        "./core/event_bus.py",
        "subscribe"
      ],
      [
        "./core/efficient_communication.py",
        "subscribe"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "subscribe"
      ],
      [
        "./bridge/shared_state.py",
        "subscribe"
      ]
    ],
    "calculateshannonentropy": [
      [
        "./core/symbolic_drift_analyzer.py",
        "calculate_shannon_entropy"
      ],
      [
        "./core/monitoring/collapse_tracker.py",
        "calculate_shannon_entropy"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_shannon_entropy"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_shannon_entropy"
      ]
    ],
    "calculateconfidence": [
      [
        "./core/oracle_nervous_system.py",
        "_calculate_confidence"
      ],
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_calculate_confidence"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_calculate_confidence"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_calculate_confidence"
      ],
      [
        "./identity/core/colonies/biometric_verification_colony.py",
        "_calculate_confidence"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_calculate_confidence"
      ],
      [
        "./creativity/engines/engine.py",
        "_calculate_confidence"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_confidence"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_confidence"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_confidence"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_calculate_confidence"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_calculate_confidence"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_calculate_confidence"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_calculate_confidence"
      ]
    ],
    "updateperformancemetrics": [
      [
        "./core/oracle_nervous_system.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "_update_performance_metrics"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_update_performance_metrics"
      ]
    ],
    "tolambdatier": [
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "to_lambda_tier"
      ]
    ],
    "fromlambdatier": [
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ],
      [
        "./core/tier_unification_adapter.py",
        "from_lambda_tier"
      ]
    ],
    "validateaccess": [
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/tier_unification_adapter.py",
        "validate_access"
      ],
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_validate_access"
      ],
      [
        "./memory/memory_fold.py",
        "validate_access"
      ]
    ],
    "registerintegrationservices": [
      [
        "./core/core_hub.py",
        "_register_integration_services"
      ],
      [
        "./orchestration/dream/dream_hub.py",
        "_register_integration_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "_register_integration_services"
      ]
    ],
    "listservices": [
      [
        "./core/core_hub.py",
        "list_services"
      ],
      [
        "./core/hub_services/service_registry.py",
        "list_services"
      ],
      [
        "./memory/memory_hub.py",
        "list_services"
      ],
      [
        "./identity/identity_hub.py",
        "list_services"
      ],
      [
        "./voice/voice_hub.py",
        "list_services"
      ],
      [
        "./orchestration/service_registry.py",
        "list_services"
      ],
      [
        "./orchestration/service_registry.py",
        "list_services"
      ],
      [
        "./api/core/api_hub.py",
        "list_services"
      ],
      [
        "./emotion/emotion_hub.py",
        "list_services"
      ],
      [
        "./quantum/processing/quantum_integration_hub.py",
        "list_services"
      ],
      [
        "./quantum/processing/quantum_hub.py",
        "list_services"
      ]
    ],
    "broadcasttoallhubs": [
      [
        "./core/core_hub.py",
        "broadcast_to_all_hubs"
      ],
      [
        "./memory/memory_hub.py",
        "broadcast_to_all_hubs"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "broadcast_to_all_hubs"
      ]
    ],
    "receivemessage": [
      [
        "./core/core_hub.py",
        "receive_message"
      ],
      [
        "./memory/memory_hub.py",
        "receive_message"
      ],
      [
        "./architectures/dast/integration/dast_integration_hub.py",
        "receive_message"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "receive_message"
      ]
    ],
    "remember": [
      [
        "./core/enhanced_swarm.py",
        "remember"
      ],
      [
        "./memory/basic.py",
        "remember"
      ],
      [
        "./memory/basic.py",
        "remember"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "remember"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "remember"
      ]
    ],
    "recall": [
      [
        "./core/enhanced_swarm.py",
        "recall"
      ],
      [
        "./memory/basic.py",
        "recall"
      ],
      [
        "./memory/basic.py",
        "recall"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "recall"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "recall"
      ],
      [
        "./orchestration/brain/symbolic_ai/modules/episodic_recall.py",
        "recall"
      ]
    ],
    "getcolonystatus": [
      [
        "./core/enhanced_swarm.py",
        "get_colony_status"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "get_colony_status"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "get_colony_status"
      ]
    ],
    "applyevent": [
      [
        "./core/event_sourcing.py",
        "apply_event"
      ],
      [
        "./core/event_sourcing.py",
        "apply_event"
      ],
      [
        "./core/state_management.py",
        "apply_event"
      ]
    ],
    "completetask": [
      [
        "./core/event_sourcing.py",
        "complete_task"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "complete_task"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "_complete_task"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "complete_task"
      ]
    ],
    "apply": [
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ],
      [
        "./core/practical_optimizations.py",
        "apply"
      ]
    ],
    "isexpired": [
      [
        "./core/practical_optimizations.py",
        "is_expired"
      ],
      [
        "./core/efficient_communication.py",
        "is_expired"
      ],
      [
        "./core/agent_coordination.py",
        "is_expired"
      ],
      [
        "./memory/distributed_state_manager.py",
        "is_expired"
      ],
      [
        "./memory/privacy_preserving_memory_vault.py",
        "is_expired"
      ],
      [
        "./bridge/shared_state.py",
        "_is_expired"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_expired"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_expired"
      ]
    ],
    "put": [
      [
        "./core/practical_optimizations.py",
        "put"
      ],
      [
        "./memory/memory_optimization.py",
        "put"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "put"
      ],
      [
        "./orchestration/brain/net/client.py",
        "put"
      ]
    ],
    "release": [
      [
        "./core/practical_optimizations.py",
        "release"
      ],
      [
        "./memory/memory_optimization.py",
        "release"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "release"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "release"
      ]
    ],
    "del": [
      [
        "./core/practical_optimizations.py",
        "__del__"
      ],
      [
        "./memory/memory_optimization.py",
        "__del__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__del__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__del__"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "__del__"
      ]
    ],
    "add": [
      [
        "./core/practical_optimizations.py",
        "add"
      ],
      [
        "./memory/memory_optimization.py",
        "add"
      ],
      [
        "./memory/systems/memory_viz.py",
        "__add__"
      ]
    ],
    "shutdown": [
      [
        "./core/practical_optimizations.py",
        "shutdown"
      ],
      [
        "./core/module_registry.py",
        "shutdown"
      ],
      [
        "./core/integration/layer.py",
        "shutdown"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "shutdown"
      ],
      [
        "./core/base/base_module.py",
        "shutdown"
      ],
      [
        "./memory/distributed_state_manager.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "shutdown"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "shutdown"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "shutdown"
      ],
      [
        "./ethics/policy_engines/integration.py",
        "shutdown"
      ],
      [
        "./ethics/policy_engines/base.py",
        "shutdown"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "shutdown"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "shutdown"
      ]
    ],
    "wrapper": [
      [
        "./core/practical_optimizations.py",
        "wrapper"
      ],
      [
        "./core/practical_optimizations.py",
        "wrapper"
      ],
      [
        "./core/module_registry.py",
        "wrapper"
      ],
      [
        "./core/identity_aware_base.py",
        "wrapper"
      ],
      [
        "./core/identity_integration.py",
        "wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/decorators.py",
        "wrapper"
      ],
      [
        "./core/verifold/verifold_unified.py",
        "wrapper"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/dast.py",
        "wrapper"
      ],
      [
        "./core/hub_services/service_registry.py",
        "wrapper"
      ],
      [
        "./memory/systems/tier_system.py",
        "wrapper"
      ],
      [
        "./consciousness/awareness/symbolic_trace_logger.py",
        "wrapper"
      ],
      [
        "./ethics/tier_enforcer.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "wrapper"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "wrapper"
      ],
      [
        "./governance/common.py",
        "wrapper"
      ]
    ],
    "assessaction": [
      [
        "./core/fallback_services.py",
        "assess_action"
      ],
      [
        "./core/base/ethics.py",
        "assess_action"
      ],
      [
        "./ethics/service.py",
        "assess_action"
      ],
      [
        "./ethics/service.py",
        "assess_action"
      ]
    ],
    "storememory": [
      [
        "./core/fallback_services.py",
        "store_memory"
      ],
      [
        "./memory/service.py",
        "store_memory"
      ],
      [
        "./memory/service.py",
        "store_memory"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "store_memory"
      ]
    ],
    "retrievememory": [
      [
        "./core/fallback_services.py",
        "retrieve_memory"
      ],
      [
        "./memory/service.py",
        "retrieve_memory"
      ],
      [
        "./memory/service.py",
        "retrieve_memory"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "retrieve_memory"
      ],
      [
        "./orchestration/brain/identity_manager.py",
        "retrieve_memory"
      ]
    ],
    "searchmemory": [
      [
        "./core/fallback_services.py",
        "search_memory"
      ],
      [
        "./memory/service.py",
        "search_memory"
      ],
      [
        "./memory/service.py",
        "search_memory"
      ]
    ],
    "generatecontent": [
      [
        "./core/fallback_services.py",
        "generate_content"
      ],
      [
        "./creativity/service.py",
        "generate_content"
      ],
      [
        "./creativity/service.py",
        "generate_content"
      ]
    ],
    "synthesizedream": [
      [
        "./core/fallback_services.py",
        "synthesize_dream"
      ],
      [
        "./creativity/service.py",
        "synthesize_dream"
      ],
      [
        "./creativity/service.py",
        "synthesize_dream"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "synthesize_dream"
      ]
    ],
    "processawareness": [
      [
        "./core/fallback_services.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/uk_awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "process_awareness"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "process_awareness"
      ]
    ],
    "getconsciousnessstate": [
      [
        "./core/fallback_services.py",
        "get_consciousness_state"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "get_consciousness_state"
      ],
      [
        "./quantum/main.py",
        "get_consciousness_state"
      ]
    ],
    "learnfromdata": [
      [
        "./core/fallback_services.py",
        "learn_from_data"
      ],
      [
        "./learning/service.py",
        "learn_from_data"
      ],
      [
        "./learning/service.py",
        "learn_from_data"
      ],
      [
        "./orchestration/service_registry.py",
        "learn_from_data"
      ],
      [
        "./orchestration/learning_initializer.py",
        "learn_from_data"
      ]
    ],
    "adaptbehavior": [
      [
        "./core/fallback_services.py",
        "adapt_behavior"
      ],
      [
        "./bridge/personality_communication_engine.py",
        "adapt_behavior"
      ],
      [
        "./learning/service.py",
        "adapt_behavior"
      ],
      [
        "./learning/service.py",
        "adapt_behavior"
      ],
      [
        "./orchestration/learning_initializer.py",
        "adapt_behavior"
      ]
    ],
    "quantumcompute": [
      [
        "./core/fallback_services.py",
        "quantum_compute"
      ],
      [
        "./quantum/service.py",
        "quantum_compute"
      ],
      [
        "./quantum/service.py",
        "quantum_compute"
      ]
    ],
    "quantumentangle": [
      [
        "./core/fallback_services.py",
        "quantum_entangle"
      ],
      [
        "./quantum/service.py",
        "quantum_entangle"
      ],
      [
        "./quantum/service.py",
        "quantum_entangle"
      ]
    ],
    "verifyuseraccess": [
      [
        "./core/fallback_services.py",
        "verify_user_access"
      ],
      [
        "./core/identity_aware_base.py",
        "verify_user_access"
      ],
      [
        "./memory/service.py",
        "verify_user_access"
      ],
      [
        "./identity/interface.py",
        "verify_user_access"
      ],
      [
        "./creativity/service.py",
        "verify_user_access"
      ],
      [
        "./learning/service.py",
        "verify_user_access"
      ],
      [
        "./consciousness/service.py",
        "verify_user_access"
      ],
      [
        "./ethics/service.py",
        "verify_user_access"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "verify_user_access"
      ],
      [
        "./quantum/service.py",
        "verify_user_access"
      ]
    ],
    "logactivity": [
      [
        "./core/fallback_services.py",
        "log_activity"
      ],
      [
        "./core/identity_aware_base.py",
        "log_activity"
      ],
      [
        "./memory/service.py",
        "log_activity"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/interface.py",
        "log_activity"
      ],
      [
        "./identity/core/trace/activity_logger.py",
        "log_activity"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "log_activity"
      ],
      [
        "./creativity/service.py",
        "log_activity"
      ],
      [
        "./learning/service.py",
        "log_activity"
      ],
      [
        "./consciousness/service.py",
        "log_activity"
      ],
      [
        "./ethics/service.py",
        "log_activity"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "log_activity"
      ],
      [
        "./quantum/service.py",
        "log_activity"
      ]
    ],
    "checktieraccess": [
      [
        "./core/module_registry.py",
        "_check_tier_access"
      ],
      [
        "./memory/fold_engine.py",
        "_check_tier_access"
      ],
      [
        "./identity/core/user_tier_mapping.py",
        "check_tier_access"
      ]
    ],
    "unsubscribe": [
      [
        "./core/event_bus.py",
        "unsubscribe"
      ],
      [
        "./core/efficient_communication.py",
        "unsubscribe"
      ],
      [
        "./bridge/shared_state.py",
        "unsubscribe"
      ]
    ],
    "recordfailure": [
      [
        "./core/supervision.py",
        "record_failure"
      ],
      [
        "./core/agi/self_healing.py",
        "record_failure"
      ],
      [
        "./memory/hooks/registry.py",
        "_record_failure"
      ],
      [
        "./orchestration/config/migration_router.py",
        "record_failure"
      ]
    ],
    "calculateenergycost": [
      [
        "./core/efficient_communication.py",
        "_calculate_energy_cost"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_energy_cost"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_energy_cost"
      ]
    ],
    "registernode": [
      [
        "./core/efficient_communication.py",
        "register_node"
      ],
      [
        "./core/infrastructure/node_manager.py",
        "register_node"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "register_node"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "register_node"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "register_node"
      ]
    ],
    "getstats": [
      [
        "./core/efficient_communication.py",
        "get_stats"
      ],
      [
        "./core/mailbox.py",
        "get_stats"
      ],
      [
        "./core/actor_system.py",
        "get_stats"
      ],
      [
        "./memory/memory_optimization.py",
        "get_stats"
      ],
      [
        "./memory/memory_optimization.py",
        "get_stats"
      ],
      [
        "./memory/lightweight_concurrency.py",
        "get_stats"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "get_stats"
      ],
      [
        "./memory/systems/memory_media_file_storage.py",
        "get_stats"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_stats"
      ],
      [
        "./bridge/shared_state.py",
        "get_stats"
      ],
      [
        "./ethics/meg_guard.py",
        "get_stats"
      ],
      [
        "./orchestration/brain/safety_guardrails.py",
        "get_stats"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "get_stats"
      ]
    ],
    "start": [
      [
        "./core/observability_steering.py",
        "start"
      ],
      [
        "./core/observability/collector.py",
        "start"
      ],
      [
        "./core/symbolism/archiver.py",
        "start"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "start"
      ],
      [
        "./voice/message_handler.py",
        "start"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "start"
      ]
    ],
    "stop": [
      [
        "./core/observability_steering.py",
        "stop"
      ],
      [
        "./core/observability/collector.py",
        "stop"
      ],
      [
        "./core/symbolism/archiver.py",
        "stop"
      ],
      [
        "./memory/systems/memory_tracker.py",
        "stop"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "stop"
      ],
      [
        "./voice/message_handler.py",
        "stop"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "stop"
      ]
    ],
    "detectpatterns": [
      [
        "./core/observability_steering.py",
        "_detect_patterns"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "detect_patterns"
      ],
      [
        "./orchestration/brain/research_awareness_engine.py",
        "_detect_patterns"
      ]
    ],
    "qsize": [
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ],
      [
        "./core/mailbox.py",
        "qsize"
      ]
    ],
    "getmemoryusage": [
      [
        "./core/monitoring_observability.py",
        "_get_memory_usage"
      ],
      [
        "./memory/memory_optimization.py",
        "_get_memory_usage"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "_get_memory_usage"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/main_node.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_get_memory_usage"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_get_memory_usage"
      ]
    ],
    "aggregate": [
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ],
      [
        "./core/tiered_state_management.py",
        "aggregate"
      ]
    ],
    "canhandle": [
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ],
      [
        "./core/tiered_state_management.py",
        "can_handle"
      ]
    ],
    "isavailable": [
      [
        "./core/direct_ai_router.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/perplexity_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/gemini_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/anthropic_wrapper.py",
        "is_available"
      ],
      [
        "./bridge/llm_wrappers/azure_openai_wrapper.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "is_available"
      ]
    ],
    "checkconsent": [
      [
        "./core/identity_aware_base.py",
        "check_consent"
      ],
      [
        "./memory/service.py",
        "check_consent"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./identity/interface.py",
        "check_consent"
      ],
      [
        "./creativity/service.py",
        "check_consent"
      ],
      [
        "./learning/service.py",
        "check_consent"
      ],
      [
        "./consciousness/service.py",
        "check_consent"
      ],
      [
        "./ethics/service.py",
        "check_consent"
      ],
      [
        "./orchestration/core_modules/orchestration_service.py",
        "check_consent"
      ],
      [
        "./api/core/dream_commerce.py",
        "check_consent"
      ],
      [
        "./quantum/service.py",
        "check_consent"
      ]
    ],
    "enter": [
      [
        "./core/identity_integration.py",
        "__enter__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__enter__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__enter__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__enter__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__enter__"
      ]
    ],
    "exit": [
      [
        "./core/identity_integration.py",
        "__exit__"
      ],
      [
        "./core/telemetry/monitoring.py",
        "__exit__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__exit__"
      ],
      [
        "./memory/systems/memory_research.py",
        "__exit__"
      ],
      [
        "./orchestration/brain/net/client.py",
        "__exit__"
      ]
    ],
    "str": [
      [
        "./core/tier_aware_colony_proxy.py",
        "__str__"
      ],
      [
        "./core/actor_system.py",
        "__str__"
      ],
      [
        "./core/base/symbolic.py",
        "__str__"
      ],
      [
        "./memory/emotional.py",
        "__str__"
      ],
      [
        "./memory/systems/pin_memory_cache.py",
        "__str__"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "__str__"
      ]
    ],
    "syncwrapper": [
      [
        "./core/tier_aware_colony_proxy.py",
        "sync_wrapper"
      ],
      [
        "./core/audit/audit_decorators.py",
        "sync_wrapper"
      ],
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "sync_wrapper"
      ],
      [
        "./ethics/meg_guard.py",
        "sync_wrapper"
      ]
    ],
    "registerhandler": [
      [
        "./core/actor_system.py",
        "register_handler"
      ],
      [
        "./core/p2p_communication.py",
        "register_handler"
      ],
      [
        "./core/hub_services/coordinator.py",
        "register_handler"
      ]
    ],
    "addrule": [
      [
        "./core/governance.py",
        "add_rule"
      ],
      [
        "./memory/scaffold/atomic_memory_scaffold.py",
        "add_rule"
      ],
      [
        "./ethics/bases.py",
        "add_rule"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "add_rule"
      ]
    ],
    "selectstrategy": [
      [
        "./core/agi/self_improvement.py",
        "_select_strategy"
      ],
      [
        "./memory/memory_optimization.py",
        "select_strategy"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_select_strategy"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_select_strategy"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_select_strategy"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_select_strategy"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_select_strategy"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "_select_strategy"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_select_strategy"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_select_strategy"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_select_strategy"
      ]
    ],
    "serialize": [
      [
        "./core/agi/consciousness_stream.py",
        "serialize"
      ],
      [
        "./learning/federated_meta_learning.py",
        "serialize"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "serialize"
      ],
      [
        "./learning/federated_learning_system.py",
        "serialize"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "serialize"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "serialize"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "serialize"
      ]
    ],
    "calculatecoherence": [
      [
        "./core/agi/consciousness_stream.py",
        "_calculate_coherence"
      ],
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "calculate_coherence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/oscillator.py",
        "_calculate_coherence"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "calculate_coherence"
      ],
      [
        "./quantum/bio_system.py",
        "calculate_coherence"
      ],
      [
        "./quantum/processing_core.py",
        "_calculate_coherence"
      ],
      [
        "./quantum/core/engine.py",
        "_calculate_coherence"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_calculate_coherence"
      ]
    ],
    "selectlearningstrategy": [
      [
        "./core/agi/autonomous_learning.py",
        "_select_learning_strategy"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "_select_learning_strategy"
      ],
      [
        "./learning/meta_learning.py",
        "_select_learning_strategy"
      ]
    ],
    "calculatesimilarity": [
      [
        "./core/agi/autonomous_learning.py",
        "_calculate_similarity"
      ],
      [
        "./memory/replay/replay_buffer.py",
        "_calculate_similarity"
      ],
      [
        "./memory/systems/memory_node.py",
        "_calculate_similarity"
      ],
      [
        "./memory/neocortical/concept_hierarchy.py",
        "calculate_similarity"
      ],
      [
        "./orchestration/security/dast/processors.py",
        "_calculate_similarity"
      ]
    ],
    "generatememoryid": [
      [
        "./core/colonies/memory_colony_enhanced.py",
        "_generate_memory_id"
      ],
      [
        "./memory/core/base_manager.py",
        "generate_memory_id"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_generate_memory_id"
      ],
      [
        "./memory/systems/distributed_memory.py",
        "_generate_memory_id"
      ],
      [
        "./memory/systems/memory_utils.py",
        "generate_memory_id"
      ]
    ],
    "createidentitycomponent": [
      [
        "./core/identity/mapper.py",
        "create_identity_component"
      ],
      [
        "./core/identity/processor.py",
        "create_identity_component"
      ],
      [
        "./core/identity/engine.py",
        "create_identity_component"
      ],
      [
        "./core/identity/persona_engine.py",
        "create_identity_component"
      ],
      [
        "./identity/identity_hub.py",
        "create_identity_component"
      ]
    ],
    "verify": [
      [
        "./core/identity/manager.py",
        "verify"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "verify"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "verify"
      ]
    ],
    "generatesessionid": [
      [
        "./core/security/agi_security.py",
        "_generate_session_id"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "_generate_session_id"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_generate_session_id"
      ],
      [
        "./identity/core/onboarding/onboarding.py",
        "_generate_session_id"
      ],
      [
        "./identity/enterprise/auth.py",
        "_generate_session_id"
      ],
      [
        "./ethics/seedra/seedra_core.py",
        "_generate_session_id"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "_generate_session_id"
      ]
    ],
    "sanitizeinput": [
      [
        "./core/security/agi_security.py",
        "sanitize_input"
      ],
      [
        "./identity/public/lambda_id_previewer.py",
        "_sanitize_input"
      ],
      [
        "./ethics/security/secure_utils.py",
        "sanitize_input"
      ]
    ],
    "symbolicprocess": [
      [
        "./core/integration/neural_symbolic_bridge.py",
        "_symbolic_process"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_symbolic_process"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "_symbolic_process"
      ]
    ],
    "integrateresults": [
      [
        "./core/integration/neural_symbolic_bridge.py",
        "_integrate_results"
      ],
      [
        "./reasoning/intent/intent_detector.py",
        "_integrate_results"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_integrate_results"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_integrate_results"
      ],
      [
        "./symbolic/neural/neural_symbolic_bridge.py",
        "_integrate_results"
      ]
    ],
    "initializemodules": [
      [
        "./core/integration/executive_decision_integrator.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_initialize_modules"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_initialize_modules"
      ]
    ],
    "defaultconfig": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_default_config"
      ],
      [
        "./core/utils/orchestration_energy_aware_execution_planner.py",
        "_default_config"
      ],
      [
        "./security/privacy/zkp_dream_validator.py",
        "_default_config"
      ],
      [
        "./reasoning/decision/bridge.py",
        "_default_config"
      ],
      [
        "./orchestration/colony_orchestrator.py",
        "_default_config"
      ],
      [
        "./orchestration/master_orchestrator.py",
        "_default_config"
      ],
      [
        "./orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "_default_config"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_default_config"
      ]
    ],
    "calculatepatterncomplexity": [
      [
        "./core/integration/neuro_symbolic_fusion_layer.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./identity/core/id_service/entropy_engine.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./identity/auth/qrg_generators.py",
        "_calculate_pattern_complexity"
      ],
      [
        "./symbolic/neural/neuro_symbolic_fusion_layer.py",
        "_calculate_pattern_complexity"
      ]
    ],
    "getcapabilities": [
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ],
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_capabilities"
      ],
      [
        "./reasoning/analysis/engine.py",
        "get_capabilities"
      ],
      [
        "./orchestration/agents/base.py",
        "get_capabilities"
      ],
      [
        "./orchestration/agents/builtin/jules.py",
        "get_capabilities"
      ]
    ],
    "getsrd": [
      [
        "./core/integration/dynamic_modality_broker.py",
        "get_srd"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "get_srd"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "get_srd"
      ]
    ],
    "instrumentreasoning": [
      [
        "./core/integration/dynamic_modality_broker.py",
        "instrument_reasoning"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "instrument_reasoning"
      ],
      [
        "./dream/hyperspace_dream_simulator.py",
        "instrument_reasoning"
      ]
    ],
    "unifiedprocessing": [
      [
        "./core/personality/creative_personality.py",
        "unified_processing"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "unified_processing"
      ],
      [
        "./creativity/personality/creative_core.py",
        "unified_processing"
      ]
    ],
    "selectmodels": [
      [
        "./core/personality/creative_personality.py",
        "_select_models"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_select_models"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_select_models"
      ]
    ],
    "multimodalfusion": [
      [
        "./core/personality/creative_personality.py",
        "_multimodal_fusion"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_multimodal_fusion"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_multimodal_fusion"
      ]
    ],
    "generateoutput": [
      [
        "./core/personality/creative_personality.py",
        "_generate_output"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_generate_output"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_generate_output"
      ]
    ],
    "attentionfusion": [
      [
        "./core/personality/creative_personality.py",
        "_attention_fusion"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "_attention_fusion"
      ],
      [
        "./creativity/personality/creative_core.py",
        "_attention_fusion"
      ]
    ],
    "adaptivelearningloop": [
      [
        "./core/personality/creative_personality.py",
        "adaptive_learning_loop"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "adaptive_learning_loop"
      ],
      [
        "./creativity/personality/creative_core.py",
        "adaptive_learning_loop"
      ]
    ],
    "analyzecontext": [
      [
        "./core/personality/creative_personality.py",
        "analyze_context"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "analyze_context"
      ],
      [
        "./creativity/personality/creative_core.py",
        "analyze_context"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_analyze_context"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_analyze_context"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_analyze_context"
      ]
    ],
    "optimizelearningapproach": [
      [
        "./core/personality/creative_personality.py",
        "optimize_learning_approach"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "optimize_learning_approach"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "optimize_learning_approach"
      ],
      [
        "./creativity/personality/creative_core.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/federated_meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "optimize_learning_approach"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "optimize_learning_approach"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "optimize_learning_approach"
      ]
    ],
    "getmodel": [
      [
        "./core/personality/creative_personality.py",
        "get_model"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "get_model"
      ],
      [
        "./creativity/personality/creative_core.py",
        "get_model"
      ],
      [
        "./creativity/personality/creative_core.py",
        "get_model"
      ],
      [
        "./learning/federated_meta_learning.py",
        "get_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_model"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_model"
      ],
      [
        "./learning/federated_learning.py",
        "get_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_model"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "get_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_model"
      ]
    ],
    "generateinsights": [
      [
        "./core/personality/creative_personality.py",
        "generate_insights"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "generate_insights"
      ],
      [
        "./core/ethics/dream_ethics_injector.py",
        "_generate_insights"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "generate_insights"
      ]
    ],
    "incorporatefeedback": [
      [
        "./core/personality/creative_personality.py",
        "incorporate_feedback"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "incorporate_feedback"
      ],
      [
        "./memory/systems/learn_to_learn.py",
        "incorporate_feedback"
      ],
      [
        "./creativity/personality/creative_core.py",
        "incorporate_feedback"
      ],
      [
        "./learning/federated_meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "incorporate_feedback"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "incorporate_feedback"
      ],
      [
        "./learning/meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "incorporate_feedback"
      ],
      [
        "./ethics/ethics_engine.py",
        "incorporate_feedback"
      ],
      [
        "./ethics/compliance/engine.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "incorporate_feedback"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "incorporate_feedback"
      ]
    ],
    "contributegradients": [
      [
        "./core/personality/creative_personality.py",
        "contribute_gradients"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "contribute_gradients"
      ],
      [
        "./creativity/personality/creative_core.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated_meta_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated_learning_system.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "contribute_gradients"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "contribute_gradients"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "contribute_gradients"
      ]
    ],
    "metahaiku": [
      [
        "./core/personality/creative_personality.py",
        "meta_haiku"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "meta_haiku"
      ],
      [
        "./creativity/personality/creative_core.py",
        "meta_haiku"
      ]
    ],
    "metadraw": [
      [
        "./core/personality/creative_personality.py",
        "meta_draw"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "meta_draw"
      ],
      [
        "./creativity/personality/creative_core.py",
        "meta_draw"
      ]
    ],
    "planprotest": [
      [
        "./core/personality/creative_personality.py",
        "plan_protest"
      ],
      [
        "./core/personality/creative_personality_clean.py",
        "plan_protest"
      ],
      [
        "./creativity/personality/creative_core.py",
        "plan_protest"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "plan_protest"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "plan_protest"
      ]
    ],
    "loadstylepreferences": [
      [
        "./core/personality/creative_expressions.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_load_style_preferences"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_load_style_preferences"
      ]
    ],
    "generatehaiku": [
      [
        "./core/personality/creative_expressions.py",
        "generate_haiku"
      ],
      [
        "./creativity/creative_q_expression.py",
        "generate_haiku"
      ],
      [
        "./creativity/creative_expression_core.py",
        "generate_haiku"
      ],
      [
        "./creativity/quantum_creative_types.py",
        "generate_haiku"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "generate_haiku"
      ]
    ],
    "createbasehaiku": [
      [
        "./core/personality/creative_expressions.py",
        "_create_base_haiku"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_create_base_haiku"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_create_base_haiku"
      ]
    ],
    "buildline": [
      [
        "./core/personality/creative_expressions.py",
        "_build_line"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_build_line"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_build_line"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_build_line"
      ]
    ],
    "expandhaiku": [
      [
        "./core/personality/creative_expressions.py",
        "_expand_haiku"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_expand_haiku"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_expand_haiku"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_expand_haiku"
      ]
    ],
    "applyexpansionrules": [
      [
        "./core/personality/creative_expressions.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_apply_expansion_rules"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_apply_expansion_rules"
      ]
    ],
    "addsensorydetail": [
      [
        "./core/personality/creative_expressions.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_add_sensory_detail"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_add_sensory_detail"
      ]
    ],
    "infuseemotion": [
      [
        "./core/personality/creative_expressions.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_infuse_emotion"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_infuse_emotion"
      ]
    ],
    "createjuxtaposition": [
      [
        "./core/personality/creative_expressions.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/creative_expression_core.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "_create_juxtaposition"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "_create_juxtaposition"
      ]
    ],
    "loadinspirationprofile": [
      [
        "./core/personality/creative_expressions.py",
        "load_inspiration_profile"
      ],
      [
        "./creativity/creative_expression_core.py",
        "load_inspiration_profile"
      ],
      [
        "./creativity/systems/creative_expressions_creativity_engine.py",
        "load_inspiration_profile"
      ]
    ],
    "tierlabel": [
      [
        "./core/utils/symbolic_utils.py",
        "tier_label"
      ],
      [
        "./core/interfaces/as_agent/utils/symbolic_utils.py",
        "tier_label"
      ],
      [
        "./symbolic/utils/symbolic_utils.py",
        "tier_label"
      ]
    ],
    "summarizeemotionvector": [
      [
        "./core/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ],
      [
        "./core/interfaces/as_agent/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ],
      [
        "./symbolic/utils/symbolic_utils.py",
        "summarize_emotion_vector"
      ]
    ],
    "setupeventmappings": [
      [
        "./core/bridges/identity_core_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/consciousness_quantum_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/bio_symbolic_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/memory_learning_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/quantum_memory_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/memory_consciousness_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./core/bridges/core_safety_bridge.py",
        "setup_event_mappings"
      ],
      [
        "./dream/core/nias_dream_bridge.py",
        "setup_event_mappings"
      ]
    ],
    "store": [
      [
        "./core/tagging/tagging_system.py",
        "store"
      ],
      [
        "./core/infrastructure/node_collection.py",
        "store"
      ],
      [
        "./memory/memory_optimization.py",
        "store"
      ],
      [
        "./memory/basic.py",
        "store"
      ],
      [
        "./memory/basic.py",
        "store"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "store"
      ],
      [
        "./memory/node.py",
        "store"
      ],
      [
        "./memory/memory_systems/memoria-checkpoint.py",
        "store"
      ],
      [
        "./memory/systems/memory_node.py",
        "store"
      ],
      [
        "./memory/systems/memory_checkpoint.py",
        "store"
      ],
      [
        "./memory/systems/memory_bases.py",
        "store"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "store"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "store"
      ]
    ],
    "len": [
      [
        "./core/tagging/tagging_system.py",
        "__len__"
      ],
      [
        "./memory/memory_optimization.py",
        "__len__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__len__"
      ]
    ],
    "logviolation": [
      [
        "./core/safety/constitutional_safety.py",
        "_log_violation"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "log_violation"
      ],
      [
        "./ethics/compliance/engine.py",
        "log_violation"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_log_violation"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "log_violation"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "log_violation"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "log_violation"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "log_violation"
      ]
    ],
    "getsafetystatus": [
      [
        "./core/safety/constitutional_safety.py",
        "get_safety_status"
      ],
      [
        "./core/safety/safety_hub.py",
        "get_safety_status"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "get_safety_status"
      ]
    ],
    "analyzepatterns": [
      [
        "./core/audit/audit_analytics.py",
        "analyze_patterns"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_analyze_patterns"
      ],
      [
        "./identity/core/trace/pattern_analyzer.py",
        "analyze_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_analyze_patterns"
      ]
    ],
    "analyzetemporalpatterns": [
      [
        "./core/audit/audit_analytics.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./consciousness/core/engine.py",
        "_analyze_temporal_patterns"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_analyze_temporal_patterns"
      ]
    ],
    "call": [
      [
        "./core/audit/audit_decision_embedding_engine.py",
        "__call__"
      ],
      [
        "./identity/qrg_integration.py",
        "__call__"
      ],
      [
        "./analysis_tools/audit_decision_embedding_engine.py",
        "__call__"
      ],
      [
        "./creativity/creative_engine.py",
        "__call__"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "call"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "__call__"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "__call__"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "__call__"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "__call__"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "__call__"
      ],
      [
        "./symbolic/bio/mito_quantum_attention_adapter.py",
        "__call__"
      ]
    ],
    "initdatabase": [
      [
        "./core/audit/audit_trail.py",
        "_init_database"
      ],
      [
        "./memory/memory_fold.py",
        "_init_database"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "_init_database"
      ]
    ],
    "createsnapshot": [
      [
        "./core/symbolism/archiver.py",
        "create_snapshot"
      ],
      [
        "./memory/distributed_state_manager.py",
        "_create_snapshot"
      ],
      [
        "./memory/systems/symbolic_snapshot.py",
        "create_snapshot"
      ]
    ],
    "getsystemmetrics": [
      [
        "./core/verifold/verifold_unified.py",
        "get_system_metrics"
      ],
      [
        "./orchestration/brain/controller.py",
        "get_system_metrics"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "get_system_metrics"
      ]
    ],
    "verifysignature": [
      [
        "./core/verifold/verifold_unified.py",
        "_verify_signature"
      ],
      [
        "./identity/auth_backend/pqc_crypto_engine.py",
        "verify_signature"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "_verify_signature"
      ]
    ],
    "calculateentropyscore": [
      [
        "./core/verifold/verifold_unified.py",
        "_calculate_entropy_score"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_entropy_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_entropy_score"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "calculate_entropy_score"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_calculate_entropy_score"
      ]
    ],
    "loadmanifest": [
      [
        "./core/meta_learning/remediator_agent.py",
        "_load_manifest"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "_load_manifest"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "_load_manifest"
      ]
    ],
    "calculatedriftscore": [
      [
        "./core/meta_learning/remediator_agent.py",
        "calculate_drift_score"
      ],
      [
        "./core/meta_learning/remediator_agent.py",
        "calculate_drift_score"
      ],
      [
        "./memory/systems/dream_memory_manager.py",
        "_calculate_drift_score"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "calculate_drift_score"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_calculate_drift_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_drift_score"
      ],
      [
        "./orchestration/brain/spine/healix_mapper.py",
        "calculate_drift_score"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_calculate_drift_score"
      ],
      [
        "./symbolic/features/drift/__init__.py",
        "calculate_drift_score"
      ]
    ],
    "generatecollapsehash": [
      [
        "./core/meta_learning/remediator_agent.py",
        "generate_collapse_hash"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "generate_collapse_hash"
      ],
      [
        "./ethics/ethical_drift_detector.py",
        "generate_collapse_hash"
      ],
      [
        "./orchestration/brain/rem/lidar_emotion_interpreter.py",
        "generate_collapse_hash"
      ]
    ],
    "consolidatememories": [
      [
        "./core/meta_learning/remediator_agent.py",
        "consolidate_memories"
      ],
      [
        "./memory/glyph_memory_integration.py",
        "_consolidate_memories"
      ],
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "consolidate_memories"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "consolidate_memories"
      ],
      [
        "./orchestration/brain/dream_engine/cli/dream_processor.py",
        "_consolidate_memories"
      ],
      [
        "./dream/cli/dream_processor.py",
        "_consolidate_memories"
      ]
    ],
    "integratewithenhancementsystem": [
      [
        "./core/meta_learning/federated_integration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "integrate_with_enhancement_system"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "integrate_with_enhancement_system"
      ]
    ],
    "simulatemetalearningsystemdiscovery": [
      [
        "./core/meta_learning/enhancement_system.py",
        "_simulate_meta_learning_system_discovery"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_simulate_meta_learning_system_discovery"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_simulate_meta_learning_system_discovery"
      ]
    ],
    "createmocksystem": [
      [
        "./core/meta_learning/enhancement_system.py",
        "_create_mock_system"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_create_mock_system"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_create_mock_system"
      ]
    ],
    "synchronizequantumsignatures": [
      [
        "./core/meta_learning/enhancement_system.py",
        "_synchronize_quantum_signatures"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_synchronize_quantum_signatures"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_synchronize_quantum_signatures"
      ]
    ],
    "analyzecommonethicalissues": [
      [
        "./core/meta_learning/enhancement_system.py",
        "_analyze_common_ethical_issues"
      ],
      [
        "./learning/metalearningenhancementsystem.py",
        "_analyze_common_ethical_issues"
      ],
      [
        "./learning/meta/MetaLearningEnhancement.py",
        "_analyze_common_ethical_issues"
      ]
    ],
    "sendmessage": [
      [
        "./core/user_interface_manager/text_handler.py",
        "send_message"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "send_message"
      ],
      [
        "./core/infrastructure/node_registry.py",
        "send_message"
      ],
      [
        "./orchestration/agents/multi_agent_collaboration.py",
        "send_message"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "send_message"
      ],
      [
        "./orchestration/core_modules/core_integrator.py",
        "send_message"
      ]
    ],
    "speak": [
      [
        "./core/user_interface_manager/voice_handler.py",
        "speak"
      ],
      [
        "./core/interfaces/voice/voice_agent.py",
        "speak"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "speak"
      ],
      [
        "./learning/systems/symbolic_voice_loop.py",
        "speak"
      ],
      [
        "./voice/symbolic_voice_core.py",
        "speak"
      ],
      [
        "./voice/voice_system_integrator.py",
        "speak"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "speak"
      ]
    ],
    "getcollapsehistory": [
      [
        "./core/monitoring/collapse_tracker.py",
        "get_collapse_history"
      ],
      [
        "./memory/systems/collapse_trace.py",
        "get_collapse_history"
      ],
      [
        "./symbolic/features/collapse/trace.py",
        "get_collapse_history"
      ]
    ],
    "calculateemotionaldrift": [
      [
        "./core/monitoring/drift_monitor.py",
        "_calculate_emotional_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_emotional_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_emotional_drift"
      ],
      [
        "./dream/core/snapshot_redirection_controller.py",
        "_calculate_emotional_drift"
      ]
    ],
    "isrecent": [
      [
        "./core/monitoring/drift_monitor.py",
        "_is_recent"
      ],
      [
        "./ethics/governor/lambda_governor.py",
        "_is_recent"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_is_recent"
      ]
    ],
    "retrieve": [
      [
        "./core/infrastructure/node_collection.py",
        "retrieve"
      ],
      [
        "./memory/fold_engine.py",
        "retrieve"
      ],
      [
        "./memory/memory_optimization.py",
        "retrieve"
      ],
      [
        "./memory/basic.py",
        "retrieve"
      ],
      [
        "./memory/basic.py",
        "retrieve"
      ],
      [
        "./memory/symbol_aware_tiered_memory.py",
        "retrieve"
      ],
      [
        "./memory/node.py",
        "retrieve"
      ],
      [
        "./memory/systems/memory_node.py",
        "retrieve"
      ],
      [
        "./memory/systems/memory_bases.py",
        "retrieve"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "retrieve"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "retrieve"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "retrieve"
      ]
    ],
    "evaluateaction": [
      [
        "./core/infrastructure/node_collection.py",
        "evaluate_action"
      ],
      [
        "./ethics/ethics_engine.py",
        "evaluate_action"
      ],
      [
        "./ethics/decision_node.py",
        "evaluate_action"
      ],
      [
        "./ethics/compliance/engine.py",
        "evaluate_action"
      ],
      [
        "./ethics/compliance/engine.py",
        "evaluate_action"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate_action"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "evaluate_action"
      ]
    ],
    "initializecouncil": [
      [
        "./core/infrastructure/node_collection.py",
        "_initialize_council"
      ],
      [
        "./ethics/governor/dao_controller.py",
        "_initialize_council"
      ],
      [
        "./orchestration/brain/governance/dao_governance_node.py",
        "_initialize_council"
      ]
    ],
    "evolve": [
      [
        "./core/infrastructure/base_node.py",
        "evolve"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "evolve"
      ],
      [
        "./voice/voice_profiling.py",
        "evolve"
      ]
    ],
    "reflect": [
      [
        "./core/infrastructure/base_node.py",
        "reflect"
      ],
      [
        "./learning/federated_meta_learning.py",
        "reflect"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "reflect"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "reflect"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "reflect"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "reflect"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "reflect"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "reflect"
      ],
      [
        "./dream/core/dream_reflection_loop_simple.py",
        "reflect"
      ]
    ],
    "activate": [
      [
        "./core/infrastructure/base_node.py",
        "activate"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "activate"
      ],
      [
        "./voice/bio_core/oscillator/quantum_layer.py",
        "activate"
      ]
    ],
    "narratedreams": [
      [
        "./core/modules/nias/__init__.py",
        "narrate_dreams"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/voice_narrator.py",
        "narrate_dreams"
      ],
      [
        "./creativity/personality/voice/voice_narrator.py",
        "narrate_dreams"
      ],
      [
        "./voice/voice_narrator.py",
        "narrate_dreams"
      ]
    ],
    "isallowed": [
      [
        "./core/modules/nias/__init__.py",
        "is_allowed"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/consent_filter.py",
        "is_allowed"
      ],
      [
        "./ethics/fallback/ethics_layer.py",
        "is_allowed"
      ]
    ],
    "registerprocessingservices": [
      [
        "./core/modules/nias/nias_hub.py",
        "_register_processing_services"
      ],
      [
        "./memory/memory_hub.py",
        "_register_processing_services"
      ],
      [
        "./symbolic/symbolic_hub.py",
        "_register_processing_services"
      ]
    ],
    "extractemotionalindicators": [
      [
        "./core/modules/nias/openai_adapter.py",
        "_extract_emotional_indicators"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_emotional_indicators"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_emotional_indicators"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_emotional_indicators"
      ]
    ],
    "recorddreammessage": [
      [
        "./core/modules/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./core/modules/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./core/interfaces/as_agent/sys/nias/dream_recorder.py",
        "record_dream_message"
      ],
      [
        "./dream/core/dream_injector.py",
        "record_dream_message"
      ]
    ],
    "getbiologicalstatus": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_wrapper.py",
        "get_biological_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_biological_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist_mock.py",
        "get_biological_status"
      ],
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "get_biological_status"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "get_biological_status"
      ]
    ],
    "calculaterelevance": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_relevance"
      ],
      [
        "./memory/systems/memory_processing.py",
        "calculate_relevance"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_relevance"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_relevance"
      ]
    ],
    "calculatequantumcoherence": [
      [
        "./core/neural_architectures/abas/abas_quantum_specialist.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./orchestration/specialized/lambda_dependa_bot.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "_calculate_quantum_coherence"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_calculate_quantum_coherence"
      ]
    ],
    "set": [
      [
        "./core/base/base_config.py",
        "set"
      ],
      [
        "./memory/distributed_state_manager.py",
        "set"
      ],
      [
        "./memory/distributed_state_manager.py",
        "set"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "set"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "set"
      ],
      [
        "./governance/common.py",
        "set"
      ]
    ],
    "hash": [
      [
        "./core/base/symbolic.py",
        "hash"
      ],
      [
        "./memory/memory_optimization.py",
        "_hash"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "__hash__"
      ],
      [
        "./memory/systems/memory_planning.py",
        "__hash__"
      ],
      [
        "./ethics/redteam_sim.py",
        "__hash__"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "__hash__"
      ]
    ],
    "listall": [
      [
        "./core/base/symbolic.py",
        "list_all"
      ],
      [
        "./memory/basic.py",
        "list_all"
      ],
      [
        "./memory/basic.py",
        "list_all"
      ]
    ],
    "initialize": [
      [
        "./core/base/base_module.py",
        "initialize"
      ],
      [
        "./consciousness/service.py",
        "initialize"
      ],
      [
        "./ethics/policy_engines/base.py",
        "initialize"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "initialize"
      ],
      [
        "./governance/common.py",
        "initialize"
      ]
    ],
    "calculatedistance": [
      [
        "./core/services/location/geofencing_manager.py",
        "_calculate_distance"
      ],
      [
        "./core/services/location/tracker.py",
        "_calculate_distance"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "calculate_distance"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "calculate_distance"
      ]
    ],
    "setuserpreference": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "set_user_preference"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "set_user_preference"
      ],
      [
        "./config/dashboard_settings.py",
        "set_user_preference"
      ]
    ],
    "getuserpreference": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "get_user_preference"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "get_user_preference"
      ],
      [
        "./config/dashboard_settings.py",
        "get_user_preference"
      ]
    ],
    "togglewidgetvisibility": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "toggle_widget_visibility"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "toggle_widget_visibility"
      ],
      [
        "./config/dashboard_settings.py",
        "toggle_widget_visibility"
      ]
    ],
    "listactivewidgets": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "list_active_widgets"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "list_active_widgets"
      ],
      [
        "./config/dashboard_settings.py",
        "list_active_widgets"
      ]
    ],
    "storepairedapp": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "store_paired_app"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "store_paired_app"
      ],
      [
        "./config/dashboard_settings.py",
        "store_paired_app"
      ]
    ],
    "getpairedapps": [
      [
        "./core/interfaces/ui/config/dashboard_settings.py",
        "get_paired_apps"
      ],
      [
        "./config/interface_dashboard_settings.py",
        "get_paired_apps"
      ],
      [
        "./config/dashboard_settings.py",
        "get_paired_apps"
      ]
    ],
    "safesubprocessrun": [
      [
        "./core/interfaces/ui/components/audio_exporter.py",
        "safe_subprocess_run"
      ],
      [
        "./ethics/security/secure_utils.py",
        "safe_subprocess_run"
      ],
      [
        "./orchestration/brain/safe_subprocess_executor.py",
        "safe_subprocess_run"
      ]
    ],
    "updateindices": [
      [
        "./core/interfaces/registries/intelligence_engine_registry.py",
        "_update_indices"
      ],
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_update_indices"
      ],
      [
        "./memory/core/interfaces/episodic_interface.py",
        "_update_indices"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_update_indices"
      ]
    ],
    "analyzememory": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_analyze_memory"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_analyze_memory"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_analyze_memory"
      ]
    ],
    "determineurgency": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_determine_urgency"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_determine_urgency"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_determine_urgency"
      ]
    ],
    "determineformality": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_determine_formality"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_determine_formality"
      ],
      [
        "./orchestration/brain/context_analyzer.py",
        "_determine_formality"
      ]
    ],
    "determineparameters": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "determine_parameters"
      ],
      [
        "./voice/modulator.py",
        "determine_parameters"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "determine_parameters"
      ],
      [
        "./orchestration/brain/demo.py",
        "determine_parameters"
      ]
    ],
    "selectvoice": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_select_voice"
      ],
      [
        "./voice/modulator.py",
        "_select_voice"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_select_voice"
      ]
    ],
    "storeinteraction": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "store_interaction"
      ],
      [
        "./memory/voice_memory_manager.py",
        "store_interaction"
      ],
      [
        "./memory/systems/memory_reflector.py",
        "store_interaction"
      ],
      [
        "./memory/systems/memory_processing.py",
        "store_interaction"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "store_interaction"
      ]
    ],
    "getrelevantmemories": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "get_relevant_memories"
      ],
      [
        "./memory/voice_memory_manager.py",
        "get_relevant_memories"
      ],
      [
        "./memory/systems/memory_processing.py",
        "get_relevant_memories"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "get_relevant_memories"
      ]
    ],
    "calculateimportance": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "_calculate_importance"
      ],
      [
        "./memory/voice_memory_manager.py",
        "_calculate_importance"
      ],
      [
        "./memory/node.py",
        "_calculate_importance"
      ],
      [
        "./memory/systems/memory_node.py",
        "_calculate_importance"
      ],
      [
        "./memory/systems/memory_processing.py",
        "_calculate_importance"
      ],
      [
        "./voice/context_aware_voice_modular.py",
        "_calculate_importance"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_calculate_importance"
      ]
    ],
    "anonymizemetadata": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance_engine.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/utils.py",
        "anonymize_metadata"
      ],
      [
        "./ethics/compliance/engine.py",
        "anonymize_metadata"
      ],
      [
        "./orchestration/brain/demo.py",
        "anonymize_metadata"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "anonymize_metadata"
      ]
    ],
    "shouldretaindata": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "should_retain_data"
      ],
      [
        "./ethics/compliance_engine.py",
        "should_retain_data"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "should_retain_data"
      ],
      [
        "./ethics/compliance/engine.py",
        "should_retain_data"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "should_retain_data"
      ]
    ],
    "validateresponse": [
      [
        "./core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "validate_response"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "validate_response"
      ],
      [
        "./orchestration/brain/demo.py",
        "validate_response"
      ]
    ],
    "hasfield": [
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "HasField"
      ]
    ],
    "serializetostring": [
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ],
      [
        "./core/interfaces/api/v1/grpc/pb2.py",
        "SerializeToString"
      ]
    ],
    "getsessionstatus": [
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_session_status"
      ],
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "get_session_status"
      ],
      [
        "./memory/systems/replay_system.py",
        "get_session_status"
      ]
    ],
    "determinetier": [
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_determine_tier"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_determine_tier"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "_determine_tier"
      ]
    ],
    "generaterequestid": [
      [
        "./core/interfaces/protocols/awareness_protocol.py",
        "_generate_request_id"
      ],
      [
        "./identity/core/integrations/inference_adapter.py",
        "_generate_request_id"
      ],
      [
        "./identity/api/onboarding_api.py",
        "_generate_request_id"
      ],
      [
        "./bridge/openai_core_service.py",
        "_generate_request_id"
      ],
      [
        "./orchestration/brain/adaptive_image_generator.py",
        "_generate_request_id"
      ]
    ],
    "new": [
      [
        "./core/interfaces/as_agent/sys/dast/store.py",
        "__new__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/partner_sdk.py",
        "__new__"
      ],
      [
        "./core/interfaces/as_agent/sys/dast/aggregator.py",
        "__new__"
      ]
    ],
    "registerfactory": [
      [
        "./core/hub_services/service_registry.py",
        "register_factory"
      ],
      [
        "./core/hub_services/service_registry.py",
        "register_factory"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "register_factory"
      ],
      [
        "./orchestration/service_registry.py",
        "register_factory"
      ],
      [
        "./orchestration/service_registry.py",
        "register_factory"
      ]
    ],
    "unregisterservice": [
      [
        "./core/hub_services/service_registry.py",
        "unregister_service"
      ],
      [
        "./orchestration/service_registry.py",
        "unregister_service"
      ],
      [
        "./orchestration/service_registry.py",
        "unregister_service"
      ]
    ],
    "createlearningservice": [
      [
        "./core/hub_services/service_registry.py",
        "create_learning_service"
      ],
      [
        "./learning/services.py",
        "create_learning_service"
      ],
      [
        "./orchestration/learning_initializer.py",
        "_create_learning_service"
      ]
    ],
    "getmemorystats": [
      [
        "./memory/service.py",
        "get_memory_stats"
      ],
      [
        "./memory/memory_optimization.py",
        "get_memory_stats"
      ],
      [
        "./memory/systems/memory_node.py",
        "get_memory_stats"
      ],
      [
        "./memory/systems/healix_memory_core.py",
        "get_memory_stats"
      ]
    ],
    "ensureservices": [
      [
        "./memory/services.py",
        "_ensure_services"
      ],
      [
        "./creativity/services.py",
        "_ensure_services"
      ],
      [
        "./learning/services.py",
        "_ensure_services"
      ],
      [
        "./consciousness/services.py",
        "_ensure_services"
      ]
    ],
    "getactivefolds": [
      [
        "./memory/quantum_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/unified_memory_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/unified_memory_manager.py",
        "get_active_folds"
      ],
      [
        "./memory/core/quantum_memory_manager.py",
        "get_active_folds"
      ]
    ],
    "trackdrift": [
      [
        "./memory/emotional.py",
        "track_drift"
      ],
      [
        "./memory/systems/memory_safety_features.py",
        "track_drift"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "track_drift"
      ]
    ],
    "addvector": [
      [
        "./memory/core.py",
        "add_vector"
      ],
      [
        "./memory/core.py",
        "add_vector"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "add_vector"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "add_vector"
      ]
    ],
    "getenhancedstatistics": [
      [
        "./memory/core.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/core.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/fold_system/optimized_hybrid_memory_fold.py",
        "get_enhanced_statistics"
      ],
      [
        "./memory/fold_system/hybrid_memory_fold.py",
        "get_enhanced_statistics"
      ]
    ],
    "calculatestabilitymetrics": [
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_stability_metrics"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_stability_metrics"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_calculate_stability_metrics"
      ]
    ],
    "getcausalinsights": [
      [
        "./memory/fold_lineage_tracker.py",
        "get_causal_insights"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "get_causal_insights"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "get_causal_insights"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "get_causal_insights"
      ]
    ],
    "calculatepredictionconfidence": [
      [
        "./memory/fold_lineage_tracker.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_prediction_confidence"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_calculate_prediction_confidence"
      ]
    ],
    "identifyriskfactors": [
      [
        "./memory/fold_lineage_tracker.py",
        "_identify_risk_factors"
      ],
      [
        "./memory/fold_system/fold_lineage_tracker.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_identify_risk_factors"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_identify_risk_factors"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "_identify_risk_factors"
      ]
    ],
    "logdream": [
      [
        "./memory/memory_fold.py",
        "log_dream"
      ],
      [
        "./memory/memory_fold.py",
        "log_dream"
      ],
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "_log_dream"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_dream"
      ],
      [
        "./orchestration/brain/rem/dream_log.py",
        "log_dream"
      ],
      [
        "./dream/dream_log.py",
        "log_dream"
      ],
      [
        "./dream/dream_pipeline.py",
        "_log_dream"
      ],
      [
        "./dream/core/dream_log.py",
        "log_dream"
      ],
      [
        "./dream/oneiric/oneiric_core/utils/symbolic_logger.py",
        "log_dream"
      ]
    ],
    "calculateemotiondistance": [
      [
        "./memory/memory_fold.py",
        "calculate_emotion_distance"
      ],
      [
        "./memory/memory_fold.py",
        "calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "_calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "_calculate_emotion_distance"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "_calculate_emotion_distance"
      ]
    ],
    "getdefaultconfig": [
      [
        "./memory/memory_fold.py",
        "get_default_config"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/grid_size_calculator.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/attention_monitor.py",
        "_get_default_config"
      ],
      [
        "./identity/auth_utils/cognitive_load_estimator.py",
        "_get_default_config"
      ],
      [
        "./identity/core/lambd_id_service.py",
        "_get_default_config"
      ],
      [
        "./identity/auth/adaptive_ui_controller.py",
        "_get_default_config"
      ]
    ],
    "dreamconsolidatememories": [
      [
        "./memory/memory_fold.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "dream_consolidate_memories"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "dream_consolidate_memories"
      ]
    ],
    "updateaccess": [
      [
        "./memory/memory_optimization.py",
        "update_access"
      ],
      [
        "./memory/core/interfaces/memory_interface.py",
        "update_access"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "update_access"
      ]
    ],
    "memoryusage": [
      [
        "./memory/memory_optimization.py",
        "memory_usage"
      ],
      [
        "./memory/memory_optimization.py",
        "memory_usage"
      ],
      [
        "./memory/systems/multimodal_memory_support.py",
        "memory_usage"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "memory_usage"
      ]
    ],
    "generatesystemrecommendations": [
      [
        "./memory/dashboard.py",
        "_generate_system_recommendations"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_system_recommendations"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "_generate_system_recommendations"
      ]
    ],
    "iscachevalid": [
      [
        "./memory/dashboard.py",
        "_is_cache_valid"
      ],
      [
        "./bridge/openai_core_service.py",
        "_is_cache_valid"
      ],
      [
        "./orchestration/golden_trio/trio_orchestrator.py",
        "_is_cache_valid"
      ],
      [
        "./quantum/neuro_symbolic_integration.py",
        "_is_cache_valid"
      ]
    ],
    "delete": [
      [
        "./memory/distributed_state_manager.py",
        "delete"
      ],
      [
        "./memory/basic.py",
        "delete"
      ],
      [
        "./memory/basic.py",
        "delete"
      ],
      [
        "./memory/systems/memory_profiler.py",
        "delete"
      ],
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "delete"
      ],
      [
        "./memory/systems/memory_session_storage.py",
        "delete"
      ],
      [
        "./memory/systems/memory_bases.py",
        "delete"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "delete"
      ],
      [
        "./orchestration/brain/net/client.py",
        "delete"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "delete"
      ]
    ],
    "matchescriteria": [
      [
        "./memory/unified_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/unified_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/emotional_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./memory/quantum_memory_manager.py",
        "_matches_criteria"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_matches_criteria"
      ]
    ],
    "createsymbolicstate": [
      [
        "./memory/unified_memory_manager.py",
        "_create_symbolic_state"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_create_symbolic_state"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_create_symbolic_state"
      ]
    ],
    "recorddriftevent": [
      [
        "./memory/unified_memory_manager.py",
        "_record_drift_event"
      ],
      [
        "./memory/drift_memory_manager.py",
        "_record_drift_event"
      ],
      [
        "./memory/governance/ethical_drift_governor.py",
        "_record_drift_event"
      ]
    ],
    "search": [
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./memory/basic.py",
        "search"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "search"
      ]
    ],
    "forget": [
      [
        "./memory/basic.py",
        "forget"
      ],
      [
        "./memory/systems/memory_node.py",
        "forget"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "forget"
      ]
    ],
    "quantummodulate": [
      [
        "./memory/visualizer.py",
        "quantum_modulate"
      ],
      [
        "./security/safety/coordinator.py",
        "quantum_modulate"
      ],
      [
        "./security/safety/emergency_override.py",
        "quantum_modulate"
      ],
      [
        "./consciousness/meta_cognitive/meta_cognitive.py",
        "quantum_modulate"
      ],
      [
        "./governance/integration/policy_board.py",
        "quantum_modulate"
      ],
      [
        "./quantum/bio.py",
        "quantum_modulate"
      ],
      [
        "./quantum/bio_components.py",
        "quantum_modulate"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "quantum_modulate"
      ],
      [
        "./quantum/quantum_processing/quantum_engine.py",
        "quantum_modulate"
      ]
    ],
    "generatemarkdownreport": [
      [
        "./memory/tools/lambda_vault_scan.py",
        "_generate_markdown_report"
      ],
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_markdown_report"
      ],
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_generate_markdown_report"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_markdown_report"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_markdown_report"
      ]
    ],
    "extractsymbolicpatterns": [
      [
        "./memory/tools/memory_drift_auditor.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/brain/MultiBrainSymphony.py",
        "_extract_symbolic_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_symbolic_patterns"
      ]
    ],
    "generatedriftrecommendations": [
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_drift_recommendations"
      ],
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_drift_recommendations"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_drift_recommendations"
      ]
    ],
    "generatejsonreport": [
      [
        "./memory/tools/memory_drift_auditor.py",
        "_generate_json_report"
      ],
      [
        "./symbolic/foundry/lambda_sage.py",
        "_generate_json_report"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_generate_json_report"
      ]
    ],
    "extractlambdatags": [
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_extract_lambda_tags"
      ],
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_extract_lambda_tags"
      ],
      [
        "./dream/tools/symbolic_anomaly_explorer.py",
        "extract_lambda_tags"
      ]
    ],
    "calculateemotionalweight": [
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_calculate_emotional_weight"
      ],
      [
        "./memory/compression/symbolic_delta.py",
        "_calculate_emotional_weight"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_emotional_weight"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_emotional_weight"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_emotional_weight"
      ]
    ],
    "isbinaryfile": [
      [
        "./memory/tools/lambda_archive_inspector.py",
        "_is_binary_file"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_is_binary_file"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_is_binary_file"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_is_binary_file"
      ]
    ],
    "findsimilarmemories": [
      [
        "./memory/core/unified_memory_orchestrator.py",
        "_find_similar_memories"
      ],
      [
        "./memory/hippocampal/hippocampal_buffer.py",
        "_find_similar_memories"
      ],
      [
        "./orchestration/brain/controller.py",
        "find_similar_memories"
      ]
    ],
    "getmemorystatistics": [
      [
        "./memory/core/unified_memory_orchestrator.py",
        "get_memory_statistics"
      ],
      [
        "./memory/systems/memory_advanced_manager.py",
        "get_memory_statistics"
      ],
      [
        "./memory/systems/multimodal_memory_integration.py",
        "get_memory_statistics"
      ]
    ],
    "testmemorylifecycle": [
      [
        "./memory/core/unified_memory_orchestrator.py",
        "test_memory_lifecycle"
      ],
      [
        "./memory/systems/memory_comprehensive_new.py",
        "test_memory_lifecycle"
      ],
      [
        "./memory/systems/memory_comprehensive.py",
        "test_memory_lifecycle"
      ]
    ],
    "testerrorconditions": [
      [
        "./memory/core/unified_memory_orchestrator.py",
        "test_error_conditions"
      ],
      [
        "./memory/systems/memory_comprehensive_new.py",
        "test_error_conditions"
      ],
      [
        "./memory/systems/memory_comprehensive.py",
        "test_error_conditions"
      ]
    ],
    "removefromindices": [
      [
        "./memory/core/interfaces/episodic_interface.py",
        "_remove_from_indices"
      ],
      [
        "./memory/core/interfaces/semantic_interface.py",
        "_remove_from_indices"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_remove_from_indices"
      ]
    ],
    "getcurrentstate": [
      [
        "./memory/hippocampal/theta_oscillator.py",
        "get_current_state"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "get_current_state"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "get_current_state"
      ]
    ],
    "extractpatterns": [
      [
        "./memory/episodic/episodic_replay_buffer.py",
        "_extract_patterns"
      ],
      [
        "./memory/systems/exponential_learning.py",
        "_extract_patterns"
      ],
      [
        "./identity/utils/symbolic_parser.py",
        "extract_patterns"
      ],
      [
        "./learning/exponential_learning.py",
        "_extract_patterns"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "extract_patterns"
      ],
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_extract_patterns"
      ],
      [
        "./orchestration/brain/neuro_symbolic/bridge.py",
        "_extract_patterns"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_extract_patterns"
      ]
    ],
    "calculateduration": [
      [
        "./memory/protection/symbolic_quarantine_sanctum.py",
        "_calculate_duration"
      ],
      [
        "./memory/consolidation/sleep_cycle_manager.py",
        "calculate_duration"
      ],
      [
        "./memory/consolidation/ripple_generator.py",
        "_calculate_duration"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "_calculate_duration"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/main_node.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_calculate_duration"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_calculate_duration"
      ]
    ],
    "verifylkfpack": [
      [
        "./memory/fold_system/foldin_simple.py",
        "verify_lkf_pack"
      ],
      [
        "./memory/fold_system/foldin.py",
        "verify_lkf_pack"
      ],
      [
        "./memory/fold_system/memory_fold_system.py",
        "verify_lkf_pack"
      ]
    ],
    "registermemory": [
      [
        "./memory/resonance/resonant_memory_access.py",
        "register_memory"
      ],
      [
        "./memory/systems/memory_identity.py",
        "register_memory"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "register_memory"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "register_memory"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "register_memory"
      ]
    ],
    "calculatesymbolicweight": [
      [
        "./memory/hooks/base.py",
        "calculate_symbolic_weight"
      ],
      [
        "./memory/systems/dream_integrator.py",
        "_calculate_symbolic_weight"
      ],
      [
        "./dream/tools/symbolic_theme_clusterer.py",
        "_calculate_symbolic_weight"
      ]
    ],
    "calculatecoherencescore": [
      [
        "./memory/systems/replay_system.py",
        "_calculate_coherence_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_coherence_score"
      ],
      [
        "./reasoning/reasoning_metrics.py",
        "_calculate_coherence_score"
      ],
      [
        "./symbolic/foundry/symbolic_foundry.py",
        "_calculate_coherence_score"
      ]
    ],
    "validate": [
      [
        "./memory/systems/memory_profiler.py",
        "validate"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "validate"
      ],
      [
        "./ethics/compliance_validator.py",
        "validate"
      ],
      [
        "./orchestration/config/production_config.py",
        "validate"
      ],
      [
        "./orchestration/brain/ethics/ethical_stop.py",
        "validate"
      ],
      [
        "./orchestration/brain/emotional/ethical_stop.py",
        "validate"
      ]
    ],
    "close": [
      [
        "./memory/systems/in_memory_cache_storage_wrapper.py",
        "close"
      ],
      [
        "./memory/systems/memory_research.py",
        "close"
      ],
      [
        "./memory/systems/memory_research.py",
        "close"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "close"
      ],
      [
        "./orchestration/brain/net/client.py",
        "close"
      ],
      [
        "./orchestration/brain/net/client.py",
        "close"
      ]
    ],
    "synthesize": [
      [
        "./memory/systems/memory_evolution.py",
        "synthesize"
      ],
      [
        "./voice/synthesis.py",
        "synthesize"
      ],
      [
        "./voice/synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "synthesize"
      ],
      [
        "./dream/core/dream_delivery_manager.py",
        "synthesize"
      ]
    ],
    "getmetadata": [
      [
        "./memory/systems/multimodal_memory_support.py",
        "get_metadata"
      ],
      [
        "./memory/systems/lazy_loading_embeddings.py",
        "get_metadata"
      ],
      [
        "./orchestration/agents/base.py",
        "get_metadata"
      ],
      [
        "./orchestration/interfaces/plugin_registry.py",
        "get_metadata"
      ]
    ],
    "encryptmemory": [
      [
        "./memory/systems/memory_lock.py",
        "encrypt_memory"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "encrypt_memory"
      ],
      [
        "./memory/systems/memory_encryptor.py",
        "encrypt_memory"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "encrypt_memory"
      ]
    ],
    "generatecontextvector": [
      [
        "./memory/systems/memory_lock.py",
        "_generate_context_vector"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_generate_context_vector"
      ],
      [
        "./identity/lukhas_identity/security/awareness_protocol.py",
        "_generate_context_vector"
      ]
    ],
    "logaccessattempt": [
      [
        "./memory/systems/memory_lock.py",
        "_log_access_attempt"
      ],
      [
        "./memory/systems/trauma_lock.py",
        "_log_access_attempt"
      ],
      [
        "./orchestration/brain/access/tier_manager.py",
        "log_access_attempt"
      ]
    ],
    "validatemodule": [
      [
        "./memory/systems/memory_helix.py",
        "__validate_module__"
      ],
      [
        "./creativity/quantum_creative_types.py",
        "__validate_module__"
      ],
      [
        "./creativity/advanced_haiku_generator.py",
        "__validate_module__"
      ],
      [
        "./quantum/validator.py",
        "__validate_module__"
      ],
      [
        "./quantum/system_orchestrator.py",
        "__validate_module__"
      ],
      [
        "./quantum/web_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/coordinator.py",
        "__validate_module__"
      ],
      [
        "./quantum/service.py",
        "__validate_module__"
      ],
      [
        "./quantum/system.py",
        "__validate_module__"
      ],
      [
        "./quantum/neural_symbolic_processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/metadata.py",
        "__validate_module__"
      ],
      [
        "./quantum/ui_generator.py",
        "__validate_module__"
      ],
      [
        "./quantum/awareness_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/voice_enhancer.py",
        "__validate_module__"
      ],
      [
        "./quantum/healix_mapper.py",
        "__validate_module__"
      ],
      [
        "./quantum/post_quantum_crypto.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_optimization_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio.py",
        "__validate_module__"
      ],
      [
        "./quantum/dream_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/oscillator.py",
        "__validate_module__"
      ],
      [
        "./quantum/consensus_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_components.py",
        "__validate_module__"
      ],
      [
        "./quantum/post_quantum_crypto_enhanced.py",
        "__validate_module__"
      ],
      [
        "./quantum/integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/distributed_quantum_architecture.py",
        "__validate_module__"
      ],
      [
        "./quantum/vault_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_crista_optimizer_adapter.py",
        "__validate_module__"
      ],
      [
        "./quantum/certificate_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/setup_api_keys.py",
        "__validate_module__"
      ],
      [
        "./quantum/abas_quantum_specialist.py",
        "__validate_module__"
      ],
      [
        "./quantum/creative_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/layer.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/\u039bBot_quantum_security.py",
        "__validate_module__"
      ],
      [
        "./quantum/safe_blockchain.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing_core.py",
        "__validate_module__"
      ],
      [
        "./quantum/main.py",
        "__validate_module__"
      ],
      [
        "./quantum/bio_multi_orchestrator.py",
        "__validate_module__"
      ],
      [
        "./quantum/api_manager.py",
        "__validate_module__"
      ],
      [
        "./quantum/entanglement.py",
        "__validate_module__"
      ],
      [
        "./quantum/phase_quantum_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/ethics_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/creative_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/neural_symbolic_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/privacy/zero_knowledge_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_security_integration.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_consensus_system_enhanced.py",
        "__validate_module__"
      ],
      [
        "./quantum/processing/quantum_bio_bulletproof_system.py",
        "__validate_module__"
      ],
      [
        "./quantum/cloud/__init__.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_engine.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "__validate_module__"
      ],
      [
        "./quantum/systems/bio_integration/awareness/quantum_bio.py",
        "__validate_module__"
      ]
    ],
    "loadmemory": [
      [
        "./memory/systems/memory_helix.py",
        "_load_memory"
      ],
      [
        "./memory/systems/simple_memory.py",
        "_load_memory"
      ],
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_load_memory"
      ]
    ],
    "encryptmemorycontent": [
      [
        "./memory/systems/memory_identity.py",
        "encrypt_memory_content"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "encrypt_memory_content"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "encrypt_memory_content"
      ]
    ],
    "decryptmemorycontent": [
      [
        "./memory/systems/memory_identity.py",
        "decrypt_memory_content"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "decrypt_memory_content"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "decrypt_memory_content"
      ]
    ],
    "notifymemoryremoval": [
      [
        "./memory/systems/memory_identity.py",
        "notify_memory_removal"
      ],
      [
        "./identity/core/brain_identity_connector.py",
        "notify_memory_removal"
      ],
      [
        "./orchestration/brain/consciousness/memory_identity.py",
        "notify_memory_removal"
      ]
    ],
    "export": [
      [
        "./memory/systems/in_memory_span_exporter.py",
        "export"
      ],
      [
        "./memory/systems/in_memory_span_exporter.py",
        "export"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "export"
      ],
      [
        "./memory/systems/in_memory_log_exporter.py",
        "export"
      ]
    ],
    "analyzeattentionpatterns": [
      [
        "./memory/systems/integration_example.py",
        "_analyze_attention_patterns"
      ],
      [
        "./identity/core/integrations/consciousness_bridge.py",
        "_analyze_attention_patterns"
      ],
      [
        "./consciousness/core/engine_poetic.py",
        "_analyze_attention_patterns"
      ]
    ],
    "generateencryptionkey": [
      [
        "./memory/systems/memory_node.py",
        "_generate_encryption_key"
      ],
      [
        "./identity/privacy_manager.py",
        "_generate_encryption_key"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "_generate_encryption_key"
      ]
    ],
    "getliveranges": [
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_live_ranges"
      ]
    ],
    "getsizehint": [
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_size_hint"
      ]
    ],
    "getsymbolicsize": [
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ],
      [
        "./memory/systems/memory_planning.py",
        "get_symbolic_size"
      ]
    ],
    "finalize": [
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ],
      [
        "./memory/systems/memory_planning.py",
        "finalize"
      ]
    ],
    "isempty": [
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ],
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ],
      [
        "./memory/systems/memory_planning.py",
        "is_empty"
      ]
    ],
    "create": [
      [
        "./memory/systems/memory_planning.py",
        "create"
      ],
      [
        "./memory/systems/memoria/gpt_reflection.py",
        "create"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "create"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "create"
      ],
      [
        "./orchestration/brain/net/async_client.py",
        "create"
      ]
    ],
    "getmemorytimeline": [
      [
        "./memory/systems/memory_processing.py",
        "get_memory_timeline"
      ],
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "get_memory_timeline"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "get_memory_timeline"
      ]
    ],
    "analyzememorypatterns": [
      [
        "./memory/systems/memory_profiler_wrapper.py",
        "analyze_memory_patterns"
      ],
      [
        "./memory/systems/memory_profiler_mock.py",
        "analyze_memory_patterns"
      ],
      [
        "./orchestration/brain/controller.py",
        "_analyze_memory_patterns"
      ]
    ],
    "generatelearningreport": [
      [
        "./memory/systems/learn_to_learn.py",
        "generate_learning_report"
      ],
      [
        "./learning/federated_meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "generate_learning_report"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "generate_learning_report"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "generate_learning_report"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "generate_learning_report"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "generate_learning_report"
      ]
    ],
    "initializestrategies": [
      [
        "./memory/systems/learn_to_learn.py",
        "_initialize_strategies"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_initialize_strategies"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_initialize_strategies"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_initialize_strategies"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_initialize_strategies"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_initialize_strategies"
      ]
    ],
    "extractlearningfeatures": [
      [
        "./memory/systems/learn_to_learn.py",
        "_extract_learning_features"
      ],
      [
        "./learning/federated_meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_extract_learning_features"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_extract_learning_features"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_extract_learning_features"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_extract_learning_features"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_extract_learning_features"
      ]
    ],
    "modulateemotion": [
      [
        "./memory/systems/emotional_memory_manager.py",
        "modulate_emotion"
      ],
      [
        "./orchestration/brain/orchestration/emotional_oscillator.py",
        "modulate_emotion"
      ],
      [
        "./orchestration/monitoring/emotional_oscillator.py",
        "modulate_emotion"
      ]
    ],
    "updateemotionalstate": [
      [
        "./memory/systems/emotional_memory_manager.py",
        "update_emotional_state"
      ],
      [
        "./voice/personality.py",
        "_update_emotional_state"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "update_emotional_state"
      ],
      [
        "./emotion/dreamseed_unified.py",
        "_update_emotional_state"
      ],
      [
        "./emotion/emotion_hub.py",
        "_update_emotional_state"
      ]
    ],
    "generatecompliancereport": [
      [
        "./memory/systems/healix_memory_core.py",
        "generate_compliance_report"
      ],
      [
        "./identity/core/sent/policy_engine.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/compliance_engine.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/utils.py",
        "generate_compliance_report"
      ],
      [
        "./ethics/compliance/engine.py",
        "generate_compliance_report"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "generate_compliance_report"
      ]
    ],
    "checkaccess": [
      [
        "./memory/systems/tier_system.py",
        "check_access"
      ],
      [
        "./bridge/shared_state.py",
        "_check_access"
      ],
      [
        "./ethics/lukhas_ethics_guard.py",
        "check_access"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_access"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "check_access"
      ],
      [
        "./symbolic/features/security/glyph_redactor_engine.py",
        "check_access"
      ]
    ],
    "calculatetrustscore": [
      [
        "./memory/systems/integration_adapters.py",
        "_calculate_trust_score"
      ],
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "calculate_trust_score"
      ],
      [
        "./identity/auth_backend/trust_scorer.py",
        "calculate_trust_score"
      ]
    ],
    "calculateemotionaldelta": [
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_emotional_delta"
      ],
      [
        "./memory/systems/memory_drift_tracker.py",
        "_calculate_emotional_delta"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "calculate_emotional_delta"
      ]
    ],
    "calculatestabilityscore": [
      [
        "./memory/systems/causal_identity_tracker.py",
        "_calculate_stability_score"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_stability_score"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_stability_score"
      ],
      [
        "./reasoning/coherence_patch_validator.py",
        "_calculate_stability_score"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_stability_score"
      ]
    ],
    "statistics": [
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ],
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ],
      [
        "./memory/systems/memory_research.py",
        "statistics"
      ]
    ],
    "verifyaccess": [
      [
        "./memory/systems/memory_learning/memory_manager.py",
        "_verify_access"
      ],
      [
        "./identity/interface.py",
        "verify_access"
      ],
      [
        "./identity/security/symbolic_vault.py",
        "verify_access"
      ],
      [
        "./api/core/dream_commerce.py",
        "verify_access"
      ]
    ],
    "loadtraits": [
      [
        "./memory/systems/memoria/dreams.py",
        "load_traits"
      ],
      [
        "./memory/systems/memoria/replayer.py",
        "load_traits"
      ],
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "load_traits"
      ],
      [
        "./orchestration/brain/spine/trait_manager.py",
        "load_traits"
      ]
    ],
    "consolidate": [
      [
        "./memory/consolidation/memory_consolidator.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidate"
      ]
    ],
    "validatesession": [
      [
        "./identity/interface.py",
        "validate_session"
      ],
      [
        "./identity/core/brain_identity_integration.py",
        "validate_session"
      ],
      [
        "./identity/enterprise/auth.py",
        "validate_session"
      ]
    ],
    "validatetier": [
      [
        "./identity/interface.py",
        "validate_tier"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_tier"
      ],
      [
        "./identity/core/tier/tier_validator.py",
        "validate_tier"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_validate_tier"
      ]
    ],
    "anonymizedata": [
      [
        "./identity/privacy_manager.py",
        "anonymize_data"
      ],
      [
        "./learning/meta_learning/federated_integration.py",
        "_anonymize_data"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_anonymize_data"
      ],
      [
        "./ethics/ethics_guard.py",
        "anonymize_data"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_anonymize_data"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "anonymize_data"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_anonymize_data"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_anonymize_data"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_anonymize_data"
      ]
    ],
    "checkpermissions": [
      [
        "./identity/privacy_manager.py",
        "check_permissions"
      ],
      [
        "./orchestration/brain/security_pr_analyzer.py",
        "_check_permissions"
      ],
      [
        "./orchestration/brain/privacy_manager.py",
        "check_permissions"
      ],
      [
        "./orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "_check_permissions"
      ]
    ],
    "setup": [
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./identity/qrg_100_percent_coverage.py",
        "setUp"
      ],
      [
        "./tests/governance/test_ai_compliance_framework.py",
        "setUp"
      ],
      [
        "./voice/safety/voice_safety_guard.py",
        "setUp"
      ],
      [
        "./quantum/integration.py",
        "setUp"
      ]
    ],
    "resolveconflict": [
      [
        "./identity/auth_backend/cross_device_handshake.py",
        "resolve_conflict"
      ],
      [
        "./bridge/shared_state.py",
        "_resolve_conflict"
      ],
      [
        "./reasoning/conflict_resolver.py",
        "resolve_conflict"
      ]
    ],
    "calculatesafetyscore": [
      [
        "./identity/auth_utils/cultural_safety_checker.py",
        "_calculate_safety_score"
      ],
      [
        "./security/safety/coordinator.py",
        "_calculate_safety_score"
      ],
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "_calculate_safety_score"
      ],
      [
        "./ethics/glyph_ethics_validator.py",
        "_calculate_safety_score"
      ]
    ],
    "gettierinformation": [
      [
        "./identity/core/lambd_id_service.py",
        "get_tier_information"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "get_tier_information"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "get_tier_information"
      ]
    ],
    "checkcollision": [
      [
        "./identity/core/lambd_id_service.py",
        "_check_collision"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_check_collision"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "_check_collision"
      ]
    ],
    "validateformat": [
      [
        "./identity/core/lambd_id_service.py",
        "_validate_format"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_validate_format"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "validate_format"
      ]
    ],
    "checkratelimit": [
      [
        "./identity/core/lambd_id_service.py",
        "_check_rate_limit"
      ],
      [
        "./ethics/meg_guard.py",
        "_check_rate_limit"
      ],
      [
        "./orchestration/security/dast/adapters.py",
        "_check_rate_limit"
      ]
    ],
    "parselambdaid": [
      [
        "./identity/core/id_service/entropy_engine.py",
        "_parse_lambda_id"
      ],
      [
        "./identity/core/id_service/lambd_id_validator.py",
        "_parse_lambda_id"
      ],
      [
        "./identity/core/id_service/lambd_id_entropy.py",
        "_parse_lambda_id"
      ]
    ],
    "generate": [
      [
        "./identity/core/id_service/mnemonic.py",
        "generate"
      ],
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "generate"
      ],
      [
        "./ethics/meg_openai_guard.py",
        "_generate"
      ],
      [
        "./orchestration/brain/llm_engine.py",
        "generate"
      ]
    ],
    "calculatesymboliccoherence": [
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./orchestration/brain/consciousness/dream_narrator.py",
        "_calculate_symbolic_coherence"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_symbolic_coherence"
      ]
    ],
    "generateconsciousnesssignature": [
      [
        "./identity/core/colonies/dream_verification_colony.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine_codex.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_generate_consciousness_signature"
      ],
      [
        "./consciousness/core/engine.py",
        "_generate_consciousness_signature"
      ]
    ],
    "detectanomalies": [
      [
        "./identity/core/trace/pattern_analyzer.py",
        "detect_anomalies"
      ],
      [
        "./identity/auth/cognitive_sync_adapter.py",
        "detect_anomalies"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_detect_anomalies"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_detect_anomalies"
      ]
    ],
    "calculatepatternmatch": [
      [
        "./identity/core/auth/dream_auth.py",
        "_calculate_pattern_match"
      ],
      [
        "./orchestration/brain/spine/fold_engine.py",
        "_calculate_pattern_match"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "_calculate_pattern_match"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_calculate_pattern_match"
      ]
    ],
    "generateglyph": [
      [
        "./identity/core/glyph/glyph_pipeline.py",
        "generate_glyph"
      ],
      [
        "./creativity/creative_market.py",
        "_generate_glyph"
      ],
      [
        "./symbolic/glyph_engine.py",
        "generate_glyph"
      ]
    ],
    "calculaterisklevel": [
      [
        "./identity/core/events/identity_event_publisher.py",
        "_calculate_risk_level"
      ],
      [
        "./reasoning/collapse_reasoner.py",
        "_calculate_risk_level"
      ],
      [
        "./symbolic/features/collapse/reasoner.py",
        "_calculate_risk_level"
      ]
    ],
    "saveconfig": [
      [
        "./identity/core/onboarding/onboarding_config.py",
        "save_config"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_save_config"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_save_config"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "_save_config"
      ]
    ],
    "generateid": [
      [
        "./identity/api/controllers/lambd_id_controller.py",
        "generate_id"
      ],
      [
        "./identity/api/routes/lambd_id_routes.py",
        "generate_id"
      ],
      [
        "./api/commercial/memory_services/memory_api.py",
        "_generate_id"
      ],
      [
        "./deployments/memory_services/memory_services/memory_api.py",
        "_generate_id"
      ]
    ],
    "getquantumlikestate": [
      [
        "./security/safety/emergency_override.py",
        "_get_quantum_like_state"
      ],
      [
        "./quantum/processing_core.py",
        "get_quantum_like_state"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "get_quantum_like_state"
      ]
    ],
    "checkforstagnation": [
      [
        "./creativity/affect_stagnation_detector.py",
        "check_for_stagnation"
      ],
      [
        "./emotion/affect_stagnation_detector.py",
        "check_for_stagnation"
      ],
      [
        "./emotion/affect_detection/affect_stagnation_detector.py",
        "check_for_stagnation"
      ]
    ],
    "generateemotionalcontent": [
      [
        "./creativity/service.py",
        "generate_emotional_content"
      ],
      [
        "./creativity/service.py",
        "generate_emotional_content"
      ],
      [
        "./creativity/service.py",
        "_generate_emotional_content"
      ]
    ],
    "loaddreams": [
      [
        "./creativity/personality/narrative_engine_dream_narrator_queue.py",
        "load_dreams"
      ],
      [
        "./orchestration/brain/rem/dream_stats.py",
        "load_dreams"
      ],
      [
        "./dream/dream_stats.py",
        "load_dreams"
      ],
      [
        "./dream/visualization/dream_viewer.py",
        "load_dreams"
      ],
      [
        "./dream/core/dream_viewer.py",
        "load_dreams"
      ]
    ],
    "loginteraction": [
      [
        "./creativity/personality/creative_core.py",
        "log_interaction"
      ],
      [
        "./learning/federated_meta_learning.py",
        "log_interaction"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "log_interaction"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "log_interaction"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "log_interaction"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "log_interaction"
      ]
    ],
    "initcomponents": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_init_components"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_init_components"
      ],
      [
        "./learning/integrated_system_orchestrator.py",
        "init_components"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_init_components"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "init_components"
      ],
      [
        "./orchestration/main_node.py",
        "init_components"
      ],
      [
        "./orchestration/brain/main_node.py",
        "init_components"
      ],
      [
        "./orchestration/brain/demo.py",
        "init_components"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_init_components"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "init_components"
      ]
    ],
    "getvoicemodulation": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "get_voice_modulation"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "get_voice_modulation"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "get_voice_modulation"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "get_voice_modulation"
      ]
    ],
    "adapttointeraction": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "adapt_to_interaction"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "adapt_to_interaction"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "adapt_to_interaction"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "adapt_to_interaction"
      ]
    ],
    "shouldenhancetext": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_should_enhance_text"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_should_enhance_text"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_should_enhance_text"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_should_enhance_text"
      ]
    ],
    "applypersonalitytraits": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_apply_personality_traits"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_apply_personality_traits"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_apply_personality_traits"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_apply_personality_traits"
      ]
    ],
    "addemphasis": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_add_emphasis"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_add_emphasis"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_add_emphasis"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_add_emphasis"
      ]
    ],
    "addpauses": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_add_pauses"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_add_pauses"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_add_pauses"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_add_pauses"
      ]
    ],
    "updatepersonalitytraits": [
      [
        "./creativity/personality/voice/voice_personality.py",
        "_update_personality_traits"
      ],
      [
        "./creativity/systems/voice_personality_creativity_engine.py",
        "_update_personality_traits"
      ],
      [
        "./consciousness/systems/cognitive_systems/voice_personality.py",
        "_update_personality_traits"
      ],
      [
        "./orchestration/brain/personality/voice_personality.py",
        "_update_personality_traits"
      ]
    ],
    "extractsymbols": [
      [
        "./creativity/narrative/symbolic_weaver.py",
        "extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ],
      [
        "./reasoning/reasoning_colony.py",
        "_extract_symbols"
      ]
    ],
    "generatealignmentrecommendations": [
      [
        "./creativity/narrative/symbolic_weaver.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_alignment_recommendations"
      ]
    ],
    "initemotionsymbols": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_emotion_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_emotion_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_emotion_symbols"
      ]
    ],
    "initprovidersymbols": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_provider_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_provider_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_provider_symbols"
      ]
    ],
    "initqualitysymbols": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "_init_quality_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "_init_quality_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "_init_quality_symbols"
      ]
    ],
    "getsymbolforprovider": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_symbol_for_provider"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_symbol_for_provider"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_symbol_for_provider"
      ]
    ],
    "getqualityindicators": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_quality_indicators"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_quality_indicators"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_quality_indicators"
      ]
    ],
    "getallsymbols": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_all_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_all_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_all_symbols"
      ]
    ],
    "getcontextsymbols": [
      [
        "./creativity/systems/vocabulary_creativity_engine.py",
        "get_context_symbols"
      ],
      [
        "./symbolic/vocabularies/voice_vocabulary.py",
        "get_context_symbols"
      ],
      [
        "./symbolic/vocabularies/vision_vocabulary.py",
        "get_context_symbols"
      ]
    ],
    "recordusage": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "record_usage"
      ],
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "record_usage"
      ],
      [
        "./voice/voice_profiling.py",
        "record_usage"
      ],
      [
        "./voice/voice_profiling.py",
        "record_usage"
      ]
    ],
    "saveprofile": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "_save_profile"
      ],
      [
        "./voice/voice_profiling.py",
        "_save_profile"
      ],
      [
        "./orchestration/brain/personality/personality_refiner.py",
        "_save_profile"
      ]
    ],
    "providefeedback": [
      [
        "./creativity/emotion/voice_profiling_emotion_engine.py",
        "provide_feedback"
      ],
      [
        "./voice/voice_profiling.py",
        "provide_feedback"
      ],
      [
        "./voice/voice_system_integrator.py",
        "provide_feedback"
      ]
    ],
    "updatewithgradients": [
      [
        "./learning/federated_meta_learning.py",
        "update_with_gradients"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "update_with_gradients"
      ],
      [
        "./learning/federated_learning_system.py",
        "update_with_gradients"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "update_with_gradients"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "update_with_gradients"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "update_with_gradients"
      ]
    ],
    "getparameters": [
      [
        "./learning/federated_meta_learning.py",
        "get_parameters"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_parameters"
      ],
      [
        "./learning/federated_learning_system.py",
        "get_parameters"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_parameters"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "get_parameters"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_parameters"
      ]
    ],
    "deserialize": [
      [
        "./learning/federated_meta_learning.py",
        "deserialize"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "deserialize"
      ],
      [
        "./learning/federated_learning_system.py",
        "deserialize"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "deserialize"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "deserialize"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "deserialize"
      ]
    ],
    "registermodel": [
      [
        "./learning/federated_meta_learning.py",
        "register_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "register_model"
      ],
      [
        "./learning/federated_learning_system.py",
        "register_model"
      ],
      [
        "./learning/federated_learning.py",
        "register_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "register_model"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "register_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "register_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "register_model"
      ]
    ],
    "aggregatemodel": [
      [
        "./learning/federated_meta_learning.py",
        "_aggregate_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_aggregate_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_aggregate_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_aggregate_model"
      ]
    ],
    "savemodel": [
      [
        "./learning/federated_meta_learning.py",
        "save_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "save_model"
      ],
      [
        "./learning/federated_learning_system.py",
        "save_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "save_model"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "save_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "save_model"
      ]
    ],
    "loadmodels": [
      [
        "./learning/federated_meta_learning.py",
        "load_models"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "load_models"
      ],
      [
        "./learning/federated_learning_system.py",
        "load_models"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "load_models"
      ],
      [
        "./learning/federated/FederatedLearningSystem.py",
        "load_models"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "load_models"
      ]
    ],
    "getclientstatus": [
      [
        "./learning/federated_meta_learning.py",
        "get_client_status"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_client_status"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_client_status"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_client_status"
      ]
    ],
    "analyzeinteractions": [
      [
        "./learning/federated_meta_learning.py",
        "_analyze_interactions"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_analyze_interactions"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_analyze_interactions"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_analyze_interactions"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_analyze_interactions"
      ]
    ],
    "detectuserpatterns": [
      [
        "./learning/federated_meta_learning.py",
        "_detect_user_patterns"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_detect_user_patterns"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_detect_user_patterns"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_detect_user_patterns"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_detect_user_patterns"
      ]
    ],
    "detecterrorpatterns": [
      [
        "./learning/federated_meta_learning.py",
        "_detect_error_patterns"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_detect_error_patterns"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_detect_error_patterns"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_detect_error_patterns"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_detect_error_patterns"
      ]
    ],
    "generateimprovementplans": [
      [
        "./learning/federated_meta_learning.py",
        "_generate_improvement_plans"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_generate_improvement_plans"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_generate_improvement_plans"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_generate_improvement_plans"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_generate_improvement_plans"
      ]
    ],
    "implementimprovements": [
      [
        "./learning/federated_meta_learning.py",
        "_implement_improvements"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_implement_improvements"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_implement_improvements"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_implement_improvements"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "_implement_improvements"
      ]
    ],
    "getstatusreport": [
      [
        "./learning/federated_meta_learning.py",
        "get_status_report"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_status_report"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_status_report"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_status_report"
      ],
      [
        "./orchestration/brain/meta_cognitive/reflective_introspection_system.py",
        "get_status_report"
      ]
    ],
    "registercoremodels": [
      [
        "./learning/federated_meta_learning.py",
        "_register_core_models"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_register_core_models"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_register_core_models"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_register_core_models"
      ]
    ],
    "getfederatedmodel": [
      [
        "./learning/federated_meta_learning.py",
        "get_federated_model"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "get_federated_model"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "get_federated_model"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "get_federated_model"
      ]
    ],
    "triggerreflection": [
      [
        "./learning/federated_meta_learning.py",
        "trigger_reflection"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "trigger_reflection"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "trigger_reflection"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "trigger_reflection"
      ]
    ],
    "applystrategy": [
      [
        "./learning/federated_meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_apply_strategy"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_apply_strategy"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_apply_strategy"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_apply_strategy"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_apply_strategy"
      ]
    ],
    "evaluateperformance": [
      [
        "./learning/federated_meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_evaluate_performance"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_evaluate_performance"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_evaluate_performance"
      ],
      [
        "./reasoning/adaptive_reasoning_loop.py",
        "_evaluate_performance"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_evaluate_performance"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate_performance"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_evaluate_performance"
      ],
      [
        "./quantum/bio_system.py",
        "evaluate_performance"
      ]
    ],
    "updatestrategyperformance": [
      [
        "./learning/federated_meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_strategy_performance"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_update_strategy_performance"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_strategy_performance"
      ]
    ],
    "updatemetaparameters": [
      [
        "./learning/federated_meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_update_meta_parameters"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_update_meta_parameters"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_update_meta_parameters"
      ]
    ],
    "adjuststrategyparameters": [
      [
        "./learning/federated_meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_adjust_strategy_parameters"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_adjust_strategy_parameters"
      ]
    ],
    "calculateadaptationprogress": [
      [
        "./learning/federated_meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_adaptation_progress"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_adaptation_progress"
      ]
    ],
    "calculatesparsity": [
      [
        "./learning/federated_meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_sparsity"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_sparsity"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_sparsity"
      ]
    ],
    "estimatecomplexity": [
      [
        "./learning/federated_meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_estimate_complexity"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_estimate_complexity"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_estimate_complexity"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_estimate_complexity"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_estimate_complexity"
      ]
    ],
    "calculatestrategymatch": [
      [
        "./learning/federated_meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_calculate_strategy_match"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_calculate_strategy_match"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_calculate_strategy_match"
      ]
    ],
    "generatemetainsights": [
      [
        "./learning/federated_meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/meta_learning_enhanced.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/adaptive_meta_learning_system.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./learning/meta_adaptive/meta_learning.py",
        "_generate_meta_insights"
      ],
      [
        "./orchestration/brain/learn_to_learn.py",
        "_generate_meta_insights"
      ],
      [
        "./orchestration/brain/meta/learning/system.py",
        "_generate_meta_insights"
      ]
    ],
    "synthesizeknowledge": [
      [
        "./learning/service.py",
        "synthesize_knowledge"
      ],
      [
        "./learning/service.py",
        "synthesize_knowledge"
      ],
      [
        "./orchestration/learning_initializer.py",
        "synthesize_knowledge"
      ]
    ],
    "getlearningmetrics": [
      [
        "./learning/service.py",
        "get_learning_metrics"
      ],
      [
        "./learning/learning_hub.py",
        "get_learning_metrics"
      ],
      [
        "./orchestration/learning_initializer.py",
        "get_learning_metrics"
      ]
    ],
    "setuplogging": [
      [
        "./learning/system.py",
        "_setup_logging"
      ],
      [
        "./learning/learning_system.py",
        "_setup_logging"
      ],
      [
        "./orchestration/base.py",
        "_setup_logging"
      ],
      [
        "./orchestration/specialized/content_enterprise_orchestrator.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/prediction/world_models.py",
        "_setup_logging"
      ],
      [
        "./orchestration/brain/compliance/constitutional_ai.py",
        "_setup_logging"
      ]
    ],
    "analyzeperformancetrends": [
      [
        "./learning/adaptive_meta_learning_system.py",
        "_analyze_performance_trends"
      ],
      [
        "./learning/adaptive_meta_learning.py",
        "_analyze_performance_trends"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_analyze_performance_trends"
      ]
    ],
    "loadmodel": [
      [
        "./learning/federated_learning.py",
        "_load_model"
      ],
      [
        "./learning/federated/FederatedLearning.py",
        "_load_model"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neural_processor.py",
        "_load_model"
      ]
    ],
    "transform": [
      [
        "./learning/_dict_learning.py",
        "_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "transform"
      ],
      [
        "./learning/_dict_learning.py",
        "transform"
      ]
    ],
    "inversetransform": [
      [
        "./learning/_dict_learning.py",
        "_inverse_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "inverse_transform"
      ],
      [
        "./learning/_dict_learning.py",
        "inverse_transform"
      ]
    ],
    "fit": [
      [
        "./learning/_dict_learning.py",
        "fit"
      ],
      [
        "./learning/_dict_learning.py",
        "fit"
      ],
      [
        "./learning/_dict_learning.py",
        "fit"
      ]
    ],
    "sklearntags": [
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ],
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ],
      [
        "./learning/_dict_learning.py",
        "__sklearn_tags__"
      ]
    ],
    "nfeaturesout": [
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ],
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ],
      [
        "./learning/_dict_learning.py",
        "_n_features_out"
      ]
    ],
    "registereventhandlers": [
      [
        "./learning/integrated_system_orchestrator.py",
        "register_event_handlers"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/main_node.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/brain/main_node.py",
        "register_event_handlers"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "register_event_handlers"
      ]
    ],
    "savesystemstate": [
      [
        "./learning/integrated_system_orchestrator.py",
        "_save_system_state"
      ],
      [
        "./ethics/security/main_node_security_engine.py",
        "_save_system_state"
      ],
      [
        "./orchestration/main_node.py",
        "_save_system_state"
      ],
      [
        "./orchestration/brain/main_node.py",
        "_save_system_state"
      ],
      [
        "./orchestration/brain/orchestration/main_node.py",
        "_save_system_state"
      ]
    ],
    "enhancemetalearningwithfederation": [
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_meta_learning_with_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_meta_learning_with_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_meta_learning_with_federation"
      ]
    ],
    "sharelearninginsight": [
      [
        "./learning/meta_learning/federated_integration.py",
        "share_learning_insight"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "share_learning_insight"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "share_learning_insight"
      ]
    ],
    "receivefederationupdates": [
      [
        "./learning/meta_learning/federated_integration.py",
        "receive_federation_updates"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "receive_federation_updates"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "receive_federation_updates"
      ]
    ],
    "coordinatelearningrates": [
      [
        "./learning/meta_learning/federated_integration.py",
        "coordinate_learning_rates"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "coordinate_learning_rates"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "coordinate_learning_rates"
      ]
    ],
    "enhancesymbolicreasoningfederation": [
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_symbolic_reasoning_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_symbolic_reasoning_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_symbolic_reasoning_federation"
      ]
    ],
    "synchronizefederation": [
      [
        "./learning/meta_learning/federated_integration.py",
        "synchronize_federation"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "synchronize_federation"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "synchronize_federation"
      ]
    ],
    "getfederationstatus": [
      [
        "./learning/meta_learning/federated_integration.py",
        "get_federation_status"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "get_federation_status"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "get_federation_status"
      ]
    ],
    "enhanceexistingmetalearningsystem": [
      [
        "./learning/meta_learning/federated_integration.py",
        "enhance_existing_meta_learning_system"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "enhance_existing_meta_learning_system"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "enhance_existing_meta_learning_system"
      ]
    ],
    "applyprivacyfilter": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_apply_privacy_filter"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_apply_privacy_filter"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_apply_privacy_filter"
      ]
    ],
    "ethicalauditinsight": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_ethical_audit_insight"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_ethical_audit_insight"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_ethical_audit_insight"
      ]
    ],
    "generateupdatesignature": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_update_signature"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_update_signature"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_update_signature"
      ]
    ],
    "processfederationupdate": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_process_federation_update"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_process_federation_update"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_process_federation_update"
      ]
    ],
    "updatenodetrust": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_update_node_trust"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_update_node_trust"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_update_node_trust"
      ]
    ],
    "gatherfederationconvergencesignals": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_gather_federation_convergence_signals"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_gather_federation_convergence_signals"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_gather_federation_convergence_signals"
      ]
    ],
    "calculatecoordinatedrate": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_calculate_coordinated_rate"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_calculate_coordinated_rate"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_calculate_coordinated_rate"
      ]
    ],
    "gathersymbolicpatterns": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_gather_symbolic_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_gather_symbolic_patterns"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_gather_symbolic_patterns"
      ]
    ],
    "analyzecrossnodepatterns": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_analyze_cross_node_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_analyze_cross_node_patterns"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_analyze_cross_node_patterns"
      ]
    ],
    "extractfederationwisdom": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_federation_wisdom"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_federation_wisdom"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_federation_wisdom"
      ]
    ],
    "generatecollaborativereasoninginsights": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_collaborative_reasoning_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_collaborative_reasoning_insights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_collaborative_reasoning_insights"
      ]
    ],
    "shouldsyncwithnode": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_should_sync_with_node"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_should_sync_with_node"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_should_sync_with_node"
      ]
    ],
    "synchronizewithnode": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_synchronize_with_node"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_synchronize_with_node"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_synchronize_with_node"
      ]
    ],
    "discoverfederationpatterns": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_discover_federation_patterns"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_discover_federation_patterns"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_discover_federation_patterns"
      ]
    ],
    "federationethicalaudit": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_federation_ethical_audit"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_federation_ethical_audit"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_federation_ethical_audit"
      ]
    ],
    "generatecoordinationsignature": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_generate_coordination_signature"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_generate_coordination_signature"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_generate_coordination_signature"
      ]
    ],
    "extractlearninginsights": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_learning_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_learning_insights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_learning_insights"
      ]
    ],
    "extractsymbolicinsights": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_extract_symbolic_insights"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_extract_symbolic_insights"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_extract_symbolic_insights"
      ]
    ],
    "applyupdatetometalearningsystem": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_apply_update_to_meta_learning_system"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_apply_update_to_meta_learning_system"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_apply_update_to_meta_learning_system"
      ]
    ],
    "calculateethicalvariance": [
      [
        "./learning/meta_learning/federated_integration.py",
        "_calculate_ethical_variance"
      ],
      [
        "./learning/federated/FederatedIntegration.py",
        "_calculate_ethical_variance"
      ],
      [
        "./orchestration/brain/federated_integration.py",
        "_calculate_ethical_variance"
      ]
    ],
    "generateoptimizationsuggestions": [
      [
        "./learning/meta_learning/symbolic_feedback.py",
        "_generate_optimization_suggestions"
      ],
      [
        "./orchestration/security/dast/intelligence.py",
        "_generate_optimization_suggestions"
      ],
      [
        "./orchestration/security/dast/api.py",
        "_generate_optimization_suggestions"
      ]
    ],
    "wrappersync": [
      [
        "./consciousness/service.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/cognitive_architecture_controller.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/cognitive/reflective_introspection.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/core/engine_complete.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/core/engine.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/awareness_protocol.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/awareness_engine.py",
        "wrapper_sync"
      ],
      [
        "./consciousness/awareness/awareness_processor.py",
        "wrapper_sync"
      ]
    ],
    "monitorloop": [
      [
        "./consciousness/cognitive_architecture_controller.py",
        "_monitor_loop"
      ],
      [
        "./consciousness/cognitive/adapter.py",
        "_monitor_loop"
      ],
      [
        "./orchestration/brain/monitoring/performance.py",
        "_monitor_loop"
      ]
    ],
    "consolidationloop": [
      [
        "./consciousness/cognitive_architecture_controller.py",
        "consolidation_loop"
      ],
      [
        "./orchestration/brain/brain_integration.py",
        "consolidation_loop"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "consolidation_loop"
      ]
    ],
    "initsymbolicmap": [
      [
        "./consciousness/core/engine_codex.py",
        "_init_symbolic_map"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_init_symbolic_map"
      ],
      [
        "./consciousness/core/engine.py",
        "_init_symbolic_map"
      ]
    ],
    "analyzesymbolicusage": [
      [
        "./consciousness/core/engine_codex.py",
        "_analyze_symbolic_usage"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_analyze_symbolic_usage"
      ],
      [
        "./consciousness/core/engine.py",
        "_analyze_symbolic_usage"
      ]
    ],
    "detectintentionalpatterns": [
      [
        "./consciousness/core/engine_codex.py",
        "_detect_intentional_patterns"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_detect_intentional_patterns"
      ],
      [
        "./consciousness/core/engine.py",
        "_detect_intentional_patterns"
      ]
    ],
    "assessemotionalcontext": [
      [
        "./consciousness/core/engine_codex.py",
        "_assess_emotional_context"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_assess_emotional_context"
      ],
      [
        "./consciousness/core/engine.py",
        "_assess_emotional_context"
      ]
    ],
    "evaluatetransparency": [
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_transparency"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_transparency"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_transparency"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_transparency"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_transparency"
      ]
    ],
    "evaluateuseragency": [
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_user_agency"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_user_agency"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_user_agency"
      ]
    ],
    "evaluateprivacy": [
      [
        "./consciousness/core/engine_codex.py",
        "_evaluate_privacy"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_evaluate_privacy"
      ],
      [
        "./consciousness/core/engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/compliance_engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_privacy"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_privacy"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_privacy"
      ]
    ],
    "getimprovementsuggestion": [
      [
        "./consciousness/core/engine_codex.py",
        "_get_improvement_suggestion"
      ],
      [
        "./consciousness/core/engine_alt.py",
        "_get_improvement_suggestion"
      ],
      [
        "./consciousness/core/engine.py",
        "_get_improvement_suggestion"
      ]
    ],
    "attend": [
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "attend"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "attend"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "attend"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "attend"
      ]
    ],
    "encode": [
      [
        "./consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "encode"
      ],
      [
        "./emotion/symbolic_user_intent.py",
        "encode"
      ],
      [
        "./quantum/bio_components.py",
        "encode"
      ]
    ],
    "recordmetrics": [
      [
        "./consciousness/awareness/system_awareness.py",
        "_record_metrics"
      ],
      [
        "./orchestration/config/migration_router.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/cognitive/awareness/awareness.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_record_metrics"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/oscillator_adapter.py",
        "_record_metrics"
      ]
    ],
    "createconsciousnesscomponent": [
      [
        "./consciousness/awareness/awareness_tracker.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/awareness/awareness_tracker.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/systems/validator.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/systems/consciousness.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/systems/state.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "create_consciousness_component"
      ],
      [
        "./consciousness/reflection/self_reflection_engine.py",
        "create_consciousness_component"
      ]
    ],
    "identifyreflectionprompts": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "identify_reflection_prompts"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "identify_reflection_prompts"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "identify_reflection_prompts"
      ]
    ],
    "createexperiencefromdata": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_experience_from_data"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_experience_from_data"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_experience_from_data"
      ]
    ],
    "classifyemotionaltone": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_classify_emotional_tone"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_classify_emotional_tone"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_classify_emotional_tone"
      ]
    ],
    "calculatedriftmagnitude": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./ethics/quantum_mesh_integrator.py",
        "_calculate_drift_magnitude"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_drift_magnitude"
      ]
    ],
    "calculatedriftvelocity": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_drift_velocity"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_drift_velocity"
      ],
      [
        "./reasoning/oracle_predictor.py",
        "_calculate_drift_velocity"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_drift_velocity"
      ]
    ],
    "identifydriftcauses": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_drift_causes"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_drift_causes"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_drift_causes"
      ]
    ],
    "synthesizeinsights": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_synthesize_insights"
      ],
      [
        "./dream/colony_dream_coordinator.py",
        "_synthesize_insights"
      ]
    ],
    "extractsymbolicthemes": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_symbolic_themes"
      ],
      [
        "./dream/core/dream_glyph_bridge.py",
        "_extract_symbolic_themes"
      ]
    ],
    "generatereflectiontitle": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_reflection_title"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_reflection_title"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_reflection_title"
      ]
    ],
    "generatenarrativereflection": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_narrative_reflection"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_narrative_reflection"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_narrative_reflection"
      ]
    ],
    "generateanalyticalreflection": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_analytical_reflection"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_analytical_reflection"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_analytical_reflection"
      ]
    ],
    "scoreemotionalcoherence": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_emotional_coherence"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_emotional_coherence"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_emotional_coherence"
      ]
    ],
    "scoresymbolicalignment": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_symbolic_alignment"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_symbolic_alignment"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_symbolic_alignment"
      ]
    ],
    "scoreidentitycontinuity": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_identity_continuity"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_identity_continuity"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_identity_continuity"
      ]
    ],
    "scorevalueresonance": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_value_resonance"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_value_resonance"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_value_resonance"
      ]
    ],
    "scoregrowthtrajectory": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_growth_trajectory"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_growth_trajectory"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_growth_trajectory"
      ]
    ],
    "scorerelationalawareness": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_score_relational_awareness"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_score_relational_awareness"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_score_relational_awareness"
      ]
    ],
    "createneutraldrift": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_neutral_drift"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_neutral_drift"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_neutral_drift"
      ]
    ],
    "createneutralalignment": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_create_neutral_alignment"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_create_neutral_alignment"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_create_neutral_alignment"
      ]
    ],
    "identifyalignmentfactors": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_alignment_factors"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_alignment_factors"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_alignment_factors"
      ]
    ],
    "identifymisalignmentconcerns": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_identify_misalignment_concerns"
      ]
    ],
    "generatelambdatags": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_lambda_tags"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_lambda_tags"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_lambda_tags"
      ]
    ],
    "calculatereflectionconfidence": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_reflection_confidence"
      ]
    ],
    "calculatetimewindow": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_calculate_time_window"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_calculate_time_window"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_calculate_time_window"
      ]
    ],
    "generatemarkdownreflection": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_markdown_reflection"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_markdown_reflection"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_markdown_reflection"
      ]
    ],
    "extractsymbolictags": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_symbolic_tags"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_extract_symbolic_tags"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_extract_symbolic_tags"
      ]
    ],
    "generateexperienceprompts": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_generate_experience_prompts"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_generate_experience_prompts"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_generate_experience_prompts"
      ]
    ],
    "parsetimestamp": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_parse_timestamp"
      ],
      [
        "./consciousness/reflection/lambda_mirror.py",
        "_parse_timestamp"
      ],
      [
        "./symbolic/foundry/lambda_mirror.py",
        "_parse_timestamp"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_parse_timestamp"
      ]
    ],
    "extractdreamsymbols": [
      [
        "./consciousness/systems/lambda_mirror.py",
        "_extract_dream_symbols"
      ],
      [
        "./reasoning/openai_oracle_adapter.py",
        "_extract_dream_symbols"
      ],
      [
        "./dream/core/dream_memory_manager.py",
        "_extract_dream_symbols"
      ]
    ],
    "isstable": [
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "is_stable"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "is_stable"
      ],
      [
        "./dream/core/dream_reflection_loop_simple.py",
        "is_stable"
      ]
    ],
    "recognizepatterns": [
      [
        "./consciousness/systems/dream_engine/dream_reflection_loop.py",
        "recognize_patterns"
      ],
      [
        "./orchestration/brain/unified_integration/adapters/cognitive_adapter.py",
        "_recognize_patterns"
      ],
      [
        "./orchestration/brain/symbolic_engine/pattern_recognition.py",
        "recognize_patterns"
      ]
    ],
    "determineseverity": [
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_determine_severity"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "_determine_severity"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_determine_severity"
      ],
      [
        "./emotion/tools/emotional_echo_detector.py",
        "_determine_severity"
      ]
    ],
    "generatejustification": [
      [
        "./tests/guardian_reflector/src/guardian_reflector.py",
        "_generate_justification"
      ],
      [
        "./ethics/stabilization/tuner.py",
        "_generate_justification"
      ],
      [
        "./orchestration/brain/monitoring/guardian_reflector.py",
        "_generate_justification"
      ]
    ],
    "gettransparencyreport": [
      [
        "./compliance/ai_compliance.py",
        "get_transparency_report"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "get_transparency_report"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "get_transparency_report"
      ]
    ],
    "getprocessingpurposes": [
      [
        "./compliance/ai_compliance.py",
        "_get_processing_purposes"
      ],
      [
        "./orchestration/brain/ai_compliance.py",
        "_get_processing_purposes"
      ],
      [
        "./orchestration/brain/compliance/ai_compliance_manager.py",
        "_get_processing_purposes"
      ]
    ],
    "determinecompliancestatus": [
      [
        "./compliance/ai_regulatory_framework/nist/ai_risk_management.py",
        "_determine_compliance_status"
      ],
      [
        "./compliance/ai_regulatory_framework/gdpr/data_protection_validator.py",
        "_determine_compliance_status"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_determine_compliance_status"
      ]
    ],
    "calculateentropydrift": [
      [
        "./reasoning/symbolic_logic_engine.py",
        "calculate_entropy_drift"
      ],
      [
        "./symbolic/features/drift/symbolic_drift_tracker.py",
        "_calculate_entropy_drift"
      ],
      [
        "./symbolic/drift/symbolic_drift_tracker.py",
        "_calculate_entropy_drift"
      ]
    ],
    "reason": [
      [
        "./reasoning/symbolic_reasoning.py",
        "reason"
      ],
      [
        "./reasoning/causal_reasoning.py",
        "reason"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "reason"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "reason"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "reason"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "reason"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "reason"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "reason"
      ],
      [
        "./orchestration/brain/symbolic_engine/symbolic_core.py",
        "reason"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "reason"
      ],
      [
        "./symbolic/features/causal_reasoner_template.py",
        "reason"
      ]
    ],
    "extractsemanticcontent": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_semantic_content"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_semantic_content"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_semantic_content"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_semantic_content"
      ]
    ],
    "extractlogicalelements": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_extract_logical_elements"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_extract_logical_elements"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_logical_elements"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_extract_logical_elements"
      ]
    ],
    "buildsymboliclogicalchains": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_build_symbolic_logical_chains"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_build_symbolic_logical_chains"
      ]
    ],
    "elementsrelated": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_elements_related"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_elements_related"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_elements_related"
      ]
    ],
    "calculatesymbolicconfidences": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_symbolic_confidences"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_calculate_symbolic_confidences"
      ]
    ],
    "createsymbolicsummary": [
      [
        "./reasoning/symbolic_reasoning.py",
        "_create_symbolic_summary"
      ],
      [
        "./reasoning/symbolic/SymbolicReasoning.py",
        "_create_symbolic_summary"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_create_symbolic_summary"
      ],
      [
        "./orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "_create_symbolic_summary"
      ]
    ],
    "generateuniversalizationreasoning": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_universalization_reasoning"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_universalization_reasoning"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_universalization_reasoning"
      ]
    ],
    "generatehumanityreasoning": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_humanity_reasoning"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_humanity_reasoning"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_humanity_reasoning"
      ]
    ],
    "generatekingdomreasoning": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_kingdom_reasoning"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_kingdom_reasoning"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_kingdom_reasoning"
      ]
    ],
    "identifyrelevantduties": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_relevant_duties"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_relevant_duties"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_relevant_duties"
      ]
    ],
    "finddutyconflicts": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_find_duty_conflicts"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_find_duty_conflicts"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_find_duty_conflicts"
      ]
    ],
    "resolvedutyconflicts": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_resolve_duty_conflicts"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_resolve_duty_conflicts"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_resolve_duty_conflicts"
      ]
    ],
    "calculatedeontologicalconfidence": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_deontological_confidence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_deontological_confidence"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_deontological_confidence"
      ]
    ],
    "checkpreferencesatisfaction": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_check_preference_satisfaction"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_check_preference_satisfaction"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_check_preference_satisfaction"
      ]
    ],
    "affectscapability": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_affects_capability"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_affects_capability"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_affects_capability"
      ]
    ],
    "priorityweightedaggregation": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_priority_weighted_aggregation"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_priority_weighted_aggregation"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_priority_weighted_aggregation"
      ]
    ],
    "calculateconsequentialistconfidence": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_consequentialist_confidence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_consequentialist_confidence"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_consequentialist_confidence"
      ]
    ],
    "generateutilitarianjustification": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_utilitarian_justification"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_utilitarian_justification"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_utilitarian_justification"
      ]
    ],
    "identifyrelevantvalues": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_relevant_values"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_relevant_values"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_relevant_values"
      ]
    ],
    "extractvaluesfromtext": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_extract_values_from_text"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_extract_values_from_text"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_extract_values_from_text"
      ]
    ],
    "calculatevaluedriftrate": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_value_drift_rate"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_value_drift_rate"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_value_drift_rate"
      ]
    ],
    "identifymisalignmentrisks": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_misalignment_risks"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_misalignment_risks"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_misalignment_risks"
      ]
    ],
    "suggestalignmentinterventions": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_suggest_alignment_interventions"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_suggest_alignment_interventions"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_suggest_alignment_interventions"
      ]
    ],
    "initializedefaultconstraints": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_initialize_default_constraints"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_initialize_default_constraints"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_initialize_default_constraints"
      ]
    ],
    "initializedriftdetector": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_initialize_drift_detector"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_initialize_drift_detector"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_initialize_drift_detector"
      ]
    ],
    "createconstraintviolationjudgment": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_create_constraint_violation_judgment"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_create_constraint_violation_judgment"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_create_constraint_violation_judgment"
      ]
    ],
    "estimateimpactmagnitude": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_estimate_impact_magnitude"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_estimate_impact_magnitude"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_estimate_impact_magnitude"
      ]
    ],
    "estimateimpactvalence": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_estimate_impact_valence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_estimate_impact_valence"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_estimate_impact_valence"
      ]
    ],
    "identifyspecificimpacts": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_specific_impacts"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_specific_impacts"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_specific_impacts"
      ]
    ],
    "identifymitigationneeds": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_mitigation_needs"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_mitigation_needs"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_mitigation_needs"
      ]
    ],
    "identifyuncertaintyfactors": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_uncertainty_factors"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_uncertainty_factors"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_uncertainty_factors"
      ]
    ],
    "calculateoverallconfidence": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_overall_confidence"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_overall_confidence"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_overall_confidence"
      ]
    ],
    "extractprincipleweights": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_extract_principle_weights"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_extract_principle_weights"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_extract_principle_weights"
      ]
    ],
    "calculateframeworkconsensus": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_calculate_framework_consensus"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_calculate_framework_consensus"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_calculate_framework_consensus"
      ]
    ],
    "identifypotentialharms": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_identify_potential_harms"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_identify_potential_harms"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_identify_potential_harms"
      ]
    ],
    "generatemitigationstrategies": [
      [
        "./reasoning/ethical_reasoning_system.py",
        "_generate_mitigation_strategies"
      ],
      [
        "./reasoning/ethical/EthicalReasoningSystem.py",
        "_generate_mitigation_strategies"
      ],
      [
        "./ethics/ethical_reasoning_system.py",
        "_generate_mitigation_strategies"
      ]
    ],
    "identifycausalelements": [
      [
        "./reasoning/causal_reasoning.py",
        "_identify_causal_elements"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_identify_causal_elements"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_identify_causal_elements"
      ]
    ],
    "buildcausalchains": [
      [
        "./reasoning/causal_reasoning.py",
        "_build_causal_chains"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_build_causal_chains"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_build_causal_chains"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_build_causal_chains"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_build_causal_chains"
      ]
    ],
    "calculatecausalconfidences": [
      [
        "./reasoning/causal_reasoning.py",
        "_calculate_causal_confidences"
      ],
      [
        "./reasoning/causal/CausalReasoning.py",
        "_calculate_causal_confidences"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_calculate_causal_confidences"
      ]
    ],
    "getbrainstatus": [
      [
        "./reasoning/abstract_reasoning_demo.original.py",
        "get_brain_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "get_brain_status"
      ],
      [
        "./orchestration/brain/abstract_reasoning/core.py",
        "get_brain_status"
      ]
    ],
    "summarizechain": [
      [
        "./reasoning/causal/CausalReasoning.py",
        "_summarize_chain"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_summarize_chain"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_summarize_chain"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_summarize_chain"
      ]
    ],
    "updatecausalgraph": [
      [
        "./reasoning/causal/CausalReasoning.py",
        "_update_causal_graph"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_causal_graph"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_causal_graph"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_causal_graph"
      ]
    ],
    "identifyprimarycause": [
      [
        "./reasoning/causal/CausalReasoning.py",
        "_identify_primary_cause"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_identify_primary_cause"
      ]
    ],
    "extractreasoningpath": [
      [
        "./reasoning/causal/CausalReasoning.py",
        "_extract_reasoning_path"
      ],
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_reasoning_path"
      ]
    ],
    "extractcausalelements": [
      [
        "./reasoning/causal/CausalReasoningModule.py",
        "_extract_causal_elements"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_extract_causal_elements"
      ]
    ],
    "calculateriskscore": [
      [
        "./reasoning/decision/bridge.py",
        "_calculate_risk_score"
      ],
      [
        "./ethics/sentinel/ethical_drift_sentinel.py",
        "calculate_risk_score"
      ],
      [
        "./orchestration/brain/symbol_validator.py",
        "_calculate_risk_score"
      ]
    ],
    "checkvoicedatacompliance": [
      [
        "./ethics/compliance_engine.py",
        "check_voice_data_compliance"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "check_voice_data_compliance"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_voice_data_compliance"
      ],
      [
        "./orchestration/brain/demo.py",
        "check_voice_data_compliance"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "check_voice_data_compliance"
      ]
    ],
    "validatecontentagainstethicalconstraints": [
      [
        "./ethics/compliance_engine.py",
        "validate_content_against_ethical_constraints"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "validate_content_against_ethical_constraints"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "validate_content_against_ethical_constraints"
      ]
    ],
    "generateanonymousid": [
      [
        "./ethics/compliance_engine.py",
        "_generate_anonymous_id"
      ],
      [
        "./ethics/compliance_engine20250503213400_p95.py",
        "_generate_anonymous_id"
      ],
      [
        "./ethics/compliance/engine.py",
        "_generate_anonymous_id"
      ],
      [
        "./orchestration/brain/meta/compliance_engine_20250503213400.py",
        "_generate_anonymous_id"
      ]
    ],
    "evaluateautonomy": [
      [
        "./ethics/compliance_engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./ethics/ethics_engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_autonomy"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_autonomy"
      ]
    ],
    "checkculturalcontext": [
      [
        "./ethics/lukhas_ethics_guard.py",
        "check_cultural_context"
      ],
      [
        "./ethics/compliance/engine.py",
        "check_cultural_context"
      ],
      [
        "./orchestration/brain/ethics/ethics_guard.py",
        "check_cultural_context"
      ]
    ],
    "loadprinciples": [
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ],
      [
        "./ethics/meta_ethics_governor.py",
        "load_principles"
      ]
    ],
    "extractactiontype": [
      [
        "./ethics/ethics_engine.py",
        "_extract_action_type"
      ],
      [
        "./ethics/compliance/engine.py",
        "_extract_action_type"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_extract_action_type"
      ]
    ],
    "extractcontent": [
      [
        "./ethics/ethics_engine.py",
        "_extract_content"
      ],
      [
        "./ethics/compliance/engine.py",
        "_extract_content"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_extract_content"
      ]
    ],
    "evaluateagainstframework": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_against_framework"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_against_framework"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_against_framework"
      ]
    ],
    "evaluateutilitarian": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_utilitarian"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_utilitarian"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_utilitarian"
      ]
    ],
    "evaluatedeontological": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_deontological"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_deontological"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_deontological"
      ]
    ],
    "evaluatevirtueethics": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_virtue_ethics"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_virtue_ethics"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_virtue_ethics"
      ]
    ],
    "evaluatejustice": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_justice"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_justice"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_justice"
      ]
    ],
    "evaluatecareethics": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_care_ethics"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_care_ethics"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_care_ethics"
      ]
    ],
    "evaluateagainstprinciple": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_against_principle"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_against_principle"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_against_principle"
      ]
    ],
    "evaluatenonmaleficence": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_non_maleficence"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_non_maleficence"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_non_maleficence"
      ]
    ],
    "evaluatebeneficence": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_beneficence"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_beneficence"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_beneficence"
      ]
    ],
    "evaluatejusticeprinciple": [
      [
        "./ethics/ethics_engine.py",
        "_evaluate_justice_principle"
      ],
      [
        "./ethics/compliance/engine.py",
        "_evaluate_justice_principle"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "_evaluate_justice_principle"
      ]
    ],
    "suggestalternatives": [
      [
        "./ethics/ethics_engine.py",
        "suggest_alternatives"
      ],
      [
        "./ethics/compliance/engine.py",
        "suggest_alternatives"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "suggest_alternatives"
      ]
    ],
    "increasescrutinylevel": [
      [
        "./ethics/ethics_engine.py",
        "increase_scrutiny_level"
      ],
      [
        "./ethics/compliance/engine.py",
        "increase_scrutiny_level"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "increase_scrutiny_level"
      ]
    ],
    "resetscrutinylevel": [
      [
        "./ethics/ethics_engine.py",
        "reset_scrutiny_level"
      ],
      [
        "./ethics/compliance/engine.py",
        "reset_scrutiny_level"
      ],
      [
        "./orchestration/brain/ethics/ethics_engine.py",
        "reset_scrutiny_level"
      ]
    ],
    "getcompliancereport": [
      [
        "./ethics/compliance.py",
        "get_compliance_report"
      ],
      [
        "./ethics/compliance_simple.py",
        "get_compliance_report"
      ],
      [
        "./ethics/ethics_guard.py",
        "get_compliance_report"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_compliance_report"
      ]
    ],
    "containssensitivedata": [
      [
        "./ethics/compliance.py",
        "_contains_sensitive_data"
      ],
      [
        "./ethics/compliance_simple.py",
        "_contains_sensitive_data"
      ],
      [
        "./ethics/batch_guard.py",
        "_contains_sensitive_data"
      ]
    ],
    "evaluate": [
      [
        "./ethics/engine.py",
        "evaluate"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "evaluate"
      ],
      [
        "./orchestration/brain/spine/main_loop.py",
        "evaluate"
      ],
      [
        "./symbolic/core/symbolic_language.py",
        "evaluate"
      ],
      [
        "./quantum/consensus_system.py",
        "evaluate"
      ]
    ],
    "evaluatedecision": [
      [
        "./ethics/policy_engines/base.py",
        "evaluate_decision"
      ],
      [
        "./ethics/policy_engines/base.py",
        "evaluate_decision"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "evaluate_decision"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "evaluate_decision"
      ],
      [
        "./governance/audit_logger.py",
        "evaluate_decision"
      ],
      [
        "./governance/compliance_drift_monitor.py",
        "evaluate_decision"
      ]
    ],
    "getpolicyname": [
      [
        "./ethics/policy_engines/base.py",
        "get_policy_name"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "get_policy_name"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "get_policy_name"
      ]
    ],
    "getpolicyversion": [
      [
        "./ethics/policy_engines/base.py",
        "get_policy_version"
      ],
      [
        "./ethics/policy_engines/examples/gpt4_policy.py",
        "get_policy_version"
      ],
      [
        "./ethics/policy_engines/examples/three_laws.py",
        "get_policy_version"
      ]
    ],
    "assesscollapserisk": [
      [
        "./ethics/policy_engines/base.py",
        "assess_collapse_risk"
      ],
      [
        "./symbolic/features/glyphs/glyph.py",
        "assess_collapse_risk"
      ],
      [
        "./symbolic/features/collapse/entropy_tracker.py",
        "assess_collapse_risk"
      ]
    ],
    "selectprovider": [
      [
        "./voice/interface.py",
        "_select_provider"
      ],
      [
        "./voice/voice_system_integrator.py",
        "_select_provider"
      ],
      [
        "./voice/synthesis.py",
        "_select_provider"
      ],
      [
        "./voice/synthesis.py",
        "_select_provider"
      ],
      [
        "./voice/systems/synthesis.py",
        "_select_provider"
      ]
    ],
    "initializecoreservices": [
      [
        "./voice/voice_hub.py",
        "_initialize_core_services"
      ],
      [
        "./api/core/api_hub.py",
        "_initialize_core_services"
      ],
      [
        "./emotion/emotion_hub.py",
        "_initialize_core_services"
      ]
    ],
    "getdefaultvoiceid": [
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_default_voice_id"
      ]
    ],
    "getavailablevoices": [
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ],
      [
        "./voice/systems/voice_synthesis.py",
        "get_available_voices"
      ]
    ],
    "checkavailability": [
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ],
      [
        "./voice/systems/synthesis.py",
        "_check_availability"
      ]
    ],
    "createorchestrationcomponent": [
      [
        "./orchestration/workflow_engine.py",
        "create_orchestration_component"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "create_orchestration_component"
      ],
      [
        "./orchestration/core_modules/workflow_engine.py",
        "create_orchestration_component"
      ]
    ],
    "initializesuperposition": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_initialize_superposition"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_initialize_superposition"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_initialize_superposition"
      ]
    ],
    "calculateattentiondistribution": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_calculate_attention_distribution"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_calculate_attention_distribution"
      ]
    ],
    "applyattentiongates": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_apply_attention_gates"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_apply_attention_gates"
      ]
    ],
    "updateentanglementmap": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/attention/quantum_attention.py",
        "_update_entanglement_map"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_update_entanglement_map"
      ]
    ],
    "generatesaferesponse": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_generate_safe_response"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_generate_safe_response"
      ]
    ],
    "updateconversationhistory": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/core_system.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "_update_conversation_history"
      ],
      [
        "./orchestration/brain/neural/cognitive_core.py",
        "_update_conversation_history"
      ]
    ],
    "getagistatus": [
      [
        "./orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "get_agi_status"
      ],
      [
        "./orchestration/brain/cognitive_core.py",
        "get_agi_status"
      ],
      [
        "./orchestration/brain/main_bot.py",
        "get_agi_status"
      ]
    ],
    "getmoduletype": [
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_get_module_type"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_get_module_type"
      ]
    ],
    "evaluatejurisdictionalcompliance": [
      [
        "./orchestration/brain/canadian_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/australian_awareness_engine.py",
        "_evaluate_jurisdictional_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "_evaluate_jurisdictional_compliance"
      ]
    ],
    "getvoicemodulationparams": [
      [
        "./orchestration/brain/brain_integration.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "get_voice_modulation_params"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "get_voice_modulation_params"
      ]
    ],
    "storememorywithemotion": [
      [
        "./orchestration/brain/brain_integration.py",
        "store_memory_with_emotion"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "store_memory_with_emotion"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "store_memory_with_emotion"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "store_memory_with_emotion"
      ]
    ],
    "retrievewithemotionalcontext": [
      [
        "./orchestration/brain/brain_integration.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "retrieve_with_emotional_context"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "retrieve_with_emotional_context"
      ]
    ],
    "explaindecision": [
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "explain_decision"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "explain_decision"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "explain_decision"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "explain_decision"
      ]
    ],
    "validatecompliance": [
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "validate_compliance"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "validate_compliance"
      ],
      [
        "./orchestration/brain/qrl_code/com_validator.py",
        "validate_compliance"
      ]
    ],
    "getconfidence": [
      [
        "./orchestration/brain/us_institutional_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/eu_awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "get_confidence"
      ],
      [
        "./orchestration/brain/GlobalInstitutionalFramework.py",
        "get_confidence"
      ]
    ],
    "nowiso": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "now_iso"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "now_iso"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "now_iso"
      ]
    ],
    "structuredlog": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "structured_log"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "structured_log"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "structured_log"
      ]
    ],
    "evaluatealignment": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "evaluate_alignment"
      ]
    ],
    "calculatesustainabilityimpact": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/das_awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "calculate_sustainability_impact"
      ]
    ],
    "compliancestatus": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_compliance_status"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_compliance_status"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_compliance_status"
      ]
    ],
    "issustainablelocation": [
      [
        "./orchestration/brain/das_awareness_engine.py",
        "_is_sustainable_location"
      ],
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "is_sustainable_location"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "is_sustainable_location"
      ]
    ],
    "createhighconfidenceresponse": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_high_confidence_response"
      ]
    ],
    "createmediumconfidenceresponse": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_medium_confidence_response"
      ]
    ],
    "createlowconfidenceresponse": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_create_low_confidence_response"
      ]
    ],
    "shouldgenerateimage": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_should_generate_image"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_should_generate_image"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_should_generate_image"
      ]
    ],
    "generateimageprompt": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_generate_image_prompt"
      ]
    ],
    "generatesuggestedactions": [
      [
        "./orchestration/brain/quantum_neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ],
      [
        "./orchestration/brain/neuro_symbolic/neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ],
      [
        "./quantum/core/neuro_symbolic_engine.py",
        "_generate_suggested_actions"
      ]
    ],
    "identifyoptimizationopportunities": [
      [
        "./orchestration/brain/awareness_engine_elevated.py",
        "_identify_optimization_opportunities"
      ],
      [
        "./orchestration/brain/awareness_engine.py",
        "_identify_optimization_opportunities"
      ],
      [
        "./orchestration/brain/prediction/predictive_resource_manager.py",
        "_identify_optimization_opportunities"
      ]
    ],
    "generatedreamassociations": [
      [
        "./orchestration/brain/brain_integration_enhanced.py",
        "_generate_dream_associations"
      ],
      [
        "./orchestration/brain/enhanced_brain_integration.py",
        "_generate_dream_associations"
      ],
      [
        "./orchestration/brain/integration/brain_integration.py",
        "_generate_dream_associations"
      ]
    ],
    "checkbias": [
      [
        "./orchestration/brain/safety_guardrails.py",
        "_check_bias"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_bias"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_bias"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_bias"
      ]
    ],
    "logreflection": [
      [
        "./orchestration/brain/trace_memoria_logger.py",
        "log_reflection"
      ],
      [
        "./orchestration/brain/meta/cognition/reflection_layer.py",
        "log_reflection"
      ],
      [
        "./orchestration/monitoring/reflection_layer.py",
        "log_reflection"
      ]
    ],
    "loadlatestflashback": [
      [
        "./orchestration/brain/expression.py",
        "load_latest_flashback"
      ],
      [
        "./orchestration/brain/dream_engine/visualizer_core.py",
        "load_latest_flashback"
      ],
      [
        "./dream/visualization/visualizer_core.py",
        "load_latest_flashback"
      ]
    ],
    "savesnapshot": [
      [
        "./orchestration/brain/unified_self_merge_divergence.py",
        "save_snapshot"
      ],
      [
        "./orchestration/brain/spine/unified_self.py",
        "save_snapshot"
      ],
      [
        "./dream/core/dream_snapshot.py",
        "save_snapshot"
      ]
    ],
    "loadalltraits": [
      [
        "./orchestration/brain/spine/unified_self.py",
        "load_all_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync.py",
        "load_all_traits"
      ],
      [
        "./orchestration/brain/spine/trait_sync_gpt_synb_ref.py",
        "load_all_traits"
      ]
    ],
    "updatequantumlikestate": [
      [
        "./orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/service.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/processing_core.py",
        "_update_quantum_like_state"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_update_quantum_like_state"
      ]
    ],
    "estimateconfidence": [
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ],
      [
        "./orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "estimate_confidence"
      ]
    ],
    "generatedream": [
      [
        "./orchestration/brain/symbolic_ai/modules/dream_generator.py",
        "generate_dream"
      ],
      [
        "./orchestration/brain/rem/generate_dream.py",
        "generate_dream"
      ],
      [
        "./orchestration/brain/rem/generate_dream_data.py",
        "generate_dream"
      ],
      [
        "./dream/dream_generator.py",
        "generate_dream"
      ],
      [
        "./quantum/processing/quantum_waveform.py",
        "generate_dream"
      ]
    ],
    "calculatepatternconfidence": [
      [
        "./orchestration/brain/rem/dream_processor_integrator.py",
        "_calculate_pattern_confidence"
      ],
      [
        "./dream/processors/dream_processor_integrator.py",
        "_calculate_pattern_confidence"
      ],
      [
        "./quantum/systems/bio_integration/connectivity_consolidator.py",
        "_calculate_pattern_confidence"
      ]
    ],
    "adaptweights": [
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "adapt_weights"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "adapt_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "adapt_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "adapt_weights"
      ]
    ],
    "getpriorityweights": [
      [
        "./orchestration/brain/ethics/ethical_hierarchy.py",
        "get_priority_weights"
      ],
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "get_priority_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "get_priority_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "get_priority_weights"
      ]
    ],
    "fetchlivecomplianceupdates": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "fetch_live_compliance_updates"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "fetch_live_compliance_updates"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "fetch_live_compliance_updates"
      ]
    ],
    "compliancescore": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compliance_score"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compliance_score"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compliance_score"
      ]
    ],
    "activatesafeguards": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "activate_safeguards"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "activate_safeguards"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "activate_safeguards"
      ]
    ],
    "recalibratesafeguards": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "recalibrate_safeguards"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "recalibrate_safeguards"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "recalibrate_safeguards"
      ]
    ],
    "initiateemergencyshutdown": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "initiate_emergency_shutdown"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "initiate_emergency_shutdown"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "initiate_emergency_shutdown"
      ]
    ],
    "createethicalcircuit": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "create_ethical_circuit"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "create_ethical_circuit"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "create_ethical_circuit"
      ]
    ],
    "measureethicalstate": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "measure_ethical_state"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "measure_ethical_state"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "measure_ethical_state"
      ]
    ],
    "fallbackprotocol": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "fallback_protocol"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "fallback_protocol"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "fallback_protocol"
      ]
    ],
    "symbolicfallbackethics": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "symbolic_fallback_ethics"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "symbolic_fallback_ethics"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "symbolic_fallback_ethics"
      ]
    ],
    "humanreviewrequired": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "human_review_required"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "human_review_required"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "human_review_required"
      ]
    ],
    "validateoperation": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "validate_operation"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "validate_operation"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "validate_operation"
      ]
    ],
    "checktransparency": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_transparency"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_transparency"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_transparency"
      ]
    ],
    "checkdataprotection": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_data_protection"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_data_protection"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_data_protection"
      ]
    ],
    "playsound": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "play_sound"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "play_sound"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "play_sound"
      ]
    ],
    "processdecision": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "process_decision"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "process_decision"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "process_decision"
      ]
    ],
    "recalibrateautonomy": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "recalibrate_autonomy"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "recalibrate_autonomy"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "recalibrate_autonomy"
      ]
    ],
    "modulateethicalweights": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_modulate_ethical_weights"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_modulate_ethical_weights"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_modulate_ethical_weights"
      ]
    ],
    "computesystemhealthfactor": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compute_system_health_factor"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compute_system_health_factor"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compute_system_health_factor"
      ]
    ],
    "computecontextentropy": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "compute_context_entropy"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "compute_context_entropy"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "compute_context_entropy"
      ]
    ],
    "adaptivecontextsimplification": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "adaptive_context_simplification"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "adaptive_context_simplification"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "adaptive_context_simplification"
      ]
    ],
    "humanoversightprotocol": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_human_oversight_protocol"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_human_oversight_protocol"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_human_oversight_protocol"
      ]
    ],
    "safefallbackresponse": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_safe_fallback_response"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_safe_fallback_response"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_safe_fallback_response"
      ]
    ],
    "synthesizeoutput": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "_synthesize_output"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "_synthesize_output"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "_synthesize_output"
      ]
    ],
    "monitorpostmarket": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "monitor_post_market"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "monitor_post_market"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "monitor_post_market"
      ]
    ],
    "checkadversarialinput": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "check_adversarial_input"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "check_adversarial_input"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "check_adversarial_input"
      ]
    ],
    "assessstakeholderimpact": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "assess_stakeholder_impact"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "assess_stakeholder_impact"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "assess_stakeholder_impact"
      ]
    ],
    "modulateemotionalstate": [
      [
        "./orchestration/brain/orchestration/the_oscillator.py",
        "modulate_emotional_state"
      ],
      [
        "./orchestration/monitoring/the_oscillator.py",
        "modulate_emotional_state"
      ],
      [
        "./quantum/processing/quantum_oscillator.py",
        "modulate_emotional_state"
      ]
    ],
    "getcurrentmetrics": [
      [
        "./orchestration/brain/monitoring/performance.py",
        "get_current_metrics"
      ],
      [
        "./symbolic/features/collapse/bridge.py",
        "get_current_metrics"
      ],
      [
        "./quantum/oscillator.py",
        "_get_current_metrics"
      ]
    ],
    "getquantummetrics": [
      [
        "./dream/core/quantum_dream_adapter.py",
        "get_quantum_metrics"
      ],
      [
        "./quantum/service.py",
        "get_quantum_metrics"
      ],
      [
        "./quantum/processing_core.py",
        "get_quantum_metrics"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "get_quantum_metrics"
      ]
    ],
    "createquantumcomponent": [
      [
        "./quantum/validator.py",
        "create_quantum_component"
      ],
      [
        "./quantum/processor.py",
        "create_quantum_component"
      ],
      [
        "./quantum/entanglement.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_entanglement.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_processor.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "create_quantum_component"
      ],
      [
        "./quantum/systems/quantum_validator.py",
        "create_quantum_component"
      ]
    ],
    "preparequantumsignal": [
      [
        "./quantum/processing_core.py",
        "_prepare_quantum_signal"
      ],
      [
        "./quantum/processing/quantum_bio_coordinator.py",
        "_prepare_quantum_signal"
      ],
      [
        "./quantum/systems/quantum_processing_core.py",
        "_prepare_quantum_signal"
      ]
    ]
  }
}