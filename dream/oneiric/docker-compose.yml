# ═══════════════════════════════════════════════════════════════════════════
# FILENAME: docker-compose.yml
# MODULE: infrastructure
# DESCRIPTION: Docker Compose orchestration for Oneiric Core multi-service
#              architecture. Defines database, API, migration, and frontend
#              services with proper dependencies and networking.
# DEPENDENCIES: docker-compose, postgresql, python, node.js, alembic
# LICENSE: PROPRIETARY - LUKHAS AI SYSTEMS - UNAUTHORIZED ACCESS PROHIBITED
# ═══════════════════════════════════════════════════════════════════════════

version: '3.8'

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oneiric_core}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-oneiric_core}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-oneiric_core}
      LUKHAS_ID_SECRET: ${LUKHAS_ID_SECRET}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    command: uvicorn oneiric_core.main:app --host 0.0.0.0 --port 8000 --reload

  migrate:
    build: .
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-oneiric_core}
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_your_key_here
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:

# ═══════════════════════════════════════════════════════════════════════════
# FILENAME: docker-compose.yml
# VERSION: 1.0.0
# TIER SYSTEM: Infrastructure orchestration (Full stack deployment)
# ΛTRACE INTEGRATION: ENABLED
# CAPABILITIES: Multi-service orchestration, database management, API deployment,
#               frontend serving, migration execution, health checking, networking
# FUNCTIONS: Service definition, dependency management, volume mapping
# CLASSES: None directly defined (Docker Compose configuration)
# DECORATORS: None
# DEPENDENCIES: Docker Compose, PostgreSQL image, Python runtime, Node.js runtime
# INTERFACES: Docker Compose interface, container networking, volume management
# ERROR HANDLING: Health checks, service dependencies, restart policies
# LOGGING: ΛTRACE_ENABLED for service orchestration and deployment tracking
# AUTHENTICATION: Service-level authentication configuration
# HOW TO USE:
#   docker-compose up -d          # Start all services in background
#   docker-compose logs api       # View API service logs
#   docker-compose down           # Stop all services
#   docker-compose exec api bash  # Access API container shell
# INTEGRATION NOTES: Complete development and production deployment stack.
#   Includes database with persistence, API with hot reload, automatic migrations,
#   and frontend development server. Configures proper service networking.
# MAINTENANCE: Update service versions, monitor resource usage, maintain
#   environment configurations, review security settings, optimize performance.
# CONTACT: LUKHAS DEVELOPMENT TEAM
# LICENSE: PROPRIETARY - LUKHAS AI SYSTEMS - UNAUTHORIZED ACCESS PROHIBITED
# ═══════════════════════════════════════════════════════════════════════════
