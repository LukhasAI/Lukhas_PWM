{
  "analysis_timestamp": "2025-07-30T20:36:27.747448",
  "total_candidates": 600,
  "categories_analyzed": 14,
  "file_analyses": {
    "api/glyph_exchange.py": {
      "file_path": "api/glyph_exchange.py",
      "category": "identity",
      "size_bytes": 3710,
      "size_kb": 3.6,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "base64",
        "json",
        "logging",
        "zlib",
        "datetime.datetime",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "GlyphImportItem",
        "GlyphImportRequest",
        "CompressedDreamTagRequest",
        "APIResponse"
      ],
      "functions": [
        "export_glyphs",
        "import_glyphs",
        "submit_compressed_dream_tags"
      ],
      "async_functions": [
        "export_glyphs",
        "import_glyphs",
        "submit_compressed_dream_tags"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 20.2
    },
    "api/memory_endpoints.py": {
      "file_path": "api/memory_endpoints.py",
      "category": "api_services",
      "size_bytes": 13127,
      "size_kb": 12.8,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Body",
        "fastapi.Depends",
        "pydantic.BaseModel",
        "pydantic.Field",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "classes": [
        "MemoryFoldRequest",
        "MemoryFoldResponse",
        "MemorySearchRequest",
        "MemorySearchResult",
        "DriftAnalysis",
        "LineageTrace",
        "CollapseRequest",
        "Config",
        "Config"
      ],
      "functions": [
        "get_memory_system",
        "fold_memory",
        "get_memory",
        "search_memories",
        "analyze_drift",
        "get_lineage",
        "force_collapse",
        "get_memory_stats",
        "health_check"
      ],
      "async_functions": [
        "fold_memory",
        "get_memory",
        "search_memories",
        "analyze_drift",
        "get_lineage",
        "force_collapse",
        "get_memory_stats",
        "health_check"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 34.5
    },
    "bio/bio_affect_model.py": {
      "file_path": "bio/bio_affect_model.py",
      "category": "bio_systems",
      "size_bytes": 628,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "typing.Dict"
      ],
      "classes": [],
      "functions": [
        "inject_narrative_repair"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 6.1
    },
    "bio/colony_self_repair.py": {
      "file_path": "bio/colony_self_repair.py",
      "category": "bio_systems",
      "size_bytes": 583,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [],
      "functions": [
        "simulate_colony_self_repair"
      ],
      "async_functions": [
        "simulate_colony_self_repair"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 8.1
    },
    "bio/endocrine_daily_operations.py": {
      "file_path": "bio/endocrine_daily_operations.py",
      "category": "bio_systems",
      "size_bytes": 24112,
      "size_kb": 23.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "enum.Enum",
        "core.bio_systems.BioSimulationController"
      ],
      "classes": [
        "TaskPriority",
        "TaskType",
        "EnhancedDailyOperations"
      ],
      "functions": [
        "__init__",
        "_setup_hormone_responses",
        "start_daily_operations",
        "stop_daily_operations",
        "_task_scheduler_loop",
        "_performance_monitor_loop",
        "_adaptation_loop",
        "_select_suitable_tasks",
        "_calculate_task_suitability",
        "_get_optimal_task_types"
      ],
      "async_functions": [
        "start_daily_operations",
        "stop_daily_operations",
        "_task_scheduler_loop",
        "_performance_monitor_loop",
        "_adaptation_loop",
        "_start_task",
        "_execute_task",
        "_complete_task",
        "_initiate_recovery_protocol",
        "_increase_challenge_level"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 34.5
    },
    "bio/protein_synthesizer.py": {
      "file_path": "bio/protein_synthesizer.py",
      "category": "bio_systems",
      "size_bytes": 567,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict"
      ],
      "classes": [
        "ProteinSynthesizer"
      ],
      "functions": [
        "__init__",
        "synthesize"
      ],
      "async_functions": [
        "synthesize"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 12.6
    },
    "bio/quantum_layer.py": {
      "file_path": "bio/quantum_layer.py",
      "category": "quantum",
      "size_bytes": 17839,
      "size_kb": 17.4,
      "lines": 1,
      "imports": [
        "math",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime"
      ],
      "classes": [
        "QuantumBioConfig",
        "QuantumBioOscillator"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "_initialize_quantum_like_state",
        "oscillate",
        "create_entanglement",
        "apply_entanglement_effects",
        "measure_quantum_property",
        "_apply_measurement_decoherence",
        "evolve_quantum_like_state",
        "get_oscillator_metrics"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 23.5
    },
    "bio/recovery_protocol.py": {
      "file_path": "bio/recovery_protocol.py",
      "category": "bio_systems",
      "size_bytes": 1587,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "asyncio",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime"
      ],
      "classes": [
        "BioRecoveryProtocol"
      ],
      "functions": [
        "__init__",
        "decompress_trauma"
      ],
      "async_functions": [
        "decompress_trauma"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 13.6
    },
    "bio/symbolic/bio_systems_inspiration.py": {
      "file_path": "bio/symbolic/bio_systems_inspiration.py",
      "category": "reasoning",
      "size_bytes": 5570,
      "size_kb": 5.4,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.0
    },
    "bio/symbolic/quantum_coherence_enhancer.py": {
      "file_path": "bio/symbolic/quantum_coherence_enhancer.py",
      "category": "reasoning",
      "size_bytes": 13109,
      "size_kb": 12.8,
      "lines": 1,
      "imports": [
        "numpy",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "typing.List",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime"
      ],
      "classes": [
        "QuantumState",
        "QuantumCoherenceEnhancer"
      ],
      "functions": [
        "create_quantum_enhancer",
        "__post_init__",
        "__init__",
        "z_collapse",
        "drift_score",
        "enhance_coherence",
        "_compute_amplitude",
        "_compute_phase",
        "_compute_entropy_change",
        "_calculate_phase_alignment"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 26.5
    },
    "bio/symbolic_entropy_observer.py": {
      "file_path": "bio/symbolic_entropy_observer.py",
      "category": "bio_systems",
      "size_bytes": 1575,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "json"
      ],
      "classes": [
        "SymbolicEntropyObserver"
      ],
      "functions": [
        "__init__",
        "get_latest_entropy_snapshot",
        "get_entropy_history"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.1
    },
    "consciousness/awareness/awareness_protocol.py": {
      "file_path": "consciousness/awareness/awareness_protocol.py",
      "category": "consciousness",
      "size_bytes": 19799,
      "size_kb": 19.3,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "logging",
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List"
      ],
      "classes": [
        "LucasAwarenessProtocol"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "assess_awareness",
        "_generate_context_vector",
        "_determine_tier",
        "update_bio_metrics",
        "wrapper_async",
        "wrapper_sync"
      ],
      "async_functions": [
        "assess_awareness",
        "_generate_context_vector",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 25.5
    },
    "consciousness/cognitive/adapter.py": {
      "file_path": "consciousness/cognitive/adapter.py",
      "category": "consciousness",
      "size_bytes": 44772,
      "size_kb": 43.7,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "numpy"
      ],
      "classes": [
        "CognitiveState",
        "EmotionalModulation",
        "CognitiveAdapter",
        "CognitiveAdapter",
        "CognitiveAdapter",
        "CoreComponent",
        "SecurityContext",
        "MetaLearningSystem",
        "HelixMapper"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__post_init__",
        "__post_init__",
        "__init__",
        "initialize",
        "process",
        "shutdown",
        "_init_cognitive_state",
        "_update_cognitive_state"
      ],
      "async_functions": [
        "initialize",
        "process",
        "shutdown",
        "_init_cognitive_state",
        "_integrate_with_memory",
        "_save_state",
        "wrapper_async",
        "process",
        "search_memories",
        "map_memory"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 56.0
    },
    "consciousness/cognitive/adapter_complete.py": {
      "file_path": "consciousness/cognitive/adapter_complete.py",
      "category": "consciousness",
      "size_bytes": 42089,
      "size_kb": 41.1,
      "lines": 9,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set"
      ],
      "classes": [
        "CognitiveAdapterConfig",
        "CoreComponent",
        "SecurityContext",
        "MemoryType",
        "MetaLearningSystem",
        "HelixMapper",
        "CognitiveState",
        "EmotionalModulation",
        "CognitiveAdapter"
      ],
      "functions": [
        "lukhas_tier_required",
        "test_cognitive_adapter",
        "__init__",
        "_load_config",
        "_save_config",
        "get",
        "decorator",
        "__init__",
        "__init__",
        "has_permission"
      ],
      "async_functions": [
        "test_cognitive_adapter",
        "process",
        "search_memories",
        "map_memory",
        "process",
        "_integrate_memory",
        "adapt_parameters",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 60.5
    },
    "consciousness/dream_bridge.py": {
      "file_path": "consciousness/dream_bridge.py",
      "category": "consciousness",
      "size_bytes": 2154,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "asyncio",
        "consciousness.bridge.ConsciousnessBridge",
        "dream.engine.DreamEngine",
        "memory.core.MemoryCore",
        "orchestration.integration_hub.get_integration_hub"
      ],
      "classes": [
        "DreamConsciousnessBridge"
      ],
      "functions": [
        "register_with_hub",
        "__init__",
        "process_dream_to_consciousness",
        "process_consciousness_to_dream"
      ],
      "async_functions": [
        "process_dream_to_consciousness",
        "process_consciousness_to_dream"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 20.2
    },
    "consciousness/openai_consciousness_adapter.py": {
      "file_path": "consciousness/openai_consciousness_adapter.py",
      "category": "consciousness",
      "size_bytes": 15083,
      "size_kb": 14.7,
      "lines": 5,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "openai",
        "bridge.openai_core_service.OpenAICoreService",
        "bridge.openai_core_service.OpenAIRequest"
      ],
      "classes": [
        "ConsciousnessOpenAIAdapter"
      ],
      "functions": [
        "demo_consciousness_adapter",
        "__init__",
        "analyze_awareness_state",
        "generate_introspection_narrative",
        "narrate_consciousness_state",
        "analyze_attention_patterns",
        "generate_awareness_exercises",
        "map_consciousness_landscape",
        "facilitate_meta_reflection"
      ],
      "async_functions": [
        "demo_consciousness_adapter",
        "analyze_awareness_state",
        "generate_introspection_narrative",
        "narrate_consciousness_state",
        "analyze_attention_patterns",
        "generate_awareness_exercises",
        "map_consciousness_landscape",
        "facilitate_meta_reflection"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 28.5
    },
    "consciousness/systems/awareness_processor.py": {
      "file_path": "consciousness/systems/awareness_processor.py",
      "category": "consciousness",
      "size_bytes": 19222,
      "size_kb": 18.8,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime"
      ],
      "classes": [
        "AwarenessProcessor"
      ],
      "functions": [
        "lukhas_tier_required",
        "create_awareness_processor",
        "create_and_initialize_awareness_processor",
        "decorator",
        "__init__",
        "initialize",
        "_setup_awareness_processing_system",
        "process",
        "_core_awareness_data_processing",
        "_process_sensor_data"
      ],
      "async_functions": [
        "create_and_initialize_awareness_processor",
        "initialize",
        "_setup_awareness_processing_system",
        "process",
        "_core_awareness_data_processing",
        "_process_sensor_data",
        "_process_internal_state_data",
        "_process_generic_awareness_data",
        "validate",
        "_perform_internal_validation_checks",
        "shutdown",
        "demo_main_processor",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 30.5
    },
    "consciousness/systems/awareness_tracker.py": {
      "file_path": "consciousness/systems/awareness_tracker.py",
      "category": "consciousness",
      "size_bytes": 7496,
      "size_kb": 7.3,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "AwarenessTracker"
      ],
      "functions": [
        "create_consciousness_component",
        "create_and_initialize_consciousness_component",
        "create_consciousness_component",
        "create_and_initialize_consciousness_component",
        "__init__",
        "initialize",
        "_setup_consciousness_system",
        "process",
        "_core_consciousness_processing",
        "_process_consciousness"
      ],
      "async_functions": [
        "create_and_initialize_consciousness_component",
        "create_and_initialize_consciousness_component",
        "initialize",
        "_setup_consciousness_system",
        "process",
        "_core_consciousness_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 34.0
    },
    "consciousness/systems/cognitive_systems/voice_personality.py": {
      "file_path": "consciousness/systems/cognitive_systems/voice_personality.py",
      "category": "consciousness",
      "size_bytes": 17672,
      "size_kb": 17.3,
      "lines": 3,
      "imports": [
        "logging",
        "asyncio",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "datetime.datetime",
        "core.personality.creative_expressions.NeuroHaikuGenerator"
      ],
      "classes": [
        "VoicePersonalityIntegrator"
      ],
      "functions": [
        "__init__",
        "_init_components",
        "enhance_voice_text",
        "get_voice_modulation",
        "adapt_to_interaction",
        "_should_enhance_text",
        "_apply_personality_traits",
        "_add_emphasis",
        "_add_pauses",
        "_update_personality_traits"
      ],
      "async_functions": [
        "enhance_voice_text"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 26.0
    },
    "consciousness/systems/engine_alt.py": {
      "file_path": "consciousness/systems/engine_alt.py",
      "category": "consciousness",
      "size_bytes": 29366,
      "size_kb": 28.7,
      "lines": 1,
      "imports": [
        "numpy",
        "asyncio",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "datetime.datetime"
      ],
      "classes": [
        "ConsciousnessState",
        "ConsciousnessPattern",
        "AnthropicEthicsEngine",
        "SelfAwareAdaptationModule",
        "LUKHASConsciousnessEngine"
      ],
      "functions": [
        "main",
        "to_dict",
        "__init__",
        "_init_symbolic_map",
        "analyze_interaction",
        "_analyze_temporal_patterns",
        "_analyze_symbolic_usage",
        "_detect_intentional_patterns",
        "_assess_emotional_context",
        "_generate_consciousness_signature"
      ],
      "async_functions": [
        "main",
        "analyze_interaction",
        "evaluate_action",
        "_evaluate_principle",
        "self_reflect",
        "adapt_to_feedback",
        "process_authentication_request",
        "evolve_consciousness",
        "get_consciousness_status"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 44.0
    },
    "consciousness/systems/engine_codex.py": {
      "file_path": "consciousness/systems/engine_codex.py",
      "category": "consciousness",
      "size_bytes": 29487,
      "size_kb": 28.8,
      "lines": 1,
      "imports": [
        "numpy",
        "asyncio",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "datetime.datetime"
      ],
      "classes": [
        "ConsciousnessState",
        "ConsciousnessPattern",
        "AnthropicEthicsEngine",
        "SelfAwareAdaptationModule",
        "LUKHASConsciousnessEngine"
      ],
      "functions": [
        "main",
        "to_dict",
        "__init__",
        "_init_symbolic_map",
        "analyze_interaction",
        "_analyze_temporal_patterns",
        "_analyze_symbolic_usage",
        "_detect_intentional_patterns",
        "_assess_emotional_context",
        "_generate_consciousness_signature"
      ],
      "async_functions": [
        "main",
        "analyze_interaction",
        "evaluate_action",
        "_evaluate_principle",
        "self_reflect",
        "adapt_to_feedback",
        "process_authentication_request",
        "evolve_consciousness",
        "get_consciousness_status"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 44.0
    },
    "consciousness/systems/engine_complete.py": {
      "file_path": "consciousness/systems/engine_complete.py",
      "category": "consciousness",
      "size_bytes": 39444,
      "size_kb": 38.5,
      "lines": 6,
      "imports": [
        "numpy",
        "asyncio",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "dataclasses.dataclass"
      ],
      "classes": [
        "ConsciousnessEngineConfig",
        "ConsciousnessState",
        "ConsciousnessPattern",
        "AnthropicEthicsEngine",
        "DefaultEthicsEngine",
        "SelfAwareAdaptationModule",
        "AGIConsciousnessEngine"
      ],
      "functions": [
        "lukhas_tier_required",
        "test_consciousness_engine",
        "__init__",
        "_load_config",
        "_save_config",
        "_initialize_anthropic_client",
        "get",
        "decorator",
        "to_dict",
        "__post_init__"
      ],
      "async_functions": [
        "test_consciousness_engine",
        "analyze_interaction",
        "evaluate_action",
        "evaluate_action",
        "_evaluate_principle",
        "reflect_on_performance",
        "adapt_based_on_feedback",
        "authenticate_with_consciousness",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 50.5
    },
    "consciousness/systems/engine_poetic.py": {
      "file_path": "consciousness/systems/engine_poetic.py",
      "category": "consciousness",
      "size_bytes": 73134,
      "size_kb": 71.4,
      "lines": 11,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "ConsciousnessState",
        "AwarenessFrame",
        "ConsciousnessEngine"
      ],
      "functions": [
        "create_consciousness",
        "calculate_consciousness_metrics",
        "demonstrate_consciousness",
        "main",
        "__init__",
        "_default_consciousness_config",
        "awaken",
        "_activate_neural_substrates",
        "_establish_sensory_integration",
        "_consolidate_memories"
      ],
      "async_functions": [
        "create_consciousness",
        "demonstrate_consciousness",
        "main",
        "awaken",
        "_activate_neural_substrates",
        "_establish_sensory_integration",
        "_consolidate_memories",
        "_calibrate_emotional_baseline",
        "_focus_attention_resources",
        "_activate_self_model",
        "_initialize_metacognition",
        "_achieve_full_consciousness",
        "experience",
        "_integrate_sensory_streams",
        "_apply_emotional_coloring",
        "_contextualize_with_memory",
        "_focus_attention",
        "_identify_salience",
        "_cognitive_processing",
        "_metacognitive_reflection",
        "_calculate_phi",
        "_generate_qualia",
        "_extract_insights",
        "_get_active_memories",
        "_assess_cognitive_load",
        "_update_consciousness_state",
        "think",
        "_process_thought",
        "contemplate",
        "_contemplate_logically",
        "_contemplate_emotionally",
        "_contemplate_temporally",
        "_contemplate_relationally",
        "_identify_assumptions",
        "_discover_paradoxes",
        "_synthesize_contemplation",
        "dream",
        "_generate_dream_narrative",
        "_extract_creative_solutions",
        "meditate",
        "reflect_on_experience",
        "_extract_wisdom_from_experience",
        "_assess_consciousness_health",
        "enter_flow_state",
        "shutdown"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 58.5
    },
    "consciousness/systems/mapper.py": {
      "file_path": "consciousness/systems/mapper.py",
      "category": "consciousness",
      "size_bytes": 23802,
      "size_kb": 23.2,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "asyncio",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "ConsciousnessState",
        "ConsciousnessIntensity",
        "ConsciousnessProfile",
        "VoiceConsciousnessMapping",
        "ConsciousnessMapper"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "initialize",
        "_load_consciousness_mappings",
        "_initialize_symbolic_patterns",
        "_set_default_consciousness",
        "_consciousness_monitoring_loop",
        "_detect_consciousness_changes",
        "update_consciousness_state",
        "get_voice_mapping"
      ],
      "async_functions": [
        "initialize",
        "_load_consciousness_mappings",
        "_initialize_symbolic_patterns",
        "_set_default_consciousness",
        "_consciousness_monitoring_loop",
        "_detect_consciousness_changes",
        "update_consciousness_state",
        "get_voice_mapping",
        "_adjust_mapping_for_intensity",
        "analyze_symbolic_signature",
        "generate_dynamic_signature",
        "map_consciousness_to_voice_parameters",
        "get_consciousness_trends",
        "shutdown"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 37.0
    },
    "consciousness/systems/quantum_consciousness_integration.py": {
      "file_path": "consciousness/systems/quantum_consciousness_integration.py",
      "category": "consciousness",
      "size_bytes": 20547,
      "size_kb": 20.1,
      "lines": 50,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "asyncio",
        "sys",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any"
      ],
      "classes": [
        "QuantumCreativeConsciousness"
      ],
      "functions": [
        "generate_conscious_content",
        "get_consciousness_integration_status",
        "main",
        "__init__",
        "generate_conscious_content",
        "_process_conscious_experience",
        "_generate_conscious_haiku",
        "_enhance_haiku_consciousness",
        "_generate_conscious_article",
        "_generate_conscious_social_post"
      ],
      "async_functions": [
        "generate_conscious_content",
        "main",
        "generate_conscious_content",
        "_process_conscious_experience",
        "_generate_conscious_haiku",
        "_generate_conscious_article",
        "_generate_conscious_social_post",
        "_generate_conscious_story",
        "_generate_conscious_generic"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 33.5
    },
    "consciousness/systems/quantum_consciousness_visualizer.py": {
      "file_path": "consciousness/systems/quantum_consciousness_visualizer.py",
      "category": "consciousness",
      "size_bytes": 4400,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "math",
        "json",
        "numpy",
        "datetime.datetime",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "QuantumConsciousnessVisualizer"
      ],
      "functions": [
        "__init__",
        "generate_neural_radiance_field",
        "render_symbolic_layer"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 19.9
    },
    "consciousness/systems/quantum_creative_consciousness.py": {
      "file_path": "consciousness/systems/quantum_creative_consciousness.py",
      "category": "consciousness",
      "size_bytes": 18245,
      "size_kb": 17.8,
      "lines": 54,
      "imports": [
        "asyncio",
        "sys",
        "os",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "random",
        "hashlib"
      ],
      "classes": [
        "QuantumCreativeDemo"
      ],
      "functions": [
        "interactive_demo",
        "__init__",
        "display_banner",
        "generate_quantum_haiku",
        "demonstrate_creative_modalities",
        "simulate_collaborative_creativity",
        "demonstrate_ip_protection",
        "consciousness_evolution_display",
        "generate_creative_summary"
      ],
      "async_functions": [
        "interactive_demo",
        "display_banner",
        "generate_quantum_haiku",
        "demonstrate_creative_modalities",
        "simulate_collaborative_creativity",
        "demonstrate_ip_protection",
        "consciousness_evolution_display",
        "generate_creative_summary"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 25.5
    },
    "consciousness/systems/reflection/reflection.py": {
      "file_path": "consciousness/systems/reflection/reflection.py",
      "category": "consciousness",
      "size_bytes": 834,
      "size_kb": 0.8,
      "lines": 2,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path",
        "Lukhas_ID.lid_ref.sign_with_lid"
      ],
      "classes": [],
      "functions": [
        "write_reflection_event"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 11.3
    },
    "consciousness/systems/self_reflection_engine.py": {
      "file_path": "consciousness/systems/self_reflection_engine.py",
      "category": "consciousness",
      "size_bytes": 7544,
      "size_kb": 7.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "SelfReflectionEngine"
      ],
      "functions": [
        "create_consciousness_component",
        "create_and_initialize_consciousness_component",
        "create_consciousness_component",
        "create_and_initialize_consciousness_component",
        "__init__",
        "initialize",
        "_setup_consciousness_system",
        "process",
        "_core_consciousness_processing",
        "_process_consciousness"
      ],
      "async_functions": [
        "create_and_initialize_consciousness_component",
        "create_and_initialize_consciousness_component",
        "initialize",
        "_setup_consciousness_system",
        "process",
        "_core_consciousness_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 34.0
    },
    "consciousness/systems/\u039bBot_consciousness_monitor.py": {
      "file_path": "consciousness/systems/\u039bBot_consciousness_monitor.py",
      "category": "consciousness",
      "size_bytes": 14085,
      "size_kb": 13.8,
      "lines": 4,
      "imports": [
        "asyncio",
        "logging",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "\u039bBot_agi_core.\u039bBotAGICore",
        "\u039bBot_agi_core.\u039bBotAGIIntegration",
        "\u039bBot_agi_core.ConsciousnessLevel"
      ],
      "classes": [
        "\u039bBotConsciousnessMonitor"
      ],
      "functions": [
        "main",
        "__init__",
        "start_monitoring",
        "_consciousness_evolution_monitor",
        "_meta_cognitive_analysis",
        "_capability_unlock_monitor",
        "_agi_metrics_tracker",
        "_celebrate_consciousness_evolution",
        "demonstrate_agi_capabilities"
      ],
      "async_functions": [
        "main",
        "start_monitoring",
        "_consciousness_evolution_monitor",
        "_meta_cognitive_analysis",
        "_capability_unlock_monitor",
        "_agi_metrics_tracker",
        "_celebrate_consciousness_evolution",
        "demonstrate_agi_capabilities"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 31.5
    },
    "core/actor_model.py": {
      "file_path": "core/actor_model.py",
      "category": "core_systems",
      "size_bytes": 1664,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "queue",
        "threading",
        "time"
      ],
      "classes": [
        "Actor",
        "PingActor",
        "PongActor"
      ],
      "functions": [
        "__init__",
        "_run",
        "receive",
        "send",
        "receive",
        "receive"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 22.7
    },
    "core/actor_supervision_integration.py": {
      "file_path": "core/actor_supervision_integration.py",
      "category": "core_systems",
      "size_bytes": 5190,
      "size_kb": 5.1,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Optional",
        "core.actor_system.Actor",
        "core.actor_system.ActorSystem",
        "core.supervision.SupervisorActor",
        "core.supervision.SupervisionStrategy",
        "core.supervision.RootSupervisor",
        "traceback"
      ],
      "classes": [
        "SupervisedActorSystem"
      ],
      "functions": [
        "patch_actor_system_for_supervision",
        "patch_actor_for_supervision",
        "get_supervised_actor_system",
        "new_init",
        "new_start",
        "new_message_loop",
        "__init__",
        "create_supervised_actor"
      ],
      "async_functions": [
        "get_supervised_actor_system",
        "new_start",
        "new_message_loop",
        "create_supervised_actor"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 25.0
    },
    "core/ai/integration_manager.py": {
      "file_path": "core/ai/integration_manager.py",
      "category": "core_systems",
      "size_bytes": 19285,
      "size_kb": 18.8,
      "lines": 25,
      "imports": [
        "os",
        "json",
        "asyncio",
        "subprocess",
        "uuid",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "AITask",
        "AIResponse",
        "AIIntegrationManager",
        "TaskTemplates",
        "AIOHTTPClientSessionPH",
        "MR"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "_load_ai_service_config",
        "_read_file_for_task",
        "delegate_to_claude",
        "delegate_to_openai",
        "use_github_copilot_cli",
        "delegate_task",
        "_local_analysis_fallback"
      ],
      "async_functions": [
        "_read_file_for_task",
        "delegate_to_claude",
        "delegate_to_openai",
        "delegate_task",
        "__aenter__",
        "__aexit__",
        "post",
        "json",
        "text"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 42.5
    },
    "core/ai_interface.py": {
      "file_path": "core/ai_interface.py",
      "category": "core_systems",
      "size_bytes": 18971,
      "size_kb": 18.5,
      "lines": 20,
      "imports": [
        "sys",
        "os",
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "enum.Enum",
        "logging",
        "router.llm_multiverse_router.multiverse_route"
      ],
      "classes": [
        "LukhusAITaskType",
        "LukhusAI"
      ],
      "functions": [
        "ai_code",
        "ai_audit",
        "ai_docs",
        "ai_chat",
        "ai_research",
        "_missing_",
        "__init__",
        "generate_response",
        "code_assistance",
        "security_audit"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 31.5
    },
    "core/api_controllers.py": {
      "error": "File not found",
      "file_path": "core/api_controllers.py"
    },
    "core/api_diff_analyzer.py": {
      "file_path": "core/api_diff_analyzer.py",
      "category": "core_systems",
      "size_bytes": 19064,
      "size_kb": 18.6,
      "lines": 31,
      "imports": [
        "ast",
        "os",
        "re",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional"
      ],
      "classes": [
        "APICall",
        "MethodSignature",
        "APIMismatch",
        "TestAPIExtractor",
        "ImplementationAnalyzer",
        "APIDiffAnalyzer"
      ],
      "functions": [
        "main",
        "__init__",
        "extract_calls",
        "visit_Call",
        "visit_Attribute",
        "_infer_class_name",
        "__init__",
        "extract_signatures",
        "visit_ClassDef",
        "visit_FunctionDef"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 42.5
    },
    "core/apply_api_fixes.py": {
      "file_path": "core/apply_api_fixes.py",
      "category": "core_systems",
      "size_bytes": 1954,
      "size_kb": 1.9,
      "lines": 1,
      "imports": [
        "re",
        "json",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "apply_fixes"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.5
    },
    "core/benchmark_swarm.py": {
      "file_path": "core/benchmark_swarm.py",
      "category": "core_systems",
      "size_bytes": 1650,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "asyncio",
        "time",
        "event_bus.*",
        "minimal_actor.*"
      ],
      "classes": [],
      "functions": [
        "bench_behavior",
        "event_to_actor_bridge",
        "run_benchmark",
        "handle_event"
      ],
      "async_functions": [
        "run_benchmark"
      ],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 15.7
    },
    "core/circuit_breaker.py": {
      "file_path": "core/circuit_breaker.py",
      "category": "core_systems",
      "size_bytes": 37543,
      "size_kb": 36.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "time",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Any",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "CircuitState",
        "FailureType",
        "FailureRecord",
        "HealthCheck",
        "AdvancedCircuitBreaker",
        "CircuitBreakerOpen",
        "AnomalyDetector",
        "ErrorPropagationTracker",
        "ConsensusValidator",
        "CascadePreventionSystem",
        "ActorQuarantined",
        "AnomalyDetected",
        "TestActor"
      ],
      "functions": [
        "demo_cascade_prevention",
        "__init__",
        "call",
        "async_call",
        "_allow_request",
        "_on_success",
        "_on_failure",
        "_should_open",
        "_transition_to",
        "force_open"
      ],
      "async_functions": [
        "demo_cascade_prevention",
        "async_call",
        "run_health_checks",
        "validate_consensus",
        "_query_actor_with_timeout",
        "start",
        "stop",
        "protected_call",
        "validate_with_consensus",
        "_monitoring_loop",
        "_collect_system_metrics",
        "_get_actor_snapshot",
        "_run_health_checks",
        "make_call",
        "_handle_process"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 69.5
    },
    "core/collaboration.py": {
      "file_path": "core/collaboration.py",
      "category": "core_systems",
      "size_bytes": 4074,
      "size_kb": 4.0,
      "lines": 4,
      "imports": [
        "core.swarm.SwarmManager",
        "core.swarm.AgentColony",
        "core.coordination.ContractNetInitiator",
        "core.coordination.ContractNetParticipant"
      ],
      "classes": [
        "ReactiveDataPipeline",
        "DynamicTaskNegotiation",
        "SelfOrganizingSwarm"
      ],
      "functions": [
        "__init__",
        "run_pipeline",
        "__init__",
        "run_negotiation",
        "__init__",
        "run_training"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 25.1
    },
    "core/consistency_manager.py": {
      "file_path": "core/consistency_manager.py",
      "category": "core_systems",
      "size_bytes": 1489,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "enum.Enum",
        "typing.Any",
        "typing.Dict",
        "core.tiered_state_management.TieredStateManager",
        "core.tiered_state_management.StateType"
      ],
      "classes": [
        "Consistency",
        "ConsistencyManager"
      ],
      "functions": [
        "__init__",
        "apply_updates"
      ],
      "async_functions": [
        "apply_updates"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 20.5
    },
    "core/core_system.py": {
      "file_path": "core/core_system.py",
      "category": "core_systems",
      "size_bytes": 2923,
      "size_kb": 2.9,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "plugin_registry.PluginRegistry"
      ],
      "classes": [
        "LukhasCore"
      ],
      "functions": [
        "get_lukhas_core",
        "__init__",
        "_initialize_core_systems",
        "process",
        "get_status"
      ],
      "async_functions": [
        "process"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 21.4
    },
    "core/direct_ai_router.py": {
      "file_path": "core/direct_ai_router.py",
      "category": "core_systems",
      "size_bytes": 14768,
      "size_kb": 14.4,
      "lines": 7,
      "imports": [
        "subprocess",
        "json",
        "os",
        "sys",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "core.config.config"
      ],
      "classes": [
        "DirectAIRouter"
      ],
      "functions": [
        "route_ai_request",
        "is_ai_available",
        "__init__",
        "route_request",
        "is_available"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 21.5
    },
    "core/ethics/dream_ethics_injector.py": {
      "file_path": "core/ethics/dream_ethics_injector.py",
      "category": "core_systems",
      "size_bytes": 22062,
      "size_kb": 21.5,
      "lines": 9,
      "imports": [
        "asyncio",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime"
      ],
      "classes": [
        "EthicalAnnotation",
        "DreamEthicalAssessment",
        "DreamEthicsInjector",
        "EthicsEngine",
        "EthicalPolicy",
        "PolicyViolation"
      ],
      "functions": [
        "demonstrate_dream_ethics",
        "risk_level",
        "to_dict",
        "__init__",
        "assess_dream",
        "_analyze_tag",
        "_filter_narrative",
        "_generate_insights",
        "_generate_transformations",
        "get_safety_statistics"
      ],
      "async_functions": [
        "demonstrate_dream_ethics",
        "assess_dream",
        "_analyze_tag",
        "evaluate"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 37.5
    },
    "core/event_replay_snapshot.py": {
      "file_path": "core/event_replay_snapshot.py",
      "category": "core_systems",
      "size_bytes": 31192,
      "size_kb": 30.5,
      "lines": 4,
      "imports": [
        "asyncio",
        "json",
        "pickle",
        "time",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable"
      ],
      "classes": [
        "EventType",
        "Event",
        "ActorStateSnapshot",
        "EventStore",
        "SnapshotStore",
        "EventSourcedActor",
        "ReplayController",
        "DemoActor"
      ],
      "functions": [
        "demo_event_replay",
        "to_json",
        "from_json",
        "create_from_actor",
        "restore_to_actor",
        "__init__",
        "start",
        "stop",
        "append_event",
        "get_events_for_actor"
      ],
      "async_functions": [
        "demo_event_replay",
        "start",
        "stop",
        "append_event",
        "get_events_for_actor",
        "get_events_by_correlation",
        "replay_events",
        "_persistence_loop",
        "_flush_to_disk",
        "_write_segment",
        "_load_recent_events",
        "_read_segment",
        "_load_events_from_disk",
        "_load_correlation_events_from_disk",
        "save_snapshot",
        "load_snapshot",
        "delete_old_snapshots",
        "send_message",
        "_process_message",
        "record_state_change",
        "take_snapshot",
        "restore_from_snapshot",
        "replay_history",
        "replay_scenario",
        "_replay_event_callback",
        "create_debugging_checkpoint",
        "_handle_increment",
        "_handle_store_data",
        "replay_callback"
      ],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 54.5
    },
    "core/governance/governance_colony.py": {
      "file_path": "core/governance/governance_colony.py",
      "category": "core_systems",
      "size_bytes": 830,
      "size_kb": 0.8,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "core.colonies.base_colony.BaseColony"
      ],
      "classes": [
        "GovernanceColony"
      ],
      "functions": [
        "__init__",
        "pre_approve",
        "execute_task"
      ],
      "async_functions": [
        "pre_approve",
        "execute_task"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.3
    },
    "core/identity/engine.py": {
      "file_path": "core/identity/engine.py",
      "category": "identity",
      "size_bytes": 7391,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "IdentityEngine"
      ],
      "functions": [
        "create_identity_component",
        "create_and_initialize_identity_component",
        "__init__",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_identity_component",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "core/identity/id_manager.py": {
      "file_path": "core/identity/id_manager.py",
      "category": "identity",
      "size_bytes": 2286,
      "size_kb": 2.2,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "get_current_sid",
        "get_user_tier",
        "register_new_user"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.8
    },
    "core/identity/manager.py": {
      "file_path": "core/identity/manager.py",
      "category": "identity",
      "size_bytes": 19318,
      "size_kb": 18.9,
      "lines": 4,
      "imports": [
        "hashlib",
        "json",
        "logging",
        "asyncio",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "EmotionalMemoryVector",
        "SymbolicIdentityHash",
        "TraumaLock",
        "AdvancedIdentityManager"
      ],
      "functions": [
        "__init__",
        "extract_vector",
        "update_vector",
        "get_vector",
        "_update_composite_vector",
        "__init__",
        "create_hash",
        "store_hash",
        "verify",
        "_calculate_hash_similarity"
      ],
      "async_functions": [
        "get_user_identity",
        "demo"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 33.0
    },
    "core/identity/mapper.py": {
      "file_path": "core/identity/mapper.py",
      "category": "identity",
      "size_bytes": 7390,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "IdentityMapper"
      ],
      "functions": [
        "create_identity_component",
        "create_and_initialize_identity_component",
        "__init__",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_identity_component",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "core/identity/persona_engine.py": {
      "file_path": "core/identity/persona_engine.py",
      "category": "identity",
      "size_bytes": 7555,
      "size_kb": 7.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "PersonaEngine"
      ],
      "functions": [
        "create_identity_component",
        "create_and_initialize_identity_component",
        "__init__",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_identity_component",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "core/identity/processor.py": {
      "file_path": "core/identity/processor.py",
      "category": "identity",
      "size_bytes": 7418,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "IdentityProcessor"
      ],
      "functions": [
        "create_identity_component",
        "create_and_initialize_identity_component",
        "__init__",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_identity_component",
        "initialize",
        "_setup_identity_system",
        "process",
        "_core_identity_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "core/infrastructure/base_node.py": {
      "file_path": "core/infrastructure/base_node.py",
      "category": "core_systems",
      "size_bytes": 2058,
      "size_kb": 2.0,
      "lines": 1,
      "imports": [],
      "classes": [
        "Node"
      ],
      "functions": [
        "__init__",
        "add_link",
        "evolve",
        "trigger_event",
        "reflect",
        "activate",
        "_propagate_activation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 19.6
    },
    "core/infrastructure/node_collection.py": {
      "file_path": "core/infrastructure/node_collection.py",
      "category": "core_systems",
      "size_bytes": 13491,
      "size_kb": 13.2,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "node_registry.node_registry",
        "time"
      ],
      "classes": [
        "IntentNode",
        "MemoryNode",
        "EthicsNode",
        "GoalManagementNode",
        "DAOGovernanceNode"
      ],
      "functions": [
        "register_core_nodes",
        "__init__",
        "process",
        "refine_intent",
        "__init__",
        "store",
        "retrieve",
        "__init__",
        "evaluate_action",
        "_update_principles"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 37.0
    },
    "core/infrastructure/node_manager.py": {
      "file_path": "core/infrastructure/node_manager.py",
      "category": "core_systems",
      "size_bytes": 16055,
      "size_kb": 15.7,
      "lines": 1,
      "imports": [
        "logging",
        "time",
        "os",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Set"
      ],
      "classes": [
        "NodeManager"
      ],
      "functions": [
        "__init__",
        "_load_config",
        "register_node",
        "discover_nodes",
        "_is_node_file",
        "_load_node",
        "dispatch_message",
        "broadcast_to_nodes",
        "process_message",
        "handle_node_status_change"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 24.5
    },
    "core/integrator.py": {
      "file_path": "core/integrator.py",
      "category": "core_systems",
      "size_bytes": 21237,
      "size_kb": 20.7,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "uuid",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "EnhancedCoreConfig",
        "CoreMessageType",
        "EnhancedCoreIntegrator",
        "QuantumBioOscillator",
        "BioOrchestrator",
        "AccessTier",
        "AccessController",
        "QuantumAuthenticator",
        "ComplianceMonitor",
        "UnifiedIntegration"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "register_component",
        "send_message_to_component",
        "get_system_status",
        "broadcast_event",
        "subscribe_to_event",
        "__init__",
        "verify_component_state"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 52.5
    },
    "core/integrity_probe.py": {
      "file_path": "core/integrity_probe.py",
      "category": "core_systems",
      "size_bytes": 1203,
      "size_kb": 1.2,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "core.symbolic.drift.drift_score.DriftScore",
        "memory.core_memory.memory_collapse_verifier.MemoryCollapseVerifier",
        "core.symbolic_diagnostics.trace_repair_engine.TraceRepairEngine"
      ],
      "classes": [
        "IntegrityProbe"
      ],
      "functions": [
        "__init__",
        "run_consistency_check"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.2
    },
    "core/interfaces/cli.py": {
      "file_path": "core/interfaces/cli.py",
      "category": "core_systems",
      "size_bytes": 4187,
      "size_kb": 4.1,
      "lines": 6,
      "imports": [
        "sys",
        "os",
        "logging",
        "datetime.datetime",
        "json"
      ],
      "classes": [],
      "functions": [
        "display_mood",
        "display_flashback_preview",
        "display_system_status",
        "voice_welcome",
        "launch"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.7
    },
    "core/interfaces/common_interfaces.py": {
      "file_path": "core/interfaces/common_interfaces.py",
      "category": "core_systems",
      "size_bytes": 564,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "abc.ABC",
        "abc.abstractmethod",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "EthicsCheckable",
        "DreamAnalyzable"
      ],
      "functions": [
        "get_ethical_context",
        "get_dream_state"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.6
    },
    "core/interfaces/custom_llm.py": {
      "file_path": "core/interfaces/custom_llm.py",
      "category": "core_systems",
      "size_bytes": 3819,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "pydantic",
        "typing",
        "core.unchecked_base_model.UncheckedBaseModel",
        "conv_ai_secret_locator.ConvAiSecretLocator",
        "core.pydantic_utilities.IS_PYDANTIC_V2",
        "structlog"
      ],
      "classes": [
        "CustomLlm",
        "Config"
      ],
      "functions": [
        "log_creation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 18.3
    },
    "core/interfaces/dashboad.py": {
      "file_path": "core/interfaces/dashboad.py",
      "category": "core_systems",
      "size_bytes": 5552,
      "size_kb": 5.4,
      "lines": 3,
      "imports": [],
      "classes": [],
      "functions": [
        "generate_symbolic_html_url",
        "build_publish_payload",
        "show_social_post_preview"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.5
    },
    "core/interfaces/launcher.py": {
      "file_path": "core/interfaces/launcher.py",
      "category": "core_systems",
      "size_bytes": 933,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "launch_lukhas"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 11.4
    },
    "core/interfaces/logic/agent_core.py": {
      "file_path": "core/interfaces/logic/agent_core.py",
      "category": "reasoning",
      "size_bytes": 4147,
      "size_kb": 4.0,
      "lines": 1,
      "imports": [
        "lukhas_config.TIER_PERMISSIONS",
        "Agent_Logic_Architecture.initialize_agent",
        "Agent_Logic_Architecture.sync_user_mood",
        "Agent_Logic_Architecture.verify_access_level",
        "Agent_Logic_Architecture.generate_response",
        "Agent_Logic_Architecture.store_memory_echo",
        "Agent_Logic_Architecture.generate_dream_digest",
        "Agent_Logic_Architecture.activate_delegate_mode",
        "Agent_Logic_Architecture.check_and_quarantine",
        "Agent_Logic_Architecture.ethical_review"
      ],
      "classes": [],
      "functions": [
        "start_agent",
        "run_agent_simulation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.1
    },
    "core/interfaces/logic/agent_logic_architecture.py": {
      "file_path": "core/interfaces/logic/agent_logic_architecture.py",
      "category": "reasoning",
      "size_bytes": 5278,
      "size_kb": 5.2,
      "lines": 1,
      "imports": [
        "structlog"
      ],
      "classes": [],
      "functions": [
        "initialize_agent",
        "sync_user_mood",
        "verify_access_level",
        "generate_response",
        "store_memory_echo",
        "generate_dream_digest",
        "activate_delegate_mode",
        "check_and_quarantine",
        "ethical_review"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.5
    },
    "core/interfaces/logic/agent_self.py": {
      "file_path": "core/interfaces/logic/agent_self.py",
      "category": "reasoning",
      "size_bytes": 4942,
      "size_kb": 4.8,
      "lines": 1,
      "imports": [
        "streamlit",
        "pathlib.Path",
        "dotenv.load_dotenv",
        "os",
        "core.lukhas_emotion_log.get_emotion_state",
        "core.lukhas_widget_engine.create_symbolic_widget",
        "core.lukhas_self.who_am_i",
        "openai"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 14.9
    },
    "core/interfaces/logic/consent_manager.py": {
      "file_path": "core/interfaces/logic/consent_manager.py",
      "category": "reasoning",
      "size_bytes": 3783,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "structlog",
        "lukhas_config.TIER_PERMISSIONS"
      ],
      "classes": [],
      "functions": [
        "is_action_allowed",
        "revoke_access",
        "verify_or_revoke"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.3
    },
    "core/interfaces/logic/delegate_logic.py": {
      "file_path": "core/interfaces/logic/delegate_logic.py",
      "category": "reasoning",
      "size_bytes": 8428,
      "size_kb": 8.2,
      "lines": 1,
      "imports": [
        "structlog",
        "typing.Tuple",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [],
      "functions": [
        "can_delegate",
        "delegate_action"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 16.0
    },
    "core/interfaces/logic/memory_handler.py": {
      "file_path": "core/interfaces/logic/memory_handler.py",
      "category": "reasoning",
      "size_bytes": 1648,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 11.6
    },
    "core/interfaces/logic/safety_filter.py": {
      "file_path": "core/interfaces/logic/safety_filter.py",
      "category": "reasoning",
      "size_bytes": 1982,
      "size_kb": 1.9,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 12.0
    },
    "core/interfaces/logic/voice_narration_player.py": {
      "file_path": "core/interfaces/logic/voice_narration_player.py",
      "category": "reasoning",
      "size_bytes": 2219,
      "size_kb": 2.2,
      "lines": 5,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 12.2
    },
    "core/interfaces/lukhas_as_agent/agent_logic/agent_self.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/agent_logic/agent_self.py"
    },
    "core/interfaces/lukhas_as_agent/agent_logic/memory_handler.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/agent_logic/memory_handler.py"
    },
    "core/interfaces/lukhas_as_agent/agent_logic/safety_filter.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/agent_logic/safety_filter.py"
    },
    "core/interfaces/lukhas_as_agent/agent_logic/voice_narration_player.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/agent_logic/voice_narration_player.py"
    },
    "core/interfaces/lukhas_as_agent/auth/registry.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/auth/registry.py"
    },
    "core/interfaces/lukhas_as_agent/auth/vendor_hospitality_sync.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/auth/vendor_hospitality_sync.py"
    },
    "core/interfaces/lukhas_as_agent/core/affiliate_log.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/affiliate_log.py"
    },
    "core/interfaces/lukhas_as_agent/core/agent_handoff.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/agent_handoff.py"
    },
    "core/interfaces/lukhas_as_agent/core/checkout_handler.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/checkout_handler.py"
    },
    "core/interfaces/lukhas_as_agent/core/duet_conductor.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/duet_conductor.py"
    },
    "core/interfaces/lukhas_as_agent/core/emotion_log.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/emotion_log.py"
    },
    "core/interfaces/lukhas_as_agent/core/filter_gpt.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/filter_gpt.py"
    },
    "core/interfaces/lukhas_as_agent/core/lukhas_nias_filter.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/lukhas_nias_filter.py"
    },
    "core/interfaces/lukhas_as_agent/core/nias_filter.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/nias_filter.py"
    },
    "core/interfaces/lukhas_as_agent/core/overview_log.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/overview_log.py"
    },
    "core/interfaces/lukhas_as_agent/core/render_ai.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/render_ai.py"
    },
    "core/interfaces/lukhas_as_agent/core/reward_reputation.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/reward_reputation.py"
    },
    "core/interfaces/lukhas_as_agent/core/scheduler.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/scheduler.py"
    },
    "core/interfaces/lukhas_as_agent/core/vendor_sync.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/vendor_sync.py"
    },
    "core/interfaces/lukhas_as_agent/core/vision_prompts.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/vision_prompts.py"
    },
    "core/interfaces/lukhas_as_agent/core/voice_duet.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/voice_duet.py"
    },
    "core/interfaces/lukhas_as_agent/core/wallet.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/core/wallet.py"
    },
    "core/interfaces/lukhas_as_agent/news_and_social/affiliate_log.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/news_and_social/affiliate_log.py"
    },
    "core/interfaces/lukhas_as_agent/news_and_social/s_dispatcher.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/news_and_social/s_dispatcher.py"
    },
    "core/interfaces/lukhas_as_agent/sample_payloads/trace_log_viewer.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sample_payloads/trace_log_viewer.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/aggregator.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/aggregator.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/dast_logger.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/dast_logger.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/launcher.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/launcher.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/partner_sdk.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/partner_sdk.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/schedule_manager.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/schedule_manager.py"
    },
    "core/interfaces/lukhas_as_agent/sys/dast/store.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/dast/store.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/05_25_dream_clustering_engine.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/05_25_dream_clustering_engine.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/delivery_loop.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/delivery_loop.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/dream_log_viewer.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/dream_log_viewer.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/dream_narrator_queue.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/dream_narrator_queue.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/dream_recorder.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/dream_recorder.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/feedback_insight_cli.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/feedback_insight_cli.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/feedback_log_viewer.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/feedback_log_viewer.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/feedback_loop.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/feedback_loop.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/inject_message_simulator.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/inject_message_simulator.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/main_loop.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/main_loop.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/replay_heatmap.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/replay_heatmap.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/replay_queue.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/replay_queue.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/replay_visualizer.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/replay_visualizer.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/symbolic_reply_generator.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/symbolic_reply_generator.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/validate_payload.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/validate_payload.py"
    },
    "core/interfaces/lukhas_as_agent/sys/nias/voice_narrator.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/sys/nias/voice_narrator.py"
    },
    "core/interfaces/lukhas_as_agent/utils/symbolic_github_export.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/utils/symbolic_github_export.py"
    },
    "core/interfaces/lukhas_as_agent/widgets/delivery_tracker_widget.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/widgets/delivery_tracker_widget.py"
    },
    "core/interfaces/lukhas_as_agent/widgets/live_renderer_widget.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/widgets/live_renderer_widget.py"
    },
    "core/interfaces/lukhas_as_agent/widgets/terminal_widget.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/widgets/terminal_widget.py"
    },
    "core/interfaces/lukhas_as_agent/widgets/travel_widget.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/widgets/travel_widget.py"
    },
    "core/interfaces/lukhas_as_agent/widgets/widget_engine.py": {
      "error": "File not found",
      "file_path": "core/interfaces/lukhas_as_agent/widgets/widget_engine.py"
    },
    "core/interfaces/socket.py": {
      "file_path": "core/interfaces/socket.py",
      "category": "core_systems",
      "size_bytes": 2369,
      "size_kb": 2.3,
      "lines": 2,
      "imports": [
        "asyncio",
        "websockets",
        "json",
        "time",
        "os",
        "logging"
      ],
      "classes": [],
      "functions": [
        "handle_message",
        "listen_to_socket"
      ],
      "async_functions": [
        "handle_message",
        "listen_to_socket"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 15.4
    },
    "core/interfaces/tools/cli/command_registry.py": {
      "file_path": "core/interfaces/tools/cli/command_registry.py",
      "category": "core_systems",
      "size_bytes": 3997,
      "size_kb": 3.9,
      "lines": 4,
      "imports": [
        "logging"
      ],
      "classes": [],
      "functions": [
        "list_commands"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.5
    },
    "core/interfaces/tools/cli/dream_cli.py": {
      "file_path": "core/interfaces/tools/cli/dream_cli.py",
      "category": "core_systems",
      "size_bytes": 3020,
      "size_kb": 2.9,
      "lines": 1,
      "imports": [
        "argparse",
        "subprocess",
        "logging",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "run_narrator_queue",
        "run_voice_narrator",
        "inject_test_dream",
        "run_all",
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 18.5
    },
    "core/interfaces/tools/cli/speak.py": {
      "file_path": "core/interfaces/tools/cli/speak.py",
      "category": "core_systems",
      "size_bytes": 3100,
      "size_kb": 3.0,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 18.1
    },
    "core/interfaces/tools/dao/dao_propose.py": {
      "file_path": "core/interfaces/tools/dao/dao_propose.py",
      "category": "core_systems",
      "size_bytes": 2235,
      "size_kb": 2.2,
      "lines": 2,
      "imports": [
        "argparse",
        "json",
        "datetime.datetime",
        "os",
        "logging"
      ],
      "classes": [],
      "functions": [
        "submit_proposal",
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 16.2
    },
    "core/interfaces/tools/dao/dao_vote.py": {
      "file_path": "core/interfaces/tools/dao/dao_vote.py",
      "category": "core_systems",
      "size_bytes": 2014,
      "size_kb": 2.0,
      "lines": 2,
      "imports": [
        "argparse",
        "json",
        "os",
        "logging",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "cast_vote",
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 16.0
    },
    "core/interfaces/tools/security/session_logger.py": {
      "file_path": "core/interfaces/tools/security/session_logger.py",
      "category": "core_systems",
      "size_bytes": 3579,
      "size_kb": 3.5,
      "lines": 2,
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "json",
        "pathlib.Path",
        "os",
        "pytz"
      ],
      "classes": [],
      "functions": [
        "is_access_allowed",
        "log_session_event"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "core/interfaces/ui/components/audio_exporter.py": {
      "file_path": "core/interfaces/ui/components/audio_exporter.py",
      "category": "core_systems",
      "size_bytes": 5970,
      "size_kb": 5.8,
      "lines": 6,
      "imports": [
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "sys",
        "subprocess",
        "argparse",
        "os",
        "core.interfaces.voice.core.sayit.safe_subprocess_run",
        "core.interfaces.voice.core.sayit.SecurityError"
      ],
      "classes": [
        "SecurityError",
        "Args"
      ],
      "functions": [
        "generate_filename",
        "export_as_text_narration",
        "safe_subprocess_run",
        "get_env_var"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 21.0
    },
    "core/interfaces/ui/components/replay_graphs.py": {
      "file_path": "core/interfaces/ui/components/replay_graphs.py",
      "category": "core_systems",
      "size_bytes": 2678,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "streamlit",
        "json",
        "pandas",
        "collections.Counter",
        "core.utils.symbolic_utils.tier_label"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.7
    },
    "core/interfaces/ui/components/tier_visualizer.py": {
      "file_path": "core/interfaces/ui/components/tier_visualizer.py",
      "category": "core_systems",
      "size_bytes": 2162,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "streamlit",
        "json",
        "pandas"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.2
    },
    "core/interfaces/voice/listen.py": {
      "file_path": "core/interfaces/voice/listen.py",
      "category": "voice",
      "size_bytes": 2996,
      "size_kb": 2.9,
      "lines": 3,
      "imports": [
        "speech_recognition",
        "logging",
        "voice.lukhas_voice.speak",
        "traits.trait_manager.load_traits",
        "openai.OpenAI",
        "os",
        "datetime.datetime",
        "pathlib.Path",
        "json"
      ],
      "classes": [],
      "functions": [
        "listen_to_human",
        "gpt_symbolic_response",
        "loop_symbolic_conversation",
        "log_daily_entry"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 10.0
    },
    "core/interfaces/voice/voice_agent.py": {
      "file_path": "core/interfaces/voice/voice_agent.py",
      "category": "voice",
      "size_bytes": 1877,
      "size_kb": 1.8,
      "lines": 1,
      "imports": [
        "logging",
        "lukhas_core.emotional_state.get_tone",
        "lukhas_core.event_bus.subscribe",
        "utils.logging.log_event",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "speak"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [],
      "priority_score": 7.4
    },
    "core/memoria.py": {
      "file_path": "core/memoria.py",
      "category": "core_systems",
      "size_bytes": 2615,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "core/meta_learning/enhancement_system.py": {
      "file_path": "core/meta_learning/enhancement_system.py",
      "category": "learning",
      "size_bytes": 50879,
      "size_kb": 49.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "dataclasses.dataclass",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "EnhancementMode",
        "SystemIntegrationStatus",
        "MetaLearningEnhancementSystem"
      ],
      "functions": [
        "initialize_meta_learning_enhancement",
        "__init__",
        "discover_and_enhance_meta_learning_systems",
        "start_enhancement_operations",
        "run_enhancement_cycle",
        "get_comprehensive_status",
        "generate_enhancement_report",
        "integrate_with_collapse_engine",
        "integrate_with_intent_node",
        "integrate_with_voice_pack"
      ],
      "async_functions": [
        "initialize_meta_learning_enhancement",
        "discover_and_enhance_meta_learning_systems",
        "start_enhancement_operations",
        "run_enhancement_cycle",
        "get_comprehensive_status",
        "generate_enhancement_report",
        "integrate_with_collapse_engine",
        "integrate_with_intent_node",
        "integrate_with_voice_pack",
        "_enhance_individual_system",
        "_apply_monitoring_enhancement",
        "_apply_rate_optimization_enhancement",
        "_apply_symbolic_feedback_enhancement",
        "_apply_federation_enhancement",
        "_start_federated_operations",
        "_process_system_enhancement_cycle",
        "_generate_cross_system_insights",
        "_coordinate_federation_cycle",
        "_perform_cycle_ethical_audit",
        "_get_dashboard_status",
        "_get_rate_modulator_status",
        "_get_symbolic_feedback_status",
        "_get_federation_status",
        "_generate_executive_summary",
        "_generate_integration_analysis",
        "_generate_performance_analysis",
        "_generate_ethical_analysis",
        "_generate_federation_analysis",
        "_generate_recommendations",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 45.5
    },
    "core/meta_learning/remediator_agent.py": {
      "file_path": "core/meta_learning/remediator_agent.py",
      "category": "learning",
      "size_bytes": 50276,
      "size_kb": 49.1,
      "lines": 6,
      "imports": [
        "json",
        "time",
        "structlog",
        "numpy",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "RemediationLevel",
        "RemediationType",
        "RemediationEvent",
        "RemediatorAgent",
        "QuantumMemoryManager",
        "AdvancedMemoryManager",
        "LucasReplayer",
        "GlyphIDHasher",
        "MetaLearningMonitorDashboard",
        "DynamicLearningRateModulator"
      ],
      "functions": [
        "create_remediator_agent",
        "__init__",
        "_generate_agent_id",
        "_load_config",
        "_load_manifest",
        "_initialize_thresholds",
        "_setup_logging_structlog",
        "_log_agent_startup",
        "_generate_quantum_signature",
        "calculate_drift_score"
      ],
      "async_functions": [
        "start_autonomous_monitoring",
        "generate_test_metrics_async",
        "demo_remediator_agent_async"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 56.0
    },
    "core/net/client_event.py": {
      "file_path": "core/net/client_event.py",
      "category": "core_systems",
      "size_bytes": 519,
      "size_kb": 0.5,
      "lines": 1,
      "imports": [
        "typing"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 10.5
    },
    "core/neural_architectures/abas/abas_quantum_specialist.py": {
      "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
      "category": "quantum",
      "size_bytes": 38972,
      "size_kb": 38.1,
      "lines": 11,
      "imports": [
        "asyncio",
        "logging",
        "json",
        "numpy",
        "hashlib",
        "math",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "QuantumBioCapabilityLevel",
        "QuantumBioResponse",
        "QuantumTunnelingEthics",
        "ProtonMotiveProcessor",
        "CristaeTopologyManager",
        "QuantumBiologicalAGI"
      ],
      "functions": [
        "main",
        "__init__",
        "quantum_ethical_arbitration",
        "_create_ethical_wavefunction",
        "_collapse_wavefunction",
        "_calculate_relevance",
        "_calculate_tunneling_probabilities",
        "_calculate_ethical_resonance",
        "__init__",
        "create_attention_gradient"
      ],
      "async_functions": [
        "main",
        "integrate_with_ethics",
        "process_with_quantum_biology",
        "_generate_quantum_bio_response"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 47.5
    },
    "core/notion_sync.py": {
      "file_path": "core/notion_sync.py",
      "category": "core_systems",
      "size_bytes": 29850,
      "size_kb": 29.2,
      "lines": 28,
      "imports": [
        "os",
        "sys",
        "asyncio",
        "argparse",
        "pathlib.Path",
        "typing.Optional",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "json"
      ],
      "classes": [
        "LambdaLoggerAdapter"
      ],
      "functions": [
        "make_code_block",
        "make_toggle_block",
        "make_flat_block",
        "make_minimal_block",
        "generate_summary",
        "sync_to_notion_legacy",
        "log_audit_with_lid",
        "log_audit_with_lid",
        "run_legacy_streamlit_mode",
        "print_banner"
      ],
      "async_functions": [
        "run_sync_engine",
        "run_ui_mode"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 30.0
    },
    "core/observability/collector.py": {
      "file_path": "core/observability/collector.py",
      "category": "core_systems",
      "size_bytes": 1728,
      "size_kb": 1.7,
      "lines": 2,
      "imports": [
        "asyncio",
        "time",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "psutil"
      ],
      "classes": [
        "ActorMetric",
        "ObservabilityCollector"
      ],
      "functions": [
        "__init__",
        "start",
        "stop",
        "record_metric",
        "get_metrics",
        "_collect_system_metrics"
      ],
      "async_functions": [
        "_collect_system_metrics"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.7
    },
    "core/output/message_hub.py": {
      "file_path": "core/output/message_hub.py",
      "category": "core_systems",
      "size_bytes": 4876,
      "size_kb": 4.8,
      "lines": 2,
      "imports": [
        "streamlit",
        "lukhas_dna_link.LucasDNALink",
        "json",
        "hashlib"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.9
    },
    "core/p2p_fabric.py": {
      "file_path": "core/p2p_fabric.py",
      "category": "core_systems",
      "size_bytes": 3078,
      "size_kb": 3.0,
      "lines": 1,
      "imports": [
        "socket",
        "threading",
        "time"
      ],
      "classes": [
        "P2PNode"
      ],
      "functions": [
        "__init__",
        "_listen",
        "_handle_connection",
        "connect",
        "broadcast"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 19.6
    },
    "core/personality/creative_personality.py": {
      "file_path": "core/personality/creative_personality.py",
      "category": "core_systems",
      "size_bytes": 9523,
      "size_kb": 9.3,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "logging"
      ],
      "classes": [
        "LucasAGI",
        "MetaLearningSystem",
        "FederatedLearningManager",
        "ReflectiveIntrospectionSystem",
        "NeuroHaikuGenerator",
        "MetaDoodler",
        "EthicalProtestModule",
        "KnowledgeGraph",
        "HarmonyEngine"
      ],
      "functions": [
        "__init__",
        "unified_processing",
        "_select_models",
        "_multimodal_fusion",
        "_generate_output",
        "_attention_fusion",
        "_update_metrics",
        "_federated_update",
        "federated_lifecycle",
        "adaptive_learning_loop"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 46.5
    },
    "core/personality/creative_personality_clean.py": {
      "file_path": "core/personality/creative_personality_clean.py",
      "category": "core_systems",
      "size_bytes": 9925,
      "size_kb": 9.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "logging"
      ],
      "classes": [
        "LucasAGI",
        "MetaLearningSystem",
        "FederatedLearningManager",
        "ReflectiveIntrospectionSystem",
        "NeuroHaikuGenerator",
        "MetaDoodler",
        "EthicalProtestModule",
        "KnowledgeGraph",
        "HarmonyEngine"
      ],
      "functions": [
        "__init__",
        "unified_processing",
        "_select_models",
        "_multimodal_fusion",
        "_generate_output",
        "_attention_fusion",
        "_update_metrics",
        "_federated_update",
        "federated_lifecycle",
        "adaptive_learning_loop"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 46.5
    },
    "core/personality/personality.py": {
      "file_path": "core/personality/personality.py",
      "category": "core_systems",
      "size_bytes": 20264,
      "size_kb": 19.8,
      "lines": 1,
      "imports": [
        "time",
        "collections.defaultdict",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "InteractionContext",
        "CulturalStyle",
        "InteractionMetrics",
        "ShynessModule",
        "EtiquetteEngine",
        "PersonalityManager"
      ],
      "functions": [
        "get_personality_manager",
        "__init__",
        "update_shyness",
        "get_interaction_style",
        "__init__",
        "_initialize_context_rules",
        "set_cultural_preference",
        "get_etiquette_adjustments",
        "__init__",
        "get_personality_profile"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 36.0
    },
    "core/quantized_cycle_manager.py": {
      "file_path": "core/quantized_cycle_manager.py",
      "category": "core_systems",
      "size_bytes": 580,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog"
      ],
      "classes": [
        "QuantizedCycleManager"
      ],
      "functions": [
        "__init__",
        "start_cycle",
        "end_cycle"
      ],
      "async_functions": [
        "start_cycle",
        "end_cycle"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.1
    },
    "core/quorum_override.py": {
      "file_path": "core/quorum_override.py",
      "category": "core_systems",
      "size_bytes": 558,
      "size_kb": 0.5,
      "lines": 1,
      "imports": [
        "typing.List",
        "structlog"
      ],
      "classes": [
        "QuorumOverride"
      ],
      "functions": [
        "__init__",
        "request_access"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.6
    },
    "core/rem/sleep_cycle.py": {
      "file_path": "core/rem/sleep_cycle.py",
      "category": "core_systems",
      "size_bytes": 1014,
      "size_kb": 1.0,
      "lines": 1,
      "imports": [
        "modules.memoria.log_trace",
        "modules.fold_token.fold_trace",
        "modules.dream_seed.seed_dream",
        "creativity.dream_systems.dream_log.dream_logger"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 11.0
    },
    "core/rem/visualizer.py": {
      "file_path": "core/rem/visualizer.py",
      "category": "core_systems",
      "size_bytes": 2426,
      "size_kb": 2.4,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.4
    },
    "core/resource_efficiency.py": {
      "file_path": "core/resource_efficiency.py",
      "category": "core_systems",
      "size_bytes": 1415,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "psutil"
      ],
      "classes": [
        "ResourceEfficiencyAnalyzer"
      ],
      "functions": [
        "get_resource_efficiency_table",
        "collect_metrics"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.4
    },
    "core/resource_efficiency_analyzer.py": {
      "file_path": "core/resource_efficiency_analyzer.py",
      "category": "core_systems",
      "size_bytes": 39851,
      "size_kb": 38.9,
      "lines": 6,
      "imports": [
        "gc",
        "json",
        "logging",
        "os",
        "platform",
        "psutil",
        "resource",
        "sys",
        "threading",
        "time"
      ],
      "classes": [
        "ResourceType",
        "ResourceSnapshot",
        "ResourceTrend",
        "EfficiencyReport",
        "ResourceEfficiencyAnalyzer"
      ],
      "functions": [
        "to_dict",
        "to_json",
        "__init__",
        "_estimate_cpu_tdp",
        "start_monitoring",
        "stop_monitoring",
        "_monitoring_loop",
        "_capture_snapshot",
        "_estimate_energy_consumption",
        "analyze_efficiency"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 42.5
    },
    "core/router/llm_multiverse_router.py": {
      "file_path": "core/router/llm_multiverse_router.py",
      "category": "core_systems",
      "size_bytes": 2151,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "os",
        "uuid",
        "datetime.datetime",
        "typing.Literal",
        "openai",
        "bridge.llm_wrappers.openai_wrapper.OpenaiWrapper",
        "bridge.llm_wrappers.anthropic_wrapper.AnthropicWrapper",
        "bridge.llm_wrappers.gemini_wrapper.GeminiWrapper",
        "bridge.llm_wrappers.perplexity_wrapper.PerplexityWrapper",
        "bridge.llm_wrappers.azure_openai_wrapper.AzureOpenaiWrapper"
      ],
      "classes": [],
      "functions": [
        "multiverse_route"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.7
    },
    "core/services/location/tracker.py": {
      "file_path": "core/services/location/tracker.py",
      "category": "core_systems",
      "size_bytes": 7578,
      "size_kb": 7.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Optional",
        "typing.Callable",
        "typing.Dict",
        "typing.List",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "math"
      ],
      "classes": [
        "LocationUpdate",
        "LocationTracker"
      ],
      "functions": [
        "__init__",
        "start_tracking",
        "stop_tracking",
        "update_location",
        "_should_update_location",
        "_calculate_distance",
        "_notify_callbacks",
        "add_update_callback",
        "remove_update_callback",
        "get_current_location"
      ],
      "async_functions": [
        "start_tracking",
        "stop_tracking",
        "update_location",
        "_notify_callbacks",
        "get_current_location",
        "get_location_history",
        "clear_history",
        "set_privacy_level",
        "get_privacy_status"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 30.0
    },
    "core/services/personality/empathy.py": {
      "file_path": "core/services/personality/empathy.py",
      "category": "core_systems",
      "size_bytes": 3508,
      "size_kb": 3.4,
      "lines": 3,
      "imports": [
        "typing.TYPE_CHECKING",
        "orchestration.brain.spine.trait_manager.load_traits",
        "symbolic.lukhas_voice.speak"
      ],
      "classes": [],
      "functions": [
        "generate_empathic_response",
        "trait_bar",
        "display_visual_traits"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "core/services/personality/personas.py": {
      "file_path": "core/services/personality/personas.py",
      "category": "core_systems",
      "size_bytes": 1641,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "load_persona"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.1
    },
    "core/specialized_colonies.py": {
      "file_path": "core/specialized_colonies.py",
      "category": "core_systems",
      "size_bytes": 888,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [
        "core.swarm.AgentColony"
      ],
      "classes": [
        "ReasoningColony",
        "MemoryColony",
        "CreativityColony"
      ],
      "functions": [
        "__init__",
        "__init__",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 20.4
    },
    "core/spine/emotion_mapper_alt.py": {
      "file_path": "core/spine/emotion_mapper_alt.py",
      "category": "core_systems",
      "size_bytes": 2678,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.7
    },
    "core/state_management.py": {
      "file_path": "core/state_management.py",
      "category": "core_systems",
      "size_bytes": 2736,
      "size_kb": 2.7,
      "lines": 2,
      "imports": [
        "json",
        "os"
      ],
      "classes": [
        "StateManager"
      ],
      "functions": [
        "__init__",
        "_load_latest_snapshot",
        "_replay_events",
        "apply_event",
        "log_event",
        "take_snapshot"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 19.7
    },
    "core/swarm_visualizer.py": {
      "file_path": "core/swarm_visualizer.py",
      "category": "core_systems",
      "size_bytes": 2589,
      "size_kb": 2.5,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "core/symbolic_arbitration.py": {
      "file_path": "core/symbolic_arbitration.py",
      "category": "core_systems",
      "size_bytes": 2292,
      "size_kb": 2.2,
      "lines": 2,
      "imports": [
        "collections.defaultdict"
      ],
      "classes": [
        "TagConflictResolver",
        "TagLineageTracker"
      ],
      "functions": [
        "__init__",
        "resolve",
        "_majority_rule",
        "_seniority_based",
        "__init__",
        "add_event",
        "get_history"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 21.8
    },
    "core/symbolic_bridge/integrator.py": {
      "file_path": "core/symbolic_bridge/integrator.py",
      "category": "bridge_integration",
      "size_bytes": 1097,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "structlog"
      ],
      "classes": [
        "SymbolicBridgeIntegrator"
      ],
      "functions": [
        "__init__",
        "route_symbolic_event"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 16.1
    },
    "core/symbolic_bridge/token_map.py": {
      "file_path": "core/symbolic_bridge/token_map.py",
      "category": "bridge_integration",
      "size_bytes": 3184,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [
        "structlog",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "BridgeTokenMap"
      ],
      "functions": [
        "__init__",
        "add_mapping",
        "get_mapping",
        "get_schema"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 19.2
    },
    "core/symbolic_contract.py": {
      "file_path": "core/symbolic_contract.py",
      "category": "core_systems",
      "size_bytes": 3908,
      "size_kb": 3.8,
      "lines": 1,
      "imports": [
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "json",
        "dataclasses.asdict"
      ],
      "classes": [
        "SymbolicContract",
        "SymbolicContractRegistry"
      ],
      "functions": [
        "validate_propagation",
        "validate_payload",
        "__init__",
        "register",
        "get",
        "to_json"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 22.9
    },
    "core/targeted_api_fixes.py": {
      "file_path": "core/targeted_api_fixes.py",
      "category": "core_systems",
      "size_bytes": 10960,
      "size_kb": 10.7,
      "lines": 18,
      "imports": [
        "re",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple"
      ],
      "classes": [],
      "functions": [
        "apply_actor_ref_fixes",
        "fix_communication_fabric",
        "fix_integrated_system",
        "update_validation_script",
        "main",
        "add_total_messages",
        "add_send_large_data",
        "fix_import"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 26.0
    },
    "core/unified_bot.py": {
      "error": "File not found",
      "file_path": "core/unified_bot.py"
    },
    "core/utils/dream_utils.py": {
      "file_path": "core/utils/dream_utils.py",
      "category": "core_systems",
      "size_bytes": 2840,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "sys",
        "os",
        "datetime.datetime",
        "modules.dream_seed.seed_dream",
        "modules.alignment_score.AlignmentMetrics",
        "json",
        "pathlib.Path",
        "json"
      ],
      "classes": [],
      "functions": [
        "load_dreams",
        "get_latest_dream_timestamp",
        "filter_dreams_by_tag",
        "filter_dreams",
        "filter_by_rem_phase",
        "filter_by_collapse",
        "filter_by_resonance"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.3
    },
    "core/validation.py": {
      "file_path": "core/validation.py",
      "category": "core_systems",
      "size_bytes": 20497,
      "size_kb": 20.0,
      "lines": 16,
      "imports": [
        "asyncio",
        "sys",
        "time",
        "os",
        "pathlib.Path",
        "logging",
        "traceback",
        "core.automatic_testing_system.run",
        "core.automatic_testing_system.watch",
        "core.automatic_testing_system.report"
      ],
      "classes": [],
      "functions": [
        "main"
      ],
      "async_functions": [
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 20.5
    },
    "core/validation_script_fixes.py": {
      "file_path": "core/validation_script_fixes.py",
      "category": "core_systems",
      "size_bytes": 6323,
      "size_kb": 6.2,
      "lines": 17,
      "imports": [
        "re",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "fix_validation_script",
        "fix_efficient_communication",
        "main",
        "replace_send_message",
        "add_message_count",
        "add_counter_increment"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 23.0
    },
    "core/working_bot.py": {
      "error": "File not found",
      "file_path": "core/working_bot.py"
    },
    "identity/api/api.py": {
      "file_path": "identity/api/api.py",
      "category": "identity",
      "size_bytes": 34856,
      "size_kb": 34.0,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "datetime.datetime",
        "time",
        "os",
        "enum.Enum"
      ],
      "classes": [
        "UserProfileRequest",
        "SymbolicAuthRequest",
        "QRGGenerationRequest",
        "QRGValidationRequest",
        "VaultUpdateRequest",
        "BiometricEnrollRequest",
        "BiometricVerifyRequest",
        "LukhasUnifiedAPI",
        "BaseModel",
        "QRSManager",
        "LambdaTierManager",
        "BiometricIntegrationManager",
        "QRGType"
      ],
      "functions": [
        "get_lukhas_unified_api_app",
        "__init__",
        "_setup_fastapi_middleware",
        "_setup_fastapi_routes",
        "_create_lambda_id_endpoint_impl",
        "_authenticate_symbolic_endpoint_impl",
        "_get_profile_endpoint_impl",
        "_update_vault_endpoint_impl",
        "_generate_qrg_endpoint_impl",
        "_validate_qrg_endpoint_impl"
      ],
      "async_functions": [
        "_create_lambda_id_endpoint_impl",
        "_authenticate_symbolic_endpoint_impl",
        "_get_profile_endpoint_impl",
        "_update_vault_endpoint_impl",
        "_generate_qrg_endpoint_impl",
        "_validate_qrg_endpoint_impl",
        "_get_tier_info_endpoint_impl",
        "_upgrade_tier_endpoint_impl",
        "_enroll_biometric_endpoint_impl",
        "_verify_biometric_endpoint_impl",
        "_get_enrolled_biometrics_endpoint_impl",
        "_get_analytics_endpoint_impl",
        "_get_system_stats_endpoint_impl",
        "create_lambda_id_route",
        "authenticate_symbolic_route",
        "get_lambda_id_profile_route",
        "health_check_route"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 60.5
    },
    "identity/api/auth/flows.py": {
      "file_path": "identity/api/auth/flows.py",
      "category": "identity",
      "size_bytes": 7624,
      "size_kb": 7.4,
      "lines": 1,
      "imports": [
        "logging",
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify"
      ],
      "classes": [],
      "functions": [
        "register_user_endpoint",
        "login_user_endpoint",
        "logout_user_endpoint",
        "verify_authentication_token_endpoint"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "identity/api/auth/onboarding.py": {
      "file_path": "identity/api/auth/onboarding.py",
      "category": "identity",
      "size_bytes": 7505,
      "size_kb": 7.3,
      "lines": 1,
      "imports": [
        "logging",
        "time",
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify"
      ],
      "classes": [],
      "functions": [
        "start_onboarding_endpoint",
        "setup_user_tier_endpoint",
        "collect_user_consent_endpoint",
        "complete_onboarding_process_endpoint"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "identity/api/onboarding_api.py": {
      "file_path": "identity/api/onboarding_api.py",
      "category": "identity",
      "size_bytes": 27271,
      "size_kb": 26.6,
      "lines": 1,
      "imports": [
        "flask.Flask",
        "flask.request",
        "flask.jsonify",
        "flask.session",
        "logging",
        "time",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "EnhancedOnboardingManager"
      ],
      "functions": [
        "_generate_request_id",
        "start_enhanced_onboarding_endpoint",
        "progress_onboarding_stage_endpoint",
        "complete_enhanced_onboarding_endpoint",
        "get_onboarding_status_endpoint",
        "get_personality_templates_endpoint",
        "get_cultural_templates_endpoint",
        "get_symbolic_suggestions_endpoint",
        "__init__",
        "start_onboarding_session"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 24.0
    },
    "identity/auth/cognitive_sync_adapter.py": {
      "file_path": "identity/auth/cognitive_sync_adapter.py",
      "category": "identity",
      "size_bytes": 1897,
      "size_kb": 1.9,
      "lines": 1,
      "imports": [],
      "classes": [
        "CognitiveSyncAdapter"
      ],
      "functions": [
        "__init__",
        "adjust_sync_rate",
        "detect_anomalies",
        "predict_sync_rate",
        "validate_sync_rate"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.4
    },
    "identity/auth/qrg_generators.py": {
      "file_path": "identity/auth/qrg_generators.py",
      "category": "identity",
      "size_bytes": 37593,
      "size_kb": 36.7,
      "lines": 7,
      "imports": [
        "qrcode",
        "numpy",
        "json",
        "time",
        "random",
        "secrets",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "QRGType",
        "ConsciousnessQRPattern",
        "CulturalQRTheme",
        "ConsciousnessQRGenerator",
        "CulturalQRGenerator",
        "SteganographicQRGenerator",
        "QuantumQRGenerator",
        "LUKHASQRGManager"
      ],
      "functions": [
        "__init__",
        "generate_consciousness_qr",
        "_calculate_pattern_complexity",
        "_generate_neural_signature",
        "_apply_consciousness_styling",
        "_get_consciousness_color",
        "_apply_neural_overlay",
        "__init__",
        "generate_cultural_qr",
        "_validate_cultural_safety"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 47.0
    },
    "identity/auth_backend/authentication_server.py": {
      "file_path": "identity/auth_backend/authentication_server.py",
      "category": "identity",
      "size_bytes": 40411,
      "size_kb": 39.5,
      "lines": 2,
      "imports": [
        "asyncio",
        "websockets",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "DataProcessingBasis",
        "DataSubjectRight",
        "UserPrivacyProfile",
        "AuthenticationServer"
      ],
      "functions": [
        "__init__",
        "start_server",
        "handle_client_connection",
        "create_authentication_session",
        "validate_authentication_request",
        "verify_entropy_packet",
        "expire_sessions",
        "expire_session",
        "track_entropy_reliability",
        "get_recent_auth_count"
      ],
      "async_functions": [
        "start_server",
        "handle_client_connection",
        "initialize_user_privacy_profile",
        "update_user_consent",
        "handle_data_subject_request",
        "_handle_access_request",
        "_handle_erasure_request",
        "_handle_portability_request",
        "handle_ccpa_consumer_request",
        "_handle_ccpa_opt_out_sale",
        "get_compliance_status",
        "_cleanup_expired_privacy_data",
        "server_handler",
        "cleanup_task"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 37.5
    },
    "identity/auth_backend/cross_device_handshake.py": {
      "file_path": "identity/auth_backend/cross_device_handshake.py",
      "category": "identity",
      "size_bytes": 7351,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "nacl.signing",
        "utils.replay_protection.ReplayProtection",
        "utils.shared_logging.get_logger",
        "time"
      ],
      "classes": [
        "CrossDeviceHandshake"
      ],
      "functions": [
        "__init__",
        "fingerprint_device",
        "calculate_trust_score",
        "link_session",
        "expire_stale_sessions",
        "refresh_session",
        "renegotiate_session_keys",
        "resolve_conflict",
        "get_session",
        "generate_session_keys"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 21.0
    },
    "identity/auth_backend/entropy_health_api.py": {
      "file_path": "identity/auth_backend/entropy_health_api.py",
      "category": "identity",
      "size_bytes": 7500,
      "size_kb": 7.3,
      "lines": 1,
      "imports": [
        "flask.Flask",
        "flask.jsonify",
        "flask.request",
        "flask_limiter.Limiter",
        "flask_limiter.util.get_remote_address",
        "flask_socketio.SocketIO",
        "flask_socketio.emit",
        "threading",
        "time",
        "logging"
      ],
      "classes": [],
      "functions": [
        "get_entropy_status",
        "get_trust_scores",
        "get_sync_status",
        "get_trust_score_session",
        "background_health_monitor",
        "handle_dashboard_connect",
        "handle_dashboard_disconnect",
        "handle_health_snapshot_request",
        "start_background_monitor"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 14.5
    },
    "identity/auth_backend/multi_user_sync.py": {
      "file_path": "identity/auth_backend/multi_user_sync.py",
      "category": "identity",
      "size_bytes": 3255,
      "size_kb": 3.2,
      "lines": 1,
      "imports": [
        "utils.shared_logging.get_logger"
      ],
      "classes": [
        "MultiUserSync"
      ],
      "functions": [
        "__init__",
        "add_user",
        "update_entropy",
        "validate_entropy",
        "quorum_arbitration",
        "cross_validate_entropy"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.3
    },
    "identity/auth_backend/qr_entropy_generator.py": {
      "file_path": "identity/auth_backend/qr_entropy_generator.py",
      "category": "identity",
      "size_bytes": 3080,
      "size_kb": 3.0,
      "lines": 1,
      "imports": [
        "qrcode",
        "numpy",
        "hashlib",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "PIL.Image"
      ],
      "classes": [
        "QREntropyGenerator"
      ],
      "functions": [
        "__init__",
        "generate_authentication_qr",
        "embed_steganographic_layers",
        "validate_qr_scan"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 14.1
    },
    "identity/auth_backend/webrtc_peer_sync.py": {
      "file_path": "identity/auth_backend/webrtc_peer_sync.py",
      "category": "identity",
      "size_bytes": 3296,
      "size_kb": 3.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "pqc_crypto_engine.PQCCryptoEngine",
        "audit_logger.AuditLogger",
        "utils.shared_logging.get_logger"
      ],
      "classes": [
        "WebRTCPeerSync"
      ],
      "functions": [
        "__init__",
        "connect_to_peer",
        "sync_entropy",
        "_send_signaling_request"
      ],
      "async_functions": [
        "connect_to_peer",
        "sync_entropy",
        "_send_signaling_request"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 16.3
    },
    "identity/auth_utils/attention_monitor.py": {
      "file_path": "identity/auth_utils/attention_monitor.py",
      "category": "identity",
      "size_bytes": 21709,
      "size_kb": 21.2,
      "lines": 1,
      "imports": [
        "time",
        "math",
        "statistics",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta"
      ],
      "classes": [
        "AttentionState",
        "InputModality",
        "AttentionMetrics",
        "EyeTrackingData",
        "InputEvent",
        "AttentionMonitor"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "start_attention_monitoring",
        "_initialize_eye_tracking",
        "_calibrate_baseline",
        "process_eye_tracking_data",
        "_analyze_eye_movement_patterns",
        "_calculate_attention_from_eye_data",
        "process_input_event",
        "_analyze_input_lag"
      ],
      "async_functions": [
        "start_attention_monitoring",
        "_initialize_eye_tracking",
        "_calibrate_baseline"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 33.5
    },
    "identity/auth_utils/cognitive_load_estimator.py": {
      "file_path": "identity/auth_utils/cognitive_load_estimator.py",
      "category": "identity",
      "size_bytes": 26289,
      "size_kb": 25.7,
      "lines": 1,
      "imports": [
        "time",
        "math",
        "statistics",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta"
      ],
      "classes": [
        "CognitiveLoadLevel",
        "CognitiveTask",
        "CognitiveIndicators",
        "CognitiveLoadAssessment",
        "CognitiveLoadEstimator"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "_initialize_adaptation_rules",
        "initialize_baseline",
        "_parse_calibration_data",
        "_calculate_personal_thresholds",
        "assess_cognitive_load",
        "_extract_cognitive_indicators",
        "_estimate_stress_level",
        "_estimate_fatigue_level"
      ],
      "async_functions": [
        "initialize_baseline"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 33.0
    },
    "identity/auth_utils/cultural_safety_checker.py": {
      "file_path": "identity/auth_utils/cultural_safety_checker.py",
      "category": "identity",
      "size_bytes": 23568,
      "size_kb": 23.0,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Any",
        "enum.Enum",
        "dataclasses.dataclass"
      ],
      "classes": [
        "CulturalContext",
        "SensitivityLevel",
        "ValidationResult",
        "CulturalRule",
        "ValidationReport",
        "CulturalSafetyChecker"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "_initialize_cultural_rules",
        "_initialize_regional_preferences",
        "_initialize_context_rules",
        "_initialize_safe_emoji_sets",
        "validate_emoji_set",
        "_validate_single_emoji",
        "_should_approve_context_dependent",
        "_calculate_safety_score"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 32.0
    },
    "identity/auth_utils/grid_size_calculator.py": {
      "file_path": "identity/auth_utils/grid_size_calculator.py",
      "category": "identity",
      "size_bytes": 24675,
      "size_kb": 24.1,
      "lines": 1,
      "imports": [
        "math",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "enum.Enum",
        "dataclasses.dataclass",
        "logging"
      ],
      "classes": [
        "GridPattern",
        "SizingMode",
        "ScreenDimensions",
        "GridConstraints",
        "GridCalculationResult",
        "GridSizeCalculator"
      ],
      "functions": [
        "__init__",
        "_get_default_config",
        "calculate_optimal_grid_size",
        "_calculate_base_grid_size",
        "_apply_cognitive_load_adjustment",
        "_apply_screen_constraints",
        "_apply_accessibility_adjustments",
        "_calculate_optimal_layout",
        "_determine_grid_pattern",
        "_calculate_rectangular_layout"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 31.5
    },
    "identity/auth_utils/replay_protection.py": {
      "file_path": "identity/auth_utils/replay_protection.py",
      "category": "identity",
      "size_bytes": 2360,
      "size_kb": 2.3,
      "lines": 1,
      "imports": [
        "collections.deque",
        "time",
        "utils.shared_logging.get_logger"
      ],
      "classes": [
        "ReplayProtection"
      ],
      "functions": [
        "__init__",
        "add_nonce",
        "is_replay",
        "_expire_old_nonces"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.4
    },
    "identity/backend/app/admin_tools.py": {
      "file_path": "identity/backend/app/admin_tools.py",
      "category": "identity",
      "size_bytes": 1752,
      "size_kb": 1.7,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "backend.app.tier_manager.upgrade_tier",
        "backend.app.tier_manager.downgrade_tier",
        "backend.app.token_handler.create_access_token"
      ],
      "classes": [],
      "functions": [
        "force_upgrade",
        "force_downgrade",
        "generate_admin_token"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.3
    },
    "identity/backend/app/analytics_engine.py": {
      "file_path": "identity/backend/app/analytics_engine.py",
      "category": "identity",
      "size_bytes": 1282,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "record_event",
        "get_user_analytics",
        "get_aggregate_events"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.8
    },
    "identity/backend/app/auth.py": {
      "file_path": "identity/backend/app/auth.py",
      "category": "identity",
      "size_bytes": 1629,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Form",
        "backend.app.id_generator.generate_lucas_id",
        "backend.app.id_generator.generate_username_slug",
        "backend.app.emailer.send_welcome_email"
      ],
      "classes": [],
      "functions": [
        "signup"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.1
    },
    "identity/backend/app/badge_manager.py": {
      "file_path": "identity/backend/app/badge_manager.py",
      "category": "identity",
      "size_bytes": 1476,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "datetime.datetime",
        "json",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "assign_badge",
        "list_available_badges"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.5
    },
    "identity/backend/app/cloud_bridge_manager.py": {
      "file_path": "identity/backend/app/cloud_bridge_manager.py",
      "category": "identity",
      "size_bytes": 3126,
      "size_kb": 3.1,
      "lines": 2,
      "imports": [
        "os",
        "shutil",
        "pathlib.Path",
        "datetime.datetime",
        "backend.app.cloud_storage.save_file_to_storage"
      ],
      "classes": [],
      "functions": [
        "upload_to_bridge",
        "sync_from_bridge",
        "list_bridge_assets",
        "register_device"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 10.1
    },
    "identity/backend/app/cloud_storage_policy.py": {
      "file_path": "identity/backend/app/cloud_storage_policy.py",
      "category": "identity",
      "size_bytes": 2166,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "get_quota_for_tier",
        "get_default_retention_period",
        "get_inactive_cleanup_period"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.7
    },
    "identity/backend/app/context_manager.py": {
      "file_path": "identity/backend/app/context_manager.py",
      "category": "identity",
      "size_bytes": 1319,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "build_context",
        "get_context"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.3
    },
    "identity/backend/app/device_registry.py": {
      "file_path": "identity/backend/app/device_registry.py",
      "category": "identity",
      "size_bytes": 1674,
      "size_kb": 1.6,
      "lines": 2,
      "imports": [
        "json",
        "pathlib.Path",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "register_device",
        "get_user_devices"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.7
    },
    "identity/backend/app/encryption_core.py": {
      "file_path": "identity/backend/app/encryption_core.py",
      "category": "identity",
      "size_bytes": 2394,
      "size_kb": 2.3,
      "lines": 1,
      "imports": [
        "Crypto.Cipher.AES",
        "Crypto.Random.get_random_bytes",
        "hashlib.sha256"
      ],
      "classes": [],
      "functions": [
        "generate_key",
        "encrypt",
        "decrypt"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "identity/backend/app/external_authenticator.py": {
      "file_path": "identity/backend/app/external_authenticator.py",
      "category": "identity",
      "size_bytes": 2609,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "initiate_external_auth",
        "confirm_external_auth",
        "list_active_auth_services"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 12.1
    },
    "identity/backend/app/game_state_bridge.py": {
      "file_path": "identity/backend/app/game_state_bridge.py",
      "category": "identity",
      "size_bytes": 2612,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "os",
        "shutil",
        "pathlib.Path",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "archive_game_state",
        "list_user_game_states"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.6
    },
    "identity/backend/app/incident_reporter.py": {
      "file_path": "identity/backend/app/incident_reporter.py",
      "category": "identity",
      "size_bytes": 1547,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "detect_suspicious_activity",
        "report_incident",
        "get_all_incidents"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.0
    },
    "identity/backend/app/journey_log_manager.py": {
      "file_path": "identity/backend/app/journey_log_manager.py",
      "category": "identity",
      "size_bytes": 2279,
      "size_kb": 2.2,
      "lines": 2,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "record_journey_event",
        "get_user_journey_logs"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.3
    },
    "identity/backend/app/logs.py": {
      "file_path": "identity/backend/app/logs.py",
      "category": "identity",
      "size_bytes": 949,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "backend.app.logs_api.get_all_session_logs",
        "backend.app.audit_logger.get_audit_logs",
        "backend.app.email_logs.get_all_email_logs"
      ],
      "classes": [],
      "functions": [
        "get_all_logs_combined"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.4
    },
    "identity/backend/app/qrglyph_generator.py": {
      "file_path": "identity/backend/app/qrglyph_generator.py",
      "category": "identity",
      "size_bytes": 998,
      "size_kb": 1.0,
      "lines": 1,
      "imports": [
        "qrcode",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "generate_qrglyph"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.5
    },
    "identity/backend/app/replay_manager.py": {
      "file_path": "identity/backend/app/replay_manager.py",
      "category": "identity",
      "size_bytes": 1590,
      "size_kb": 1.6,
      "lines": 2,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "add_replay_entry",
        "get_replay_entries"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.6
    },
    "identity/backend/app/session_manager.py": {
      "file_path": "identity/backend/app/session_manager.py",
      "category": "identity",
      "size_bytes": 1637,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "datetime.datetime",
        "uuid"
      ],
      "classes": [],
      "functions": [
        "create_session",
        "get_session",
        "invalidate_session"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.1
    },
    "identity/backend/app/tests.py": {
      "file_path": "identity/backend/app/tests.py",
      "category": "identity",
      "size_bytes": 876,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "subprocess"
      ],
      "classes": [],
      "functions": [
        "run_symbolic_tests"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.4
    },
    "identity/backend/app/users.py": {
      "file_path": "identity/backend/app/users.py",
      "category": "identity",
      "size_bytes": 1165,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "backend.database.models.User",
        "backend.database.crud.get_user_by_slug"
      ],
      "classes": [],
      "functions": [
        "get_user_profile"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.7
    },
    "identity/backend/app/vault.py": {
      "file_path": "identity/backend/app/vault.py",
      "category": "identity",
      "size_bytes": 2686,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.File",
        "fastapi.UploadFile",
        "fastapi.Form",
        "fastapi.HTTPException",
        "fastapi.responses.JSONResponse",
        "pathlib.Path",
        "datetime.datetime",
        "shutil",
        "os"
      ],
      "classes": [],
      "functions": [
        "upload_vault_entry",
        "test_vault_route"
      ],
      "async_functions": [
        "upload_vault_entry"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Uses events/messages - connect to message bus",
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 10.7
    },
    "identity/backend/app/vault_downloads.py": {
      "file_path": "identity/backend/app/vault_downloads.py",
      "category": "identity",
      "size_bytes": 1049,
      "size_kb": 1.0,
      "lines": 1,
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.responses.FileResponse",
        "os"
      ],
      "classes": [],
      "functions": [
        "download_vault_file"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.5
    },
    "identity/backend/dao/dao_core.py": {
      "file_path": "identity/backend/dao/dao_core.py",
      "category": "identity",
      "size_bytes": 2505,
      "size_kb": 2.4,
      "lines": 1,
      "imports": [
        "json",
        "os",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "load_registry",
        "evaluate_proposal"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.5
    },
    "identity/backend/dao/log_viewer.py": {
      "file_path": "identity/backend/dao/log_viewer.py",
      "category": "identity",
      "size_bytes": 1650,
      "size_kb": 1.6,
      "lines": 3,
      "imports": [
        "json",
        "argparse",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "load_logs",
        "print_log"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.7
    },
    "identity/backend/database/crud.py": {
      "file_path": "identity/backend/database/crud.py",
      "category": "identity",
      "size_bytes": 1085,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "sqlalchemy.orm.Session",
        "models.User"
      ],
      "classes": [],
      "functions": [
        "get_user_by_slug",
        "get_user_by_email",
        "create_user"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.6
    },
    "identity/backend/database/trust_sharing_manager.py": {
      "file_path": "identity/backend/database/trust_sharing_manager.py",
      "category": "identity",
      "size_bytes": 2417,
      "size_kb": 2.4,
      "lines": 2,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "initiate_vault_share",
        "list_trust_shares_for_user"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.4
    },
    "identity/backend/dream_engine/assistant.py": {
      "file_path": "identity/backend/dream_engine/assistant.py",
      "category": "identity",
      "size_bytes": 4487,
      "size_kb": 4.4,
      "lines": 4,
      "imports": [
        "os",
        "openai.OpenAI",
        "time",
        "json",
        "pathlib.Path",
        "subprocess",
        "uuid",
        "speech_recognition",
        "argparse"
      ],
      "classes": [
        "LanguageModelChatMessage"
      ],
      "functions": [
        "generate_dream_response",
        "log_to_queue",
        "prompt_text_input",
        "listen_to_microphone",
        "run_assistant",
        "User"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 14.5
    },
    "identity/backend/dream_engine/dream_injector.py": {
      "file_path": "identity/backend/dream_engine/dream_injector.py",
      "category": "identity",
      "size_bytes": 2378,
      "size_kb": 2.3,
      "lines": 1,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "create_dream_proposal"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.9
    },
    "identity/backend/dream_engine/dream_log_viewer.py": {
      "file_path": "identity/backend/dream_engine/dream_log_viewer.py",
      "category": "identity",
      "size_bytes": 3447,
      "size_kb": 3.4,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.4
    },
    "identity/backend/dream_engine/dream_narrator_queue.py": {
      "file_path": "identity/backend/dream_engine/dream_narrator_queue.py",
      "category": "identity",
      "size_bytes": 2796,
      "size_kb": 2.7,
      "lines": 2,
      "imports": [
        "json",
        "pathlib.Path",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "load_dreams",
        "filter_narratable_dreams",
        "save_to_queue",
        "run_narration_queue_builder"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 9.8
    },
    "identity/backend/dream_engine/dream_replay.py": {
      "file_path": "identity/backend/dream_engine/dream_replay.py",
      "category": "identity",
      "size_bytes": 5848,
      "size_kb": 5.7,
      "lines": 9,
      "imports": [
        "json",
        "pathlib.Path",
        "sys"
      ],
      "classes": [],
      "functions": [
        "replay_approved_dreams",
        "replay_recent_dreams",
        "replay_dream_by_id"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.5
    },
    "identity/backend/dream_engine/dream_seed_vote.py": {
      "file_path": "identity/backend/dream_engine/dream_seed_vote.py",
      "category": "identity",
      "size_bytes": 1988,
      "size_kb": 1.9,
      "lines": 1,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "cast_symbolic_vote"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.5
    },
    "identity/backend/dream_engine/dream_summary_generator.py": {
      "file_path": "identity/backend/dream_engine/dream_summary_generator.py",
      "category": "identity",
      "size_bytes": 3603,
      "size_kb": 3.5,
      "lines": 2,
      "imports": [
        "json",
        "os",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "generate_poetic_summary",
        "summarize_dream_log"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 9.6
    },
    "identity/backend/dream_engine/html_social_generator.py": {
      "file_path": "identity/backend/dream_engine/html_social_generator.py",
      "category": "identity",
      "size_bytes": 2654,
      "size_kb": 2.6,
      "lines": 2,
      "imports": [
        "os",
        "json",
        "subprocess",
        "datetime.datetime",
        "html"
      ],
      "classes": [],
      "functions": [
        "generate_social_card"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.2
    },
    "identity/backend/dream_engine/narration_controller.py": {
      "file_path": "identity/backend/dream_engine/narration_controller.py",
      "category": "identity",
      "size_bytes": 1146,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "pathlib.Path",
        "json"
      ],
      "classes": [],
      "functions": [
        "fetch_narration_entries",
        "load_user_settings",
        "filter_narration_queue"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.6
    },
    "identity/backend/qrglyphs/qrglymph_public.py": {
      "file_path": "identity/backend/qrglyphs/qrglymph_public.py",
      "category": "identity",
      "size_bytes": 4545,
      "size_kb": 4.4,
      "lines": 1,
      "imports": [
        "os",
        "json",
        "base64",
        "argparse",
        "pathlib.Path",
        "cryptography.fernet.Fernet",
        "segno"
      ],
      "classes": [],
      "functions": [
        "generate_key",
        "encrypt_file",
        "save_encrypted_file",
        "mock_ipfs_upload",
        "generate_qr_code",
        "create_qrglyph"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 12.5
    },
    "identity/backend/seedra/ethics/seedra_ethics_engine.py": {
      "file_path": "identity/backend/seedra/ethics/seedra_ethics_engine.py",
      "category": "identity",
      "size_bytes": 7153,
      "size_kb": 7.0,
      "lines": 4,
      "imports": [
        "secrets",
        "cryptography.hazmat.primitives.hashes",
        "cryptography.hazmat.primitives.serialization",
        "cryptography.hazmat.primitives.asymmetric.ed25519",
        "base64"
      ],
      "classes": [
        "SEEDRAv3Ethics",
        "QuantumOptimizer"
      ],
      "functions": [
        "__init__",
        "validate_action",
        "_calculate_risk",
        "_determine_tier",
        "_sign_validation",
        "__init__",
        "quantum_anneal_trauma",
        "_anneal"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 20.0
    },
    "identity/backend/seedra/vault/seedra_registry.py": {
      "file_path": "identity/backend/seedra/vault/seedra_registry.py",
      "category": "identity",
      "size_bytes": 3174,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [
        "typing.Optional"
      ],
      "classes": [],
      "functions": [
        "get_user_tier",
        "set_user_tier"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 9.2
    },
    "identity/backend/seedra/vault/seedra_vault_manager.py": {
      "file_path": "identity/backend/seedra/vault/seedra_vault_manager.py",
      "category": "identity",
      "size_bytes": 2481,
      "size_kb": 2.4,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "current_sid",
        "set_current_sid"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 8.5
    },
    "identity/backend/verifold/ai/gpt_symbolic_narrator.py": {
      "file_path": "identity/backend/verifold/ai/gpt_symbolic_narrator.py",
      "category": "identity",
      "size_bytes": 2994,
      "size_kb": 2.9,
      "lines": 1,
      "imports": [
        "streamlit",
        "core.identity.identity_engine.ConsentScopeValidator",
        "tools.verifold_interface.visual_replayer.VisualReplayer"
      ],
      "classes": [],
      "functions": [
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 11.5
    },
    "identity/backend/verifold/ai/narrative_alignment_checker.py": {
      "file_path": "identity/backend/verifold/ai/narrative_alignment_checker.py",
      "category": "identity",
      "size_bytes": 3152,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "hashlib"
      ],
      "classes": [
        "NarrativeAlignmentChecker"
      ],
      "functions": [
        "__init__",
        "compute_narrative_fingerprint",
        "track_provenance_record",
        "replay_signature_chain",
        "validate_hash_consistency",
        "detect_hallucination_drift",
        "verify_emotional_authenticity",
        "generate_alignment_report",
        "create_authenticity_proof"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 16.7
    },
    "identity/backend/verifold/compliance/symbolic_audit_mode.py": {
      "file_path": "identity/backend/verifold/compliance/symbolic_audit_mode.py",
      "category": "identity",
      "size_bytes": 3816,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "datetime.datetime",
        "hashlib.sha256",
        "uuid",
        "identity.backend.verifold.identity.ethics_verifier.EthicsVerifier"
      ],
      "classes": [
        "AuditEvent",
        "SymbolicAuditMode",
        "ConsentScopeValidator",
        "ConsentRecord"
      ],
      "functions": [
        "__init__",
        "create_audit_event",
        "verify_consent_checkpoint",
        "generate_compliance_report",
        "secure_replay_with_audit",
        "validate_consent_scope",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 22.3
    },
    "identity/backend/verifold/cryptography/crypto_router.py": {
      "file_path": "identity/backend/verifold/cryptography/crypto_router.py",
      "category": "identity",
      "size_bytes": 5279,
      "size_kb": 5.2,
      "lines": 1,
      "imports": [
        "enum.Enum",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "SecurityTier",
        "CryptoRouter"
      ],
      "functions": [
        "__init__",
        "select_signature_scheme",
        "select_encryption_scheme",
        "get_side_channel_resistance"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 18.0
    },
    "identity/backend/verifold/cryptography/forward_secure_pibe.py": {
      "file_path": "identity/backend/verifold/cryptography/forward_secure_pibe.py",
      "category": "identity",
      "size_bytes": 1862,
      "size_kb": 1.8,
      "lines": 1,
      "imports": [
        "typing.Tuple",
        "typing.Optional",
        "typing.Dict",
        "dataclasses.dataclass"
      ],
      "classes": [
        "FSPIBEParams",
        "ForwardSecurePIBE"
      ],
      "functions": [
        "__init__",
        "setup",
        "extract_key",
        "encrypt",
        "decrypt",
        "puncture"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.9
    },
    "identity/backend/verifold/cryptography/zk_narrative_proof_adapter.py": {
      "file_path": "identity/backend/verifold/cryptography/zk_narrative_proof_adapter.py",
      "category": "identity",
      "size_bytes": 2114,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "hashlib",
        "hashlib",
        "hashlib"
      ],
      "classes": [
        "SymbolicNarrative",
        "ZKNarrativeProofAdapter"
      ],
      "functions": [
        "__init__",
        "generate_proof_circuit",
        "create_experience_proof",
        "verify_narrative_proof"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.1
    },
    "identity/backend/verifold/entropy_fusion.py": {
      "file_path": "identity/backend/verifold/entropy_fusion.py",
      "category": "identity",
      "size_bytes": 12071,
      "size_kb": 11.8,
      "lines": 3,
      "imports": [
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "json",
        "dataclasses.dataclass",
        "enum.Enum",
        "hashlib"
      ],
      "classes": [
        "EmotionType",
        "EthicsWeight",
        "SymbolicContext",
        "EntropyFusionEngine",
        "SymbolicValidator"
      ],
      "functions": [
        "get_tpm_entropy",
        "get_entropy_volatility",
        "export_to_verifold_chain",
        "generate_symbolic_summary",
        "fuse_entropy",
        "__init__",
        "_init_emotion_weights",
        "fuse_entropy_symbolic",
        "_grade_fusion",
        "analyze_entropy_patterns"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 29.0
    },
    "identity/backend/verifold/hardware_entropy_seed.py": {
      "file_path": "identity/backend/verifold/hardware_entropy_seed.py",
      "category": "identity",
      "size_bytes": 17078,
      "size_kb": 16.7,
      "lines": 8,
      "imports": [
        "os",
        "hashlib",
        "secrets",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "HardwareType",
        "EntropySource",
        "HardwareEntropySeeder"
      ],
      "functions": [
        "__init__",
        "discover_entropy_sources",
        "_discover_tpm_devices",
        "_discover_hsm_devices",
        "_discover_trng_devices",
        "_discover_cpu_entropy",
        "_get_system_entropy_source",
        "_check_device_available",
        "_detect_tpm_version",
        "_scan_usb_hsm_devices"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 29.0
    },
    "identity/backend/verifold/journal_mode.py": {
      "file_path": "identity/backend/verifold/journal_mode.py",
      "category": "identity",
      "size_bytes": 18504,
      "size_kb": 18.1,
      "lines": 48,
      "imports": [
        "os",
        "json",
        "time",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "pathlib.Path"
      ],
      "classes": [
        "JournalEntry",
        "VeriFoldJournal"
      ],
      "functions": [
        "gpt_summarize",
        "replay_chain",
        "replay_with_gpt_summary",
        "__init__",
        "_init_symbolic_vocabulary",
        "generate_journal_entry",
        "_generate_title",
        "_generate_narrative",
        "_generate_technical_summary",
        "_extract_emotion_tags"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 23.0
    },
    "identity/backend/verifold/ledger_auditor.py": {
      "file_path": "identity/backend/verifold/ledger_auditor.py",
      "category": "identity",
      "size_bytes": 9870,
      "size_kb": 9.6,
      "lines": 1,
      "imports": [
        "json",
        "jsonschema",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "hashlib",
        "time"
      ],
      "classes": [
        "LedgerAuditor",
        "ContinuousAuditor",
        "ComplianceChecker"
      ],
      "functions": [
        "__init__",
        "_get_record_schema",
        "audit_full_ledger",
        "validate_record_schema",
        "verify_signatures_batch",
        "analyze_temporal_consistency",
        "detect_duplicate_hashes",
        "analyze_hash_entropy",
        "check_ledger_integrity",
        "generate_forensic_report"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 29.0
    },
    "identity/backend/verifold/narrative_utils.py": {
      "file_path": "identity/backend/verifold/narrative_utils.py",
      "category": "identity",
      "size_bytes": 24612,
      "size_kb": 24.0,
      "lines": 5,
      "imports": [
        "json",
        "random",
        "re",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "datetime.datetime"
      ],
      "classes": [
        "EmotionVocabulary",
        "QuantumNarrativeGenerator",
        "SymbolicVocabularyExpander"
      ],
      "functions": [
        "main",
        "__init__",
        "_build_emotion_mappings",
        "_build_intensity_modifiers",
        "_build_quantum_metaphors",
        "get_emotion_words",
        "create_emotion_phrase",
        "__init__",
        "_build_narrative_templates",
        "generate_narrative"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 31.5
    },
    "identity/backend/verifold/qr_decoder.py": {
      "file_path": "identity/backend/verifold/qr_decoder.py",
      "category": "identity",
      "size_bytes": 1422,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "io.BytesIO",
        "pyzbar.pyzbar.decode",
        "PIL.Image",
        "json",
        "urllib.parse"
      ],
      "classes": [],
      "functions": [
        "decode_from_image"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.9
    },
    "identity/backend/verifold/qr_encoder.py": {
      "file_path": "identity/backend/verifold/qr_encoder.py",
      "category": "identity",
      "size_bytes": 9715,
      "size_kb": 9.5,
      "lines": 2,
      "imports": [
        "json",
        "base64",
        "hashlib",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "pathlib.Path",
        "qrcode"
      ],
      "classes": [
        "CollapseQREncoder"
      ],
      "functions": [
        "main",
        "__init__",
        "encode_hash_to_qr",
        "_encode_url_format",
        "_encode_json_format",
        "_encode_binary_format",
        "_generate_qr_image",
        "generate_verification_qr_batch",
        "decode_qr_to_hash"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 21.5
    },
    "identity/backend/verifold/scanner_pwa/scanner_api.py": {
      "file_path": "identity/backend/verifold/scanner_pwa/scanner_api.py",
      "category": "identity",
      "size_bytes": 3600,
      "size_kb": 3.5,
      "lines": 1,
      "imports": [
        "flask.Flask",
        "flask.request",
        "flask.jsonify",
        "flask.send_from_directory",
        "flask_cors.CORS",
        "json",
        "os",
        "pathlib.Path",
        "scanner_backend.ScannerBackend",
        "os"
      ],
      "classes": [],
      "functions": [
        "index",
        "static_files",
        "verify_qr_data",
        "verify_lucas_id",
        "verify_symbolic_memory",
        "api_status"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "identity/backend/verifold/security/consent_fuzz_tester.py": {
      "file_path": "identity/backend/verifold/security/consent_fuzz_tester.py",
      "category": "identity",
      "size_bytes": 1615,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "random",
        "string"
      ],
      "classes": [
        "ConsentFuzzTester"
      ],
      "functions": [
        "__init__",
        "generate_invalid_consent_data",
        "fuzz_tier_boundaries",
        "test_consent_bypass_attempts",
        "simulate_replay_injection",
        "run_comprehensive_fuzz_suite"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.6
    },
    "identity/backend/verifold/security/glyph_mutation_simulator.py": {
      "file_path": "identity/backend/verifold/security/glyph_mutation_simulator.py",
      "category": "identity",
      "size_bytes": 2002,
      "size_kb": 2.0,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "enum.Enum",
        "random"
      ],
      "classes": [
        "MutationType",
        "GlyphMutationSimulator"
      ],
      "functions": [
        "__init__",
        "corrupt_qr_pixels",
        "inject_malicious_stego",
        "simulate_qr_degradation",
        "spoof_tier_level",
        "generate_attack_report"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 16.0
    },
    "identity/backend/verifold/security/symbolic_adversary_agent.py": {
      "file_path": "identity/backend/verifold/security/symbolic_adversary_agent.py",
      "category": "identity",
      "size_bytes": 2168,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "enum.Enum",
        "dataclasses.dataclass"
      ],
      "classes": [
        "AdversaryType",
        "AttackScenario",
        "SymbolicAdversaryAgent"
      ],
      "functions": [
        "__init__",
        "simulate_lucas_id_impersonation",
        "attempt_memory_replay_injection",
        "test_cryptographic_downgrade",
        "simulate_social_engineering",
        "generate_threat_assessment"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 18.2
    },
    "identity/backend/verifold/storage/filecoin_uploader.py": {
      "file_path": "identity/backend/verifold/storage/filecoin_uploader.py",
      "category": "identity",
      "size_bytes": 1845,
      "size_kb": 1.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass"
      ],
      "classes": [
        "UploadResult",
        "FilecoinUploader"
      ],
      "functions": [
        "__init__",
        "upload_encrypted_memory",
        "create_storage_deal",
        "anchor_hash_to_blockchain",
        "retrieve_encrypted_data",
        "monitor_storage_deals"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.8
    },
    "identity/backend/verifold/visual/glyph_stego_encoder.py": {
      "file_path": "identity/backend/verifold/visual/glyph_stego_encoder.py",
      "category": "identity",
      "size_bytes": 4061,
      "size_kb": 4.0,
      "lines": 3,
      "imports": [
        "qrcode",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "base64",
        "PIL.Image",
        "io.BytesIO"
      ],
      "classes": [
        "GLYMPHData",
        "GlyphStegoEncoder"
      ],
      "functions": [
        "__init__",
        "encode_dual_layer",
        "decode_visible_layer",
        "decode_hidden_layer",
        "generate_security_warning",
        "validate_glyph_integrity"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 18.1
    },
    "identity/backend/verifold/visual/qr_tier_scanner.py": {
      "file_path": "identity/backend/verifold/visual/qr_tier_scanner.py",
      "category": "identity",
      "size_bytes": 1655,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "enum.Enum"
      ],
      "classes": [
        "ScanResult",
        "QRTierScanner"
      ],
      "functions": [
        "__init__",
        "scan_with_tier_check",
        "generate_security_warning",
        "progressive_disclosure",
        "audit_scan_attempt"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.2
    },
    "identity/backend/verifold/web3/emotion_nft_standard.py": {
      "file_path": "identity/backend/verifold/web3/emotion_nft_standard.py",
      "category": "identity",
      "size_bytes": 1654,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass"
      ],
      "classes": [
        "EmotionMetadata",
        "EmotionNFTStandard"
      ],
      "functions": [
        "__init__",
        "mint_emotion_nft",
        "verify_emotional_authenticity",
        "encode_sentiment_vector",
        "create_temporal_signature"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.2
    },
    "identity/backend/verifold/yubi_seeder.py": {
      "file_path": "identity/backend/verifold/yubi_seeder.py",
      "category": "identity",
      "size_bytes": 18718,
      "size_kb": 18.3,
      "lines": 5,
      "imports": [
        "time",
        "hashlib",
        "secrets",
        "os",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass"
      ],
      "classes": [
        "YubiDeviceType",
        "YubiOperation",
        "YubiDevice",
        "YubiSession",
        "YubiSeeder"
      ],
      "functions": [
        "__init__",
        "discover_yubi_devices",
        "_discover_yubihsm_devices",
        "_discover_yubikey_devices",
        "_check_yubihsm_simulator",
        "_check_yubikey_simulator",
        "create_session",
        "_authenticate_device",
        "_authenticate_yubihsm",
        "_authenticate_yubikey"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 31.0
    },
    "identity/connector.py": {
      "file_path": "identity/connector.py",
      "category": "identity",
      "size_bytes": 3820,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "functools",
        "identity.tiered_access.TieredAccessControl",
        "identity.safety_monitor.SafetyMonitor",
        "identity.audit_logger.AuditLogger",
        "orchestration.integration_hub.get_integration_hub"
      ],
      "classes": [
        "IdentityConnector"
      ],
      "functions": [
        "get_identity_connector",
        "__init__",
        "require_tier",
        "connect_to_module",
        "setup_cross_module_auth",
        "configure_auth",
        "decorator",
        "wrapper"
      ],
      "async_functions": [
        "wrapper"
      ],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.8
    },
    "identity/core/brain_identity_connector.py": {
      "file_path": "identity/core/brain_identity_connector.py",
      "category": "identity",
      "size_bytes": 22068,
      "size_kb": 21.6,
      "lines": 1,
      "imports": [
        "logging",
        "time",
        "datetime.datetime",
        "enum.Enum",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "BrainIdentityConnector",
        "MemoryIdentityIntegration",
        "MockRegistry",
        "MockBrain",
        "AccessTier",
        "MemoryAccessPolicy",
        "MemoryOperation"
      ],
      "functions": [
        "__init__",
        "connect_registry",
        "connect_brain",
        "authorize_memory_operation",
        "wrap_memory_function",
        "register_memory",
        "_get_required_tier",
        "_log_access",
        "get_access_logs",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 35.5
    },
    "identity/core/qrs/qrg_generator.py": {
      "file_path": "identity/core/qrs/qrg_generator.py",
      "category": "identity",
      "size_bytes": 887,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [],
      "classes": [
        "QRGGenerator"
      ],
      "functions": [
        "__init__",
        "generate_pairing_code",
        "validate_pairing_code",
        "cleanup_expired_codes"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "identity/core/qrs/session_replay.py": {
      "file_path": "identity/core/qrs/session_replay.py",
      "category": "identity",
      "size_bytes": 873,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [],
      "classes": [
        "SessionReplayManager"
      ],
      "functions": [
        "__init__",
        "create_replay_session",
        "restore_session",
        "invalidate_session"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "identity/core/sing/cross_device_manager.py": {
      "file_path": "identity/core/sing/cross_device_manager.py",
      "category": "identity",
      "size_bytes": 917,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [],
      "classes": [
        "CrossDeviceTokenManager"
      ],
      "functions": [
        "__init__",
        "sync_token_to_device",
        "invalidate_device_tokens",
        "get_device_tokens"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "identity/core/sing/sso_engine.py": {
      "file_path": "identity/core/sing/sso_engine.py",
      "category": "identity",
      "size_bytes": 21775,
      "size_kb": 21.3,
      "lines": 1,
      "imports": [
        "time",
        "json",
        "secrets",
        "hashlib",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set"
      ],
      "classes": [
        "LambdaSSOEngine"
      ],
      "functions": [
        "__init__",
        "generate_sso_token",
        "validate_token",
        "authenticate_with_qr_glyph",
        "authenticate_with_biometric_fallback",
        "sync_tokens_across_devices",
        "revoke_token",
        "register_service",
        "_generate_token_id",
        "_generate_access_token"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 32.5
    },
    "identity/core/trace/pattern_analyzer.py": {
      "file_path": "identity/core/trace/pattern_analyzer.py",
      "category": "identity",
      "size_bytes": 890,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [],
      "classes": [
        "SymbolicPatternAnalyzer"
      ],
      "functions": [
        "__init__",
        "analyze_patterns",
        "detect_anomalies",
        "generate_insights"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "identity/diagnostics.py": {
      "file_path": "identity/diagnostics.py",
      "category": "identity",
      "size_bytes": 758,
      "size_kb": 0.7,
      "lines": 1,
      "imports": [
        "os"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 5.8
    },
    "identity/diagnostics/insight_cli.py": {
      "file_path": "identity/diagnostics/insight_cli.py",
      "category": "identity",
      "size_bytes": 2837,
      "size_kb": 2.8,
      "lines": 5,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.8
    },
    "identity/enterprise/auth.py": {
      "file_path": "identity/enterprise/auth.py",
      "category": "identity",
      "size_bytes": 44334,
      "size_kb": 43.3,
      "lines": 5,
      "imports": [
        "json",
        "jwt",
        "hashlib",
        "base64",
        "secrets",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union"
      ],
      "classes": [
        "AuthenticationMethod",
        "UserRole",
        "AuthenticationStatus",
        "EnterpriseUser",
        "AuthenticationResult",
        "SAMLConfiguration",
        "OAuthConfiguration",
        "LDAPConfiguration",
        "EnterpriseAuthenticationModule"
      ],
      "functions": [
        "get_enterprise_auth_config_template",
        "__init__",
        "_load_config",
        "_initialize_encryption",
        "_load_authentication_providers",
        "authenticate_user",
        "_authenticate_ldap",
        "_authenticate_oauth",
        "_authenticate_saml",
        "_authenticate_jwt"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 49.0
    },
    "identity/governance/policy_board.py": {
      "file_path": "identity/governance/policy_board.py",
      "category": "identity",
      "size_bytes": 2821,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "datetime.datetime",
        "datetime.timezone",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "dao.init_config.DAO_CONFIG",
        "argparse"
      ],
      "classes": [
        "PolicyProposal"
      ],
      "functions": [
        "__init__",
        "cast_vote",
        "is_approved",
        "status_report"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.8
    },
    "identity/lukhas_identity/security/awareness_protocol.py": {
      "file_path": "identity/lukhas_identity/security/awareness_protocol.py",
      "category": "identity",
      "size_bytes": 2230,
      "size_kb": 2.2,
      "lines": 1,
      "imports": [],
      "classes": [
        "LucasAwarenessProtocol"
      ],
      "functions": [
        "__init__",
        "assess_awareness",
        "_generate_context_vector",
        "_calculate_confidence",
        "_determine_tier"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.7
    },
    "identity/lukhas_identity/security/kyi_check.py": {
      "file_path": "identity/lukhas_identity/security/kyi_check.py",
      "category": "identity",
      "size_bytes": 1410,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "record_interaction",
        "check_kyi_threshold",
        "get_user_interactions"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.9
    },
    "identity/lukhus_deployment_package.py": {
      "error": "File not found",
      "file_path": "identity/lukhus_deployment_package.py"
    },
    "identity/mobile/websocket_client.py": {
      "file_path": "identity/mobile/websocket_client.py",
      "category": "identity",
      "size_bytes": 1339,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [],
      "classes": [
        "MobileWebSocketClient"
      ],
      "functions": [
        "__init__",
        "connect",
        "disconnect",
        "send_message",
        "receive_message",
        "is_connected"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 13.3
    },
    "identity/public/lambda_id_previewer.py": {
      "file_path": "identity/public/lambda_id_previewer.py",
      "category": "identity",
      "size_bytes": 37123,
      "size_kb": 36.3,
      "lines": 2,
      "imports": [
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "lambd_id_service.LambdaIDService",
        "id_service.lambd_id_validator.LambdaIDValidator"
      ],
      "classes": [
        "PreviewResult",
        "PublicLambdaIDPreviewer"
      ],
      "functions": [
        "get_web_interface_template",
        "__init__",
        "_load_educational_content",
        "preview_lambda_id",
        "_sanitize_input",
        "_analyze_format",
        "_validate_commercial_lambda_id",
        "_extract_tier",
        "_format_validation_details",
        "_generate_analysis"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 30.5
    },
    "identity/qrg_100_percent_coverage.py": {
      "file_path": "identity/qrg_100_percent_coverage.py",
      "category": "identity",
      "size_bytes": 28716,
      "size_kb": 28.0,
      "lines": 9,
      "imports": [
        "unittest",
        "sys",
        "os",
        "time",
        "json",
        "hashlib",
        "secrets",
        "threading",
        "unittest.mock.Mock",
        "unittest.mock.patch"
      ],
      "classes": [
        "TestQRGEdgeCases",
        "TestQRGErrorHandling",
        "TestQRGSecurityValidation",
        "TestQRGCulturalValidation",
        "TestQuantumSteganographicCoverage",
        "TestPerformanceOptimization",
        "TestIntegrationBoundaries"
      ],
      "functions": [
        "run_100_percent_coverage_suite",
        "setUp",
        "test_extreme_consciousness_levels",
        "test_invalid_security_levels",
        "test_empty_and_null_inputs",
        "test_extremely_long_user_ids",
        "test_unicode_and_special_characters",
        "test_concurrent_stress_test",
        "setUp",
        "test_missing_dependencies_graceful_handling"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 41.5
    },
    "identity/qrg_showcase.py": {
      "file_path": "identity/qrg_showcase.py",
      "category": "identity",
      "size_bytes": 25307,
      "size_kb": 24.7,
      "lines": 15,
      "imports": [
        "json",
        "time",
        "random",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "sys",
        "os"
      ],
      "classes": [
        "QRGShowcase"
      ],
      "functions": [
        "create_ascii_qr_pattern",
        "main",
        "__init__",
        "_create_demo_user_profiles",
        "demonstrate_user_profile",
        "_create_user_specific_ascii_pattern",
        "_analyze_qrg_adaptation",
        "run_comprehensive_showcase",
        "run_specific_qrg_type_demo",
        "run_performance_benchmark"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 23.0
    },
    "identity/router.py": {
      "file_path": "identity/router.py",
      "category": "identity",
      "size_bytes": 686,
      "size_kb": 0.7,
      "lines": 1,
      "imports": [
        "id_portal.backend.app.tier_manager.get_user_tier",
        "streamlit"
      ],
      "classes": [],
      "functions": [
        "route_user_dashboard"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.2
    },
    "identity/security/symbolic_vault.py": {
      "file_path": "identity/security/symbolic_vault.py",
      "category": "identity",
      "size_bytes": 3216,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "datetime.datetime",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "SymbolicVault"
      ],
      "functions": [
        "__init__",
        "register_environmental_trigger",
        "verify_access",
        "encrypt_memory",
        "_hash_trigger_data",
        "_get_current_anchors",
        "_encrypt_data"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 15.7
    },
    "identity/tests/claude_sync_relay.py": {
      "file_path": "identity/tests/claude_sync_relay.py",
      "category": "identity",
      "size_bytes": 1382,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 6.4
    },
    "identity/tools/onboarding_cli.py": {
      "file_path": "identity/tools/onboarding_cli.py",
      "category": "identity",
      "size_bytes": 24817,
      "size_kb": 24.2,
      "lines": 33,
      "imports": [
        "sys",
        "json",
        "time",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "argparse",
        "core.onboarding.enhanced_onboarding.EnhancedOnboardingManager"
      ],
      "classes": [
        "OnboardingCLI"
      ],
      "functions": [
        "main",
        "__init__",
        "run_interactive_demo",
        "_run_real_onboarding",
        "_run_demo_onboarding",
        "_collect_stage_data",
        "_collect_cultural_context",
        "_collect_cultural_context_demo",
        "_collect_symbolic_elements",
        "_collect_symbolic_elements_demo"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 27.0
    },
    "identity/trace.py": {
      "file_path": "identity/trace.py",
      "category": "identity",
      "size_bytes": 2328,
      "size_kb": 2.3,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 7.3
    },
    "identity/wearables_integration/entropy_beacon.py": {
      "file_path": "identity/wearables_integration/entropy_beacon.py",
      "category": "identity",
      "size_bytes": 3129,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [
        "hashlib",
        "datetime.datetime",
        "nacl.signing",
        "time",
        "random"
      ],
      "classes": [
        "EntropyBeacon"
      ],
      "functions": [
        "__init__",
        "start_broadcast",
        "stop_broadcast",
        "generate_entropy_fingerprint",
        "assign_entropy_weight",
        "track_contribution",
        "get_current_time",
        "sign_broadcast",
        "verify_broadcast_signature"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [],
      "priority_score": 16.6
    },
    "learning/_dict_learning.py": {
      "file_path": "learning/_dict_learning.py",
      "category": "learning",
      "size_bytes": 50131,
      "size_kb": 49.0,
      "lines": 1,
      "imports": [
        "itertools",
        "sys",
        "time",
        "numbers.Integral",
        "numbers.Real",
        "numpy",
        "joblib.effective_n_jobs",
        "scipy.linalg",
        "structlog",
        "base.BaseEstimator"
      ],
      "classes": [
        "_BaseSparseCoding",
        "SparseCoder",
        "DictionaryLearning",
        "MiniBatchDictionaryLearning"
      ],
      "functions": [
        "_check_positive_coding",
        "_sparse_encode_precomputed",
        "sparse_encode",
        "_sparse_encode",
        "_update_dict",
        "_dict_learning",
        "dict_learning_online",
        "dict_learning",
        "__init__",
        "_transform"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 43.0
    },
    "learning/adaptive_agi/Meta_Learning/symbolic_feedback.py": {
      "file_path": "learning/adaptive_agi/Meta_Learning/symbolic_feedback.py",
      "category": "learning",
      "size_bytes": 40682,
      "size_kb": 39.7,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "learning/aid/dream_engine/assistant.py": {
      "file_path": "learning/aid/dream_engine/assistant.py",
      "category": "learning",
      "size_bytes": 6684,
      "size_kb": 6.5,
      "lines": 6,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "learning/aid/dream_engine/dream_injector.py": {
      "file_path": "learning/aid/dream_engine/dream_injector.py",
      "category": "learning",
      "size_bytes": 3796,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.8
    },
    "learning/aid/dream_engine/dream_summary_generator.py": {
      "file_path": "learning/aid/dream_engine/dream_summary_generator.py",
      "category": "learning",
      "size_bytes": 4554,
      "size_kb": 4.4,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "learning/aid/dream_engine/narration_controller.py": {
      "file_path": "learning/aid/dream_engine/narration_controller.py",
      "category": "learning",
      "size_bytes": 1752,
      "size_kb": 1.7,
      "lines": 1,
      "imports": [
        "pathlib.Path",
        "json"
      ],
      "classes": [],
      "functions": [
        "fetch_narration_entries",
        "load_user_settings",
        "filter_narration_queue"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 13.3
    },
    "learning/doc_generator_learning_engine.py": {
      "file_path": "learning/doc_generator_learning_engine.py",
      "category": "learning",
      "size_bytes": 25670,
      "size_kb": 25.1,
      "lines": 3,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "learning/edu_module.py": {
      "file_path": "learning/edu_module.py",
      "category": "learning",
      "size_bytes": 4607,
      "size_kb": 4.5,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "learning/embodied_thought/generative_reflex.py": {
      "file_path": "learning/embodied_thought/generative_reflex.py",
      "category": "learning",
      "size_bytes": 2771,
      "size_kb": 2.7,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "GenerativeReflex"
      ],
      "functions": [
        "__init__",
        "load_reflex",
        "generate_response"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 18.3
    },
    "learning/exponential_learning.py": {
      "file_path": "learning/exponential_learning.py",
      "category": "learning",
      "size_bytes": 11185,
      "size_kb": 10.9,
      "lines": 1,
      "imports": [
        "structlog"
      ],
      "classes": [
        "ExponentialLearningSystem"
      ],
      "functions": [
        "__init__",
        "incorporate_experience",
        "_extract_patterns",
        "_update_knowledge",
        "_consolidate_knowledge"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 21.5
    },
    "learning/federated_colony_learning.py": {
      "file_path": "learning/federated_colony_learning.py",
      "category": "learning",
      "size_bytes": 2845,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "torch",
        "torch.nn",
        "numpy",
        "core.colonies.base_colony.BaseColony",
        "core.swarm.SwarmAgent",
        "learning.meta_adaptive.MetaLearner"
      ],
      "classes": [
        "LearningAgent",
        "FederatedLearningColony"
      ],
      "functions": [
        "__init__",
        "learn_local",
        "__init__",
        "federated_learning_round",
        "_federate_models"
      ],
      "async_functions": [
        "learn_local",
        "federated_learning_round"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 23.3
    },
    "learning/federated_learning.py": {
      "file_path": "learning/federated_learning.py",
      "category": "learning",
      "size_bytes": 4146,
      "size_kb": 4.0,
      "lines": 1,
      "imports": [
        "os",
        "json",
        "typing.Dict",
        "typing.Optional",
        "datetime.datetime"
      ],
      "classes": [
        "FederatedLearningManager"
      ],
      "functions": [
        "__init__",
        "register_model",
        "get_model",
        "contribute_gradients",
        "_weighted_update",
        "_ensure_storage_exists",
        "_get_model_path",
        "_persist_model",
        "_load_model"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 22.6
    },
    "learning/federated_learning_system.py": {
      "file_path": "learning/federated_learning_system.py",
      "category": "learning",
      "size_bytes": 27521,
      "size_kb": 26.9,
      "lines": 1,
      "imports": [
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "typing.Set",
        "datetime",
        "json",
        "os"
      ],
      "classes": [
        "LukhasFederatedModel",
        "LukhasFederatedLearningManager"
      ],
      "functions": [
        "initialize_lukhas_federated_learning",
        "__init__",
        "update_with_gradients",
        "get_parameters",
        "serialize",
        "deserialize",
        "__init__",
        "register_model",
        "get_model",
        "contribute_gradients"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 28.5
    },
    "learning/federated_meta_learning.py": {
      "file_path": "learning/federated_meta_learning.py",
      "category": "learning",
      "size_bytes": 43715,
      "size_kb": 42.7,
      "lines": 1,
      "imports": [
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime",
        "json",
        "os",
        "logging"
      ],
      "classes": [
        "FederatedModel",
        "FederatedLearningManager",
        "ReflectiveIntrospectionSystem",
        "MetaLearningSystem"
      ],
      "functions": [
        "__init__",
        "update_with_gradients",
        "get_parameters",
        "serialize",
        "deserialize",
        "__init__",
        "register_model",
        "get_model",
        "contribute_gradients",
        "_aggregate_model"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 47.0
    },
    "learning/meta_adaptive/adaptive_interface_generator.py": {
      "file_path": "learning/meta_adaptive/adaptive_interface_generator.py",
      "category": "learning",
      "size_bytes": 14580,
      "size_kb": 14.2,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "json"
      ],
      "classes": [
        "AdaptiveInterfaceGenerator"
      ],
      "functions": [
        "__init__",
        "generate_interface",
        "_get_user_profile",
        "_analyze_context_needs",
        "_get_device_layout",
        "_select_components",
        "_arrange_components",
        "_apply_styling",
        "_define_interactions",
        "_define_animations"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 32.0
    },
    "learning/meta_adaptive/adaptive_ux_core.py": {
      "file_path": "learning/meta_adaptive/adaptive_ux_core.py",
      "category": "learning",
      "size_bytes": 54855,
      "size_kb": 53.6,
      "lines": 7,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.0
    },
    "learning/meta_adaptive/meta_learning.py": {
      "file_path": "learning/meta_adaptive/meta_learning.py",
      "category": "learning",
      "size_bytes": 43715,
      "size_kb": 42.7,
      "lines": 1,
      "imports": [
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime",
        "json",
        "os",
        "logging"
      ],
      "classes": [
        "FederatedModel",
        "FederatedLearningManager",
        "ReflectiveIntrospectionSystem",
        "MetaLearningSystem"
      ],
      "functions": [
        "__init__",
        "update_with_gradients",
        "get_parameters",
        "serialize",
        "deserialize",
        "__init__",
        "register_model",
        "get_model",
        "contribute_gradients",
        "_aggregate_model"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 47.0
    },
    "learning/meta_adaptive/system.py": {
      "file_path": "learning/meta_adaptive/system.py",
      "category": "learning",
      "size_bytes": 26997,
      "size_kb": 26.4,
      "lines": 18,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 22.0
    },
    "learning/meta_learning/federated_integration.py": {
      "file_path": "learning/meta_learning/federated_integration.py",
      "category": "learning",
      "size_bytes": 33670,
      "size_kb": 32.9,
      "lines": 1,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "time",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "Federationstrategy",
        "Privacylevel",
        "Federatednode",
        "Federatedlearningupdate",
        "Federatedlearningintegration"
      ],
      "functions": [
        "enhance_meta_learning_with_federation",
        "__post_init__",
        "_generate_quantum_signature",
        "__init__",
        "integrate_with_enhancement_system",
        "register_node",
        "share_learning_insight",
        "receive_federation_updates",
        "coordinate_learning_rates",
        "enhance_symbolic_reasoning_federation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 44.0
    },
    "learning/meta_learning/meta_core.py": {
      "file_path": "learning/meta_learning/meta_core.py",
      "category": "learning",
      "size_bytes": 914,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "logging",
        "datetime.datetime"
      ],
      "classes": [
        "MetaCore"
      ],
      "functions": [
        "__init__",
        "evolve"
      ],
      "async_functions": [
        "evolve"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 17.9
    },
    "learning/meta_learning/symbolic_feedback.py": {
      "file_path": "learning/meta_learning/symbolic_feedback.py",
      "category": "learning",
      "size_bytes": 38870,
      "size_kb": 38.0,
      "lines": 1,
      "imports": [
        "logging",
        "json",
        "hashlib",
        "numpy",
        "datetime.datetime",
        "datetime.timezone",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "Feedbacktype",
        "Symboliccontext",
        "Intentnodehistory",
        "Memoriasnapshot",
        "Dreamreplayrecord",
        "Symbolicfeedbackloop",
        "Symbolicfeedbacksystem"
      ],
      "functions": [
        "create_integrated_symbolic_feedback_system",
        "simulate_intent_node_integration",
        "__init__",
        "log_intent_node_interaction",
        "log_memoria_snapshot",
        "log_dream_replay",
        "create_symbolic_feedback_loop",
        "execute_symbolic_rehearsal",
        "get_optimization_insights",
        "_analyze_intent_patterns"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 46.0
    },
    "learning/meta_learning_adapter.py": {
      "file_path": "learning/meta_learning_adapter.py",
      "category": "learning",
      "size_bytes": 37052,
      "size_kb": 36.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "dataclasses.dataclass"
      ],
      "classes": [
        "LearningPhase",
        "FederatedState",
        "MetaLearningMetrics",
        "LearningRateBounds",
        "MetaLearningEnhancementAdapter"
      ],
      "functions": [
        "__init__",
        "initialize",
        "get_current_metrics",
        "enhance_learning",
        "process_biological_feedback",
        "_enhance_learning_rate",
        "_enhance_federated_learning",
        "_enhance_symbolic_feedback",
        "_update_performance_dashboard",
        "get_performance_metrics"
      ],
      "async_functions": [
        "initialize",
        "get_current_metrics",
        "enhance_learning",
        "process_biological_feedback",
        "_enhance_learning_rate",
        "_enhance_federated_learning",
        "_enhance_symbolic_feedback",
        "_update_performance_dashboard",
        "get_performance_metrics",
        "apply_optimization",
        "_initialize_learning_rate_system",
        "_initialize_federated_system",
        "_initialize_symbolic_feedback",
        "_initialize_performance_monitoring",
        "_update_current_metrics",
        "_adapt_to_biological_state",
        "_integrate_biological_symbolic_feedback",
        "_connect_federated_nodes",
        "_calculate_federated_convergence",
        "_calculate_consensus_quality",
        "_calculate_communication_efficiency",
        "_process_intent_nodes",
        "_process_memoria_integration",
        "_process_dream_coherence",
        "_update_learning_phase",
        "_increase_learning_rate",
        "_stabilize_federated_learning",
        "_enhance_symbolic_feedback_quality"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 47.0
    },
    "learning/meta_learning_recovery.py": {
      "file_path": "learning/meta_learning_recovery.py",
      "category": "learning",
      "size_bytes": 20831,
      "size_kb": 20.3,
      "lines": 3,
      "imports": [
        "os",
        "shutil",
        "pathlib.Path",
        "datetime.datetime",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "structlog"
      ],
      "classes": [
        "MetaLearningRecovery"
      ],
      "functions": [
        "main",
        "__init__",
        "explore_meta_learning_directory",
        "convert_to_lukhas_format",
        "determine_target_directory",
        "recover_meta_learning_components",
        "execute_recovery"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 25.5
    },
    "learning/metalearningenhancementsystem.py": {
      "file_path": "learning/metalearningenhancementsystem.py",
      "category": "learning",
      "size_bytes": 52341,
      "size_kb": 51.1,
      "lines": 1,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "dataclasses.dataclass",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "Enhancementmode",
        "Systemintegrationstatus",
        "MetaLearningEnhancementsystem"
      ],
      "functions": [
        "initialize_meta_learning_enhancement",
        "__init__",
        "discover_and_enhance_meta_learning_systems",
        "start_enhancement_operations",
        "run_enhancement_cycle",
        "get_comprehensive_status",
        "generate_enhancement_report",
        "integrate_with_collapse_engine",
        "integrate_with_intent_node",
        "integrate_with_voice_pack"
      ],
      "async_functions": [
        "initialize_meta_learning_enhancement",
        "discover_and_enhance_meta_learning_systems",
        "start_enhancement_operations",
        "run_enhancement_cycle",
        "get_comprehensive_status",
        "generate_enhancement_report",
        "integrate_with_collapse_engine",
        "integrate_with_intent_node",
        "integrate_with_voice_pack",
        "_enhance_individual_system",
        "_apply_monitoring_enhancement",
        "_apply_rate_optimization_enhancement",
        "_apply_symbolic_feedback_enhancement",
        "_apply_federation_enhancement",
        "_start_federated_operations",
        "_process_system_enhancement_cycle",
        "_generate_cross_system_insights",
        "_coordinate_federation_cycle",
        "_perform_cycle_ethical_audit",
        "_get_dashboard_status",
        "_get_rate_modulator_status",
        "_get_symbolic_feedback_status",
        "_get_federation_status",
        "_generate_executive_summary",
        "_generate_integration_analysis",
        "_generate_performance_analysis",
        "_generate_ethical_analysis",
        "_generate_federation_analysis",
        "_generate_recommendations",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 45.5
    },
    "learning/neural_integrator.py": {
      "file_path": "learning/neural_integrator.py",
      "category": "learning",
      "size_bytes": 32211,
      "size_kb": 31.5,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 19.0
    },
    "learning/plugin_learning_engine.py": {
      "file_path": "learning/plugin_learning_engine.py",
      "category": "learning",
      "size_bytes": 9603,
      "size_kb": 9.4,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "enum.Enum",
        "pydantic.BaseModel",
        "structlog",
        "lukhas_core.LucasPlugin",
        "lukhas_core.LucasMemoryInterface",
        "lukhas_core.LucasVoiceInterface"
      ],
      "classes": [
        "ContentType",
        "UserLevel",
        "GenerationConfig",
        "PluginLearningEngine"
      ],
      "functions": [
        "__init__",
        "generate_documentation",
        "start_learning_session",
        "update_knowledge",
        "get_optimal_complexity",
        "cleanup"
      ],
      "async_functions": [
        "generate_documentation",
        "start_learning_session",
        "update_knowledge",
        "cleanup"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management",
        "Plugin/extension - register with plugin system"
      ],
      "connection_recommendations": [],
      "priority_score": 30.0
    },
    "learning/results/trace_reader.py": {
      "file_path": "learning/results/trace_reader.py",
      "category": "learning",
      "size_bytes": 3912,
      "size_kb": 3.8,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.9
    },
    "learning/systems/core_system.py": {
      "file_path": "learning/systems/core_system.py",
      "category": "learning",
      "size_bytes": 2780,
      "size_kb": 2.7,
      "lines": 3,
      "imports": [
        "datetime.datetime",
        "json",
        "symbolic.memoria.log_memory",
        "symbolic.lukhas_personality.adjust_personality",
        "symbolic.lukhas_personality.LUKHAS_PERSONALITY",
        "symbolic.lukhas_emotion.analyze_emotion",
        "symbolic.lukhas_dreams.generate_symbolic_dreams",
        "symbolic.lukhas_guardian.ethical_check",
        "symbolic.lukhas_voice.speak",
        "symbolic.lukhas_reflector.recall_last_interaction"
      ],
      "classes": [],
      "functions": [
        "process_user_input"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.3
    },
    "learning/systems/duet_conductor.py": {
      "file_path": "learning/systems/duet_conductor.py",
      "category": "learning",
      "size_bytes": 3129,
      "size_kb": 3.1,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "manage_voice_handoff"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.6
    },
    "learning/systems/intent_language.py": {
      "file_path": "learning/systems/intent_language.py",
      "category": "learning",
      "size_bytes": 1489,
      "size_kb": 1.5,
      "lines": 2,
      "imports": [
        "json",
        "datetime.datetime",
        "sys"
      ],
      "classes": [],
      "functions": [
        "interpret_intent",
        "log_interpretation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.5
    },
    "learning/systems/symbolic_voice_loop.py": {
      "file_path": "learning/systems/symbolic_voice_loop.py",
      "category": "learning",
      "size_bytes": 2561,
      "size_kb": 2.5,
      "lines": 2,
      "imports": [
        "speech_recognition",
        "json",
        "datetime.datetime",
        "dream_generator.generate_dreams",
        "lukhas_voice.speak",
        "emotion_mapper.map_emotion",
        "symbolic.personas.lukhas_core.lukhas_profile",
        "openai"
      ],
      "classes": [],
      "functions": [
        "speak",
        "reflect_with_lukhas",
        "listen_and_log_feedback",
        "generate_dream_outcomes",
        "lukhas_emotional_response"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.1
    },
    "learning/tutor_learning_engine.py": {
      "file_path": "learning/tutor_learning_engine.py",
      "category": "learning",
      "size_bytes": 6221,
      "size_kb": 6.1,
      "lines": 1,
      "imports": [
        "pytest",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "docututor.tutoring_engine.tutor.TutorEngine",
        "docututor.tutoring_engine.tutor.LearningSession",
        "docututor.tutoring_engine.tutor.TutorMessage",
        "docututor.tutoring_engine.tutor.TutorMessageType",
        "docututor.tutoring_engine.tutor.DifficultyLevel",
        "docututor.tutoring_engine.tutor.LearningObjective"
      ],
      "classes": [
        "TestTutorLearningEngine",
        "TestTutorLearningEngine"
      ],
      "functions": [
        "skg",
        "tutor_engine",
        "sample_config",
        "test_create_session",
        "test_handle_good_response",
        "test_handle_poor_response",
        "test_bio_oscillator_adaptation",
        "test_session_end",
        "test_voice_integration",
        "test_learning_progression"
      ],
      "async_functions": [
        "test_create_session",
        "test_handle_good_response",
        "test_handle_poor_response",
        "test_bio_oscillator_adaptation",
        "test_session_end",
        "test_voice_integration",
        "test_learning_progression",
        "synthesize_speech",
        "get_user_metrics",
        "get_stressed_metrics",
        "mock_synthesize"
      ],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "learning/usage_learning.py": {
      "file_path": "learning/usage_learning.py",
      "category": "learning",
      "size_bytes": 12734,
      "size_kb": 12.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timezone",
        "numpy",
        "collections.defaultdict",
        "structlog"
      ],
      "classes": [
        "UserInteraction",
        "InteractionPattern",
        "UsageBasedLearning"
      ],
      "functions": [
        "__init__",
        "__init__",
        "update",
        "__init__",
        "record_interaction",
        "identify_patterns",
        "update_user_preferences",
        "get_document_effectiveness",
        "get_popular_sequences",
        "recommend_next_docs"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "memory/colonies/episodic_memory_colony.py": {
      "file_path": "memory/colonies/episodic_memory_colony.py",
      "category": "memory_systems",
      "size_bytes": 30529,
      "size_kb": 29.8,
      "lines": 1,
      "imports": [
        "asyncio",
        "numpy",
        "time",
        "collections.defaultdict",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "EpisodicMemoryRecord",
        "EpisodicMemoryColony"
      ],
      "functions": [
        "__init__",
        "_initialize_specialized_systems",
        "_cleanup_specialized_systems",
        "_process_specialized_operation",
        "_create_episodic_memory",
        "_read_episodic_memory",
        "_search_episodic_memories",
        "_trigger_episodic_replay",
        "_cast_consensus_vote",
        "_analyze_temporal_distinctiveness"
      ],
      "async_functions": [
        "_initialize_specialized_systems",
        "_cleanup_specialized_systems",
        "_process_specialized_operation",
        "_create_episodic_memory",
        "_read_episodic_memory",
        "_search_episodic_memories",
        "_trigger_episodic_replay",
        "_cast_consensus_vote",
        "_manage_memory_capacity",
        "_remove_episodic_memory",
        "_replay_processing_loop",
        "_consolidation_assessment_loop"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 33.5
    },
    "memory/convergence/memory_trace_harmonizer.py": {
      "file_path": "memory/convergence/memory_trace_harmonizer.py",
      "category": "memory_systems",
      "size_bytes": 4824,
      "size_kb": 4.7,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "MemoryTraceHarmonizer"
      ],
      "functions": [
        "__init__",
        "harmonize_traces"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.8
    },
    "memory/emotional_memory_manager_unified.py": {
      "file_path": "memory/emotional_memory_manager_unified.py",
      "category": "memory_systems",
      "size_bytes": 16450,
      "size_kb": 16.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone",
        "json",
        "pathlib.Path",
        "memory.emotional_memory_manager.EmotionalMemoryManager",
        "core.tier_unification_adapter.get_unified_adapter"
      ],
      "classes": [
        "UnifiedEmotionalMemoryManager"
      ],
      "functions": [
        "example_unified_usage",
        "__init__",
        "store",
        "retrieve",
        "analyze_emotional_patterns",
        "modulate_emotional_state",
        "quantum_enhance_emotions",
        "_check_memory_access",
        "_check_memory_ownership",
        "_track_user_memory"
      ],
      "async_functions": [
        "example_unified_usage",
        "store",
        "retrieve",
        "analyze_emotional_patterns",
        "modulate_emotional_state",
        "quantum_enhance_emotions",
        "_get_user_memories"
      ],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 30.5
    },
    "memory/episodic/drift_tracker.py": {
      "file_path": "memory/episodic/drift_tracker.py",
      "category": "memory_systems",
      "size_bytes": 4182,
      "size_kb": 4.1,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 14.2
    },
    "memory/episodic/recaller.py": {
      "file_path": "memory/episodic/recaller.py",
      "category": "memory_systems",
      "size_bytes": 2550,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 12.6
    },
    "memory/evolution.py": {
      "file_path": "memory/evolution.py",
      "category": "memory_systems",
      "size_bytes": 14827,
      "size_kb": 14.5,
      "lines": 1,
      "imports": [
        "logging",
        "threading",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.field"
      ],
      "classes": [
        "EvolutionType",
        "EvolutionEvent",
        "MemoryEvolutionEngine"
      ],
      "functions": [
        "get_global_evolution_engine",
        "evolve_memory_globally",
        "__init__",
        "_setup_default_rules",
        "_consolidation_rule",
        "_adaptation_rule",
        "_strengthening_rule",
        "_decay_rule",
        "_integration_rule",
        "_extract_key_features"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 31.0
    },
    "memory/memory_systems/memoria-checkpoint.py": {
      "file_path": "memory/memory_systems/memoria-checkpoint.py",
      "category": "memory_systems",
      "size_bytes": 701,
      "size_kb": 0.7,
      "lines": 3,
      "imports": [
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "Memoria"
      ],
      "functions": [
        "store",
        "trace"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 13.7
    },
    "memory/neocortical/concept_hierarchy.py": {
      "file_path": "memory/neocortical/concept_hierarchy.py",
      "category": "memory_systems",
      "size_bytes": 21698,
      "size_kb": 21.2,
      "lines": 6,
      "imports": [
        "numpy",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Tuple",
        "collections.defaultdict"
      ],
      "classes": [
        "ConceptNode",
        "ConceptHierarchy"
      ],
      "functions": [
        "add_child",
        "remove_child",
        "get_ancestors",
        "get_descendants",
        "get_siblings",
        "calculate_similarity",
        "__init__",
        "add_concept",
        "find_concept",
        "get_path"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 32.5
    },
    "memory/neocortical/semantic_extractor.py": {
      "file_path": "memory/neocortical/semantic_extractor.py",
      "category": "memory_systems",
      "size_bytes": 21152,
      "size_kb": 20.7,
      "lines": 6,
      "imports": [
        "numpy",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Optional",
        "collections.defaultdict",
        "collections.Counter",
        "json"
      ],
      "classes": [
        "SemanticExtractor"
      ],
      "functions": [
        "__init__",
        "extract_semantics",
        "extract_concept",
        "find_semantic_similarity",
        "_extract_episode_features",
        "_find_common_patterns",
        "_cluster_semantically",
        "_extract_relationships",
        "_build_abstractions",
        "_identify_primary_concept"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 26.0
    },
    "memory/node.py": {
      "file_path": "memory/node.py",
      "category": "memory_systems",
      "size_bytes": 3705,
      "size_kb": 3.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "numpy",
        "requests",
        "io.BytesIO",
        "base64",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "MemoryNode"
      ],
      "functions": [
        "__init__",
        "store",
        "retrieve",
        "retrieve_recent",
        "semantic_search",
        "_calculate_importance"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 20.7
    },
    "memory/openai_memory_adapter.py": {
      "file_path": "memory/openai_memory_adapter.py",
      "category": "memory_systems",
      "size_bytes": 16619,
      "size_kb": 16.2,
      "lines": 5,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "openai",
        "bridge.openai_core_service.OpenAICoreService",
        "bridge.openai_core_service.OpenAIRequest"
      ],
      "classes": [
        "MemoryOpenAIAdapter"
      ],
      "functions": [
        "demo_memory_adapter",
        "__init__",
        "compress_memory",
        "generate_memory_embedding",
        "find_similar_memories",
        "synthesize_memory_narrative",
        "analyze_memory_patterns",
        "generate_memory_visualization_prompt",
        "create_memory_visualization",
        "_cosine_similarity"
      ],
      "async_functions": [
        "demo_memory_adapter",
        "compress_memory",
        "generate_memory_embedding",
        "find_similar_memories",
        "synthesize_memory_narrative",
        "analyze_memory_patterns",
        "generate_memory_visualization_prompt",
        "create_memory_visualization"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 29.0
    },
    "memory/repair/advanced_trauma_repair.py": {
      "file_path": "memory/repair/advanced_trauma_repair.py",
      "category": "memory_systems",
      "size_bytes": 39992,
      "size_kb": 39.1,
      "lines": 7,
      "imports": [
        "asyncio",
        "math",
        "random",
        "time",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "enum.Enum"
      ],
      "classes": [
        "TraumaType",
        "RepairStrategy",
        "HealingPhase",
        "TraumaSignature",
        "RepairScaffold",
        "ImmuneResponse",
        "HelicalRepairMechanism",
        "TraumaRepairSystem",
        "IntegrityStatus",
        "TagScope"
      ],
      "functions": [
        "demonstrate_trauma_repair",
        "calculate_priority",
        "add_checkpoint",
        "matches_threat",
        "__init__",
        "repair_double_strand_break",
        "_template_directed_repair",
        "_homologous_recombination",
        "_detect_corruption",
        "__init__"
      ],
      "async_functions": [
        "demonstrate_trauma_repair",
        "repair_double_strand_break",
        "_template_directed_repair",
        "_homologous_recombination",
        "start",
        "stop",
        "detect_trauma",
        "initiate_repair",
        "apply_emdr_processing",
        "build_scar_tissue",
        "_execute_repair_strategy",
        "_reconstruct_memory",
        "_quarantine_infection",
        "_integrate_fragments",
        "_regenerate_memory",
        "_stabilize_memory",
        "_transform_trauma",
        "_create_immune_memory",
        "_detection_loop",
        "_repair_loop",
        "_immune_loop"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 54.0
    },
    "memory/resonance/resonant_memory_access.py": {
      "file_path": "memory/resonance/resonant_memory_access.py",
      "category": "memory_systems",
      "size_bytes": 25337,
      "size_kb": 24.7,
      "lines": 5,
      "imports": [
        "asyncio",
        "math",
        "numpy",
        "time",
        "collections.defaultdict",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "ResonanceMode",
        "ResonanceSignature",
        "ResonantCluster",
        "ResonantMemoryAccess"
      ],
      "functions": [
        "demonstrate_resonant_memory",
        "calculate_resonance_with",
        "update_coherence",
        "__init__",
        "start",
        "stop",
        "register_memory",
        "_extract_fundamental_frequency",
        "_generate_harmonics",
        "resonant_retrieve"
      ],
      "async_functions": [
        "demonstrate_resonant_memory",
        "start",
        "stop",
        "resonant_retrieve",
        "_cascade_resonance",
        "_oscillation_loop",
        "_maintenance_loop"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 36.5
    },
    "memory/service.py": {
      "file_path": "memory/service.py",
      "category": "memory_systems",
      "size_bytes": 22974,
      "size_kb": 22.4,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union",
        "datetime.datetime",
        "json",
        "logging"
      ],
      "classes": [
        "MemoryService",
        "IdentityClient"
      ],
      "functions": [
        "store_memory",
        "retrieve_memory",
        "search_memory",
        "delete_memory",
        "__init__",
        "store_memory",
        "retrieve_memory",
        "search_memory",
        "delete_memory",
        "get_memory_stats"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Contains service classes - integrate with service registry",
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 31.5
    },
    "memory/symbolic_integration.py": {
      "file_path": "memory/symbolic_integration.py",
      "category": "memory_systems",
      "size_bytes": 3829,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "logging"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 13.8
    },
    "memory/systems/adaptive_memory_engine.py": {
      "file_path": "memory/systems/adaptive_memory_engine.py",
      "category": "memory_systems",
      "size_bytes": 15547,
      "size_kb": 15.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "structlog"
      ],
      "classes": [
        "AdaptiveMemoryEngine"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "initialize",
        "process",
        "get_stats",
        "shutdown",
        "prioritize_folds",
        "_calculate_fold_priority",
        "recall_signature"
      ],
      "async_functions": [
        "initialize",
        "process",
        "get_stats",
        "shutdown",
        "prioritize_folds"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 26.0
    },
    "memory/systems/agent_memory_trace_animator.py": {
      "file_path": "memory/systems/agent_memory_trace_animator.py",
      "category": "memory_systems",
      "size_bytes": 29142,
      "size_kb": 28.5,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.0
    },
    "memory/systems/bio_symbolic_memory.py": {
      "file_path": "memory/systems/bio_symbolic_memory.py",
      "category": "memory_systems",
      "size_bytes": 13836,
      "size_kb": 13.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "structlog"
      ],
      "classes": [
        "WorkingMemoryBuffer",
        "EpisodicMemoryStore",
        "SemanticKnowledgeGraph",
        "ProceduralSkillNetwork",
        "MemoryConsolidationEngine",
        "BioSymbolicMemory"
      ],
      "functions": [
        "lukhas_tier_required",
        "__init__",
        "encode",
        "store",
        "integrate_patterns",
        "update_skill_pathways",
        "__init__",
        "extract_patterns",
        "decorator",
        "__init__"
      ],
      "async_functions": [
        "encode",
        "store",
        "integrate_patterns",
        "update_skill_pathways",
        "extract_patterns",
        "store_interaction",
        "_compute_importance",
        "_compute_decay_rate",
        "_find_related_memories"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 38.0
    },
    "memory/systems/causal_memory_chains.py": {
      "file_path": "memory/systems/causal_memory_chains.py",
      "category": "memory_systems",
      "size_bytes": 43527,
      "size_kb": 42.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "numpy",
        "hashlib",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "CausalRelationType",
        "CausalStrength",
        "CausalEvidence",
        "CausalRelation",
        "CausalChain",
        "TemporalCausalAnalyzer",
        "CausalGraphBuilder",
        "CausalReasoningEngine",
        "CausalMemoryWrapper"
      ],
      "functions": [
        "create_causal_memory_system",
        "example_causal_reasoning",
        "to_dict",
        "add_evidence",
        "_update_strength",
        "to_dict",
        "get_chain_length",
        "get_total_delay",
        "to_dict",
        "__init__"
      ],
      "async_functions": [
        "create_causal_memory_system",
        "example_causal_reasoning",
        "analyze_temporal_sequence",
        "_analyze_memory_pair",
        "_calculate_content_similarity",
        "_calculate_semantic_connection",
        "add_memory_for_causal_analysis",
        "analyze_causal_relationships",
        "find_causal_explanation",
        "predict_causal_outcomes",
        "identify_significant_causal_chains",
        "fold_in_with_causal_analysis",
        "fold_out_with_causal_context"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 55.0
    },
    "memory/systems/chatgpt_memory_integrator.py": {
      "file_path": "memory/systems/chatgpt_memory_integrator.py",
      "category": "memory_systems",
      "size_bytes": 32323,
      "size_kb": 31.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 22.0
    },
    "memory/systems/collapse_buffer.py": {
      "file_path": "memory/systems/collapse_buffer.py",
      "category": "memory_systems",
      "size_bytes": 1093,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "CollapseBuffer"
      ],
      "functions": [
        "__init__",
        "buffer_event"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.1
    },
    "memory/systems/collapse_trace.py": {
      "file_path": "memory/systems/collapse_trace.py",
      "category": "memory_systems",
      "size_bytes": 2623,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "logging",
        "uuid",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "CollapseTrace"
      ],
      "functions": [
        "get_global_tracer",
        "__init__",
        "log_collapse",
        "get_collapse_history"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 18.6
    },
    "memory/systems/dream_integrator.py": {
      "file_path": "memory/systems/dream_integrator.py",
      "category": "memory_systems",
      "size_bytes": 21815,
      "size_kb": 21.3,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "asyncio",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "DreamState",
        "DreamType",
        "DreamFragment",
        "DreamSession",
        "DreamMemoryLinker",
        "DreamIntegrator"
      ],
      "functions": [
        "get_dream_integrator",
        "initiate_dream",
        "add_fragment",
        "integrate_dream",
        "get_dream_status",
        "__init__",
        "create_memory_link",
        "get_linked_memories",
        "find_related_dreams",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 40.0
    },
    "memory/systems/dream_memory_export.py": {
      "file_path": "memory/systems/dream_memory_export.py",
      "category": "memory_systems",
      "size_bytes": 8951,
      "size_kb": 8.7,
      "lines": 9,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 15.0
    },
    "memory/systems/dream_memory_manager.py": {
      "file_path": "memory/systems/dream_memory_manager.py",
      "category": "memory_systems",
      "size_bytes": 20021,
      "size_kb": 19.6,
      "lines": 1,
      "imports": [
        "asyncio",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "structlog",
        "memory_drift_stabilizer.MemoryDriftStabilizer"
      ],
      "classes": [
        "DreamMemoryManager"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "initialize",
        "process_dream_cycle",
        "_calculate_drift_score",
        "_check_for_instability",
        "get_stats",
        "shutdown"
      ],
      "async_functions": [
        "initialize",
        "process_dream_cycle",
        "get_stats",
        "shutdown"
      ],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 25.5
    },
    "memory/systems/dream_trace_linker.py": {
      "file_path": "memory/systems/dream_trace_linker.py",
      "category": "memory_systems",
      "size_bytes": 53195,
      "size_kb": 51.9,
      "lines": 2,
      "imports": [
        "json",
        "hashlib",
        "os",
        "re",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "GlyphResonanceLevel",
        "DreamTraceType",
        "GlyphSignature",
        "IdentitySignature",
        "EmotionalEcho",
        "DreamTraceLink",
        "DreamTraceLinker"
      ],
      "functions": [
        "create_dream_trace_linker",
        "__init__",
        "link_dream_to_memory",
        "_extract_glyph_signatures",
        "_correlate_identity_signatures",
        "_propagate_emotional_echoes",
        "_calculate_dream_drift_metrics",
        "_determine_tier_gate",
        "_calculate_entanglement_level",
        "_check_safeguards"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 50.5
    },
    "memory/systems/engine.py": {
      "file_path": "memory/systems/engine.py",
      "category": "memory_systems",
      "size_bytes": 7397,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "MemoryEngine"
      ],
      "functions": [
        "create_memory_component",
        "create_and_initialize_memory_component",
        "__init__",
        "initialize",
        "_setup_memory_system",
        "process",
        "_core_memory_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_memory_component",
        "initialize",
        "_setup_memory_system",
        "process",
        "_core_memory_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 33.0
    },
    "memory/systems/episodic_replay_buffer.py": {
      "file_path": "memory/systems/episodic_replay_buffer.py",
      "category": "memory_systems",
      "size_bytes": 49554,
      "size_kb": 48.4,
      "lines": 8,
      "imports": [
        "asyncio",
        "numpy",
        "random",
        "heapq",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "ReplayStrategy",
        "ConsolidationPhase",
        "EpisodicMemory",
        "PrioritizedReplayBuffer",
        "DreamStateReplay",
        "EpisodicReplayMemoryWrapper"
      ],
      "functions": [
        "create_episodic_replay_memory",
        "example_episodic_replay",
        "update_priority",
        "mark_replayed",
        "to_dict",
        "__init__",
        "add_experience",
        "sample_batch",
        "_sample_uniform_random",
        "_sample_priority_based"
      ],
      "async_functions": [
        "create_episodic_replay_memory",
        "example_episodic_replay",
        "enter_dream_state",
        "_perform_dream_cycle",
        "store_experience",
        "replay_and_learn",
        "enter_dream_state"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 51.0
    },
    "memory/systems/exponential_learning.py": {
      "file_path": "memory/systems/exponential_learning.py",
      "category": "memory_systems",
      "size_bytes": 10653,
      "size_kb": 10.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "datetime.timezone",
        "structlog"
      ],
      "classes": [
        "ExponentialLearningSystem"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "incorporate_experience",
        "_extract_patterns",
        "_update_knowledge_base",
        "_consolidate_knowledge_base",
        "get_status"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 23.0
    },
    "memory/systems/glyph_memory_bridge.py": {
      "file_path": "memory/systems/glyph_memory_bridge.py",
      "category": "memory_systems",
      "size_bytes": 21982,
      "size_kb": 21.5,
      "lines": 1,
      "imports": [
        "logging",
        "hashlib",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Union"
      ],
      "classes": [
        "GlyphMemoryIndex",
        "GlyphMemoryBridge"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "create_glyph_indexed_memory",
        "recall_by_glyph",
        "create_drift_anchor",
        "assess_memory_drift",
        "get_memory_by_causal_link",
        "create_retrieval_filter",
        "_emotion_to_vector",
        "_link_glyph_to_memory"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 27.5
    },
    "memory/systems/identity_lineage_bridge.py": {
      "file_path": "memory/systems/identity_lineage_bridge.py",
      "category": "memory_systems",
      "size_bytes": 31732,
      "size_kb": 31.0,
      "lines": 4,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "ProtectionLevel",
        "ThreatType",
        "IdentityThreat",
        "ProtectionAction",
        "IdentityLineageBridge"
      ],
      "functions": [
        "__init__",
        "validate_memory_operation",
        "protect_identity_anchor",
        "detect_collapse_trauma_threats",
        "create_recovery_protocol",
        "get_identity_protection_status",
        "_check_identity_module",
        "_analyze_operation_threats",
        "_evaluate_protection_response",
        "_apply_protection_measures"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 34.5
    },
    "memory/systems/in_memory_cache_storage_wrapper.py": {
      "file_path": "memory/systems/in_memory_cache_storage_wrapper.py",
      "category": "memory_systems",
      "size_bytes": 8983,
      "size_kb": 8.8,
      "lines": 1,
      "imports": [
        "math",
        "threading",
        "typing.Optional",
        "typing.Union",
        "cachetools.TTLCache",
        "streamlit.logger.get_logger",
        "streamlit.runtime.caching.cache_utils",
        "streamlit.runtime.caching.storage.cache_storage_protocol.CacheStorage",
        "streamlit.runtime.caching.storage.cache_storage_protocol.CacheStorageContext",
        "streamlit.runtime.caching.storage.cache_storage_protocol.CacheStorageKeyNotFoundError"
      ],
      "classes": [
        "InMemoryCacheStorageWrapper",
        "CacheStorage",
        "CacheStorageContext",
        "CacheStorageKeyNotFoundError",
        "CacheStat",
        "CacheUtils"
      ],
      "functions": [
        "__init__",
        "ttl_seconds",
        "max_entries",
        "get",
        "set",
        "delete",
        "clear",
        "get_stats",
        "close",
        "_read_from_mem_cache"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 38.5
    },
    "memory/systems/in_memory_log_exporter.py": {
      "file_path": "memory/systems/in_memory_log_exporter.py",
      "category": "memory_systems",
      "size_bytes": 3782,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "threading",
        "typing",
        "dataclasses.dataclass",
        "opentelemetry.sdk._logs.LogData",
        "opentelemetry.sdk._logs.export.LogExporter",
        "opentelemetry.sdk._logs.export.LogExportResult",
        "structlog"
      ],
      "classes": [
        "InMemoryLogExporter",
        "LogData",
        "LogExporter",
        "LogExportResult"
      ],
      "functions": [
        "__init__",
        "clear",
        "get_finished_logs",
        "export",
        "shutdown",
        "export",
        "shutdown"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 27.3
    },
    "memory/systems/in_memory_span_exporter.py": {
      "file_path": "memory/systems/in_memory_span_exporter.py",
      "category": "memory_systems",
      "size_bytes": 4096,
      "size_kb": 4.0,
      "lines": 1,
      "imports": [
        "threading",
        "typing",
        "dataclasses.dataclass",
        "opentelemetry.sdk.trace.ReadableSpan",
        "opentelemetry.sdk.trace.export.SpanExporter",
        "opentelemetry.sdk.trace.export.SpanExportResult",
        "structlog"
      ],
      "classes": [
        "InMemorySpanExporter",
        "ReadableSpan",
        "SpanExporter",
        "SpanExportResult"
      ],
      "functions": [
        "__init__",
        "clear",
        "get_finished_spans",
        "export",
        "shutdown",
        "force_flush",
        "export",
        "shutdown",
        "force_flush"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 28.6
    },
    "memory/systems/integration_bridge.py": {
      "file_path": "memory/systems/integration_bridge.py",
      "category": "memory_systems",
      "size_bytes": 5967,
      "size_kb": 5.8,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.0
    },
    "memory/systems/integrity_collapser.py": {
      "file_path": "memory/systems/integrity_collapser.py",
      "category": "memory_systems",
      "size_bytes": 1134,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "typing.List",
        "typing.Dict"
      ],
      "classes": [],
      "functions": [
        "collapse_score",
        "recover_overflow",
        "snapshot_entropy"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 12.6
    },
    "memory/systems/learn_to_learn.py": {
      "file_path": "memory/systems/learn_to_learn.py",
      "category": "memory_systems",
      "size_bytes": 12187,
      "size_kb": 11.9,
      "lines": 1,
      "imports": [
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone",
        "numpy",
        "structlog"
      ],
      "classes": [
        "MetaLearningSystem"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "optimize_learning_approach",
        "incorporate_feedback",
        "generate_learning_report",
        "_initialize_strategies",
        "_extract_learning_features",
        "_select_learning_strategy",
        "_apply_learning_strategy"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 28.5
    },
    "memory/systems/lukhas_memory_encryptor.py": {
      "error": "File not found",
      "file_path": "memory/systems/lukhas_memory_encryptor.py"
    },
    "memory/systems/lukhas_memory_recall.py": {
      "error": "File not found",
      "file_path": "memory/systems/lukhas_memory_recall.py"
    },
    "memory/systems/memoria/dream_cron.py": {
      "file_path": "memory/systems/memoria/dream_cron.py",
      "category": "memory_systems",
      "size_bytes": 8284,
      "size_kb": 8.1,
      "lines": 10,
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "os",
        "time",
        "subprocess",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.List"
      ],
      "classes": [],
      "functions": [
        "run_lukhas_symbolic_dream_script",
        "main_dream_scheduler_loop"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/memoria/dreams.py": {
      "file_path": "memory/systems/memoria/dreams.py",
      "category": "memory_systems",
      "size_bytes": 18354,
      "size_kb": 17.9,
      "lines": 14,
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "os",
        "sys",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.List",
        "typing.Dict"
      ],
      "classes": [
        "_MockChoiceContentDreamsDP",
        "_MockMessageDreamsDP",
        "_MockResponseDreamsDP",
        "OpenAI",
        "APIError"
      ],
      "functions": [
        "compute_survival_score",
        "generate_dream_narrative",
        "extract_visual_prompts_from_dream",
        "save_dream_to_log",
        "load_all_entries",
        "load_traits",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 30.5
    },
    "memory/systems/memoria/dreams_alt.py": {
      "file_path": "memory/systems/memoria/dreams_alt.py",
      "category": "memory_systems",
      "size_bytes": 3897,
      "size_kb": 3.8,
      "lines": 5,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 13.9
    },
    "memory/systems/memoria/reflector.py": {
      "file_path": "memory/systems/memoria/reflector.py",
      "category": "memory_systems",
      "size_bytes": 8614,
      "size_kb": 8.4,
      "lines": 1,
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "json",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.List",
        "typing.Dict"
      ],
      "classes": [],
      "functions": [
        "load_dream_memories_from_log",
        "reflect_on_dream_memories",
        "run_dream_reflection_cycle"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.5
    },
    "memory/systems/memoria/replayer.py": {
      "file_path": "memory/systems/memoria/replayer.py",
      "category": "memory_systems",
      "size_bytes": 10556,
      "size_kb": 10.3,
      "lines": 2,
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "json",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.List",
        "typing.Dict"
      ],
      "classes": [],
      "functions": [
        "load_recent_dream_logs",
        "replay_dreams_with_current_state",
        "load_traits",
        "speak",
        "log_symbolic_ai_memory_event",
        "display_visual_traits"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 18.0
    },
    "memory/systems/memoria_codex.py": {
      "file_path": "memory/systems/memoria_codex.py",
      "category": "memory_systems",
      "size_bytes": 11296,
      "size_kb": 11.0,
      "lines": 5,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "classes": [],
      "functions": [
        "log_memory",
        "get_full_memory_log"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/memoria_system.py": {
      "file_path": "memory/systems/memoria_system.py",
      "category": "memory_systems",
      "size_bytes": 4784,
      "size_kb": 4.7,
      "lines": 2,
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "pathlib.Path",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "uuid"
      ],
      "classes": [],
      "functions": [
        "log_memory"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 15.3
    },
    "memory/systems/memory_advanced_manager.py": {
      "file_path": "memory/systems/memory_advanced_manager.py",
      "category": "memory_systems",
      "size_bytes": 51057,
      "size_kb": 49.9,
      "lines": 1,
      "imports": [
        "uuid",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "structlog",
        "learning.memory_learning.memory_manager.MemoryManager"
      ],
      "classes": [
        "AdvancedMemoryManager"
      ],
      "functions": [
        "lukhas_tier_required",
        "demo_advanced_memory_manager",
        "decorator",
        "__init__",
        "_load_emotion_vectors",
        "store_memory",
        "retrieve_memory",
        "search_memories",
        "retrieve_by_emotion",
        "consolidate_memories"
      ],
      "async_functions": [
        "demo_advanced_memory_manager",
        "store_memory",
        "retrieve_memory",
        "search_memories",
        "retrieve_by_emotion",
        "consolidate_memories",
        "_process_emotional_context",
        "_update_memory_clusters",
        "_apply_quantum_attention",
        "get_related_memories",
        "optimize_memory_storage"
      ],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 29.0
    },
    "memory/systems/memory_bases.py": {
      "file_path": "memory/systems/memory_bases.py",
      "category": "memory_systems",
      "size_bytes": 2170,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "abc.ABC",
        "abc.abstractmethod",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime"
      ],
      "classes": [
        "MemoryManager",
        "MemoryAccessPolicy",
        "MemoryIdentityIntegration"
      ],
      "functions": [
        "__init__",
        "store",
        "retrieve",
        "delete",
        "log_access",
        "__init__",
        "can_access",
        "__init__",
        "link_memory_to_identity",
        "get_identity_memories"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 25.2
    },
    "memory/systems/memory_checkpoint.py": {
      "file_path": "memory/systems/memory_checkpoint.py",
      "category": "memory_systems",
      "size_bytes": 1073,
      "size_kb": 1.0,
      "lines": 3,
      "imports": [
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "Memoria"
      ],
      "functions": [
        "store",
        "trace"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 14.1
    },
    "memory/systems/memory_comprehensive.py": {
      "file_path": "memory/systems/memory_comprehensive.py",
      "category": "memory_systems",
      "size_bytes": 9832,
      "size_kb": 9.6,
      "lines": 19,
      "imports": [
        "asyncio",
        "logging",
        "time",
        "pathlib.Path",
        "sys",
        "memory.core_memory.simple_store.UnifiedMemoryManager",
        "memory.core_memory.simple_store.MemoryType",
        "memory.core_memory.simple_store.MemoryPriority",
        "memory.core_memory.simple_store.MemoryConfig",
        "traceback"
      ],
      "classes": [],
      "functions": [
        "test_memory_lifecycle",
        "test_error_conditions",
        "main"
      ],
      "async_functions": [
        "test_memory_lifecycle",
        "test_error_conditions",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 21.5
    },
    "memory/systems/memory_consolidation.py": {
      "file_path": "memory/systems/memory_consolidation.py",
      "category": "memory_systems",
      "size_bytes": 861,
      "size_kb": 0.8,
      "lines": 1,
      "imports": [],
      "classes": [
        "MemoryConsolidationEngine"
      ],
      "functions": [
        "__init__",
        "extract_patterns",
        "consolidate_memory",
        "compute_decay_rate"
      ],
      "async_functions": [
        "extract_patterns",
        "consolidate_memory"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 18.9
    },
    "memory/systems/memory_consolidator.py": {
      "file_path": "memory/systems/memory_consolidator.py",
      "category": "memory_systems",
      "size_bytes": 5839,
      "size_kb": 5.7,
      "lines": 1,
      "imports": [
        "os",
        "shutil",
        "pathlib.Path",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "json",
        "re"
      ],
      "classes": [
        "MemorySystemConsolidator"
      ],
      "functions": [
        "main",
        "__init__",
        "consolidate",
        "_consolidate_memory_files",
        "_merge_implementations",
        "_tag_critical_files"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 25.0
    },
    "memory/systems/memory_drift_mirror.py": {
      "file_path": "memory/systems/memory_drift_mirror.py",
      "category": "memory_systems",
      "size_bytes": 6545,
      "size_kb": 6.4,
      "lines": 2,
      "imports": [
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "collections.deque",
        "numpy",
        "logging"
      ],
      "classes": [
        "MemoryDriftMirror"
      ],
      "functions": [
        "__init__",
        "analyze_drift",
        "_load_recent_drifts",
        "_classify_drift_sequence",
        "_store_classification",
        "_emit_warnings"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 22.0
    },
    "memory/systems/memory_encryptor.py": {
      "file_path": "memory/systems/memory_encryptor.py",
      "category": "memory_systems",
      "size_bytes": 8728,
      "size_kb": 8.5,
      "lines": 1,
      "imports": [
        "json",
        "os",
        "uuid",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "encrypt_memory",
        "encrypt_user_file"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/memory_evolution.py": {
      "file_path": "memory/systems/memory_evolution.py",
      "category": "memory_systems",
      "size_bytes": 18697,
      "size_kb": 18.3,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "numpy",
        "core.docututor.memory_evolution.bio_oscillator.BioOscillatorAdapter",
        "core.docututor.memory_evolution.document_analyzer.DocumentStructureAnalyzer"
      ],
      "classes": [
        "MemoryEvolution",
        "DocumentVersionControl",
        "KnowledgeAdaptation",
        "UsageBasedLearning",
        "BioOscillatorAdapter",
        "DocumentStructureAnalyzer",
        "VoiceSynthesisAdapter"
      ],
      "functions": [
        "__init__",
        "create_document",
        "_update_semantic_relationships",
        "_find_semantic_relations",
        "_prune_semantic_cache",
        "update_document",
        "record_interaction",
        "get_document_history",
        "get_related_documents",
        "get_recommendations"
      ],
      "async_functions": [
        "synthesize_document",
        "adapt_voice_settings",
        "adapt_voice"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 52.5
    },
    "memory/systems/memory_format.py": {
      "file_path": "memory/systems/memory_format.py",
      "category": "memory_systems",
      "size_bytes": 7899,
      "size_kb": 7.7,
      "lines": 1,
      "imports": [
        "torch"
      ],
      "classes": [],
      "functions": [
        "convert_conv2d_weight_memory_format",
        "convert_conv3d_weight_memory_format"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/memory_handler.py": {
      "file_path": "memory/systems/memory_handler.py",
      "category": "memory_systems",
      "size_bytes": 1478,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 11.5
    },
    "memory/systems/memory_helix.py": {
      "file_path": "memory/systems/memory_helix.py",
      "category": "memory_systems",
      "size_bytes": 27631,
      "size_kb": 27.0,
      "lines": 1,
      "imports": [
        "logging",
        "asyncio",
        "json",
        "os",
        "re",
        "time",
        "uuid",
        "typing.Dict",
        "typing.Any",
        "typing.List"
      ],
      "classes": [
        "VoiceMemoryHelix"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "_load_memory",
        "save_memory",
        "detect_new_words",
        "_is_unusual_word",
        "learn_from_pronunciation",
        "get_curious_word",
        "practice_pronunciation",
        "_blend_pronunciations"
      ],
      "async_functions": [
        "detect_new_words",
        "_is_unusual_word",
        "learn_from_pronunciation",
        "practice_pronunciation",
        "detect_accent"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 28.0
    },
    "memory/systems/memory_helix_golden.py": {
      "file_path": "memory/systems/memory_helix_golden.py",
      "category": "memory_systems",
      "size_bytes": 52499,
      "size_kb": 51.3,
      "lines": 2,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "asyncio"
      ],
      "classes": [
        "MemoryStrand",
        "MutationStrategy",
        "HealixMapper"
      ],
      "functions": [
        "__init__",
        "encode_memory",
        "mutate_memory",
        "_validate_pattern",
        "_calculate_pattern_coherence",
        "_calculate_resonance",
        "_generate_memory_id",
        "_find_memory",
        "_apply_point_mutation",
        "_apply_insertion"
      ],
      "async_functions": [
        "encode_memory",
        "mutate_memory",
        "_validate_pattern",
        "_calculate_pattern_coherence",
        "_calculate_resonance",
        "_generate_memory_id",
        "_find_memory",
        "_apply_point_mutation",
        "_apply_insertion",
        "_apply_deletion",
        "_apply_crossover",
        "search_memories",
        "_matches_query",
        "_calculate_match_score",
        "retrieve_memory",
        "_update_access_patterns",
        "consolidate_memories",
        "_calculate_memory_similarity",
        "_consolidate_memory_pair",
        "analyze_emotional_drift",
        "extract_symbolic_patterns",
        "_analyze_strand_patterns",
        "_find_cross_strand_patterns",
        "_cluster_symbolic_elements",
        "_analyze_resonance_patterns",
        "create_memory_snapshot"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 38.5
    },
    "memory/systems/memory_helix_visualizer.py": {
      "file_path": "memory/systems/memory_helix_visualizer.py",
      "category": "memory_systems",
      "size_bytes": 12549,
      "size_kb": 12.3,
      "lines": 1,
      "imports": [
        "logging",
        "plotly.graph_objects",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "time",
        "datetime.datetime"
      ],
      "classes": [
        "MemoryHelixVisualizer"
      ],
      "functions": [
        "__init__",
        "get_memory_coordinates",
        "get_authorized_memories",
        "visualize_memory_helix",
        "create_interactive_visualization",
        "update_memory_links"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 22.0
    },
    "memory/systems/memory_introspection_engine.py": {
      "file_path": "memory/systems/memory_introspection_engine.py",
      "category": "memory_systems",
      "size_bytes": 1797,
      "size_kb": 1.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "structlog",
        "fold_engine.MemoryFold"
      ],
      "classes": [
        "MemoryIntrospectionEngine"
      ],
      "functions": [
        "__init__",
        "compute_fold_metrics",
        "snapshot_memory_state",
        "introspect"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 17.8
    },
    "memory/systems/memory_learning/memory_manager.py": {
      "file_path": "memory/systems/memory_learning/memory_manager.py",
      "category": "memory_systems",
      "size_bytes": 35038,
      "size_kb": 34.2,
      "lines": 1,
      "imports": [
        "logging",
        "json",
        "os",
        "time",
        "hashlib",
        "uuid",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "MemoryAccessError",
        "MemoryManager"
      ],
      "functions": [
        "__init__",
        "_init_access_requirements",
        "process_dream_cycle",
        "_get_recent_memories",
        "store",
        "retrieve",
        "forget",
        "batch_forget",
        "extract_user_insights",
        "get_interaction_history"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 28.0
    },
    "memory/systems/memory_lock.py": {
      "file_path": "memory/systems/memory_lock.py",
      "category": "memory_systems",
      "size_bytes": 15618,
      "size_kb": 15.3,
      "lines": 1,
      "imports": [
        "logging",
        "os",
        "time",
        "json",
        "hashlib",
        "base64",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "TraumaLockSystem"
      ],
      "functions": [
        "__init__",
        "_generate_system_key",
        "_initialize_access_policies",
        "encrypt_memory",
        "decrypt_memory",
        "_derive_memory_key",
        "_encrypt_data",
        "_decrypt_data",
        "_generate_secure_vector",
        "_generate_context_vector"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 25.5
    },
    "memory/systems/memory_media_file_storage.py": {
      "file_path": "memory/systems/memory_media_file_storage.py",
      "category": "memory_systems",
      "size_bytes": 6252,
      "size_kb": 6.1,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "contextlib",
        "hashlib",
        "mimetypes",
        "os.path",
        "typing.Final",
        "typing.NamedTuple",
        "streamlit.logger.get_logger",
        "streamlit.runtime.media_file_storage.MediaFileKind",
        "streamlit.runtime.media_file_storage.MediaFileStorage"
      ],
      "classes": [
        "MemoryFile",
        "MemoryMediaFileStorage"
      ],
      "functions": [
        "_calculate_file_id",
        "get_extension_for_mimetype",
        "content_size",
        "__init__",
        "load_and_get_id",
        "get_file",
        "get_url",
        "delete_file",
        "_read_file",
        "get_stats"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 26.0
    },
    "memory/systems/memory_node.py": {
      "file_path": "memory/systems/memory_node.py",
      "category": "memory_systems",
      "size_bytes": 22297,
      "size_kb": 21.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "logging",
        "time",
        "hashlib",
        "uuid"
      ],
      "classes": [
        "MemoryNode"
      ],
      "functions": [
        "__init__",
        "store",
        "retrieve",
        "retrieve_recent",
        "retrieve_by_type",
        "semantic_search",
        "forget",
        "add_to_working_memory",
        "clear_working_memory",
        "update_memory"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 29.0
    },
    "memory/systems/memory_planning.py": {
      "file_path": "memory/systems/memory_planning.py",
      "category": "memory_systems",
      "size_bytes": 25081,
      "size_kb": 24.5,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "collections",
        "dataclasses",
        "itertools",
        "pprint",
        "typing.Any",
        "typing.Optional",
        "typing.Protocol",
        "typing.TYPE_CHECKING",
        "sympy"
      ],
      "classes": [
        "LiveRange",
        "LiveRanges",
        "AllocationTreeNode",
        "Allocation",
        "Empty",
        "MemorySplitProtocol",
        "ClearCacheOnAllocateMixin",
        "TemporalSplit",
        "SpatialSplit",
        "AllocationPool",
        "AllocationPools",
        "BufferGroup",
        "PoolMemoryPlanningLine",
        "AllocFromPoolLine",
        "DeallocFromPoolLine",
        "MemoryPlanner"
      ],
      "functions": [
        "contains",
        "join",
        "__len__",
        "__init__",
        "overlaps",
        "begin",
        "end",
        "__repr__",
        "allocate",
        "get_live_ranges"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 83.0
    },
    "memory/systems/memory_processing.py": {
      "file_path": "memory/systems/memory_processing.py",
      "category": "memory_systems",
      "size_bytes": 9508,
      "size_kb": 9.3,
      "lines": 1,
      "imports": [
        "datetime",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "enum.Enum",
        "logging"
      ],
      "classes": [
        "EmotionalState",
        "MemoryNode",
        "MemoryProcessor"
      ],
      "functions": [
        "__init__",
        "store_interaction",
        "get_relevant_memories",
        "_calculate_importance",
        "update_memory_references",
        "get_emotional_summary",
        "export_memories",
        "import_memories",
        "cluster_memories",
        "get_memory_timeline"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 28.5
    },
    "memory/systems/memory_profiler.py": {
      "file_path": "memory/systems/memory_profiler.py",
      "category": "memory_systems",
      "size_bytes": 50328,
      "size_kb": 49.1,
      "lines": 4,
      "imports": [
        "collections",
        "dataclasses",
        "enum",
        "itertools",
        "logging",
        "collections.abc.Iterator",
        "typing.Any",
        "typing.cast",
        "typing.Optional",
        "typing.Union"
      ],
      "classes": [
        "Category",
        "Action",
        "Key",
        "_Storage",
        "TensorKey",
        "SchemaMatcher",
        "OpTree",
        "SizeMap",
        "DataFlowEdge",
        "DataFlowNode",
        "DataFlowGraph",
        "CategoryElement",
        "CategoryDict",
        "MemoryProfile",
        "MemoryProfileTimeline"
      ],
      "functions": [
        "_extract_parameters_and_gradients",
        "extract_parameters",
        "extract_gradients",
        "get_scopes",
        "__repr__",
        "__eq__",
        "__hash__",
        "__repr__",
        "__lt__",
        "_make"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 80.5
    },
    "memory/systems/memory_recall.py": {
      "file_path": "memory/systems/memory_recall.py",
      "category": "memory_systems",
      "size_bytes": 9694,
      "size_kb": 9.5,
      "lines": 1,
      "imports": [
        "os",
        "json",
        "uuid",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "recall_memories",
        "decrypt_user_file",
        "generate_sid"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.5
    },
    "memory/systems/memory_reflector.py": {
      "file_path": "memory/systems/memory_reflector.py",
      "category": "memory_systems",
      "size_bytes": 7160,
      "size_kb": 7.0,
      "lines": 1,
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [],
      "functions": [
        "store_interaction",
        "recall_last_interaction"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/memory_research.py": {
      "file_path": "memory/systems/memory_research.py",
      "category": "memory_systems",
      "size_bytes": 11996,
      "size_kb": 11.7,
      "lines": 1,
      "imports": [
        "warnings",
        "collections.OrderedDict",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "types.TracebackType",
        "typing.Generic",
        "typing.NamedTuple",
        "typing.TypeVar",
        "_core._testing.TaskInfo"
      ],
      "classes": [
        "MemoryObjectStreamStatistics",
        "MemoryObjectItemReceiver",
        "MemoryObjectStreamState",
        "MemoryObjectReceiveStream",
        "MemoryObjectSendStream"
      ],
      "functions": [
        "__repr__",
        "statistics",
        "__post_init__",
        "receive_nowait",
        "receive",
        "clone",
        "close",
        "aclose",
        "statistics",
        "__enter__"
      ],
      "async_functions": [
        "receive",
        "aclose",
        "send",
        "aclose"
      ],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 38.0
    },
    "memory/systems/memory_resonance_analyzer.py": {
      "file_path": "memory/systems/memory_resonance_analyzer.py",
      "category": "memory_systems",
      "size_bytes": 1376,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "MemoryResonanceAnalyzer"
      ],
      "functions": [
        "__init__",
        "analyze_resonance"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.4
    },
    "memory/systems/memory_seeder.py": {
      "file_path": "memory/systems/memory_seeder.py",
      "category": "memory_systems",
      "size_bytes": 2912,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "random",
        "hashlib",
        "json"
      ],
      "classes": [],
      "functions": [
        "generate_seed_memory",
        "seed_memory_store"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 13.9
    },
    "memory/systems/memory_session_storage.py": {
      "file_path": "memory/systems/memory_session_storage.py",
      "category": "memory_systems",
      "size_bytes": 3001,
      "size_kb": 2.9,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "typing.TYPE_CHECKING",
        "cachetools.TTLCache",
        "streamlit.runtime.session_manager.SessionInfo",
        "streamlit.runtime.session_manager.SessionStorage",
        "collections.abc.MutableMapping"
      ],
      "classes": [
        "MemorySessionStorage"
      ],
      "functions": [
        "__init__",
        "get",
        "save",
        "delete",
        "list"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.5
    },
    "memory/systems/memory_trace.py": {
      "file_path": "memory/systems/memory_trace.py",
      "category": "memory_systems",
      "size_bytes": 3422,
      "size_kb": 3.3,
      "lines": 3,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 15.4
    },
    "memory/systems/memory_trace_logger.py": {
      "file_path": "memory/systems/memory_trace_logger.py",
      "category": "memory_systems",
      "size_bytes": 3129,
      "size_kb": 3.1,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 13.1
    },
    "memory/systems/memory_tracker.py": {
      "file_path": "memory/systems/memory_tracker.py",
      "category": "memory_systems",
      "size_bytes": 11521,
      "size_kb": 11.3,
      "lines": 1,
      "imports": [
        "operator",
        "pickle",
        "collections.defaultdict",
        "collections.abc.Sequence",
        "itertools.chain",
        "typing.Any",
        "typing.Callable",
        "typing.no_type_check",
        "typing.TYPE_CHECKING",
        "torch"
      ],
      "classes": [
        "MemoryProfileDispatchMode",
        "MemoryTracker"
      ],
      "functions": [
        "__init__",
        "__torch_dispatch__",
        "__init__",
        "start_monitor",
        "stop",
        "summary",
        "show_traces",
        "save_stats",
        "load",
        "_create_pre_forward_hook"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 30.5
    },
    "memory/systems/memory_utils.py": {
      "file_path": "memory/systems/memory_utils.py",
      "category": "memory_systems",
      "size_bytes": 4178,
      "size_kb": 4.1,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime"
      ],
      "classes": [
        "MemoryUtils"
      ],
      "functions": [
        "generate_memory_id",
        "encrypt_memory_data",
        "decrypt_memory_data",
        "validate_memory_access",
        "format_memory_timestamp",
        "calculate_memory_size"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.2
    },
    "memory/systems/memory_viz.py": {
      "file_path": "memory/systems/memory_viz.py",
      "category": "memory_systems",
      "size_bytes": 25726,
      "size_kb": 25.1,
      "lines": 20,
      "imports": [
        "base64",
        "io",
        "json",
        "logging",
        "operator",
        "os",
        "pickle",
        "subprocess",
        "sys",
        "warnings"
      ],
      "classes": [
        "Bytes"
      ],
      "functions": [
        "_frame_fmt",
        "_frame_filter",
        "_frames_fmt",
        "_block_extra_legacy",
        "_block_extra",
        "format_flamegraph",
        "_write_blocks",
        "segments",
        "memory",
        "compare"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 36.5
    },
    "memory/systems/memory_voice_helix.py": {
      "file_path": "memory/systems/memory_voice_helix.py",
      "category": "memory_systems",
      "size_bytes": 20258,
      "size_kb": 19.8,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.0
    },
    "memory/systems/meta_learning_patterns.py": {
      "file_path": "memory/systems/meta_learning_patterns.py",
      "category": "memory_systems",
      "size_bytes": 77237,
      "size_kb": 75.4,
      "lines": 5,
      "imports": [
        "asyncio",
        "numpy",
        "json",
        "hashlib",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "PatternType",
        "LearningPhase",
        "LearningEvent",
        "MetaLearningPattern",
        "LearningTrajectoryAnalyzer",
        "PatternExtractor",
        "MetaLearningPatternSystem"
      ],
      "functions": [
        "create_meta_learning_system",
        "example_meta_learning_usage",
        "to_feature_vector",
        "to_dict",
        "from_dict",
        "__init__",
        "analyze_trajectory",
        "_smooth_series",
        "_identify_learning_phases",
        "_classify_trajectory_type"
      ],
      "async_functions": [
        "create_meta_learning_system",
        "example_meta_learning_usage",
        "extract_patterns",
        "_cluster_trajectories",
        "_extract_cluster_patterns",
        "_extract_sequence_pattern",
        "_extract_strategy_pattern",
        "_extract_attention_pattern",
        "_extract_meta_patterns",
        "_analyze_pattern_combinations",
        "_analyze_pattern_evolution",
        "_load_patterns",
        "_save_patterns",
        "extract_patterns_from_episodes",
        "_convert_to_learning_events",
        "_memory_to_learning_event",
        "_generate_pattern_embedding",
        "find_similar_patterns",
        "recommend_patterns_for_task"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 58.5
    },
    "memory/systems/multimodal_memory_support.py": {
      "file_path": "memory/systems/multimodal_memory_support.py",
      "category": "memory_systems",
      "size_bytes": 40310,
      "size_kb": 39.4,
      "lines": 3,
      "imports": [
        "asyncio",
        "numpy",
        "base64",
        "hashlib",
        "mimetypes",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union"
      ],
      "classes": [
        "ModalityType",
        "ModalityMetadata",
        "MultiModalMemoryData",
        "ImageProcessor",
        "AudioProcessor",
        "MultiModalMemoryProcessor",
        "MultiModalMemoryItem"
      ],
      "functions": [
        "create_multimodal_memory",
        "example_multimodal_usage",
        "__init__",
        "process_image",
        "extract_image_features",
        "__init__",
        "process_audio",
        "extract_audio_features",
        "__init__",
        "process_multimodal_memory"
      ],
      "async_functions": [
        "create_multimodal_memory",
        "example_multimodal_usage",
        "process_multimodal_memory",
        "_generate_text_embedding",
        "_normalize_embedding",
        "_generate_unified_embedding",
        "_calculate_alignment_scores"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 44.5
    },
    "memory/systems/neurosymbolic_integration.py": {
      "file_path": "memory/systems/neurosymbolic_integration.py",
      "category": "memory_systems",
      "size_bytes": 68999,
      "size_kb": 67.4,
      "lines": 8,
      "imports": [
        "asyncio",
        "numpy",
        "json",
        "hashlib",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "SymbolicRelationType",
        "LogicalOperator",
        "SymbolicEntity",
        "SymbolicRelation",
        "LogicalRule",
        "NeuralSymbolicExtractor",
        "SymbolicReasoner",
        "NeurosymbolicIntegrationLayer"
      ],
      "functions": [
        "create_neurosymbolic_layer",
        "example_neurosymbolic_usage",
        "to_dict",
        "from_dict",
        "to_triple",
        "to_dict",
        "from_dict",
        "applies_to",
        "_evaluate_conditions",
        "to_dict"
      ],
      "async_functions": [
        "create_neurosymbolic_layer",
        "example_neurosymbolic_usage",
        "extract_entities_from_memory",
        "_extract_entity_candidates",
        "extract_relations_from_memories",
        "_extract_relations_from_content",
        "_consolidate_relations",
        "_merge_relations",
        "perform_inference",
        "_apply_rule",
        "_find_variable_bindings",
        "_find_bindings_for_condition",
        "_binding_satisfies_condition",
        "_apply_bindings_to_consequent",
        "_remove_duplicate_inferences",
        "answer_query",
        "_answer_relation_query",
        "_answer_path_query",
        "_answer_classification_query",
        "_load_knowledge",
        "_save_knowledge",
        "process_memory_batch",
        "query_knowledge",
        "explain_inference",
        "integrate_with_memory_system",
        "neurosymbolic_query_handler"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 57.0
    },
    "memory/systems/pin_memory.py": {
      "file_path": "memory/systems/pin_memory.py",
      "category": "memory_systems",
      "size_bytes": 4451,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [
        "collections",
        "copy",
        "queue",
        "torch",
        "torch._utils.ExceptionWrapper"
      ],
      "classes": [],
      "functions": [
        "_pin_memory_loop",
        "pin_memory",
        "do_one_step"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.0
    },
    "memory/systems/pin_memory_cache.py": {
      "file_path": "memory/systems/pin_memory_cache.py",
      "category": "memory_systems",
      "size_bytes": 3263,
      "size_kb": 3.2,
      "lines": 1,
      "imports": [
        "threading",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "torch"
      ],
      "classes": [
        "PinMemoryCache"
      ],
      "functions": [
        "__init__",
        "get",
        "remove",
        "__str__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 19.3
    },
    "memory/systems/processor.py": {
      "file_path": "memory/systems/processor.py",
      "category": "memory_systems",
      "size_bytes": 7424,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "MemoryProcessor"
      ],
      "functions": [
        "create_memory_component",
        "create_and_initialize_memory_component",
        "__init__",
        "initialize",
        "_setup_memory_system",
        "process",
        "_core_memory_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_memory_component",
        "initialize",
        "_setup_memory_system",
        "process",
        "_core_memory_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 33.0
    },
    "memory/systems/quantum_memory_architecture.py": {
      "file_path": "memory/systems/quantum_memory_architecture.py",
      "category": "memory_systems",
      "size_bytes": 4846,
      "size_kb": 4.7,
      "lines": 1,
      "imports": [
        "numpy",
        "qiskit.QuantumCircuit",
        "typing.Optional",
        "typing.List",
        "typing.Tuple"
      ],
      "classes": [
        "QuantumAssociativeMemoryBank"
      ],
      "functions": [
        "__init__",
        "store_quantum_like_state",
        "quantum_associative_recall",
        "_create_grover_oracle"
      ],
      "async_functions": [
        "store_quantum_like_state",
        "quantum_associative_recall"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 22.8
    },
    "memory/systems/recall_handler.py": {
      "file_path": "memory/systems/recall_handler.py",
      "category": "memory_systems",
      "size_bytes": 1271,
      "size_kb": 1.2,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "RecallHandler"
      ],
      "functions": [
        "__init__",
        "recall_memory"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 16.3
    },
    "memory/systems/reflection_engine.py": {
      "file_path": "memory/systems/reflection_engine.py",
      "category": "memory_systems",
      "size_bytes": 36255,
      "size_kb": 35.4,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "asyncio",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "ReflectionType",
        "ReflectionDepth",
        "ReflectionInsight",
        "ReflectionSession",
        "PatternDetector",
        "MetaCognitiveAnalyzer",
        "MemoryReflector"
      ],
      "functions": [
        "get_memory_reflector",
        "initiate_reflection",
        "process_reflection",
        "get_self_assessment",
        "get_reflector_status",
        "__init__",
        "_initialize_pattern_templates",
        "detect_patterns",
        "_analyze_pattern_strength",
        "_has_temporal_clustering"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 53.0
    },
    "memory/systems/replay_system.py": {
      "file_path": "memory/systems/replay_system.py",
      "category": "memory_systems",
      "size_bytes": 28989,
      "size_kb": 28.3,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "asyncio",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "ReplayMode",
        "ReplayDirection",
        "ReplayQuality",
        "MemorySnapshot",
        "ReplaySequence",
        "ReplaySession",
        "TemporalIndex",
        "MemoryReplayer"
      ],
      "functions": [
        "get_memory_replayer",
        "create_sequence",
        "start_session",
        "get_next",
        "get_replayer_status",
        "__init__",
        "add_memory_timestamp",
        "get_memories_in_range",
        "get_causal_sequence",
        "find_temporal_neighbors"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 46.0
    },
    "memory/systems/resonance_memory_retrieval.py": {
      "file_path": "memory/systems/resonance_memory_retrieval.py",
      "category": "memory_systems",
      "size_bytes": 27750,
      "size_kb": 27.1,
      "lines": 8,
      "imports": [
        "json",
        "math",
        "hashlib",
        "datetime.datetime",
        "datetime.timezone",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List"
      ],
      "classes": [
        "EmotionalState",
        "FrequencyFingerprint",
        "ResonantMemory",
        "FrequencyGenerator",
        "ResonanceCalculator",
        "ResonanceGate"
      ],
      "functions": [
        "emotional_state_to_frequency",
        "generate_frequency_fingerprint",
        "cosine_similarity",
        "frequency_resonance",
        "temporal_decay",
        "access_boost",
        "__init__",
        "store_memory_with_frequency",
        "_evict_oldest_memory",
        "retrieve_by_resonance"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 36.5
    },
    "memory/systems/simple_memory.py": {
      "file_path": "memory/systems/simple_memory.py",
      "category": "memory_systems",
      "size_bytes": 2828,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "json",
        "asyncio",
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any"
      ],
      "classes": [
        "AgentMemory"
      ],
      "functions": [
        "append_to_shared_memory",
        "read_from_shared_memory",
        "__init__",
        "_load_memory",
        "_save_memory",
        "append_memory",
        "read_memory",
        "read_all_memory"
      ],
      "async_functions": [
        "append_memory",
        "read_memory"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 22.8
    },
    "memory/systems/symbolic_delta_compression.py": {
      "file_path": "memory/systems/symbolic_delta_compression.py",
      "category": "memory_systems",
      "size_bytes": 32260,
      "size_kb": 31.5,
      "lines": 1,
      "imports": [
        "json",
        "hashlib",
        "os",
        "traceback",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set"
      ],
      "classes": [
        "CompressionState",
        "CompressionRecord",
        "LoopDetectionResult",
        "SymbolicDeltaCompressionManager"
      ],
      "functions": [
        "create_compression_manager",
        "__init__",
        "compress_fold",
        "_detect_compression_loops",
        "_perform_compression",
        "_get_compression_depth",
        "_check_cooldown",
        "_get_cooldown_remaining",
        "_get_emotional_stability",
        "_get_dominant_emotion"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 36.0
    },
    "memory/systems/symbolic_replay_engine.py": {
      "file_path": "memory/systems/symbolic_replay_engine.py",
      "category": "memory_systems",
      "size_bytes": 2622,
      "size_kb": 2.6,
      "lines": 2,
      "imports": [
        "__future__.annotations",
        "json",
        "logging",
        "time",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "pathlib.Path",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "ReplayEvent",
        "SymbolicReplayEngine"
      ],
      "functions": [
        "__init__",
        "record_event",
        "save",
        "load",
        "replay"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 21.1
    },
    "memory/systems/symbolic_snapshot.py": {
      "file_path": "memory/systems/symbolic_snapshot.py",
      "category": "memory_systems",
      "size_bytes": 5398,
      "size_kb": 5.3,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "SymbolicSnapshot"
      ],
      "functions": [
        "__init__",
        "create_snapshot"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 20.0
    },
    "memory/systems/trace_injector.py": {
      "file_path": "memory/systems/trace_injector.py",
      "category": "memory_systems",
      "size_bytes": 6844,
      "size_kb": 6.7,
      "lines": 3,
      "imports": [
        "json",
        "hashlib",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "dataclasses.dataclass",
        "dataclasses.asdict"
      ],
      "classes": [
        "MemoryTrace",
        "TraceInjector"
      ],
      "functions": [
        "get_global_injector",
        "inject_memory_trace",
        "start_memory_trace",
        "end_memory_trace",
        "export_trace_data",
        "to_dict",
        "__init__",
        "generate_trace_id",
        "inject_trace",
        "start_memory_operation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 29.0
    },
    "memory/systems/trauma_lock.py": {
      "file_path": "memory/systems/trauma_lock.py",
      "category": "memory_systems",
      "size_bytes": 16004,
      "size_kb": 15.6,
      "lines": 1,
      "imports": [
        "logging",
        "os",
        "time",
        "json",
        "hashlib",
        "base64",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "TraumaLockSystem"
      ],
      "functions": [
        "__init__",
        "_generate_system_key",
        "_initialize_access_policies",
        "encrypt_memory",
        "decrypt_memory",
        "_derive_memory_key",
        "_encrypt_data",
        "_decrypt_data",
        "_generate_secure_vector",
        "_generate_context_vector"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 25.5
    },
    "memory/systems/voice_memory_bridge.py": {
      "file_path": "memory/systems/voice_memory_bridge.py",
      "category": "memory_systems",
      "size_bytes": 1151,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [],
      "classes": [
        "VoiceMemoryBridge"
      ],
      "functions": [
        "__init__",
        "process_voice_memory",
        "_calculate_resonance",
        "_create_symbolic_map"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 17.2
    },
    "memory/tools/lambda_vault_scan.py": {
      "file_path": "memory/tools/lambda_vault_scan.py",
      "category": "memory_systems",
      "size_bytes": 34803,
      "size_kb": 34.0,
      "lines": 42,
      "imports": [
        "os",
        "json",
        "argparse",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Set"
      ],
      "classes": [
        "SymbolicVaultScanner"
      ],
      "functions": [
        "main",
        "__init__",
        "load_memory_snapshots",
        "_load_jsonl_file",
        "_load_json_file",
        "_load_vault_file",
        "_scan_python_file",
        "_process_memory_entry",
        "_process_text_vault",
        "_extract_symbols_from_text"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 30.0
    },
    "memory/tools/memory_drift_auditor.py": {
      "file_path": "memory/tools/memory_drift_auditor.py",
      "category": "memory_systems",
      "size_bytes": 96758,
      "size_kb": 94.5,
      "lines": 3,
      "imports": [
        "argparse",
        "glob",
        "hashlib",
        "json",
        "os",
        "re",
        "collections.defaultdict",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone"
      ],
      "classes": [
        "MemoryDriftAuditor"
      ],
      "functions": [
        "main",
        "__init__",
        "_get_default_config",
        "load_memory_snapshots",
        "detect_memory_drift",
        "trace_collapse_events",
        "generate_audit_report",
        "visualize_memory_timeline",
        "_load_file_snapshots",
        "_validate_memory_snapshot"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 46.5
    },
    "memory/visualizer.py": {
      "file_path": "memory/visualizer.py",
      "category": "memory_systems",
      "size_bytes": 15520,
      "size_kb": 15.2,
      "lines": 1,
      "imports": [
        "streamlit",
        "json",
        "os",
        "datetime.datetime",
        "datetime.timedelta",
        "pathlib",
        "pandas",
        "matplotlib.pyplot",
        "altair",
        "numpy"
      ],
      "classes": [
        "VisualizationConfig",
        "EnhancedMemoryVisualizer",
        "Enhanced3DVisualizer",
        "QuantumOscillator",
        "ProtonGradient"
      ],
      "functions": [
        "__init__",
        "setup_visualization",
        "visualize_memory_fold",
        "_quantum_modulate_memory",
        "_create_memory_plot",
        "_create_emotion_plot",
        "_create_collapse_plot",
        "__init__",
        "launch_3d_viewer",
        "_prepare_3d_data"
      ],
      "async_functions": [
        "visualize_memory_fold"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 34.5
    },
    "memory/voice_memory_manager.py": {
      "file_path": "memory/voice_memory_manager.py",
      "category": "memory_systems",
      "size_bytes": 8799,
      "size_kb": 8.6,
      "lines": 1,
      "imports": [
        "datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "logging"
      ],
      "classes": [
        "MemoryManager"
      ],
      "functions": [
        "__init__",
        "store_interaction",
        "get_relevant_memories",
        "store_voice_preference",
        "get_voice_preferences",
        "get_user_interactions",
        "remove_old_interactions",
        "_calculate_importance"
      ],
      "async_functions": [
        "remove_old_interactions"
      ],
      "integration_opportunities": [
        "Memory manager - connect to unified memory orchestrator",
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 25.0
    },
    "quantum/abas_quantum_specialist.py": {
      "file_path": "quantum/abas_quantum_specialist.py",
      "category": "quantum",
      "size_bytes": 40040,
      "size_kb": 39.1,
      "lines": 11,
      "imports": [
        "asyncio",
        "logging",
        "json",
        "numpy",
        "hashlib",
        "math",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "QuantumBioCapabilityLevel",
        "QuantumBioResponse",
        "QuantumTunnelingEthics",
        "ProtonMotiveProcessor",
        "CristaeTopologyManager",
        "QuantumBiologicalAGI"
      ],
      "functions": [
        "main",
        "__validate_module__",
        "__init__",
        "quantum_ethical_arbitration",
        "_create_ethical_wavefunction",
        "_collapse_wavefunction",
        "_calculate_relevance",
        "_calculate_tunneling_probabilities",
        "_calculate_ethical_resonance",
        "__init__"
      ],
      "async_functions": [
        "main",
        "process_with_quantum_biology",
        "_generate_quantum_bio_response"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 47.5
    },
    "quantum/api_manager.py": {
      "file_path": "quantum/api_manager.py",
      "category": "quantum",
      "size_bytes": 32870,
      "size_kb": 32.1,
      "lines": 1,
      "imports": [
        "os",
        "json",
        "hashlib",
        "secrets",
        "base64",
        "math",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "pathlib.Path"
      ],
      "classes": [
        "\u039biDProfile",
        "QuantumAPIKey",
        "VeriFoldGlyph",
        "QuantumCrypto",
        "VeriFoldGlyphGenerator",
        "LUKHASAPIManager"
      ],
      "functions": [
        "demo_quantum_api_management",
        "__validate_module__",
        "generate_quantum_key",
        "derive_key_from_\u03bbid",
        "encrypt_api_key",
        "decrypt_api_key",
        "create_animated_glyph",
        "_generate_quantum_visual",
        "_get_professional_colors",
        "_generate_professional_symbols"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [],
      "priority_score": 39.0
    },
    "quantum/bio_components.py": {
      "file_path": "quantum/bio_components.py",
      "category": "quantum",
      "size_bytes": 18200,
      "size_kb": 17.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "numpy",
        "structlog",
        "datetime.datetime",
        "datetime.timezone",
        "asyncio"
      ],
      "classes": [
        "ProtonGradient",
        "QuantumAttentionGate",
        "CristaFilter",
        "CardiolipinEncoder",
        "QuantumOscillator",
        "QuantumBioOscillator"
      ],
      "functions": [
        "lukhas_tier_required",
        "__validate_module__",
        "decorator",
        "__init__",
        "process",
        "_apply_gradient_to_data",
        "__init__",
        "attend",
        "_normalize_attention_weights",
        "__init__"
      ],
      "async_functions": [
        "attend",
        "filter",
        "_update_filter_state_params"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 35.5
    },
    "quantum/bio_crista_optimizer_adapter.py": {
      "file_path": "quantum/bio_crista_optimizer_adapter.py",
      "category": "quantum",
      "size_bytes": 31652,
      "size_kb": 30.9,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Type",
        "dataclasses.dataclass"
      ],
      "classes": [
        "CristaeTopologyType",
        "CristaeState",
        "CristaOptimizerAdapter"
      ],
      "functions": [
        "lukhas_tier_required",
        "__validate_module__",
        "decorator",
        "__init__",
        "get_current_state",
        "optimize_topology",
        "_optimize_for_atp_efficiency",
        "_optimize_for_membrane_stability",
        "_optimize_for_dynamic_balance",
        "_optimize_for_general_performance"
      ],
      "async_functions": [
        "get_current_state",
        "optimize_topology",
        "_optimize_for_atp_efficiency",
        "_optimize_for_membrane_stability",
        "_optimize_for_dynamic_balance",
        "_optimize_for_general_performance",
        "apply_quantum_optimization",
        "get_performance_metrics",
        "apply_optimization_action",
        "_execute_fusion_fission_ops_sim",
        "_stabilize_membrane_sim",
        "_apply_simulated_quantum_topology_optimization",
        "_set_cristae_density_target",
        "_stabilize_membrane_potential_sim",
        "_balance_cristae_topology_sim"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 35.0
    },
    "quantum/bio_optimization_adapter.py": {
      "file_path": "quantum/bio_optimization_adapter.py",
      "category": "quantum",
      "size_bytes": 33165,
      "size_kb": 32.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "numpy",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "QuantumBioOptimizationConfig",
        "QuantumBioMetrics",
        "QuantumBioOptimizationAdapter",
        "MockBioOrchestrator",
        "MockQuantumBioOscillator",
        "QuantumLikeState",
        "QuantumConfig",
        "MockQuantumAwarenessSystem",
        "MockQuantumDreamAdapter",
        "MockQuantumBioCoordinator"
      ],
      "functions": [
        "lukhas_tier_required",
        "__validate_module__",
        "decorator",
        "__init__",
        "_initialize_quantum_bio_systems",
        "optimize_quantum_bio_system",
        "_prepare_quantum_like_state",
        "_data_to_quantum_vector",
        "_extract_quantum_features",
        "_optimize_biological_systems"
      ],
      "async_functions": [
        "optimize_quantum_bio_system",
        "_prepare_quantum_like_state",
        "_optimize_biological_systems",
        "_integrate_quantum_bio",
        "_enhance_consciousness",
        "_process_dream_consolidation",
        "_validate_optimization",
        "_apply_corrective_actions",
        "_queue_optimization_request_handler",
        "shutdown",
        "enhance_coherence",
        "strengthen_entanglement",
        "entangle_states",
        "process_quantum_awareness",
        "start_dream_cycle",
        "stop_dream_cycle",
        "get_quantum_like_state",
        "process_bio_quantum"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 58.0
    },
    "quantum/bio_system.py": {
      "file_path": "quantum/bio_system.py",
      "category": "quantum",
      "size_bytes": 20132,
      "size_kb": 19.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "numpy",
        "logging",
        "datetime.datetime",
        "quantum.systems.quantum_engine.Quantumoscillator",
        "bio.quantum_inspired_layer.QuantumBioOscillator"
      ],
      "classes": [
        "MitochondrialQuantumBridge",
        "QuantumSynapticGate",
        "NeuroplasticityModulator",
        "SelfAwareAgent",
        "EnhancedMitochondrialQuantumBridge"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "process_quantum_signal",
        "_electron_transport_process",
        "_generate_proton_gradient",
        "_quantum_synthesis",
        "__init__",
        "process_signal",
        "_compute_quantum_interference",
        "_generate_quantum_output"
      ],
      "async_functions": [
        "process_quantum_signal",
        "_electron_transport_process",
        "process_signal",
        "modulate_plasticity"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 34.5
    },
    "quantum/certificate_manager.py": {
      "file_path": "quantum/certificate_manager.py",
      "category": "quantum",
      "size_bytes": 33590,
      "size_kb": 32.8,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "json",
        "hashlib",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime"
      ],
      "classes": [
        "CertificateStatus",
        "QuantumAlgorithm",
        "QuantumCertificateManager"
      ],
      "functions": [
        "lukhas_tier_required",
        "main_demo_runner",
        "__validate_module__",
        "decorator",
        "__init__",
        "initialize",
        "_load_certificates_from_store",
        "_periodic_validation_loop",
        "_validate_all_certificates",
        "_validate_single_certificate"
      ],
      "async_functions": [
        "main_demo_runner",
        "initialize",
        "_load_certificates_from_store",
        "_periodic_validation_loop",
        "_validate_all_certificates",
        "_validate_single_certificate",
        "_validate_quantum_signature",
        "_verify_dilithium_signature_sim",
        "_verify_falcon_signature_sim",
        "_verify_sphincs_signature_sim",
        "_validate_certificate_chain_to_trusted_root",
        "_check_certificate_revocation_status",
        "_schedule_renewal_tasks",
        "_attempt_certificate_renewal",
        "_generate_quantum_key_pair",
        "_get_quantum_entropy",
        "_create_certificate_signing_request",
        "_submit_renewal_request_to_ca",
        "_create_emergency_self_signed_certificate",
        "_install_renewed_certificate_to_store",
        "_handle_critically_expired_certificates",
        "_start_renewal_monitoring_process",
        "force_renewal",
        "shutdown"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 38.0
    },
    "quantum/consensus_system.py": {
      "file_path": "quantum/consensus_system.py",
      "category": "quantum",
      "size_bytes": 23181,
      "size_kb": 22.6,
      "lines": 1,
      "imports": [
        "logging",
        "numpy",
        "json",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "os"
      ],
      "classes": [
        "QuantumAnnealedEthicalConsensus"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "_initialize_ethical_embeddings",
        "evaluate",
        "_get_mode_weights",
        "_run_annealing",
        "_anneal",
        "_quantum_perturbation",
        "_calculate_energy",
        "_record_consensus"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 19.5
    },
    "quantum/creative_engine.py": {
      "file_path": "quantum/creative_engine.py",
      "category": "quantum",
      "size_bytes": 7916,
      "size_kb": 7.7,
      "lines": 5,
      "imports": [
        "asyncio",
        "sys",
        "os",
        "numpy",
        "hashlib",
        "datetime.datetime"
      ],
      "classes": [
        "MockQuantumContext",
        "MockCreativeExpression",
        "MockQuantumHaiku"
      ],
      "functions": [
        "test_quantum_creative_basics",
        "test_quantum_consciousness_integration",
        "main",
        "__validate_module__",
        "__init__",
        "__init__",
        "__init__"
      ],
      "async_functions": [
        "test_quantum_creative_basics",
        "test_quantum_consciousness_integration",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 26.5
    },
    "quantum/creative_integration.py": {
      "file_path": "quantum/creative_integration.py",
      "category": "quantum",
      "size_bytes": 8956,
      "size_kb": 8.7,
      "lines": 3,
      "imports": [
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "sys",
        "pathlib.Path",
        "creative_q_expression.LukhasCreativeExpressionEngine",
        "coreQuantumCreativeMock.MockLukhasCreativeExpressionEngine"
      ],
      "classes": [
        "QuantumCreativeBridge"
      ],
      "functions": [
        "quantum_haiku",
        "quantum_music",
        "get_quantum_status",
        "demo_integration",
        "__validate_module__",
        "__init__",
        "generate_quantum_haiku",
        "generate_quantum_music",
        "get_system_status"
      ],
      "async_functions": [
        "quantum_haiku",
        "quantum_music",
        "demo_integration",
        "generate_quantum_haiku",
        "generate_quantum_music"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 20.5
    },
    "quantum/dream_adapter.py": {
      "file_path": "quantum/dream_adapter.py",
      "category": "quantum",
      "size_bytes": 12795,
      "size_kb": 12.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "asyncio",
        "dataclasses.dataclass",
        "datetime.datetime",
        "quantum.quantum_inspired_layer.QuantumBioOscillator"
      ],
      "classes": [
        "DreamQuantumConfig",
        "QuantumDreamAdapter"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "start_dream_cycle",
        "stop_dream_cycle",
        "_run_dream_cycle",
        "_process_quantum_dreams",
        "_memories_to_qubits",
        "_extract_insights",
        "get_quantum_like_state",
        "enhance_emotional_state"
      ],
      "async_functions": [
        "start_dream_cycle",
        "stop_dream_cycle",
        "_run_dream_cycle",
        "_process_quantum_dreams",
        "_memories_to_qubits",
        "_extract_insights",
        "get_quantum_like_state",
        "enhance_emotional_state",
        "process_memories"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 23.5
    },
    "quantum/entanglement.py": {
      "file_path": "quantum/entanglement.py",
      "category": "quantum",
      "size_bytes": 12432,
      "size_kb": 12.1,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "QuantumEntanglement"
      ],
      "functions": [
        "create_quantum_component",
        "create_and_initialize_quantum_component",
        "__validate_module__",
        "__init__",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing",
        "_process_consciousness",
        "_process_governance"
      ],
      "async_functions": [
        "create_and_initialize_quantum_component",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.5
    },
    "quantum/ethics_engine.py": {
      "file_path": "quantum/ethics_engine.py",
      "category": "quantum",
      "size_bytes": 36401,
      "size_kb": 35.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "hashlib",
        "logging",
        "time",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "enum.Enum",
        "typing.Dict"
      ],
      "classes": [
        "EthicalPrinciple",
        "ComplianceFramework",
        "EthicalSeverity",
        "QuantumEthicalState",
        "EthicalViolation",
        "QuantumEthicsEngine"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "evaluate_ethical_decision",
        "_evaluate_principle",
        "_evaluate_autonomy",
        "_evaluate_non_maleficence",
        "_evaluate_privacy",
        "_evaluate_transparency",
        "_evaluate_justice",
        "_evaluate_beneficence"
      ],
      "async_functions": [
        "evaluate_ethical_decision",
        "_evaluate_principle",
        "_evaluate_autonomy",
        "_evaluate_non_maleficence",
        "_evaluate_privacy",
        "_evaluate_transparency",
        "_evaluate_justice",
        "_evaluate_beneficence",
        "_evaluate_dignity",
        "_evaluate_sustainability",
        "_evaluate_consciousness_respect",
        "_evaluate_quantum_coherence_principle",
        "_evaluate_stakeholder_impact",
        "_attempt_auto_remediation"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 36.5
    },
    "quantum/healix_mapper.py": {
      "file_path": "quantum/healix_mapper.py",
      "category": "quantum",
      "size_bytes": 42766,
      "size_kb": 41.8,
      "lines": 1,
      "imports": [
        "logging",
        "numpy",
        "asyncio",
        "hashlib",
        "json",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "MemoryStrand",
        "MutationType",
        "CompressionLevel",
        "MemoryNucleotide",
        "MemoryMutation",
        "QuantumMemoryFold",
        "QuantumHealixMapper"
      ],
      "functions": [
        "demo_healix",
        "__validate_module__",
        "__init__",
        "_initialize_database",
        "encode_memory",
        "_content_to_nucleotides",
        "_extract_memory_features",
        "_feature_to_nucleotide",
        "_calculate_position_emotion",
        "_generate_position_quantum_like_state"
      ],
      "async_functions": [
        "demo_healix",
        "_initialize_database",
        "encode_memory",
        "_content_to_nucleotides",
        "_extract_memory_features",
        "_feature_to_nucleotide",
        "_calculate_position_emotion",
        "_generate_position_quantum_like_state",
        "_calculate_hydrogen_bonds",
        "_extract_emotional_vector",
        "_calculate_helix_position",
        "_generate_quantum_signature",
        "_check_quantum_entanglement",
        "_calculate_stability_score",
        "_ensure_gdpr_compliance",
        "mutate_memory",
        "_apply_point_mutation",
        "_apply_insertion_mutation",
        "_apply_deletion_mutation",
        "_apply_crossover_mutation",
        "_apply_quantum_collapse",
        "_find_memory_fold",
        "_store_fold_in_db",
        "_update_fold_in_db",
        "_store_mutation_in_db",
        "_log_gdpr_action",
        "_generate_fold_id",
        "get_healix_analytics"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 43.0
    },
    "quantum/layer.py": {
      "file_path": "quantum/layer.py",
      "category": "quantum",
      "size_bytes": 22189,
      "size_kb": 21.7,
      "lines": 1,
      "imports": [
        "math",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "numpy",
        "numpy"
      ],
      "classes": [
        "QuantumLikeState",
        "QuantumBioConfig",
        "QuantumBioOscillator"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "measure",
        "entangle",
        "__repr__",
        "__post_init__",
        "__init__",
        "_initialize_quantum_like_state",
        "oscillate",
        "create_entanglement"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "quantum/metadata.py": {
      "file_path": "quantum/metadata.py",
      "category": "quantum",
      "size_bytes": 18403,
      "size_kb": 18.0,
      "lines": 3,
      "imports": [
        "asyncio",
        "logging",
        "hashlib",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Set",
        "dataclasses.dataclass"
      ],
      "classes": [
        "SymbolicDimension",
        "QuantumMetadata",
        "SymbolicTag",
        "QuantumMetadataManager"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "generate_quantum_metadata",
        "_generate_quantum_signature",
        "_extract_symbolic_tags",
        "_analyze_symbolic_dimensions",
        "_generate_semantic_vector",
        "_find_quantum_entanglements",
        "_calculate_similarity",
        "_store_metadata"
      ],
      "async_functions": [
        "generate_quantum_metadata",
        "_generate_quantum_signature",
        "_extract_symbolic_tags",
        "_analyze_symbolic_dimensions",
        "_generate_semantic_vector",
        "_find_quantum_entanglements",
        "_calculate_similarity",
        "_store_metadata",
        "search_by_tags",
        "search_by_dimension",
        "get_quantum_entanglements",
        "demo"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 29.5
    },
    "quantum/neural_symbolic_engine.py": {
      "file_path": "quantum/neural_symbolic_engine.py",
      "category": "quantum",
      "size_bytes": 7278,
      "size_kb": 7.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "numpy",
        "qiskit.QuantumCircuit",
        "qiskit.QuantumRegister",
        "qiskit.ClassicalRegister",
        "qiskit.circuit.library.QFT"
      ],
      "classes": [
        "QuantumNeuralSymbolicProcessor"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "process_secure_context",
        "_quantum_enhanced_processing"
      ],
      "async_functions": [
        "process_secure_context",
        "_quantum_enhanced_processing"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.0
    },
    "quantum/neural_symbolic_processor.py": {
      "file_path": "quantum/neural_symbolic_processor.py",
      "category": "quantum",
      "size_bytes": 4404,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [
        "quantum_neural_symbolic_processor.QuantumNeuralSymbolicProcessor",
        "quantum_neural_symbolic_processor.QuantumProcessingRequirements",
        "quantum_neural_symbolic_processor.QuantumProcessingResult",
        "quantum_neural_symbolic_processor.QuantumAttentionMechanism",
        "quantum_neural_symbolic_processor.QuantumPerformanceMetrics"
      ],
      "classes": [],
      "functions": [
        "__validate_module__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 9.9
    },
    "quantum/neuro_symbolic_engine.py": {
      "file_path": "quantum/neuro_symbolic_engine.py",
      "category": "quantum",
      "size_bytes": 40073,
      "size_kb": 39.1,
      "lines": 3,
      "imports": [
        "numpy",
        "asyncio",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "hashlib"
      ],
      "classes": [
        "QuantumInspiredAttention",
        "CausalReasoningModule",
        "QuantumNeuroSymbolicEngine"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "_initialize_superposition",
        "attend",
        "_extract_features",
        "_calculate_attention_distribution",
        "_apply_superposition",
        "_apply_attention_gates",
        "_update_entanglement_map",
        "_verify_access"
      ],
      "async_functions": [
        "attend",
        "_verify_access",
        "_create_audit_log",
        "reason",
        "_verify_access",
        "_create_audit_log",
        "process_text",
        "process",
        "_generate_response",
        "_verify_user_session",
        "demo_quantum_neuro_symbolic_engine"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 38.0
    },
    "quantum/phase_quantum_integration.py": {
      "file_path": "quantum/phase_quantum_integration.py",
      "category": "quantum",
      "size_bytes": 24505,
      "size_kb": 23.9,
      "lines": 12,
      "imports": [
        "asyncio",
        "time",
        "pytest",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta"
      ],
      "classes": [
        "QuantumIntegrationTestSuite"
      ],
      "functions": [
        "integration_suite",
        "test_quantum_integration_suite",
        "test_quantum_systems_initialization",
        "test_quantum_symbolic_reasoning",
        "test_quantum_identity_creation",
        "test_quantum_ethics_reasoning",
        "test_quantum_performance_targets",
        "__validate_module__",
        "__init__",
        "initialize_quantum_systems"
      ],
      "async_functions": [
        "integration_suite",
        "test_quantum_integration_suite",
        "test_quantum_systems_initialization",
        "test_quantum_symbolic_reasoning",
        "test_quantum_identity_creation",
        "test_quantum_ethics_reasoning",
        "test_quantum_performance_targets",
        "initialize_quantum_systems",
        "test_quantum_entanglement_integration",
        "test_throughput_optimization",
        "test_energy_efficiency",
        "test_response_times",
        "test_quantum_fidelity",
        "test_post_quantum_compliance",
        "run_comprehensive_integration_test",
        "generate_integration_report",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.5
    },
    "quantum/post_quantum_crypto_enhanced.py": {
      "file_path": "quantum/post_quantum_crypto_enhanced.py",
      "category": "quantum",
      "size_bytes": 28831,
      "size_kb": 28.2,
      "lines": 1,
      "imports": [
        "os",
        "hashlib",
        "secrets",
        "logging",
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.List"
      ],
      "classes": [
        "SecurityLevel",
        "AlgorithmType",
        "CryptoOperation",
        "SecurityConfig",
        "CryptoAuditLog",
        "QuantumResistantKeyManager",
        "PostQuantumCryptoEngine",
        "SecureMemoryManager",
        "QuantumKeyDerivation"
      ],
      "functions": [
        "__validate_module__",
        "to_dict",
        "__init__",
        "generate_keypair",
        "_gather_enhanced_entropy",
        "_generate_bio_quantum_entropy",
        "_generate_session_id",
        "_log_operation",
        "__init__",
        "create_secure_session"
      ],
      "async_functions": [
        "create_secure_session",
        "sign_data",
        "rotate_session_keys",
        "shutdown",
        "derive_session_keys"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 43.0
    },
    "quantum/privacy/zero_knowledge_system.py": {
      "file_path": "quantum/privacy/zero_knowledge_system.py",
      "category": "quantum",
      "size_bytes": 4945,
      "size_kb": 4.8,
      "lines": 1,
      "imports": [
        "zksnark.ZkSnark",
        "zksnark.CircuitGenerator",
        "bulletproofs.BulletproofSystem",
        "hashlib"
      ],
      "classes": [
        "ZeroKnowledgePrivacyEngine"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "create_privacy_preserving_proof",
        "_create_zksnark_proof",
        "verify_private_computation"
      ],
      "async_functions": [
        "create_privacy_preserving_proof",
        "_create_zksnark_proof",
        "verify_private_computation"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.4
    },
    "quantum/quantum_bio_bulletproof_system.py": {
      "file_path": "quantum/quantum_bio_bulletproof_system.py",
      "category": "quantum",
      "size_bytes": 27756,
      "size_kb": 27.1,
      "lines": 34,
      "imports": [
        "os",
        "sys",
        "json",
        "uuid",
        "time",
        "asyncio",
        "hashlib",
        "numpy",
        "traceback",
        "pathlib.Path"
      ],
      "classes": [
        "LukhasTestResult",
        "LukhasReport",
        "BulletproofAGISystem",
        "FallbackSimpleConfig",
        "FallbackQuantumAttentionGate",
        "FallbackSelfAwareAgent",
        "FallbackMitochondrialQuantumBridge"
      ],
      "functions": [
        "lukhas_tier_required",
        "main_test_runner",
        "__validate_module__",
        "decorator",
        "__init__",
        "_get_lukhas_id_ref",
        "create_fallback_components",
        "_run_test_step",
        "test_consciousness_enhancement",
        "test_performance_optimization"
      ],
      "async_functions": [
        "main_test_runner",
        "_run_test_step",
        "test_consciousness_enhancement",
        "test_performance_optimization",
        "test_full_integration",
        "run_all_tests",
        "generate_comprehensive_reports",
        "enhanced_attend",
        "process_with_awareness"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 39.5
    },
    "quantum/quantum_consensus_system_enhanced.py": {
      "file_path": "quantum/quantum_consensus_system_enhanced.py",
      "category": "quantum",
      "size_bytes": 30721,
      "size_kb": 30.0,
      "lines": 2,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "logging",
        "time",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "ConsensusAlgorithm",
        "QuantumLikeStateType",
        "ComponentState",
        "ConsensusPhase",
        "QuantumLikeState",
        "ConsensusProposal",
        "ComponentInfo",
        "QuantumConsensusSystem",
        "PartitionDetector",
        "ConsensusMetrics"
      ],
      "functions": [
        "demo_bio_quantum_consensus",
        "__validate_module__",
        "__post_init__",
        "to_dict",
        "from_dict",
        "calculate_hash",
        "calculate_distance",
        "add_signature",
        "add_vote",
        "__init__"
      ],
      "async_functions": [
        "demo_bio_quantum_consensus",
        "propose_state_update",
        "_initiate_raft_consensus",
        "_initiate_bio_quantum_consensus",
        "_request_brain_vote",
        "_request_votes",
        "_request_component_vote",
        "_process_votes",
        "_apply_state_update",
        "_notify_state_change",
        "handle_component_failure",
        "_initiate_recovery_mode",
        "monitor_partitions"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 50.5
    },
    "quantum/quantum_oscillator.py": {
      "file_path": "quantum/quantum_oscillator.py",
      "category": "quantum",
      "size_bytes": 26926,
      "size_kb": 26.3,
      "lines": 7,
      "imports": [
        "numpy",
        "qiskit.QuantumCircuit",
        "qiskit.execute",
        "qiskit.Aer",
        "qiskit.quantum_info.Statevector",
        "scipy.special.softmax",
        "logging",
        "datetime.datetime",
        "simpleaudio",
        "qiskit.circuit.Parameter"
      ],
      "classes": [
        "GlobalComplianceFramework",
        "EthicalHierarchy",
        "QuantumEthicalHandler",
        "LegalComplianceLayer",
        "LucasAGI"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "fetch_live_compliance_updates",
        "compliance_score",
        "check_compliance",
        "log_violation",
        "activate_safeguards",
        "recalibrate_safeguards",
        "initiate_emergency_shutdown",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 42.5
    },
    "quantum/safe_blockchain.py": {
      "file_path": "quantum/safe_blockchain.py",
      "category": "quantum",
      "size_bytes": 6573,
      "size_kb": 6.4,
      "lines": 1,
      "imports": [
        "hashlib.sha3_256",
        "rlp",
        "eth_keys.keys"
      ],
      "classes": [
        "QuantumSafeAuditBlockchain"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "log_ai_decision",
        "generate_compliance_report"
      ],
      "async_functions": [
        "log_ai_decision",
        "generate_compliance_report"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.0
    },
    "quantum/systems/bio_integration/awareness/quantum_bio.py": {
      "file_path": "quantum/systems/bio_integration/awareness/quantum_bio.py",
      "category": "consciousness",
      "size_bytes": 2594,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [],
      "classes": [
        "MitochondrialQuantumBridge",
        "QuantumSynapticGate",
        "NeuroplasticityModulator"
      ],
      "functions": [
        "__validate_module__",
        "initialize",
        "process_quantum_signal",
        "initialize",
        "process_signal",
        "initialize",
        "modulate_processing"
      ],
      "async_functions": [
        "initialize",
        "process_quantum_signal",
        "initialize",
        "process_signal",
        "initialize",
        "modulate_processing"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 24.1
    },
    "quantum/systems/bio_integration/bulletproof_system.py": {
      "file_path": "quantum/systems/bio_integration/bulletproof_system.py",
      "category": "quantum",
      "size_bytes": 40909,
      "size_kb": 40.0,
      "lines": 23,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 17.0
    },
    "quantum/systems/bio_integration/connectivity_consolidator.py": {
      "file_path": "quantum/systems/bio_integration/connectivity_consolidator.py",
      "category": "quantum",
      "size_bytes": 36211,
      "size_kb": 35.4,
      "lines": 4,
      "imports": [
        "os",
        "sys",
        "json",
        "asyncio",
        "logging",
        "importlib.util",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "ConnectivityState",
        "ConnectivityMetrics",
        "AGIConnectivityConfig",
        "LambdaAGIEliteConnectivityConsolidator"
      ],
      "functions": [
        "main",
        "__validate_module__",
        "__init__",
        "achieve_100_percent_connectivity",
        "_crista_analysis_phase",
        "_meta_learning_pattern_phase",
        "_quantum_bio_consolidation_phase",
        "_elite_integration_convergence",
        "_load_connectivity_analysis",
        "_optimize_module_structure"
      ],
      "async_functions": [
        "main",
        "achieve_100_percent_connectivity",
        "_crista_analysis_phase",
        "_meta_learning_pattern_phase",
        "_quantum_bio_consolidation_phase",
        "_elite_integration_convergence",
        "_optimize_module_structure",
        "_identify_fusion_candidates",
        "_analyze_import_patterns",
        "_learn_optimal_patterns",
        "_develop_resolution_strategies",
        "_analyze_system_coherence",
        "_develop_bio_consolidation_strategies",
        "_optimize_consolidation_paths",
        "_integrate_triangle_enhancements",
        "_execute_elite_consolidation",
        "_validate_connectivity_achievement",
        "_calculate_current_connectivity",
        "_generate_achievement_report",
        "_execute_crista_action",
        "_execute_meta_action",
        "_execute_quantum_action"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 42.0
    },
    "quantum/systems/bio_integration/optimization_adapter.py": {
      "file_path": "quantum/systems/bio_integration/optimization_adapter.py",
      "category": "quantum",
      "size_bytes": 34493,
      "size_kb": 33.7,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 14.0
    },
    "quantum/systems/quantum_entanglement.py": {
      "file_path": "quantum/systems/quantum_entanglement.py",
      "category": "quantum",
      "size_bytes": 9302,
      "size_kb": 9.1,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "QuantumEntanglement"
      ],
      "functions": [
        "create_quantum_component",
        "create_and_initialize_quantum_component",
        "create_quantum_component",
        "create_and_initialize_quantum_component",
        "__validate_module__",
        "__init__",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing"
      ],
      "async_functions": [
        "create_and_initialize_quantum_component",
        "create_and_initialize_quantum_component",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 29.5
    },
    "quantum/systems/quantum_processor.py": {
      "file_path": "quantum/systems/quantum_processor.py",
      "category": "quantum",
      "size_bytes": 8880,
      "size_kb": 8.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "QuantumInspiredProcessor"
      ],
      "functions": [
        "create_quantum_component",
        "create_and_initialize_quantum_component",
        "__validate_module__",
        "__init__",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing",
        "_process_consciousness",
        "_process_governance"
      ],
      "async_functions": [
        "create_and_initialize_quantum_component",
        "initialize",
        "_setup_quantum_system",
        "process",
        "_core_quantum_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.5
    },
    "quantum/systems/quantum_states.py": {
      "file_path": "quantum/systems/quantum_states.py",
      "category": "quantum",
      "size_bytes": 2749,
      "size_kb": 2.7,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 7.7
    },
    "quantum/vault_manager.py": {
      "file_path": "quantum/vault_manager.py",
      "category": "quantum",
      "size_bytes": 22143,
      "size_kb": 21.6,
      "lines": 7,
      "imports": [
        "os",
        "json",
        "hashlib",
        "secrets",
        "base64",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "VeriFoldQR",
        "EncryptedAPIKey",
        "AnonymousCryptoSession",
        "QuantumSeedPhrase",
        "QuantumVaultManager"
      ],
      "functions": [
        "main",
        "__validate_module__",
        "__init__",
        "_generate_or_load_master_key",
        "create_lambda_id_hash",
        "generate_verifold_qr",
        "_generate_artistic_glyph",
        "_generate_quantum_signature",
        "store_encrypted_api_key",
        "authenticate_and_decrypt_api_key"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 36.0
    },
    "quantum/voice_enhancer.py": {
      "file_path": "quantum/voice_enhancer.py",
      "category": "quantum",
      "size_bytes": 11026,
      "size_kb": 10.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "asyncio",
        "dataclasses.dataclass",
        "bio.quantum_inspired_layer.QuantumBioOscillator",
        "bio.systems.orchestration.bio_orchestrator.BioOrchestrator",
        "learning.systems.voice_duet.VoiceIntegrator"
      ],
      "classes": [
        "VoiceQuantumConfig",
        "QuantumVoiceEnhancer"
      ],
      "functions": [
        "__validate_module__",
        "__init__",
        "_enhance_voice_methods",
        "_quantum_voice_process",
        "_quantum_speech_generate",
        "_enhance_emotion_detection",
        "_enhance_emotion_modulation",
        "quantum_process_voice",
        "quantum_generate_speech"
      ],
      "async_functions": [
        "_quantum_voice_process",
        "_quantum_speech_generate",
        "_enhance_emotion_detection",
        "_enhance_emotion_modulation",
        "quantum_process_voice",
        "quantum_generate_speech"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.5
    },
    "quantum/\u039bBot_quantum_security.py": {
      "file_path": "quantum/\u039bBot_quantum_security.py",
      "category": "quantum",
      "size_bytes": 22952,
      "size_kb": 22.4,
      "lines": 3,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "logging",
        "secrets",
        "time",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict"
      ],
      "classes": [
        "QuantumThreat",
        "SecurityAssessment",
        "PostQuantumCryptographyEngine",
        "BioSymbolicThreatDetector",
        "QuantumVulnerabilityAnalyzer",
        "AdaptiveSecurityOrchestrator",
        "\u039bBotQuantumSecurityOrchestrator",
        "LatticeBasedCrypto",
        "MultivariateCrypto",
        "HashBasedSignatures",
        "CodeBasedCrypto",
        "IsogenyCrypto"
      ],
      "functions": [
        "main",
        "__validate_module__",
        "__init__",
        "generate_quantum_resistant_keys",
        "quantum_encrypt",
        "quantum_decrypt",
        "__init__",
        "detect_bio_threats",
        "_brain_threat_analysis",
        "__init__"
      ],
      "async_functions": [
        "main",
        "generate_quantum_resistant_keys",
        "quantum_encrypt",
        "quantum_decrypt",
        "detect_bio_threats",
        "_brain_threat_analysis",
        "analyze_quantum_vulnerabilities",
        "_simulate_quantum_attacks",
        "orchestrate_adaptive_security",
        "perform_quantum_security_assessment",
        "orchestrate_security_response",
        "generate_post_quantum_keys",
        "get_security_metrics",
        "generate_keys",
        "generate_keys",
        "generate_keys",
        "generate_keys",
        "generate_keys"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 53.0
    },
    "symbolic/bio/bio_symbolic_architectures.py": {
      "file_path": "symbolic/bio/bio_symbolic_architectures.py",
      "category": "reasoning",
      "size_bytes": 5742,
      "size_kb": 5.6,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.0
    },
    "symbolic/bio/bio_systems_inspiration.py": {
      "file_path": "symbolic/bio/bio_systems_inspiration.py",
      "category": "reasoning",
      "size_bytes": 5570,
      "size_kb": 5.4,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.0
    },
    "symbolic/bio/crista_optimizer.py": {
      "file_path": "symbolic/bio/crista_optimizer.py",
      "category": "reasoning",
      "size_bytes": 2277,
      "size_kb": 2.2,
      "lines": 1,
      "imports": [],
      "classes": [
        "CristaOptimizer"
      ],
      "functions": [
        "__init__",
        "optimize",
        "_induce_fission",
        "_induce_fusion",
        "_stabilize_topology",
        "report_state"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.3
    },
    "symbolic/bio/glyph_id_hash.py": {
      "file_path": "symbolic/bio/glyph_id_hash.py",
      "category": "reasoning",
      "size_bytes": 2487,
      "size_kb": 2.4,
      "lines": 1,
      "imports": [
        "hashlib",
        "time",
        "random",
        "base64"
      ],
      "classes": [
        "GlyphIDHasher"
      ],
      "functions": [
        "__init__",
        "_digest_component",
        "generate_signature",
        "generate_base64_glyph"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 18.5
    },
    "symbolic/bio/mito_ethics_sync.py": {
      "file_path": "symbolic/bio/mito_ethics_sync.py",
      "category": "reasoning",
      "size_bytes": 3043,
      "size_kb": 3.0,
      "lines": 1,
      "imports": [
        "numpy",
        "math"
      ],
      "classes": [
        "MitoEthicsSync"
      ],
      "functions": [
        "__init__",
        "update_phase",
        "assess_alignment",
        "is_synchronized"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.0
    },
    "symbolic/bio/mito_quantum_attention.py": {
      "file_path": "symbolic/bio/mito_quantum_attention.py",
      "category": "reasoning",
      "size_bytes": 5310,
      "size_kb": 5.2,
      "lines": 1,
      "imports": [
        "torch",
        "torch.nn",
        "time",
        "random",
        "hashlib",
        "numpy"
      ],
      "classes": [
        "QuantumTunnelFilter",
        "CristaGate",
        "VivoxAttention",
        "OxintusReasoner",
        "MAELayer",
        "RespiModule",
        "ATPAllocator",
        "VivoxSection",
        "OxintusBrass",
        "MAEPercussion",
        "MitochondrialConductor",
        "CristaOptimizer"
      ],
      "functions": [
        "generate_cl_signature",
        "forward",
        "__init__",
        "forward",
        "forward",
        "forward",
        "forward",
        "__init__",
        "forward",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 53.0
    },
    "symbolic/bio/stress_gate.py": {
      "file_path": "symbolic/bio/stress_gate.py",
      "category": "reasoning",
      "size_bytes": 2717,
      "size_kb": 2.7,
      "lines": 1,
      "imports": [
        "numpy"
      ],
      "classes": [
        "StressGate"
      ],
      "functions": [
        "__init__",
        "update_stress",
        "_decay_stress",
        "should_fallback",
        "reset",
        "report"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.7
    },
    "symbolic/colony_tag_propagation.py": {
      "file_path": "symbolic/colony_tag_propagation.py",
      "category": "reasoning",
      "size_bytes": 2257,
      "size_kb": 2.2,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "networkx",
        "core.colonies.base_colony.BaseColony",
        "symbolic.vocabularies.SymbolicVocabulary",
        "core.symbolism.tags.Tag",
        "core.symbolism.tags.TagScope"
      ],
      "classes": [
        "SymbolicReasoningColony"
      ],
      "functions": [
        "__init__",
        "propagate_belief",
        "_get_agent_neighbors",
        "_get_agent_distance"
      ],
      "async_functions": [
        "propagate_belief"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 20.3
    },
    "symbolic/drift/symbolic_drift_tracker_trace.py": {
      "file_path": "symbolic/drift/symbolic_drift_tracker_trace.py",
      "category": "reasoning",
      "size_bytes": 10873,
      "size_kb": 10.6,
      "lines": 2,
      "imports": [
        "structlog",
        "core.symbolic.drift.symbolic_drift_tracker.SymbolicDriftTracker"
      ],
      "classes": [
        "SymbolicDriftTracker"
      ],
      "functions": [
        "__init__",
        "record_drift",
        "register_drift",
        "calculate_entropy",
        "log_phase_mismatch",
        "summarize_drift",
        "calculate_symbolic_drift",
        "register_symbolic_state",
        "detect_recursive_drift_loops",
        "emit_drift_alert"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 24.0
    },
    "symbolic/neural/neural_symbolic_bridge.py": {
      "file_path": "symbolic/neural/neural_symbolic_bridge.py",
      "category": "reasoning",
      "size_bytes": 4410,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "numpy",
        "requests",
        "io.BytesIO",
        "base64",
        "typing.Union",
        "typing.Any"
      ],
      "classes": [
        "NeuralSymbolicIntegration"
      ],
      "functions": [
        "__init__",
        "process",
        "_neural_process",
        "_symbolic_process",
        "_integrate_results"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 20.9
    },
    "symbolic/neural/neuro_symbolic_fusion_layer.py": {
      "file_path": "symbolic/neural/neuro_symbolic_fusion_layer.py",
      "category": "reasoning",
      "size_bytes": 25960,
      "size_kb": 25.4,
      "lines": 1,
      "imports": [
        "numpy",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "FusionMode",
        "FusionContext",
        "NeuroSymbolicPattern",
        "NeuroSymbolicFusionLayer"
      ],
      "functions": [
        "create_nsfl_instance",
        "__init__",
        "calculate_coherence",
        "__init__",
        "_default_config",
        "set_fusion_context",
        "fuse_neural_symbolic",
        "translate_neural_to_symbolic",
        "translate_symbolic_to_neural",
        "adapt_fusion_weights"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 39.5
    },
    "bridge/colony_bridge.py": {
      "file_path": "bridge/colony_bridge.py",
      "category": "bridge_integration",
      "size_bytes": 1653,
      "size_kb": 1.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Callable",
        "typing.Optional",
        "asyncio",
        "core.colonies.base_colony.BaseColony",
        "bridge.message_bus.MessageBus"
      ],
      "classes": [
        "InterColonyBridge"
      ],
      "functions": [
        "__init__",
        "register_colony",
        "_register_protocol_handlers",
        "broadcast_across_colonies",
        "_route_to_colony"
      ],
      "async_functions": [
        "broadcast_across_colonies",
        "_route_to_colony"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 20.2
    },
    "bridge/connectors/blockchain_bridge.py": {
      "file_path": "bridge/connectors/blockchain_bridge.py",
      "category": "bridge_integration",
      "size_bytes": 653,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [
        "os",
        "json",
        "hashlib",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "anchor_hash"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 11.2
    },
    "bridge/explainability_interface_layer.py": {
      "file_path": "bridge/explainability_interface_layer.py",
      "category": "bridge_integration",
      "size_bytes": 36068,
      "size_kb": 35.2,
      "lines": 11,
      "imports": [
        "asyncio",
        "json",
        "uuid",
        "abc.ABC",
        "abc.abstractmethod",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "enum.Enum"
      ],
      "classes": [
        "ExplanationType",
        "ExplanationAudience",
        "ExplanationDepth",
        "ExplanationRequest",
        "ExplanationProof",
        "ExplanationOutput",
        "ExplanationGenerator",
        "NaturalLanguageGenerator",
        "FormalProofGenerator",
        "ExplainabilityInterfaceLayer"
      ],
      "functions": [
        "generate_explanation",
        "__init__",
        "_load_templates",
        "generate_explanation",
        "_get_audience_style",
        "_get_depth_content",
        "__init__",
        "generate_explanation",
        "_generate_formal_proof",
        "_format_proof"
      ],
      "async_functions": [
        "generate_explanation",
        "generate_explanation",
        "generate_explanation",
        "_generate_formal_proof",
        "explain_decision",
        "_enrich_context",
        "_get_ethical_analysis",
        "_get_reasoning_trace",
        "_extract_causal_chain",
        "_calculate_quality_metrics",
        "_sign_explanation",
        "interactive_explanation",
        "generate_audit_report"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 53.0
    },
    "bridge/integration_bridge.py": {
      "file_path": "bridge/integration_bridge.py",
      "category": "bridge_integration",
      "size_bytes": 29066,
      "size_kb": 28.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "sys",
        "os",
        "importlib.util",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Type",
        "typing.Union"
      ],
      "classes": [
        "PluginModuleAdapter",
        "IntegrationBridge",
        "BaseLucasModule",
        "LucasPlugin",
        "LucasPluginManifest",
        "PluginLoader",
        "CoreRegistryMock"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "startup",
        "shutdown",
        "get_health_status",
        "process_symbolic_input",
        "__init__",
        "load_plugins_as_modules",
        "unload_plugin_module"
      ],
      "async_functions": [
        "startup",
        "shutdown",
        "get_health_status",
        "process_symbolic_input",
        "load_plugins_as_modules",
        "unload_plugin_module",
        "get_plugin_module_status",
        "send_to_plugin",
        "broadcast_to_plugins",
        "get_plugins_by_capability",
        "route_to_capable_plugin",
        "startup",
        "shutdown",
        "get_health_status",
        "load_plugins",
        "register",
        "unregister"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management",
        "Plugin/extension - register with plugin system"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 47.5
    },
    "bridge/model_communication_engine.py": {
      "file_path": "bridge/model_communication_engine.py",
      "category": "bridge_integration",
      "size_bytes": 15403,
      "size_kb": 15.0,
      "lines": 1,
      "imports": [
        "base64",
        "gzip",
        "contextlib.contextmanager",
        "dataclasses.dataclass",
        "typing.Dict",
        "typing.Iterable",
        "typing.Optional",
        "typing.Tuple",
        "numpy",
        "torch"
      ],
      "classes": [
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine",
        "ModelCommunicationEngine"
      ],
      "functions": [
        "sinusoids",
        "disable_sdpa",
        "forward",
        "forward",
        "_conv_forward",
        "__init__",
        "forward",
        "qkv_attention",
        "__init__",
        "forward"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 47.5
    },
    "bridge/personality_communication_engine.py": {
      "file_path": "bridge/personality_communication_engine.py",
      "category": "bridge_integration",
      "size_bytes": 12186,
      "size_kb": 11.9,
      "lines": 1,
      "imports": [
        "logging",
        "collections.defaultdict",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "classes": [
        "VoiceModulator",
        "ShynessModule",
        "EtiquetteModule",
        "HelpfulnessModule",
        "EthicalComplianceSystem",
        "EnhancedPersonalityCommunicationEngine"
      ],
      "functions": [
        "adjust",
        "__init__",
        "get_interaction_style",
        "update_shyness",
        "__init__",
        "_load_cultural_norms",
        "_adjust_formality",
        "adapt_behavior",
        "__init__",
        "should_offer_help"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 39.5
    },
    "bridge/symbolic_memory_mapper.py": {
      "file_path": "bridge/symbolic_memory_mapper.py",
      "category": "bridge_integration",
      "size_bytes": 8712,
      "size_kb": 8.5,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "dataclasses.dataclass",
        "enum.Enum",
        "core.hub_registry.HubRegistry",
        "memory.memory_hub.MemoryHub",
        "symbolic.symbolic_hub.SymbolicHub"
      ],
      "classes": [
        "MemoryMapType",
        "SymbolicMemoryNode",
        "SymbolicMemoryMapper"
      ],
      "functions": [
        "map_symbolic_payload_to_memory",
        "__init__",
        "register_bridge",
        "create_memory_map",
        "map_to_core_structures",
        "maintain_memory_coherence",
        "archive_memory_map"
      ],
      "async_functions": [
        "register_bridge"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 31.5
    },
    "bridge/symbolic_reasoning_adapter.py": {
      "file_path": "bridge/symbolic_reasoning_adapter.py",
      "category": "bridge_integration",
      "size_bytes": 7801,
      "size_kb": 7.6,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "ReasoningMode",
        "ReasoningContext",
        "SymbolicReasoningAdapter"
      ],
      "functions": [
        "__init__",
        "adapt_symbolic_reasoning",
        "bridge_reasoning_flow",
        "validate_reasoning_coherence",
        "close_reasoning_context"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 25.5
    },
    "bridge/trace_logger.py": {
      "file_path": "bridge/trace_logger.py",
      "category": "bridge_integration",
      "size_bytes": 9424,
      "size_kb": 9.2,
      "lines": 1,
      "imports": [
        "logging",
        "json",
        "typing.Dict",
        "typing.Any",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "datetime.datetime",
        "enum.Enum"
      ],
      "classes": [
        "TraceLevel",
        "TraceCategory",
        "BridgeTraceEvent",
        "BridgeTraceLogger"
      ],
      "functions": [
        "log_symbolic_event",
        "__init__",
        "_setup_file_logging",
        "log_bridge_event",
        "trace_symbolic_handshake",
        "trace_memory_mapping",
        "get_trace_summary",
        "export_trace_data"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 29.0
    },
    "creativity/affect_stagnation_detector.py": {
      "file_path": "creativity/affect_stagnation_detector.py",
      "category": "creativity",
      "size_bytes": 6035,
      "size_kb": 5.9,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "structlog",
        "datetime.datetime",
        "datetime.timezone",
        "memory.emotional.EmotionalMemory"
      ],
      "classes": [
        "AffectStagnationDetector"
      ],
      "functions": [
        "__init__",
        "check_for_stagnation"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 20.0
    },
    "creativity/creative_core.py": {
      "file_path": "creativity/creative_core.py",
      "category": "creativity",
      "size_bytes": 8087,
      "size_kb": 7.9,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "creativity/creative_expression_core.py": {
      "file_path": "creativity/creative_expression_core.py",
      "category": "creativity",
      "size_bytes": 5437,
      "size_kb": 5.3,
      "lines": 4,
      "imports": [
        "json",
        "random"
      ],
      "classes": [
        "NeuroHaikuGenerator"
      ],
      "functions": [
        "__init__",
        "_load_style_preferences",
        "generate_haiku",
        "_create_base_haiku",
        "_build_line",
        "_expand_haiku",
        "_apply_expansion_rules",
        "_add_sensory_detail",
        "_infuse_emotion",
        "_create_juxtaposition"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 24.5
    },
    "creativity/creative_expression_processor.py": {
      "file_path": "creativity/creative_expression_processor.py",
      "category": "creativity",
      "size_bytes": 2432,
      "size_kb": 2.4,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.4
    },
    "creativity/creative_expressions_engine.py": {
      "file_path": "creativity/creative_expressions_engine.py",
      "category": "creativity",
      "size_bytes": 11406,
      "size_kb": 11.1,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "creativity/dream/base/dream_loop/dream_loop.py": {
      "file_path": "creativity/dream/base/dream_loop/dream_loop.py",
      "category": "creativity",
      "size_bytes": 7999,
      "size_kb": 7.8,
      "lines": 9,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "creativity/dream/base/dream_refold/dream_refold.py": {
      "file_path": "creativity/dream/base/dream_refold/dream_refold.py",
      "category": "creativity",
      "size_bytes": 2597,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [
        "random"
      ],
      "classes": [
        "DreamWeaver",
        "DummyMemory"
      ],
      "functions": [
        "__init__",
        "react",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 20.1
    },
    "creativity/dream/cli/dream_cli.py": {
      "file_path": "creativity/dream/cli/dream_cli.py",
      "category": "creativity",
      "size_bytes": 4170,
      "size_kb": 4.1,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 17.2
    },
    "creativity/dream/cli/dream_processor.py": {
      "file_path": "creativity/dream/cli/dream_processor.py",
      "category": "creativity",
      "size_bytes": 4227,
      "size_kb": 4.1,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "datetime.datetime",
        "symbolic_ai.memory.SymbolicMemoryEngine"
      ],
      "classes": [
        "DreamProcessor"
      ],
      "functions": [
        "__init__",
        "process_dream_state",
        "_find_memory_relationship",
        "_consolidate_memories",
        "_group_similar_patterns"
      ],
      "async_functions": [
        "process_dream_state"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.7
    },
    "creativity/dream/cli/dream_replay_cli.py": {
      "file_path": "creativity/dream/cli/dream_replay_cli.py",
      "category": "creativity",
      "size_bytes": 4122,
      "size_kb": 4.0,
      "lines": 3,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.1
    },
    "creativity/dream/dream_engine/oracle_dream.py": {
      "file_path": "creativity/dream/dream_engine/oracle_dream.py",
      "category": "creativity",
      "size_bytes": 23119,
      "size_kb": 22.6,
      "lines": 9,
      "imports": [
        "random",
        "datetime.datetime",
        "json",
        "os",
        "pathlib.Path",
        "time",
        "argparse",
        "asyncio",
        "typing.Optional",
        "openai"
      ],
      "classes": [
        "OracleDreamGenerator",
        "EnhancedOracleDreamGenerator"
      ],
      "functions": [
        "generate_dream",
        "replay_dream",
        "generate_flashback",
        "log_dream",
        "load_dream_log",
        "integrate_dream_with_oracle_colony",
        "get_enhanced_dream_oracle",
        "nervous_system_dream",
        "predictive_dream",
        "__init__"
      ],
      "async_functions": [
        "integrate_dream_with_oracle_colony",
        "get_enhanced_dream_oracle",
        "nervous_system_dream",
        "predictive_dream",
        "generate_oracle_dream_enhanced",
        "initialize_colony_integration",
        "_setup_predictive_dream_pipeline",
        "generate_predictive_dream",
        "_extract_predictive_elements",
        "_synthesize_predictive_dream",
        "generate_nervous_system_dream",
        "_create_unified_dream_narrative"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 35.0
    },
    "creativity/dream/dream_injector.py": {
      "file_path": "creativity/dream/dream_injector.py",
      "category": "creativity",
      "size_bytes": 4417,
      "size_kb": 4.3,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.4
    },
    "creativity/dream/dream_log.py": {
      "file_path": "creativity/dream/dream_log.py",
      "category": "creativity",
      "size_bytes": 1439,
      "size_kb": 1.4,
      "lines": 2,
      "imports": [
        "json",
        "os",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "log_dream"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 11.9
    },
    "creativity/dream/dream_mutator.py": {
      "file_path": "creativity/dream/dream_mutator.py",
      "category": "creativity",
      "size_bytes": 2124,
      "size_kb": 2.1,
      "lines": 2,
      "imports": [
        "json",
        "os",
        "random",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "load_latest_dream",
        "mutate_emotional_wave",
        "mutate_dream",
        "save_mutated_dream"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.1
    },
    "creativity/dream/dream_narrator_queue.py": {
      "file_path": "creativity/dream/dream_narrator_queue.py",
      "category": "creativity",
      "size_bytes": 4617,
      "size_kb": 4.5,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "creativity/dream/dream_replay.py": {
      "file_path": "creativity/dream/dream_replay.py",
      "category": "creativity",
      "size_bytes": 6122,
      "size_kb": 6.0,
      "lines": 7,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "creativity/dream/dream_stats.py": {
      "file_path": "creativity/dream/dream_stats.py",
      "category": "creativity",
      "size_bytes": 1723,
      "size_kb": 1.7,
      "lines": 1,
      "imports": [
        "json",
        "os",
        "collections.defaultdict",
        "pprint.pprint"
      ],
      "classes": [],
      "functions": [
        "load_dreams",
        "summarize_dreams"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.7
    },
    "creativity/dream/dream_summary_generator.py": {
      "file_path": "creativity/dream/dream_summary_generator.py",
      "category": "creativity",
      "size_bytes": 4515,
      "size_kb": 4.4,
      "lines": 2,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.5
    },
    "creativity/dream/engine/dream_engine_merged.py": {
      "file_path": "creativity/dream/engine/dream_engine_merged.py",
      "category": "creativity",
      "size_bytes": 5440,
      "size_kb": 5.3,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "numpy",
        "collections.deque",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "DreamPhase",
        "DreamState",
        "DreamEngine"
      ],
      "functions": [
        "__init__",
        "run_dream_cycle",
        "_process_dream_phase",
        "_initialize_dream_state",
        "_update_dream_state",
        "_extract_symbolic_patterns",
        "_generate_dream_content",
        "_extract_insights",
        "_update_learning_system",
        "_evaluate_learning_impact"
      ],
      "async_functions": [
        "run_dream_cycle",
        "_process_dream_phase"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 30.5
    },
    "creativity/dream/feedback_propagator.py": {
      "file_path": "creativity/dream/feedback_propagator.py",
      "category": "creativity",
      "size_bytes": 22632,
      "size_kb": 22.1,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "creativity.dream_systems.snapshot_redirection_controller.SnapshotRedirectionController"
      ],
      "classes": [
        "DreamFeedbackPropagator",
        "DreamSnapshotStore"
      ],
      "functions": [
        "__init__",
        "propagate",
        "_track_dream_memory_causation",
        "_track_redirection_causality",
        "_cross_check_redirection_ethics",
        "_calculate_causation_strength",
        "_finalize_causality_trace",
        "__init__",
        "store_snapshot"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 25.5
    },
    "creativity/dream/modifiers/quantum_state_modifier.py": {
      "file_path": "creativity/dream/modifiers/quantum_state_modifier.py",
      "category": "creativity",
      "size_bytes": 1515,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "logging",
        "dataclasses.dataclass",
        "datetime.datetime",
        "typing.Any",
        "quantum.service.QuantumService"
      ],
      "classes": [
        "QuantumLikeStateModifier"
      ],
      "functions": [
        "modify_thread"
      ],
      "async_functions": [
        "modify_thread"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 19.0
    },
    "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py": {
      "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
      "category": "creativity",
      "size_bytes": 18660,
      "size_kb": 18.2,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "logging",
        "datetime.datetime",
        "fastapi.FastAPI",
        "fastapi.HTTPException",
        "fastapi.BackgroundTasks"
      ],
      "classes": [
        "DreamRequest",
        "DreamResponse",
        "SnapshotRequest",
        "SnapshotResponse"
      ],
      "functions": [
        "root",
        "process_dream",
        "get_dream",
        "list_dreams",
        "analyze_dream",
        "share_dream",
        "get_tier_info",
        "create_dream_snapshot",
        "get_dream_engine"
      ],
      "async_functions": [
        "root",
        "process_dream",
        "get_dream",
        "list_dreams",
        "analyze_dream",
        "share_dream",
        "get_tier_info",
        "create_dream_snapshot"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 32.5
    },
    "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py": {
      "file_path": "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py",
      "category": "creativity",
      "size_bytes": 3568,
      "size_kb": 3.5,
      "lines": 1,
      "imports": [
        "logging.config.fileConfig",
        "sqlalchemy.engine_from_config",
        "sqlalchemy.pool",
        "alembic.context",
        "os",
        "sys",
        "pathlib.Path",
        "oneiric_core.models.Base"
      ],
      "classes": [],
      "functions": [
        "run_migrations_offline",
        "run_migrations_online"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.6
    },
    "creativity/dream/oracle_dream.py": {
      "file_path": "creativity/dream/oracle_dream.py",
      "category": "creativity",
      "size_bytes": 10704,
      "size_kb": 10.5,
      "lines": 5,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "creativity/dream/processors/dream_processor.py": {
      "file_path": "creativity/dream/processors/dream_processor.py",
      "category": "creativity",
      "size_bytes": 1392,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "numpy",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "memory.systems.helix_dna.HelixMemory"
      ],
      "classes": [
        "DreamProcessor"
      ],
      "functions": [
        "__init__",
        "generate_dream"
      ],
      "async_functions": [
        "generate_dream"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.4
    },
    "creativity/dream/processors/dream_processor_integrator.py": {
      "file_path": "creativity/dream/processors/dream_processor_integrator.py",
      "category": "creativity",
      "size_bytes": 5486,
      "size_kb": 5.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "datetime.datetime",
        "dataclasses.dataclass"
      ],
      "classes": [
        "DreamProcessorIntegration"
      ],
      "functions": [
        "__init__",
        "analyze_dream_patterns",
        "_extract_patterns",
        "_find_memory_relationships",
        "_analyze_emotional_context",
        "_calculate_pattern_confidence",
        "_calculate_relationship_strength"
      ],
      "async_functions": [
        "analyze_dream_patterns"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 24.5
    },
    "creativity/dream/redirect_trace_replayer.py": {
      "file_path": "creativity/dream/redirect_trace_replayer.py",
      "category": "creativity",
      "size_bytes": 1325,
      "size_kb": 1.3,
      "lines": 1,
      "imports": [
        "json",
        "typing.List",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "RedirectTraceReplayer"
      ],
      "functions": [
        "__init__",
        "_load_log_entries",
        "replay_episode"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.8
    },
    "creativity/dream/symbolic/vocabulary.py": {
      "file_path": "creativity/dream/symbolic/vocabulary.py",
      "category": "reasoning",
      "size_bytes": 9126,
      "size_kb": 8.9,
      "lines": 1,
      "imports": [
        "core.common.__init__.symbolic_message",
        "random",
        "random"
      ],
      "classes": [
        "DreamOperation"
      ],
      "functions": [
        "get_dream_symbol",
        "get_dream_narrative",
        "get_visual_hint",
        "cycle_start",
        "phase_transition",
        "pattern_discovered",
        "insight_generated",
        "emotional_context",
        "memory_processing",
        "cycle_completion"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 22.0
    },
    "creativity/dream/tools/run_dream_analysis.py": {
      "file_path": "creativity/dream/tools/run_dream_analysis.py",
      "category": "creativity",
      "size_bytes": 10035,
      "size_kb": 9.8,
      "lines": 5,
      "imports": [
        "argparse",
        "sys",
        "pathlib.Path",
        "json",
        "creativity.dream.tools.symbolic_anomaly_explorer.SymbolicAnomalyExplorer",
        "creativity.dream.tools.symbolic_anomaly_explorer.cli_analysis",
        "creativity.dream.tools.symbolic_anomaly_explorer.analyze_recent_dreams",
        "traceback"
      ],
      "classes": [],
      "functions": [
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 18.5
    },
    "creativity/dream/tools/symbolic_theme_clusterer.py": {
      "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
      "category": "creativity",
      "size_bytes": 39649,
      "size_kb": 38.7,
      "lines": 10,
      "imports": [
        "json",
        "math",
        "argparse",
        "re",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set"
      ],
      "classes": [
        "MotifInstance",
        "SymbolicTheme",
        "ThemeTransition",
        "ThematicEvolution",
        "SymbolicThemeClusterer"
      ],
      "functions": [
        "main",
        "__init__",
        "extract_motifs_from_dreams",
        "_load_dream_sessions",
        "_generate_sample_dream_sessions",
        "_identify_dominant_theme_name",
        "_generate_thematic_emotions",
        "_generate_narrative_elements",
        "_extract_session_motifs",
        "_calculate_symbolic_weight"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Configuration handler - integrate with config management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 44.0
    },
    "creativity/dream/visualization/dream_log_viewer.py": {
      "file_path": "creativity/dream/visualization/dream_log_viewer.py",
      "category": "creativity",
      "size_bytes": 5093,
      "size_kb": 5.0,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "creativity/dream/visualization/dream_timeline_visualizer.py": {
      "file_path": "creativity/dream/visualization/dream_timeline_visualizer.py",
      "category": "creativity",
      "size_bytes": 2107,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "json",
        "datetime.datetime"
      ],
      "classes": [
        "DreamTimelineVisualizer"
      ],
      "functions": [
        "__init__",
        "render_timeline"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.1
    },
    "creativity/dream/visualization/dream_viewer.py": {
      "file_path": "creativity/dream/visualization/dream_viewer.py",
      "category": "creativity",
      "size_bytes": 2088,
      "size_kb": 2.0,
      "lines": 6,
      "imports": [
        "json",
        "os",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "load_dreams",
        "display_dreams"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.1
    },
    "creativity/dream/visualization/visualizer_core.py": {
      "file_path": "creativity/dream/visualization/visualizer_core.py",
      "category": "creativity",
      "size_bytes": 2024,
      "size_kb": 2.0,
      "lines": 3,
      "imports": [
        "json",
        "os",
        "openai"
      ],
      "classes": [],
      "functions": [
        "load_latest_flashback",
        "build_visual_prompt"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.0
    },
    "creativity/dream_systems/dream_convergence_tester.py": {
      "file_path": "creativity/dream_systems/dream_convergence_tester.py",
      "category": "creativity",
      "size_bytes": 6503,
      "size_kb": 6.4,
      "lines": 7,
      "imports": [
        "json",
        "time",
        "numpy",
        "structlog",
        "consciousness.core_consciousness.dream_engine.dream_reflection_loop.DreamReflectionLoop",
        "creativity.dream_systems.dream_seed.seed_dream"
      ],
      "classes": [
        "DreamConvergenceTester"
      ],
      "functions": [
        "__init__",
        "run_convergence_test",
        "_generate_dream_sequence",
        "_is_stable",
        "_calculate_symbolic_entropy",
        "_register_drift_signature",
        "resume_symbolic_drift_probe"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 22.5
    },
    "creativity/dream_systems/dream_emotion_bridge.py": {
      "file_path": "creativity/dream_systems/dream_emotion_bridge.py",
      "category": "creativity",
      "size_bytes": 2498,
      "size_kb": 2.4,
      "lines": 2,
      "imports": [
        "json",
        "pathlib.Path",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "memory.emotional.EmotionalMemory"
      ],
      "classes": [
        "DreamEmotionBridge"
      ],
      "functions": [
        "__init__",
        "trigger_dream_replay_if_needed",
        "_is_trigger_emotion",
        "_trigger_dream_replay"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [],
      "priority_score": 18.5
    },
    "creativity/dream_systems/dream_glyph_bridge.py": {
      "file_path": "creativity/dream_systems/dream_glyph_bridge.py",
      "category": "creativity",
      "size_bytes": 32973,
      "size_kb": 32.2,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "dataclasses.dataclass"
      ],
      "classes": [
        "DreamPhase",
        "ArchetypalGlyphMapping",
        "DreamSeed",
        "DreamGlyph",
        "DreamGlyphBridge"
      ],
      "functions": [
        "create_glyph_dream_seed",
        "to_dict",
        "to_dict",
        "__init__",
        "glyph_to_dream_seed",
        "dream_to_glyph",
        "create_memory_consolidation_glyph",
        "get_archetypal_dream_seeds",
        "get_dream_glyph_lineage",
        "_initialize_archetypal_mappings"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [],
      "priority_score": 39.5
    },
    "creativity/dream_systems/dream_log_viewer.py": {
      "file_path": "creativity/dream_systems/dream_log_viewer.py",
      "category": "creativity",
      "size_bytes": 3442,
      "size_kb": 3.4,
      "lines": 4,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.4
    },
    "creativity/dream_systems/dream_loop_generator.py": {
      "file_path": "creativity/dream_systems/dream_loop_generator.py",
      "category": "creativity",
      "size_bytes": 1471,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "structlog",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "DreamLoopGenerator"
      ],
      "functions": [
        "__init__",
        "generate_loop"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.5
    },
    "creativity/dream_systems/dream_replay.py": {
      "file_path": "creativity/dream_systems/dream_replay.py",
      "category": "creativity",
      "size_bytes": 4259,
      "size_kb": 4.2,
      "lines": 5,
      "imports": [
        "json",
        "datetime.datetime",
        "pathlib.Path",
        "dream_limiter.DreamLimiter"
      ],
      "classes": [],
      "functions": [
        "replay_recent_dreams"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 14.8
    },
    "creativity/dream_systems/dream_stats.py": {
      "file_path": "creativity/dream_systems/dream_stats.py",
      "category": "creativity",
      "size_bytes": 1383,
      "size_kb": 1.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "random",
        "datetime.datetime",
        "datetime.timedelta"
      ],
      "classes": [
        "DreamStatistics"
      ],
      "functions": [
        "__init__",
        "update_stats",
        "get_summary",
        "get_trends"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.4
    },
    "creativity/dream_systems/dream_utils.py": {
      "file_path": "creativity/dream_systems/dream_utils.py",
      "category": "creativity",
      "size_bytes": 1017,
      "size_kb": 1.0,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "random"
      ],
      "classes": [],
      "functions": [
        "analyze_dream_symbols",
        "merge_dream_sequences",
        "calculate_rem_phase",
        "dream_to_text"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 13.0
    },
    "creativity/dream_systems/dream_viewer.py": {
      "file_path": "creativity/dream_systems/dream_viewer.py",
      "category": "creativity",
      "size_bytes": 1484,
      "size_kb": 1.4,
      "lines": 4,
      "imports": [
        "json",
        "os",
        "datetime.datetime"
      ],
      "classes": [],
      "functions": [
        "load_dreams",
        "display_dreams"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.5
    },
    "creativity/dream_timeline_visualizer.py": {
      "file_path": "creativity/dream_timeline_visualizer.py",
      "category": "creativity",
      "size_bytes": 2107,
      "size_kb": 2.1,
      "lines": 1,
      "imports": [
        "json",
        "datetime.datetime"
      ],
      "classes": [
        "DreamTimelineVisualizer"
      ],
      "functions": [
        "__init__",
        "render_timeline"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.1
    },
    "creativity/emotion/voice_profiling_emotion_engine.py": {
      "file_path": "creativity/emotion/voice_profiling_emotion_engine.py",
      "category": "creativity",
      "size_bytes": 19354,
      "size_kb": 18.9,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "logging",
        "json",
        "os",
        "uuid",
        "datetime.datetime"
      ],
      "classes": [
        "VoiceProfilingEmotionEngine",
        "VoiceProfilingEmotionEngine"
      ],
      "functions": [
        "__init__",
        "_ensure_default_parameters",
        "get_parameters_for_emotion",
        "get_provider_parameters",
        "add_feedback",
        "record_usage",
        "evolve",
        "to_dict",
        "from_dict",
        "__init__"
      ],
      "async_functions": [
        "integrate_with_voice_system",
        "get_voice_system_parameters"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 33.5
    },
    "creativity/personality_engine.py": {
      "file_path": "creativity/personality_engine.py",
      "category": "creativity",
      "size_bytes": 5187,
      "size_kb": 5.1,
      "lines": 1,
      "imports": [
        "collections.defaultdict",
        "typing.Dict"
      ],
      "classes": [
        "ShynessModule",
        "EtiquetteModule",
        "HelpfulnessModule",
        "EthicalComplianceSystem",
        "CulturalIntelligenceModule",
        "HumanizedAGI"
      ],
      "functions": [
        "handle_complex_scenario",
        "__init__",
        "_update_shyness",
        "get_interaction_style",
        "__init__",
        "adapt_behavior",
        "__init__",
        "should_offer_help",
        "__init__",
        "resolve_dilemma"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 36.0
    },
    "creativity/personality_refiner.py": {
      "file_path": "creativity/personality_refiner.py",
      "category": "creativity",
      "size_bytes": 4408,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.4
    },
    "creativity/quantum_creative_integration.py": {
      "file_path": "creativity/quantum_creative_integration.py",
      "category": "creativity",
      "size_bytes": 7717,
      "size_kb": 7.5,
      "lines": 3,
      "imports": [
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "sys",
        "pathlib.Path",
        "creative_q_expression.LukhasCreativeExpressionEngine",
        "QuantumCreativeMock.MockLukhasCreativeExpressionEngine",
        "quantum_creative_mock.MockLukhasCreativeExpressionEngine"
      ],
      "classes": [
        "QuantumCreativeBridge",
        "MockEngine"
      ],
      "functions": [
        "quantum_haiku",
        "quantum_music",
        "get_quantum_status",
        "demo_integration",
        "__init__",
        "generate_quantum_haiku",
        "generate_quantum_music",
        "get_system_status",
        "__init__",
        "generate_creative_response"
      ],
      "async_functions": [
        "quantum_haiku",
        "quantum_music",
        "demo_integration",
        "generate_quantum_haiku",
        "generate_quantum_music",
        "generate_creative_response"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "creativity/service.py": {
      "file_path": "creativity/service.py",
      "category": "creativity",
      "size_bytes": 17351,
      "size_kb": 16.9,
      "lines": 2,
      "imports": [
        "os",
        "sys",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union",
        "datetime.datetime",
        "random",
        "identity.interface.IdentityClient"
      ],
      "classes": [
        "CreativityService",
        "IdentityClient"
      ],
      "functions": [
        "generate_content",
        "synthesize_dream",
        "generate_emotional_content",
        "__init__",
        "generate_content",
        "synthesize_dream",
        "generate_emotional_content",
        "collaborate_creatively",
        "_generate_creative_content",
        "_process_dream_content"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Contains service classes - integrate with service registry"
      ],
      "connection_recommendations": [],
      "priority_score": 31.5
    },
    "creativity/systems/creative_expressions_creativity_engine.py": {
      "file_path": "creativity/systems/creative_expressions_creativity_engine.py",
      "category": "creativity",
      "size_bytes": 5100,
      "size_kb": 5.0,
      "lines": 4,
      "imports": [
        "json",
        "random"
      ],
      "classes": [
        "CreativeExpressionsCreativityEngine",
        "CreativeExpressionsEngine"
      ],
      "functions": [
        "__init__",
        "_load_style_preferences",
        "generate_haiku",
        "_create_base_haiku",
        "_build_line",
        "_expand_haiku",
        "_apply_expansion_rules",
        "_add_sensory_detail",
        "_infuse_emotion",
        "_create_juxtaposition"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "creativity/systems/vocabulary_creativity_engine.py": {
      "file_path": "creativity/systems/vocabulary_creativity_engine.py",
      "category": "creativity",
      "size_bytes": 31553,
      "size_kb": 30.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass",
        "core.AnalysisType",
        "core.VisionProvider",
        "core.VisionCapability"
      ],
      "classes": [
        "VocabularyCreativityEngine",
        "VocabularyCreativityEngine"
      ],
      "functions": [
        "__init__",
        "_init_analysis_symbols",
        "_init_object_symbols",
        "_init_color_symbols",
        "_init_emotion_symbols",
        "_init_composition_symbols",
        "_init_provider_symbols",
        "_init_quality_symbols",
        "_init_symbolic_elements",
        "get_symbol_for_analysis_type"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 33.5
    },
    "creativity/systems/voice_personality_creativity_engine.py": {
      "file_path": "creativity/systems/voice_personality_creativity_engine.py",
      "category": "creativity",
      "size_bytes": 14919,
      "size_kb": 14.6,
      "lines": 3,
      "imports": [
        "logging",
        "asyncio",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "datetime.datetime",
        "core.personality.creative_expressions.NeuroHaikuGenerator"
      ],
      "classes": [
        "VoicePersonalityCreativityEngine"
      ],
      "functions": [
        "__init__",
        "_init_components",
        "enhance_voice_text",
        "get_voice_modulation",
        "adapt_to_interaction",
        "_should_enhance_text",
        "_apply_personality_traits",
        "_add_emphasis",
        "_add_pauses",
        "_update_personality_traits"
      ],
      "async_functions": [
        "enhance_voice_text"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 26.0
    },
    "creativity/voice_integrator.py": {
      "file_path": "creativity/voice_integrator.py",
      "category": "creativity",
      "size_bytes": 11866,
      "size_kb": 11.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Union",
        "logging",
        "asyncio",
        "time",
        "dataclasses.dataclass",
        "bio_core.oscillator.quantum_inspired_layer.QuantumBioOscillator"
      ],
      "classes": [
        "EnhancedVoiceConfig",
        "EnhancedVoiceIntegrator"
      ],
      "functions": [
        "__init__",
        "process_voice",
        "generate_speech",
        "_basic_voice_processing",
        "_enhance_emotion",
        "_basic_speech_synthesis",
        "_enhance_synthesis",
        "_get_voice_profile",
        "_adapt_cultural_context",
        "_record_session_usage"
      ],
      "async_functions": [
        "process_voice",
        "generate_speech",
        "_basic_voice_processing",
        "_enhance_emotion",
        "_basic_speech_synthesis",
        "_enhance_synthesis"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 28.0
    },
    "emotion/affect_detection/recurring_emotion_tracker.py": {
      "file_path": "emotion/affect_detection/recurring_emotion_tracker.py",
      "category": "emotion",
      "size_bytes": 5684,
      "size_kb": 5.6,
      "lines": 1,
      "imports": [
        "datetime.datetime",
        "datetime.timezone",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "numpy",
        "logging",
        "memory.emotional.EmotionVector",
        "memory.emotional.EmotionalMemory"
      ],
      "classes": [
        "RecurringEmotionTracker"
      ],
      "functions": [
        "__init__",
        "check_for_recurrence",
        "_check_recurrence",
        "_find_origin_dream",
        "update_bio_oscillator",
        "inject_dream_snapshot"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 17.0
    },
    "emotion/colony_emotions.py": {
      "file_path": "emotion/colony_emotions.py",
      "category": "emotion",
      "size_bytes": 3119,
      "size_kb": 3.0,
      "lines": 1,
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "numpy",
        "core.colonies.base_colony.BaseColony",
        "emotion.models.EmotionalState",
        "emotion.models.EmotionVector"
      ],
      "classes": [
        "EmotionalColony"
      ],
      "functions": [
        "__init__",
        "process_stimulus",
        "_emotional_contagion",
        "_merge_emotions"
      ],
      "async_functions": [
        "process_stimulus",
        "_emotional_contagion"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 16.1
    },
    "emotion/cycler.py": {
      "file_path": "emotion/cycler.py",
      "category": "emotion",
      "size_bytes": 967,
      "size_kb": 0.9,
      "lines": 1,
      "imports": [
        "typing.List",
        "typing.Optional",
        "logging",
        "memory.emotional.EmotionalMemory"
      ],
      "classes": [
        "EmotionCycler"
      ],
      "functions": [
        "__init__",
        "next_emotion"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 11.0
    },
    "emotion/dreamseed_unified.py": {
      "file_path": "emotion/dreamseed_unified.py",
      "category": "emotion",
      "size_bytes": 30345,
      "size_kb": 29.6,
      "lines": 1,
      "imports": [
        "json",
        "hashlib",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "EmotionalTier",
        "SymbolicEmotionTag",
        "EmotionalSafetyLevel",
        "UnifiedEmotionalAccessContext",
        "UnifiedSymbolicEmotionState",
        "UnifiedDreamSeedEmotionEngine"
      ],
      "functions": [
        "create_unified_dreamseed_emotion_engine",
        "__init__",
        "assign_unified_emotional_tier",
        "process_unified_dreamseed_emotion",
        "analyze_emotional_patterns_unified",
        "modulate_emotional_state_unified",
        "_lambda_to_emotional_tier",
        "_get_unified_tier_features",
        "_inject_symbolic_tags_unified",
        "_isolate_codreamer_affect_unified"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 40.5
    },
    "emotion/multimodal_sentiment.py": {
      "file_path": "emotion/multimodal_sentiment.py",
      "category": "emotion",
      "size_bytes": 2869,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Optional",
        "numpy"
      ],
      "classes": [],
      "functions": [
        "analyze_multimodal_sentiment"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 8.4
    },
    "features/api/dream_api.py": {
      "file_path": "features/api/dream_api.py",
      "category": "api_services",
      "size_bytes": 15179,
      "size_kb": 14.8,
      "lines": 1,
      "imports": [
        "structlog",
        "flask.Flask",
        "flask.jsonify",
        "flask.request",
        "flask_cors.CORS",
        "datetime.datetime",
        "random",
        "sys",
        "os",
        "time"
      ],
      "classes": [],
      "functions": [
        "trigger_dream_generation_endpoint",
        "get_current_dream_state_endpoint",
        "generate_symbolic_dreams"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 11.5
    },
    "features/docututor/memory_evolution/bio_oscillator.py": {
      "file_path": "features/docututor/memory_evolution/bio_oscillator.py",
      "category": "bio_systems",
      "size_bytes": 3690,
      "size_kb": 3.6,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "numpy"
      ],
      "classes": [
        "BioOscillatorAdapter"
      ],
      "functions": [
        "__init__",
        "process_knowledge",
        "update_state",
        "get_resonant_knowledge",
        "_content_to_pattern",
        "_calculate_resonance",
        "_interaction_type_to_value"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.2
    },
    "features/integration/executive_decision_integrator.py": {
      "file_path": "features/integration/executive_decision_integrator.py",
      "category": "bridge_integration",
      "size_bytes": 42337,
      "size_kb": 41.3,
      "lines": 1,
      "imports": [
        "asyncio",
        "json",
        "uuid",
        "abc.ABC",
        "abc.abstractmethod",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "datetime.timedelta"
      ],
      "classes": [
        "IntegrationMode",
        "WorkflowType",
        "OperationStatus",
        "IntegrationRequest",
        "IntegrationResponse",
        "ModuleHealth",
        "WorkflowOrchestrator",
        "CEOAttitudeIntegrationHub"
      ],
      "functions": [
        "__init__",
        "execute_workflow",
        "_execute_decision_pipeline",
        "_execute_dream_to_reality",
        "_execute_causal_analysis",
        "_execute_privacy_workflow",
        "_execute_full_pipeline",
        "_create_ethical_decision_from_request",
        "_create_explanation_request",
        "_create_hitlo_decision_context"
      ],
      "async_functions": [
        "execute_workflow",
        "_execute_decision_pipeline",
        "_execute_dream_to_reality",
        "_execute_causal_analysis",
        "_execute_privacy_workflow",
        "_execute_full_pipeline",
        "_create_ethical_decision_from_request",
        "_create_explanation_request",
        "_create_hitlo_decision_context",
        "_create_ethical_decision_from_causal_analysis",
        "_create_privacy_decision_context",
        "start",
        "stop",
        "execute_integrated_workflow",
        "_health_monitoring",
        "_check_module_health",
        "_metrics_collection"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 46.5
    },
    "features/integration/layer.py": {
      "file_path": "features/integration/layer.py",
      "category": "bridge_integration",
      "size_bytes": 2542,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "structlog",
        "system_coordinator.SystemCoordinator",
        "system_coordinator.get_system_coordinator"
      ],
      "classes": [
        "IntegrationLayer"
      ],
      "functions": [
        "__init__",
        "integrate_systems",
        "get_integration_status",
        "shutdown"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 18.5
    },
    "features/integration/meta_cognitive/meta_cognitive.py": {
      "file_path": "features/integration/meta_cognitive/meta_cognitive.py",
      "category": "consciousness",
      "size_bytes": 17809,
      "size_kb": 17.4,
      "lines": 1,
      "imports": [
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "asyncio",
        "numpy",
        "bio_awareness.awareness.EnhancedSystemAwareness",
        "dast.enhanced_dast_orchestrator.EnhancedDASTOrchestrator"
      ],
      "classes": [
        "EnhancedMetaCognitiveOrchestrator",
        "EnhancedSystemAwareness",
        "EnhancedDASTOrchestrator",
        "QuantumOscillator"
      ],
      "functions": [
        "__init__",
        "process_cognitive_task",
        "_check_cognitive_coherence",
        "_update_quantum_weights",
        "_process_with_safety",
        "_generate_safe_alternative",
        "_calculate_base_coherence",
        "_apply_quantum_processing",
        "_validate_safety",
        "_handle_cognitive_error"
      ],
      "async_functions": [
        "process_cognitive_task",
        "_check_cognitive_coherence",
        "_update_quantum_weights",
        "_process_with_safety",
        "_generate_safe_alternative",
        "_handle_cognitive_error",
        "monitor_system"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 33.0
    },
    "features/integration/neural_symbolic_bridge.py": {
      "file_path": "features/integration/neural_symbolic_bridge.py",
      "category": "bridge_integration",
      "size_bytes": 4410,
      "size_kb": 4.3,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "numpy",
        "requests",
        "io.BytesIO",
        "base64",
        "typing.Union",
        "typing.Any"
      ],
      "classes": [
        "NeuralSymbolicIntegration"
      ],
      "functions": [
        "__init__",
        "process",
        "_neural_process",
        "_symbolic_process",
        "_integrate_results"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 20.9
    },
    "features/integration/neuro_symbolic_fusion_layer.py": {
      "file_path": "features/integration/neuro_symbolic_fusion_layer.py",
      "category": "bridge_integration",
      "size_bytes": 25960,
      "size_kb": 25.4,
      "lines": 1,
      "imports": [
        "numpy",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "FusionMode",
        "FusionContext",
        "NeuroSymbolicPattern",
        "NeuroSymbolicFusionLayer"
      ],
      "functions": [
        "create_nsfl_instance",
        "__init__",
        "calculate_coherence",
        "__init__",
        "_default_config",
        "set_fusion_context",
        "fuse_neural_symbolic",
        "translate_neural_to_symbolic",
        "translate_symbolic_to_neural",
        "adapt_fusion_weights"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 39.5
    },
    "features/integration/safety/coordinator.py": {
      "file_path": "features/integration/safety/coordinator.py",
      "category": "bridge_integration",
      "size_bytes": 18939,
      "size_kb": 18.5,
      "lines": 1,
      "imports": [
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "asyncio",
        "numpy",
        "enhanced_emergency_override.EnhancedEmergencyOverride",
        "governance.policy_board.EnhancedPolicyBoard"
      ],
      "classes": [
        "EnhancedSafetyCoordinator",
        "EnhancedEmergencyOverride",
        "EnhancedPolicyBoard",
        "EnhancedSystemAwareness",
        "QuantumOscillator"
      ],
      "functions": [
        "__init__",
        "check_system_safety",
        "handle_safety_violation",
        "_calculate_safety_score",
        "_needs_emergency_response",
        "check_safety_flags",
        "emergency_shutdown",
        "submit_proposal",
        "monitor_system",
        "quantum_modulate"
      ],
      "async_functions": [
        "check_system_safety",
        "handle_safety_violation",
        "check_safety_flags",
        "emergency_shutdown",
        "submit_proposal",
        "monitor_system"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 34.0
    },
    "features/integration/safety/emergency_override.py": {
      "file_path": "features/integration/safety/emergency_override.py",
      "category": "bridge_integration",
      "size_bytes": 19380,
      "size_kb": 18.9,
      "lines": 2,
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "structlog",
        "asyncio"
      ],
      "classes": [
        "EnhancedEmergencyOverride",
        "QuantumOscillator",
        "EnhancedSystemAwareness"
      ],
      "functions": [
        "__init__",
        "check_safety_flags",
        "emergency_shutdown",
        "log_incident",
        "_verify_quantum_safety",
        "_verify_authorization",
        "_quantum_safe_shutdown",
        "_hard_shutdown",
        "_get_system_state",
        "_get_quantum_like_state"
      ],
      "async_functions": [
        "check_safety_flags",
        "emergency_shutdown",
        "log_incident",
        "_quantum_safe_shutdown",
        "_get_system_state",
        "monitor_system"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 31.0
    },
    "features/integration/system_bridge.py": {
      "file_path": "features/integration/system_bridge.py",
      "category": "bridge_integration",
      "size_bytes": 15887,
      "size_kb": 15.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "SystemBridge"
      ],
      "functions": [
        "create_system_bridge",
        "create_and_initialize_system_bridge",
        "__init__",
        "initialize",
        "_setup_integration_system",
        "process",
        "_core_integration_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_system_bridge",
        "initialize",
        "_setup_integration_system",
        "process",
        "_core_integration_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main_demo"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 30.0
    },
    "features/memory/connection_visualizer.py": {
      "file_path": "features/memory/connection_visualizer.py",
      "category": "memory_systems",
      "size_bytes": 8409,
      "size_kb": 8.2,
      "lines": 9,
      "imports": [
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [],
      "functions": [
        "load_all_specifications",
        "analyze_connections",
        "print_connection_summary",
        "print_data_flow_diagram",
        "print_integration_interfaces",
        "print_implementation_checklist",
        "main"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence",
        "Has main() - create startup integration script"
      ],
      "priority_score": 21.5
    },
    "features/symbolic/collapse/bridge.py": {
      "file_path": "features/symbolic/collapse/bridge.py",
      "category": "reasoning",
      "size_bytes": 2494,
      "size_kb": 2.4,
      "lines": 2,
      "imports": [
        "__future__.annotations",
        "datetime.datetime",
        "pathlib.Path",
        "structlog"
      ],
      "classes": [
        "CollapseBridge"
      ],
      "functions": [
        "_append_log",
        "record_collapse",
        "get_metrics",
        "__init__",
        "record_event",
        "get_current_metrics",
        "clear_events"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 20.0
    },
    "features/symbolic/collapse/buffer.py": {
      "file_path": "features/symbolic/collapse/buffer.py",
      "category": "reasoning",
      "size_bytes": 1093,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "CollapseBuffer"
      ],
      "functions": [
        "__init__",
        "buffer_event"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 16.1
    },
    "features/symbolic/collapse/engine.py": {
      "file_path": "features/symbolic/collapse/engine.py",
      "category": "reasoning",
      "size_bytes": 24252,
      "size_kb": 23.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "MemoryNode",
        "CollapseResult",
        "CollapseEngine"
      ],
      "functions": [
        "get_global_engine",
        "compute_hash",
        "to_dict",
        "__init__",
        "collapse_nodes",
        "_calculate_node_entropy",
        "_determine_collapse_strategy",
        "_calculate_average_similarity",
        "_semantic_similarity",
        "_consolidate_nodes"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 31.0
    },
    "features/symbolic/collapse/entropy_tracker.py": {
      "file_path": "features/symbolic/collapse/entropy_tracker.py",
      "category": "reasoning",
      "size_bytes": 34847,
      "size_kb": 34.0,
      "lines": 9,
      "imports": [
        "numpy",
        "structlog",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set"
      ],
      "classes": [
        "CollapsePhase",
        "CollapseType",
        "CollapseField",
        "CollapseTrace",
        "CollapseRiskAssessment",
        "CollapseEntropyTracker"
      ],
      "functions": [
        "create_collapse_tracker",
        "__init__",
        "_init_drift_integration",
        "track_entropy",
        "calculate_entropy_slope",
        "assess_collapse_risk",
        "_generate_field_id",
        "_calculate_collapse_score",
        "_determine_phase",
        "_generate_trace"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 39.5
    },
    "features/symbolic/collapse/reasoner.py": {
      "file_path": "features/symbolic/collapse/reasoner.py",
      "category": "reasoning",
      "size_bytes": 25513,
      "size_kb": 24.9,
      "lines": 1,
      "imports": [
        "structlog",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "dataclasses.dataclass",
        "dataclasses.field"
      ],
      "classes": [
        "CollapseType",
        "ResolutionStrategy",
        "ReasoningChain",
        "CollapseResult",
        "QuantumCollapseEngine"
      ],
      "functions": [
        "__init__",
        "initiate_collapse",
        "evaluate_branch_stability",
        "emit_collapse_event",
        "log_entropy_threshold_crossing",
        "_determine_collapse_type",
        "_select_resolution_strategy",
        "_apply_resolution_strategy",
        "_calculate_entropy_delta",
        "_calculate_final_confidence"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 34.5
    },
    "features/symbolic/collapse/trace.py": {
      "file_path": "features/symbolic/collapse/trace.py",
      "category": "reasoning",
      "size_bytes": 2835,
      "size_kb": 2.8,
      "lines": 1,
      "imports": [
        "logging",
        "uuid",
        "hashlib",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "CollapseTrace"
      ],
      "functions": [
        "get_global_tracer",
        "__init__",
        "log_collapse",
        "get_collapse_history"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 18.8
    },
    "features/symbolic/drift/score.py": {
      "file_path": "features/symbolic/drift/score.py",
      "category": "reasoning",
      "size_bytes": 854,
      "size_kb": 0.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass"
      ],
      "classes": [
        "DriftScore",
        "DriftScoreCalculator"
      ],
      "functions": [
        "__init__",
        "calculate"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.9
    },
    "features/symbolic/memoria/recall_hooks.py": {
      "file_path": "features/symbolic/memoria/recall_hooks.py",
      "category": "reasoning",
      "size_bytes": 2724,
      "size_kb": 2.7,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Callable"
      ],
      "classes": [
        "RecallHooks"
      ],
      "functions": [
        "get_global_hook_manager",
        "__init__",
        "add_pre_recall_hook",
        "add_post_recall_hook",
        "execute_pre_recall_hooks",
        "execute_post_recall_hooks"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.7
    },
    "features/symbolic/memoria/symbolic_trace_map.py": {
      "file_path": "features/symbolic/memoria/symbolic_trace_map.py",
      "category": "reasoning",
      "size_bytes": 3180,
      "size_kb": 3.1,
      "lines": 5,
      "imports": [
        "logging",
        "uuid",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "datetime.timezone"
      ],
      "classes": [
        "SymbolicTraceMap"
      ],
      "functions": [
        "get_global_trace_map",
        "__init__",
        "add_trace_node",
        "get_trace",
        "generate_flow_diagram"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.7
    },
    "features/symbolic/trace_verifier.py": {
      "file_path": "features/symbolic/trace_verifier.py",
      "category": "reasoning",
      "size_bytes": 822,
      "size_kb": 0.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "SymbolicTraceVerifier"
      ],
      "functions": [
        "__init__",
        "_load_agent_flow_map",
        "verify_trace"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 16.3
    },
    "features/symbolic/tracer.py": {
      "file_path": "features/symbolic/tracer.py",
      "category": "reasoning",
      "size_bytes": 3806,
      "size_kb": 3.7,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "json",
        "uuid"
      ],
      "classes": [
        "InferenceStep",
        "SymbolicTrace",
        "DecisionTrail",
        "SymbolicTracer"
      ],
      "functions": [
        "to_json",
        "__init__",
        "start_trail",
        "trace",
        "end_trail",
        "get_trail"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 26.8
    },
    "interfaces/api/lambda_bot_api_integration.py": {
      "file_path": "interfaces/api/lambda_bot_api_integration.py",
      "category": "api_services",
      "size_bytes": 5260,
      "size_kb": 5.1,
      "lines": 1,
      "imports": [
        "fastapi.FastAPI",
        "fastapi.HTTPException",
        "pydantic.BaseModel",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "httpx",
        "asyncio",
        "datetime.datetime"
      ],
      "classes": [
        "ThoughtProcessingRequest",
        "\u039bBotOrchestrationRequest"
      ],
      "functions": [
        "lambda_bot_process_thought",
        "get_lambda_bot_consciousness_state",
        "lambda_bot_health",
        "root"
      ],
      "async_functions": [
        "lambda_bot_process_thought",
        "get_lambda_bot_consciousness_state",
        "lambda_bot_health",
        "root"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 18.0
    },
    "interfaces/api/v1/grpc/client.py": {
      "file_path": "interfaces/api/v1/grpc/client.py",
      "category": "api_services",
      "size_bytes": 1823,
      "size_kb": 1.8,
      "lines": 1,
      "imports": [
        "grpc",
        "typing.Any",
        "typing.Dict",
        "typing.Optional",
        "interfaces.api.v1.grpc.lukhas_pb2_grpc.core_pb2",
        "interfaces.api.v1.grpc.lukhas_pb2_grpc.lukhas_pb2_grpc"
      ],
      "classes": [
        "LukhasGRPCClient"
      ],
      "functions": [
        "__init__",
        "__aenter__",
        "__aexit__",
        "process"
      ],
      "async_functions": [
        "__aenter__",
        "__aexit__",
        "process"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 17.8
    },
    "interfaces/api/v1/grpc/pb2.py": {
      "file_path": "interfaces/api/v1/grpc/pb2.py",
      "category": "api_services",
      "size_bytes": 5634,
      "size_kb": 5.5,
      "lines": 1,
      "imports": [
        "time",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "google.protobuf.message",
        "google.protobuf.timestamp_pb2",
        "json",
        "json",
        "json"
      ],
      "classes": [
        "ProcessRequest",
        "SymbolicState",
        "ProcessResponse",
        "HealthRequest",
        "HealthResponse",
        "AwarenessRequest",
        "AwarenessResponse",
        "EngineRegistrationRequest",
        "EngineRegistrationResponse",
        "EngineQueryRequest",
        "EngineQueryResponse"
      ],
      "functions": [
        "__init__",
        "HasField",
        "SerializeToString",
        "__init__",
        "HasField",
        "__init__",
        "HasField",
        "SerializeToString",
        "__init__",
        "HasField"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 44.0
    },
    "interfaces/api/v1/grpc/pb2_grpc.py": {
      "file_path": "interfaces/api/v1/grpc/pb2_grpc.py",
      "category": "api_services",
      "size_bytes": 11717,
      "size_kb": 11.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Any",
        "typing.Dict",
        "typing.Iterator",
        "grpc"
      ],
      "classes": [
        "LukhasServiceServicer",
        "AwarenessServiceServicer",
        "IntelligenceRegistryServicer",
        "LukhasServiceStub"
      ],
      "functions": [
        "add_LukhasServiceServicer_to_server",
        "add_AwarenessServiceServicer_to_server",
        "add_IntelligenceRegistryServicer_to_server",
        "__init__",
        "Process",
        "StreamProcess",
        "CheckHealth",
        "__init__",
        "AssessAwareness",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Contains service classes - integrate with service registry"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 29.5
    },
    "interfaces/api/v1/grpc/server.py": {
      "file_path": "interfaces/api/v1/grpc/server.py",
      "category": "api_services",
      "size_bytes": 1109,
      "size_kb": 1.1,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "concurrent.futures",
        "grpc",
        "interfaces.api.v1.grpc.lukhas_pb2_grpc.core_pb2_grpc",
        "interfaces.api.v1.grpc.lukhas_pb2_grpc.lukhas_pb2",
        "orchestration.brain.lukhas_core.core_core"
      ],
      "classes": [
        "LukhasServicer"
      ],
      "functions": [
        "serve",
        "Process"
      ],
      "async_functions": [
        "serve",
        "Process"
      ],
      "integration_opportunities": [
        "Contains service classes - integrate with service registry",
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 14.1
    },
    "interfaces/api/v1/rest/middleware.py": {
      "file_path": "interfaces/api/v1/rest/middleware.py",
      "category": "api_services",
      "size_bytes": 9406,
      "size_kb": 9.2,
      "lines": 1,
      "imports": [
        "os",
        "time",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "datetime.timezone",
        "fastapi.Request",
        "fastapi.HTTPException",
        "fastapi.status"
      ],
      "classes": [
        "AuthMiddleware"
      ],
      "functions": [
        "create_access_token",
        "get_current_user",
        "__init__",
        "__call__",
        "authenticate_request",
        "validate_jwt_token",
        "validate_api_key",
        "validate_api_key"
      ],
      "async_functions": [
        "__call__",
        "authenticate_request",
        "validate_jwt_token",
        "validate_api_key"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register endpoints with main API router",
        "Connect to service discovery system",
        "Add to API documentation generation"
      ],
      "priority_score": 20.0
    },
    "reasoning/LBot_reasoning_processed.py": {
      "file_path": "reasoning/LBot_reasoning_processed.py",
      "category": "reasoning",
      "size_bytes": 44311,
      "size_kb": 43.3,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "json",
        "asyncio",
        "time",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict"
      ],
      "classes": [
        "AdvancedReasoningRequest",
        "AdvancedReasoningResult",
        "\u039bBotAdvancedReasoningOrchestrator",
        "ScientificTheoryFormer",
        "EthicalReasoner",
        "MathematicalReasoner",
        "MultiScaleReasoning",
        "CrossBrainReasoningOrchestrator",
        "QuantumBioSymbolicConfidenceIntegrator",
        "BioQuantumSymbolicReasoner",
        "AdvancedConfidenceCalibrator",
        "MultiBrainSymphonyOrchestrator",
        "ScientificTheoryFormer",
        "EthicalReasoner",
        "MathematicalReasoner",
        "MultiScaleReasoning",
        "CrossBrainReasoningOrchestrator",
        "QuantumBioSymbolicConfidenceIntegrator",
        "\u039bBotTask",
        "SecurityIssue",
        "PRAnalysisResult",
        "\u039bBotAuditor"
      ],
      "functions": [
        "__init__",
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis"
      ],
      "async_functions": [
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis",
        "analyze_vulnerability_advanced",
        "analyze_workflow_failure_advanced",
        "reason_with_quantum_confidence",
        "_measure_neural_coherence",
        "_measure_cross_frequency_coupling",
        "_measure_brain_synchronization",
        "_generate_quantum_recommendations",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "orchestrate_cross_brain_reasoning",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "reason_across_scales",
        "initialize_brain_oscillations",
        "orchestrate_reasoning_process",
        "integrate_confidence_signals",
        "abstract_reasoning_cycle",
        "_measure_quantum_coherence",
        "calibrate_confidence",
        "meta_cognitive_reflection",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "reason_across_scales",
        "initialize_brain_oscillations",
        "orchestrate_reasoning_process",
        "integrate_confidence_signals"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 91.0
    },
    "reasoning/chat_completion_reasoning_effort.py": {
      "file_path": "reasoning/chat_completion_reasoning_effort.py",
      "category": "reasoning",
      "size_bytes": 5279,
      "size_kb": 5.2,
      "lines": 1,
      "imports": [
        "structlog",
        "shared.reasoning_effort.ReasoningEffort"
      ],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.0
    },
    "reasoning/conflict_resolver.py": {
      "file_path": "reasoning/conflict_resolver.py",
      "category": "reasoning",
      "size_bytes": 51954,
      "size_kb": 50.7,
      "lines": 1,
      "imports": [
        "structlog",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "ConflictType",
        "ResolutionMode",
        "ConflictSeverity",
        "SymbolicFragment",
        "ContradictionReport",
        "ConflictResolutionResult",
        "SymbolicConflictResolver"
      ],
      "functions": [
        "__init__",
        "detect_symbolic_conflict",
        "classify_contradiction",
        "resolve_conflict",
        "emit_resolution_trace",
        "_initialize_patterns",
        "_detect_logical_contradictions",
        "_detect_ethical_contradictions",
        "_detect_emotional_contradictions",
        "_detect_memory_contradictions"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 44.0
    },
    "reasoning/diagnostics/trace_mapper.py": {
      "file_path": "reasoning/diagnostics/trace_mapper.py",
      "category": "reasoning",
      "size_bytes": 2660,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "TraceMapper"
      ],
      "functions": [
        "__init__",
        "load_trace",
        "map_traces"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 18.2
    },
    "reasoning/ethical_reasoning_system.py": {
      "file_path": "reasoning/ethical_reasoning_system.py",
      "category": "reasoning",
      "size_bytes": 110125,
      "size_kb": 107.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "json",
        "time",
        "abc.ABC",
        "abc.abstractmethod",
        "collections.defaultdict",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime"
      ],
      "classes": [
        "EthicalFramework",
        "MoralPrinciple",
        "StakeholderType",
        "EthicalDilemmaType",
        "MoralJudgment",
        "ValueAlignmentAssessment",
        "EthicalConstraint",
        "DeontologicalReasoner",
        "ConsequentialistReasoner",
        "ValueAlignmentSystem",
        "EthicalReasoningSystem"
      ],
      "functions": [
        "main_ethics_test",
        "__init__",
        "evaluate_action",
        "_universal_law_test",
        "_check_logical_contradiction",
        "_check_practical_contradiction",
        "_generate_universalization_reasoning",
        "_humanity_formula_test",
        "_check_treats_as_means_only",
        "_check_respects_autonomy"
      ],
      "async_functions": [
        "main_ethics_test",
        "evaluate_action",
        "_universal_law_test",
        "_check_logical_contradiction",
        "_check_practical_contradiction",
        "_humanity_formula_test",
        "_check_treats_as_means_only",
        "_check_respects_autonomy",
        "_kingdom_of_ends_test",
        "_check_rational_legislation",
        "_check_promotes_dignity",
        "_analyze_duty_conflicts",
        "evaluate_action",
        "_calculate_action_utility",
        "_predict_consequences",
        "_classical_utility",
        "_preference_utility",
        "_wellbeing_utility",
        "_capability_utility",
        "_determine_optimal_action",
        "learn_from_feedback",
        "_learn_from_rating_feedback",
        "_learn_from_preference_feedback",
        "_learn_from_correction_feedback",
        "_apply_value_updates",
        "_detect_value_drift",
        "_update_alignment_metrics",
        "assess_alignment",
        "make_ethical_judgment",
        "_check_ethical_constraints",
        "_evaluate_constraint_violation",
        "_analyze_stakeholder_impacts",
        "_assess_cultural_sensitivity",
        "_synthesize_moral_judgment",
        "_determine_recommended_action",
        "_generate_moral_justification",
        "_monitor_ethical_drift",
        "get_ethical_system_report",
        "update_ethical_constraints"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 80.5
    },
    "reasoning/goals/goal_manager.py": {
      "file_path": "reasoning/goals/goal_manager.py",
      "category": "reasoning",
      "size_bytes": 4891,
      "size_kb": 4.8,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "logging",
        "time"
      ],
      "classes": [
        "GoalManagementNode"
      ],
      "functions": [
        "__init__",
        "process",
        "_create_goal",
        "_create_action_plan",
        "_create_query_plan",
        "_create_task_plan",
        "_create_dialogue_plan",
        "update_goal_progress"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 22.9
    },
    "reasoning/id_reasoning_engine.py": {
      "file_path": "reasoning/id_reasoning_engine.py",
      "category": "reasoning",
      "size_bytes": 66423,
      "size_kb": 64.9,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "structlog",
        "asyncio",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "AccessTier",
        "ComplianceRegion",
        "EmotionalMemoryVector",
        "QuantumSignature",
        "AuditLogEntry",
        "TraumaLockedMemory",
        "ComplianceMonitor",
        "LukhasIdManager"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "lock_memory",
        "unlock_memory",
        "_generate_emotional_key",
        "_generate_standard_key",
        "_encrypt_data",
        "_decrypt_data",
        "_calculate_emotional_similarity"
      ],
      "async_functions": [
        "register_user",
        "authenticate_user",
        "_verify_tier_credentials",
        "_create_audit_log_entry",
        "get_user_permissions",
        "store_emotional_memory",
        "retrieve_emotional_memory",
        "demo_lukhas_id_manager_system"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 52.5
    },
    "reasoning/intent/intent_detector.py": {
      "file_path": "reasoning/intent/intent_detector.py",
      "category": "reasoning",
      "size_bytes": 16140,
      "size_kb": 15.8,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "time",
        "re",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Union",
        "typing.Optional"
      ],
      "classes": [
        "IntentNode"
      ],
      "functions": [
        "__init__",
        "process",
        "_neural_process",
        "_symbolic_process",
        "_extract_features",
        "_integrate_results",
        "_update_history"
      ],
      "async_functions": [
        "process",
        "_neural_process"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 24.5
    },
    "reasoning/intent/intent_processor.py": {
      "file_path": "reasoning/intent/intent_processor.py",
      "category": "reasoning",
      "size_bytes": 3283,
      "size_kb": 3.2,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "numpy",
        "requests",
        "io.BytesIO",
        "base64"
      ],
      "classes": [
        "IntentNode"
      ],
      "functions": [
        "__init__",
        "process",
        "_process_text",
        "_process_structured",
        "_extract_entities",
        "_create_action_plan"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 20.3
    },
    "reasoning/master_loop.py": {
      "file_path": "reasoning/master_loop.py",
      "category": "reasoning",
      "size_bytes": 2780,
      "size_kb": 2.7,
      "lines": 3,
      "imports": [
        "datetime.datetime",
        "json",
        "symbolic.memoria.log_memory",
        "symbolic.lukhas_personality.adjust_personality",
        "symbolic.lukhas_personality.LUKHAS_PERSONALITY",
        "symbolic.lukhas_emotion.analyze_emotion",
        "symbolic.lukhas_dreams.generate_symbolic_dreams",
        "symbolic.lukhas_guardian.ethical_check",
        "symbolic.lukhas_voice.speak",
        "symbolic.lukhas_reflector.recall_last_interaction"
      ],
      "classes": [],
      "functions": [
        "process_user_input"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 13.3
    },
    "reasoning/reasoning_colony.py": {
      "file_path": "reasoning/reasoning_colony.py",
      "category": "reasoning",
      "size_bytes": 41493,
      "size_kb": 40.5,
      "lines": 7,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "typing.Any",
        "typing.Dict"
      ],
      "classes": [
        "ReasonerType",
        "ReasoningQuery",
        "ReasoningInsight",
        "ReasoningAgent",
        "LogicalReasoningAgent",
        "CausalReasoningAgent",
        "CreativeReasoningAgent",
        "ReasoningColony",
        "MemoryManager",
        "SymbolicEngine"
      ],
      "functions": [
        "add_conclusion",
        "get_consensus_score",
        "__init__",
        "_initialize_specialization",
        "process_query",
        "_retrieve_relevant_memories",
        "_get_memory_emotion",
        "_apply_reasoning",
        "_store_insight",
        "_apply_reasoning"
      ],
      "async_functions": [
        "process_query",
        "_retrieve_relevant_memories",
        "_apply_reasoning",
        "_store_insight",
        "_apply_reasoning",
        "_apply_reasoning",
        "_apply_reasoning",
        "submit_query",
        "_process_query",
        "_build_consensus",
        "_store_consensus",
        "demo_reasoning_colony"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 60.0
    },
    "reasoning/reasoning_diagnostics.py": {
      "file_path": "reasoning/reasoning_diagnostics.py",
      "category": "reasoning",
      "size_bytes": 996,
      "size_kb": 1.0,
      "lines": 1,
      "imports": [
        "unittest",
        "reasoning.reasoning_engine.SymbolicEngine"
      ],
      "classes": [
        "TestReasoningDiagnostics"
      ],
      "functions": [
        "test_logic_fallbacks",
        "test_unstable_inference"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 14.0
    },
    "reasoning/reporting/reasoning_report_generator.py": {
      "file_path": "reasoning/reporting/reasoning_report_generator.py",
      "category": "reasoning",
      "size_bytes": 2017,
      "size_kb": 2.0,
      "lines": 12,
      "imports": [
        "json",
        "typing.List",
        "typing.Dict",
        "typing.Any"
      ],
      "classes": [
        "ReasoningReportGenerator"
      ],
      "functions": [
        "generate_report",
        "_format_trace"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 15.0
    },
    "reasoning/response_reasoning_delta_event.py": {
      "file_path": "reasoning/response_reasoning_delta_event.py",
      "category": "reasoning",
      "size_bytes": 6634,
      "size_kb": 6.5,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningDeltaEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 20.0
    },
    "reasoning/response_reasoning_done_event.py": {
      "file_path": "reasoning/response_reasoning_done_event.py",
      "category": "reasoning",
      "size_bytes": 6009,
      "size_kb": 5.9,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningDoneEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.0
    },
    "reasoning/response_reasoning_item.py": {
      "file_path": "reasoning/response_reasoning_item.py",
      "category": "reasoning",
      "size_bytes": 7185,
      "size_kb": 7.0,
      "lines": 1,
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "Summary",
        "ResponseReasoningItem"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.0
    },
    "reasoning/response_reasoning_item_param.py": {
      "file_path": "reasoning/response_reasoning_item_param.py",
      "category": "reasoning",
      "size_bytes": 6503,
      "size_kb": 6.4,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "typing.Iterable",
        "typing.Optional",
        "typing_extensions.Literal",
        "typing_extensions.Required",
        "typing_extensions.TypedDict",
        "structlog"
      ],
      "classes": [
        "Summary",
        "ResponseReasoningItemParam"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.0
    },
    "reasoning/response_reasoning_summary_delta_event.py": {
      "file_path": "reasoning/response_reasoning_summary_delta_event.py",
      "category": "reasoning",
      "size_bytes": 5838,
      "size_kb": 5.7,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningSummaryDeltaEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.0
    },
    "reasoning/response_reasoning_summary_done_event.py": {
      "file_path": "reasoning/response_reasoning_summary_done_event.py",
      "category": "reasoning",
      "size_bytes": 5815,
      "size_kb": 5.7,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningSummaryDoneEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.0
    },
    "reasoning/response_reasoning_summary_part_added_event.py": {
      "file_path": "reasoning/response_reasoning_summary_part_added_event.py",
      "category": "reasoning",
      "size_bytes": 6762,
      "size_kb": 6.6,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "Part",
        "ResponseReasoningSummaryPartAddedEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.0
    },
    "reasoning/response_reasoning_summary_part_done_event.py": {
      "file_path": "reasoning/response_reasoning_summary_part_done_event.py",
      "category": "reasoning",
      "size_bytes": 7350,
      "size_kb": 7.2,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "Part",
        "ResponseReasoningSummaryPartDoneEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 19.0
    },
    "reasoning/response_reasoning_summary_text_delta_event.py": {
      "file_path": "reasoning/response_reasoning_summary_text_delta_event.py",
      "category": "reasoning",
      "size_bytes": 6048,
      "size_kb": 5.9,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningSummaryTextDeltaEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.0
    },
    "reasoning/response_reasoning_summary_text_done_event.py": {
      "file_path": "reasoning/response_reasoning_summary_text_done_event.py",
      "category": "reasoning",
      "size_bytes": 5912,
      "size_kb": 5.8,
      "lines": 1,
      "imports": [
        "typing_extensions.Literal",
        "core.models.BaseModel",
        "structlog"
      ],
      "classes": [
        "ResponseReasoningSummaryTextDoneEvent"
      ],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 17.0
    },
    "reasoning/symbolic_loop_harmonizer.py": {
      "file_path": "reasoning/symbolic_loop_harmonizer.py",
      "category": "reasoning",
      "size_bytes": 1540,
      "size_kb": 1.5,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "logging"
      ],
      "classes": [],
      "functions": [
        "harmonize_symbolic_loop",
        "adjust_dream_trajectory",
        "record_emotional_alignment_impact"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 13.0
    },
    "reasoning/systems/id_reasoning_engine.py": {
      "file_path": "reasoning/systems/id_reasoning_engine.py",
      "category": "reasoning",
      "size_bytes": 66423,
      "size_kb": 64.9,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "structlog",
        "asyncio",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "AccessTier",
        "ComplianceRegion",
        "EmotionalMemoryVector",
        "QuantumSignature",
        "AuditLogEntry",
        "TraumaLockedMemory",
        "ComplianceMonitor",
        "LukhasIdManager"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "lock_memory",
        "unlock_memory",
        "_generate_emotional_key",
        "_generate_standard_key",
        "_encrypt_data",
        "_decrypt_data",
        "_calculate_emotional_similarity"
      ],
      "async_functions": [
        "register_user",
        "authenticate_user",
        "_verify_tier_credentials",
        "_create_audit_log_entry",
        "get_user_permissions",
        "store_emotional_memory",
        "retrieve_emotional_memory",
        "demo_lukhas_id_manager_system"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 52.5
    },
    "reasoning/utils/agentic_trace.py": {
      "file_path": "reasoning/utils/agentic_trace.py",
      "category": "reasoning",
      "size_bytes": 2513,
      "size_kb": 2.5,
      "lines": 1,
      "imports": [
        "json",
        "logging"
      ],
      "classes": [
        "AgenticTrace"
      ],
      "functions": [
        "__init__",
        "log_action",
        "get_trace"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 18.0
    },
    "reasoning/\u039bBot_reasoning.py": {
      "file_path": "reasoning/\u039bBot_reasoning.py",
      "category": "reasoning",
      "size_bytes": 29650,
      "size_kb": 29.0,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "json",
        "logging",
        "asyncio",
        "time",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict"
      ],
      "classes": [
        "AdvancedReasoningRequest",
        "AdvancedReasoningResult",
        "\u039bBotAdvancedReasoningOrchestrator",
        "BioQuantumSymbolicReasoner",
        "AdvancedConfidenceCalibrator",
        "MultiBrainSymphonyOrchestrator"
      ],
      "functions": [
        "__init__",
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis"
      ],
      "async_functions": [
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis",
        "analyze_vulnerability_advanced",
        "analyze_workflow_failure_advanced",
        "reason_with_quantum_confidence",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "orchestrate_cross_brain_reasoning"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 41.5
    },
    "voice/adaptation_module.py": {
      "file_path": "voice/adaptation_module.py",
      "category": "voice",
      "size_bytes": 3535,
      "size_kb": 3.5,
      "lines": 1,
      "imports": [],
      "classes": [
        "VoiceAdaptationModule"
      ],
      "functions": [
        "__init__",
        "get_voice_settings",
        "record_feedback",
        "adapt_parameters",
        "log_awakening_event"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 15.0
    },
    "voice/audio_engine.py": {
      "file_path": "voice/audio_engine.py",
      "category": "voice",
      "size_bytes": 12538,
      "size_kb": 12.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "AudioEngine"
      ],
      "functions": [
        "create_audio_engine",
        "create_and_initialize_audio_engine",
        "__init__",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_audio_engine",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "voice/audio_processor.py": {
      "file_path": "voice/audio_processor.py",
      "category": "voice",
      "size_bytes": 7617,
      "size_kb": 7.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "AudioProcessor"
      ],
      "functions": [
        "create_audio_processor",
        "create_and_initialize_audio_processor",
        "__init__",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_audio_processor",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 28.0
    },
    "voice/bio_core/oscillator/bio_quantum_engine.py": {
      "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
      "category": "quantum",
      "size_bytes": 36757,
      "size_kb": 35.9,
      "lines": 1,
      "imports": [
        "asyncio",
        "numpy",
        "logging",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "BrainSymphonyConfig",
        "ReasoningPhase",
        "BrainSymphony",
        "BioQuantumSymbolicReasoner",
        "OscillationSynchronizer",
        "MockBrainCore",
        "MockQuantumBridge",
        "MockSynapticGate",
        "MockOscillator"
      ],
      "functions": [
        "__init__",
        "explore_possibility_space",
        "evaluate_solution_aesthetics",
        "find_structural_analogies",
        "synthesize_reasoning_path",
        "_apply_quantum_enhancement",
        "_apply_bio_oscillation",
        "_apply_holographic_enhancement",
        "_apply_meta_cognitive_enhancement",
        "calculate_cross_brain_coherence"
      ],
      "async_functions": [
        "explore_possibility_space",
        "evaluate_solution_aesthetics",
        "find_structural_analogies",
        "synthesize_reasoning_path",
        "_apply_quantum_enhancement",
        "_apply_bio_oscillation",
        "_apply_holographic_enhancement",
        "_apply_meta_cognitive_enhancement",
        "calculate_cross_brain_coherence",
        "abstract_reason",
        "_create_quantum_superposition_of_paths",
        "_achieve_cross_brain_coherence",
        "_apply_quantum_inspired_gates",
        "_symbolic_coherence_fallback",
        "_calculate_reasoning_confidence",
        "achieve_coherence",
        "_calculate_phase_relationships",
        "_apply_synchronization",
        "activate_brain",
        "shutdown_brain",
        "process",
        "process_independently",
        "process_quantum_signal",
        "process_signal"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 50.0
    },
    "voice/bio_core/oscillator/quantum_layer.py": {
      "file_path": "voice/bio_core/oscillator/quantum_layer.py",
      "category": "quantum",
      "size_bytes": 5602,
      "size_kb": 5.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass"
      ],
      "classes": [
        "QuantumConfig",
        "QuantumBioOscillator"
      ],
      "functions": [
        "__init__",
        "enter_superposition",
        "measure_state",
        "measure_coherence",
        "measure_entanglement",
        "oscillate",
        "activate",
        "deactivate"
      ],
      "async_functions": [
        "enter_superposition",
        "measure_state",
        "measure_coherence",
        "measure_entanglement",
        "oscillate"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.0
    },
    "voice/context_aware_voice_modular.py": {
      "file_path": "voice/context_aware_voice_modular.py",
      "category": "voice",
      "size_bytes": 27301,
      "size_kb": 26.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "datetime",
        "hashlib",
        "time",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.field"
      ],
      "classes": [
        "EmotionState",
        "UrgencyLevel",
        "ContextAnalysis",
        "VoiceParameters",
        "ContextAnalyzer",
        "VoiceModulator",
        "MemoryManager",
        "ContextAwareVoiceSystem"
      ],
      "functions": [
        "get_voice_system",
        "__init__",
        "analyze",
        "_analyze_text",
        "_analyze_time_context",
        "_analyze_device_context",
        "_analyze_memory",
        "_determine_urgency",
        "_determine_formality",
        "_calculate_confidence"
      ],
      "async_functions": [
        "analyze",
        "_analyze_text",
        "process_input",
        "_generate_response"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 40.5
    },
    "voice/dream_voice_pipeline.py": {
      "file_path": "voice/dream_voice_pipeline.py",
      "category": "voice",
      "size_bytes": 2864,
      "size_kb": 2.8,
      "lines": 2,
      "imports": [
        "logging",
        "core.interfaces.as_agent.sys.nias.narration_controller.fetch_narration_entries",
        "core.interfaces.as_agent.sys.nias.narration_controller.load_user_settings",
        "core.interfaces.as_agent.sys.nias.narration_controller.filter_narration_queue",
        "core.modules.nias.__init__.narrate_dreams",
        "pathlib.Path"
      ],
      "classes": [],
      "functions": [
        "run_dream_voice_pipeline"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 8.4
    },
    "voice/duet_conductor.py": {
      "file_path": "voice/duet_conductor.py",
      "category": "voice",
      "size_bytes": 2367,
      "size_kb": 2.3,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [
        "manage_voice_handoff"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 7.9
    },
    "voice/integrations/openai/dalle_client.py": {
      "file_path": "voice/integrations/openai/dalle_client.py",
      "category": "voice",
      "size_bytes": 8845,
      "size_kb": 8.6,
      "lines": 1,
      "imports": [
        "os",
        "core.config.settings",
        "logging",
        "aiohttp",
        "base64",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime"
      ],
      "classes": [
        "DALLEClient"
      ],
      "functions": [
        "__init__",
        "_ensure_session",
        "generate_image",
        "_save_images_from_urls",
        "edit_image",
        "close"
      ],
      "async_functions": [
        "_ensure_session",
        "generate_image",
        "_save_images_from_urls",
        "edit_image",
        "close"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 19.0
    },
    "voice/integrations/openai/whisper_client.py": {
      "file_path": "voice/integrations/openai/whisper_client.py",
      "category": "voice",
      "size_bytes": 6980,
      "size_kb": 6.8,
      "lines": 1,
      "imports": [
        "os",
        "core.config.settings",
        "logging",
        "aiohttp",
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union"
      ],
      "classes": [
        "WhisperClient"
      ],
      "functions": [
        "__init__",
        "_ensure_session",
        "transcribe_audio",
        "transcribe_from_file",
        "close"
      ],
      "async_functions": [
        "_ensure_session",
        "transcribe_audio",
        "transcribe_from_file",
        "close"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.5
    },
    "voice/integrator.py": {
      "file_path": "voice/integrator.py",
      "category": "voice",
      "size_bytes": 13695,
      "size_kb": 13.4,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Union",
        "logging",
        "asyncio",
        "time",
        "dataclasses.dataclass",
        "bio_core.oscillator.quantum_inspired_layer.QuantumBioOscillator"
      ],
      "classes": [
        "EnhancedVoiceConfig",
        "EnhancedVoiceIntegrator"
      ],
      "functions": [
        "__init__",
        "process_voice",
        "generate_speech",
        "_basic_voice_processing",
        "_enhance_emotion",
        "_basic_speech_synthesis",
        "_enhance_synthesis",
        "_get_voice_profile",
        "_adapt_cultural_context",
        "_record_session_usage"
      ],
      "async_functions": [
        "process_voice",
        "generate_speech",
        "_basic_voice_processing",
        "_enhance_emotion",
        "_basic_speech_synthesis",
        "_enhance_synthesis"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 23.0
    },
    "voice/interfaces/eleven_tts.py": {
      "file_path": "voice/interfaces/eleven_tts.py",
      "category": "voice",
      "size_bytes": 4050,
      "size_kb": 4.0,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "argparse",
        "logging",
        "asyncio",
        "pathlib.Path",
        "integrations.elevenlabs.elevenlabs_client.ElevenLabsClient",
        "shutil"
      ],
      "classes": [],
      "functions": [
        "generate_speech",
        "main"
      ],
      "async_functions": [
        "generate_speech"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 15.1
    },
    "voice/interfaces/input/stream_handler.py": {
      "file_path": "voice/interfaces/input/stream_handler.py",
      "category": "voice",
      "size_bytes": 2688,
      "size_kb": 2.6,
      "lines": 1,
      "imports": [
        "logging",
        "queue",
        "threading",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "dataclasses.dataclass",
        "datetime.datetime"
      ],
      "classes": [
        "SymbolicPattern",
        "SymbolicStreamHandler"
      ],
      "functions": [
        "__init__",
        "start_stream",
        "stop_stream",
        "_process_stream",
        "get_next_pattern"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.2
    },
    "voice/lukhas_voice_narrator.py": {
      "error": "File not found",
      "file_path": "voice/lukhas_voice_narrator.py"
    },
    "voice/memory_helix.py": {
      "file_path": "voice/memory_helix.py",
      "category": "voice",
      "size_bytes": 19252,
      "size_kb": 18.8,
      "lines": 1,
      "imports": [],
      "classes": [],
      "functions": [],
      "async_functions": [],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 14.0
    },
    "voice/modularity_system.py": {
      "file_path": "voice/modularity_system.py",
      "category": "voice",
      "size_bytes": 4157,
      "size_kb": 4.1,
      "lines": 1,
      "imports": [
        "logging",
        "datetime",
        "typing.Dict",
        "typing.Any",
        "orchestration_src.brain.context_analyzer.ContextAnalyzer",
        "modulator.VoiceModulator",
        "orchestration_src.brain.memory.memory_manager.MemoryManager",
        "orchestration_src.brain.subsystems.compliance_engine.ComplianceEngine",
        "safety.voice_safety_guard.SafetyGuard"
      ],
      "classes": [
        "LucasVoiceSystem"
      ],
      "functions": [
        "__init__",
        "process_input"
      ],
      "async_functions": [
        "process_input"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 16.2
    },
    "voice/personality.py": {
      "file_path": "voice/personality.py",
      "category": "voice",
      "size_bytes": 7119,
      "size_kb": 7.0,
      "lines": 1,
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Union",
        "logging",
        "datetime.datetime",
        "voice_profiling.VoiceProfileManager",
        "voice_profiling.VoiceProfile"
      ],
      "classes": [
        "VoicePersonalityIntegrator"
      ],
      "functions": [
        "__init__",
        "adapt_to_emotion",
        "enhance_text_expression",
        "_update_emotional_state",
        "_get_emotional_profile"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 16.5
    },
    "voice/recognition.py": {
      "file_path": "voice/recognition.py",
      "category": "voice",
      "size_bytes": 12006,
      "size_kb": 11.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "VoiceRecognition"
      ],
      "functions": [
        "create_voice_recognition",
        "create_and_initialize_voice_recognition",
        "__init__",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_voice_recognition",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 31.0
    },
    "voice/speech_engine.py": {
      "file_path": "voice/speech_engine.py",
      "category": "voice",
      "size_bytes": 11289,
      "size_kb": 11.0,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "asyncio"
      ],
      "classes": [
        "SpeechEngine"
      ],
      "functions": [
        "create_speech_engine",
        "create_and_initialize_speech_engine",
        "__init__",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice"
      ],
      "async_functions": [
        "create_and_initialize_speech_engine",
        "initialize",
        "_setup_voice_system",
        "process",
        "_core_voice_processing",
        "_process_consciousness",
        "_process_governance",
        "_process_voice",
        "_process_identity",
        "_process_quantum",
        "_process_generic",
        "validate",
        "_perform_validation",
        "shutdown",
        "main"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 31.0
    },
    "voice/speech_framework.py": {
      "file_path": "voice/speech_framework.py",
      "category": "voice",
      "size_bytes": 648,
      "size_kb": 0.6,
      "lines": 1,
      "imports": [],
      "classes": [
        "SpeechFramework"
      ],
      "functions": [
        "__init__",
        "initialize_recognition_engine",
        "start_recognition",
        "stop_recognition",
        "process_transcription",
        "handle_error"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 12.6
    },
    "voice/swarm_voice_generator.py": {
      "file_path": "voice/swarm_voice_generator.py",
      "category": "voice",
      "size_bytes": 2212,
      "size_kb": 2.2,
      "lines": 1,
      "imports": [
        "asyncio",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "core.swarm.SwarmAgent",
        "core.swarm.AgentColony",
        "voice.synthesis.VoiceSynthesis"
      ],
      "classes": [
        "VoiceSwarmAgent",
        "SwarmVoiceGenerator"
      ],
      "functions": [
        "__init__",
        "generate_phoneme",
        "__init__",
        "_create_voice_swarm",
        "_segment_text",
        "generate_speech"
      ],
      "async_functions": [
        "generate_phoneme",
        "generate_speech"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 18.2
    },
    "voice/symbolic_voice_core.py": {
      "file_path": "voice/symbolic_voice_core.py",
      "category": "voice",
      "size_bytes": 5471,
      "size_kb": 5.3,
      "lines": 2,
      "imports": [
        "requests",
        "os",
        "sys",
        "uuid",
        "json",
        "subprocess",
        "logging"
      ],
      "classes": [],
      "functions": [
        "speak"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 10.5
    },
    "voice/voice_cultural_integrator.py": {
      "file_path": "voice/voice_cultural_integrator.py",
      "category": "voice",
      "size_bytes": 9926,
      "size_kb": 9.7,
      "lines": 5,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "spine.accent_adapter.AccentAdapter",
        "spine.emotion_mapper_alt.LUKHAS",
        "re"
      ],
      "classes": [
        "VoiceCulturalIntegrator",
        "EmotionMapperWrapper"
      ],
      "functions": [
        "__init__",
        "_get_emotion_mapper",
        "_get_memory_helix",
        "process_cultural_context",
        "_extract_location",
        "_get_user_history",
        "generate_cultural_response",
        "emotions",
        "baby_modes"
      ],
      "async_functions": [
        "process_cultural_context",
        "_extract_location",
        "_get_user_history",
        "generate_cultural_response"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 22.5
    },
    "voice/voice_replay.py": {
      "file_path": "voice/voice_replay.py",
      "category": "voice",
      "size_bytes": 1212,
      "size_kb": 1.2,
      "lines": 1,
      "imports": [
        "pyttsx3"
      ],
      "classes": [],
      "functions": [
        "narrate_dream_log"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 6.7
    }
  },
  "category_summary": {
    "identity": {
      "files": [
        "api/glyph_exchange.py",
        "core/identity/engine.py",
        "core/identity/id_manager.py",
        "core/identity/manager.py",
        "core/identity/mapper.py",
        "core/identity/persona_engine.py",
        "core/identity/processor.py",
        "identity/api/api.py",
        "identity/api/auth/flows.py",
        "identity/api/auth/onboarding.py",
        "identity/api/onboarding_api.py",
        "identity/auth/cognitive_sync_adapter.py",
        "identity/auth/qrg_generators.py",
        "identity/auth_backend/authentication_server.py",
        "identity/auth_backend/cross_device_handshake.py",
        "identity/auth_backend/entropy_health_api.py",
        "identity/auth_backend/multi_user_sync.py",
        "identity/auth_backend/qr_entropy_generator.py",
        "identity/auth_backend/webrtc_peer_sync.py",
        "identity/auth_utils/attention_monitor.py",
        "identity/auth_utils/cognitive_load_estimator.py",
        "identity/auth_utils/cultural_safety_checker.py",
        "identity/auth_utils/grid_size_calculator.py",
        "identity/auth_utils/replay_protection.py",
        "identity/backend/app/admin_tools.py",
        "identity/backend/app/analytics_engine.py",
        "identity/backend/app/auth.py",
        "identity/backend/app/badge_manager.py",
        "identity/backend/app/cloud_bridge_manager.py",
        "identity/backend/app/cloud_storage_policy.py",
        "identity/backend/app/context_manager.py",
        "identity/backend/app/device_registry.py",
        "identity/backend/app/encryption_core.py",
        "identity/backend/app/external_authenticator.py",
        "identity/backend/app/game_state_bridge.py",
        "identity/backend/app/incident_reporter.py",
        "identity/backend/app/journey_log_manager.py",
        "identity/backend/app/logs.py",
        "identity/backend/app/qrglyph_generator.py",
        "identity/backend/app/replay_manager.py",
        "identity/backend/app/session_manager.py",
        "identity/backend/app/tests.py",
        "identity/backend/app/users.py",
        "identity/backend/app/vault.py",
        "identity/backend/app/vault_downloads.py",
        "identity/backend/dao/dao_core.py",
        "identity/backend/dao/log_viewer.py",
        "identity/backend/database/crud.py",
        "identity/backend/database/trust_sharing_manager.py",
        "identity/backend/dream_engine/assistant.py",
        "identity/backend/dream_engine/dream_injector.py",
        "identity/backend/dream_engine/dream_log_viewer.py",
        "identity/backend/dream_engine/dream_narrator_queue.py",
        "identity/backend/dream_engine/dream_replay.py",
        "identity/backend/dream_engine/dream_seed_vote.py",
        "identity/backend/dream_engine/dream_summary_generator.py",
        "identity/backend/dream_engine/html_social_generator.py",
        "identity/backend/dream_engine/narration_controller.py",
        "identity/backend/qrglyphs/qrglymph_public.py",
        "identity/backend/seedra/ethics/seedra_ethics_engine.py",
        "identity/backend/seedra/vault/seedra_registry.py",
        "identity/backend/seedra/vault/seedra_vault_manager.py",
        "identity/backend/verifold/ai/gpt_symbolic_narrator.py",
        "identity/backend/verifold/ai/narrative_alignment_checker.py",
        "identity/backend/verifold/compliance/symbolic_audit_mode.py",
        "identity/backend/verifold/cryptography/crypto_router.py",
        "identity/backend/verifold/cryptography/forward_secure_pibe.py",
        "identity/backend/verifold/cryptography/zk_narrative_proof_adapter.py",
        "identity/backend/verifold/entropy_fusion.py",
        "identity/backend/verifold/hardware_entropy_seed.py",
        "identity/backend/verifold/journal_mode.py",
        "identity/backend/verifold/ledger_auditor.py",
        "identity/backend/verifold/narrative_utils.py",
        "identity/backend/verifold/qr_decoder.py",
        "identity/backend/verifold/qr_encoder.py",
        "identity/backend/verifold/scanner_pwa/scanner_api.py",
        "identity/backend/verifold/security/consent_fuzz_tester.py",
        "identity/backend/verifold/security/glyph_mutation_simulator.py",
        "identity/backend/verifold/security/symbolic_adversary_agent.py",
        "identity/backend/verifold/storage/filecoin_uploader.py",
        "identity/backend/verifold/visual/glyph_stego_encoder.py",
        "identity/backend/verifold/visual/qr_tier_scanner.py",
        "identity/backend/verifold/web3/emotion_nft_standard.py",
        "identity/backend/verifold/yubi_seeder.py",
        "identity/connector.py",
        "identity/core/brain_identity_connector.py",
        "identity/core/qrs/qrg_generator.py",
        "identity/core/qrs/session_replay.py",
        "identity/core/sing/cross_device_manager.py",
        "identity/core/sing/sso_engine.py",
        "identity/core/trace/pattern_analyzer.py",
        "identity/diagnostics.py",
        "identity/diagnostics/insight_cli.py",
        "identity/enterprise/auth.py",
        "identity/governance/policy_board.py",
        "identity/lukhas_identity/security/awareness_protocol.py",
        "identity/lukhas_identity/security/kyi_check.py",
        "identity/mobile/websocket_client.py",
        "identity/public/lambda_id_previewer.py",
        "identity/qrg_100_percent_coverage.py",
        "identity/qrg_showcase.py",
        "identity/router.py",
        "identity/security/symbolic_vault.py",
        "identity/tests/claude_sync_relay.py",
        "identity/tools/onboarding_cli.py",
        "identity/trace.py",
        "identity/wearables_integration/entropy_beacon.py"
      ],
      "total_files": 107,
      "total_size": 808950,
      "avg_priority": 16.8,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub",
        "Uses API modules - register endpoints with main router",
        "Configuration handler - integrate with config management",
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "priority": "medium"
    },
    "api_services": {
      "files": [
        "api/memory_endpoints.py",
        "features/api/dream_api.py",
        "interfaces/api/lambda_bot_api_integration.py",
        "interfaces/api/v1/grpc/client.py",
        "interfaces/api/v1/grpc/pb2.py",
        "interfaces/api/v1/grpc/pb2_grpc.py",
        "interfaces/api/v1/grpc/server.py",
        "interfaces/api/v1/rest/middleware.py"
      ],
      "total_files": 8,
      "total_size": 63255,
      "avg_priority": 23.7,
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Async operations - integrate with event loop management",
        "Uses events/messages - connect to message bus",
        "Contains service classes - integrate with service registry"
      ],
      "priority": "medium"
    },
    "bio_systems": {
      "files": [
        "bio/bio_affect_model.py",
        "bio/colony_self_repair.py",
        "bio/endocrine_daily_operations.py",
        "bio/protein_synthesizer.py",
        "bio/recovery_protocol.py",
        "bio/symbolic_entropy_observer.py",
        "features/docututor/memory_evolution/bio_oscillator.py"
      ],
      "total_files": 7,
      "total_size": 32742,
      "avg_priority": 14.7,
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "priority": "medium"
    },
    "quantum": {
      "files": [
        "bio/quantum_layer.py",
        "core/neural_architectures/abas/abas_quantum_specialist.py",
        "quantum/abas_quantum_specialist.py",
        "quantum/api_manager.py",
        "quantum/bio_components.py",
        "quantum/bio_crista_optimizer_adapter.py",
        "quantum/bio_optimization_adapter.py",
        "quantum/bio_system.py",
        "quantum/certificate_manager.py",
        "quantum/consensus_system.py",
        "quantum/creative_engine.py",
        "quantum/creative_integration.py",
        "quantum/dream_adapter.py",
        "quantum/entanglement.py",
        "quantum/ethics_engine.py",
        "quantum/healix_mapper.py",
        "quantum/layer.py",
        "quantum/metadata.py",
        "quantum/neural_symbolic_engine.py",
        "quantum/neural_symbolic_processor.py",
        "quantum/neuro_symbolic_engine.py",
        "quantum/phase_quantum_integration.py",
        "quantum/post_quantum_crypto_enhanced.py",
        "quantum/privacy/zero_knowledge_system.py",
        "quantum/quantum_bio_bulletproof_system.py",
        "quantum/quantum_consensus_system_enhanced.py",
        "quantum/quantum_oscillator.py",
        "quantum/safe_blockchain.py",
        "quantum/systems/bio_integration/bulletproof_system.py",
        "quantum/systems/bio_integration/connectivity_consolidator.py",
        "quantum/systems/bio_integration/optimization_adapter.py",
        "quantum/systems/quantum_entanglement.py",
        "quantum/systems/quantum_processor.py",
        "quantum/systems/quantum_states.py",
        "quantum/vault_manager.py",
        "quantum/voice_enhancer.py",
        "quantum/\u039bBot_quantum_security.py",
        "voice/bio_core/oscillator/bio_quantum_engine.py",
        "voice/bio_core/oscillator/quantum_layer.py"
      ],
      "total_files": 39,
      "total_size": 884535,
      "avg_priority": 31.9,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management",
        "Configuration handler - integrate with config management"
      ],
      "priority": "medium"
    },
    "reasoning": {
      "files": [
        "bio/symbolic/bio_systems_inspiration.py",
        "bio/symbolic/quantum_coherence_enhancer.py",
        "core/interfaces/logic/agent_core.py",
        "core/interfaces/logic/agent_logic_architecture.py",
        "core/interfaces/logic/agent_self.py",
        "core/interfaces/logic/consent_manager.py",
        "core/interfaces/logic/delegate_logic.py",
        "core/interfaces/logic/memory_handler.py",
        "core/interfaces/logic/safety_filter.py",
        "core/interfaces/logic/voice_narration_player.py",
        "symbolic/bio/bio_symbolic_architectures.py",
        "symbolic/bio/bio_systems_inspiration.py",
        "symbolic/bio/crista_optimizer.py",
        "symbolic/bio/glyph_id_hash.py",
        "symbolic/bio/mito_ethics_sync.py",
        "symbolic/bio/mito_quantum_attention.py",
        "symbolic/bio/stress_gate.py",
        "symbolic/colony_tag_propagation.py",
        "symbolic/drift/symbolic_drift_tracker_trace.py",
        "symbolic/neural/neural_symbolic_bridge.py",
        "symbolic/neural/neuro_symbolic_fusion_layer.py",
        "creativity/dream/symbolic/vocabulary.py",
        "features/symbolic/collapse/bridge.py",
        "features/symbolic/collapse/buffer.py",
        "features/symbolic/collapse/engine.py",
        "features/symbolic/collapse/entropy_tracker.py",
        "features/symbolic/collapse/reasoner.py",
        "features/symbolic/collapse/trace.py",
        "features/symbolic/drift/score.py",
        "features/symbolic/memoria/recall_hooks.py",
        "features/symbolic/memoria/symbolic_trace_map.py",
        "features/symbolic/trace_verifier.py",
        "features/symbolic/tracer.py",
        "reasoning/LBot_reasoning_processed.py",
        "reasoning/chat_completion_reasoning_effort.py",
        "reasoning/conflict_resolver.py",
        "reasoning/diagnostics/trace_mapper.py",
        "reasoning/ethical_reasoning_system.py",
        "reasoning/goals/goal_manager.py",
        "reasoning/id_reasoning_engine.py",
        "reasoning/intent/intent_detector.py",
        "reasoning/intent/intent_processor.py",
        "reasoning/master_loop.py",
        "reasoning/reasoning_colony.py",
        "reasoning/reasoning_diagnostics.py",
        "reasoning/reporting/reasoning_report_generator.py",
        "reasoning/response_reasoning_delta_event.py",
        "reasoning/response_reasoning_done_event.py",
        "reasoning/response_reasoning_item.py",
        "reasoning/response_reasoning_item_param.py",
        "reasoning/response_reasoning_summary_delta_event.py",
        "reasoning/response_reasoning_summary_done_event.py",
        "reasoning/response_reasoning_summary_part_added_event.py",
        "reasoning/response_reasoning_summary_part_done_event.py",
        "reasoning/response_reasoning_summary_text_delta_event.py",
        "reasoning/response_reasoning_summary_text_done_event.py",
        "reasoning/symbolic_loop_harmonizer.py",
        "reasoning/systems/id_reasoning_engine.py",
        "reasoning/utils/agentic_trace.py",
        "reasoning/\u039bBot_reasoning.py"
      ],
      "total_files": 60,
      "total_size": 749832,
      "avg_priority": 24.7,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management",
        "Uses events/messages - connect to message bus",
        "Configuration handler - integrate with config management"
      ],
      "priority": "high"
    },
    "consciousness": {
      "files": [
        "consciousness/awareness/awareness_protocol.py",
        "consciousness/cognitive/adapter.py",
        "consciousness/cognitive/adapter_complete.py",
        "consciousness/dream_bridge.py",
        "consciousness/openai_consciousness_adapter.py",
        "consciousness/systems/awareness_processor.py",
        "consciousness/systems/awareness_tracker.py",
        "consciousness/systems/cognitive_systems/voice_personality.py",
        "consciousness/systems/engine_alt.py",
        "consciousness/systems/engine_codex.py",
        "consciousness/systems/engine_complete.py",
        "consciousness/systems/engine_poetic.py",
        "consciousness/systems/mapper.py",
        "consciousness/systems/quantum_consciousness_integration.py",
        "consciousness/systems/quantum_consciousness_visualizer.py",
        "consciousness/systems/quantum_creative_consciousness.py",
        "consciousness/systems/reflection/reflection.py",
        "consciousness/systems/self_reflection_engine.py",
        "consciousness/systems/\u039bBot_consciousness_monitor.py",
        "quantum/systems/bio_integration/awareness/quantum_bio.py",
        "features/integration/meta_cognitive/meta_cognitive.py"
      ],
      "total_files": 21,
      "total_size": 449578,
      "avg_priority": 34.7,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management",
        "Configuration handler - integrate with config management"
      ],
      "priority": "high"
    },
    "core_systems": {
      "files": [
        "core/actor_model.py",
        "core/actor_supervision_integration.py",
        "core/ai/integration_manager.py",
        "core/ai_interface.py",
        "core/api_diff_analyzer.py",
        "core/apply_api_fixes.py",
        "core/benchmark_swarm.py",
        "core/circuit_breaker.py",
        "core/collaboration.py",
        "core/consistency_manager.py",
        "core/core_system.py",
        "core/direct_ai_router.py",
        "core/ethics/dream_ethics_injector.py",
        "core/event_replay_snapshot.py",
        "core/governance/governance_colony.py",
        "core/infrastructure/base_node.py",
        "core/infrastructure/node_collection.py",
        "core/infrastructure/node_manager.py",
        "core/integrator.py",
        "core/integrity_probe.py",
        "core/interfaces/cli.py",
        "core/interfaces/common_interfaces.py",
        "core/interfaces/custom_llm.py",
        "core/interfaces/dashboad.py",
        "core/interfaces/launcher.py",
        "core/interfaces/socket.py",
        "core/interfaces/tools/cli/command_registry.py",
        "core/interfaces/tools/cli/dream_cli.py",
        "core/interfaces/tools/cli/speak.py",
        "core/interfaces/tools/dao/dao_propose.py",
        "core/interfaces/tools/dao/dao_vote.py",
        "core/interfaces/tools/security/session_logger.py",
        "core/interfaces/ui/components/audio_exporter.py",
        "core/interfaces/ui/components/replay_graphs.py",
        "core/interfaces/ui/components/tier_visualizer.py",
        "core/memoria.py",
        "core/net/client_event.py",
        "core/notion_sync.py",
        "core/observability/collector.py",
        "core/output/message_hub.py",
        "core/p2p_fabric.py",
        "core/personality/creative_personality.py",
        "core/personality/creative_personality_clean.py",
        "core/personality/personality.py",
        "core/quantized_cycle_manager.py",
        "core/quorum_override.py",
        "core/rem/sleep_cycle.py",
        "core/rem/visualizer.py",
        "core/resource_efficiency.py",
        "core/resource_efficiency_analyzer.py",
        "core/router/llm_multiverse_router.py",
        "core/services/location/tracker.py",
        "core/services/personality/empathy.py",
        "core/services/personality/personas.py",
        "core/specialized_colonies.py",
        "core/spine/emotion_mapper_alt.py",
        "core/state_management.py",
        "core/swarm_visualizer.py",
        "core/symbolic_arbitration.py",
        "core/symbolic_contract.py",
        "core/targeted_api_fixes.py",
        "core/utils/dream_utils.py",
        "core/validation.py",
        "core/validation_script_fixes.py"
      ],
      "total_files": 64,
      "total_size": 481693,
      "avg_priority": 23.0,
      "integration_opportunities": [
        "Async operations - integrate with event loop management",
        "Uses events/messages - connect to message bus",
        "Configuration handler - integrate with config management"
      ],
      "priority": "high"
    },
    "uncategorized": {
      "files": [
        "core/api_controllers.py",
        "core/interfaces/lukhas_as_agent/agent_logic/agent_self.py",
        "core/interfaces/lukhas_as_agent/agent_logic/memory_handler.py",
        "core/interfaces/lukhas_as_agent/agent_logic/safety_filter.py",
        "core/interfaces/lukhas_as_agent/agent_logic/voice_narration_player.py",
        "core/interfaces/lukhas_as_agent/auth/registry.py",
        "core/interfaces/lukhas_as_agent/auth/vendor_hospitality_sync.py",
        "core/interfaces/lukhas_as_agent/core/affiliate_log.py",
        "core/interfaces/lukhas_as_agent/core/agent_handoff.py",
        "core/interfaces/lukhas_as_agent/core/checkout_handler.py",
        "core/interfaces/lukhas_as_agent/core/duet_conductor.py",
        "core/interfaces/lukhas_as_agent/core/emotion_log.py",
        "core/interfaces/lukhas_as_agent/core/filter_gpt.py",
        "core/interfaces/lukhas_as_agent/core/lukhas_nias_filter.py",
        "core/interfaces/lukhas_as_agent/core/nias_filter.py",
        "core/interfaces/lukhas_as_agent/core/overview_log.py",
        "core/interfaces/lukhas_as_agent/core/render_ai.py",
        "core/interfaces/lukhas_as_agent/core/reward_reputation.py",
        "core/interfaces/lukhas_as_agent/core/scheduler.py",
        "core/interfaces/lukhas_as_agent/core/vendor_sync.py",
        "core/interfaces/lukhas_as_agent/core/vision_prompts.py",
        "core/interfaces/lukhas_as_agent/core/voice_duet.py",
        "core/interfaces/lukhas_as_agent/core/wallet.py",
        "core/interfaces/lukhas_as_agent/news_and_social/affiliate_log.py",
        "core/interfaces/lukhas_as_agent/news_and_social/s_dispatcher.py",
        "core/interfaces/lukhas_as_agent/sample_payloads/trace_log_viewer.py",
        "core/interfaces/lukhas_as_agent/sys/dast/aggregator.py",
        "core/interfaces/lukhas_as_agent/sys/dast/dast_logger.py",
        "core/interfaces/lukhas_as_agent/sys/dast/launcher.py",
        "core/interfaces/lukhas_as_agent/sys/dast/partner_sdk.py",
        "core/interfaces/lukhas_as_agent/sys/dast/schedule_manager.py",
        "core/interfaces/lukhas_as_agent/sys/dast/store.py",
        "core/interfaces/lukhas_as_agent/sys/nias/05_25_dream_clustering_engine.py",
        "core/interfaces/lukhas_as_agent/sys/nias/delivery_loop.py",
        "core/interfaces/lukhas_as_agent/sys/nias/dream_log_viewer.py",
        "core/interfaces/lukhas_as_agent/sys/nias/dream_narrator_queue.py",
        "core/interfaces/lukhas_as_agent/sys/nias/dream_recorder.py",
        "core/interfaces/lukhas_as_agent/sys/nias/feedback_insight_cli.py",
        "core/interfaces/lukhas_as_agent/sys/nias/feedback_log_viewer.py",
        "core/interfaces/lukhas_as_agent/sys/nias/feedback_loop.py",
        "core/interfaces/lukhas_as_agent/sys/nias/inject_message_simulator.py",
        "core/interfaces/lukhas_as_agent/sys/nias/main_loop.py",
        "core/interfaces/lukhas_as_agent/sys/nias/replay_heatmap.py",
        "core/interfaces/lukhas_as_agent/sys/nias/replay_queue.py",
        "core/interfaces/lukhas_as_agent/sys/nias/replay_visualizer.py",
        "core/interfaces/lukhas_as_agent/sys/nias/symbolic_reply_generator.py",
        "core/interfaces/lukhas_as_agent/sys/nias/validate_payload.py",
        "core/interfaces/lukhas_as_agent/sys/nias/voice_narrator.py",
        "core/interfaces/lukhas_as_agent/utils/symbolic_github_export.py",
        "core/interfaces/lukhas_as_agent/widgets/delivery_tracker_widget.py",
        "core/interfaces/lukhas_as_agent/widgets/live_renderer_widget.py",
        "core/interfaces/lukhas_as_agent/widgets/terminal_widget.py",
        "core/interfaces/lukhas_as_agent/widgets/travel_widget.py",
        "core/interfaces/lukhas_as_agent/widgets/widget_engine.py",
        "core/unified_bot.py",
        "core/working_bot.py",
        "identity/lukhus_deployment_package.py",
        "memory/systems/lukhas_memory_encryptor.py",
        "memory/systems/lukhas_memory_recall.py",
        "voice/lukhas_voice_narrator.py"
      ],
      "total_files": 60,
      "total_size": 0,
      "avg_priority": 0.0,
      "integration_opportunities": [],
      "priority": "low"
    },
    "voice": {
      "files": [
        "core/interfaces/voice/listen.py",
        "core/interfaces/voice/voice_agent.py",
        "voice/adaptation_module.py",
        "voice/audio_engine.py",
        "voice/audio_processor.py",
        "voice/context_aware_voice_modular.py",
        "voice/dream_voice_pipeline.py",
        "voice/duet_conductor.py",
        "voice/integrations/openai/dalle_client.py",
        "voice/integrations/openai/whisper_client.py",
        "voice/integrator.py",
        "voice/interfaces/eleven_tts.py",
        "voice/interfaces/input/stream_handler.py",
        "voice/memory_helix.py",
        "voice/modularity_system.py",
        "voice/personality.py",
        "voice/recognition.py",
        "voice/speech_engine.py",
        "voice/speech_framework.py",
        "voice/swarm_voice_generator.py",
        "voice/symbolic_voice_core.py",
        "voice/voice_cultural_integrator.py",
        "voice/voice_replay.py"
      ],
      "total_files": 23,
      "total_size": 170645,
      "avg_priority": 18.1,
      "integration_opportunities": [
        "Async operations - integrate with event loop management",
        "Uses events/messages - connect to message bus"
      ],
      "priority": "medium"
    },
    "learning": {
      "files": [
        "core/meta_learning/enhancement_system.py",
        "core/meta_learning/remediator_agent.py",
        "learning/_dict_learning.py",
        "learning/adaptive_agi/Meta_Learning/symbolic_feedback.py",
        "learning/aid/dream_engine/assistant.py",
        "learning/aid/dream_engine/dream_injector.py",
        "learning/aid/dream_engine/dream_summary_generator.py",
        "learning/aid/dream_engine/narration_controller.py",
        "learning/doc_generator_learning_engine.py",
        "learning/edu_module.py",
        "learning/embodied_thought/generative_reflex.py",
        "learning/exponential_learning.py",
        "learning/federated_colony_learning.py",
        "learning/federated_learning.py",
        "learning/federated_learning_system.py",
        "learning/federated_meta_learning.py",
        "learning/meta_adaptive/adaptive_interface_generator.py",
        "learning/meta_adaptive/adaptive_ux_core.py",
        "learning/meta_adaptive/meta_learning.py",
        "learning/meta_adaptive/system.py",
        "learning/meta_learning/federated_integration.py",
        "learning/meta_learning/meta_core.py",
        "learning/meta_learning/symbolic_feedback.py",
        "learning/meta_learning_adapter.py",
        "learning/meta_learning_recovery.py",
        "learning/metalearningenhancementsystem.py",
        "learning/neural_integrator.py",
        "learning/plugin_learning_engine.py",
        "learning/results/trace_reader.py",
        "learning/systems/core_system.py",
        "learning/systems/duet_conductor.py",
        "learning/systems/intent_language.py",
        "learning/systems/symbolic_voice_loop.py",
        "learning/tutor_learning_engine.py",
        "learning/usage_learning.py"
      ],
      "total_files": 35,
      "total_size": 729679,
      "avg_priority": 26.7,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Plugin/extension - register with plugin system",
        "Configuration handler - integrate with config management",
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "priority": "high"
    },
    "bridge_integration": {
      "files": [
        "core/symbolic_bridge/integrator.py",
        "core/symbolic_bridge/token_map.py",
        "bridge/colony_bridge.py",
        "bridge/connectors/blockchain_bridge.py",
        "bridge/explainability_interface_layer.py",
        "bridge/integration_bridge.py",
        "bridge/model_communication_engine.py",
        "bridge/personality_communication_engine.py",
        "bridge/symbolic_memory_mapper.py",
        "bridge/symbolic_reasoning_adapter.py",
        "bridge/trace_logger.py",
        "features/integration/executive_decision_integrator.py",
        "features/integration/layer.py",
        "features/integration/neural_symbolic_bridge.py",
        "features/integration/neuro_symbolic_fusion_layer.py",
        "features/integration/safety/coordinator.py",
        "features/integration/safety/emergency_override.py",
        "features/integration/system_bridge.py"
      ],
      "total_files": 18,
      "total_size": 254702,
      "avg_priority": 31.1,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Plugin/extension - register with plugin system",
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management",
        "Uses events/messages - connect to message bus",
        "Async operations - integrate with event loop management"
      ],
      "priority": "high"
    },
    "memory_systems": {
      "files": [
        "memory/colonies/episodic_memory_colony.py",
        "memory/convergence/memory_trace_harmonizer.py",
        "memory/emotional_memory_manager_unified.py",
        "memory/episodic/drift_tracker.py",
        "memory/episodic/recaller.py",
        "memory/evolution.py",
        "memory/memory_systems/memoria-checkpoint.py",
        "memory/neocortical/concept_hierarchy.py",
        "memory/neocortical/semantic_extractor.py",
        "memory/node.py",
        "memory/openai_memory_adapter.py",
        "memory/repair/advanced_trauma_repair.py",
        "memory/resonance/resonant_memory_access.py",
        "memory/service.py",
        "memory/symbolic_integration.py",
        "memory/systems/adaptive_memory_engine.py",
        "memory/systems/agent_memory_trace_animator.py",
        "memory/systems/bio_symbolic_memory.py",
        "memory/systems/causal_memory_chains.py",
        "memory/systems/chatgpt_memory_integrator.py",
        "memory/systems/collapse_buffer.py",
        "memory/systems/collapse_trace.py",
        "memory/systems/dream_integrator.py",
        "memory/systems/dream_memory_export.py",
        "memory/systems/dream_memory_manager.py",
        "memory/systems/dream_trace_linker.py",
        "memory/systems/engine.py",
        "memory/systems/episodic_replay_buffer.py",
        "memory/systems/exponential_learning.py",
        "memory/systems/glyph_memory_bridge.py",
        "memory/systems/identity_lineage_bridge.py",
        "memory/systems/in_memory_cache_storage_wrapper.py",
        "memory/systems/in_memory_log_exporter.py",
        "memory/systems/in_memory_span_exporter.py",
        "memory/systems/integration_bridge.py",
        "memory/systems/integrity_collapser.py",
        "memory/systems/learn_to_learn.py",
        "memory/systems/memoria/dream_cron.py",
        "memory/systems/memoria/dreams.py",
        "memory/systems/memoria/dreams_alt.py",
        "memory/systems/memoria/reflector.py",
        "memory/systems/memoria/replayer.py",
        "memory/systems/memoria_codex.py",
        "memory/systems/memoria_system.py",
        "memory/systems/memory_advanced_manager.py",
        "memory/systems/memory_bases.py",
        "memory/systems/memory_checkpoint.py",
        "memory/systems/memory_comprehensive.py",
        "memory/systems/memory_consolidation.py",
        "memory/systems/memory_consolidator.py",
        "memory/systems/memory_drift_mirror.py",
        "memory/systems/memory_encryptor.py",
        "memory/systems/memory_evolution.py",
        "memory/systems/memory_format.py",
        "memory/systems/memory_handler.py",
        "memory/systems/memory_helix.py",
        "memory/systems/memory_helix_golden.py",
        "memory/systems/memory_helix_visualizer.py",
        "memory/systems/memory_introspection_engine.py",
        "memory/systems/memory_learning/memory_manager.py",
        "memory/systems/memory_lock.py",
        "memory/systems/memory_media_file_storage.py",
        "memory/systems/memory_node.py",
        "memory/systems/memory_planning.py",
        "memory/systems/memory_processing.py",
        "memory/systems/memory_profiler.py",
        "memory/systems/memory_recall.py",
        "memory/systems/memory_reflector.py",
        "memory/systems/memory_research.py",
        "memory/systems/memory_resonance_analyzer.py",
        "memory/systems/memory_seeder.py",
        "memory/systems/memory_session_storage.py",
        "memory/systems/memory_trace.py",
        "memory/systems/memory_trace_logger.py",
        "memory/systems/memory_tracker.py",
        "memory/systems/memory_utils.py",
        "memory/systems/memory_viz.py",
        "memory/systems/memory_voice_helix.py",
        "memory/systems/meta_learning_patterns.py",
        "memory/systems/multimodal_memory_support.py",
        "memory/systems/neurosymbolic_integration.py",
        "memory/systems/pin_memory.py",
        "memory/systems/pin_memory_cache.py",
        "memory/systems/processor.py",
        "memory/systems/quantum_memory_architecture.py",
        "memory/systems/recall_handler.py",
        "memory/systems/reflection_engine.py",
        "memory/systems/replay_system.py",
        "memory/systems/resonance_memory_retrieval.py",
        "memory/systems/simple_memory.py",
        "memory/systems/symbolic_delta_compression.py",
        "memory/systems/symbolic_replay_engine.py",
        "memory/systems/symbolic_snapshot.py",
        "memory/systems/trace_injector.py",
        "memory/systems/trauma_lock.py",
        "memory/systems/voice_memory_bridge.py",
        "memory/tools/lambda_vault_scan.py",
        "memory/tools/memory_drift_auditor.py",
        "memory/visualizer.py",
        "memory/voice_memory_manager.py",
        "features/memory/connection_visualizer.py"
      ],
      "total_files": 101,
      "total_size": 1704035,
      "avg_priority": 27.9,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Identity/auth component - connect to identity hub",
        "Contains service classes - integrate with service registry",
        "Uses API modules - register endpoints with main router",
        "Memory operations - integrate with memory persistence layer",
        "Configuration handler - integrate with config management",
        "Uses events/messages - connect to message bus",
        "Memory manager - connect to unified memory orchestrator",
        "Async operations - integrate with event loop management"
      ],
      "priority": "high"
    },
    "creativity": {
      "files": [
        "creativity/affect_stagnation_detector.py",
        "creativity/creative_core.py",
        "creativity/creative_expression_core.py",
        "creativity/creative_expression_processor.py",
        "creativity/creative_expressions_engine.py",
        "creativity/dream/base/dream_loop/dream_loop.py",
        "creativity/dream/base/dream_refold/dream_refold.py",
        "creativity/dream/cli/dream_cli.py",
        "creativity/dream/cli/dream_processor.py",
        "creativity/dream/cli/dream_replay_cli.py",
        "creativity/dream/dream_engine/oracle_dream.py",
        "creativity/dream/dream_injector.py",
        "creativity/dream/dream_log.py",
        "creativity/dream/dream_mutator.py",
        "creativity/dream/dream_narrator_queue.py",
        "creativity/dream/dream_replay.py",
        "creativity/dream/dream_stats.py",
        "creativity/dream/dream_summary_generator.py",
        "creativity/dream/engine/dream_engine_merged.py",
        "creativity/dream/feedback_propagator.py",
        "creativity/dream/modifiers/quantum_state_modifier.py",
        "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
        "creativity/dream/oneiric_engine/oneiric_core/migrations/env.py",
        "creativity/dream/oracle_dream.py",
        "creativity/dream/processors/dream_processor.py",
        "creativity/dream/processors/dream_processor_integrator.py",
        "creativity/dream/redirect_trace_replayer.py",
        "creativity/dream/tools/run_dream_analysis.py",
        "creativity/dream/tools/symbolic_theme_clusterer.py",
        "creativity/dream/visualization/dream_log_viewer.py",
        "creativity/dream/visualization/dream_timeline_visualizer.py",
        "creativity/dream/visualization/dream_viewer.py",
        "creativity/dream/visualization/visualizer_core.py",
        "creativity/dream_systems/dream_convergence_tester.py",
        "creativity/dream_systems/dream_emotion_bridge.py",
        "creativity/dream_systems/dream_glyph_bridge.py",
        "creativity/dream_systems/dream_log_viewer.py",
        "creativity/dream_systems/dream_loop_generator.py",
        "creativity/dream_systems/dream_replay.py",
        "creativity/dream_systems/dream_stats.py",
        "creativity/dream_systems/dream_utils.py",
        "creativity/dream_systems/dream_viewer.py",
        "creativity/dream_timeline_visualizer.py",
        "creativity/emotion/voice_profiling_emotion_engine.py",
        "creativity/personality_engine.py",
        "creativity/personality_refiner.py",
        "creativity/quantum_creative_integration.py",
        "creativity/service.py",
        "creativity/systems/creative_expressions_creativity_engine.py",
        "creativity/systems/vocabulary_creativity_engine.py",
        "creativity/systems/voice_personality_creativity_engine.py",
        "creativity/voice_integrator.py"
      ],
      "total_files": 52,
      "total_size": 410898,
      "avg_priority": 20.7,
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Uses API modules - register endpoints with main router",
        "Contains service classes - integrate with service registry",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "priority": "high"
    },
    "emotion": {
      "files": [
        "emotion/affect_detection/recurring_emotion_tracker.py",
        "emotion/colony_emotions.py",
        "emotion/cycler.py",
        "emotion/dreamseed_unified.py",
        "emotion/multimodal_sentiment.py"
      ],
      "total_files": 5,
      "total_size": 42984,
      "avg_priority": 18.6,
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "priority": "medium"
    }
  },
  "priority_files": [
    {
      "file_path": "reasoning/LBot_reasoning_processed.py",
      "category": "reasoning",
      "size_bytes": 44311,
      "size_kb": 43.3,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "json",
        "asyncio",
        "time",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict"
      ],
      "classes": [
        "AdvancedReasoningRequest",
        "AdvancedReasoningResult",
        "\u039bBotAdvancedReasoningOrchestrator",
        "ScientificTheoryFormer",
        "EthicalReasoner",
        "MathematicalReasoner",
        "MultiScaleReasoning",
        "CrossBrainReasoningOrchestrator",
        "QuantumBioSymbolicConfidenceIntegrator",
        "BioQuantumSymbolicReasoner",
        "AdvancedConfidenceCalibrator",
        "MultiBrainSymphonyOrchestrator",
        "ScientificTheoryFormer",
        "EthicalReasoner",
        "MathematicalReasoner",
        "MultiScaleReasoning",
        "CrossBrainReasoningOrchestrator",
        "QuantumBioSymbolicConfidenceIntegrator",
        "\u039bBotTask",
        "SecurityIssue",
        "PRAnalysisResult",
        "\u039bBotAuditor"
      ],
      "functions": [
        "__init__",
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis"
      ],
      "async_functions": [
        "analyze_pull_request_advanced",
        "_perform_quantum_reasoning_analysis",
        "_perform_fallback_analysis",
        "_extract_dreams_insights",
        "_extract_emotional_insights",
        "_extract_memory_insights",
        "_extract_learning_insights",
        "_generate_recommendations",
        "_perform_meta_analysis",
        "analyze_vulnerability_advanced",
        "analyze_workflow_failure_advanced",
        "reason_with_quantum_confidence",
        "_measure_neural_coherence",
        "_measure_cross_frequency_coupling",
        "_measure_brain_synchronization",
        "_generate_quantum_recommendations",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "orchestrate_cross_brain_reasoning",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "reason_across_scales",
        "initialize_brain_oscillations",
        "orchestrate_reasoning_process",
        "integrate_confidence_signals",
        "abstract_reasoning_cycle",
        "_measure_quantum_coherence",
        "calibrate_confidence",
        "meta_cognitive_reflection",
        "form_scientific_theory",
        "analyze_ethical_dilemma",
        "solve_mathematical_problem",
        "reason_across_scales",
        "initialize_brain_oscillations",
        "orchestrate_reasoning_process",
        "integrate_confidence_signals"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 91.0
    },
    {
      "file_path": "memory/systems/memory_planning.py",
      "category": "memory_systems",
      "size_bytes": 25081,
      "size_kb": 24.5,
      "lines": 1,
      "imports": [
        "__future__.annotations",
        "collections",
        "dataclasses",
        "itertools",
        "pprint",
        "typing.Any",
        "typing.Optional",
        "typing.Protocol",
        "typing.TYPE_CHECKING",
        "sympy"
      ],
      "classes": [
        "LiveRange",
        "LiveRanges",
        "AllocationTreeNode",
        "Allocation",
        "Empty",
        "MemorySplitProtocol",
        "ClearCacheOnAllocateMixin",
        "TemporalSplit",
        "SpatialSplit",
        "AllocationPool",
        "AllocationPools",
        "BufferGroup",
        "PoolMemoryPlanningLine",
        "AllocFromPoolLine",
        "DeallocFromPoolLine",
        "MemoryPlanner"
      ],
      "functions": [
        "contains",
        "join",
        "__len__",
        "__init__",
        "overlaps",
        "begin",
        "end",
        "__repr__",
        "allocate",
        "get_live_ranges"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 83.0
    },
    {
      "file_path": "memory/systems/memory_profiler.py",
      "category": "memory_systems",
      "size_bytes": 50328,
      "size_kb": 49.1,
      "lines": 4,
      "imports": [
        "collections",
        "dataclasses",
        "enum",
        "itertools",
        "logging",
        "collections.abc.Iterator",
        "typing.Any",
        "typing.cast",
        "typing.Optional",
        "typing.Union"
      ],
      "classes": [
        "Category",
        "Action",
        "Key",
        "_Storage",
        "TensorKey",
        "SchemaMatcher",
        "OpTree",
        "SizeMap",
        "DataFlowEdge",
        "DataFlowNode",
        "DataFlowGraph",
        "CategoryElement",
        "CategoryDict",
        "MemoryProfile",
        "MemoryProfileTimeline"
      ],
      "functions": [
        "_extract_parameters_and_gradients",
        "extract_parameters",
        "extract_gradients",
        "get_scopes",
        "__repr__",
        "__eq__",
        "__hash__",
        "__repr__",
        "__lt__",
        "_make"
      ],
      "async_functions": [],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 80.5
    },
    {
      "file_path": "reasoning/ethical_reasoning_system.py",
      "category": "reasoning",
      "size_bytes": 110125,
      "size_kb": 107.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "json",
        "time",
        "abc.ABC",
        "abc.abstractmethod",
        "collections.defaultdict",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime"
      ],
      "classes": [
        "EthicalFramework",
        "MoralPrinciple",
        "StakeholderType",
        "EthicalDilemmaType",
        "MoralJudgment",
        "ValueAlignmentAssessment",
        "EthicalConstraint",
        "DeontologicalReasoner",
        "ConsequentialistReasoner",
        "ValueAlignmentSystem",
        "EthicalReasoningSystem"
      ],
      "functions": [
        "main_ethics_test",
        "__init__",
        "evaluate_action",
        "_universal_law_test",
        "_check_logical_contradiction",
        "_check_practical_contradiction",
        "_generate_universalization_reasoning",
        "_humanity_formula_test",
        "_check_treats_as_means_only",
        "_check_respects_autonomy"
      ],
      "async_functions": [
        "main_ethics_test",
        "evaluate_action",
        "_universal_law_test",
        "_check_logical_contradiction",
        "_check_practical_contradiction",
        "_humanity_formula_test",
        "_check_treats_as_means_only",
        "_check_respects_autonomy",
        "_kingdom_of_ends_test",
        "_check_rational_legislation",
        "_check_promotes_dignity",
        "_analyze_duty_conflicts",
        "evaluate_action",
        "_calculate_action_utility",
        "_predict_consequences",
        "_classical_utility",
        "_preference_utility",
        "_wellbeing_utility",
        "_capability_utility",
        "_determine_optimal_action",
        "learn_from_feedback",
        "_learn_from_rating_feedback",
        "_learn_from_preference_feedback",
        "_learn_from_correction_feedback",
        "_apply_value_updates",
        "_detect_value_drift",
        "_update_alignment_metrics",
        "assess_alignment",
        "make_ethical_judgment",
        "_check_ethical_constraints",
        "_evaluate_constraint_violation",
        "_analyze_stakeholder_impacts",
        "_assess_cultural_sensitivity",
        "_synthesize_moral_judgment",
        "_determine_recommended_action",
        "_generate_moral_justification",
        "_monitor_ethical_drift",
        "get_ethical_system_report",
        "update_ethical_constraints"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 80.5
    },
    {
      "file_path": "core/circuit_breaker.py",
      "category": "core_systems",
      "size_bytes": 37543,
      "size_kb": 36.7,
      "lines": 1,
      "imports": [
        "asyncio",
        "time",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Any",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "CircuitState",
        "FailureType",
        "FailureRecord",
        "HealthCheck",
        "AdvancedCircuitBreaker",
        "CircuitBreakerOpen",
        "AnomalyDetector",
        "ErrorPropagationTracker",
        "ConsensusValidator",
        "CascadePreventionSystem",
        "ActorQuarantined",
        "AnomalyDetected",
        "TestActor"
      ],
      "functions": [
        "demo_cascade_prevention",
        "__init__",
        "call",
        "async_call",
        "_allow_request",
        "_on_success",
        "_on_failure",
        "_should_open",
        "_transition_to",
        "force_open"
      ],
      "async_functions": [
        "demo_cascade_prevention",
        "async_call",
        "run_health_checks",
        "validate_consensus",
        "_query_actor_with_timeout",
        "start",
        "stop",
        "protected_call",
        "validate_with_consensus",
        "_monitoring_loop",
        "_collect_system_metrics",
        "_get_actor_snapshot",
        "_run_health_checks",
        "make_call",
        "_handle_process"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 69.5
    },
    {
      "file_path": "consciousness/cognitive/adapter_complete.py",
      "category": "consciousness",
      "size_bytes": 42089,
      "size_kb": 41.1,
      "lines": 9,
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set"
      ],
      "classes": [
        "CognitiveAdapterConfig",
        "CoreComponent",
        "SecurityContext",
        "MemoryType",
        "MetaLearningSystem",
        "HelixMapper",
        "CognitiveState",
        "EmotionalModulation",
        "CognitiveAdapter"
      ],
      "functions": [
        "lukhas_tier_required",
        "test_cognitive_adapter",
        "__init__",
        "_load_config",
        "_save_config",
        "get",
        "decorator",
        "__init__",
        "__init__",
        "has_permission"
      ],
      "async_functions": [
        "test_cognitive_adapter",
        "process",
        "search_memories",
        "map_memory",
        "process",
        "_integrate_memory",
        "adapt_parameters",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 60.5
    },
    {
      "file_path": "identity/api/api.py",
      "category": "identity",
      "size_bytes": 34856,
      "size_kb": 34.0,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "datetime.datetime",
        "time",
        "os",
        "enum.Enum"
      ],
      "classes": [
        "UserProfileRequest",
        "SymbolicAuthRequest",
        "QRGGenerationRequest",
        "QRGValidationRequest",
        "VaultUpdateRequest",
        "BiometricEnrollRequest",
        "BiometricVerifyRequest",
        "LukhasUnifiedAPI",
        "BaseModel",
        "QRSManager",
        "LambdaTierManager",
        "BiometricIntegrationManager",
        "QRGType"
      ],
      "functions": [
        "get_lukhas_unified_api_app",
        "__init__",
        "_setup_fastapi_middleware",
        "_setup_fastapi_routes",
        "_create_lambda_id_endpoint_impl",
        "_authenticate_symbolic_endpoint_impl",
        "_get_profile_endpoint_impl",
        "_update_vault_endpoint_impl",
        "_generate_qrg_endpoint_impl",
        "_validate_qrg_endpoint_impl"
      ],
      "async_functions": [
        "_create_lambda_id_endpoint_impl",
        "_authenticate_symbolic_endpoint_impl",
        "_get_profile_endpoint_impl",
        "_update_vault_endpoint_impl",
        "_generate_qrg_endpoint_impl",
        "_validate_qrg_endpoint_impl",
        "_get_tier_info_endpoint_impl",
        "_upgrade_tier_endpoint_impl",
        "_enroll_biometric_endpoint_impl",
        "_verify_biometric_endpoint_impl",
        "_get_enrolled_biometrics_endpoint_impl",
        "_get_analytics_endpoint_impl",
        "_get_system_stats_endpoint_impl",
        "create_lambda_id_route",
        "authenticate_symbolic_route",
        "get_lambda_id_profile_route",
        "health_check_route"
      ],
      "integration_opportunities": [
        "Uses API modules - register endpoints with main router",
        "Identity/auth component - connect to identity hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 60.5
    },
    {
      "file_path": "reasoning/reasoning_colony.py",
      "category": "reasoning",
      "size_bytes": 41493,
      "size_kb": 40.5,
      "lines": 7,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "enum.Enum",
        "typing.Any",
        "typing.Dict"
      ],
      "classes": [
        "ReasonerType",
        "ReasoningQuery",
        "ReasoningInsight",
        "ReasoningAgent",
        "LogicalReasoningAgent",
        "CausalReasoningAgent",
        "CreativeReasoningAgent",
        "ReasoningColony",
        "MemoryManager",
        "SymbolicEngine"
      ],
      "functions": [
        "add_conclusion",
        "get_consensus_score",
        "__init__",
        "_initialize_specialization",
        "process_query",
        "_retrieve_relevant_memories",
        "_get_memory_emotion",
        "_apply_reasoning",
        "_store_insight",
        "_apply_reasoning"
      ],
      "async_functions": [
        "process_query",
        "_retrieve_relevant_memories",
        "_apply_reasoning",
        "_store_insight",
        "_apply_reasoning",
        "_apply_reasoning",
        "_apply_reasoning",
        "submit_query",
        "_process_query",
        "_build_consensus",
        "_store_consensus",
        "demo_reasoning_colony"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 60.0
    },
    {
      "file_path": "consciousness/systems/engine_poetic.py",
      "category": "consciousness",
      "size_bytes": 73134,
      "size_kb": 71.4,
      "lines": 11,
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "dataclasses.dataclass",
        "enum.Enum"
      ],
      "classes": [
        "ConsciousnessState",
        "AwarenessFrame",
        "ConsciousnessEngine"
      ],
      "functions": [
        "create_consciousness",
        "calculate_consciousness_metrics",
        "demonstrate_consciousness",
        "main",
        "__init__",
        "_default_consciousness_config",
        "awaken",
        "_activate_neural_substrates",
        "_establish_sensory_integration",
        "_consolidate_memories"
      ],
      "async_functions": [
        "create_consciousness",
        "demonstrate_consciousness",
        "main",
        "awaken",
        "_activate_neural_substrates",
        "_establish_sensory_integration",
        "_consolidate_memories",
        "_calibrate_emotional_baseline",
        "_focus_attention_resources",
        "_activate_self_model",
        "_initialize_metacognition",
        "_achieve_full_consciousness",
        "experience",
        "_integrate_sensory_streams",
        "_apply_emotional_coloring",
        "_contextualize_with_memory",
        "_focus_attention",
        "_identify_salience",
        "_cognitive_processing",
        "_metacognitive_reflection",
        "_calculate_phi",
        "_generate_qualia",
        "_extract_insights",
        "_get_active_memories",
        "_assess_cognitive_load",
        "_update_consciousness_state",
        "think",
        "_process_thought",
        "contemplate",
        "_contemplate_logically",
        "_contemplate_emotionally",
        "_contemplate_temporally",
        "_contemplate_relationally",
        "_identify_assumptions",
        "_discover_paradoxes",
        "_synthesize_contemplation",
        "dream",
        "_generate_dream_narrative",
        "_extract_creative_solutions",
        "meditate",
        "reflect_on_experience",
        "_extract_wisdom_from_experience",
        "_assess_consciousness_health",
        "enter_flow_state",
        "shutdown"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller",
        "Has main() - create startup integration script"
      ],
      "priority_score": 58.5
    },
    {
      "file_path": "memory/systems/meta_learning_patterns.py",
      "category": "memory_systems",
      "size_bytes": 77237,
      "size_kb": 75.4,
      "lines": 5,
      "imports": [
        "asyncio",
        "numpy",
        "json",
        "hashlib",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "PatternType",
        "LearningPhase",
        "LearningEvent",
        "MetaLearningPattern",
        "LearningTrajectoryAnalyzer",
        "PatternExtractor",
        "MetaLearningPatternSystem"
      ],
      "functions": [
        "create_meta_learning_system",
        "example_meta_learning_usage",
        "to_feature_vector",
        "to_dict",
        "from_dict",
        "__init__",
        "analyze_trajectory",
        "_smooth_series",
        "_identify_learning_phases",
        "_classify_trajectory_type"
      ],
      "async_functions": [
        "create_meta_learning_system",
        "example_meta_learning_usage",
        "extract_patterns",
        "_cluster_trajectories",
        "_extract_cluster_patterns",
        "_extract_sequence_pattern",
        "_extract_strategy_pattern",
        "_extract_attention_pattern",
        "_extract_meta_patterns",
        "_analyze_pattern_combinations",
        "_analyze_pattern_evolution",
        "_load_patterns",
        "_save_patterns",
        "extract_patterns_from_episodes",
        "_convert_to_learning_events",
        "_memory_to_learning_event",
        "_generate_pattern_embedding",
        "find_similar_patterns",
        "recommend_patterns_for_task"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 58.5
    },
    {
      "file_path": "quantum/bio_optimization_adapter.py",
      "category": "quantum",
      "size_bytes": 33165,
      "size_kb": 32.4,
      "lines": 1,
      "imports": [
        "asyncio",
        "structlog",
        "numpy",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "QuantumBioOptimizationConfig",
        "QuantumBioMetrics",
        "QuantumBioOptimizationAdapter",
        "MockBioOrchestrator",
        "MockQuantumBioOscillator",
        "QuantumLikeState",
        "QuantumConfig",
        "MockQuantumAwarenessSystem",
        "MockQuantumDreamAdapter",
        "MockQuantumBioCoordinator"
      ],
      "functions": [
        "lukhas_tier_required",
        "__validate_module__",
        "decorator",
        "__init__",
        "_initialize_quantum_bio_systems",
        "optimize_quantum_bio_system",
        "_prepare_quantum_like_state",
        "_data_to_quantum_vector",
        "_extract_quantum_features",
        "_optimize_biological_systems"
      ],
      "async_functions": [
        "optimize_quantum_bio_system",
        "_prepare_quantum_like_state",
        "_optimize_biological_systems",
        "_integrate_quantum_bio",
        "_enhance_consciousness",
        "_process_dream_consolidation",
        "_validate_optimization",
        "_apply_corrective_actions",
        "_queue_optimization_request_handler",
        "shutdown",
        "enhance_coherence",
        "strengthen_entanglement",
        "entangle_states",
        "process_quantum_awareness",
        "start_dream_cycle",
        "stop_dream_cycle",
        "get_quantum_like_state",
        "process_bio_quantum"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 58.0
    },
    {
      "file_path": "memory/systems/neurosymbolic_integration.py",
      "category": "memory_systems",
      "size_bytes": 68999,
      "size_kb": 67.4,
      "lines": 8,
      "imports": [
        "asyncio",
        "numpy",
        "json",
        "hashlib",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple"
      ],
      "classes": [
        "SymbolicRelationType",
        "LogicalOperator",
        "SymbolicEntity",
        "SymbolicRelation",
        "LogicalRule",
        "NeuralSymbolicExtractor",
        "SymbolicReasoner",
        "NeurosymbolicIntegrationLayer"
      ],
      "functions": [
        "create_neurosymbolic_layer",
        "example_neurosymbolic_usage",
        "to_dict",
        "from_dict",
        "to_triple",
        "to_dict",
        "from_dict",
        "applies_to",
        "_evaluate_conditions",
        "to_dict"
      ],
      "async_functions": [
        "create_neurosymbolic_layer",
        "example_neurosymbolic_usage",
        "extract_entities_from_memory",
        "_extract_entity_candidates",
        "extract_relations_from_memories",
        "_extract_relations_from_content",
        "_consolidate_relations",
        "_merge_relations",
        "perform_inference",
        "_apply_rule",
        "_find_variable_bindings",
        "_find_bindings_for_condition",
        "_binding_satisfies_condition",
        "_apply_bindings_to_consequent",
        "_remove_duplicate_inferences",
        "answer_query",
        "_answer_relation_query",
        "_answer_path_query",
        "_answer_classification_query",
        "_load_knowledge",
        "_save_knowledge",
        "process_memory_batch",
        "query_knowledge",
        "explain_inference",
        "integrate_with_memory_system",
        "neurosymbolic_query_handler"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 57.0
    },
    {
      "file_path": "consciousness/cognitive/adapter.py",
      "category": "consciousness",
      "size_bytes": 44772,
      "size_kb": 43.7,
      "lines": 1,
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "numpy"
      ],
      "classes": [
        "CognitiveState",
        "EmotionalModulation",
        "CognitiveAdapter",
        "CognitiveAdapter",
        "CognitiveAdapter",
        "CoreComponent",
        "SecurityContext",
        "MetaLearningSystem",
        "HelixMapper"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__post_init__",
        "__post_init__",
        "__init__",
        "initialize",
        "process",
        "shutdown",
        "_init_cognitive_state",
        "_update_cognitive_state"
      ],
      "async_functions": [
        "initialize",
        "process",
        "shutdown",
        "_init_cognitive_state",
        "_integrate_with_memory",
        "_save_state",
        "wrapper_async",
        "process",
        "search_memories",
        "map_memory"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 56.0
    },
    {
      "file_path": "core/meta_learning/remediator_agent.py",
      "category": "learning",
      "size_bytes": 50276,
      "size_kb": 49.1,
      "lines": 6,
      "imports": [
        "json",
        "time",
        "structlog",
        "numpy",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Optional"
      ],
      "classes": [
        "RemediationLevel",
        "RemediationType",
        "RemediationEvent",
        "RemediatorAgent",
        "QuantumMemoryManager",
        "AdvancedMemoryManager",
        "LucasReplayer",
        "GlyphIDHasher",
        "MetaLearningMonitorDashboard",
        "DynamicLearningRateModulator"
      ],
      "functions": [
        "create_remediator_agent",
        "__init__",
        "_generate_agent_id",
        "_load_config",
        "_load_manifest",
        "_initialize_thresholds",
        "_setup_logging_structlog",
        "_log_agent_startup",
        "_generate_quantum_signature",
        "calculate_drift_score"
      ],
      "async_functions": [
        "start_autonomous_monitoring",
        "generate_test_metrics_async",
        "demo_remediator_agent_async"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 56.0
    },
    {
      "file_path": "memory/systems/causal_memory_chains.py",
      "category": "memory_systems",
      "size_bytes": 43527,
      "size_kb": 42.5,
      "lines": 1,
      "imports": [
        "asyncio",
        "numpy",
        "hashlib",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "CausalRelationType",
        "CausalStrength",
        "CausalEvidence",
        "CausalRelation",
        "CausalChain",
        "TemporalCausalAnalyzer",
        "CausalGraphBuilder",
        "CausalReasoningEngine",
        "CausalMemoryWrapper"
      ],
      "functions": [
        "create_causal_memory_system",
        "example_causal_reasoning",
        "to_dict",
        "add_evidence",
        "_update_strength",
        "to_dict",
        "get_chain_length",
        "get_total_delay",
        "to_dict",
        "__init__"
      ],
      "async_functions": [
        "create_causal_memory_system",
        "example_causal_reasoning",
        "analyze_temporal_sequence",
        "_analyze_memory_pair",
        "_calculate_content_similarity",
        "_calculate_semantic_connection",
        "add_memory_for_causal_analysis",
        "analyze_causal_relationships",
        "find_causal_explanation",
        "predict_causal_outcomes",
        "identify_significant_causal_chains",
        "fold_in_with_causal_analysis",
        "fold_out_with_causal_context"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 55.0
    },
    {
      "file_path": "core/event_replay_snapshot.py",
      "category": "core_systems",
      "size_bytes": 31192,
      "size_kb": 30.5,
      "lines": 4,
      "imports": [
        "asyncio",
        "json",
        "pickle",
        "time",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable"
      ],
      "classes": [
        "EventType",
        "Event",
        "ActorStateSnapshot",
        "EventStore",
        "SnapshotStore",
        "EventSourcedActor",
        "ReplayController",
        "DemoActor"
      ],
      "functions": [
        "demo_event_replay",
        "to_json",
        "from_json",
        "create_from_actor",
        "restore_to_actor",
        "__init__",
        "start",
        "stop",
        "append_event",
        "get_events_for_actor"
      ],
      "async_functions": [
        "demo_event_replay",
        "start",
        "stop",
        "append_event",
        "get_events_for_actor",
        "get_events_by_correlation",
        "replay_events",
        "_persistence_loop",
        "_flush_to_disk",
        "_write_segment",
        "_load_recent_events",
        "_read_segment",
        "_load_events_from_disk",
        "_load_correlation_events_from_disk",
        "save_snapshot",
        "load_snapshot",
        "delete_old_snapshots",
        "send_message",
        "_process_message",
        "record_state_change",
        "take_snapshot",
        "restore_from_snapshot",
        "replay_history",
        "replay_scenario",
        "_replay_event_callback",
        "create_debugging_checkpoint",
        "_handle_increment",
        "_handle_store_data",
        "replay_callback"
      ],
      "integration_opportunities": [
        "Uses events/messages - connect to message bus",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 54.5
    },
    {
      "file_path": "memory/repair/advanced_trauma_repair.py",
      "category": "memory_systems",
      "size_bytes": 39992,
      "size_kb": 39.1,
      "lines": 7,
      "imports": [
        "asyncio",
        "math",
        "random",
        "time",
        "collections.deque",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "enum.Enum"
      ],
      "classes": [
        "TraumaType",
        "RepairStrategy",
        "HealingPhase",
        "TraumaSignature",
        "RepairScaffold",
        "ImmuneResponse",
        "HelicalRepairMechanism",
        "TraumaRepairSystem",
        "IntegrityStatus",
        "TagScope"
      ],
      "functions": [
        "demonstrate_trauma_repair",
        "calculate_priority",
        "add_checkpoint",
        "matches_threat",
        "__init__",
        "repair_double_strand_break",
        "_template_directed_repair",
        "_homologous_recombination",
        "_detect_corruption",
        "__init__"
      ],
      "async_functions": [
        "demonstrate_trauma_repair",
        "repair_double_strand_break",
        "_template_directed_repair",
        "_homologous_recombination",
        "start",
        "stop",
        "detect_trauma",
        "initiate_repair",
        "apply_emdr_processing",
        "build_scar_tissue",
        "_execute_repair_strategy",
        "_reconstruct_memory",
        "_quarantine_infection",
        "_integrate_fragments",
        "_regenerate_memory",
        "_stabilize_memory",
        "_transform_trauma",
        "_create_immune_memory",
        "_detection_loop",
        "_repair_loop",
        "_immune_loop"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 54.0
    },
    {
      "file_path": "memory/systems/reflection_engine.py",
      "category": "memory_systems",
      "size_bytes": 36255,
      "size_kb": 35.4,
      "lines": 1,
      "imports": [
        "json",
        "logging",
        "asyncio",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "ReflectionType",
        "ReflectionDepth",
        "ReflectionInsight",
        "ReflectionSession",
        "PatternDetector",
        "MetaCognitiveAnalyzer",
        "MemoryReflector"
      ],
      "functions": [
        "get_memory_reflector",
        "initiate_reflection",
        "process_reflection",
        "get_self_assessment",
        "get_reflector_status",
        "__init__",
        "_initialize_pattern_templates",
        "detect_patterns",
        "_analyze_pattern_strength",
        "_has_temporal_clustering"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 53.0
    },
    {
      "file_path": "quantum/\u039bBot_quantum_security.py",
      "category": "quantum",
      "size_bytes": 22952,
      "size_kb": 22.4,
      "lines": 3,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "logging",
        "secrets",
        "time",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict"
      ],
      "classes": [
        "QuantumThreat",
        "SecurityAssessment",
        "PostQuantumCryptographyEngine",
        "BioSymbolicThreatDetector",
        "QuantumVulnerabilityAnalyzer",
        "AdaptiveSecurityOrchestrator",
        "\u039bBotQuantumSecurityOrchestrator",
        "LatticeBasedCrypto",
        "MultivariateCrypto",
        "HashBasedSignatures",
        "CodeBasedCrypto",
        "IsogenyCrypto"
      ],
      "functions": [
        "main",
        "__validate_module__",
        "__init__",
        "generate_quantum_resistant_keys",
        "quantum_encrypt",
        "quantum_decrypt",
        "__init__",
        "detect_bio_threats",
        "_brain_threat_analysis",
        "__init__"
      ],
      "async_functions": [
        "main",
        "generate_quantum_resistant_keys",
        "quantum_encrypt",
        "quantum_decrypt",
        "detect_bio_threats",
        "_brain_threat_analysis",
        "analyze_quantum_vulnerabilities",
        "_simulate_quantum_attacks",
        "orchestrate_adaptive_security",
        "perform_quantum_security_assessment",
        "orchestrate_security_response",
        "generate_post_quantum_keys",
        "get_security_metrics",
        "generate_keys",
        "generate_keys",
        "generate_keys",
        "generate_keys",
        "generate_keys"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Has main() - create startup integration script"
      ],
      "priority_score": 53.0
    },
    {
      "file_path": "symbolic/bio/mito_quantum_attention.py",
      "category": "reasoning",
      "size_bytes": 5310,
      "size_kb": 5.2,
      "lines": 1,
      "imports": [
        "torch",
        "torch.nn",
        "time",
        "random",
        "hashlib",
        "numpy"
      ],
      "classes": [
        "QuantumTunnelFilter",
        "CristaGate",
        "VivoxAttention",
        "OxintusReasoner",
        "MAELayer",
        "RespiModule",
        "ATPAllocator",
        "VivoxSection",
        "OxintusBrass",
        "MAEPercussion",
        "MitochondrialConductor",
        "CristaOptimizer"
      ],
      "functions": [
        "generate_cl_signature",
        "forward",
        "__init__",
        "forward",
        "forward",
        "forward",
        "forward",
        "__init__",
        "forward",
        "__init__"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 53.0
    },
    {
      "file_path": "bridge/explainability_interface_layer.py",
      "category": "bridge_integration",
      "size_bytes": 36068,
      "size_kb": 35.2,
      "lines": 11,
      "imports": [
        "asyncio",
        "json",
        "uuid",
        "abc.ABC",
        "abc.abstractmethod",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "datetime.timezone",
        "enum.Enum"
      ],
      "classes": [
        "ExplanationType",
        "ExplanationAudience",
        "ExplanationDepth",
        "ExplanationRequest",
        "ExplanationProof",
        "ExplanationOutput",
        "ExplanationGenerator",
        "NaturalLanguageGenerator",
        "FormalProofGenerator",
        "ExplainabilityInterfaceLayer"
      ],
      "functions": [
        "generate_explanation",
        "__init__",
        "_load_templates",
        "generate_explanation",
        "_get_audience_style",
        "_get_depth_content",
        "__init__",
        "generate_explanation",
        "_generate_formal_proof",
        "_format_proof"
      ],
      "async_functions": [
        "generate_explanation",
        "generate_explanation",
        "generate_explanation",
        "_generate_formal_proof",
        "explain_decision",
        "_enrich_context",
        "_get_ethical_analysis",
        "_get_reasoning_trace",
        "_extract_causal_chain",
        "_calculate_quality_metrics",
        "_sign_explanation",
        "interactive_explanation",
        "generate_audit_report"
      ],
      "integration_opportunities": [
        "Bridge/adapter - register with integration hub",
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Register with bridge/message_bus.py",
        "Connect to integration hub",
        "Add to bridge initialization sequence"
      ],
      "priority_score": 53.0
    },
    {
      "file_path": "core/integrator.py",
      "category": "core_systems",
      "size_bytes": 21237,
      "size_kb": 20.7,
      "lines": 1,
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "uuid",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple"
      ],
      "classes": [
        "EnhancedCoreConfig",
        "CoreMessageType",
        "EnhancedCoreIntegrator",
        "QuantumBioOscillator",
        "BioOrchestrator",
        "AccessTier",
        "AccessController",
        "QuantumAuthenticator",
        "ComplianceMonitor",
        "UnifiedIntegration"
      ],
      "functions": [
        "lukhas_tier_required",
        "decorator",
        "__init__",
        "register_component",
        "send_message_to_component",
        "get_system_status",
        "broadcast_event",
        "subscribe_to_event",
        "__init__",
        "verify_component_state"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [],
      "priority_score": 52.5
    },
    {
      "file_path": "memory/systems/memory_evolution.py",
      "category": "memory_systems",
      "size_bytes": 18697,
      "size_kb": 18.3,
      "lines": 1,
      "imports": [
        "asyncio",
        "logging",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "numpy",
        "core.docututor.memory_evolution.bio_oscillator.BioOscillatorAdapter",
        "core.docututor.memory_evolution.document_analyzer.DocumentStructureAnalyzer"
      ],
      "classes": [
        "MemoryEvolution",
        "DocumentVersionControl",
        "KnowledgeAdaptation",
        "UsageBasedLearning",
        "BioOscillatorAdapter",
        "DocumentStructureAnalyzer",
        "VoiceSynthesisAdapter"
      ],
      "functions": [
        "__init__",
        "create_document",
        "_update_semantic_relationships",
        "_find_semantic_relations",
        "_prune_semantic_cache",
        "update_document",
        "record_interaction",
        "get_document_history",
        "get_related_documents",
        "get_recommendations"
      ],
      "async_functions": [
        "synthesize_document",
        "adapt_voice_settings",
        "adapt_voice"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 52.5
    },
    {
      "file_path": "reasoning/id_reasoning_engine.py",
      "category": "reasoning",
      "size_bytes": 66423,
      "size_kb": 64.9,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "structlog",
        "asyncio",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "AccessTier",
        "ComplianceRegion",
        "EmotionalMemoryVector",
        "QuantumSignature",
        "AuditLogEntry",
        "TraumaLockedMemory",
        "ComplianceMonitor",
        "LukhasIdManager"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "lock_memory",
        "unlock_memory",
        "_generate_emotional_key",
        "_generate_standard_key",
        "_encrypt_data",
        "_decrypt_data",
        "_calculate_emotional_similarity"
      ],
      "async_functions": [
        "register_user",
        "authenticate_user",
        "_verify_tier_credentials",
        "_create_audit_log_entry",
        "get_user_permissions",
        "store_emotional_memory",
        "retrieve_emotional_memory",
        "demo_lukhas_id_manager_system"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 52.5
    },
    {
      "file_path": "reasoning/systems/id_reasoning_engine.py",
      "category": "reasoning",
      "size_bytes": 66423,
      "size_kb": 64.9,
      "lines": 1,
      "imports": [
        "hashlib",
        "json",
        "structlog",
        "asyncio",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.timezone",
        "typing.Dict",
        "typing.List"
      ],
      "classes": [
        "AccessTier",
        "ComplianceRegion",
        "EmotionalMemoryVector",
        "QuantumSignature",
        "AuditLogEntry",
        "TraumaLockedMemory",
        "ComplianceMonitor",
        "LukhasIdManager"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "__init__",
        "lock_memory",
        "unlock_memory",
        "_generate_emotional_key",
        "_generate_standard_key",
        "_encrypt_data",
        "_decrypt_data",
        "_calculate_emotional_similarity"
      ],
      "async_functions": [
        "register_user",
        "authenticate_user",
        "_verify_tier_credentials",
        "_create_audit_log_entry",
        "get_user_permissions",
        "store_emotional_memory",
        "retrieve_emotional_memory",
        "demo_lukhas_id_manager_system"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to reasoning/reasoning_engine.py",
        "Register with symbolic processing system",
        "Add to reasoning pipeline workflow"
      ],
      "priority_score": 52.5
    },
    {
      "file_path": "memory/systems/episodic_replay_buffer.py",
      "category": "memory_systems",
      "size_bytes": 49554,
      "size_kb": 48.4,
      "lines": 8,
      "imports": [
        "asyncio",
        "numpy",
        "random",
        "heapq",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "ReplayStrategy",
        "ConsolidationPhase",
        "EpisodicMemory",
        "PrioritizedReplayBuffer",
        "DreamStateReplay",
        "EpisodicReplayMemoryWrapper"
      ],
      "functions": [
        "create_episodic_replay_memory",
        "example_episodic_replay",
        "update_priority",
        "mark_replayed",
        "to_dict",
        "__init__",
        "add_experience",
        "sample_batch",
        "_sample_uniform_random",
        "_sample_priority_based"
      ],
      "async_functions": [
        "create_episodic_replay_memory",
        "example_episodic_replay",
        "enter_dream_state",
        "_perform_dream_cycle",
        "store_experience",
        "replay_and_learn",
        "enter_dream_state"
      ],
      "integration_opportunities": [
        "Memory operations - integrate with memory persistence layer",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 51.0
    },
    {
      "file_path": "consciousness/systems/engine_complete.py",
      "category": "consciousness",
      "size_bytes": 39444,
      "size_kb": 38.5,
      "lines": 6,
      "imports": [
        "numpy",
        "asyncio",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "dataclasses.dataclass"
      ],
      "classes": [
        "ConsciousnessEngineConfig",
        "ConsciousnessState",
        "ConsciousnessPattern",
        "AnthropicEthicsEngine",
        "DefaultEthicsEngine",
        "SelfAwareAdaptationModule",
        "AGIConsciousnessEngine"
      ],
      "functions": [
        "lukhas_tier_required",
        "test_consciousness_engine",
        "__init__",
        "_load_config",
        "_save_config",
        "_initialize_anthropic_client",
        "get",
        "decorator",
        "to_dict",
        "__post_init__"
      ],
      "async_functions": [
        "test_consciousness_engine",
        "analyze_interaction",
        "evaluate_action",
        "evaluate_action",
        "_evaluate_principle",
        "reflect_on_performance",
        "adapt_based_on_feedback",
        "authenticate_with_consciousness",
        "wrapper_async"
      ],
      "integration_opportunities": [
        "Configuration handler - integrate with config management",
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [
        "Connect to consciousness/consciousness_hub.py",
        "Register with awareness system",
        "Integrate with cognitive architecture controller"
      ],
      "priority_score": 50.5
    },
    {
      "file_path": "memory/systems/dream_trace_linker.py",
      "category": "memory_systems",
      "size_bytes": 53195,
      "size_kb": 51.9,
      "lines": 2,
      "imports": [
        "json",
        "hashlib",
        "os",
        "re",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple"
      ],
      "classes": [
        "GlyphResonanceLevel",
        "DreamTraceType",
        "GlyphSignature",
        "IdentitySignature",
        "EmotionalEcho",
        "DreamTraceLink",
        "DreamTraceLinker"
      ],
      "functions": [
        "create_dream_trace_linker",
        "__init__",
        "link_dream_to_memory",
        "_extract_glyph_signatures",
        "_correlate_identity_signatures",
        "_propagate_emotional_echoes",
        "_calculate_dream_drift_metrics",
        "_determine_tier_gate",
        "_calculate_entanglement_level",
        "_check_safeguards"
      ],
      "async_functions": [],
      "integration_opportunities": [],
      "connection_recommendations": [
        "Connect to memory/core/unified_memory_orchestrator.py",
        "Register with memory manager service registry",
        "Add to memory system initialization sequence"
      ],
      "priority_score": 50.5
    },
    {
      "file_path": "quantum/quantum_consensus_system_enhanced.py",
      "category": "quantum",
      "size_bytes": 30721,
      "size_kb": 30.0,
      "lines": 2,
      "imports": [
        "asyncio",
        "hashlib",
        "json",
        "logging",
        "time",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "classes": [
        "ConsensusAlgorithm",
        "QuantumLikeStateType",
        "ComponentState",
        "ConsensusPhase",
        "QuantumLikeState",
        "ConsensusProposal",
        "ComponentInfo",
        "QuantumConsensusSystem",
        "PartitionDetector",
        "ConsensusMetrics"
      ],
      "functions": [
        "demo_bio_quantum_consensus",
        "__validate_module__",
        "__post_init__",
        "to_dict",
        "from_dict",
        "calculate_hash",
        "calculate_distance",
        "add_signature",
        "add_vote",
        "__init__"
      ],
      "async_functions": [
        "demo_bio_quantum_consensus",
        "propose_state_update",
        "_initiate_raft_consensus",
        "_initiate_bio_quantum_consensus",
        "_request_brain_vote",
        "_request_votes",
        "_request_component_vote",
        "_process_votes",
        "_apply_state_update",
        "_notify_state_change",
        "handle_component_failure",
        "_initiate_recovery_mode",
        "monitor_partitions"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 50.5
    },
    {
      "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
      "category": "quantum",
      "size_bytes": 36757,
      "size_kb": 35.9,
      "lines": 1,
      "imports": [
        "asyncio",
        "numpy",
        "logging",
        "time",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union"
      ],
      "classes": [
        "BrainSymphonyConfig",
        "ReasoningPhase",
        "BrainSymphony",
        "BioQuantumSymbolicReasoner",
        "OscillationSynchronizer",
        "MockBrainCore",
        "MockQuantumBridge",
        "MockSynapticGate",
        "MockOscillator"
      ],
      "functions": [
        "__init__",
        "explore_possibility_space",
        "evaluate_solution_aesthetics",
        "find_structural_analogies",
        "synthesize_reasoning_path",
        "_apply_quantum_enhancement",
        "_apply_bio_oscillation",
        "_apply_holographic_enhancement",
        "_apply_meta_cognitive_enhancement",
        "calculate_cross_brain_coherence"
      ],
      "async_functions": [
        "explore_possibility_space",
        "evaluate_solution_aesthetics",
        "find_structural_analogies",
        "synthesize_reasoning_path",
        "_apply_quantum_enhancement",
        "_apply_bio_oscillation",
        "_apply_holographic_enhancement",
        "_apply_meta_cognitive_enhancement",
        "calculate_cross_brain_coherence",
        "abstract_reason",
        "_create_quantum_superposition_of_paths",
        "_achieve_cross_brain_coherence",
        "_apply_quantum_inspired_gates",
        "_symbolic_coherence_fallback",
        "_calculate_reasoning_confidence",
        "achieve_coherence",
        "_calculate_phase_relationships",
        "_apply_synchronization",
        "activate_brain",
        "shutdown_brain",
        "process",
        "process_independently",
        "process_quantum_signal",
        "process_signal"
      ],
      "integration_opportunities": [
        "Async operations - integrate with event loop management"
      ],
      "connection_recommendations": [],
      "priority_score": 50.0
    }
  ],
  "integration_plan": {
    "phases": [
      {
        "phase": 1,
        "focus": "High-impact categories",
        "categories": [
          "memory_systems",
          "core_systems",
          "reasoning"
        ],
        "estimated_files": 225,
        "timeframe": "1-2 weeks"
      },
      {
        "phase": 2,
        "focus": "Medium-impact categories",
        "categories": [
          "identity",
          "api_services",
          "bio_systems",
          "quantum",
          "voice",
          "emotion"
        ],
        "estimated_files": 189,
        "timeframe": "2-3 weeks"
      }
    ],
    "quick_wins": [
      {
        "file": "reasoning/LBot_reasoning_processed.py",
        "category": "reasoning",
        "priority_score": 91.0,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "memory/systems/memory_planning.py",
        "category": "memory_systems",
        "priority_score": 83.0,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "memory/systems/memory_profiler.py",
        "category": "memory_systems",
        "priority_score": 80.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "reasoning/ethical_reasoning_system.py",
        "category": "reasoning",
        "priority_score": 80.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "core/circuit_breaker.py",
        "category": "core_systems",
        "priority_score": 69.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "consciousness/cognitive/adapter_complete.py",
        "category": "consciousness",
        "priority_score": 60.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "identity/api/api.py",
        "category": "identity",
        "priority_score": 60.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "reasoning/reasoning_colony.py",
        "category": "reasoning",
        "priority_score": 60.0,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "consciousness/systems/engine_poetic.py",
        "category": "consciousness",
        "priority_score": 58.5,
        "reason": "High priority score with clear integration path"
      },
      {
        "file": "memory/systems/meta_learning_patterns.py",
        "category": "memory_systems",
        "priority_score": 58.5,
        "reason": "High priority score with clear integration path"
      }
    ],
    "major_integrations": [
      {
        "category": "identity",
        "files": 107,
        "priority": "medium",
        "estimated_effort": "high"
      },
      {
        "category": "quantum",
        "files": 39,
        "priority": "medium",
        "estimated_effort": "high"
      },
      {
        "category": "reasoning",
        "files": 60,
        "priority": "high",
        "estimated_effort": "high"
      },
      {
        "category": "consciousness",
        "files": 21,
        "priority": "high",
        "estimated_effort": "high"
      },
      {
        "category": "core_systems",
        "files": 64,
        "priority": "high",
        "estimated_effort": "high"
      },
      {
        "category": "uncategorized",
        "files": 60,
        "priority": "low",
        "estimated_effort": "high"
      },
      {
        "category": "voice",
        "files": 23,
        "priority": "medium",
        "estimated_effort": "high"
      },
      {
        "category": "learning",
        "files": 35,
        "priority": "high",
        "estimated_effort": "high"
      },
      {
        "category": "bridge_integration",
        "files": 18,
        "priority": "high",
        "estimated_effort": "medium"
      },
      {
        "category": "memory_systems",
        "files": 101,
        "priority": "high",
        "estimated_effort": "high"
      },
      {
        "category": "creativity",
        "files": 52,
        "priority": "high",
        "estimated_effort": "high"
      }
    ],
    "estimated_effort": "medium"
  }
}