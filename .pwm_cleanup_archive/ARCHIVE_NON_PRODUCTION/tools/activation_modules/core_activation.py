"""
Auto-generated entity activation for core system
Generated: 2025-07-30T18:32:58.377289
Total Classes: 592
Total Functions: 1057
"""

import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

# Entity definitions
CORE_CLASS_ENTITIES = [
    ("actor_model", "Actor"),
    ("actor_model", "PingActor"),
    ("actor_model", "PongActor"),
    ("actor_supervision_integration", "SupervisedActorSystem"),
    ("actor_system", "AIAgentActor"),
    ("actor_system", "Actor"),
    ("actor_system", "ActorMessage"),
    ("actor_system", "ActorRef"),
    ("actor_system", "ActorState"),
    ("actor_system", "ActorSystem"),
    ("actor_system", "SupervisionStrategy"),
    ("agent_coordination", "AnalyticsAgent"),
    ("agent_coordination", "AutonomousAgent"),
    ("agent_coordination", "CoordinationHub"),
    ("agent_coordination", "CoordinationProtocol"),
    ("agent_coordination", "DataProcessorAgent"),
    ("agent_coordination", "MLModelAgent"),
    ("agent_coordination", "Skill"),
    ("agent_coordination", "SkillLevel"),
    ("agent_coordination", "SkillOffer"),
    ("agent_coordination", "SkillRegistry"),
    ("agent_coordination", "TaskAnnouncement"),
    ("agent_coordination", "TaskStatus"),
    ("agent_coordination", "WorkingGroup"),
    ("ai.integration_manager", "AIIntegrationManager"),
    ("ai.integration_manager", "AIOHTTPClientSessionPH"),
    ("ai.integration_manager", "AIResponse"),
    ("ai.integration_manager", "AITask"),
    ("ai.integration_manager", "MR"),
    ("ai.integration_manager", "TaskTemplates"),
    ("ai_interface", "LukhusAI"),
    ("ai_interface", "LukhusAITaskType"),
    ("api_diff_analyzer", "APICall"),
    ("api_diff_analyzer", "APIDiffAnalyzer"),
    ("api_diff_analyzer", "APIMismatch"),
    ("api_diff_analyzer", "ImplementationAnalyzer"),
    ("api_diff_analyzer", "MethodSignature"),
    ("api_diff_analyzer", "TestAPIExtractor"),
    ("audit.audit_decision_embedding_engine", "AuditTrailEntry"),
    ("audit.audit_decision_embedding_engine", "DecisionAuditColony"),
    ("audit.audit_decision_embedding_engine", "DecisionAuditDecorator"),
    ("audit.audit_decision_embedding_engine", "DecisionAuditLevel"),
    ("audit.audit_decision_embedding_engine", "DecisionContext"),
    ("audit.audit_decision_embedding_engine", "DecisionOutcome"),
    ("audit.audit_decision_embedding_engine", "DecisionStakeholder"),
    ("audit.audit_decision_embedding_engine", "DecisionType"),
    ("audit.audit_decision_embedding_engine", "EventBusAuditIntegration"),
    ("audit.audit_decision_embedding_engine", "UniversalDecisionInterceptor"),
    ("automatic_testing_system", "AITestAnalyzer"),
    ("automatic_testing_system", "AutomaticTestingSystem"),
    ("automatic_testing_system", "PerformanceMonitor"),
    ("automatic_testing_system", "TestOperation"),
    ("automatic_testing_system", "TestSession"),
    ("bio_symbolic_swarm_hub", "BioSymbolicSwarmHub"),
    ("bot", "BotMode"),
    ("bot", "ComponentType"),
    ("bot", "TaskType"),
    ("bot", "UnifiedBot"),
    ("bridges.bio_symbolic_bridge", "BioSymbolicBridge"),
    ("bridges.consciousness_quantum_bridge", "ConsciousnessQuantumBridge"),
    ("bridges.core_consciousness_bridge", "CoreConsciousnessBridge"),
    ("bridges.core_safety_bridge", "CoreSafetyBridge"),
    ("bridges.identity_core_bridge", "IdentityCoreBridge"),
    ("bridges.memory_consciousness_bridge", "MemoryConsciousnessBridge"),
    ("bridges.memory_learning_bridge", "MemoryLearningBridge"),
    ("bridges.nias_dream_bridge", "NIASDreamBridge"),
    ("bridges.orchestration_core_bridge", "OrchestrationCoreBridge"),
    ("bridges.quantum_memory_bridge", "QuantumMemoryBridge"),
    ("circuit_breaker", "ActorQuarantined"),
    ("circuit_breaker", "AdvancedCircuitBreaker"),
    ("circuit_breaker", "AnomalyDetected"),
    ("circuit_breaker", "AnomalyDetector"),
    ("circuit_breaker", "CascadePreventionSystem"),
    ("circuit_breaker", "CircuitBreakerOpen"),
    ("circuit_breaker", "CircuitState"),
    ("circuit_breaker", "ConsensusValidator"),
    ("circuit_breaker", "ErrorPropagationTracker"),
    ("circuit_breaker", "FailureRecord"),
    ("circuit_breaker", "FailureType"),
    ("circuit_breaker", "HealthCheck"),
    ("circuit_breaker", "TestActor"),
    ("cluster_sharding", "ShardManager"),
    ("collaboration", "DynamicTaskNegotiation"),
    ("collaboration", "ReactiveDataPipeline"),
    ("collaboration", "SelfOrganizingSwarm"),
    ("colonies.base_colony", "BaseColony"),
    ("colonies.base_colony", "ConsensusResult"),
    ("colonies.creativity_colony", "CreativityColony"),
    ("colonies.ethics_swarm_colony", "BasicEthicalSimulator"),
    ("colonies.ethics_swarm_colony", "EthicalAgent"),
    ("colonies.ethics_swarm_colony", "EthicalDecisionRequest"),
    ("colonies.ethics_swarm_colony", "EthicalDecisionResponse"),
    ("colonies.ethics_swarm_colony", "EthicalDecisionType"),
    ("colonies.ethics_swarm_colony", "EthicalDriftLevel"),
    ("colonies.ethics_swarm_colony", "EthicalScenario"),
    ("colonies.ethics_swarm_colony", "EthicalSimulationEngine"),
    ("colonies.ethics_swarm_colony", "EthicsSwarmColony"),
    ("colonies.ethics_swarm_colony", "MockCollapseTracker"),
    ("colonies.ethics_swarm_colony", "MockDriftMonitor"),
    ("colonies.ethics_swarm_colony", "MockVeriFoldConnector"),
    ("colonies.ethics_swarm_colony", "SimulationResult"),
    ("colonies.ethics_swarm_colony", "SwarmConsensusMethod"),
    ("colonies.governance_colony", "GovernanceColony"),
    ("colonies.governance_colony_enhanced", "EthicsAgent"),
    ("colonies.governance_colony_enhanced", "GovernanceColony"),
    ("colonies.memory_colony", "MemoryColony"),
    ("colonies.memory_colony_enhanced", "MemoryAgent"),
    ("colonies.memory_colony_enhanced", "MemoryColony"),
    ("colonies.oracle_colony", "OracleAgent"),
    ("colonies.oracle_colony", "OracleColony"),
    ("colonies.oracle_colony", "OracleQuery"),
    ("colonies.oracle_colony", "OracleResponse"),
    ("colonies.reasoning_colony", "ReasoningColony"),
    ("colonies.reasoning_colony", "SymbolAwareTieredMemory"),
    ("colonies.supervisor_agent", "SupervisorAgent"),
    ("colonies.temporal_colony", "TemporalColony"),
    ("common", "BaseComponent"),
    ("common", "BaseMessage"),
    ("common", "CommunicationError"),
    ("common", "ComponentError"),
    ("common", "ComponentStatus"),
    ("common", "MessageType"),
    ("common", "ValidationError"),
    ("config", "Config"),
    ("config", "LukhasConfig"),
    ("consistency_manager", "Consistency"),
    ("consistency_manager", "ConsistencyManager"),
    ("coordination", "ContractNetInitiator"),
    ("coordination", "ContractNetParticipant"),
    ("core_hub", "CoreHub"),
    ("core_system", "LukhasCore"),
    ("core_utilities", "Actor"),
    ("core_utilities", "Consistency"),
    ("core_utilities", "ConsistencyManager"),
    ("core_utilities", "CreativityColony"),
    ("core_utilities", "IntegrityProbe"),
    ("core_utilities", "MemoryColony"),
    ("core_utilities", "QuantizedCycleManager"),
    ("core_utilities", "QuorumOverride"),
    ("core_utilities", "ReasoningColony"),
    ("core_utilities", "ResourceEfficiencyAnalyzer"),
    ("decorators", "PermissionScope"),
    ("decorators", "TierLevel"),
    ("direct_ai_router", "DirectAIRouter"),
    ("distributed_tracing", "AIAgentTracer"),
    ("distributed_tracing", "AgentState"),
    ("distributed_tracing", "DistributedTracer"),
    ("distributed_tracing", "EventReplayer"),
    ("distributed_tracing", "StateSnapshotter"),
    ("distributed_tracing", "TraceCollector"),
    ("distributed_tracing", "TraceContext"),
    ("distributed_tracing", "TraceSpan"),
    ("efficient_communication", "CommunicationMode"),
    ("efficient_communication", "EfficientCommunicationFabric"),
    ("efficient_communication", "EnergyMonitor"),
    ("efficient_communication", "EventBus"),
    ("efficient_communication", "Message"),
    ("efficient_communication", "MessagePriority"),
    ("efficient_communication", "MessageRouter"),
    ("efficient_communication", "P2PChannel"),
    ("energy_consumption_analysis", "EnergyAwareComponent"),
    ("energy_consumption_analysis", "EnergyBudget"),
    ("energy_consumption_analysis", "EnergyComponent"),
    ("energy_consumption_analysis", "EnergyConsumptionAnalyzer"),
    ("energy_consumption_analysis", "EnergyMetric"),
    ("energy_consumption_analysis", "EnergyModel"),
    ("energy_consumption_analysis", "EnergyProfile"),
    ("enhanced_swarm", "AgentCapability"),
    ("enhanced_swarm", "AgentMemory"),
    ("enhanced_swarm", "AgentState"),
    ("enhanced_swarm", "EnhancedColony"),
    ("enhanced_swarm", "EnhancedSwarmAgent"),
    ("enhanced_swarm", "EnhancedSwarmHub"),
    ("enhanced_swarm", "MessageType"),
    ("ethics.dream_ethics_injector", "DreamEthicalAssessment"),
    ("ethics.dream_ethics_injector", "DreamEthicsInjector"),
    ("ethics.dream_ethics_injector", "EthicalAnnotation"),
    ("ethics.dream_ethics_injector", "EthicalPolicy"),
    ("ethics.dream_ethics_injector", "EthicsEngine"),
    ("ethics.dream_ethics_injector", "PolicyViolation"),
    ("event_bus", "DreamEventType"),
    ("event_bus", "Event"),
    ("event_bus", "EventBus"),
    ("event_replay_snapshot", "ActorStateSnapshot"),
    ("event_replay_snapshot", "DemoActor"),
    ("event_replay_snapshot", "Event"),
    ("event_replay_snapshot", "EventSourcedActor"),
    ("event_replay_snapshot", "EventStore"),
    ("event_replay_snapshot", "EventType"),
    ("event_replay_snapshot", "ReplayController"),
    ("event_replay_snapshot", "SnapshotStore"),
    ("event_replayer", "EventReplayer"),
    ("event_sourcing", "AIAgentAggregate"),
    ("event_sourcing", "Event"),
    ("event_sourcing", "EventReplayService"),
    ("event_sourcing", "EventSourcedAggregate"),
    ("event_sourcing", "EventStore"),
    ("examples.mailbox_demo", "BackPressureActor"),
    ("examples.mailbox_demo", "PersistentStateActor"),
    ("examples.mailbox_demo", "PriorityTaskActor"),
    ("examples.mailbox_demo", "SequentialCounterActor"),
    ("fallback_services", "FallbackConsciousnessService"),
    ("fallback_services", "FallbackCreativityService"),
    ("fallback_services", "FallbackEthicsService"),
    ("fallback_services", "FallbackIdentityClient"),
    ("fallback_services", "FallbackLearningService"),
    ("fallback_services", "FallbackMemoryService"),
    ("fallback_services", "FallbackQuantumService"),
    ("fault_tolerance", "SupervisionStrategy"),
    ("fault_tolerance", "Supervisor"),
    ("global_initialization", "GlobalSystemInitializer"),
    ("governance", "GovernanceLayer"),
    ("governance.governance_colony", "GovernanceColony"),
    ("hub_registry", "HubRegistry"),
    ("id", "AccessTier"),
    ("id", "AuditLogEntry"),
    ("id", "ComplianceMonitor"),
    ("id", "ComplianceRegion"),
    ("id", "EmotionalMemoryVector"),
    ("id", "LukhosIDManager"),
    ("id", "QuantumSignature"),
    ("id", "TraumaLockedMemory"),
    ("identity.engine", "IdentityEngine"),
    ("identity.manager", "AdvancedIdentityManager"),
    ("identity.manager", "EmotionalMemoryVector"),
    ("identity.manager", "SymbolicIdentityHash"),
    ("identity.manager", "TraumaLock"),
    ("identity.mapper", "IdentityMapper"),
    ("identity.persona_engine", "PersonaEngine"),
    ("identity.processor", "IdentityProcessor"),
    ("identity_aware_base", "FallbackIdentityClient"),
    ("identity_aware_base", "IdentityAwareService"),
    ("identity_aware_base", "ResourceLimitedService"),
    ("identity_aware_base", "TieredOperationMixin"),
    ("identity_aware_base_colony", "DefaultIdentityAwareColony"),
    ("identity_aware_base_colony", "IdentityAwareBaseColony"),
    ("identity_aware_base_colony", "IdentityValidationError"),
    ("identity_aware_base_colony", "QuantumSecurityError"),
    ("identity_aware_base_colony", "TierAccessDeniedError"),
    ("identity_integration", "IdentityContext"),
    ("identity_integration", "ModuleIntegrationExamples"),
    ("identity_integration", "TierMappingConfig"),
    ("image_processing_pipeline", "AggregationColony"),
    ("image_processing_pipeline", "ClassificationColony"),
    ("image_processing_pipeline", "ColonySupervisor"),
    ("image_processing_pipeline", "EventBus"),
    ("image_processing_pipeline", "EventType"),
    ("image_processing_pipeline", "FeatureExtractionColony"),
    ("image_processing_pipeline", "ImageEvent"),
    ("image_processing_pipeline", "ImageProcessingColony"),
    ("image_processing_pipeline", "ImageProcessingPipeline"),
    ("image_processing_pipeline", "ImageProcessingWorker"),
    ("image_processing_pipeline", "PreprocessingColony"),
    ("image_processing_pipeline", "ProcessingStage"),
    ("image_processing_pipeline", "ThumbnailColony"),
    ("image_processing_pipeline", "ValidationColony"),
    ("infrastructure.base_node", "Node"),
    ("infrastructure.node_collection", "DAOGovernanceNode"),
    ("infrastructure.node_collection", "EthicsNode"),
    ("infrastructure.node_collection", "GoalManagementNode"),
    ("infrastructure.node_collection", "IntentNode"),
    ("infrastructure.node_collection", "MemoryNode"),
    ("infrastructure.node_manager", "NodeManager"),
    ("infrastructure.node_registry", "MessageBus"),
    ("infrastructure.node_registry", "NodeRegistry"),
    ("integrated_safety_system", "IntegratedSafetySystem"),
    ("integrated_safety_system", "SafetyColony"),
    ("integrated_safety_system", "SafetyEvent"),
    ("integrated_safety_system", "SafetyEventBus"),
    ("integrated_safety_system", "SafetyEventType"),
    ("integrated_safety_system", "SafetyLevel"),
    ("integrated_safety_system", "SafetyValidationResult"),
    ("integrated_system", "DistributedAISystem"),
    ("integration_hub", "IntegrationConfig"),
    ("integration_hub", "IntegrationResult"),
    ("integration_hub", "UnifiedIntegration"),
    ("integrations.nias_dream_bridge", "DreamInjectionMode"),
    ("integrations.nias_dream_bridge", "DreamMessage"),
    ("integrations.nias_dream_bridge", "NIASDreamBridge"),
    ("integrator", "AccessController"),
    ("integrator", "AccessTier"),
    ("integrator", "BioOrchestrator"),
    ("integrator", "ComplianceMonitor"),
    ("integrator", "CoreMessageType"),
    ("integrator", "EnhancedCoreConfig"),
    ("integrator", "EnhancedCoreIntegrator"),
    ("integrator", "QuantumAuthenticator"),
    ("integrator", "QuantumBioOscillator"),
    ("integrator", "UnifiedIntegration"),
    ("integrity_probe", "IntegrityProbe"),
    ("interaction.symptom_reporter", "SymptomReporter"),
    ("interfaces.as_agent.sys.dast.aggregator", "DASTAggregator"),
    ("interfaces.as_agent.sys.dast.partner_sdk", "PartnerSDK"),
    ("interfaces.as_agent.sys.dast.store", "DASTStore"),
    ("interfaces.as_agent.sys.nias.delivery_loop", "NIASDeliveryLoop"),
    ("interfaces.as_agent.widgets.widget_config", "Config"),
    ("interfaces.as_agent.widgets.widget_config", "WidgetConfig"),
    ("interfaces.common_interfaces", "DreamAnalyzable"),
    ("interfaces.common_interfaces", "EthicsCheckable"),
    ("interfaces.custom_llm", "Config"),
    ("interfaces.custom_llm", "CustomLlm"),
    ("interfaces.ui.adaptive.ui_orchestrator", "AdaptiveUI"),
    ("interfaces.ui.components.audio_exporter", "Args"),
    ("interfaces.ui.components.audio_exporter", "SecurityError"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "ComplianceEngine"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "ContextAnalyzer"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "DeviceAnalyzer"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "LocationAnalyzer"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "LUKHASVoiceSystem"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "MemoryManager"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "NLPEngine"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "SafetyGuard"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "TimeAnalyzer"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "VoiceModulator"),
    ("introspection.introspector", "ModuleIntrospector"),
    ("mailbox", "BackPressureStrategy"),
    ("mailbox", "BoundedMailbox"),
    ("mailbox", "DeadLetterQueue"),
    ("mailbox", "Mailbox"),
    ("mailbox", "MailboxActor"),
    ("mailbox", "MailboxFactory"),
    ("mailbox", "MailboxType"),
    ("mailbox", "MessagePriority"),
    ("mailbox", "PersistentMailbox"),
    ("mailbox", "PrioritizedMessage"),
    ("mailbox", "PriorityActor"),
    ("mailbox", "PriorityMailbox"),
    ("mailbox", "UnboundedMailbox"),
    ("meta_learning.enhancement_system", "EnhancementMode"),
    ("meta_learning.enhancement_system", "MetaLearningEnhancementSystem"),
    ("meta_learning.enhancement_system", "SystemIntegrationStatus"),
    ("meta_learning.monitor_dashboard", "EthicalAuditEntry"),
    ("meta_learning.monitor_dashboard", "LearningMetrics"),
    ("meta_learning.monitor_dashboard", "MetaLearningMonitorDashboard"),
    ("meta_learning.rate_modulator", "AdaptationStrategy"),
    ("meta_learning.rate_modulator", "ConvergenceSignal"),
    ("meta_learning.rate_modulator", "DynamicLearningRateModulator"),
    ("meta_learning.remediator_agent", "AdvancedMemoryManager"),
    ("meta_learning.remediator_agent", "DynamicLearningRateModulator"),
    ("meta_learning.remediator_agent", "GlyphIDHasher"),
    ("meta_learning.remediator_agent", "LUKHASReplayer"),
    ("meta_learning.remediator_agent", "MetaLearningMonitorDashboard"),
    ("meta_learning.remediator_agent", "QuantumMemoryManager"),
    ("meta_learning.remediator_agent", "RemediationEvent"),
    ("meta_learning.remediator_agent", "RemediationLevel"),
    ("meta_learning.remediator_agent", "RemediationType"),
    ("meta_learning.remediator_agent", "RemediatorAgent"),
    ("meta_learning.symbolic_feedback", "IntentNodeHistory"),
    ("meta_learning.symbolic_feedback", "MemoriaSnapshot"),
    ("meta_learning.symbolic_feedback", "SymbolicFeedbackSystem"),
    ("minimal_actor", "Actor"),
    ("module_registry", "ModuleInfo"),
    ("module_registry", "ModuleRegistry"),
    ("module_registry", "TierLevel"),
    ("modules.nias.dream_recorder", "DreamRecorder"),
    ("modules.nias.nias_hub", "NIASHub"),
    ("modules.nias.openai_adapter", "ModalityType"),
    ("modules.nias.openai_adapter", "MultimodalData"),
    ("modules.nias.openai_adapter", "NIASOpenAIAdapter"),
    ("monitoring.collapse_integration", "CollapseIntegration"),
    ("monitoring.collapse_tracker", "CollapseAlertLevel"),
    ("monitoring.collapse_tracker", "CollapseState"),
    ("monitoring.collapse_tracker", "CollapseTracker"),
    ("monitoring.drift_monitor", "DriftAlert"),
    ("monitoring.drift_monitor", "DriftType"),
    ("monitoring.drift_monitor", "InterventionType"),
    ("monitoring.drift_monitor", "UnifiedDriftMonitor"),
    ("monitoring.drift_monitor", "UnifiedDriftScore"),
    ("monitoring_observability", "Alert"),
    ("monitoring_observability", "AlertManager"),
    ("monitoring_observability", "AlertSeverity"),
    ("monitoring_observability", "DistributedTracer"),
    ("monitoring_observability", "DriftType"),
    ("monitoring_observability", "MetricThreshold"),
    ("monitoring_observability", "MetricType"),
    ("monitoring_observability", "ModelDriftDetector"),
    ("monitoring_observability", "MonitoringConfig"),
    ("monitoring_observability", "ObservabilitySystem"),
    ("monitoring_observability", "PerformanceProfiler"),
    ("neural_architectures.abas.abas_quantum_specialist", "CristaeTopologyManager"),
    ("neural_architectures.abas.abas_quantum_specialist", "ProtonMotiveProcessor"),
    ("neural_architectures.abas.abas_quantum_specialist", "QuantumBioCapabilityLevel"),
    ("neural_architectures.abas.abas_quantum_specialist", "QuantumBioResponse"),
    ("neural_architectures.abas.abas_quantum_specialist", "QuantumBiologicalAGI"),
    ("neural_architectures.abas.abas_quantum_specialist", "QuantumTunnelingEthics"),
    ("neural_architectures.neural_integrator", "AdaptiveNeuralNetwork"),
    ("neural_architectures.neural_integrator", "NeuralArchitectureType"),
    ("neural_architectures.neural_integrator", "NeuralContext"),
    ("neural_architectures.neural_integrator", "NeuralIntegrator"),
    ("neural_architectures.neural_integrator", "NeuralMode"),
    ("neural_architectures.neural_integrator", "NeuralPattern"),
    ("notion_sync", "LambdaLoggerAdapter"),
    ("observability.collector", "ActorMetric"),
    ("observability.collector", "ObservabilityCollector"),
    ("observability_steering", "ActorSnapshot"),
    ("observability_steering", "EmergentPattern"),
    ("observability_steering", "MessageFlow"),
    ("observability_steering", "ObservabilityCollector"),
    ("observability_steering", "ObservabilityDashboard"),
    ("observability_steering", "ObservabilityLevel"),
    ("observability_steering", "ObservableActor"),
    ("observability_steering", "ObservableAgent"),
    ("observability_steering", "SteeringController"),
    ("observability_steering", "SystemHealth"),
    ("observatory", "Observatory"),
    ("oracle_nervous_system", "NervousSystemRequest"),
    ("oracle_nervous_system", "NervousSystemResponse"),
    ("oracle_nervous_system", "OracleCapability"),
    ("oracle_nervous_system", "OracleCapabilityType"),
    ("oracle_nervous_system", "OracleIntegrationLevel"),
    ("oracle_nervous_system", "OracleNervousSystem"),
    ("orchestration.energy_aware_execution_planner", "EnergyAwareExecutionPlanner"),
    ("orchestration.energy_aware_execution_planner", "EnergyBudget"),
    ("orchestration.energy_aware_execution_planner", "EnergyMetrics"),
    ("orchestration.energy_aware_execution_planner", "EnergyProfile"),
    ("orchestration.energy_aware_execution_planner", "EnergyTask"),
    ("orchestration.energy_aware_execution_planner", "Priority"),
    ("p2p_communication", "MessageType"),
    ("p2p_communication", "P2PMessage"),
    ("p2p_communication", "P2PNode"),
    ("p2p_communication", "PeerInfo"),
    ("p2p_communication", "PeerStatus"),
    ("p2p_fabric", "P2PNode"),
    ("performance.orchestrator", "IdentityClient"),
    ("performance.orchestrator", "OptimizationResult"),
    ("performance.orchestrator", "OptimizationStrategy"),
    ("performance.orchestrator", "PerformanceMetrics"),
    ("performance.orchestrator", "PerformanceOrchestrator"),
    ("performance.orchestrator", "PerformanceStatus"),
    ("personality.creative_expressions", "NeuroHaikuGenerator"),
    ("personality.creative_personality", "EthicalProtestModule"),
    ("personality.creative_personality", "FederatedLearningManager"),
    ("personality.creative_personality", "HarmonyEngine"),
    ("personality.creative_personality", "KnowledgeGraph"),
    ("personality.creative_personality", "LUKHASAGI"),
    ("personality.creative_personality", "MetaDoodler"),
    ("personality.creative_personality", "MetaLearningSystem"),
    ("personality.creative_personality", "NeuroHaikuGenerator"),
    ("personality.creative_personality", "ReflectiveIntrospectionSystem"),
    ("personality.creative_personality_clean", "EthicalProtestModule"),
    ("personality.creative_personality_clean", "FederatedLearningManager"),
    ("personality.creative_personality_clean", "HarmonyEngine"),
    ("personality.creative_personality_clean", "KnowledgeGraph"),
    ("personality.creative_personality_clean", "LUKHASAGI"),
    ("personality.creative_personality_clean", "MetaDoodler"),
    ("personality.creative_personality_clean", "MetaLearningSystem"),
    ("personality.creative_personality_clean", "NeuroHaikuGenerator"),
    ("personality.creative_personality_clean", "ReflectiveIntrospectionSystem"),
    ("personality.personality", "CulturalStyle"),
    ("personality.personality", "EtiquetteEngine"),
    ("personality.personality", "InteractionContext"),
    ("personality.personality", "InteractionMetrics"),
    ("personality.personality", "PersonalityManager"),
    ("personality.personality", "ShynessModule"),
    ("plugin_registry", "Plugin"),
    ("plugin_registry", "PluginRegistry"),
    ("plugin_registry", "PluginType"),
    ("practical_optimizations", "AdaptiveCache"),
    ("practical_optimizations", "BatchProcessor"),
    ("practical_optimizations", "CacheEntry"),
    ("practical_optimizations", "ComputationReuse"),
    ("practical_optimizations", "DeferredComputation"),
    ("practical_optimizations", "ExpensiveObject"),
    ("practical_optimizations", "LazyComputation"),
    ("practical_optimizations", "MemoryMappedStorage"),
    ("practical_optimizations", "ObjectPool"),
    ("practical_optimizations", "OptimizationStrategy"),
    ("practical_optimizations", "ResourceManager"),
    ("quantized_cycle_manager", "QuantizedCycleManager"),
    ("quantized_thought_cycles", "CycleMetrics"),
    ("quantized_thought_cycles", "CyclePhase"),
    ("quantized_thought_cycles", "CycleState"),
    ("quantized_thought_cycles", "QuantizedThoughtProcessor"),
    ("quantized_thought_cycles", "ThoughtQuantum"),
    ("quantum_identity_manager", "AGIIdentityType"),
    ("quantum_identity_manager", "QuantumIdentityManager"),
    ("quantum_identity_manager", "QuantumSecurityLevel"),
    ("quantum_identity_manager", "QuantumTierLevel"),
    ("quantum_identity_manager", "QuantumUserContext"),
    ("quorum_override", "QuorumOverride"),
    ("resource_efficiency", "ResourceEfficiencyAnalyzer"),
    ("resource_efficiency_analyzer", "EfficiencyReport"),
    ("resource_efficiency_analyzer", "ResourceEfficiencyAnalyzer"),
    ("resource_efficiency_analyzer", "ResourceSnapshot"),
    ("resource_efficiency_analyzer", "ResourceTrend"),
    ("resource_efficiency_analyzer", "ResourceType"),
    ("resource_scheduler", "SwarmResourceScheduler"),
    ("safety.adversarial_testing", "AdversarialSafetyTester"),
    ("safety.adversarial_testing", "AdversarialTest"),
    ("safety.adversarial_testing", "AttackVector"),
    ("safety.adversarial_testing", "TestResult"),
    ("safety.ai_safety_orchestrator", "AISafetyOrchestrator"),
    ("safety.ai_safety_orchestrator", "SafetyDecision"),
    ("safety.ai_safety_orchestrator", "SafetyMode"),
    ("safety.constitutional_safety", "NIASConstitutionalSafety"),
    ("safety.constitutional_safety", "SafetyEvaluation"),
    ("safety.constitutional_safety", "SafetyPrinciple"),
    ("safety.constitutional_safety", "SafetyViolationType"),
    ("safety.multi_agent_consensus", "AgentRole"),
    ("safety.multi_agent_consensus", "AgentVote"),
    ("safety.multi_agent_consensus", "ConsensusResult"),
    ("safety.multi_agent_consensus", "MultiAgentSafetyConsensus"),
    ("safety.multi_agent_consensus", "SafetyAgent"),
    ("safety.predictive_harm_prevention", "HarmPrediction"),
    ("safety.predictive_harm_prevention", "HarmType"),
    ("safety.predictive_harm_prevention", "PredictiveHarmPrevention"),
    ("safety.predictive_harm_prevention", "PreventiveIntervention"),
    ("safety.predictive_harm_prevention", "SimulatedFuture"),
    ("safety.safety_hub", "SafetyHub"),
    ("service_discovery", "ServiceDiscovery"),
    ("services.location.geofencing_manager", "GeofenceRegion"),
    ("services.location.geofencing_manager", "GeofencingManager"),
    ("services.location.tracker", "LocationTracker"),
    ("services.location.tracker", "LocationUpdate"),
    ("specialized_colonies", "CreativityColony"),
    ("specialized_colonies", "MemoryColony"),
    ("specialized_colonies", "ReasoningColony"),
    ("spine.integration_orchestrator", "ComponentInfo"),
    ("spine.integration_orchestrator", "IntegrationPlan"),
    ("spine.integration_orchestrator", "LukhasIntegrationOrchestrator"),
    ("state_management", "StateManager"),
    ("supervision", "AllForOneStrategy"),
    ("supervision", "CircuitBreaker"),
    ("supervision", "DefaultSupervisionDecider"),
    ("supervision", "DepartmentSupervisor"),
    ("supervision", "FailureInfo"),
    ("supervision", "OneForOneStrategy"),
    ("supervision", "RestForOneStrategy"),
    ("supervision", "RestartPolicy"),
    ("supervision", "RootSupervisor"),
    ("supervision", "SupervisionDecider"),
    ("supervision", "SupervisionDirective"),
    ("supervision", "SupervisionStrategy"),
    ("supervision", "SupervisorActor"),
    ("swarm", "AgentColony"),
    ("swarm", "ResourceState"),
    ("swarm", "SwarmAgent"),
    ("swarm", "SwarmHub"),
    ("swarm_identity_orchestrator", "CrossSwarmOperation"),
    ("swarm_identity_orchestrator", "SwarmIdentityOrchestrator"),
    ("swarm_identity_orchestrator", "SwarmIdentityState"),
    ("swarm_identity_orchestrator", "SwarmSyncState"),
    ("symbolic_arbitration", "TagConflictResolver"),
    ("symbolic_arbitration", "TagLineageTracker"),
    ("symbolic_boot", "SymbolicBootstrap"),
    ("symbolic_bridge.integrator", "SymbolicBridgeIntegrator"),
    ("symbolic_bridge.token_map", "BridgeTokenMap"),
    ("symbolic_contract", "SymbolicContract"),
    ("symbolic_contract", "SymbolicContractRegistry"),
    ("symbolic_diagnostics.trace_repair_engine", "TraceRepairEngine"),
    ("symbolic_drift_analyzer", "DriftAlert"),
    ("symbolic_drift_analyzer", "DriftAlertLevel"),
    ("symbolic_drift_analyzer", "EntropyMetrics"),
    ("symbolic_drift_analyzer", "PatternTrend"),
    ("symbolic_drift_analyzer", "SymbolicDriftAnalyzer"),
    ("symbolic_drift_analyzer", "TagVarianceMetrics"),
    ("symbolic_reasoning.symbolic_trace", "SymbolicTrace"),
    ("symbolism.archiver", "SymbolicShellArchiver"),
    ("symbolism.methylation_model", "MethylationModel"),
    ("symbolism.tags", "TagPermission"),
    ("symbolism.tags", "TagScope"),
    ("task_manager", "Agent"),
    ("task_manager", "LukhλsTaskManager"),
    ("task_manager", "Task"),
    ("task_manager", "TaskPriority"),
    ("task_manager", "TaskQueue"),
    ("task_manager", "TaskStatus"),
    ("tier_aware_colony_proxy", "ColonyNotFoundError"),
    ("tier_aware_colony_proxy", "ColonyProxyManager"),
    ("tier_aware_colony_proxy", "ProxyInitializationError"),
    ("tier_aware_colony_proxy", "TierAwareColonyProxy"),
    ("tier_unification_adapter", "EmotionalTierAdapter"),
    ("tier_unification_adapter", "OneiricTierAdapter"),
    ("tier_unification_adapter", "TierSystemAdapter"),
    ("tier_unification_adapter", "UnifiedTierAdapter"),
    ("tiered_state_management", "ConsistencyLevel"),
    ("tiered_state_management", "CounterAggregator"),
    ("tiered_state_management", "DefaultStateAggregator"),
    ("tiered_state_management", "Event"),
    ("tiered_state_management", "MetricsAggregator"),
    ("tiered_state_management", "StateAggregator"),
    ("tiered_state_management", "StateCoordinator"),
    ("tiered_state_management", "StateSnapshot"),
    ("tiered_state_management", "StateType"),
    ("tiered_state_management", "TieredStateManager"),
    ("user_interface_manager.text_handler", "TextHandler"),
    ("user_interface_manager.voice_handler", "VoiceHandler"),
    ("verifold.verifold_unified", "UnifiedVeriFoldSystem"),
    ("verifold.verifold_unified", "VeriFoldCollapseType"),
    ("verifold.verifold_unified", "VeriFoldPhase"),
    ("verifold.verifold_unified", "VeriFoldRecord"),
    ("verifold.verifold_unified", "VeriFoldSnapshot"),
]

CORE_FUNCTION_ENTITIES = [
    ("actor_model", "receive"),
    ("actor_model", "receive"),
    ("actor_model", "receive"),
    ("actor_model", "send"),
    ("actor_supervision_integration", "new_init"),
    ("actor_supervision_integration", "patch_actor_for_supervision"),
    ("actor_supervision_integration", "patch_actor_system_for_supervision"),
    ("actor_system", "become"),
    ("actor_system", "get_actor"),
    ("actor_system", "get_actor_ref"),
    ("actor_system", "get_stats"),
    ("actor_system", "get_system_stats"),
    ("actor_system", "handle_response"),
    ("actor_system", "register_handler"),
    ("actor_system", "register_response_handler"),
    ("actor_system", "supervision_strategy"),
    ("actor_system", "to_dict"),
    ("actor_system", "unregister_response_handler"),
    ("agent_coordination", "actorref_from_dict"),
    ("agent_coordination", "actorref_to_dict"),
    ("agent_coordination", "add_member"),
    ("agent_coordination", "all_skills_covered"),
    ("agent_coordination", "get_ref"),
    ("agent_coordination", "is_expired"),
    ("agent_coordination", "update_metrics"),
    ("ai.integration_manager", "code_analysis"),
    ("ai.integration_manager", "decorator"),
    ("ai.integration_manager", "lukhas_tier_required"),
    ("ai.integration_manager", "use_github_copilot_cli"),
    ("ai_interface", "ai_audit"),
    ("ai_interface", "ai_chat"),
    ("ai_interface", "ai_code"),
    ("ai_interface", "ai_docs"),
    ("ai_interface", "ai_research"),
    ("ai_interface", "analysis"),
    ("ai_interface", "chat"),
    ("ai_interface", "code_assistance"),
    ("ai_interface", "creative_generation"),
    ("ai_interface", "documentation_assist"),
    ("ai_interface", "generate_response"),
    ("ai_interface", "security_audit"),
    ("ai_interface", "web_research"),
    ("api_diff_analyzer", "analyze"),
    ("api_diff_analyzer", "extract_calls"),
    ("api_diff_analyzer", "extract_signatures"),
    ("api_diff_analyzer", "main"),
    ("api_diff_analyzer", "visit_AsyncFunctionDef"),
    ("api_diff_analyzer", "visit_Attribute"),
    ("api_diff_analyzer", "visit_Call"),
    ("api_diff_analyzer", "visit_ClassDef"),
    ("api_diff_analyzer", "visit_FunctionDef"),
    ("apply_api_fixes", "apply_fixes"),
    ("audit.audit_decision_embedding_engine", "sync_wrapper"),
    ("automatic_testing_system", "analyze_operation"),
    ("automatic_testing_system", "analyze_session"),
    ("automatic_testing_system", "capture_metrics"),
    ("automatic_testing_system", "get_performance_summary"),
    ("automatic_testing_system", "stop"),
    ("automatic_testing_system", "stop_watching"),
    ("benchmark_swarm", "bench_behavior"),
    ("benchmark_swarm", "event_to_actor_bridge"),
    ("benchmark_swarm", "handle_event"),
    ("bio_symbolic_swarm_hub", "create_bio_colony"),
    ("bio_symbolic_swarm_hub", "create_oracle_colony"),
    ("bot", "create_agent"),
    ("bot", "create_auditor"),
    ("bot", "create_bot"),
    ("bot", "create_doc_generator"),
    ("bot", "create_web_manager"),
    ("bot", "process_task"),
    ("bot", "run_component_task"),
    ("bridges.bio_symbolic_bridge", "get_bio_symbolic_bridge"),
    ("bridges.bio_symbolic_bridge", "setup_event_mappings"),
    ("bridges.bio_symbolic_bridge", "transform_data_bio_to_symbolic"),
    ("bridges.bio_symbolic_bridge", "transform_data_symbolic_to_bio"),
    ("bridges.consciousness_quantum_bridge", "compare_states"),
    ("bridges.consciousness_quantum_bridge", "get_consciousness_quantum_bridge"),
    ("bridges.consciousness_quantum_bridge", "setup_event_mappings"),
    ("bridges.consciousness_quantum_bridge", "transform_data_consciousness_to_quantum"),
    ("bridges.consciousness_quantum_bridge", "transform_data_quantum_to_consciousness"),
    ("bridges.core_safety_bridge", "compare_states"),
    ("bridges.core_safety_bridge", "get_core_safety_bridge"),
    ("bridges.core_safety_bridge", "setup_event_mappings"),
    ("bridges.core_safety_bridge", "transform_data_core_to_safety"),
    ("bridges.core_safety_bridge", "transform_data_safety_to_core"),
    ("bridges.identity_core_bridge", "compare_states"),
    ("bridges.identity_core_bridge", "get_identity_core_bridge"),
    ("bridges.identity_core_bridge", "setup_event_mappings"),
    ("bridges.identity_core_bridge", "transform_data_core_to_identity"),
    ("bridges.identity_core_bridge", "transform_data_identity_to_core"),
    ("bridges.memory_consciousness_bridge", "get_memory_consciousness_bridge"),
    ("bridges.memory_consciousness_bridge", "setup_event_mappings"),
    ("bridges.memory_consciousness_bridge", "transform_consciousness_to_memory"),
    ("bridges.memory_consciousness_bridge", "transform_memory_to_consciousness"),
    ("bridges.memory_learning_bridge", "get_memory_learning_bridge"),
    ("bridges.memory_learning_bridge", "setup_event_mappings"),
    ("bridges.memory_learning_bridge", "transform_data_learning_to_memory"),
    ("bridges.memory_learning_bridge", "transform_data_memory_to_learning"),
    ("bridges.nias_dream_bridge", "get_nias_dream_bridge"),
    ("bridges.nias_dream_bridge", "setup_event_mappings"),
    ("bridges.nias_dream_bridge", "transform_data_dream_to_nias"),
    ("bridges.nias_dream_bridge", "transform_data_nias_to_dream"),
    ("bridges.orchestration_core_bridge", "compare_states"),
    ("bridges.orchestration_core_bridge", "get_orchestration_core_bridge"),
    ("bridges.orchestration_core_bridge", "setup_event_mappings"),
    ("bridges.orchestration_core_bridge", "transform_data_core_to_orchestration"),
    ("bridges.orchestration_core_bridge", "transform_data_orchestration_to_core"),
    ("bridges.quantum_memory_bridge", "get_quantum_memory_bridge"),
    ("bridges.quantum_memory_bridge", "setup_event_mappings"),
    ("bridges.quantum_memory_bridge", "transform_memory_to_quantum"),
    ("bridges.quantum_memory_bridge", "transform_quantum_to_memory"),
    ("circuit_breaker", "add_health_check"),
    ("circuit_breaker", "analyze_propagation_patterns"),
    ("circuit_breaker", "call"),
    ("circuit_breaker", "detect_anomalies"),
    ("circuit_breaker", "force_close"),
    ("circuit_breaker", "force_open"),
    ("circuit_breaker", "get_anomaly_score"),
    ("circuit_breaker", "get_metrics"),
    ("circuit_breaker", "get_or_create_circuit_breaker"),
    ("circuit_breaker", "get_system_status"),
    ("circuit_breaker", "is_actor_infected"),
    ("circuit_breaker", "is_quarantined"),
    ("circuit_breaker", "quarantine_actor"),
    ("circuit_breaker", "record_failure"),
    ("circuit_breaker", "record_metric"),
    ("circuit_breaker", "report_failure"),
    ("cluster_sharding", "assign_actor"),
    ("cluster_sharding", "get_actor_state"),
    ("cluster_sharding", "get_shard_id"),
    ("cluster_sharding", "move_actor"),
    ("collaboration", "run_negotiation"),
    ("collaboration", "run_pipeline"),
    ("collaboration", "run_training"),
    ("colonies.base_colony", "entangle_tags"),
    ("colonies.base_colony", "get_status"),
    ("colonies.base_colony", "link_symbolic_contexts"),
    ("colonies.base_colony", "override_tag"),
    ("colonies.base_colony", "prune_expired_tags"),
    ("colonies.base_colony", "request_permission_escalation"),
    ("colonies.base_colony", "set_governance_colony"),
    ("colonies.creativity_colony", "update_task_slots"),
    ("colonies.governance_colony", "review_scenario"),
    ("colonies.reasoning_colony", "propagate_tags"),
    ("colonies.temporal_colony", "get_state"),
    ("colonies.temporal_colony", "revert_last"),
    ("colonies.temporal_colony", "simulate_future_state"),
    ("colonies.temporal_colony", "snapshot_state"),
    ("colonies.tensor_colony_ops", "batch_propagate"),
    ("colonies.tensor_colony_ops", "colony_reasoning_tensor"),
    ("colonies.tensor_colony_ops", "plot_throughput"),
    ("colonies.tensor_colony_ops", "simulate_throughput"),
    ("colonies.tensor_colony_ops", "tags_to_tensor"),
    ("common", "add_metadata"),
    ("common", "get_config"),
    ("common", "get_timestamp"),
    ("common", "set_status"),
    ("common", "validate_component_id"),
    ("config", "get_config"),
    ("config", "get_cors_origins_list"),
    ("config", "is_development"),
    ("config", "is_production"),
    ("config", "validate_database_url"),
    ("config", "validate_environment"),
    ("config", "validate_secret_strength"),
    ("config_manager", "get_config"),
    ("config_manager", "set_config"),
    ("coordination", "award_contract"),
    ("coordination", "calculate_bid"),
    ("coordination", "call_for_proposals"),
    ("coordination", "can_perform_task"),
    ("coordination", "handle_call_for_proposals"),
    ("coordination", "receive_proposal"),
    ("core_hub", "get_core_hub"),
    ("core_hub", "get_endpoints"),
    ("core_hub", "get_service"),
    ("core_hub", "list_services"),
    ("core_hub", "register_event_handler"),
    ("core_hub", "register_service"),
    ("core_system", "get_lukhas_core"),
    ("core_system", "get_status"),
    ("core_utilities", "collect_metrics"),
    ("core_utilities", "echo_behavior"),
    ("core_utilities", "get_resource_efficiency_table"),
    ("core_utilities", "request_access"),
    ("core_utilities", "run_consistency_check"),
    ("core_utilities", "send"),
    ("decorators", "decorator"),
    ("decorators", "decorator"),
    ("decorators", "decorator"),
    ("decorators", "glyph_bind"),
    ("decorators", "lukhas_tier_required"),
    ("decorators", "trace"),
    ("decorators", "wrapper"),
    ("decorators", "wrapper"),
    ("decorators", "wrapper"),
    ("direct_ai_router", "is_ai_available"),
    ("direct_ai_router", "is_available"),
    ("direct_ai_router", "route_ai_request"),
    ("direct_ai_router", "route_request"),
    ("distributed_tracing", "add_log"),
    ("distributed_tracing", "add_log"),
    ("distributed_tracing", "add_span"),
    ("distributed_tracing", "add_tag"),
    ("distributed_tracing", "add_tag"),
    ("distributed_tracing", "create_ai_tracer"),
    ("distributed_tracing", "demo_distributed_tracing"),
    ("distributed_tracing", "finish"),
    ("distributed_tracing", "finish_span"),
    ("distributed_tracing", "from_headers"),
    ("distributed_tracing", "get_baggage_item"),
    ("distributed_tracing", "get_current_context"),
    ("distributed_tracing", "get_global_collector"),
    ("distributed_tracing", "get_global_tracer"),
    ("distributed_tracing", "get_trace"),
    ("distributed_tracing", "get_trace_statistics"),
    ("distributed_tracing", "get_traces_by_operation"),
    ("distributed_tracing", "parent_span_id"),
    ("distributed_tracing", "replay_agent_state"),
    ("distributed_tracing", "replay_trace"),
    ("distributed_tracing", "restore_latest_snapshot"),
    ("distributed_tracing", "set_baggage_item"),
    ("distributed_tracing", "span_id"),
    ("distributed_tracing", "start_span"),
    ("distributed_tracing", "start_trace"),
    ("distributed_tracing", "take_snapshot"),
    ("distributed_tracing", "to_dict"),
    ("distributed_tracing", "to_headers"),
    ("distributed_tracing", "trace_agent_collaboration"),
    ("distributed_tracing", "trace_agent_operation"),
    ("distributed_tracing", "trace_memory_operation"),
    ("distributed_tracing", "trace_operation"),
    ("distributed_tracing", "with_span"),
    ("efficient_communication", "can_afford_message"),
    ("efficient_communication", "find_optimal_path"),
    ("efficient_communication", "get_communication_stats"),
    ("efficient_communication", "get_connection_stats"),
    ("efficient_communication", "get_statistics"),
    ("efficient_communication", "get_stats"),
    ("efficient_communication", "is_expired"),
    ("efficient_communication", "record_energy_usage"),
    ("efficient_communication", "record_message_sent"),
    ("efficient_communication", "register_node"),
    ("efficient_communication", "select_communication_mode"),
    ("efficient_communication", "subscribe"),
    ("efficient_communication", "subscribe_to_events"),
    ("efficient_communication", "to_dict"),
    ("efficient_communication", "unsubscribe"),
    ("energy_consumption_analysis", "budget_percentage_used"),
    ("energy_consumption_analysis", "create_budget"),
    ("energy_consumption_analysis", "export_metrics"),
    ("energy_consumption_analysis", "get_energy_statistics"),
    ("energy_consumption_analysis", "is_within_budget"),
    ("energy_consumption_analysis", "power_watts"),
    ("energy_consumption_analysis", "predict_energy"),
    ("energy_consumption_analysis", "predict_operation_energy"),
    ("energy_consumption_analysis", "record_energy_consumption"),
    ("energy_consumption_analysis", "record_observation"),
    ("energy_consumption_analysis", "remaining_budget"),
    ("energy_consumption_analysis", "reset"),
    ("energy_consumption_analysis", "set_active_budget"),
    ("energy_consumption_analysis", "set_energy_profile"),
    ("energy_consumption_analysis", "time_elapsed"),
    ("energy_consumption_analysis", "to_dict"),
    ("enhanced_swarm", "create_colony"),
    ("enhanced_swarm", "detect_emergent_patterns"),
    ("enhanced_swarm", "get_colony_status"),
    ("enhanced_swarm", "get_status"),
    ("enhanced_swarm", "get_swarm_status"),
    ("enhanced_swarm", "recall"),
    ("enhanced_swarm", "receive"),
    ("enhanced_swarm", "remember"),
    ("ethics.dream_ethics_injector", "get_safety_statistics"),
    ("ethics.dream_ethics_injector", "risk_level"),
    ("ethics.dream_ethics_injector", "to_dict"),
    ("event_bus", "filtered_callback"),
    ("event_bus", "get_event_bus_stats"),
    ("event_bus", "subscribe"),
    ("event_bus", "subscribe_to_dream_events"),
    ("event_bus", "unsubscribe"),
    ("event_replay_snapshot", "create_from_actor"),
    ("event_replay_snapshot", "from_json"),
    ("event_replay_snapshot", "restore_to_actor"),
    ("event_replay_snapshot", "to_json"),
    ("event_replayer", "filter_events_by_tag"),
    ("event_replayer", "replay_ethical_events"),
    ("event_replayer", "replay_events"),
    ("event_sourcing", "add_capability"),
    ("event_sourcing", "analyze_agent_behavior"),
    ("event_sourcing", "append_event"),
    ("event_sourcing", "apply_event"),
    ("event_sourcing", "apply_event"),
    ("event_sourcing", "assign_task"),
    ("event_sourcing", "commit_events"),
    ("event_sourcing", "complete_task"),
    ("event_sourcing", "create_agent"),
    ("event_sourcing", "from_dict"),
    ("event_sourcing", "get_causal_chain"),
    ("event_sourcing", "get_events_by_correlation_id"),
    ("event_sourcing", "get_events_for_aggregate"),
    ("event_sourcing", "get_events_in_time_range"),
    ("event_sourcing", "get_global_event_store"),
    ("event_sourcing", "raise_event"),
    ("event_sourcing", "replay_aggregate_to_point_in_time"),
    ("event_sourcing", "replay_events"),
    ("event_sourcing", "to_dict"),
    ("event_sourcing", "update_memory"),
    ("fallback_services", "adapt_behavior"),
    ("fallback_services", "assess_action"),
    ("fallback_services", "check_compliance"),
    ("fallback_services", "generate_content"),
    ("fallback_services", "get_consciousness_state"),
    ("fallback_services", "introspect"),
    ("fallback_services", "learn_from_data"),
    ("fallback_services", "log_activity"),
    ("fallback_services", "process_awareness"),
    ("fallback_services", "quantum_compute"),
    ("fallback_services", "quantum_entangle"),
    ("fallback_services", "retrieve_memory"),
    ("fallback_services", "search_memory"),
    ("fallback_services", "store_memory"),
    ("fallback_services", "synthesize_dream"),
    ("fallback_services", "verify_user_access"),
    ("fault_tolerance", "add_child"),
    ("fault_tolerance", "handle_failure"),
    ("governance", "add_rule"),
    ("governance", "validate_action"),
    ("hub_registry", "get_all_hubs"),
    ("hub_registry", "get_hub"),
    ("hub_registry", "get_hub_registry"),
    ("id", "check_compliance"),
    ("id", "get_compliance_status"),
    ("id", "lock_memory"),
    ("id", "to_dict"),
    ("id", "to_dict"),
    ("id", "unlock_memory"),
    ("identity.engine", "create_identity_component"),
    ("identity.engine", "get_status"),
    ("identity.id_manager", "get_current_sid"),
    ("identity.id_manager", "get_user_tier"),
    ("identity.id_manager", "register_new_user"),
    ("identity.manager", "apply_trauma_lock"),
    ("identity.manager", "authenticate"),
    ("identity.manager", "create_hash"),
    ("identity.manager", "extract_vector"),
    ("identity.manager", "get_vector"),
    ("identity.manager", "register_user"),
    ("identity.manager", "secure"),
    ("identity.manager", "store_hash"),
    ("identity.manager", "unlock"),
    ("identity.manager", "update"),
    ("identity.manager", "update_vector"),
    ("identity.manager", "verify"),
    ("identity.mapper", "create_identity_component"),
    ("identity.mapper", "get_status"),
    ("identity.persona_engine", "create_identity_component"),
    ("identity.persona_engine", "get_status"),
    ("identity.processor", "create_identity_component"),
    ("identity.processor", "get_status"),
    ("identity_aware_base", "check_consent"),
    ("identity_aware_base", "check_resource_availability"),
    ("identity_aware_base", "check_user_consent"),
    ("identity_aware_base", "clear_user_cache"),
    ("identity_aware_base", "consume_resource"),
    ("identity_aware_base", "decorator"),
    ("identity_aware_base", "execute_tiered_operation"),
    ("identity_aware_base", "get_service_info"),
    ("identity_aware_base", "get_user_context"),
    ("identity_aware_base", "get_user_resource_limits"),
    ("identity_aware_base", "identity_client"),
    ("identity_aware_base", "log_activity"),
    ("identity_aware_base", "log_user_activity"),
    ("identity_aware_base", "tier_required"),
    ("identity_aware_base", "validate_user_tier"),
    ("identity_aware_base", "verify_user_access"),
    ("identity_aware_base", "wrapper"),
    ("identity_aware_base_colony", "create_identity_aware_colony"),
    ("identity_aware_base_colony", "get_identity_statistics"),
    ("identity_aware_base_colony", "get_supported_capabilities_for_tier"),
    ("identity_integration", "context_manager_example"),
    ("identity_integration", "decorator"),
    ("identity_integration", "dream_generation_example"),
    ("identity_integration", "get_identity_client"),
    ("identity_integration", "get_tier_index"),
    ("identity_integration", "memory_operation_example"),
    ("identity_integration", "normalize_tier"),
    ("identity_integration", "quantum_operation_example"),
    ("identity_integration", "require_identity"),
    ("identity_integration", "validate_and_log"),
    ("identity_integration", "wrapper"),
    ("image_processing_pipeline", "from_dict"),
    ("image_processing_pipeline", "get_pipeline_stats"),
    ("image_processing_pipeline", "handle_worker_failure"),
    ("image_processing_pipeline", "is_healthy"),
    ("image_processing_pipeline", "publish"),
    ("image_processing_pipeline", "subscribe"),
    ("image_processing_pipeline", "to_dict"),
    ("infrastructure.base_node", "activate"),
    ("infrastructure.base_node", "add_link"),
    ("infrastructure.base_node", "evolve"),
    ("infrastructure.base_node", "reflect"),
    ("infrastructure.base_node", "trigger_event"),
    ("infrastructure.node_collection", "create_goal"),
    ("infrastructure.node_collection", "create_proposal"),
    ("infrastructure.node_collection", "evaluate_action"),
    ("infrastructure.node_collection", "get_active_goals"),
    ("infrastructure.node_collection", "get_goal"),
    ("infrastructure.node_collection", "process"),
    ("infrastructure.node_collection", "refine_intent"),
    ("infrastructure.node_collection", "register_core_nodes"),
    ("infrastructure.node_collection", "retrieve"),
    ("infrastructure.node_collection", "store"),
    ("infrastructure.node_collection", "update_progress"),
    ("infrastructure.node_collection", "vote"),
    ("infrastructure.node_manager", "broadcast_to_nodes"),
    ("infrastructure.node_manager", "discover_nodes"),
    ("infrastructure.node_manager", "dispatch_message"),
    ("infrastructure.node_manager", "handle_node_status_change"),
    ("infrastructure.node_manager", "process_message"),
    ("infrastructure.node_manager", "register_node"),
    ("infrastructure.node_registry", "broadcast_message"),
    ("infrastructure.node_registry", "broadcast_message"),
    ("infrastructure.node_registry", "create_node"),
    ("infrastructure.node_registry", "discover_nodes"),
    ("infrastructure.node_registry", "establish_relationship"),
    ("infrastructure.node_registry", "execute_node"),
    ("infrastructure.node_registry", "get_messages"),
    ("infrastructure.node_registry", "get_node"),
    ("infrastructure.node_registry", "get_node_info"),
    ("infrastructure.node_registry", "initialize_standard_nodes"),
    ("infrastructure.node_registry", "register_node_type"),
    ("infrastructure.node_registry", "send_message"),
    ("infrastructure.node_registry", "send_message"),
    ("infrastructure.node_registry", "subscribe"),
    ("integrated_safety_system", "check_circuit_breaker"),
    ("integrated_safety_system", "get_event_metrics"),
    ("integrated_safety_system", "get_system_status"),
    ("integrated_safety_system", "trip_circuit_breaker"),
    ("integrated_system", "task_priority_score"),
    ("integration_hub", "batch_invoke"),
    ("integration_hub", "cleanup"),
    ("integration_hub", "create_data_pipeline"),
    ("integration_hub", "execute_pipeline"),
    ("integration_hub", "export_configuration"),
    ("integration_hub", "get_component_status"),
    ("integration_hub", "get_integration_metrics"),
    ("integration_hub", "import_configuration"),
    ("integration_hub", "invoke_component"),
    ("integration_hub", "register_component"),
    ("integration_hub", "unregister_component"),
    ("integrations.nias_dream_bridge", "get_dream_statistics"),
    ("integrations.nias_dream_bridge", "get_nias_dream_bridge"),
    ("integrations.nias_dream_bridge", "inject_components"),
    ("integrator", "broadcast_event"),
    ("integrator", "check_permission"),
    ("integrator", "decorator"),
    ("integrator", "get_coherence"),
    ("integrator", "get_health"),
    ("integrator", "get_status"),
    ("integrator", "get_system_status"),
    ("integrator", "lukhas_tier_required"),
    ("integrator", "process_event"),
    ("integrator", "process_message"),
    ("integrator", "register_component"),
    ("integrator", "register_component"),
    ("integrator", "register_component"),
    ("integrator", "send_message_to_component"),
    ("integrator", "sign_message"),
    ("integrator", "subscribe_to_event"),
    ("integrator", "verify_component_state"),
    ("integrator", "verify_message_state"),
    ("integrity_probe", "run_consistency_check"),
    ("interfaces.as_agent.auth.registry", "auto_login"),
    ("interfaces.as_agent.auth.registry", "can_recover_full_state"),
    ("interfaces.as_agent.auth.registry", "get_user_preferences"),
    ("interfaces.as_agent.auth.registry", "pair_device"),
    ("interfaces.as_agent.auth.registry", "share_preferences"),
    ("interfaces.as_agent.auth.registry", "validate_user_tier"),
    ("interfaces.as_agent.auth.vendor_hospitality_sync", "pair_with_vendor"),
    ("interfaces.as_agent.core.generate_image", "dalle_generate"),
    ("interfaces.as_agent.core.generate_image", "generate_symbolic_image"),
    ("interfaces.as_agent.core.overview_log", "log_event"),
    ("interfaces.as_agent.news_and_social.affiliate_log", "log_referral_click"),
    ("interfaces.as_agent.news_and_social.s_dispatcher", "load_pending_posts"),
    ("interfaces.as_agent.news_and_social.s_dispatcher", "rewrite_queue"),
    ("interfaces.as_agent.news_and_social.s_dispatcher", "simulate_publish"),
    ("interfaces.as_agent.news_and_social.s_dispatcher", "update_dispatch_log"),
    ("interfaces.as_agent.sys.abas.abas", "is_allowed_now"),
    ("interfaces.as_agent.sys.dast.aggregator", "aggregate_dast_tags"),
    ("interfaces.as_agent.sys.dast.aggregator", "aggregate_symbolic_tags"),
    ("interfaces.as_agent.sys.dast.aggregator", "aggregate_symbolic_tags"),
    ("interfaces.as_agent.sys.dast.aggregator", "get_aggregator"),
    ("interfaces.as_agent.sys.dast.aggregator", "get_status"),
    ("interfaces.as_agent.sys.dast.dast", "dispatch"),
    ("interfaces.as_agent.sys.dast.dast", "handle_delegate_payment"),
    ("interfaces.as_agent.sys.dast.dast", "handle_dream_summary"),
    ("interfaces.as_agent.sys.dast.dast", "handle_ethical_signal"),
    ("interfaces.as_agent.sys.dast.dast", "register_task"),
    ("interfaces.as_agent.sys.dast.dast", "wrapper"),
    ("interfaces.as_agent.sys.dast.dast_core", "add_tag"),
    ("interfaces.as_agent.sys.dast.dast_core", "get_current_tags"),
    ("interfaces.as_agent.sys.dast.dast_core", "remove_tag"),
    ("interfaces.as_agent.sys.dast.launcher", "startup_sequence"),
    ("interfaces.as_agent.sys.dast.partner_sdk", "receive_partner_input"),
    ("interfaces.as_agent.sys.dast.partner_sdk", "receive_partner_input"),
    ("interfaces.as_agent.sys.dast.schedule_manager", "is_time_to_deliver"),
    ("interfaces.as_agent.sys.dast.store", "load_tags_from_file"),
    ("interfaces.as_agent.sys.dast.store", "load_tags_from_file"),
    ("interfaces.as_agent.sys.dast.store", "save_tags_to_file"),
    ("interfaces.as_agent.sys.dast.store", "save_tags_to_file"),
    ("interfaces.as_agent.sys.nias.05_25_dream_clustering_engine", "cluster_dreams_by_tag"),
    ("interfaces.as_agent.sys.nias.consent_filter", "is_allowed"),
    ("interfaces.as_agent.sys.nias.delivery_loop", "run_delivery_queue"),
    ("interfaces.as_agent.sys.nias.dream_narrator_queue", "extract_narratable_dreams"),
    ("interfaces.as_agent.sys.nias.dream_recorder", "record_dream_message"),
    ("interfaces.as_agent.sys.nias.feedback_log_viewer", "view_feedback"),
    ("interfaces.as_agent.sys.nias.feedback_loop", "record_feedback"),
    ("interfaces.as_agent.sys.nias.generate_payload_cli", "generate_payload"),
    ("interfaces.as_agent.sys.nias.narration_controller", "fetch_narration_entries"),
    ("interfaces.as_agent.sys.nias.narration_controller", "filter_narration_queue"),
    ("interfaces.as_agent.sys.nias.narration_controller", "load_user_settings"),
    ("interfaces.as_agent.sys.nias.narration_controller", "print_debug_narration_summary"),
    ("interfaces.as_agent.sys.nias.nias_core", "push_symbolic_message"),
    ("interfaces.as_agent.sys.nias.replay_heatmap", "load_replay_data"),
    ("interfaces.as_agent.sys.nias.replay_heatmap", "plot_heatmap"),
    ("interfaces.as_agent.sys.nias.replay_visualizer", "color_emotion"),
    ("interfaces.as_agent.sys.nias.replay_visualizer", "visualize_replays"),
    ("interfaces.as_agent.sys.nias.symbolic_matcher", "match_message_to_context"),
    ("interfaces.as_agent.sys.nias.symbolic_reply_generator", "generate_symbolic_reply"),
    ("interfaces.as_agent.sys.nias.validate_payload", "validate_payload"),
    ("interfaces.as_agent.sys.nias.voice_narrator", "narrate_dreams"),
    ("interfaces.as_agent.utils.symbolic_utils", "summarize_emotion_vector"),
    ("interfaces.as_agent.utils.symbolic_utils", "tier_label"),
    ("interfaces.as_agent.widgets.delivery_tracker_widget", "create_delivery_widget"),
    ("interfaces.as_agent.widgets.delivery_tracker_widget", "update_delivery_status"),
    ("interfaces.as_agent.widgets.live_renderer_widget", "render_widget_preview"),
    ("interfaces.as_agent.widgets.terminal_widget", "render_terminal_widget"),
    ("interfaces.as_agent.widgets.terminal_widget", "show_dst_status"),
    ("interfaces.as_agent.widgets.travel_widget", "suggest_long_distance_travel"),
    ("interfaces.as_agent.widgets.travel_widget", "suggest_travel_action"),
    ("interfaces.as_agent.widgets.widget_archive", "render_widget_preview"),
    ("interfaces.cli", "display_flashback_preview"),
    ("interfaces.cli", "display_mood"),
    ("interfaces.cli", "display_system_status"),
    ("interfaces.cli", "launch"),
    ("interfaces.cli", "voice_welcome"),
    ("interfaces.common_interfaces", "get_dream_state"),
    ("interfaces.common_interfaces", "get_ethical_context"),
    ("interfaces.custom_llm", "log_creation"),
    ("interfaces.dashboad", "build_publish_payload"),
    ("interfaces.dashboad", "generate_symbolic_html_url"),
    ("interfaces.dashboad", "show_social_post_preview"),
    ("interfaces.launcher", "launch_lukhas"),
    ("interfaces.logic.agent_core", "run_agent_simulation"),
    ("interfaces.logic.agent_core", "start_agent"),
    ("interfaces.logic.agent_logic_architecture", "activate_delegate_mode"),
    ("interfaces.logic.agent_logic_architecture", "check_and_quarantine"),
    ("interfaces.logic.agent_logic_architecture", "ethical_review"),
    ("interfaces.logic.agent_logic_architecture", "generate_dream_digest"),
    ("interfaces.logic.agent_logic_architecture", "generate_response"),
    ("interfaces.logic.agent_logic_architecture", "initialize_agent"),
    ("interfaces.logic.agent_logic_architecture", "store_memory_echo"),
    ("interfaces.logic.agent_logic_architecture", "sync_user_mood"),
    ("interfaces.logic.agent_logic_architecture", "verify_access_level"),
    ("interfaces.logic.consent_manager", "is_action_allowed"),
    ("interfaces.logic.consent_manager", "revoke_access"),
    ("interfaces.logic.consent_manager", "verify_or_revoke"),
    ("interfaces.logic.context.context_builder", "build_user_context"),
    ("interfaces.logic.delegate_logic", "can_delegate"),
    ("interfaces.logic.delegate_logic", "delegate_action"),
    ("interfaces.logic.voice.voice_renderer", "render_voice"),
    ("interfaces.main", "launch_cli"),
    ("interfaces.main", "launch_gui"),
    ("interfaces.main", "launch_narration"),
    ("interfaces.main", "launch_socket"),
    ("interfaces.main", "log_event"),
    ("interfaces.main", "main"),
    ("interfaces.main", "symbolic_intro"),
    ("interfaces.main", "symbolic_menu"),
    ("interfaces.nias.generate_nias_docs", "generate_nias_documentation"),
    ("interfaces.nias.generate_nias_docs", "start_documentation_server"),
    ("interfaces.tools.cli.command_registry", "list_commands"),
    ("interfaces.tools.cli.dream_cli", "inject_test_dream"),
    ("interfaces.tools.cli.dream_cli", "main"),
    ("interfaces.tools.cli.dream_cli", "run_all"),
    ("interfaces.tools.cli.dream_cli", "run_narrator_queue"),
    ("interfaces.tools.cli.dream_cli", "run_voice_narrator"),
    ("interfaces.tools.dao.dao_propose", "main"),
    ("interfaces.tools.dao.dao_propose", "submit_proposal"),
    ("interfaces.tools.dao.dao_vote", "cast_vote"),
    ("interfaces.tools.dao.dao_vote", "main"),
    ("interfaces.tools.research.research_dashboard", "log_session_end"),
    ("interfaces.tools.security.session_logger", "is_access_allowed"),
    ("interfaces.tools.security.session_logger", "log_session_event"),
    ("interfaces.ui.components.audio_exporter", "export_as_text_narration"),
    ("interfaces.ui.components.audio_exporter", "generate_filename"),
    ("interfaces.ui.components.audio_exporter", "get_env_var"),
    ("interfaces.ui.components.audio_exporter", "safe_subprocess_run"),
    ("interfaces.ui.config.dashboard_settings", "get_paired_apps"),
    ("interfaces.ui.config.dashboard_settings", "get_user_preference"),
    ("interfaces.ui.config.dashboard_settings", "list_active_widgets"),
    ("interfaces.ui.config.dashboard_settings", "set_user_preference"),
    ("interfaces.ui.config.dashboard_settings", "store_paired_app"),
    ("interfaces.ui.config.dashboard_settings", "toggle_widget_visibility"),
    ("interfaces.ui.gui_launcher", "launch_dashboard"),
    ("interfaces.voice.core.sayit", "classify"),
    ("interfaces.voice.core.sayit", "route"),
    ("interfaces.voice.edge_voice", "load_config"),
    ("interfaces.voice.listen", "gpt_symbolic_response"),
    ("interfaces.voice.listen", "listen_to_human"),
    ("interfaces.voice.listen", "log_daily_entry"),
    ("interfaces.voice.listen", "loop_symbolic_conversation"),
    ("interfaces.voice.voice_agent", "speak"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "analyze"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "anonymize_metadata"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "determine_parameters"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "get_relevant_memories"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "should_retain_data"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "store_interaction"),
    ("interfaces.voice.voice_emotional.context_aware_modular_voice", "validate_response"),
    ("interfaces.web_formatter", "format_caption"),
    ("interfaces.web_formatter", "format_html"),
    ("interfaces.web_formatter", "format_markdown"),
    ("interfaces.web_formatter", "load_latest_expression"),
    ("interfaces.web_formatter", "save_formats"),
    ("introspection.introspector", "analyze_module"),
    ("introspection.introspector", "analyze_module"),
    ("introspection.introspector", "report_symbolic_state"),
    ("introspection.introspector", "report_symbolic_state"),
    ("mailbox", "add_message_filter"),
    ("mailbox", "create_mailbox"),
    ("mailbox", "get_mailbox_stats"),
    ("mailbox", "get_priority_stats"),
    ("mailbox", "get_stats"),
    ("mailbox", "is_full"),
    ("mailbox", "qsize"),
    ("mailbox", "qsize"),
    ("mailbox", "qsize"),
    ("mailbox", "qsize"),
    ("meta_learning.remediator_agent", "adjust_for_drift"),
    ("meta_learning.remediator_agent", "assess_system_state"),
    ("meta_learning.remediator_agent", "calculate_drift_score"),
    ("meta_learning.remediator_agent", "calculate_drift_score"),
    ("meta_learning.remediator_agent", "calculate_entropy_measure"),
    ("meta_learning.remediator_agent", "check_system_health"),
    ("meta_learning.remediator_agent", "consolidate_memories"),
    ("meta_learning.remediator_agent", "create_remediator_agent"),
    ("meta_learning.remediator_agent", "emit_voice_alert"),
    ("meta_learning.remediator_agent", "execute_remediation"),
    ("meta_learning.remediator_agent", "generate_collapse_hash"),
    ("meta_learning.remediator_agent", "generate_hash"),
    ("meta_learning.remediator_agent", "get_agent_status"),
    ("meta_learning.remediator_agent", "optimize_performance"),
    ("meta_learning.remediator_agent", "replay_dream_by_id"),
    ("meta_learning.remediator_agent", "replay_memories"),
    ("meta_learning.remediator_agent", "replay_recent_dreams"),
    ("meta_learning.remediator_agent", "run_monitoring_cycle"),
    ("meta_learning.remediator_agent", "shutdown"),
    ("meta_learning.remediator_agent", "spawn_sub_agent"),
    ("meta_learning.remediator_agent", "trigger_dream_replay"),
    ("meta_learning.remediator_agent", "update_dashboard"),
    ("meta_learning.remediator_agent", "update_remediation_status"),
    ("minimal_actor", "echo_behavior"),
    ("minimal_actor", "send"),
    ("module_registry", "decorator"),
    ("module_registry", "get_module"),
    ("module_registry", "get_module_health"),
    ("module_registry", "list_modules"),
    ("module_registry", "register_connection"),
    ("module_registry", "register_core_connections"),
    ("module_registry", "register_module"),
    ("module_registry", "require_module_tier"),
    ("module_registry", "require_tier"),
    ("module_registry", "shutdown"),
    ("module_registry", "wrapper"),
    ("modules.nias.dream_recorder", "clear_dreams"),
    ("modules.nias.dream_recorder", "export_dreams"),
    ("modules.nias.dream_recorder", "get_dream_recorder"),
    ("modules.nias.dream_recorder", "get_dream_stats"),
    ("modules.nias.dream_recorder", "get_recorded_dreams"),
    ("modules.nias.dream_recorder", "record_dream_message"),
    ("modules.nias.dream_recorder", "record_dream_message"),
    ("modules.nias.dream_recorder", "search_dreams"),
    ("modules.nias.dream_recorder", "set_dream_recorder"),
    ("modules.nias.nias_hub", "get_nias_hub"),
    ("modules.nias.nias_hub", "get_service"),
    ("modules.nias.nias_hub", "register_event_handler"),
    ("modules.nias.nias_hub", "register_service"),
    ("modules.nias.openai_adapter", "get_nias_openai_adapter"),
    ("monitoring.collapse_integration", "integrate_collapse_tracking"),
    ("monitoring.collapse_integration", "update_entropy_from_components"),
    ("monitoring.collapse_tracker", "calculate_shannon_entropy"),
    ("monitoring.collapse_tracker", "generate_synthetic_test_data"),
    ("monitoring.collapse_tracker", "get_collapse_history"),
    ("monitoring.collapse_tracker", "get_global_tracker"),
    ("monitoring.collapse_tracker", "get_system_health"),
    ("monitoring.collapse_tracker", "record_collapse_event"),
    ("monitoring.collapse_tracker", "to_dict"),
    ("monitoring.collapse_tracker", "update_entropy_score"),
    ("monitoring.drift_monitor", "get_drift_summary"),
    ("monitoring_observability", "add_span_event"),
    ("monitoring_observability", "get_performance_summary"),
    ("neural_architectures.abas.abas_quantum_specialist", "create_attention_gradient"),
    ("neural_architectures.abas.abas_quantum_specialist", "get_biological_status"),
    ("neural_architectures.abas.abas_quantum_specialist", "optimize_cristae_topology"),
    ("neural_architectures.abas.abas_quantum_specialist", "quantum_ethical_arbitration"),
    ("neural_architectures.abas.abas_quantum_specialist", "synthesize_symbolic_atp"),
    ("neural_architectures.neural_integrator", "adapt_architecture"),
    ("neural_architectures.neural_integrator", "forward"),
    ("notion_sync", "generate_summary"),
    ("notion_sync", "log_audit_with_lid"),
    ("notion_sync", "log_audit_with_lid"),
    ("notion_sync", "main"),
    ("notion_sync", "make_code_block"),
    ("notion_sync", "make_flat_block"),
    ("notion_sync", "make_minimal_block"),
    ("notion_sync", "make_toggle_block"),
    ("notion_sync", "print_banner"),
    ("notion_sync", "process"),
    ("notion_sync", "run_legacy_streamlit_mode"),
    ("notion_sync", "schedule_sync"),
    ("notion_sync", "sync_to_notion_legacy"),
    ("notion_sync", "test_system"),
    ("observability.collector", "get_metrics"),
    ("observability.collector", "record_metric"),
    ("observability.collector", "start"),
    ("observability.collector", "stop"),
    ("observability_steering", "get_custom_metrics"),
    ("observability_steering", "get_custom_metrics"),
    ("observability_steering", "get_pattern_summary"),
    ("observability_steering", "get_system_overview"),
    ("observability_steering", "record_actor_snapshot"),
    ("observability_steering", "record_message_flow"),
    ("observability_steering", "record_system_event"),
    ("observability_steering", "register_pattern_detector"),
    ("observability_steering", "register_steering_policy"),
    ("observability_steering", "register_visualization"),
    ("observability_steering", "start"),
    ("observability_steering", "stop"),
    ("observatory", "get_decision_trail"),
    ("observatory", "get_system_status"),
    ("orchestration.energy_aware_execution_planner", "can_allocate"),
    ("orchestration.energy_aware_execution_planner", "cancel_task"),
    ("orchestration.energy_aware_execution_planner", "create_eaxp_instance"),
    ("orchestration.energy_aware_execution_planner", "get_energy_metrics"),
    ("orchestration.energy_aware_execution_planner", "get_task_status"),
    ("orchestration.energy_aware_execution_planner", "get_usable_energy"),
    ("orchestration.energy_aware_execution_planner", "optimize_energy_allocation"),
    ("orchestration.energy_aware_execution_planner", "submit_task"),
    ("p2p_communication", "from_bytes"),
    ("p2p_communication", "get_network_stats"),
    ("p2p_communication", "register_handler"),
    ("p2p_communication", "to_bytes"),
    ("p2p_communication", "to_dict"),
    ("p2p_fabric", "broadcast"),
    ("p2p_fabric", "connect"),
    ("performance.orchestrator", "check_consent"),
    ("performance.orchestrator", "get_overall_score"),
    ("performance.orchestrator", "log_activity"),
    ("performance.orchestrator", "verify_user_access"),
    ("personality.creative_expressions", "generate_haiku"),
    ("personality.creative_expressions", "load_inspiration_profile"),
    ("personality.creative_personality", "adaptive_learning_loop"),
    ("personality.creative_personality", "analyze_context"),
    ("personality.creative_personality", "contribute_gradients"),
    ("personality.creative_personality", "early_fusion"),
    ("personality.creative_personality", "ethical_reasoning"),
    ("personality.creative_personality", "federated_lifecycle"),
    ("personality.creative_personality", "generate_insights"),
    ("personality.creative_personality", "get_model"),
    ("personality.creative_personality", "get_model_output"),
    ("personality.creative_personality", "incorporate_feedback"),
    ("personality.creative_personality", "meta_draw"),
    ("personality.creative_personality", "meta_haiku"),
    ("personality.creative_personality", "optimize_learning_approach"),
    ("personality.creative_personality", "plan_protest"),
    ("personality.creative_personality", "synthesize_response"),
    ("personality.creative_personality", "unified_processing"),
    ("personality.creative_personality_clean", "adaptive_learning_loop"),
    ("personality.creative_personality_clean", "analyze_context"),
    ("personality.creative_personality_clean", "contribute_gradients"),
    ("personality.creative_personality_clean", "early_fusion"),
    ("personality.creative_personality_clean", "ethical_reasoning"),
    ("personality.creative_personality_clean", "federated_lifecycle"),
    ("personality.creative_personality_clean", "generate_insights"),
    ("personality.creative_personality_clean", "get_model"),
    ("personality.creative_personality_clean", "get_model_output"),
    ("personality.creative_personality_clean", "incorporate_feedback"),
    ("personality.creative_personality_clean", "meta_draw"),
    ("personality.creative_personality_clean", "meta_haiku"),
    ("personality.creative_personality_clean", "optimize_learning_approach"),
    ("personality.creative_personality_clean", "plan_protest"),
    ("personality.creative_personality_clean", "synthesize_response"),
    ("personality.creative_personality_clean", "unified_processing"),
    ("personality.personality", "get_etiquette_adjustments"),
    ("personality.personality", "get_interaction_style"),
    ("personality.personality", "get_personality_manager"),
    ("personality.personality", "get_personality_profile"),
    ("personality.personality", "get_status"),
    ("personality.personality", "set_cultural_preference"),
    ("personality.personality", "set_energy_level"),
    ("personality.personality", "set_mood"),
    ("personality.personality", "update_from_interaction"),
    ("personality.personality", "update_shyness"),
    ("plugin_registry", "get_plugin"),
    ("plugin_registry", "get_plugin_name"),
    ("plugin_registry", "get_plugin_type"),
    ("plugin_registry", "get_version"),
    ("plugin_registry", "list_plugins"),
    ("plugin_registry", "register_plugin"),
    ("practical_optimizations", "access"),
    ("practical_optimizations", "acquire"),
    ("practical_optimizations", "add"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "apply"),
    ("practical_optimizations", "borrowed"),
    ("practical_optimizations", "cleanup"),
    ("practical_optimizations", "clear_expired"),
    ("practical_optimizations", "create_resource_report"),
    ("practical_optimizations", "decorator"),
    ("practical_optimizations", "defer"),
    ("practical_optimizations", "deserialize_swarm_message"),
    ("practical_optimizations", "expensive_computation"),
    ("practical_optimizations", "fibonacci"),
    ("practical_optimizations", "flush"),
    ("practical_optimizations", "get"),
    ("practical_optimizations", "get"),
    ("practical_optimizations", "get_all_metrics"),
    ("practical_optimizations", "get_array"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_metrics"),
    ("practical_optimizations", "get_strategy"),
    ("practical_optimizations", "invalidate_dependents"),
    ("practical_optimizations", "is_computed"),
    ("practical_optimizations", "is_expired"),
    ("practical_optimizations", "lazy_property"),
    ("practical_optimizations", "memoize"),
    ("practical_optimizations", "optimize_computation"),
    ("practical_optimizations", "optimize_memory_access"),
    ("practical_optimizations", "optimize_swarm_communication"),
    ("practical_optimizations", "put"),
    ("practical_optimizations", "release"),
    ("practical_optimizations", "reset"),
    ("practical_optimizations", "score"),
    ("practical_optimizations", "share_computation"),
    ("practical_optimizations", "shutdown"),
    ("practical_optimizations", "store_array"),
    ("practical_optimizations", "wrapper"),
    ("practical_optimizations", "wrapper"),
    ("quantized_thought_cycles", "get_cycle_trace"),
    ("quantized_thought_cycles", "get_metrics"),
    ("quantum_identity_manager", "from_dict"),
    ("quantum_identity_manager", "get_identity_stats"),
    ("quantum_identity_manager", "get_quantum_identity_manager"),
    ("quantum_identity_manager", "lambda_tier"),
    ("quantum_identity_manager", "to_dict"),
    ("quorum_override", "request_access"),
    ("resource_efficiency", "collect_metrics"),
    ("resource_efficiency", "get_resource_efficiency_table"),
    ("resource_efficiency_analyzer", "analyze_efficiency"),
    ("resource_efficiency_analyzer", "export_metrics"),
    ("resource_efficiency_analyzer", "get_quick_stats"),
    ("resource_efficiency_analyzer", "start_monitoring"),
    ("resource_efficiency_analyzer", "stop_monitoring"),
    ("resource_efficiency_analyzer", "to_dict"),
    ("resource_efficiency_analyzer", "to_json"),
    ("resource_scheduler", "schedule_task"),
    ("router.llm_multiverse_router", "multiverse_route"),
    ("safety.adversarial_testing", "get_adversarial_tester"),
    ("safety.adversarial_testing", "get_vulnerability_report"),
    ("safety.adversarial_testing", "inject_systems"),
    ("safety.ai_safety_orchestrator", "get_ai_safety_orchestrator"),
    ("safety.constitutional_safety", "get_constitutional_safety"),
    ("safety.constitutional_safety", "get_safety_status"),
    ("safety.constitutional_safety", "update_constitution"),
    ("safety.multi_agent_consensus", "get_agent_performance_metrics"),
    ("safety.multi_agent_consensus", "get_consensus_statistics"),
    ("safety.multi_agent_consensus", "get_multi_agent_consensus"),
    ("safety.predictive_harm_prevention", "get_predictive_harm_prevention"),
    ("safety.safety_hub", "get_safety_hub"),
    ("safety.safety_hub", "get_safety_status"),
    ("safety.safety_hub", "get_service"),
    ("safety.safety_hub", "get_service_count"),
    ("safety.safety_hub", "get_service_list"),
    ("safety.safety_hub", "register_event_handler"),
    ("safety.safety_hub", "register_service"),
    ("service_discovery", "find_service"),
    ("service_discovery", "get_service_discovery"),
    ("service_discovery", "list_all_services"),
    ("service_discovery", "register_service_globally"),
    ("services.location.tracker", "add_update_callback"),
    ("services.location.tracker", "remove_update_callback"),
    ("services.personality.empathy", "display_visual_traits"),
    ("services.personality.empathy", "generate_empathic_response"),
    ("services.personality.empathy", "trait_bar"),
    ("services.personality.personas", "load_persona"),
    ("state_management", "apply_event"),
    ("state_management", "log_event"),
    ("state_management", "take_snapshot"),
    ("supervision", "calculate_restart_delay"),
    ("supervision", "can_proceed"),
    ("supervision", "get_affected_children"),
    ("supervision", "get_supervision_stats"),
    ("supervision", "record_failure"),
    ("supervision", "record_success"),
    ("supervision", "register_child"),
    ("supervision", "reset"),
    ("swarm", "add_symbolic_tag"),
    ("swarm", "check_colony_health"),
    ("swarm", "create_agent"),
    ("swarm", "create_colony"),
    ("swarm", "get_colony"),
    ("swarm", "get_symbolic_address"),
    ("swarm", "handle_failure"),
    ("swarm", "handle_heartbeat"),
    ("swarm", "populate_agents"),
    ("swarm", "receive"),
    ("swarm", "register_colony"),
    ("swarm", "update_colony_resource_state"),
    ("swarm", "update_resource_state"),
    ("swarm_identity_orchestrator", "get_orchestrator_statistics"),
    ("swarm_identity_orchestrator", "get_swarm_identity_orchestrator"),
    ("swarm_identity_orchestrator", "to_dict"),
    ("symbolic.collapse.vector_ops", "vector_collapse"),
    ("symbolic_arbitration", "add_event"),
    ("symbolic_arbitration", "get_history"),
    ("symbolic_arbitration", "resolve"),
    ("symbolic_boot", "get_bootstrap"),
    ("symbolic_boot", "get_status"),
    ("symbolic_boot", "load_system_modules"),
    ("symbolic_boot", "main"),
    ("symbolic_boot", "symbolic_boot"),
    ("symbolic_boot", "symbolic_boot"),
    ("symbolic_boot", "validate_workspace"),
    ("symbolic_bridge.integrator", "route_symbolic_event"),
    ("symbolic_bridge.token_map", "add_mapping"),
    ("symbolic_bridge.token_map", "get_mapping"),
    ("symbolic_bridge.token_map", "get_schema"),
    ("symbolic_contract", "get"),
    ("symbolic_contract", "register"),
    ("symbolic_contract", "to_json"),
    ("symbolic_contract", "validate_payload"),
    ("symbolic_contract", "validate_propagation"),
    ("symbolic_diagnostics.trace_repair_engine", "repair_trace"),
    ("symbolic_drift_analyzer", "calculate_semantic_entropy"),
    ("symbolic_drift_analyzer", "calculate_shannon_entropy"),
    ("symbolic_drift_analyzer", "calculate_tag_entropy"),
    ("symbolic_drift_analyzer", "calculate_tag_variance"),
    ("symbolic_drift_analyzer", "calculate_temporal_entropy"),
    ("symbolic_drift_analyzer", "check_ethical_drift"),
    ("symbolic_drift_analyzer", "detect_pattern_trend"),
    ("symbolic_drift_analyzer", "export_analysis_report"),
    ("symbolic_drift_analyzer", "generate_cli_summary"),
    ("symbolic_drift_analyzer", "print_alert"),
    ("symbolic_drift_analyzer", "print_alert"),
    ("symbolic_drift_analyzer", "register_alert_callback"),
    ("symbolic_drift_analyzer", "to_dict"),
    ("symbolic_drift_analyzer", "to_dict"),
    ("symbolic_drift_analyzer", "to_dict"),
    ("symbolism.archiver", "create_snapshot"),
    ("symbolism.archiver", "get_full_symbolic_state"),
    ("symbolism.archiver", "start"),
    ("symbolism.archiver", "stop"),
    ("symbolism.methylation_model", "adjust_lifespan"),
    ("targeted_api_fixes", "add_send_large_data"),
    ("targeted_api_fixes", "add_total_messages"),
    ("targeted_api_fixes", "apply_actor_ref_fixes"),
    ("targeted_api_fixes", "fix_communication_fabric"),
    ("targeted_api_fixes", "fix_import"),
    ("targeted_api_fixes", "fix_integrated_system"),
    ("targeted_api_fixes", "main"),
    ("targeted_api_fixes", "update_validation_script"),
    ("task_manager", "add_queue"),
    ("task_manager", "create_task"),
    ("task_manager", "get_system_status"),
    ("task_manager", "get_task_status"),
    ("task_manager", "register_agent"),
    ("tier_aware_colony_proxy", "create_identity_aware_proxy"),
    ("tier_aware_colony_proxy", "create_proxy"),
    ("tier_aware_colony_proxy", "get_colony_proxy_manager"),
    ("tier_aware_colony_proxy", "get_manager_statistics"),
    ("tier_aware_colony_proxy", "get_proxy"),
    ("tier_aware_colony_proxy", "get_proxy_statistics"),
    ("tier_aware_colony_proxy", "remove_proxy"),
    ("tier_aware_colony_proxy", "sync_wrapper"),
    ("tier_unification_adapter", "create_middleware"),
    ("tier_unification_adapter", "create_unified_decorator"),
    ("tier_unification_adapter", "decorator"),
    ("tier_unification_adapter", "emotional_tier_required"),
    ("tier_unification_adapter", "from_lambda_tier"),
    ("tier_unification_adapter", "from_lambda_tier"),
    ("tier_unification_adapter", "from_lambda_tier"),
    ("tier_unification_adapter", "get_emotional_access_matrix"),
    ("tier_unification_adapter", "get_unified_adapter"),
    ("tier_unification_adapter", "middleware"),
    ("tier_unification_adapter", "normalize_any_tier"),
    ("tier_unification_adapter", "oneiric_tier_required"),
    ("tier_unification_adapter", "to_lambda_tier"),
    ("tier_unification_adapter", "to_lambda_tier"),
    ("tier_unification_adapter", "to_lambda_tier"),
    ("tier_unification_adapter", "validate_access"),
    ("tier_unification_adapter", "validate_access"),
    ("tier_unification_adapter", "validate_access"),
    ("tiered_state_management", "aggregate"),
    ("tiered_state_management", "aggregate"),
    ("tiered_state_management", "aggregate"),
    ("tiered_state_management", "aggregate"),
    ("tiered_state_management", "can_handle"),
    ("tiered_state_management", "can_handle"),
    ("tiered_state_management", "can_handle"),
    ("tiered_state_management", "can_handle"),
    ("tiered_state_management", "get_statistics"),
    ("tiered_state_management", "register_aggregator"),
    ("tiered_state_management", "subscribe_to_replicated_state"),
    ("tiered_state_management", "to_dict"),
    ("tiered_state_management", "unsubscribe_from_replicated_state"),
    ("user_interface_manager.text_handler", "get_message"),
    ("user_interface_manager.text_handler", "send_message"),
    ("user_interface_manager.voice_handler", "listen"),
    ("user_interface_manager.voice_handler", "speak"),
    ("utils.dream_utils", "filter_by_collapse"),
    ("utils.dream_utils", "filter_by_rem_phase"),
    ("utils.dream_utils", "filter_by_resonance"),
    ("utils.dream_utils", "filter_dreams"),
    ("utils.dream_utils", "filter_dreams_by_tag"),
    ("utils.dream_utils", "get_latest_dream_timestamp"),
    ("utils.dream_utils", "load_dreams"),
    ("utils.symbolic_utils", "summarize_emotion_vector"),
    ("utils.symbolic_utils", "tier_label"),
    ("validation_script_fixes", "add_counter_increment"),
    ("validation_script_fixes", "add_message_count"),
    ("validation_script_fixes", "fix_efficient_communication"),
    ("validation_script_fixes", "fix_validation_script"),
    ("validation_script_fixes", "main"),
    ("validation_script_fixes", "replace_send_message"),
    ("verifold.verifold_unified", "decorator"),
    ("verifold.verifold_unified", "generate_verifold_hash"),
    ("verifold.verifold_unified", "generate_verifold_hash"),
    ("verifold.verifold_unified", "get_global_verifold_system"),
    ("verifold.verifold_unified", "get_system_metrics"),
    ("verifold.verifold_unified", "require_identity"),
    ("verifold.verifold_unified", "verify_verifold_hash"),
    ("verifold.verifold_unified", "verify_verifold_record"),
    ("verifold.verifold_unified", "wrapper"),
]


class CoreEntityActivator:
    """Activator for core system entities"""

    def __init__(self, hub_instance):
        self.hub = hub_instance
        self.activated_count = 0
        self.failed_count = 0

    def activate_all(self):
        """Activate all core entities"""
        logger.info(f"Starting core entity activation...")

        # Activate classes
        self._activate_classes()

        # Activate functions
        self._activate_functions()

        logger.info(f"{system_name} activation complete: {self.activated_count} activated, {self.failed_count} failed")

        return {
            "activated": self.activated_count,
            "failed": self.failed_count,
            "total": len(CORE_CLASS_ENTITIES) + len(CORE_FUNCTION_ENTITIES)
        }

    def _activate_classes(self):
        """Activate class entities"""
        for module_path, class_name in CORE_CLASS_ENTITIES:
            try:
                # Build full module path
                if module_path.startswith('.'):
                    full_path = f"{system_name}{module_path}"
                else:
                    full_path = f"{system_name}.{module_path}"

                # Import module
                module = __import__(full_path, fromlist=[class_name])
                cls = getattr(module, class_name)

                # Register with hub
                service_name = self._generate_service_name(class_name)

                # Try to instantiate if possible
                try:
                    instance = cls()
                    self.hub.register_service(service_name, instance)
                    logger.debug(f"Activated {class_name} as {service_name}")
                except:
                    # Register class if can't instantiate
                    self.hub.register_service(f"{service_name}_class", cls)
                    logger.debug(f"Registered {class_name} class")

                self.activated_count += 1

            except Exception as e:
                logger.warning(f"Failed to activate {class_name} from {module_path}: {e}")
                self.failed_count += 1

    def _activate_functions(self):
        """Activate function entities"""
        for module_path, func_name in CORE_FUNCTION_ENTITIES:
            try:
                # Build full module path
                if module_path.startswith('.'):
                    full_path = f"{system_name}{module_path}"
                else:
                    full_path = f"{system_name}.{module_path}"

                # Import module
                module = __import__(full_path, fromlist=[func_name])
                func = getattr(module, func_name)

                # Register function
                service_name = f"{func_name}_func"
                self.hub.register_service(service_name, func)
                logger.debug(f"Activated function {func_name}")

                self.activated_count += 1

            except Exception as e:
                logger.warning(f"Failed to activate function {func_name} from {module_path}: {e}")
                self.failed_count += 1

    def _generate_service_name(self, class_name: str) -> str:
        """Generate consistent service names"""
        import re
        # Convert CamelCase to snake_case
        name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', class_name)
        name = re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()

        # Remove common suffixes
        for suffix in ['_manager', '_service', '_system', '_engine', '_handler']:
            if name.endswith(suffix):
                name = name[:-len(suffix)]
                break

        return name


def get_core_activator(hub_instance):
    """Factory function to create activator"""
    return CoreEntityActivator(hub_instance)
