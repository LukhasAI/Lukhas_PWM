"""
Auto-generated entity activation for memory system
Generated: 2025-07-30T18:32:59.063859
Total Classes: 600
Total Functions: 1052
"""

import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

# Entity definitions
MEMORY_CLASS_ENTITIES = [
    ("adapters.colony_memory_adapter", "AdapterConfig"),
    ("adapters.colony_memory_adapter", "ColonyMemoryAdapter"),
    ("adapters.colony_memory_adapter", "ColonyMemoryStats"),
    ("adapters.creativity_adapter", "CreativityMemoryAdapter"),
    ("base_manager", "BaseMemoryManager"),
    ("basic", "InMemoryStore"),
    ("basic", "MemoryEntry"),
    ("basic", "MemoryManager"),
    ("basic", "MemoryStore"),
    ("colonies.base_memory_colony", "BaseMemoryColony"),
    ("colonies.base_memory_colony", "ColonyCapabilities"),
    ("colonies.base_memory_colony", "ColonyMetrics"),
    ("colonies.base_memory_colony", "ColonyRole"),
    ("colonies.base_memory_colony", "ColonyState"),
    ("colonies.base_memory_colony", "MemoryType"),
    ("colonies.episodic_memory_colony", "EpisodicMemoryColony"),
    ("colonies.episodic_memory_colony", "EpisodicMemoryRecord"),
    ("compression.symbolic_delta", "AdvancedSymbolicDeltaCompressor"),
    ("compression.symbolic_delta", "CompressionMetrics"),
    ("compression.symbolic_delta", "SymbolicMotif"),
    ("consolidation.consolidation_orchestrator", "ConsolidationMode"),
    ("consolidation.consolidation_orchestrator", "ConsolidationOrchestrator"),
    ("consolidation.consolidation_orchestrator", "ConsolidationSession"),
    ("consolidation.consolidation_orchestrator", "HippocampalMemoryInterface"),
    ("consolidation.consolidation_orchestrator", "NeocorticalMemoryInterface"),
    ("consolidation.consolidation_orchestrator", "SleepStage"),
    ("consolidation.ripple_generator", "EpisodicMemory"),
    ("consolidation.ripple_generator", "ReplayDirection"),
    ("consolidation.ripple_generator", "Ripple"),
    ("consolidation.ripple_generator", "RippleGenerator"),
    ("consolidation.ripple_generator", "RippleSequence"),
    ("consolidation.ripple_generator", "RippleType"),
    ("consolidation.sleep_cycle_manager", "CircadianPhase"),
    ("consolidation.sleep_cycle_manager", "SleepArchitecture"),
    ("consolidation.sleep_cycle_manager", "SleepCycle"),
    ("consolidation.sleep_cycle_manager", "SleepCycleManager"),
    ("consolidation.sleep_cycle_manager", "SleepPressure"),
    ("convergence.memory_trace_harmonizer", "MemoryTraceHarmonizer"),
    ("core", "ConsensusProtocol"),
    ("core", "ContinuousLearningEngine"),
    ("core", "DistributedMemoryEntry"),
    ("core", "DistributedMemoryFold"),
    ("core", "HybridMemoryFold"),
    ("core", "HybridMemoryItem"),
    ("core", "MemoryAttentionLayer"),
    ("core", "MessageType"),
    ("core", "NodeInfo"),
    ("core", "NodeState"),
    ("core", "OptimizedHybridMemoryFold"),
    ("core", "OptimizedVectorStorageLayer"),
    ("core", "VectorStorageLayer"),
    ("core.colony_memory_validator", "ColonyMemoryValidator"),
    ("core.colony_memory_validator", "ColonyValidationResponse"),
    ("core.colony_memory_validator", "ConsensusOutcome"),
    ("core.colony_memory_validator", "ConsensusResult"),
    ("core.colony_memory_validator", "ValidationMode"),
    ("core.colony_memory_validator", "ValidationRequest"),
    ("core.interfaces.episodic_interface", "EpisodicContext"),
    ("core.interfaces.episodic_interface", "EpisodicMemoryContent"),
    ("core.interfaces.episodic_interface", "EpisodicMemoryInterface"),
    ("core.interfaces.memory_interface", "BaseMemoryInterface"),
    ("core.interfaces.memory_interface", "MemoryInterfaceRegistry"),
    ("core.interfaces.memory_interface", "MemoryMetadata"),
    ("core.interfaces.memory_interface", "MemoryOperation"),
    ("core.interfaces.memory_interface", "MemoryResponse"),
    ("core.interfaces.memory_interface", "MemoryState"),
    ("core.interfaces.memory_interface", "MemoryType"),
    ("core.interfaces.memory_interface", "ValidationResult"),
    ("core.interfaces.semantic_interface", "ConceptNode"),
    ("core.interfaces.semantic_interface", "SemanticMemoryContent"),
    ("core.interfaces.semantic_interface", "SemanticMemoryInterface"),
    ("core.interfaces.semantic_interface", "SemanticRelation"),
    ("core.interfaces.semantic_interface", "SemanticRelationType"),
    ("core.unified_memory_orchestrator", "ConsolidationState"),
    ("core.unified_memory_orchestrator", "MemoryTrace"),
    ("core.unified_memory_orchestrator", "MemoryType"),
    ("core.unified_memory_orchestrator", "OscillationPattern"),
    ("core.unified_memory_orchestrator", "SleepStage"),
    ("core.unified_memory_orchestrator", "UnifiedMemoryOrchestrator"),
    ("dashboard", "CascadeBlockInfo"),
    ("dashboard", "DriftEventSummary"),
    ("dashboard", "MemoryHealthDashboard"),
    ("dashboard", "MemoryHealthMetrics"),
    ("distributed_state_manager", "DistributedStateManager"),
    ("distributed_state_manager", "MultiNodeStateManager"),
    ("distributed_state_manager", "StateEntry"),
    ("distributed_state_manager", "StateSnapshot"),
    ("distributed_state_manager", "StateType"),
    ("dream_memory_manager", "DreamMemoryManager"),
    ("drift_memory_manager", "DriftMemoryManager"),
    ("emotional", "EmotionVector"),
    ("emotional", "EmotionalMemory"),
    ("emotional", "SymbolicDriftTracker"),
    ("emotional_memory_manager", "EmotionalMemoryManager"),
    ("emotional_memory_manager_unified", "UnifiedEmotionalMemoryManager"),
    ("evolution", "EvolutionEvent"),
    ("evolution", "EvolutionType"),
    ("evolution", "MemoryEvolutionEngine"),
    ("fold_entropy_visualizer", "FoldEntropyVisualizer"),
    ("glyph_memory_integration", "CompressionType"),
    ("glyph_memory_integration", "DreamMemoryBridge"),
    ("glyph_memory_integration", "EmotionalFoldingEngine"),
    ("glyph_memory_integration", "FoldLineage"),
    ("glyph_memory_integration", "GlyphAffectCoupler"),
    ("glyph_memory_integration", "GlyphBinding"),
    ("glyph_memory_integration", "GlyphMemoryIndex"),
    ("glyph_memory_integration", "GlyphMemorySystem"),
    ("governance.ethical_drift_governor", "EthicalConcern"),
    ("governance.ethical_drift_governor", "EthicalDriftGovernor"),
    ("governance.ethical_drift_governor", "EthicalSeverity"),
    ("governance.ethical_drift_governor", "GovernanceRule"),
    ("governance.ethical_drift_governor", "InterventionType"),
    ("hippocampal.hippocampal_buffer", "EpisodicMemory"),
    ("hippocampal.hippocampal_buffer", "GridCell"),
    ("hippocampal.hippocampal_buffer", "HippocampalBuffer"),
    ("hippocampal.hippocampal_buffer", "HippocampalState"),
    ("hippocampal.hippocampal_buffer", "PersistenceMode"),
    ("hippocampal.hippocampal_buffer", "PlaceCell"),
    ("hippocampal.hippocampal_buffer", "PlaceField"),
    ("hippocampal.hippocampal_buffer", "TagScope"),
    ("hippocampal.pattern_separator", "PatternSeparator"),
    ("hippocampal.theta_oscillator", "OscillationPhase"),
    ("hippocampal.theta_oscillator", "ThetaOscillator"),
    ("hippocampal.theta_oscillator", "ThetaWave"),
    ("integrity.collapse_hash", "Checkpoint"),
    ("integrity.collapse_hash", "CollapseHash"),
    ("integrity.collapse_hash", "HashAlgorithm"),
    ("integrity.collapse_hash", "IntegrityStatus"),
    ("integrity.collapse_hash", "MerkleNode"),
    ("integrity.collapse_hash", "MerkleTree"),
    ("integrity.collapse_hash", "TagScope"),
    ("lightweight_concurrency", "ActorPool"),
    ("lightweight_concurrency", "ActorPriority"),
    ("lightweight_concurrency", "LightweightActor"),
    ("lightweight_concurrency", "MemoryEfficientScheduler"),
    ("loop_monitor", "LoopInfo"),
    ("loop_monitor", "SymbolicLoopMonitor"),
    ("manager", "EnhancedMemoryFold"),
    ("manager", "EnhancedMemoryManager"),
    ("manager", "EnhancedMemoryVisualizer"),
    ("manager", "MemoryFoldConfig"),
    ("manager", "QuantumOscillator"),
    ("manager", "VisualizationConfig"),
    ("memoria", "CoreMemoriaComponent"),
    ("memoria", "CoreMemoriaConfig"),
    ("memory_hub", "MemoryHub"),
    ("memory_optimization", "BloomFilter"),
    ("memory_optimization", "CompactList"),
    ("memory_optimization", "CompressedStorage"),
    ("memory_optimization", "CompressionStrategy"),
    ("memory_optimization", "MemoryObject"),
    ("memory_optimization", "MemoryOptimizer"),
    ("memory_optimization", "MemoryTier"),
    ("memory_optimization", "ObjectPool"),
    ("memory_optimization", "PooledWrapper"),
    ("memory_optimization", "TieredMemoryCache"),
    ("memory_systems.memoria-checkpoint", "Memoria"),
    ("neocortical.concept_hierarchy", "ConceptHierarchy"),
    ("neocortical.concept_hierarchy", "ConceptNode"),
    ("neocortical.neocortical_network", "CorticalColumn"),
    ("neocortical.neocortical_network", "CorticalLayer"),
    ("neocortical.neocortical_network", "LearningRate"),
    ("neocortical.neocortical_network", "NeocorticalNetwork"),
    ("neocortical.neocortical_network", "SemanticMemory"),
    ("neocortical.semantic_extractor", "SemanticExtractor"),
    ("node", "MemoryNode"),
    ("openai_memory_adapter", "MemoryOpenAIAdapter"),
    ("persistence.orthogonal_persistence", "MemoryCoil"),
    ("persistence.orthogonal_persistence", "OrthogonalPersistence"),
    ("persistence.orthogonal_persistence", "PersistenceJournal"),
    ("persistence.orthogonal_persistence", "PersistenceMode"),
    ("persistence.orthogonal_persistence", "PersistentMemory"),
    ("persistence.orthogonal_persistence", "StorageBackend"),
    ("persistence.orthogonal_persistence", "TagScope"),
    ("privacy_preserving_memory_vault", "AESGCMProvider"),
    ("privacy_preserving_memory_vault", "ComplianceStandard"),
    ("privacy_preserving_memory_vault", "DifferentialPrivacyProvider"),
    ("privacy_preserving_memory_vault", "EncryptedMemory"),
    ("privacy_preserving_memory_vault", "EncryptionProvider"),
    ("privacy_preserving_memory_vault", "EncryptionScheme"),
    ("privacy_preserving_memory_vault", "FernetProvider"),
    ("privacy_preserving_memory_vault", "PrivacyLevel"),
    ("privacy_preserving_memory_vault", "PrivacyPolicy"),
    ("privacy_preserving_memory_vault", "PrivacyPreservingMemoryVault"),
    ("privacy_preserving_memory_vault", "PrivacyTechnique"),
    ("protection.symbolic_quarantine_sanctum", "QuarantineEntry"),
    ("protection.symbolic_quarantine_sanctum", "QuarantineStatus"),
    ("protection.symbolic_quarantine_sanctum", "RepairProtocol"),
    ("protection.symbolic_quarantine_sanctum", "RepairProtocolType"),
    ("protection.symbolic_quarantine_sanctum", "RestoreViability"),
    ("protection.symbolic_quarantine_sanctum", "SanctumManifest"),
    ("protection.symbolic_quarantine_sanctum", "SymbolicQuarantineSanctum"),
    ("protection.symbolic_quarantine_sanctum", "ThreatLevel"),
    ("proteome.symbolic_proteome", "FoldingState"),
    ("proteome.symbolic_proteome", "MemoryCodon"),
    ("proteome.symbolic_proteome", "MemoryProtein"),
    ("proteome.symbolic_proteome", "MolecularChaperone"),
    ("proteome.symbolic_proteome", "PostTranslationalModification"),
    ("proteome.symbolic_proteome", "ProteinComplex"),
    ("proteome.symbolic_proteome", "ProteinType"),
    ("proteome.symbolic_proteome", "SymbolicProteome"),
    ("proteome.symbolic_proteome", "SymbolicTag"),
    ("proteome.symbolic_proteome", "TagScope"),
    ("quantum_manager", "EnhancedMemoryFold"),
    ("quantum_manager", "EnhancedMemoryManager"),
    ("quantum_manager", "EnhancedMemoryVisualizer"),
    ("quantum_manager", "MemoryFoldConfig"),
    ("quantum_manager", "QuantumOscillator"),
    ("quantum_manager", "VisualizationConfig"),
    ("quantum_memory_manager", "QuantumMemoryManager"),
    ("repair.advanced_trauma_repair", "HealingPhase"),
    ("repair.advanced_trauma_repair", "HelicalRepairMechanism"),
    ("repair.advanced_trauma_repair", "ImmuneResponse"),
    ("repair.advanced_trauma_repair", "IntegrityStatus"),
    ("repair.advanced_trauma_repair", "RepairScaffold"),
    ("repair.advanced_trauma_repair", "RepairStrategy"),
    ("repair.advanced_trauma_repair", "TagScope"),
    ("repair.advanced_trauma_repair", "TraumaRepairSystem"),
    ("repair.advanced_trauma_repair", "TraumaSignature"),
    ("repair.advanced_trauma_repair", "TraumaType"),
    ("repair.helix_repair_module", "HelixRepairModule"),
    ("replay.replay_buffer", "EpisodicMemory"),
    ("replay.replay_buffer", "Experience"),
    ("replay.replay_buffer", "ExperienceType"),
    ("replay.replay_buffer", "ReplayBatch"),
    ("replay.replay_buffer", "ReplayBuffer"),
    ("replay.replay_buffer", "ReplayMode"),
    ("replay.replay_buffer", "SemanticMemory"),
    ("resonance.resonant_memory_access", "ResonanceMode"),
    ("resonance.resonant_memory_access", "ResonanceSignature"),
    ("resonance.resonant_memory_access", "ResonantCluster"),
    ("resonance.resonant_memory_access", "ResonantMemoryAccess"),
    ("scaffold.atomic_memory_scaffold", "AtomicMemoryScaffold"),
    ("scaffold.atomic_memory_scaffold", "AtomicNucleus"),
    ("scaffold.atomic_memory_scaffold", "AtomicRule"),
    ("scaffold.atomic_memory_scaffold", "CoilState"),
    ("scaffold.atomic_memory_scaffold", "FlexibleCoilSystem"),
    ("scaffold.atomic_memory_scaffold", "MemoryCoil"),
    ("scaffold.atomic_memory_scaffold", "NucleusState"),
    ("scaffold.atomic_memory_scaffold", "TagPermission"),
    ("scaffold.atomic_memory_scaffold", "TagScope"),
    ("service", "IdentityClient"),
    ("service", "MemoryService"),
    ("services", "MemoryService"),
    ("structural_conscience", "ConscienceEntry"),
    ("structural_conscience", "ConscienceSeverity"),
    ("structural_conscience", "MoralDecisionType"),
    ("structural_conscience", "StructuralConscience"),
    ("symbol_aware_tiered_memory", "SymbolAwareTieredMemory"),
    ("systems.adaptive_memory_engine", "AdaptiveMemoryEngine"),
    ("systems.agent_memory", "AgentMemory"),
    ("systems.attention_memory_layer", "AttentionConfig"),
    ("systems.attention_memory_layer", "CrossModalAttention"),
    ("systems.attention_memory_layer", "HierarchicalAttention"),
    ("systems.attention_memory_layer", "MemoryAttentionOrchestrator"),
    ("systems.attention_memory_layer", "MultiHeadAttention"),
    ("systems.attention_memory_layer", "TemporalAttention"),
    ("systems.bio_symbolic_memory", "BioSymbolicMemory"),
    ("systems.bio_symbolic_memory", "EpisodicMemoryStore"),
    ("systems.bio_symbolic_memory", "MemoryConsolidationEngine"),
    ("systems.bio_symbolic_memory", "ProceduralSkillNetwork"),
    ("systems.bio_symbolic_memory", "SemanticKnowledgeGraph"),
    ("systems.bio_symbolic_memory", "WorkingMemoryBuffer"),
    ("systems.causal_identity_tracker", "CausalIdentityTracker"),
    ("systems.causal_identity_tracker", "CausalOriginData"),
    ("systems.causal_identity_tracker", "EventChainValidation"),
    ("systems.causal_identity_tracker", "IdentityAnchor"),
    ("systems.causal_identity_tracker", "IdentityLinkType"),
    ("systems.causal_memory_chains", "CausalChain"),
    ("systems.causal_memory_chains", "CausalEvidence"),
    ("systems.causal_memory_chains", "CausalGraphBuilder"),
    ("systems.causal_memory_chains", "CausalMemoryWrapper"),
    ("systems.causal_memory_chains", "CausalReasoningEngine"),
    ("systems.causal_memory_chains", "CausalRelation"),
    ("systems.causal_memory_chains", "CausalRelationType"),
    ("systems.causal_memory_chains", "CausalStrength"),
    ("systems.causal_memory_chains", "TemporalCausalAnalyzer"),
    ("systems.chatgpt_memory_integrator_legacy", "ChatGPTMemoryConfig"),
    ("systems.chatgpt_memory_integrator_legacy", "ChatGPTMemoryIntegrator"),
    ("systems.chatgpt_memory_integrator_legacy", "CognitiveAdapter"),
    ("systems.chatgpt_memory_integrator_legacy", "CognitiveUpdater"),
    ("systems.chatgpt_memory_integrator_legacy", "ConversationMessage"),
    ("systems.chatgpt_memory_integrator_legacy", "ConversationState"),
    ("systems.chatgpt_memory_integrator_legacy", "GPTClient"),
    ("systems.chatgpt_memory_integrator_legacy", "MemoryManager"),
    ("systems.chatgpt_memory_integrator_legacy", "MemoryPriority"),
    ("systems.chatgpt_memory_integrator_legacy", "MemoryType"),
    ("systems.chatgpt_memory_integrator_legacy", "MockGPTClient"),
    ("systems.collapse_buffer", "CollapseBuffer"),
    ("systems.collapse_trace", "CollapseTrace"),
    ("systems.colony_swarm_integration", "ColonyMemoryValidator"),
    ("systems.colony_swarm_integration", "ColonyProfile"),
    ("systems.colony_swarm_integration", "ColonyRole"),
    ("systems.colony_swarm_integration", "SwarmConsensusManager"),
    ("systems.core", "BaseConfig"),
    ("systems.core", "BaseHealth"),
    ("systems.core", "BaseModule"),
    ("systems.core", "MemoryConfig"),
    ("systems.core", "MemoryEntry"),
    ("systems.core", "MemoryHealth"),
    ("systems.core", "MemoryModule"),
    ("systems.core", "MemoryPriority"),
    ("systems.core", "MemoryStrand"),
    ("systems.core", "MemoryType"),
    ("systems.distributed_memory", "DistributedMemory"),
    ("systems.distributed_memory", "DistributedMemorySystem"),
    ("systems.distributed_memory", "MemoryType"),
    ("systems.distributed_memory_fold", "ConsensusProtocol"),
    ("systems.distributed_memory_fold", "DistributedMemoryEntry"),
    ("systems.distributed_memory_fold", "DistributedMemoryFold"),
    ("systems.distributed_memory_fold", "MessageType"),
    ("systems.distributed_memory_fold", "NodeInfo"),
    ("systems.distributed_memory_fold", "NodeState"),
    ("systems.dream_integrator", "DreamFragment"),
    ("systems.dream_integrator", "DreamIntegrator"),
    ("systems.dream_integrator", "DreamMemoryLinker"),
    ("systems.dream_integrator", "DreamSession"),
    ("systems.dream_integrator", "DreamState"),
    ("systems.dream_integrator", "DreamType"),
    ("systems.dream_memory_manager", "DreamMemoryManager"),
    ("systems.dream_trace_linker", "DreamTraceLink"),
    ("systems.dream_trace_linker", "DreamTraceLinker"),
    ("systems.dream_trace_linker", "DreamTraceType"),
    ("systems.dream_trace_linker", "EmotionalEcho"),
    ("systems.dream_trace_linker", "GlyphResonanceLevel"),
    ("systems.dream_trace_linker", "GlyphSignature"),
    ("systems.dream_trace_linker", "IdentitySignature"),
    ("systems.emotional_memory_manager", "EmotionalModulator"),
    ("systems.engine", "MemoryEngine"),
    ("systems.episodic_replay_buffer", "ConsolidationPhase"),
    ("systems.episodic_replay_buffer", "DreamStateReplay"),
    ("systems.episodic_replay_buffer", "EpisodicMemory"),
    ("systems.episodic_replay_buffer", "EpisodicReplayMemoryWrapper"),
    ("systems.episodic_replay_buffer", "PrioritizedReplayBuffer"),
    ("systems.episodic_replay_buffer", "ReplayStrategy"),
    ("systems.exponential_learning", "ExponentialLearningSystem"),
    ("systems.fold_lineage_tracker", "CausalLink"),
    ("systems.fold_lineage_tracker", "CausationType"),
    ("systems.fold_lineage_tracker", "FoldLineageNode"),
    ("systems.fold_lineage_tracker", "FoldLineageTracker"),
    ("systems.fold_lineage_tracker", "LineageChain"),
    ("systems.foldin", "LKFPackError"),
    ("systems.foldin", "LKFPackIntegrityError"),
    ("systems.foldin", "LKFPackVersionError"),
    ("systems.glyph_memory_bridge", "GlyphMemoryBridge"),
    ("systems.glyph_memory_bridge", "GlyphMemoryIndex"),
    ("systems.healix_memory_core", "HealixMemoryCore"),
    ("systems.healix_memory_core", "HealixVisualizer"),
    ("systems.healix_memory_core", "MemorySegment"),
    ("systems.helix_dna", "HelixMemory"),
    ("systems.helix_mapper", "HelixMapper"),
    ("systems.hierarchical_data_store", "CompressionLevel"),
    ("systems.hierarchical_data_store", "HierarchicalDataStore"),
    ("systems.hierarchical_data_store", "MemoryNode"),
    ("systems.hierarchical_data_store", "MemoryTier"),
    ("systems.hierarchical_data_store", "RetrievalContext"),
    ("systems.hybrid_memory_fold", "ContinuousLearningEngine"),
    ("systems.hybrid_memory_fold", "HybridMemoryFold"),
    ("systems.hybrid_memory_fold", "HybridMemoryItem"),
    ("systems.hybrid_memory_fold", "Linear"),
    ("systems.hybrid_memory_fold", "MemoryAttentionLayer"),
    ("systems.hybrid_memory_fold", "Module"),
    ("systems.hybrid_memory_fold", "MultiheadAttention"),
    ("systems.hybrid_memory_fold", "VectorStorageLayer"),
    ("systems.hybrid_memory_fold", "nn"),
    ("systems.identity_lineage_bridge", "IdentityLineageBridge"),
    ("systems.identity_lineage_bridge", "IdentityThreat"),
    ("systems.identity_lineage_bridge", "ProtectionAction"),
    ("systems.identity_lineage_bridge", "ProtectionLevel"),
    ("systems.identity_lineage_bridge", "ThreatType"),
    ("systems.in_memory_cache_storage_wrapper", "CacheStat"),
    ("systems.in_memory_cache_storage_wrapper", "CacheStorage"),
    ("systems.in_memory_cache_storage_wrapper", "CacheStorageContext"),
    ("systems.in_memory_cache_storage_wrapper", "CacheStorageKeyNotFoundError"),
    ("systems.in_memory_cache_storage_wrapper", "CacheUtils"),
    ("systems.in_memory_cache_storage_wrapper", "InMemoryCacheStorageWrapper"),
    ("systems.in_memory_log_exporter", "InMemoryLogExporter"),
    ("systems.in_memory_log_exporter", "LogData"),
    ("systems.in_memory_log_exporter", "LogExportResult"),
    ("systems.in_memory_log_exporter", "LogExporter"),
    ("systems.in_memory_span_exporter", "InMemorySpanExporter"),
    ("systems.in_memory_span_exporter", "ReadableSpan"),
    ("systems.in_memory_span_exporter", "SpanExportResult"),
    ("systems.in_memory_span_exporter", "SpanExporter"),
    ("systems.integration_adapters", "ConsensusValidationAdapter"),
    ("systems.integration_adapters", "DriftMetricsAdapter"),
    ("systems.integration_adapters", "MemorySafetyIntegration"),
    ("systems.integration_adapters", "RealityAnchorsAdapter"),
    ("systems.integration_adapters", "VerifoldRegistryAdapter"),
    ("systems.integration_example", "EnhancedMemoryIntegration"),
    ("systems.integration_example", "UnifiedMemoryInterface"),
    ("systems.lazy_loading_embeddings", "EmbeddingCacheEntry"),
    ("systems.lazy_loading_embeddings", "EmbeddingStorage"),
    ("systems.lazy_loading_embeddings", "LRUEmbeddingCache"),
    ("systems.lazy_loading_embeddings", "LazyEmbeddingLoader"),
    ("systems.lazy_loading_embeddings", "LazyMemoryItem"),
    ("systems.learn_to_learn", "MetaLearningSystem"),
    ("systems.memoria.dreams", "APIError"),
    ("systems.memoria.dreams", "OpenAI"),
    ("systems.memoria.dreams", "_MockChoiceContentDreamsDP"),
    ("systems.memoria.dreams", "_MockMessageDreamsDP"),
    ("systems.memoria.dreams", "_MockResponseDreamsDP"),
    ("systems.memoria.gpt_reflection", "APIError"),
    ("systems.memoria.gpt_reflection", "OpenAI"),
    ("systems.memoria.gpt_reflection", "_MockChatCompletions"),
    ("systems.memoria.gpt_reflection", "_MockChoiceContent"),
    ("systems.memoria.gpt_reflection", "_MockMessage"),
    ("systems.memoria.gpt_reflection", "_MockResponse"),
    ("systems.memory_advanced_manager", "AdvancedMemoryManager"),
    ("systems.memory_bases", "MemoryAccessPolicy"),
    ("systems.memory_bases", "MemoryIdentityIntegration"),
    ("systems.memory_bases", "MemoryManager"),
    ("systems.memory_checkpoint", "Memoria"),
    ("systems.memory_collapse_verifier", "MemoryCollapseVerifier"),
    ("systems.memory_collapse_verifier", "MemoryNode"),
    ("systems.memory_consolidation", "MemoryConsolidationEngine"),
    ("systems.memory_consolidator", "MemorySystemConsolidator"),
    ("systems.memory_drift_mirror", "MemoryDriftMirror"),
    ("systems.memory_drift_stabilizer", "MemoryDriftStabilizer"),
    ("systems.memory_drift_tracker", "MemoryDriftTracker"),
    ("systems.memory_evolution", "BioOscillatorAdapter"),
    ("systems.memory_evolution", "DocumentStructureAnalyzer"),
    ("systems.memory_evolution", "DocumentVersionControl"),
    ("systems.memory_evolution", "KnowledgeAdaptation"),
    ("systems.memory_evolution", "MemoryEvolution"),
    ("systems.memory_evolution", "UsageBasedLearning"),
    ("systems.memory_evolution", "VoiceSynthesisAdapter"),
    ("systems.memory_fold_system", "MemoryFoldSystem"),
    ("systems.memory_fold_system", "MemoryItem"),
    ("systems.memory_fold_system", "TagInfo"),
    ("systems.memory_helix", "VoiceMemoryHelix"),
    ("systems.memory_helix_golden", "HealixMapper"),
    ("systems.memory_helix_golden", "MemoryStrand"),
    ("systems.memory_helix_golden", "MutationStrategy"),
    ("systems.memory_helix_visualizer", "MemoryHelixVisualizer"),
    ("systems.memory_identity", "MemoryAccessPolicy"),
    ("systems.memory_identity", "MemoryIdentityIntegration"),
    ("systems.memory_introspection_engine", "MemoryIntrospectionEngine"),
    ("systems.memory_learning.memory_manager", "MemoryAccessError"),
    ("systems.memory_learning.memory_manager", "MemoryManager"),
    ("systems.memory_lock", "TraumaLockSystem"),
    ("systems.memory_loop_rebuilder", "MemoryLoopRebuilder"),
    ("systems.memory_media_file_storage", "MemoryFile"),
    ("systems.memory_media_file_storage", "MemoryMediaFileStorage"),
    ("systems.memory_node", "MemoryNode"),
    ("systems.memory_orchestrator", "AGIMemoryOrchestrator"),
    ("systems.memory_orchestrator", "MemoryOperationType"),
    ("systems.memory_orchestrator", "MemoryRequest"),
    ("systems.memory_orchestrator", "MemoryResponse"),
    ("systems.memory_orchestrator", "MemorySource"),
    ("systems.memory_planning", "AllocFromPoolLine"),
    ("systems.memory_planning", "Allocation"),
    ("systems.memory_planning", "AllocationPool"),
    ("systems.memory_planning", "AllocationPools"),
    ("systems.memory_planning", "AllocationTreeNode"),
    ("systems.memory_planning", "BufferGroup"),
    ("systems.memory_planning", "ClearCacheOnAllocateMixin"),
    ("systems.memory_planning", "DeallocFromPoolLine"),
    ("systems.memory_planning", "Empty"),
    ("systems.memory_planning", "LiveRange"),
    ("systems.memory_planning", "LiveRanges"),
    ("systems.memory_planning", "MemoryPlanner"),
    ("systems.memory_planning", "MemorySplitProtocol"),
    ("systems.memory_planning", "PoolMemoryPlanningLine"),
    ("systems.memory_planning", "SpatialSplit"),
    ("systems.memory_planning", "TemporalSplit"),
    ("systems.memory_processing", "EmotionalState"),
    ("systems.memory_processing", "MemoryNode"),
    ("systems.memory_processing", "MemoryProcessor"),
    ("systems.memory_profiler", "Action"),
    ("systems.memory_profiler", "Category"),
    ("systems.memory_profiler", "CategoryDict"),
    ("systems.memory_profiler", "CategoryElement"),
    ("systems.memory_profiler", "DataFlowEdge"),
    ("systems.memory_profiler", "DataFlowGraph"),
    ("systems.memory_profiler", "DataFlowNode"),
    ("systems.memory_profiler", "Key"),
    ("systems.memory_profiler", "MemoryProfile"),
    ("systems.memory_profiler", "MemoryProfileTimeline"),
    ("systems.memory_profiler", "OpTree"),
    ("systems.memory_profiler", "SchemaMatcher"),
    ("systems.memory_profiler", "SizeMap"),
    ("systems.memory_profiler", "TensorKey"),
    ("systems.memory_profiler", "_Storage"),
    ("systems.memory_research", "MemoryObjectItemReceiver"),
    ("systems.memory_research", "MemoryObjectReceiveStream"),
    ("systems.memory_research", "MemoryObjectSendStream"),
    ("systems.memory_research", "MemoryObjectStreamState"),
    ("systems.memory_research", "MemoryObjectStreamStatistics"),
    ("systems.memory_resonance_analyzer", "MemoryResonanceAnalyzer"),
    ("systems.memory_safety_features", "DriftMetrics"),
    ("systems.memory_safety_features", "MemorySafetySystem"),
    ("systems.memory_safety_features", "SafeMemoryFold"),
    ("systems.memory_safety_features", "VerifoldEntry"),
    ("systems.memory_session_storage", "MemorySessionStorage"),
    ("systems.memory_tracker", "MemoryProfileDispatchMode"),
    ("systems.memory_tracker", "MemoryTracker"),
    ("systems.memory_utils", "MemoryUtils"),
    ("systems.memory_validator", "MemoryValidator"),
    ("systems.memory_visualizer", "Enhanced3DVisualizer"),
    ("systems.memory_visualizer", "EnhancedMemoryVisualizer"),
    ("systems.memory_visualizer", "ProtonGradient"),
    ("systems.memory_visualizer", "VisualizationConfig"),
    ("systems.memory_viz", "Bytes"),
    ("systems.meta_learning_patterns", "LearningEvent"),
    ("systems.meta_learning_patterns", "LearningPhase"),
    ("systems.meta_learning_patterns", "LearningTrajectoryAnalyzer"),
    ("systems.meta_learning_patterns", "MetaLearningPattern"),
    ("systems.meta_learning_patterns", "MetaLearningPatternSystem"),
    ("systems.meta_learning_patterns", "PatternExtractor"),
    ("systems.meta_learning_patterns", "PatternType"),
    ("systems.module_integrations", "CreativityModuleIntegration"),
    ("systems.module_integrations", "LearningModuleIntegration"),
    ("systems.module_integrations", "MetaModuleIntegration"),
    ("systems.module_integrations", "VoiceModuleIntegration"),
    ("systems.multimodal_memory_support", "AudioProcessor"),
    ("systems.multimodal_memory_support", "ImageProcessor"),
    ("systems.multimodal_memory_support", "ModalityMetadata"),
    ("systems.multimodal_memory_support", "ModalityType"),
    ("systems.multimodal_memory_support", "MultiModalMemoryData"),
    ("systems.multimodal_memory_support", "MultiModalMemoryItem"),
    ("systems.multimodal_memory_support", "MultiModalMemoryProcessor"),
    ("systems.neurosymbolic_integration", "LogicalOperator"),
    ("systems.neurosymbolic_integration", "LogicalRule"),
    ("systems.neurosymbolic_integration", "NeuralSymbolicExtractor"),
    ("systems.neurosymbolic_integration", "NeurosymbolicIntegrationLayer"),
    ("systems.neurosymbolic_integration", "SymbolicEntity"),
    ("systems.neurosymbolic_integration", "SymbolicReasoner"),
    ("systems.neurosymbolic_integration", "SymbolicRelation"),
    ("systems.neurosymbolic_integration", "SymbolicRelationType"),
    ("systems.optimized_hybrid_memory_fold", "OptimizedHybridMemoryFold"),
    ("systems.optimized_hybrid_memory_fold", "OptimizedVectorStorageLayer"),
    ("systems.orchestrator", "MemoryOrchestrator"),
    ("systems.pin_memory_cache", "PinMemoryCache"),
    ("systems.processor", "MemoryProcessor"),
    ("systems.quantum_memory_architecture", "QuantumAssociativeMemoryBank"),
    ("systems.recall_handler", "RecallHandler"),
    ("systems.reflection_engine", "MemoryReflector"),
    ("systems.reflection_engine", "MetaCognitiveAnalyzer"),
    ("systems.reflection_engine", "PatternDetector"),
    ("systems.reflection_engine", "ReflectionDepth"),
    ("systems.reflection_engine", "ReflectionInsight"),
    ("systems.reflection_engine", "ReflectionSession"),
    ("systems.reflection_engine", "ReflectionType"),
    ("systems.replay_system", "MemoryReplayer"),
    ("systems.replay_system", "MemorySnapshot"),
    ("systems.replay_system", "ReplayDirection"),
    ("systems.replay_system", "ReplayMode"),
    ("systems.replay_system", "ReplayQuality"),
    ("systems.replay_system", "ReplaySequence"),
    ("systems.replay_system", "ReplaySession"),
    ("systems.replay_system", "TemporalIndex"),
    ("systems.resonance_memory_retrieval", "EmotionalState"),
    ("systems.resonance_memory_retrieval", "FrequencyFingerprint"),
    ("systems.resonance_memory_retrieval", "FrequencyGenerator"),
    ("systems.resonance_memory_retrieval", "ResonanceCalculator"),
    ("systems.resonance_memory_retrieval", "ResonanceGate"),
    ("systems.resonance_memory_retrieval", "ResonantMemory"),
    ("systems.simple_memory", "AgentMemory"),
    ("systems.simple_store", "MemoryConfig"),
    ("systems.simple_store", "MemoryEntry"),
    ("systems.simple_store", "MemoryPriority"),
    ("systems.simple_store", "MemoryType"),
    ("systems.simple_store", "UnifiedMemoryManager"),
    ("systems.symbolic_delta_compression", "CompressionRecord"),
    ("systems.symbolic_delta_compression", "CompressionState"),
    ("systems.symbolic_delta_compression", "LoopDetectionResult"),
    ("systems.symbolic_delta_compression", "SymbolicDeltaCompressionManager"),
    ("systems.symbolic_replay_engine", "ReplayEvent"),
    ("systems.symbolic_replay_engine", "SymbolicReplayEngine"),
    ("systems.symbolic_snapshot", "SymbolicSnapshot"),
    ("systems.tier_system", "AccessContext"),
    ("systems.tier_system", "AccessDecision"),
    ("systems.tier_system", "AccessType"),
    ("systems.tier_system", "DynamicTierSystem"),
    ("systems.tier_system", "PermissionScope"),
    ("systems.tier_system", "TierLevel"),
    ("systems.tier_system", "TierPermission"),
    ("systems.trace_injector", "MemoryTrace"),
    ("systems.trace_injector", "TraceInjector"),
    ("systems.trauma_lock", "TraumaLockSystem"),
    ("systems.voice_memory_bridge", "VoiceMemoryBridge"),
    ("tools.lambda_archive_inspector", "AnomalyType"),
    ("tools.lambda_archive_inspector", "ArchiveReport"),
    ("tools.lambda_archive_inspector", "LambdaArchiveInspector"),
    ("tools.lambda_archive_inspector", "MemoryEntry"),
    ("tools.lambda_archive_inspector", "MemoryEntryType"),
    ("tools.lambda_archive_inspector", "SymbolicAnomaly"),
    ("tools.lambda_vault_scan", "SymbolicVaultScanner"),
    ("tools.memory_drift_auditor", "MemoryDriftAuditor"),
    ("unified_memory_manager", "DriftMemoryManager"),
    ("unified_memory_manager", "EnhancedMemoryManager"),
    ("unified_memory_manager", "EnhancedMemoryManager"),
    ("unified_memory_manager", "QuantumMemoryManager"),
    ("visualizer", "Enhanced3DVisualizer"),
    ("visualizer", "EnhancedMemoryVisualizer"),
    ("visualizer", "ProtonGradient"),
    ("visualizer", "QuantumOscillator"),
    ("visualizer", "VisualizationConfig"),
    ("voice_memory_manager", "MemoryManager"),
]

MEMORY_FUNCTION_ENTITIES = [
    ("adapters.colony_memory_adapter", "get_adapter_stats"),
    ("adapters.colony_memory_adapter", "get_colony_stats"),
    ("adapters.colony_memory_adapter", "is_active"),
    ("adapters.colony_memory_adapter", "register_colony"),
    ("adapters.colony_memory_adapter", "register_interface_factory"),
    ("adapters.colony_memory_adapter", "register_memory_interface"),
    ("adapters.colony_memory_adapter", "success_rate"),
    ("adapters.colony_memory_adapter", "unregister_colony"),
    ("adapters.creativity_adapter", "get_emotional_modulator"),
    ("adapters.creativity_adapter", "get_emotional_modulator"),
    ("adapters.creativity_adapter", "retrieve_creative_context"),
    ("adapters.creativity_adapter", "store_creative_memory"),
    ("base_manager", "generate_memory_id"),
    ("basic", "access"),
    ("basic", "clear"),
    ("basic", "delete"),
    ("basic", "delete"),
    ("basic", "forget"),
    ("basic", "from_dict"),
    ("basic", "list_all"),
    ("basic", "list_all"),
    ("basic", "memory_stats"),
    ("basic", "recall"),
    ("basic", "recall"),
    ("basic", "recall_entry"),
    ("basic", "recent_memories"),
    ("basic", "remember"),
    ("basic", "remember"),
    ("basic", "retrieve"),
    ("basic", "retrieve"),
    ("basic", "search"),
    ("basic", "search"),
    ("basic", "search"),
    ("basic", "search_memories"),
    ("basic", "size"),
    ("basic", "store"),
    ("basic", "store"),
    ("basic", "to_dict"),
    ("colonies.base_memory_colony", "calculate_health_score"),
    ("colonies.base_memory_colony", "get_health_status"),
    ("colonies.base_memory_colony", "register_message_callback"),
    ("colonies.base_memory_colony", "register_peer_colony"),
    ("compression.symbolic_delta", "analyze_compression_patterns"),
    ("compression.symbolic_delta", "compress_memory_delta"),
    ("compression.symbolic_delta", "create_advanced_compressor"),
    ("compression.symbolic_delta", "extract_advanced_motifs"),
    ("compression.symbolic_delta", "importance_based_pruning"),
    ("consolidation.consolidation_orchestrator", "calculate_efficiency"),
    ("consolidation.consolidation_orchestrator", "get_metrics"),
    ("consolidation.consolidation_orchestrator", "get_session_metrics"),
    ("consolidation.consolidation_orchestrator", "register_consolidation_callback"),
    ("consolidation.consolidation_orchestrator", "register_stage_callback"),
    ("consolidation.ripple_generator", "add_ripple"),
    ("consolidation.ripple_generator", "calculate_power"),
    ("consolidation.ripple_generator", "get_metrics"),
    ("consolidation.ripple_generator", "get_recent_ripples"),
    ("consolidation.ripple_generator", "register_ripple_callback"),
    ("consolidation.ripple_generator", "register_sequence_callback"),
    ("consolidation.ripple_generator", "set_memory_pool"),
    ("consolidation.ripple_generator", "set_priority_memories"),
    ("consolidation.ripple_generator", "update_sleep_stage"),
    ("consolidation.sleep_cycle_manager", "calculate_duration"),
    ("consolidation.sleep_cycle_manager", "get_metrics"),
    ("consolidation.sleep_cycle_manager", "get_next_stage"),
    ("consolidation.sleep_cycle_manager", "get_stage_duration"),
    ("consolidation.sleep_cycle_manager", "get_stage_proportion"),
    ("consolidation.sleep_cycle_manager", "register_cycle_callback"),
    ("consolidation.sleep_cycle_manager", "register_stage_callback"),
    ("convergence.memory_trace_harmonizer", "harmonize_traces"),
    ("core", "add_vector"),
    ("core", "add_vector"),
    ("core", "compute_attention_scores"),
    ("core", "create_hybrid_memory_fold"),
    ("core", "create_optimized_hybrid_memory_fold"),
    ("core", "create_optimized_hybrid_memory_fold_512"),
    ("core", "create_optimized_hybrid_memory_fold_with_lazy_loading"),
    ("core", "decay_all_weights"),
    ("core", "endpoint"),
    ("core", "from_dict"),
    ("core", "get_enhanced_statistics"),
    ("core", "get_enhanced_statistics"),
    ("core", "get_memory_usage_stats"),
    ("core", "get_network_status"),
    ("core", "get_optimization_statistics"),
    ("core", "get_tag_importance"),
    ("core", "is_alive"),
    ("core", "search_similar"),
    ("core", "to_dict"),
    ("core", "trace_recursive"),
    ("core", "update_tag_importance"),
    ("core.colony_memory_validator", "get_colony_stats"),
    ("core.colony_memory_validator", "get_metrics"),
    ("core.colony_memory_validator", "register_colony"),
    ("core.colony_memory_validator", "register_consensus_callback"),
    ("core.colony_memory_validator", "unregister_colony"),
    ("core.interfaces.episodic_interface", "get_consolidation_candidates"),
    ("core.interfaces.episodic_interface", "get_metrics"),
    ("core.interfaces.memory_interface", "calculate_salience"),
    ("core.interfaces.memory_interface", "get_interface"),
    ("core.interfaces.memory_interface", "get_metrics"),
    ("core.interfaces.memory_interface", "list_available_types"),
    ("core.interfaces.memory_interface", "register_factory"),
    ("core.interfaces.memory_interface", "register_interface"),
    ("core.interfaces.memory_interface", "register_operation_callback"),
    ("core.interfaces.memory_interface", "update_access"),
    ("core.interfaces.semantic_interface", "activate"),
    ("core.interfaces.semantic_interface", "activate_concept_network"),
    ("core.interfaces.semantic_interface", "co_activate_with"),
    ("core.interfaces.semantic_interface", "get_concept_hierarchy"),
    ("core.interfaces.semantic_interface", "get_metrics"),
    ("core.interfaces.semantic_interface", "has_cycle"),
    ("core.interfaces.semantic_interface", "update_strength"),
    ("core.unified_memory_orchestrator", "get_memory_statistics"),
    ("core.unified_memory_orchestrator", "to_dict"),
    ("dashboard", "create_memory_dashboard"),
    ("dashboard", "get_dashboard_summary"),
    ("dashboard", "get_dream_integration_analytics"),
    ("dashboard", "get_memory_health_metrics"),
    ("dashboard", "list_active_cascade_blocks"),
    ("dashboard", "view_recent_drift_events"),
    ("distributed_state_manager", "access"),
    ("distributed_state_manager", "delete"),
    ("distributed_state_manager", "get"),
    ("distributed_state_manager", "get"),
    ("distributed_state_manager", "get_cluster_stats"),
    ("distributed_state_manager", "get_global_stats"),
    ("distributed_state_manager", "get_node"),
    ("distributed_state_manager", "get_shard_keys"),
    ("distributed_state_manager", "get_shard_stats"),
    ("distributed_state_manager", "is_expired"),
    ("distributed_state_manager", "set"),
    ("distributed_state_manager", "set"),
    ("distributed_state_manager", "shutdown"),
    ("distributed_state_manager", "shutdown_all"),
    ("dreamseed_example", "demonstrate_dreamseed_integration"),
    ("dreamseed_example", "demonstrate_safeguard_edge_cases"),
    ("emotional", "affect_delta"),
    ("emotional", "affect_vector_velocity"),
    ("emotional", "blend"),
    ("emotional", "check_identity_emotion_cascade"),
    ("emotional", "decorator"),
    ("emotional", "from_dict"),
    ("emotional", "get_associated_emotion"),
    ("emotional", "get_current_emotional_state"),
    ("emotional", "get_emotional_history"),
    ("emotional", "get_emotional_response"),
    ("emotional", "get_primary_emotion"),
    ("emotional", "is_fuse_active"),
    ("emotional", "lukhas_tier_required"),
    ("emotional", "process_experience"),
    ("emotional", "record_drift"),
    ("emotional", "register_drift"),
    ("emotional", "store_emotional_memory"),
    ("emotional", "symbolic_affect_trace"),
    ("emotional", "to_dict"),
    ("emotional", "track_drift"),
    ("evolution", "add_evolution_rule"),
    ("evolution", "evolve_memory"),
    ("evolution", "evolve_memory_globally"),
    ("evolution", "get_evolution_history"),
    ("evolution", "get_evolution_stats"),
    ("evolution", "get_global_evolution_engine"),
    ("fold_entropy_visualizer", "render_ascii_chart"),
    ("fold_entropy_visualizer", "render_mermaid_timeline"),
    ("glyph_memory_integration", "bind_glyph_to_fold"),
    ("glyph_memory_integration", "calculate_glyph_affinity"),
    ("glyph_memory_integration", "couple_glyph_with_memory"),
    ("glyph_memory_integration", "create_glyph_indexed_memory"),
    ("glyph_memory_integration", "create_glyph_memory"),
    ("glyph_memory_integration", "fold_memory_group"),
    ("glyph_memory_integration", "fold_recent_memories"),
    ("glyph_memory_integration", "get_dream_glyph_landscape"),
    ("glyph_memory_integration", "get_folds_by_glyph"),
    ("glyph_memory_integration", "get_glyph_memory_system"),
    ("glyph_memory_integration", "get_glyphs_by_fold"),
    ("glyph_memory_integration", "get_memory_glyph_statistics"),
    ("glyph_memory_integration", "identify_foldable_memories"),
    ("glyph_memory_integration", "perform_temporal_folding"),
    ("glyph_memory_integration", "process_dream_state"),
    ("glyph_memory_integration", "recall_by_glyph_pattern"),
    ("glyph_memory_integration", "recall_by_glyphs"),
    ("glyph_memory_integration", "retrieve_by_glyph_affect"),
    ("governance.ethical_drift_governor", "create_ethical_governor"),
    ("governance.ethical_drift_governor", "evaluate_memory_action"),
    ("governance.ethical_drift_governor", "generate_governance_report"),
    ("governance.ethical_drift_governor", "monitor_memory_drift"),
    ("governance.ethical_drift_governor", "register_with_fold_engine"),
    ("hippocampal.hippocampal_buffer", "activation"),
    ("hippocampal.hippocampal_buffer", "activation"),
    ("hippocampal.hippocampal_buffer", "calculate_salience"),
    ("hippocampal.hippocampal_buffer", "get_consolidation_candidates"),
    ("hippocampal.hippocampal_buffer", "get_metrics"),
    ("hippocampal.pattern_separator", "compute_separation_quality"),
    ("hippocampal.pattern_separator", "create_content_vector"),
    ("hippocampal.pattern_separator", "get_metrics"),
    ("hippocampal.pattern_separator", "reset_competitive_weights"),
    ("hippocampal.pattern_separator", "separate"),
    ("hippocampal.pattern_separator", "separate_batch"),
    ("hippocampal.theta_oscillator", "compute_phase_amplitude_coupling"),
    ("hippocampal.theta_oscillator", "get_current_state"),
    ("hippocampal.theta_oscillator", "get_gamma_phase"),
    ("hippocampal.theta_oscillator", "get_metrics"),
    ("hippocampal.theta_oscillator", "get_phase_coherence"),
    ("hippocampal.theta_oscillator", "get_traveling_wave_offset"),
    ("hippocampal.theta_oscillator", "is_encoding_optimal"),
    ("hippocampal.theta_oscillator", "is_retrieval_optimal"),
    ("hippocampal.theta_oscillator", "modulate_amplitude"),
    ("hippocampal.theta_oscillator", "modulate_frequency"),
    ("hippocampal.theta_oscillator", "phase_degrees"),
    ("hippocampal.theta_oscillator", "phase_lock"),
    ("hippocampal.theta_oscillator", "phase_unlock"),
    ("hippocampal.theta_oscillator", "register_phase_callback"),
    ("integrity.collapse_hash", "add_memory"),
    ("integrity.collapse_hash", "collect_leaves"),
    ("integrity.collapse_hash", "compute_hash"),
    ("integrity.collapse_hash", "generate_proof"),
    ("integrity.collapse_hash", "get_checkpoint_history"),
    ("integrity.collapse_hash", "get_root_hash"),
    ("integrity.collapse_hash", "is_leaf"),
    ("integrity.collapse_hash", "to_dict"),
    ("integrity.collapse_hash", "verify_memory"),
    ("integrity.collapse_hash", "verify_node"),
    ("integrity.collapse_hash", "verify_proof"),
    ("lightweight_concurrency", "get_stats"),
    ("lightweight_concurrency", "release_actor"),
    ("loop_monitor", "register_loop"),
    ("loop_monitor", "report_corruption"),
    ("loop_monitor", "report_entanglement"),
    ("manager", "get_active_folds"),
    ("memoria", "create_core_memoria_component"),
    ("memoria", "get_component_status"),
    ("memoria", "get_last_consciousness_phase"),
    ("memoria", "process_symbolic_trace"),
    ("memoria", "record_consciousness_phase"),
    ("memory_hub", "get_memory_hub"),
    ("memory_hub", "get_service"),
    ("memory_hub", "list_services"),
    ("memory_hub", "register_event_handler"),
    ("memory_hub", "register_service"),
    ("memory_optimization", "access_frequency"),
    ("memory_optimization", "acquire"),
    ("memory_optimization", "acquire_pooled_object"),
    ("memory_optimization", "add"),
    ("memory_optimization", "age_seconds"),
    ("memory_optimization", "append"),
    ("memory_optimization", "clear"),
    ("memory_optimization", "clear_empty_collections"),
    ("memory_optimization", "compress"),
    ("memory_optimization", "compress_large_objects"),
    ("memory_optimization", "contains"),
    ("memory_optimization", "create_memory_efficient_collection"),
    ("memory_optimization", "decompress"),
    ("memory_optimization", "force_gc"),
    ("memory_optimization", "get"),
    ("memory_optimization", "get_memory_stats"),
    ("memory_optimization", "get_stats"),
    ("memory_optimization", "get_stats"),
    ("memory_optimization", "memory_usage"),
    ("memory_optimization", "memory_usage"),
    ("memory_optimization", "put"),
    ("memory_optimization", "register_default_optimizations"),
    ("memory_optimization", "register_optimization"),
    ("memory_optimization", "release"),
    ("memory_optimization", "release_pooled_object"),
    ("memory_optimization", "retrieve"),
    ("memory_optimization", "select_strategy"),
    ("memory_optimization", "store"),
    ("memory_optimization", "update_access"),
    ("memory_systems.memoria-checkpoint", "store"),
    ("memory_systems.memoria-checkpoint", "trace"),
    ("neocortical.concept_hierarchy", "activate_concept"),
    ("neocortical.concept_hierarchy", "add_child"),
    ("neocortical.concept_hierarchy", "add_concept"),
    ("neocortical.concept_hierarchy", "calculate_similarity"),
    ("neocortical.concept_hierarchy", "decay_activations"),
    ("neocortical.concept_hierarchy", "extract_ontology"),
    ("neocortical.concept_hierarchy", "find_common_ancestor"),
    ("neocortical.concept_hierarchy", "find_concept"),
    ("neocortical.concept_hierarchy", "get_ancestors"),
    ("neocortical.concept_hierarchy", "get_descendants"),
    ("neocortical.concept_hierarchy", "get_metrics"),
    ("neocortical.concept_hierarchy", "get_path"),
    ("neocortical.concept_hierarchy", "get_semantic_distance"),
    ("neocortical.concept_hierarchy", "get_siblings"),
    ("neocortical.concept_hierarchy", "prune_unused"),
    ("neocortical.concept_hierarchy", "remove_child"),
    ("neocortical.neocortical_network", "calculate_activation_energy"),
    ("neocortical.neocortical_network", "get_concept_hierarchy"),
    ("neocortical.neocortical_network", "get_metrics"),
    ("neocortical.neocortical_network", "initialize_layers"),
    ("neocortical.semantic_extractor", "extract_concept"),
    ("neocortical.semantic_extractor", "extract_semantics"),
    ("neocortical.semantic_extractor", "find_semantic_similarity"),
    ("neocortical.semantic_extractor", "get_metrics"),
    ("node", "retrieve"),
    ("node", "retrieve_recent"),
    ("node", "semantic_search"),
    ("node", "store"),
    ("persistence.orthogonal_persistence", "from_bytes"),
    ("persistence.orthogonal_persistence", "get_metrics"),
    ("persistence.orthogonal_persistence", "to_bytes"),
    ("privacy_preserving_memory_vault", "add_gaussian_noise"),
    ("privacy_preserving_memory_vault", "add_noise"),
    ("privacy_preserving_memory_vault", "get_compliance_status"),
    ("privacy_preserving_memory_vault", "get_vault_status"),
    ("privacy_preserving_memory_vault", "is_expired"),
    ("privacy_preserving_memory_vault", "privatize_histogram"),
    ("privacy_preserving_memory_vault", "should_be_deleted"),
    ("privacy_preserving_memory_vault", "update_access_tracking"),
    ("protection.symbolic_quarantine_sanctum", "add_audit_entry"),
    ("protection.symbolic_quarantine_sanctum", "cool_structure"),
    ("protection.symbolic_quarantine_sanctum", "cool_value"),
    ("protection.symbolic_quarantine_sanctum", "get_quarantine_status"),
    ("protection.symbolic_quarantine_sanctum", "get_sanctum_report"),
    ("protection.symbolic_quarantine_sanctum", "main"),
    ("protection.symbolic_quarantine_sanctum", "register_archive_callback"),
    ("protection.symbolic_quarantine_sanctum", "register_governor_callback"),
    ("protection.symbolic_quarantine_sanctum", "register_sentinel_callback"),
    ("protection.symbolic_quarantine_sanctum", "to_dict"),
    ("protection.symbolic_quarantine_sanctum", "to_dict"),
    ("protection.symbolic_quarantine_sanctum", "to_dict"),
    ("proteome.symbolic_proteome", "calculate_stability"),
    ("proteome.symbolic_proteome", "calculate_synergy"),
    ("proteome.symbolic_proteome", "from_memory_fragment"),
    ("proteome.symbolic_proteome", "get_metrics"),
    ("proteome.symbolic_proteome", "is_functional"),
    ("quantum_manager", "get_active_folds"),
    ("repair.advanced_trauma_repair", "add_checkpoint"),
    ("repair.advanced_trauma_repair", "calculate_priority"),
    ("repair.advanced_trauma_repair", "get_healing_report"),
    ("repair.advanced_trauma_repair", "matches_threat"),
    ("replay.replay_buffer", "add_episodic_memory"),
    ("replay.replay_buffer", "add_experience"),
    ("replay.replay_buffer", "add_semantic_memory"),
    ("replay.replay_buffer", "calculate_metrics"),
    ("replay.replay_buffer", "calculate_sampling_weight"),
    ("replay.replay_buffer", "find_similar_experiences"),
    ("replay.replay_buffer", "get_experience"),
    ("replay.replay_buffer", "get_metrics"),
    ("replay.replay_buffer", "sample_batch"),
    ("replay.replay_buffer", "update_priorities"),
    ("replay.replay_buffer", "update_priority"),
    ("resonance.resonant_memory_access", "calculate_resonance_with"),
    ("resonance.resonant_memory_access", "get_resonance_stats"),
    ("resonance.resonant_memory_access", "register_memory"),
    ("resonance.resonant_memory_access", "update_coherence"),
    ("scaffold.atomic_memory_scaffold", "add_rule"),
    ("scaffold.atomic_memory_scaffold", "assess_trauma_impact"),
    ("scaffold.atomic_memory_scaffold", "calculate_stability"),
    ("scaffold.atomic_memory_scaffold", "create_coil"),
    ("scaffold.atomic_memory_scaffold", "get_metrics"),
    ("scaffold.atomic_memory_scaffold", "seal_nucleus"),
    ("scaffold.atomic_memory_scaffold", "verify_integrity"),
    ("service", "check_consent"),
    ("service", "configure_cross_module_storage"),
    ("service", "configure_storage"),
    ("service", "delete_memory"),
    ("service", "delete_memory"),
    ("service", "get_memory_stats"),
    ("service", "log_activity"),
    ("service", "retrieve_memory"),
    ("service", "retrieve_memory"),
    ("service", "search_memory"),
    ("service", "search_memory"),
    ("service", "store_memory"),
    ("service", "store_memory"),
    ("service", "verify_user_access"),
    ("services", "create_memory_service"),
    ("structural_conscience", "create_structural_conscience"),
    ("structural_conscience", "from_dict"),
    ("structural_conscience", "get_conscience_summary"),
    ("structural_conscience", "get_moral_history"),
    ("structural_conscience", "to_dict"),
    ("symbol_aware_tiered_memory", "get_dream_flagged"),
    ("symbol_aware_tiered_memory", "retrieve"),
    ("symbol_aware_tiered_memory", "store"),
    ("systems.adaptive_memory_engine", "decorator"),
    ("systems.adaptive_memory_engine", "lukhas_tier_required"),
    ("systems.adaptive_memory_engine", "recall_signature"),
    ("systems.agent_memory", "decorator"),
    ("systems.agent_memory", "get_shared_memory"),
    ("systems.agent_memory", "lukhas_tier_required"),
    ("systems.attention_memory_layer", "compute_memory_relevance"),
    ("systems.attention_memory_layer", "compute_temporal_bias"),
    ("systems.attention_memory_layer", "create_attention_orchestrator"),
    ("systems.attention_memory_layer", "create_hierarchical_representations"),
    ("systems.attention_memory_layer", "explain_attention"),
    ("systems.attention_memory_layer", "forward"),
    ("systems.attention_memory_layer", "forward"),
    ("systems.attention_memory_layer", "forward"),
    ("systems.attention_memory_layer", "forward"),
    ("systems.bio_symbolic_memory", "decorator"),
    ("systems.bio_symbolic_memory", "lukhas_tier_required"),
    ("systems.causal_identity_tracker", "create_causal_origin"),
    ("systems.causal_identity_tracker", "create_identity_anchor"),
    ("systems.causal_identity_tracker", "create_recovery_link"),
    ("systems.causal_identity_tracker", "detect_trauma_markers"),
    ("systems.causal_identity_tracker", "get_identity_stability_report"),
    ("systems.causal_identity_tracker", "validate_event_chain"),
    ("systems.causal_memory_chains", "add_causal_relation"),
    ("systems.causal_memory_chains", "add_evidence"),
    ("systems.causal_memory_chains", "add_memory"),
    ("systems.causal_memory_chains", "analyze_causal_structure"),
    ("systems.causal_memory_chains", "find_causal_paths"),
    ("systems.causal_memory_chains", "get_causal_ancestors"),
    ("systems.causal_memory_chains", "get_causal_descendants"),
    ("systems.causal_memory_chains", "get_causal_reasoning_statistics"),
    ("systems.causal_memory_chains", "get_chain_length"),
    ("systems.causal_memory_chains", "get_total_delay"),
    ("systems.causal_memory_chains", "identify_causal_chains"),
    ("systems.causal_memory_chains", "to_dict"),
    ("systems.causal_memory_chains", "to_dict"),
    ("systems.causal_memory_chains", "to_dict"),
    ("systems.chatgpt_memory_integrator_legacy", "decorator"),
    ("systems.chatgpt_memory_integrator_legacy", "lukhas_tier_required"),
    ("systems.chatgpt_memory_integrator_legacy", "set_cognitive_adapter"),
    ("systems.chatgpt_memory_integrator_legacy", "set_memory_manager"),
    ("systems.collapse_buffer", "buffer_event"),
    ("systems.collapse_trace", "get_collapse_history"),
    ("systems.collapse_trace", "get_global_tracer"),
    ("systems.collapse_trace", "log_collapse"),
    ("systems.colony_swarm_integration", "get_swarm_status"),
    ("systems.colony_swarm_integration", "register_colony"),
    ("systems.core", "decorator"),
    ("systems.core", "decorator"),
    ("systems.core", "decorator"),
    ("systems.core", "ethical_validation"),
    ("systems.core", "lukhas_tier_required"),
    ("systems.core", "symbolic_vocabulary"),
    ("systems.distributed_memory", "to_dict"),
    ("systems.distributed_memory_fold", "endpoint"),
    ("systems.distributed_memory_fold", "from_dict"),
    ("systems.distributed_memory_fold", "get_network_status"),
    ("systems.distributed_memory_fold", "is_alive"),
    ("systems.distributed_memory_fold", "to_dict"),
    ("systems.dream_integrator", "add_dream_fragment"),
    ("systems.dream_integrator", "add_fragment"),
    ("systems.dream_integrator", "create_memory_link"),
    ("systems.dream_integrator", "find_dreams_by_memory"),
    ("systems.dream_integrator", "find_related_dreams"),
    ("systems.dream_integrator", "get_dream_insights"),
    ("systems.dream_integrator", "get_dream_integrator"),
    ("systems.dream_integrator", "get_dream_status"),
    ("systems.dream_integrator", "get_linked_memories"),
    ("systems.dream_integrator", "get_system_status"),
    ("systems.dream_integrator", "initiate_dream"),
    ("systems.dream_integrator", "initiate_dream_formation"),
    ("systems.dream_integrator", "integrate_dream"),
    ("systems.dream_integrator", "process_dream_integration"),
    ("systems.dream_memory_manager", "decorator"),
    ("systems.dream_memory_manager", "lukhas_tier_required"),
    ("systems.dream_trace_linker", "create_dream_trace_linker"),
    ("systems.dream_trace_linker", "get_session_analytics"),
    ("systems.dream_trace_linker", "link_dream_to_memory"),
    ("systems.emotional_memory_manager", "get_emotional_context"),
    ("systems.emotional_memory_manager", "integrate_memory_emotion"),
    ("systems.emotional_memory_manager", "modulate_emotion"),
    ("systems.emotional_memory_manager", "update_emotional_state"),
    ("systems.engine", "create_memory_component"),
    ("systems.engine", "get_status"),
    ("systems.episodic_replay_buffer", "add_experience"),
    ("systems.episodic_replay_buffer", "consolidate_memories"),
    ("systems.episodic_replay_buffer", "get_episode_trajectory"),
    ("systems.episodic_replay_buffer", "get_replay_statistics"),
    ("systems.episodic_replay_buffer", "get_replay_statistics"),
    ("systems.episodic_replay_buffer", "mark_replayed"),
    ("systems.episodic_replay_buffer", "sample_batch"),
    ("systems.episodic_replay_buffer", "to_dict"),
    ("systems.episodic_replay_buffer", "update_priorities"),
    ("systems.episodic_replay_buffer", "update_priority"),
    ("systems.exponential_learning", "decorator"),
    ("systems.exponential_learning", "get_status"),
    ("systems.exponential_learning", "incorporate_experience"),
    ("systems.exponential_learning", "lukhas_tier_required"),
    ("systems.fold_lineage_tracker", "add_lineage_entry"),
    ("systems.fold_lineage_tracker", "analyze_fold_lineage"),
    ("systems.fold_lineage_tracker", "create_enhanced_lineage_tracker"),
    ("systems.fold_lineage_tracker", "create_lineage_tracker"),
    ("systems.fold_lineage_tracker", "generate_lineage_graph"),
    ("systems.fold_lineage_tracker", "get_causal_insights"),
    ("systems.fold_lineage_tracker", "get_lineage"),
    ("systems.fold_lineage_tracker", "track_causation"),
    ("systems.fold_lineage_tracker", "track_fold_state"),
    ("systems.foldin", "create_memory_importer"),
    ("systems.foldin", "import_folds"),
    ("systems.foldin", "import_folds_safe"),
    ("systems.foldin", "import_from_stream"),
    ("systems.foldin", "importer"),
    ("systems.foldin", "verify_lkf_pack"),
    ("systems.foldin_simple", "verify_lkf_pack"),
    ("systems.foldout", "create_fold_bundle"),
    ("systems.foldout", "create_memory_exporter"),
    ("systems.foldout", "export_folds"),
    ("systems.foldout", "export_folds_streaming"),
    ("systems.foldout", "exporter"),
    ("systems.foldout_simple", "create_fold_bundle"),
    ("systems.glyph_memory_bridge", "assess_memory_drift"),
    ("systems.glyph_memory_bridge", "create_drift_anchor"),
    ("systems.glyph_memory_bridge", "create_glyph_indexed_memory"),
    ("systems.glyph_memory_bridge", "create_retrieval_filter"),
    ("systems.glyph_memory_bridge", "get_memory_by_causal_link"),
    ("systems.glyph_memory_bridge", "get_statistics"),
    ("systems.glyph_memory_bridge", "recall_by_glyph"),
    ("systems.glyph_memory_bridge", "traverse_causal_chain"),
    ("systems.healix_memory_core", "anonymize_sequence"),
    ("systems.healix_memory_core", "calculate_drift_score"),
    ("systems.healix_memory_core", "create_memory_landscape_plot_data"),
    ("systems.healix_memory_core", "decode_from_dna"),
    ("systems.healix_memory_core", "decorator"),
    ("systems.healix_memory_core", "encode_to_dna"),
    ("systems.healix_memory_core", "generate_collapse_hash"),
    ("systems.healix_memory_core", "generate_compliance_report"),
    ("systems.healix_memory_core", "get_baseline_state"),
    ("systems.healix_memory_core", "get_memory_stats"),
    ("systems.healix_memory_core", "lukhas_tier_required"),
    ("systems.helix_dna", "decorator"),
    ("systems.helix_dna", "lukhas_tier_required"),
    ("systems.helix_mapper", "decorator"),
    ("systems.helix_mapper", "lukhas_tier_required"),
    ("systems.hierarchical_data_store", "build_tree"),
    ("systems.hierarchical_data_store", "get_status"),
    ("systems.hybrid_memory_fold", "add_vector"),
    ("systems.hybrid_memory_fold", "compute_attention_scores"),
    ("systems.hybrid_memory_fold", "create_hybrid_memory_fold"),
    ("systems.hybrid_memory_fold", "decay_all_weights"),
    ("systems.hybrid_memory_fold", "get_enhanced_statistics"),
    ("systems.hybrid_memory_fold", "get_tag_importance"),
    ("systems.hybrid_memory_fold", "search_similar"),
    ("systems.hybrid_memory_fold", "trace_recursive"),
    ("systems.hybrid_memory_fold", "update_tag_importance"),
    ("systems.identity_lineage_bridge", "create_recovery_protocol"),
    ("systems.identity_lineage_bridge", "detect_collapse_trauma_threats"),
    ("systems.identity_lineage_bridge", "get_identity_protection_status"),
    ("systems.identity_lineage_bridge", "protect_identity_anchor"),
    ("systems.identity_lineage_bridge", "validate_memory_operation"),
    ("systems.in_memory_cache_storage_wrapper", "clear"),
    ("systems.in_memory_cache_storage_wrapper", "close"),
    ("systems.in_memory_cache_storage_wrapper", "delete"),
    ("systems.in_memory_cache_storage_wrapper", "get"),
    ("systems.in_memory_cache_storage_wrapper", "get_logger"),
    ("systems.in_memory_cache_storage_wrapper", "get_stats"),
    ("systems.in_memory_cache_storage_wrapper", "max_entries"),
    ("systems.in_memory_cache_storage_wrapper", "set"),
    ("systems.in_memory_cache_storage_wrapper", "ttl_seconds"),
    ("systems.in_memory_log_exporter", "clear"),
    ("systems.in_memory_log_exporter", "export"),
    ("systems.in_memory_log_exporter", "export"),
    ("systems.in_memory_log_exporter", "get_finished_logs"),
    ("systems.in_memory_log_exporter", "shutdown"),
    ("systems.in_memory_log_exporter", "shutdown"),
    ("systems.in_memory_span_exporter", "clear"),
    ("systems.in_memory_span_exporter", "export"),
    ("systems.in_memory_span_exporter", "export"),
    ("systems.in_memory_span_exporter", "force_flush"),
    ("systems.in_memory_span_exporter", "force_flush"),
    ("systems.in_memory_span_exporter", "get_finished_spans"),
    ("systems.in_memory_span_exporter", "shutdown"),
    ("systems.in_memory_span_exporter", "shutdown"),
    ("systems.integration_adapters", "add_module_anchor"),
    ("systems.integration_adapters", "get_consensus_report"),
    ("systems.integration_adapters", "get_integration_status"),
    ("systems.integration_adapters", "get_module_anchors"),
    ("systems.integration_adapters", "get_module_drift_report"),
    ("systems.integration_adapters", "get_module_trust_report"),
    ("systems.integration_adapters", "register_calibration_callback"),
    ("systems.integration_adapters", "register_colony_validator"),
    ("systems.integration_adapters", "register_trust_callback"),
    ("systems.integration_adapters", "register_validation_callback"),
    ("systems.integration_adapters", "set_module_drift_threshold"),
    ("systems.integration_adapters", "set_swarm_threshold"),
    ("systems.integrity_collapser", "collapse_score"),
    ("systems.integrity_collapser", "recover_overflow"),
    ("systems.integrity_collapser", "snapshot_entropy"),
    ("systems.lazy_loading_embeddings", "clear"),
    ("systems.lazy_loading_embeddings", "create_lazy_embedding_system"),
    ("systems.lazy_loading_embeddings", "delete_embedding"),
    ("systems.lazy_loading_embeddings", "exists"),
    ("systems.lazy_loading_embeddings", "exists"),
    ("systems.lazy_loading_embeddings", "get"),
    ("systems.lazy_loading_embeddings", "get_content"),
    ("systems.lazy_loading_embeddings", "get_metadata"),
    ("systems.lazy_loading_embeddings", "get_performance_stats"),
    ("systems.lazy_loading_embeddings", "get_stats"),
    ("systems.lazy_loading_embeddings", "get_storage_stats"),
    ("systems.lazy_loading_embeddings", "get_tags"),
    ("systems.lazy_loading_embeddings", "load_embedding"),
    ("systems.lazy_loading_embeddings", "load_embeddings_batch"),
    ("systems.lazy_loading_embeddings", "memory_usage"),
    ("systems.lazy_loading_embeddings", "memory_usage_kb"),
    ("systems.lazy_loading_embeddings", "optimize_cache"),
    ("systems.lazy_loading_embeddings", "put"),
    ("systems.lazy_loading_embeddings", "put_batch"),
    ("systems.lazy_loading_embeddings", "store_embedding"),
    ("systems.learn_to_learn", "decorator"),
    ("systems.learn_to_learn", "generate_learning_report"),
    ("systems.learn_to_learn", "incorporate_feedback"),
    ("systems.learn_to_learn", "lukhas_tier_required"),
    ("systems.learn_to_learn", "optimize_learning_approach"),
    ("systems.memoria", "get_full_memory_log"),
    ("systems.memoria", "log_memory"),
    ("systems.memoria.dream_cron", "main_dream_scheduler_loop"),
    ("systems.memoria.dream_cron", "run_lukhas_symbolic_dream_script"),
    ("systems.memoria.dreams", "compute_survival_score"),
    ("systems.memoria.dreams", "extract_visual_prompts_from_dream"),
    ("systems.memoria.dreams", "generate_dream_narrative"),
    ("systems.memoria.dreams", "load_all_entries"),
    ("systems.memoria.dreams", "load_traits"),
    ("systems.memoria.dreams", "save_dream_to_log"),
    ("systems.memoria.gpt_reflection", "create"),
    ("systems.memoria.gpt_reflection", "generate_gpt_reflection"),
    ("systems.memoria.reflector", "load_dream_memories_from_log"),
    ("systems.memoria.reflector", "reflect_on_dream_memories"),
    ("systems.memoria.reflector", "run_dream_reflection_cycle"),
    ("systems.memoria.replayer", "display_visual_traits"),
    ("systems.memoria.replayer", "load_recent_dream_logs"),
    ("systems.memoria.replayer", "load_traits"),
    ("systems.memoria.replayer", "log_symbolic_ai_memory_event"),
    ("systems.memoria.replayer", "replay_dreams_with_current_state"),
    ("systems.memoria.replayer", "speak"),
    ("systems.memoria_codex", "get_full_memory_log"),
    ("systems.memoria_codex", "log_memory"),
    ("systems.memoria_system", "log_memory"),
    ("systems.memory_advanced_manager", "decorator"),
    ("systems.memory_advanced_manager", "get_memory_statistics"),
    ("systems.memory_advanced_manager", "lukhas_tier_required"),
    ("systems.memory_bases", "can_access"),
    ("systems.memory_bases", "delete"),
    ("systems.memory_bases", "get_identity_memories"),
    ("systems.memory_bases", "link_memory_to_identity"),
    ("systems.memory_bases", "log_access"),
    ("systems.memory_bases", "retrieve"),
    ("systems.memory_bases", "store"),
    ("systems.memory_checkpoint", "store"),
    ("systems.memory_checkpoint", "trace"),
    ("systems.memory_collapse_verifier", "audit_collapse_operation"),
    ("systems.memory_collapse_verifier", "check_emotional_consistency"),
    ("systems.memory_collapse_verifier", "validate_semantic_preservation"),
    ("systems.memory_collapse_verifier", "verify_collapse_integrity"),
    ("systems.memory_consolidation", "compute_decay_rate"),
    ("systems.memory_consolidator", "consolidate"),
    ("systems.memory_consolidator", "main"),
    ("systems.memory_drift_mirror", "analyze_drift"),
    ("systems.memory_drift_stabilizer", "analyze_drift_log"),
    ("systems.memory_drift_stabilizer", "stabilize_memory"),
    ("systems.memory_drift_tracker", "track_drift"),
    ("systems.memory_encryptor", "encrypt_memory"),
    ("systems.memory_encryptor", "encrypt_user_file"),
    ("systems.memory_evolution", "adapt_knowledge"),
    ("systems.memory_evolution", "adapt_oscillations"),
    ("systems.memory_evolution", "analyze_structure"),
    ("systems.memory_evolution", "clear_cache"),
    ("systems.memory_evolution", "create_document"),
    ("systems.memory_evolution", "get_document_effectiveness"),
    ("systems.memory_evolution", "get_document_effectiveness"),
    ("systems.memory_evolution", "get_document_history"),
    ("systems.memory_evolution", "get_last_synthesis"),
    ("systems.memory_evolution", "get_last_voice_synthesis"),
    ("systems.memory_evolution", "get_recommendations"),
    ("systems.memory_evolution", "get_related_documents"),
    ("systems.memory_evolution", "get_usage_patterns"),
    ("systems.memory_evolution", "identify_patterns"),
    ("systems.memory_evolution", "learn_from_usage"),
    ("systems.memory_evolution", "maintenance_cycle"),
    ("systems.memory_evolution", "record_interaction"),
    ("systems.memory_evolution", "record_interaction"),
    ("systems.memory_evolution", "run_multi_cycle_recursion"),
    ("systems.memory_evolution", "synthesize"),
    ("systems.memory_evolution", "synthesize_content"),
    ("systems.memory_evolution", "track_changes"),
    ("systems.memory_evolution", "update_document"),
    ("systems.memory_evolution", "update_document_relationships"),
    ("systems.memory_evolution", "update_relationships"),
    ("systems.memory_evolution", "update_user_preferences"),
    ("systems.memory_fold_system", "create_memory_fold_system"),
    ("systems.memory_fold_system", "get_statistics"),
    ("systems.memory_fold_system", "json_serial"),
    ("systems.memory_fold_system", "verify_lkf_pack"),
    ("systems.memory_format", "convert_conv2d_weight_memory_format"),
    ("systems.memory_format", "convert_conv3d_weight_memory_format"),
    ("systems.memory_helix", "generate_accent_report"),
    ("systems.memory_helix", "get_curious_word"),
    ("systems.memory_helix", "get_due_practice_words"),
    ("systems.memory_helix", "get_pronunciation_for_word"),
    ("systems.memory_helix", "save_memory"),
    ("systems.memory_helix_visualizer", "create_interactive_visualization"),
    ("systems.memory_helix_visualizer", "get_authorized_memories"),
    ("systems.memory_helix_visualizer", "get_memory_coordinates"),
    ("systems.memory_helix_visualizer", "update_memory_links"),
    ("systems.memory_helix_visualizer", "visualize_memory_helix"),
    ("systems.memory_identity", "cleanup"),
    ("systems.memory_identity", "decrypt_memory_content"),
    ("systems.memory_identity", "encrypt_memory_content"),
    ("systems.memory_identity", "get_permission_status"),
    ("systems.memory_identity", "get_shared_memories"),
    ("systems.memory_identity", "notify_memory_removal"),
    ("systems.memory_identity", "register_memory"),
    ("systems.memory_identity", "revoke_memory_access"),
    ("systems.memory_identity", "share_memory"),
    ("systems.memory_identity", "verify_access_permission"),
    ("systems.memory_introspection_engine", "compute_fold_metrics"),
    ("systems.memory_introspection_engine", "introspect"),
    ("systems.memory_introspection_engine", "snapshot_memory_state"),
    ("systems.memory_learning.memory_manager", "batch_forget"),
    ("systems.memory_learning.memory_manager", "extract_user_insights"),
    ("systems.memory_learning.memory_manager", "forget"),
    ("systems.memory_learning.memory_manager", "get_interaction_history"),
    ("systems.memory_learning.memory_manager", "process_dream_cycle"),
    ("systems.memory_learning.memory_manager", "retrieve"),
    ("systems.memory_learning.memory_manager", "store"),
    ("systems.memory_lock", "decrypt_memory"),
    ("systems.memory_lock", "encrypt_memory"),
    ("systems.memory_lock", "get_access_stats"),
    ("systems.memory_loop_rebuilder", "rebuild_loop"),
    ("systems.memory_media_file_storage", "content_size"),
    ("systems.memory_media_file_storage", "delete_file"),
    ("systems.memory_media_file_storage", "get_extension_for_mimetype"),
    ("systems.memory_media_file_storage", "get_file"),
    ("systems.memory_media_file_storage", "get_stats"),
    ("systems.memory_media_file_storage", "get_url"),
    ("systems.memory_media_file_storage", "load_and_get_id"),
    ("systems.memory_node", "add_to_working_memory"),
    ("systems.memory_node", "clear_working_memory"),
    ("systems.memory_node", "forget"),
    ("systems.memory_node", "get_memory_stats"),
    ("systems.memory_node", "process_message"),
    ("systems.memory_node", "retrieve"),
    ("systems.memory_node", "retrieve_by_type"),
    ("systems.memory_node", "retrieve_recent"),
    ("systems.memory_node", "semantic_search"),
    ("systems.memory_node", "store"),
    ("systems.memory_node", "update_memory"),
    ("systems.memory_orchestrator", "get_status"),
    ("systems.memory_planning", "allocate"),
    ("systems.memory_planning", "allocate"),
    ("systems.memory_planning", "allocate"),
    ("systems.memory_planning", "allocate"),
    ("systems.memory_planning", "allocate_at_end"),
    ("systems.memory_planning", "allocate_groups"),
    ("systems.memory_planning", "allocate_output"),
    ("systems.memory_planning", "begin"),
    ("systems.memory_planning", "clear_cache"),
    ("systems.memory_planning", "codegen"),
    ("systems.memory_planning", "codegen"),
    ("systems.memory_planning", "codegen_alloc_from_pool"),
    ("systems.memory_planning", "codegen_create"),
    ("systems.memory_planning", "codegen_destroy"),
    ("systems.memory_planning", "compute_buffer_groups"),
    ("systems.memory_planning", "compute_live_ranges"),
    ("systems.memory_planning", "contains"),
    ("systems.memory_planning", "convert_to_pool_lines"),
    ("systems.memory_planning", "create"),
    ("systems.memory_planning", "device"),
    ("systems.memory_planning", "drop_removed_buffers"),
    ("systems.memory_planning", "end"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "finalize"),
    ("systems.memory_planning", "get_live_ranges"),
    ("systems.memory_planning", "get_live_ranges"),
    ("systems.memory_planning", "get_live_ranges"),
    ("systems.memory_planning", "get_live_ranges"),
    ("systems.memory_planning", "get_live_ranges"),
    ("systems.memory_planning", "get_pools"),
    ("systems.memory_planning", "get_size_hint"),
    ("systems.memory_planning", "get_size_hint"),
    ("systems.memory_planning", "get_size_hint"),
    ("systems.memory_planning", "get_size_hint"),
    ("systems.memory_planning", "get_size_hint"),
    ("systems.memory_planning", "get_symbolic_size"),
    ("systems.memory_planning", "get_symbolic_size"),
    ("systems.memory_planning", "get_symbolic_size"),
    ("systems.memory_planning", "get_symbolic_size"),
    ("systems.memory_planning", "get_symbolic_size"),
    ("systems.memory_planning", "is_empty"),
    ("systems.memory_planning", "is_empty"),
    ("systems.memory_planning", "is_empty"),
    ("systems.memory_planning", "join"),
    ("systems.memory_planning", "make_allocation"),
    ("systems.memory_planning", "mark_allocated"),
    ("systems.memory_planning", "mark_first_last_usage"),
    ("systems.memory_planning", "node"),
    ("systems.memory_planning", "overlaps"),
    ("systems.memory_planning", "plan"),
    ("systems.memory_planning", "pprint"),
    ("systems.memory_planning", "sym_nbytes"),
    ("systems.memory_planning", "update_usage"),
    ("systems.memory_processing", "calculate_relevance"),
    ("systems.memory_processing", "cluster_memories"),
    ("systems.memory_processing", "export_memories"),
    ("systems.memory_processing", "get_emotional_summary"),
    ("systems.memory_processing", "get_memory_timeline"),
    ("systems.memory_processing", "get_relevant_memories"),
    ("systems.memory_processing", "import_memories"),
    ("systems.memory_processing", "store_interaction"),
    ("systems.memory_processing", "update_memory_references"),
    ("systems.memory_profiler", "bump"),
    ("systems.memory_profiler", "children_fn"),
    ("systems.memory_profiler", "delete"),
    ("systems.memory_profiler", "dfs"),
    ("systems.memory_profiler", "export_memory_timeline"),
    ("systems.memory_profiler", "export_memory_timeline_html"),
    ("systems.memory_profiler", "export_memory_timeline_raw"),
    ("systems.memory_profiler", "extract_gradients"),
    ("systems.memory_profiler", "extract_parameters"),
    ("systems.memory_profiler", "flow_nodes"),
    ("systems.memory_profiler", "from_allocation"),
    ("systems.memory_profiler", "from_tensor"),
    ("systems.memory_profiler", "get"),
    ("systems.memory_profiler", "get_category_index"),
    ("systems.memory_profiler", "get_scopes"),
    ("systems.memory_profiler", "inputs"),
    ("systems.memory_profiler", "inputs_are_mutable"),
    ("systems.memory_profiler", "intermediates"),
    ("systems.memory_profiler", "is_allocation"),
    ("systems.memory_profiler", "is_deletion"),
    ("systems.memory_profiler", "leaf_events"),
    ("systems.memory_profiler", "leaf_op"),
    ("systems.memory_profiler", "lookup"),
    ("systems.memory_profiler", "lookup_schemas"),
    ("systems.memory_profiler", "match_schemas"),
    ("systems.memory_profiler", "matches"),
    ("systems.memory_profiler", "outputs"),
    ("systems.memory_profiler", "set_by_id"),
    ("systems.memory_profiler", "set_by_key"),
    ("systems.memory_profiler", "set_by_version"),
    ("systems.memory_profiler", "setdefault_by_version"),
    ("systems.memory_profiler", "sorted_nodes"),
    ("systems.memory_profiler", "start_time"),
    ("systems.memory_profiler", "timeline"),
    ("systems.memory_profiler", "update"),
    ("systems.memory_profiler", "validate"),
    ("systems.memory_recall", "decrypt_user_file"),
    ("systems.memory_recall", "generate_sid"),
    ("systems.memory_recall", "recall_memories"),
    ("systems.memory_reflector", "recall_last_interaction"),
    ("systems.memory_reflector", "store_interaction"),
    ("systems.memory_research", "clone"),
    ("systems.memory_research", "clone"),
    ("systems.memory_research", "close"),
    ("systems.memory_research", "close"),
    ("systems.memory_research", "receive_nowait"),
    ("systems.memory_research", "send_nowait"),
    ("systems.memory_research", "statistics"),
    ("systems.memory_research", "statistics"),
    ("systems.memory_research", "statistics"),
    ("systems.memory_resonance_analyzer", "analyze_resonance"),
    ("systems.memory_safety_features", "add_reality_anchor"),
    ("systems.memory_safety_features", "calculate_drift"),
    ("systems.memory_safety_features", "calibrate_drift_metrics"),
    ("systems.memory_safety_features", "compute_collapse_hash"),
    ("systems.memory_safety_features", "get_safety_report"),
    ("systems.memory_safety_features", "track_drift"),
    ("systems.memory_seeder", "generate_seed_memory"),
    ("systems.memory_seeder", "seed_memory_store"),
    ("systems.memory_session_storage", "delete"),
    ("systems.memory_session_storage", "get"),
    ("systems.memory_session_storage", "list"),
    ("systems.memory_session_storage", "save"),
    ("systems.memory_tracker", "load"),
    ("systems.memory_tracker", "save_stats"),
    ("systems.memory_tracker", "show_traces"),
    ("systems.memory_tracker", "start_monitor"),
    ("systems.memory_tracker", "stop"),
    ("systems.memory_tracker", "summary"),
    ("systems.memory_utils", "calculate_memory_size"),
    ("systems.memory_utils", "decrypt_memory_data"),
    ("systems.memory_utils", "encrypt_memory_data"),
    ("systems.memory_utils", "format_memory_timestamp"),
    ("systems.memory_utils", "generate_memory_id"),
    ("systems.memory_utils", "validate_memory_access"),
    ("systems.memory_validator", "create_memory_component"),
    ("systems.memory_validator", "get_status"),
    ("systems.memory_visualizer", "launch_3d_viewer"),
    ("systems.memory_visualizer", "setup_visualization"),
    ("systems.memory_viz", "allocate"),
    ("systems.memory_viz", "calc_active"),
    ("systems.memory_viz", "compare"),
    ("systems.memory_viz", "find_segment"),
    ("systems.memory_viz", "format"),
    ("systems.memory_viz", "format_flamegraph"),
    ("systems.memory_viz", "frames_fragment"),
    ("systems.memory_viz", "free"),
    ("systems.memory_viz", "memory"),
    ("systems.memory_viz", "profile_plot"),
    ("systems.memory_viz", "segment_plot"),
    ("systems.memory_viz", "segments"),
    ("systems.memory_viz", "segsum"),
    ("systems.memory_viz", "to_device"),
    ("systems.memory_viz", "trace"),
    ("systems.memory_viz", "trace_plot"),
    ("systems.meta_learning_patterns", "analyze_trajectory"),
    ("systems.meta_learning_patterns", "from_dict"),
    ("systems.meta_learning_patterns", "get_pattern_statistics"),
    ("systems.meta_learning_patterns", "to_dict"),
    ("systems.meta_learning_patterns", "to_feature_vector"),
    ("systems.multimodal_memory_support", "extract_audio_features"),
    ("systems.multimodal_memory_support", "extract_image_features"),
    ("systems.multimodal_memory_support", "get_content"),
    ("systems.multimodal_memory_support", "get_embedding"),
    ("systems.multimodal_memory_support", "get_metadata"),
    ("systems.multimodal_memory_support", "get_modality_data"),
    ("systems.multimodal_memory_support", "get_modality_embedding"),
    ("systems.multimodal_memory_support", "get_tags"),
    ("systems.multimodal_memory_support", "memory_usage"),
    ("systems.multimodal_memory_support", "memory_usage_kb"),
    ("systems.multimodal_memory_support", "process_audio"),
    ("systems.multimodal_memory_support", "process_image"),
    ("systems.neurosymbolic_integration", "applies_to"),
    ("systems.neurosymbolic_integration", "from_dict"),
    ("systems.neurosymbolic_integration", "from_dict"),
    ("systems.neurosymbolic_integration", "from_dict"),
    ("systems.neurosymbolic_integration", "get_knowledge_statistics"),
    ("systems.neurosymbolic_integration", "to_dict"),
    ("systems.neurosymbolic_integration", "to_dict"),
    ("systems.neurosymbolic_integration", "to_dict"),
    ("systems.neurosymbolic_integration", "to_triple"),
    ("systems.optimized_hybrid_memory_fold", "add_vector"),
    ("systems.optimized_hybrid_memory_fold", "create_optimized_hybrid_memory_fold"),
    ("systems.optimized_hybrid_memory_fold", "create_optimized_hybrid_memory_fold_512"),
    ("systems.optimized_hybrid_memory_fold", "create_optimized_hybrid_memory_fold_with_lazy_loading"),
    ("systems.optimized_hybrid_memory_fold", "get_enhanced_statistics"),
    ("systems.optimized_hybrid_memory_fold", "get_memory_usage_stats"),
    ("systems.optimized_hybrid_memory_fold", "get_optimization_statistics"),
    ("systems.orchestrator", "create_memory_component"),
    ("systems.orchestrator", "get_status"),
    ("systems.pin_memory", "do_one_step"),
    ("systems.pin_memory", "pin_memory"),
    ("systems.pin_memory_cache", "get"),
    ("systems.pin_memory_cache", "remove"),
    ("systems.processor", "create_memory_component"),
    ("systems.processor", "get_status"),
    ("systems.recall_handler", "recall_memory"),
    ("systems.reflection_engine", "analyze_thinking_patterns"),
    ("systems.reflection_engine", "detect_patterns"),
    ("systems.reflection_engine", "find_contradictory_insights"),
    ("systems.reflection_engine", "generate_self_assessment"),
    ("systems.reflection_engine", "get_insights_by_type"),
    ("systems.reflection_engine", "get_memory_reflector"),
    ("systems.reflection_engine", "get_reflector_status"),
    ("systems.reflection_engine", "get_self_assessment"),
    ("systems.reflection_engine", "get_system_status"),
    ("systems.reflection_engine", "initiate_reflection"),
    ("systems.reflection_engine", "initiate_reflection_session"),
    ("systems.reflection_engine", "process_reflection"),
    ("systems.reflection_engine", "process_reflection_analysis"),
    ("systems.reflection_engine", "recommend_memory_optimization"),
    ("systems.replay_system", "add_memory_timestamp"),
    ("systems.replay_system", "close_session"),
    ("systems.replay_system", "create_associative_sequence"),
    ("systems.replay_system", "create_replay_sequence"),
    ("systems.replay_system", "create_sequence"),
    ("systems.replay_system", "find_memories_by_content"),
    ("systems.replay_system", "find_temporal_neighbors"),
    ("systems.replay_system", "get_causal_sequence"),
    ("systems.replay_system", "get_memories_in_range"),
    ("systems.replay_system", "get_memory_replayer"),
    ("systems.replay_system", "get_next"),
    ("systems.replay_system", "get_next_memory"),
    ("systems.replay_system", "get_replayer_status"),
    ("systems.replay_system", "get_session_status"),
    ("systems.replay_system", "get_system_status"),
    ("systems.replay_system", "seek_to_position"),
    ("systems.replay_system", "start_replay_session"),
    ("systems.replay_system", "start_session"),
    ("systems.resonance_memory_retrieval", "access_boost"),
    ("systems.resonance_memory_retrieval", "analyze_resonance_patterns"),
    ("systems.resonance_memory_retrieval", "cosine_similarity"),
    ("systems.resonance_memory_retrieval", "demo_resonance_system"),
    ("systems.resonance_memory_retrieval", "emotional_state_to_frequency"),
    ("systems.resonance_memory_retrieval", "frequency_resonance"),
    ("systems.resonance_memory_retrieval", "generate_frequency_fingerprint"),
    ("systems.resonance_memory_retrieval", "get_memory_by_id"),
    ("systems.resonance_memory_retrieval", "get_system_health"),
    ("systems.resonance_memory_retrieval", "retrieve_by_resonance"),
    ("systems.resonance_memory_retrieval", "store_memory_with_frequency"),
    ("systems.resonance_memory_retrieval", "temporal_decay"),
    ("systems.resonance_memory_retrieval", "update_memory_resonance"),
    ("systems.simple_memory", "append_to_shared_memory"),
    ("systems.simple_memory", "read_all_memory"),
    ("systems.simple_memory", "read_from_shared_memory"),
    ("systems.simple_store", "from_dict"),
    ("systems.simple_store", "to_dict"),
    ("systems.symbolic_delta_compression", "compress_fold"),
    ("systems.symbolic_delta_compression", "create_compression_manager"),
    ("systems.symbolic_delta_compression", "emergency_decompress"),
    ("systems.symbolic_delta_compression", "get_compression_analytics"),
    ("systems.symbolic_replay_engine", "load"),
    ("systems.symbolic_replay_engine", "record_event"),
    ("systems.symbolic_replay_engine", "replay"),
    ("systems.symbolic_replay_engine", "save"),
    ("systems.symbolic_snapshot", "create_snapshot"),
    ("systems.tier_system", "check_access"),
    ("systems.tier_system", "check_access_level"),
    ("systems.tier_system", "create_tier_system"),
    ("systems.tier_system", "decorator"),
    ("systems.tier_system", "elevate_session"),
    ("systems.tier_system", "lukhas_tier_required"),
    ("systems.tier_system", "symbolic_access_test"),
    ("systems.tier_system", "wrapper"),
    ("systems.trace_injector", "clear_traces"),
    ("systems.trace_injector", "end_memory_operation"),
    ("systems.trace_injector", "end_memory_trace"),
    ("systems.trace_injector", "export_trace_data"),
    ("systems.trace_injector", "export_traces"),
    ("systems.trace_injector", "generate_trace_id"),
    ("systems.trace_injector", "get_active_traces"),
    ("systems.trace_injector", "get_global_injector"),
    ("systems.trace_injector", "get_trace_chain"),
    ("systems.trace_injector", "inject_memory_trace"),
    ("systems.trace_injector", "inject_trace"),
    ("systems.trace_injector", "start_memory_operation"),
    ("systems.trace_injector", "start_memory_trace"),
    ("systems.trace_injector", "to_dict"),
    ("systems.trauma_lock", "decrypt_memory"),
    ("systems.trauma_lock", "encrypt_memory"),
    ("systems.trauma_lock", "get_access_stats"),
    ("systems.voice_memory_bridge", "process_voice_memory"),
    ("tools.lambda_archive_inspector", "calculate_archive_score"),
    ("tools.lambda_archive_inspector", "detect_forgotten_symbols"),
    ("tools.lambda_archive_inspector", "detect_high_entropy_clusters"),
    ("tools.lambda_archive_inspector", "generate_archive_report"),
    ("tools.lambda_archive_inspector", "main"),
    ("tools.lambda_archive_inspector", "reconstruct_symbolic_linkage"),
    ("tools.lambda_archive_inspector", "scan_memory_vault"),
    ("tools.lambda_archive_inspector", "to_dict"),
    ("tools.lambda_archive_inspector", "to_dict"),
    ("tools.lambda_archive_inspector", "to_dict"),
    ("tools.lambda_vault_scan", "assess_vault_health"),
    ("tools.lambda_vault_scan", "detect_missing_links"),
    ("tools.lambda_vault_scan", "detect_stale_symbols"),
    ("tools.lambda_vault_scan", "export_vault_report"),
    ("tools.lambda_vault_scan", "load_memory_snapshots"),
    ("tools.lambda_vault_scan", "main"),
    ("tools.memory_drift_auditor", "detect_memory_drift"),
    ("tools.memory_drift_auditor", "generate_audit_report"),
    ("tools.memory_drift_auditor", "load_memory_snapshots"),
    ("tools.memory_drift_auditor", "main"),
    ("tools.memory_drift_auditor", "trace_collapse_events"),
    ("tools.memory_drift_auditor", "visualize_memory_timeline"),
    ("unified_memory_manager", "get_active_folds"),
    ("unified_memory_manager", "get_active_folds"),
    ("visualizer", "launch_3d_viewer"),
    ("visualizer", "quantum_modulate"),
    ("visualizer", "setup_visualization"),
    ("voice_memory_manager", "get_relevant_memories"),
    ("voice_memory_manager", "get_user_interactions"),
    ("voice_memory_manager", "get_voice_preferences"),
    ("voice_memory_manager", "store_interaction"),
    ("voice_memory_manager", "store_voice_preference"),
]


class MemoryEntityActivator:
    """Activator for memory system entities"""

    def __init__(self, hub_instance):
        self.hub = hub_instance
        self.activated_count = 0
        self.failed_count = 0

    def activate_all(self):
        """Activate all memory entities"""
        logger.info(f"Starting memory entity activation...")

        # Activate classes
        self._activate_classes()

        # Activate functions
        self._activate_functions()

        logger.info(f"{system_name} activation complete: {self.activated_count} activated, {self.failed_count} failed")

        return {
            "activated": self.activated_count,
            "failed": self.failed_count,
            "total": len(MEMORY_CLASS_ENTITIES) + len(MEMORY_FUNCTION_ENTITIES)
        }

    def _activate_classes(self):
        """Activate class entities"""
        for module_path, class_name in MEMORY_CLASS_ENTITIES:
            try:
                # Build full module path
                if module_path.startswith('.'):
                    full_path = f"{system_name}{module_path}"
                else:
                    full_path = f"{system_name}.{module_path}"

                # Import module
                module = __import__(full_path, fromlist=[class_name])
                cls = getattr(module, class_name)

                # Register with hub
                service_name = self._generate_service_name(class_name)

                # Try to instantiate if possible
                try:
                    instance = cls()
                    self.hub.register_service(service_name, instance)
                    logger.debug(f"Activated {class_name} as {service_name}")
                except:
                    # Register class if can't instantiate
                    self.hub.register_service(f"{service_name}_class", cls)
                    logger.debug(f"Registered {class_name} class")

                self.activated_count += 1

            except Exception as e:
                logger.warning(f"Failed to activate {class_name} from {module_path}: {e}")
                self.failed_count += 1

    def _activate_functions(self):
        """Activate function entities"""
        for module_path, func_name in MEMORY_FUNCTION_ENTITIES:
            try:
                # Build full module path
                if module_path.startswith('.'):
                    full_path = f"{system_name}{module_path}"
                else:
                    full_path = f"{system_name}.{module_path}"

                # Import module
                module = __import__(full_path, fromlist=[func_name])
                func = getattr(module, func_name)

                # Register function
                service_name = f"{func_name}_func"
                self.hub.register_service(service_name, func)
                logger.debug(f"Activated function {func_name}")

                self.activated_count += 1

            except Exception as e:
                logger.warning(f"Failed to activate function {func_name} from {module_path}: {e}")
                self.failed_count += 1

    def _generate_service_name(self, class_name: str) -> str:
        """Generate consistent service names"""
        import re
        # Convert CamelCase to snake_case
        name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', class_name)
        name = re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()

        # Remove common suffixes
        for suffix in ['_manager', '_service', '_system', '_engine', '_handler']:
            if name.endswith(suffix):
                name = name[:-len(suffix)]
                break

        return name


def get_memory_activator(hub_instance):
    """Factory function to create activator"""
    return MemoryEntityActivator(hub_instance)
