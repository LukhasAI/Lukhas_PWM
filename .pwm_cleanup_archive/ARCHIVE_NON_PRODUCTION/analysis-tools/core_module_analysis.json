{
  "working": [
    "minimal_actor.py",
    "fault_tolerance.py",
    "apply_api_fixes.py",
    "lukhas_id.py",
    "integration_hub.py",
    "resource_efficiency_analyzer.py",
    "generate_autotest_docs.py",
    "quorum_override.py",
    "plugin_registry.py",
    "symbolic_contract.py",
    "integrator.py",
    "lukhas_core.py",
    "distributed_tracing.py",
    "autotest_validation.py",
    "api_diff_analyzer.py",
    "p2p_fabric.py",
    "benchmark_swarm.py",
    "image_processing_pipeline.py",
    "symbolic_drift_analyzer.py",
    "oracle_nervous_system.py",
    "tier_unification_adapter.py",
    "symbolic_boot.py",
    "cluster_sharding.py",
    "test_coordination_simple.py",
    "enhanced_swarm.py",
    "event_sourcing.py",
    "test_mailbox_simple.py",
    "specialized_colonies.py",
    "symbolic_arbitration.py",
    "bio_symbolic_swarm_hub.py",
    "energy_consumption_analysis.py",
    "test_p2p_communication.py",
    "practical_optimizations.py",
    "fallback_services.py",
    "module_registry.py",
    "event_bus.py",
    "lukhas_ai_interface.py",
    "efficient_communication.py",
    "task_manager.py",
    "validation_script_fixes.py",
    "test_tiered_state_management.py",
    "automatic_testing_system.py",
    "identity_aware_base_colony.py",
    "quantum_identity_manager.py",
    "swarm_identity_orchestrator.py",
    "quantized_cycle_manager.py",
    "tiered_state_management.py",
    "targeted_api_fixes.py",
    "identity_aware_base.py",
    "actor_model.py",
    "coordination.py",
    "identity_integration.py",
    "resource_efficiency.py",
    "test_image_processing_pipeline.py",
    "tier_aware_colony_proxy.py",
    "p2p_communication.py",
    "governance.py",
    "state_management.py",
    "validation.py",
    "decorators.py",
    "net/__init__.py",
    "net/client_event.py",
    "colonies/memory_colony_enhanced.py",
    "colonies/creativity_colony.py",
    "colonies/oracle_colony.py",
    "colonies/memory_colony.py",
    "colonies/base_colony.py",
    "colonies/supervisor_agent.py",
    "colonies/governance_colony.py",
    "colonies/reasoning_colony.py",
    "colonies/ethics_swarm_colony.py",
    "symbolic_bridge/token_map.py",
    "symbolic_bridge/integrator.py",
    "identity/mapper.py",
    "identity/__init__.py",
    "identity/processor.py",
    "identity/engine.py",
    "identity/persona_engine.py",
    "identity/lukhas_id_manager.py",
    "identity/manager.py",
    "identity/vault/__init__.py",
    "spine/integration_orchestrator.py",
    "spine/__init__.py",
    "spine/emotion_mapper_alt.py",
    "personality/lukhas_es_creativo.py",
    "personality/personality.py",
    "personality/__init__.py",
    "personality/creative_expressions.py",
    "personality/neuro_haiku_generator.py",
    "personality/lukhas_es_creativo_clean.py",
    "symbolic_diagnostics/trace_repair_engine.py",
    "output/__init__.py",
    "utils/symbolic_utils.py",
    "observability/collector.py",
    "introspection/introspector.py",
    "rem/__init__.py",
    "adaptive_ai/Meta_Learning/__init__.py",
    "testing/plugin_test_framework.py",
    "testing/__init__.py",
    "symbolic_reasoning/symbolic_trace.py",
    "ethics/__init__.py",
    "ethics/dream_ethics_injector.py",
    "ai/integration_manager.py",
    "examples/mailbox_demo.py",
    "symbolism/tags.py",
    "symbolism/archiver.py",
    "verifold/verifold_unified.py",
    "orchestration/energy_aware_execution_planner.py",
    "governance/__init__.py",
    "governance/governance_colony.py",
    "meta_learning/rate_modulator.py",
    "meta_learning/remediator_agent.py",
    "meta_learning/symbolic_feedback.py",
    "meta_learning/monitor_dashboard.py",
    "symbolic/collapse/vector_ops.py",
    "user_interface_manager/__init__.py",
    "user_interface_manager/text_handler.py",
    "user_interface_manager/voice_handler.py",
    "monitoring/collapse_tracker.py",
    "performance/__init__.py",
    "performance/orchestrator.py",
    "infrastructure/base_node.py",
    "infrastructure/node_registry.py",
    "infrastructure/node_manager.py",
    "modules/__init__.py",
    "modules/nias/__init__.py",
    "modules/nias/dream_recorder.py",
    "neural_architectures/abas/__init__.py",
    "neural_architectures/abas/abas_quantum_specialist.py",
    "interaction/__init__.py",
    "helpers/__init__.py",
    "services/location/geofencing_manager.py",
    "services/location/tracker.py",
    "services/personality/lukhas_personas.py",
    "services/personality/__init__.py",
    "interfaces/research_dashboard.py",
    "interfaces/__init__.py",
    "interfaces/cli.py",
    "interfaces/lukhas_socket.py",
    "interfaces/app.py",
    "interfaces/launcher.py",
    "interfaces/dev_dashboard.py",
    "interfaces/web_formatter.py",
    "interfaces/ui/__init__.py",
    "interfaces/ui/config/lukhas_dashboard_settings.py",
    "interfaces/ui/config/__init__.py",
    "interfaces/ui/components/__init__.py",
    "interfaces/ui/components/dream_export_streamlit.py",
    "interfaces/ui/components/voice_preview_streamlit.py",
    "interfaces/ui/components/audio_exporter.py",
    "interfaces/ui/components/tier_visualizer.py",
    "interfaces/ui/adaptive/__init__.py",
    "interfaces/ui/adaptive/ui_orchestrator.py",
    "interfaces/tools/research/research_dashboard.py",
    "interfaces/tools/research/__init__.py",
    "interfaces/tools/research/dev_dashboard.py",
    "interfaces/tools/security/session_logger.py",
    "interfaces/tools/security/__init__.py",
    "interfaces/tools/dao/__init__.py",
    "interfaces/tools/dao/dao_vote.py",
    "interfaces/tools/dao/dao_propose.py",
    "interfaces/tools/cli/__init__.py",
    "interfaces/tools/cli/lukhasdream_cli.py",
    "interfaces/tools/cli/command_registry.py",
    "interfaces/nias/__init__.py",
    "interfaces/nias/generate_nias_docs.py",
    "interfaces/logic/consent_manager.py",
    "interfaces/logic/delegate_logic.py",
    "interfaces/logic/agent_logic_architecture.py",
    "interfaces/logic/__init__.py",
    "interfaces/logic/safety_filter.py",
    "interfaces/logic/context/context_builder.py",
    "interfaces/logic/context/__init__.py",
    "interfaces/logic/voice/__init__.py",
    "interfaces/logic/voice/voice_renderer.py",
    "interfaces/voice/__init__.py",
    "interfaces/voice/core/__init__.py",
    "interfaces/voice/voice_emotional/__init__.py",
    "interfaces/voice/voice_emotional/context_aware_modular_voice.py",
    "interfaces/voice/input/__init__.py",
    "interfaces/as_agent/agent_logic/__init__.py",
    "interfaces/as_agent/agent_logic/safety_filter.py",
    "interfaces/as_agent/streamlit/__init__.py",
    "interfaces/as_agent/streamlit/components/__init__.py",
    "interfaces/as_agent/streamlit/components/dream_export_streamlit.py",
    "interfaces/as_agent/streamlit/components/voice_preview_streamlit.py",
    "interfaces/as_agent/streamlit/components/tier_visualizer.py",
    "interfaces/as_agent/core/lukhas_overview_log.py",
    "interfaces/as_agent/core/reward_reputation.py",
    "interfaces/as_agent/core/__init__.py",
    "interfaces/as_agent/core/generate_image.py",
    "interfaces/as_agent/auth/lukhas_registry.py",
    "interfaces/as_agent/auth/vendor_hospitality_sync.py",
    "interfaces/as_agent/auth/__init__.py",
    "interfaces/as_agent/sample_payloads/__init__.py",
    "interfaces/as_agent/utils/symbolic_utils.py",
    "interfaces/as_agent/utils/constants.py",
    "interfaces/as_agent/utils/__init__.py",
    "interfaces/as_agent/sys/nias/delivery_loop.py",
    "interfaces/as_agent/sys/nias/feedback_log_viewer.py",
    "interfaces/as_agent/sys/nias/dream_narrator_queue.py",
    "interfaces/as_agent/sys/nias/validate_payload.py",
    "interfaces/as_agent/sys/nias/__init__.py",
    "interfaces/as_agent/sys/nias/generate_payload_cli.py",
    "interfaces/as_agent/sys/nias/symbolic_reply_generator.py",
    "interfaces/as_agent/sys/nias/05_25_dream_clustering_engine.py",
    "interfaces/as_agent/sys/nias/symbolic_matcher.py",
    "interfaces/as_agent/sys/nias/consent_filter.py",
    "interfaces/as_agent/sys/nias/replay_visualizer.py",
    "interfaces/as_agent/sys/nias/dream_recorder.py",
    "interfaces/as_agent/sys/nias/feedback_loop.py",
    "interfaces/as_agent/sys/nias/narration_controller.py",
    "interfaces/as_agent/sys/dast/dast_core.py",
    "interfaces/as_agent/sys/dast/store.py",
    "interfaces/as_agent/sys/dast/partner_sdk.py",
    "interfaces/as_agent/sys/dast/aggregator.py",
    "interfaces/as_agent/sys/dast/__init__.py",
    "interfaces/as_agent/sys/dast/schedule_manager.py",
    "interfaces/as_agent/sys/dast/dast_logger.py",
    "interfaces/as_agent/sys/abas/abas.py",
    "interfaces/as_agent/sys/abas/__init__.py",
    "interfaces/as_agent/widgets/terminal_widget.py",
    "interfaces/as_agent/widgets/__init__.py",
    "interfaces/as_agent/widgets/lukhas_widget_archive.py",
    "interfaces/as_agent/widgets/travel_widget.py",
    "interfaces/as_agent/widgets/delivery_tracker_widget.py",
    "interfaces/as_agent/news_and_social/lukhas_affiliate_log.py",
    "interfaces/as_agent/news_and_social/__init__.py",
    "router/__init__.py"
  ],
  "broken": [
    {
      "file": "api_controllers.py",
      "error": "No module named 'flask'"
    },
    {
      "file": "integrated_system.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "swarm.py",
      "error": "No module named 'core'"
    },
    {
      "file": "resource_scheduler.py",
      "error": "No module named 'core'"
    },
    {
      "file": "actor_supervision_integration.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "config.py",
      "error": "`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.9/migration/#basesettings-has-moved-to-pydantic-settings for more details.\n\nFor further information vi..."
    },
    {
      "file": "config_manager.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "resource_optimization_integration.py",
      "error": "No module named 'core'"
    },
    {
      "file": "event_replayer.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "consistency_manager.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "demo_coordination.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "notion_sync.py",
      "error": "keyword argument repeated: format (notion_sync.py, line 501)"
    },
    {
      "file": "supervision.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "circuit_breaker.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "working_lukhasbot.py",
      "error": "f-string expression part cannot include a backslash (working_lukhasbot.py, line 71)"
    },
    {
      "file": "observability_steering.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "integrity_probe.py",
      "error": "No module named 'core.symbolic.drift'"
    },
    {
      "file": "collaboration.py",
      "error": "cannot import name 'SwarmManager' from 'core.swarm' (/Users/agi_dev/Downloads/Consolidation-Repo/core/swarm.py)"
    },
    {
      "file": "mailbox.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "event_replay_snapshot.py",
      "error": "No module named 'aiofiles'"
    },
    {
      "file": "monitoring_observability.py",
      "error": "No module named 'torch'"
    },
    {
      "file": "direct_ai_router.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "agent_coordination.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "swarm_visualizer.py",
      "error": "EOL while scanning string literal (swarm_visualizer.py, line 33)"
    },
    {
      "file": "memoria.py",
      "error": "EOF while scanning triple-quoted string literal (memoria.py, line 78)"
    },
    {
      "file": "unified_lukhasbot.py",
      "error": "f-string expression part cannot include a backslash (unified_lukhasbot.py, line 158)"
    },
    {
      "file": "actor_system.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "observatory.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "colonies/temporal_colony.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "colonies/tensor_colony_ops.py",
      "error": "No module named 'torch'"
    },
    {
      "file": "colonies/governance_colony_enhanced.py",
      "error": "No module named 'ethics.ethics_engine'"
    },
    {
      "file": "security/__init__.py",
      "error": "name 'emergency_override' is not defined"
    },
    {
      "file": "symbolic_diagnostics/__init__.py",
      "error": "(unicode error) 'utf-8' codec can't decode byte 0x9b in position 1304: invalid start byte (__init__.py, line 31)"
    },
    {
      "file": "unified/bio_signals.py",
      "error": "No module named 'quantum.quantum_inspired_layer'"
    },
    {
      "file": "unified/integration.py",
      "error": "No module named 'core.unified_integration'"
    },
    {
      "file": "unified/orchestration.py",
      "error": "cannot import name 'BioOrchestrator' from 'orchestration.orchestrator' (/Users/agi_dev/Downloads/Consolidation-Repo/orchestration/orchestrator.py)"
    },
    {
      "file": "output/message_hub.py",
      "error": "No module named 'lukhas_dna_link'"
    },
    {
      "file": "utils/__init__.py",
      "error": "No module named 'core.common'"
    },
    {
      "file": "utils/dream_utils.py",
      "error": "No module named 'modules.dream_seed'"
    },
    {
      "file": "introspection/__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "rem/streamlit_lidar.py",
      "error": "invalid syntax (streamlit_lidar.py, line 63)"
    },
    {
      "file": "rem/sleep_cycle.py",
      "error": "No module named 'modules.memoria'"
    },
    {
      "file": "rem/visualizer.py",
      "error": "invalid syntax (visualizer.py, line 1)"
    },
    {
      "file": "symbolism/methylation_model.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "meta_learning/enhancement_system.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "monitoring/__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "monitoring/collapse_integration.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "monitoring/drift_monitor.py",
      "error": "No module named 'core.symbolic.drift'"
    },
    {
      "file": "infrastructure/node_collection.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "neural_architectures/__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "neural_architectures/neural_integrator.py",
      "error": "No module named 'torch'"
    },
    {
      "file": "interaction/symptom_reporter.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "services/location/__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "services/personality/lukhas_empathy.py",
      "error": "No module named 'symbolic_ai'"
    },
    {
      "file": "interfaces/custom_llm.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "interfaces/main.py",
      "error": "No module named 'edge_tts'"
    },
    {
      "file": "interfaces/dashboad.py",
      "error": "name 'st' is not defined"
    },
    {
      "file": "interfaces/ui/gui_launcher.py",
      "error": "No module named 'tools.session_logger'"
    },
    {
      "file": "interfaces/ui/app.py",
      "error": "No module named 'LUKHAS_AGENT_PLUGIN'"
    },
    {
      "file": "interfaces/ui/components/replay_graphs.py",
      "error": "No module named 'core.common'"
    },
    {
      "file": "interfaces/ui/components/payload_builder.py",
      "error": "EOF while scanning triple-quoted string literal (payload_builder.py, line 74)"
    },
    {
      "file": "interfaces/tools/cli/speak.py",
      "error": "invalid syntax (speak.py, line 82)"
    },
    {
      "file": "interfaces/logic/voice_narration_player.py",
      "error": "invalid syntax (voice_narration_player.py, line 60)"
    },
    {
      "file": "interfaces/logic/agent_self.py",
      "error": "No module named 'LUKHAS_AGENT_PLUGIN'"
    },
    {
      "file": "interfaces/logic/agent_core.py",
      "error": "No module named 'lukhas_config'"
    },
    {
      "file": "interfaces/logic/orchestrator.py",
      "error": "invalid syntax (orchestrator.py, line 10)"
    },
    {
      "file": "interfaces/logic/memory_handler.py",
      "error": "name 'memory_handler' is not defined"
    },
    {
      "file": "interfaces/voice/lukhas_voice_agent.py",
      "error": "No module named 'lukhas_core'"
    },
    {
      "file": "interfaces/voice/lukhas_listen.py",
      "error": "No module named 'voice.lukhas_voice'"
    },
    {
      "file": "interfaces/voice/edge_voice.py",
      "error": "No module named 'edge_tts'"
    },
    {
      "file": "interfaces/voice/core/sayit.py",
      "error": "No module named 'symbolic_ai'"
    },
    {
      "file": "interfaces/voice/integrations/elevenlabs/__init__.py",
      "error": "No module named 'test_module'"
    },
    {
      "file": "interfaces/as_agent/agent_logic/voice_narration_player.py",
      "error": "invalid syntax (voice_narration_player.py, line 60)"
    },
    {
      "file": "interfaces/as_agent/agent_logic/agent_self.py",
      "error": "No module named 'LUKHAS_AGENT_PLUGIN'"
    },
    {
      "file": "interfaces/as_agent/agent_logic/orchestrator.py",
      "error": "invalid syntax (orchestrator.py, line 10)"
    },
    {
      "file": "interfaces/as_agent/agent_logic/memory_handler.py",
      "error": "name 'memory_handler' is not defined"
    },
    {
      "file": "interfaces/as_agent/streamlit/app.py",
      "error": "No module named 'LUKHAS_AGENT_PLUGIN'"
    },
    {
      "file": "interfaces/as_agent/streamlit/components/replay_graphs.py",
      "error": "No module named 'core.common'"
    },
    {
      "file": "interfaces/as_agent/streamlit/components/payload_builder.py",
      "error": "EOF while scanning triple-quoted string literal (payload_builder.py, line 74)"
    },
    {
      "file": "interfaces/as_agent/core/lukhas_nias_filter.py",
      "error": "invalid character '\u250c' (U+250C) (lukhas_nias_filter.py, line 22)"
    },
    {
      "file": "interfaces/as_agent/core/nias_filter.py",
      "error": "invalid character '\u250c' (U+250C) (nias_filter.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/duet_conductor.py",
      "error": "invalid character '\u2554' (U+2554) (duet_conductor.py, line 23)"
    },
    {
      "file": "interfaces/as_agent/core/lukhas_agent_handoff.py",
      "error": "invalid character '\u250c' (U+250C) (lukhas_agent_handoff.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/checkout_handler.py",
      "error": "invalid character '\u250c' (U+250C) (checkout_handler.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/affiliate_log.py",
      "error": "invalid character '\u2554' (U+2554) (affiliate_log.py, line 23)"
    },
    {
      "file": "interfaces/as_agent/core/vision_prompts.py",
      "error": "unexpected indent (vision_prompts.py, line 27)"
    },
    {
      "file": "interfaces/as_agent/core/vendor_sync.py",
      "error": "invalid character '\u250c' (U+250C) (vendor_sync.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/generate_video.py",
      "error": "invalid character '\u250c' (U+250C) (generate_video.py, line 22)"
    },
    {
      "file": "interfaces/as_agent/core/render_ai.py",
      "error": "invalid character '\u250c' (U+250C) (render_ai.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/filter_gpt.py",
      "error": "invalid character '\u2554' (U+2554) (filter_gpt.py, line 23)"
    },
    {
      "file": "interfaces/as_agent/core/gatekeeper.py",
      "error": "invalid character '\u2554' (U+2554) (gatekeeper.py, line 23)"
    },
    {
      "file": "interfaces/as_agent/core/scheduler.py",
      "error": "invalid character '\u2554' (U+2554) (scheduler.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/voice_duet.py",
      "error": "invalid character '\u2554' (U+2554) (voice_duet.py, line 25)"
    },
    {
      "file": "interfaces/as_agent/core/emotion_log.py",
      "error": "invalid character '\u2554' (U+2554) (emotion_log.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/core/wallet.py",
      "error": "invalid character '\u250c' (U+250C) (wallet.py, line 21)"
    },
    {
      "file": "interfaces/as_agent/sample_payloads/trace_log_viewer.py",
      "error": "EOF while scanning triple-quoted string literal (trace_log_viewer.py, line 64)"
    },
    {
      "file": "interfaces/as_agent/utils/symbolic_github_export.py",
      "error": "EOF while scanning triple-quoted string literal (symbolic_github_export.py, line 94)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/main_loop.py",
      "error": "invalid syntax (main_loop.py, line 3)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/replay_queue.py",
      "error": "EOF while scanning triple-quoted string literal (replay_queue.py, line 80)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/voice_narrator.py",
      "error": "No module named 'core.common'"
    },
    {
      "file": "interfaces/as_agent/sys/nias/nias_core.py",
      "error": "EOF while scanning triple-quoted string literal (trace_logger.py, line 68)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/replay_heatmap.py",
      "error": "No module named 'seaborn'"
    },
    {
      "file": "interfaces/as_agent/sys/nias/inject_message_simulator.py",
      "error": "[Errno 2] No such file or directory: 'core/logs/narration_log.jsonl'"
    },
    {
      "file": "interfaces/as_agent/sys/nias/trace_logger.py",
      "error": "EOF while scanning triple-quoted string literal (trace_logger.py, line 68)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/dream_export_streamlit.py",
      "error": "name 'dreams' is not defined"
    },
    {
      "file": "interfaces/as_agent/sys/nias/dream_log_viewer.py",
      "error": "EOF while scanning triple-quoted string literal (dream_log_viewer.py, line 97)"
    },
    {
      "file": "interfaces/as_agent/sys/nias/feedback_insight_cli.py",
      "error": "invalid syntax (feedback_insight_cli.py, line 79)"
    },
    {
      "file": "interfaces/as_agent/sys/dast/dast.py",
      "error": "No module named 'lukhas_config'"
    },
    {
      "file": "interfaces/as_agent/sys/dast/lukhas_launcher.py",
      "error": "No module named 'LUKHAS_AGENT_PLUGIN.core'"
    },
    {
      "file": "interfaces/as_agent/widgets/live_renderer_widget.py",
      "error": "No module named 'dashboards'"
    },
    {
      "file": "interfaces/as_agent/widgets/widget_engine.py",
      "error": "invalid syntax (widget_engine.py, line 161)"
    },
    {
      "file": "interfaces/as_agent/widgets/widget_config.py",
      "error": "attempted relative import with no known parent package"
    },
    {
      "file": "interfaces/as_agent/news_and_social/lukhass_dispatcher.py",
      "error": "No module named 'modules.voice'"
    },
    {
      "file": "router/llm_multiverse_router.py",
      "error": "No module named 'bridge.llm_wrappers.openai_wrapper'"
    }
  ],
  "dependencies": {
    "minimal_actor.py": [
      "import queue",
      "import threading"
    ],
    "api_controllers.py": [],
    "fault_tolerance.py": [
      "from enum import Enum",
      "import time"
    ],
    "apply_api_fixes.py": [
      "import re",
      "import json",
      "from pathlib import Path"
    ],
    "integrated_system.py": [],
    "lukhas_id.py": [
      "import hashlib",
      "import json",
      "import logging",
      "import asyncio",
      "import uuid",
      "from datetime import datetime, timedelta",
      "from typing import Dict, List, Any, Optional, Tuple, Union",
      "from dataclasses import dataclass",
      "from enum import Enum",
      "import secrets",
      "import base64",
      "from cryptography.hazmat.primitives import hashes, serialization",
      "from cryptography.hazmat.primitives.asymmetric import rsa, padding",
      "from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes"
    ],
    "integration_hub.py": [
      "from typing import Dict, Any, List, Optional, Callable, Union",
      "import threading",
      "import asyncio",
      "import json",
      "import logging",
      "from datetime import datetime",
      "from dataclasses import dataclass, field"
    ],
    "swarm.py": [],
    "resource_efficiency_analyzer.py": [
      "import gc",
      "import json",
      "import logging",
      "import os",
      "import platform",
      "import psutil",
      "import resource",
      "import sys",
      "import threading",
      "import time",
      "import tracemalloc",
      "from collections import defaultdict, deque",
      "from dataclasses import asdict, dataclass, field",
      "from datetime import datetime, timedelta",
      "from enum import Enum",
      "from typing import Any, Callable, Dict, List, Optional, Set, Tuple",
      "import numpy as np",
      "import random"
    ],
    "generate_autotest_docs.py": [
      "import sys",
      "import os",
      "import json",
      "import re",
      "from pathlib import Path",
      "from datetime import datetime",
      "from typing import Dict, Any, List # Added List",
      "import logging"
    ],
    "quorum_override.py": [
      "from typing import List",
      "import structlog"
    ],
    "resource_scheduler.py": [],
    "plugin_registry.py": [
      "from __future__ import annotations",
      "import importlib.metadata",
      "import logging",
      "from abc import ABC, abstractmethod",
      "from enum import Enum",
      "from typing import Dict, List, Optional"
    ],
    "symbolic_contract.py": [
      "from dataclasses import dataclass, field",
      "from typing import List, Dict, Any",
      "import json",
      "from dataclasses import asdict"
    ],
    "actor_supervision_integration.py": [],
    "integrator.py": [
      "import os",
      "import sys",
      "import time",
      "import json",
      "import uuid # Added uuid for message IDs",
      "from typing import Dict, List, Any, Optional, Tuple, Callable",
      "from dataclasses import dataclass, field",
      "from datetime import datetime, timezone",
      "from enum import Enum",
      "from pathlib import Path",
      "from collections import defaultdict # For event_subscribers_map",
      "import structlog",
      "from core.bio_systems.quantum_layer import QuantumBioOscillator",
      "from bio.systems.orchestration import BioOrchestrator # type: ignore",
      "from core.security.access_control import AccessTier, AccessController # type: ignore",
      "from core.security.quantum_auth import QuantumAuthenticator # type: ignore",
      "from core.security.compliance import ComplianceMonitor # type: ignore",
      "from core.unified_integration import UnifiedIntegration # type: ignore"
    ],
    "config.py": [],
    "lukhas_core.py": [
      "import logging",
      "from typing import Dict, Any, Optional",
      "from datetime import datetime",
      "from .plugin_registry import PluginRegistry"
    ],
    "config_manager.py": [],
    "resource_optimization_integration.py": [],
    "distributed_tracing.py": [
      "import json",
      "import logging",
      "import threading",
      "import time",
      "import uuid",
      "from collections import defaultdict, deque",
      "from contextlib import contextmanager",
      "from dataclasses import asdict, dataclass",
      "from typing import Any, Dict, List, Optional, Set",
      "import os"
    ],
    "autotest_validation.py": [
      "import asyncio",
      "import sys",
      "import os",
      "from pathlib import Path",
      "import structlog # For \u039bTRACE logging",
      "import traceback # For logging critical errors",
      "from core.automatic_testing_system import ( # Assuming it's in core.automatic_testing_system"
    ],
    "api_diff_analyzer.py": [
      "import ast",
      "import os",
      "import re",
      "import json",
      "from pathlib import Path",
      "from typing import Dict, List, Set, Tuple, Optional",
      "from dataclasses import dataclass, asdict",
      "from collections import defaultdict",
      "import difflib",
      "import re",
      "import json",
      "from pathlib import Path",
      "from datetime import datetime",
      "import sys"
    ],
    "p2p_fabric.py": [
      "import socket",
      "import threading",
      "import time"
    ],
    "benchmark_swarm.py": [
      "import asyncio",
      "import time",
      "from event_bus import Event, get_global_event_bus",
      "from minimal_actor import Actor"
    ],
    "event_replayer.py": [],
    "image_processing_pipeline.py": [
      "import asyncio",
      "import hashlib",
      "import json",
      "import logging",
      "import os",
      "import time",
      "import uuid",
      "from dataclasses import dataclass, asdict",
      "from enum import Enum",
      "from pathlib import Path",
      "from typing import Any, Dict, List, Optional, Tuple, Callable",
      "from collections import defaultdict",
      "import mimetypes",
      "from PIL import Image",
      "import numpy as np",
      "from .event_bus import EventBus",
      "from .minimal_actor import Actor",
      "from .lightweight_concurrency import LightweightActor, MemoryEfficientScheduler"
    ],
    "symbolic_drift_analyzer.py": [
      "import asyncio",
      "import json",
      "import math",
      "import time",
      "from collections import defaultdict, Counter, deque",
      "from dataclasses import dataclass, field",
      "from datetime import datetime, timedelta",
      "from enum import Enum, auto",
      "from typing import Dict, List, Optional, Set, Tuple, Any, Callable",
      "import logging",
      "import hashlib",
      "import statistics",
      "import numpy as np",
      "from pathlib import Path",
      "from rich.console import Console",
      "from rich.table import Table",
      "from rich.progress import Progress, SpinnerColumn, TextColumn",
      "from rich.panel import Panel",
      "from rich.layout import Layout",
      "from rich.live import Live",
      "from memory.dream_memory_manager import DreamMemoryManager",
      "from symbolic.drift.symbolic_drift_tracker import DriftPhase, DriftScore",
      "from ethics.ethical_drift_detector import EthicalDriftDetector",
      "from core.symbolic.glyphs import Glyph",
      "import random"
    ],
    "oracle_nervous_system.py": [
      "import asyncio",
      "import logging",
      "from datetime import datetime, timedelta",
      "from typing import Dict, Any, List, Optional, Union, Tuple",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "import json",
      "import time",
      "from core.colonies.oracle_colony import get_oracle_colony",
      "from reasoning.openai_oracle_adapter import get_oracle_openai_adapter",
      "from reasoning.oracle_predictor import get_enhanced_oracle",
      "from creativity.dream.dream_engine.lukhas_oracle_dream import get_enhanced_dream_oracle",
      "from core.colonies.oracle_colony import OracleQuery"
    ],
    "tier_unification_adapter.py": [
      "from typing import Dict, Any, Optional, Union, Callable",
      "from functools import wraps",
      "from datetime import datetime, timezone",
      "import structlog",
      "from abc import ABC, abstractmethod",
      "from core.identity_integration import (",
      "from fastapi import HTTPException, status",
      "from emotion.dreamseed_upgrade import EmotionalTier",
      "from identity.core.user_tier_mapping import get_user_tier"
    ],
    "symbolic_boot.py": [
      "import os",
      "import sys",
      "import logging",
      "from pathlib import Path",
      "from typing import Dict, Any, Optional"
    ],
    "cluster_sharding.py": [
      "import logging",
      "from typing import Any, Dict, Optional"
    ],
    "test_coordination_simple.py": [
      "import asyncio",
      "import logging",
      "import sys",
      "from pathlib import Path",
      "from core.actor_system import ActorSystem",
      "from core.agent_coordination import (",
      "import traceback",
      "from core.agent_coordination import Skill, SkillLevel"
    ],
    "__init__.py": [],
    "enhanced_swarm.py": [
      "import asyncio",
      "import random",
      "import time",
      "import logging",
      "from typing import Dict, Any, List, Optional, Set, Callable, Union",
      "from abc import abstractmethod",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "import numpy as np",
      "from collections import defaultdict, deque",
      "from core.actor_system import Actor, ActorRef",
      "from core.efficient_communication import MessagePriority",
      "from core.distributed_tracing import get_global_tracer, AIAgentTracer",
      "from core.colonies.base_colony import BaseColony",
      "from core.symbolism.tags import TagScope, TagPermission",
      "from core.event_sourcing import get_global_event_store, AIAgentAggregate"
    ],
    "event_sourcing.py": [
      "import json",
      "import logging",
      "import sqlite3",
      "import threading",
      "import time",
      "import uuid",
      "from abc import ABC, abstractmethod",
      "from dataclasses import asdict, dataclass",
      "from datetime import datetime",
      "from typing import Any, Dict, List, Optional"
    ],
    "test_mailbox_simple.py": [
      "import asyncio",
      "import sys",
      "from pathlib import Path",
      "from core.actor_system import Actor, ActorSystem, ActorMessage",
      "from core.mailbox import (",
      "from core.mailbox import PersistentMailbox",
      "import tempfile",
      "import os",
      "import traceback"
    ],
    "specialized_colonies.py": [
      "from core.swarm import AgentColony"
    ],
    "symbolic_arbitration.py": [
      "from collections import defaultdict"
    ],
    "bio_symbolic_swarm_hub.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, Any, List, Optional, Union",
      "from datetime import datetime",
      "from core.enhanced_swarm import EnhancedSwarmHub, EnhancedColony",
      "from core.colonies.base_colony import BaseColony",
      "from bio.symbolic.anomaly_filter_colony import AnomalyFilterColony",
      "from bio.symbolic.preprocessing_colony import PreprocessingColony",
      "from bio.symbolic.adaptive_threshold_colony import AdaptiveThresholdColony",
      "from bio.symbolic.contextual_mapping_colony import ContextualMappingColony",
      "from core.colonies.oracle_colony import OracleColony, OracleQuery",
      "from consciousness.systems.consciousness_colony_integration import DistributedConsciousnessEngine"
    ],
    "energy_consumption_analysis.py": [
      "import asyncio",
      "import json",
      "import time",
      "import threading",
      "from collections import defaultdict, deque",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "from typing import Dict, List, Any, Optional, Callable, Tuple, Set",
      "import logging",
      "import math",
      "from datetime import datetime, timedelta",
      "import numpy as np",
      "import psutil"
    ],
    "test_p2p_communication.py": [
      "import asyncio",
      "import pytest",
      "import time",
      "from p2p_communication import (",
      "from collections import defaultdict"
    ],
    "practical_optimizations.py": [
      "import asyncio",
      "import gc",
      "import hashlib",
      "import json",
      "import logging",
      "import pickle",
      "import threading",
      "import time",
      "import weakref",
      "from abc import ABC, abstractmethod",
      "from collections import OrderedDict, defaultdict",
      "from contextlib import contextmanager",
      "from dataclasses import dataclass, field",
      "from functools import lru_cache, wraps",
      "from typing import Any, Callable, Dict, List, Optional, Set, Tuple, TypeVar, Union",
      "import numpy as np",
      "import os",
      "import os",
      "import psutil",
      "import zlib",
      "import msgpack",
      "import zlib",
      "import msgpack",
      "import json"
    ],
    "fallback_services.py": [
      "import structlog",
      "from typing import Dict, Any"
    ],
    "consistency_manager.py": [],
    "module_registry.py": [
      "import logging",
      "from typing import Dict, Any, Optional, List, Callable, Set",
      "from dataclasses import dataclass, field",
      "from datetime import datetime",
      "from functools import wraps",
      "import uuid",
      "from identity.core.lambd_id_service import TierLevel",
      "from identity.interface import IdentityClient",
      "from memory.core.tier_system import AccessType, PermissionScope"
    ],
    "event_bus.py": [
      "import asyncio",
      "import logging",
      "import time",
      "import uuid",
      "from collections import defaultdict",
      "from dataclasses import dataclass, field",
      "from typing import Any, Callable, Dict, List, Optional"
    ],
    "demo_coordination.py": [],
    "notion_sync.py": [],
    "supervision.py": [],
    "lukhas_ai_interface.py": [
      "import sys",
      "import os",
      "from pathlib import Path",
      "from typing import Optional, Dict, Any, List # Dict, Any, List not in signatures, but good for context",
      "from enum import Enum",
      "import logging",
      "from router.llm_multiverse_router import multiverse_route"
    ],
    "circuit_breaker.py": [],
    "efficient_communication.py": [
      "import asyncio",
      "import json",
      "import time",
      "import uuid",
      "import hashlib",
      "from typing import Dict, List, Any, Optional, Callable, Set",
      "from dataclasses import dataclass, asdict",
      "from enum import Enum",
      "import threading",
      "from collections import defaultdict",
      "import logging",
      "from core.resource_optimization_integration import ("
    ],
    "working_lukhasbot.py": [],
    "observability_steering.py": [],
    "integrity_probe.py": [],
    "collaboration.py": [],
    "task_manager.py": [
      "import asyncio",
      "import logging",
      "import uuid",
      "from typing import Dict, List, Optional, Any, Callable, Union",
      "from dataclasses import dataclass, field",
      "from datetime import datetime, timedelta",
      "from enum import Enum",
      "from pathlib import Path",
      "import json",
      "import argparse"
    ],
    "validation_script_fixes.py": [
      "import re",
      "from pathlib import Path"
    ],
    "mailbox.py": [],
    "event_replay_snapshot.py": [],
    "test_tiered_state_management.py": [
      "import asyncio",
      "import pytest",
      "import time",
      "from tiered_state_management import ("
    ],
    "automatic_testing_system.py": [
      "import asyncio",
      "import json",
      "import structlog # Changed from logging",
      "import subprocess",
      "import time",
      "import psutil",
      "import threading",
      "import shlex  # For secure command parsing",
      "from datetime import datetime, timedelta",
      "from pathlib import Path",
      "import shlex",
      "from typing import Dict, Any, List, Optional, Callable, Union # Union, asynccontextmanager, tempfile not directly used here",
      "from dataclasses import dataclass, field",
      "import sys",
      "import os",
      "import traceback",
      "import hashlib",
      "import numpy as np",
      "import pandas as pd",
      "from .test_framework import LucasTestFramework # Assuming it's in the same package or discoverable",
      "from collections import Counter"
    ],
    "identity_aware_base_colony.py": [
      "import asyncio",
      "import logging",
      "import time",
      "from typing import Dict, Any, List, Optional, Union, Callable",
      "from datetime import datetime, timezone",
      "from abc import ABC, abstractmethod",
      "import json",
      "from core.colonies.base_colony import BaseColony",
      "from core.symbolism.tags import TagScope, TagPermission",
      "from core.event_sourcing import get_global_event_store",
      "from core.quantum_identity_manager import (",
      "from core.oracle_nervous_system import OracleNervousSystemHub",
      "from core.colonies.ethics_swarm_colony import EthicsSwarmColony",
      "from consciousness.systems.consciousness_colony_integration import DistributedConsciousnessEngine"
    ],
    "monitoring_observability.py": [],
    "quantum_identity_manager.py": [
      "import asyncio",
      "import logging",
      "import hashlib",
      "import time",
      "from typing import Dict, Any, List, Optional, Tuple, Union",
      "from dataclasses import dataclass, field",
      "from datetime import datetime, timezone, timedelta",
      "from enum import Enum",
      "import json",
      "import secrets",
      "from collections import defaultdict, deque",
      "from quantum.post_quantum_crypto import (",
      "from identity.interface import IdentityClient",
      "from core.identity_integration import get_identity_client, LAMBDA_TIERS",
      "from core.identity_aware_base import IdentityAwareService",
      "import statistics"
    ],
    "swarm_identity_orchestrator.py": [
      "import asyncio",
      "import logging",
      "import time",
      "from typing import Dict, Any, List, Optional, Set, Union, Callable, Tuple",
      "from datetime import datetime, timezone, timedelta",
      "from collections import defaultdict, deque",
      "from dataclasses import dataclass, field",
      "import json",
      "from enum import Enum",
      "from core.quantum_identity_manager import (",
      "from core.tier_aware_colony_proxy import (",
      "from core.identity_aware_base_colony import IdentityAwareBaseColony",
      "from core.enhanced_swarm import EnhancedSwarmHub, EnhancedSwarmAgent",
      "from core.bio_symbolic_swarm_hub import BioSymbolicSwarmHub",
      "from core.colonies.base_colony import BaseColony",
      "from core.event_sourcing import get_global_event_store",
      "from core.message_bus import MessageBus",
      "from core.distributed_tracing import DistributedTraceManager"
    ],
    "quantized_cycle_manager.py": [
      "import asyncio",
      "import structlog"
    ],
    "tiered_state_management.py": [
      "import asyncio",
      "import json",
      "import logging",
      "import time",
      "import uuid",
      "from abc import ABC, abstractmethod",
      "from collections import defaultdict",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "from typing import Any, Callable, Dict, List, Optional, Set, Tuple",
      "from threading import RLock",
      "from .event_sourcing import Event, EventStore, Aggregate",
      "from .actor_system import ActorState as ActorSystemState",
      "from .lightweight_concurrency import LightweightActor, MemoryEfficientScheduler",
      "from dataclasses import dataclass as dc"
    ],
    "targeted_api_fixes.py": [
      "import re",
      "from pathlib import Path",
      "from typing import Dict, List, Tuple"
    ],
    "direct_ai_router.py": [],
    "identity_aware_base.py": [
      "from abc import ABC, abstractmethod",
      "from typing import Dict, Any, Optional, List, Callable",
      "from datetime import datetime, timezone",
      "from functools import wraps",
      "import structlog",
      "from identity.interface import IdentityClient",
      "from core.identity_integration import get_identity_client, require_identity",
      "from identity.core.user_tier_mapping import get_tier_mapping_service"
    ],
    "actor_model.py": [
      "import queue",
      "import threading",
      "import time"
    ],
    "agent_coordination.py": [],
    "coordination.py": [
      "import time"
    ],
    "swarm_visualizer.py": [],
    "memoria.py": [],
    "identity_integration.py": [
      "import functools",
      "from typing import Optional, Dict, Any, Callable, Union",
      "from datetime import datetime, timezone",
      "import structlog",
      "from enum import Enum",
      "from core.decorators import lukhas_tier_required",
      "from identity.interface import IdentityClient"
    ],
    "resource_efficiency.py": [
      "import logging",
      "from typing import Dict, Any, List",
      "import psutil"
    ],
    "test_image_processing_pipeline.py": [
      "import asyncio",
      "import os",
      "import tempfile",
      "import time",
      "from pathlib import Path",
      "import pytest",
      "from collections import defaultdict",
      "from image_processing_pipeline import (",
      "from PIL import Image",
      "import glob",
      "from image_processing_pipeline import AggregationColony",
      "import glob"
    ],
    "unified_lukhasbot.py": [],
    "tier_aware_colony_proxy.py": [
      "import asyncio",
      "import logging",
      "import time",
      "from typing import Dict, Any, List, Optional, Union, Callable, Type",
      "from datetime import datetime, timezone",
      "from functools import wraps",
      "import inspect",
      "from core.quantum_identity_manager import (",
      "from core.identity_aware_base_colony import (",
      "from core.colonies.base_colony import BaseColony",
      "from core.colonies.reasoning_colony import ReasoningColony",
      "from core.colonies.memory_colony import MemoryColony",
      "from core.colonies.creativity_colony import CreativityColony",
      "from core.colonies.oracle_colony import OracleColony",
      "from core.colonies.ethics_swarm_colony import EthicsSwarmColony",
      "from core.colonies.temporal_colony import TemporalColony"
    ],
    "actor_system.py": [],
    "p2p_communication.py": [
      "import asyncio",
      "import hashlib",
      "import json",
      "import logging",
      "import socket",
      "import time",
      "import uuid",
      "from collections import defaultdict",
      "from dataclasses import dataclass",
      "from enum import Enum",
      "from typing import Any, Callable, Dict, List, Optional, Set, Tuple",
      "import random"
    ],
    "governance.py": [],
    "state_management.py": [
      "import json",
      "import os"
    ],
    "validation.py": [
      "import asyncio",
      "import sys",
      "import time",
      "import os",
      "from pathlib import Path",
      "import logging",
      "import traceback # For detailed error logging",
      "from core.automatic_testing_system import run, watch, report, capture, AutomaticTestingSystem, TestOperation"
    ],
    "observatory.py": [],
    "decorators.py": [
      "import functools",
      "import structlog",
      "from typing import Callable, Optional, Union, Any",
      "from datetime import datetime, timezone",
      "from memory.systems.tier_system import (",
      "from identity.interface import IdentityClient"
    ],
    "net/__init__.py": [],
    "net/client_event.py": [
      "import typing"
    ],
    "colonies/memory_colony_enhanced.py": [
      "import asyncio",
      "import json",
      "import logging",
      "import time",
      "from typing import Dict, Any, List, Optional, Tuple",
      "from datetime import datetime",
      "from collections import defaultdict, deque",
      "import hashlib",
      "from core.colonies.base_colony import BaseColony",
      "from core.swarm import SwarmAgent",
      "from core.efficient_communication import MessagePriority"
    ],
    "colonies/temporal_colony.py": [],
    "colonies/creativity_colony.py": [
      "import logging",
      "from typing import Dict, Any",
      "from bio.bio_homeostasis import fatigue_level",
      "from core.colonies.base_colony import BaseColony"
    ],
    "colonies/oracle_colony.py": [
      "import asyncio",
      "import logging",
      "from datetime import datetime, timedelta",
      "from typing import Dict, Any, List, Optional, Tuple, Union",
      "from dataclasses import dataclass",
      "import json",
      "from core.colonies.base_colony import BaseColony",
      "from core.colonies.supervisor_agent import SupervisorAgent",
      "from core.event_sourcing import get_global_event_store",
      "from core.actor_system import get_global_actor_system, ActorRef",
      "from bridge.openai_core_service import OpenAICoreService, OpenAIRequest, ModelType"
    ],
    "colonies/tensor_colony_ops.py": [],
    "colonies/memory_colony.py": [
      "import logging",
      "from typing import Dict, Any",
      "from core.colonies.base_colony import BaseColony"
    ],
    "colonies/base_colony.py": [
      "import asyncio",
      "import logging",
      "import time",
      "import uuid",
      "from abc import ABC, abstractmethod",
      "from typing import List, Dict, Any, Optional, Tuple",
      "from core.symbolism.tags import TagScope, TagPermission",
      "from core.symbolism.methylation_model import MethylationModel",
      "from core.colonies.supervisor_agent import SupervisorAgent",
      "from core.event_sourcing import get_global_event_store, AIAgentAggregate",
      "from core.actor_system import get_global_actor_system, AIAgentActor, ActorRef",
      "from core.distributed_tracing import create_ai_tracer",
      "from core.efficient_communication import EfficientCommunicationFabric"
    ],
    "colonies/supervisor_agent.py": [
      "import logging",
      "from typing import Dict, Any"
    ],
    "colonies/governance_colony_enhanced.py": [],
    "colonies/governance_colony.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, Any",
      "from core.colonies.base_colony import BaseColony",
      "from ethics.meg_bridge import create_meg_bridge, MEGPolicyBridge",
      "from ethics.policy_engines.base import Decision, RiskLevel"
    ],
    "colonies/reasoning_colony.py": [
      "import asyncio",
      "import logging",
      "import uuid",
      "import time",
      "from typing import Dict, Any, List",
      "from core.colonies.base_colony import BaseColony",
      "from core.efficient_communication import MessagePriority",
      "from core.symbolism.tags import TagPermission, TagScope",
      "from core.symbolic.collapse.vector_ops import vector_collapse",
      "from typing import Optional",
      "from memory.systems.agent_memory import SymbolAwareTieredMemory"
    ],
    "colonies/ethics_swarm_colony.py": [
      "import asyncio",
      "import logging",
      "import hashlib",
      "import json",
      "import time",
      "import uuid",
      "from datetime import datetime, timedelta",
      "from typing import Dict, Any, List, Optional, Set, Tuple, Union",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "import numpy as np",
      "from collections import deque, defaultdict",
      "from core.colonies.base_colony import BaseColony",
      "from core.colonies.supervisor_agent import SupervisorAgent",
      "from core.event_sourcing import get_global_event_store",
      "from core.actor_system import get_global_actor_system",
      "from tools.collapse_simulator import CollapseSimulator",
      "from core.monitoring.collapse_tracker import CollapseTracker",
      "from core.monitoring.collapse_tracker import CollapseTracker",
      "from core.verifold.verifold_unified import VeriFoldConnector",
      "from trace.drift_metrics import DriftMetrics"
    ],
    "symbolic_bridge/token_map.py": [
      "import structlog",
      "from typing import Dict, Any, Optional"
    ],
    "symbolic_bridge/integrator.py": [
      "import structlog"
    ],
    "identity/mapper.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, List, Optional, Any",
      "from datetime import datetime",
      "import asyncio"
    ],
    "identity/__init__.py": [],
    "identity/processor.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, List, Optional, Any",
      "from datetime import datetime",
      "import asyncio"
    ],
    "identity/engine.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, List, Optional, Any",
      "from datetime import datetime",
      "import asyncio"
    ],
    "identity/persona_engine.py": [
      "import asyncio",
      "import logging",
      "from typing import Dict, List, Optional, Any",
      "from datetime import datetime",
      "import asyncio"
    ],
    "identity/lukhas_id_manager.py": [],
    "identity/manager.py": [
      "import hashlib",
      "import json",
      "import logging",
      "import asyncio",
      "from datetime import datetime",
      "from typing import Dict, List, Any, Optional, Tuple",
      "import uuid"
    ],
    "identity/vault/__init__.py": [],
    "spine/integration_orchestrator.py": [
      "import os",
      "import sys",
      "import asyncio",
      "import json",
      "import shutil",
      "from pathlib import Path",
      "from typing import Dict, List, Optional, Tuple",
      "from dataclasses import dataclass",
      "from datetime import datetime",
      "import importlib.util"
    ],
    "spine/__init__.py": [],
    "spine/emotion_mapper_alt.py": [],
    "security/__init__.py": [],
    "personality/lukhas_es_creativo.py": [
      "from typing import Dict, Any, List",
      "import logging"
    ],
    "personality/personality.py": [
      "import time",
      "from collections import defaultdict",
      "from datetime import datetime, timedelta",
      "from enum import Enum",
      "from typing import Any, Dict, List, Optional, Tuple",
      "from dataclasses import dataclass, field",
      "import structlog"
    ],
    "personality/__init__.py": [
      "import logging",
      "from typing import Optional, Dict, Any"
    ],
    "personality/creative_expressions.py": [
      "import json",
      "import random",
      "from typing import Dict, List, Optional",
      "import structlog"
    ],
    "personality/neuro_haiku_generator.py": [
      "import random",
      "import logging",
      "from typing import Dict, List, Optional, Any"
    ],
    "personality/lukhas_es_creativo_clean.py": [
      "from typing import Dict, Any, List",
      "import logging"
    ],
    "symbolic_diagnostics/trace_repair_engine.py": [
      "from typing import List, Dict, Any"
    ],
    "symbolic_diagnostics/__init__.py": [],
    "unified/bio_signals.py": [],
    "unified/integration.py": [],
    "unified/orchestration.py": [],
    "output/__init__.py": [],
    "output/message_hub.py": [],
    "utils/symbolic_utils.py": [],
    "utils/__init__.py": [],
    "utils/dream_utils.py": [],
    "observability/collector.py": [
      "import asyncio",
      "import time",
      "from collections import defaultdict",
      "from dataclasses import dataclass, field",
      "from typing import Any, Dict, List, Optional",
      "import psutil"
    ],
    "introspection/__init__.py": [],
    "introspection/introspector.py": [
      "import ast",
      "import os",
      "import re",
      "import sys",
      "from pathlib import Path",
      "from typing import Dict, List, Optional, Any, Tuple",
      "import logging",
      "from datetime import datetime",
      "import json",
      "import argparse"
    ],
    "rem/streamlit_lidar.py": [],
    "rem/__init__.py": [],
    "rem/sleep_cycle.py": [],
    "rem/visualizer.py": [],
    "adaptive_ai/Meta_Learning/__init__.py": [],
    "testing/plugin_test_framework.py": [
      "from sdk.tools.plugin_test_framework import LucasPluginTestRunner",
      "import asyncio",
      "import json",
      "import time",
      "import traceback",
      "from dataclasses import dataclass, field",
      "from datetime import datetime, timedelta",
      "from pathlib import Path",
      "from typing import Dict, List, Optional, Any, Callable, Union",
      "import importlib.util",
      "import inspect",
      "import sys",
      "import subprocess",
      "import ast"
    ],
    "testing/__init__.py": [],
    "symbolic_reasoning/symbolic_trace.py": [],
    "ethics/__init__.py": [
      "import structlog",
      "from enum import Enum",
      "from typing import Dict, Any, List, Optional",
      "from datetime import datetime"
    ],
    "ethics/dream_ethics_injector.py": [
      "import asyncio",
      "from dataclasses import dataclass, field",
      "from typing import Dict, List, Set, Optional, Tuple, Any",
      "from datetime import datetime",
      "import json",
      "import math",
      "from pathlib import Path",
      "from ethics import EthicsEngine, EthicalPolicy, PolicyViolation"
    ],
    "ai/integration_manager.py": [
      "import os, json, asyncio, subprocess, uuid # For example",
      "from datetime import datetime, timezone",
      "from pathlib import Path",
      "from typing import Dict, List, Any, Optional, Union",
      "from dataclasses import dataclass, field",
      "import structlog",
      "import aiohttp; AIOHTTP_AVAILABLE_FLAG = True"
    ],
    "examples/mailbox_demo.py": [
      "import asyncio",
      "import json",
      "import time",
      "from typing import Dict, Any",
      "import sys",
      "from pathlib import Path",
      "from core.actor_system import Actor, ActorSystem, get_global_actor_system",
      "from core.mailbox import ("
    ],
    "symbolism/methylation_model.py": [],
    "symbolism/tags.py": [
      "from enum import Enum"
    ],
    "symbolism/archiver.py": [
      "import asyncio",
      "import json",
      "import logging",
      "import time",
      "from typing import Dict, Any, List",
      "from core.colonies.base_colony import BaseColony"
    ],
    "verifold/verifold_unified.py": [
      "import asyncio",
      "import hashlib",
      "import json",
      "import time",
      "from datetime import datetime, timezone",
      "from typing import Dict, Any, Optional, List, Set",
      "from dataclasses import dataclass, asdict",
      "from enum import Enum",
      "import structlog",
      "import oqs  # Post-quantum cryptography",
      "from identity.interface import IdentityClient, verify_access, check_consent, log_activity",
      "from core.tier_unification_adapter import TierMappingConfig"
    ],
    "orchestration/energy_aware_execution_planner.py": [
      "import asyncio",
      "import numpy as np",
      "import structlog",
      "from typing import Dict, List, Any, Optional, Tuple, Union, Callable",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "from datetime import datetime, timezone, timedelta",
      "from collections import deque",
      "import json",
      "import threading",
      "from concurrent.futures import ThreadPoolExecutor",
      "from core.bio_symbolic import ProtonGradient",
      "from orchestration.orchestrator import SystemOrchestrator",
      "from memory.core_memory.memoria import MemoryManager",
      "import time",
      "import random"
    ],
    "governance/__init__.py": [],
    "governance/governance_colony.py": [
      "import logging",
      "from typing import Dict, Any",
      "from core.colonies.base_colony import BaseColony"
    ],
    "meta_learning/rate_modulator.py": [
      "from dataclasses import dataclass",
      "from enum import Enum"
    ],
    "meta_learning/remediator_agent.py": [
      "import json",
      "import time",
      "import structlog # \u039bTRACE: Using structlog for structured logging",
      "import numpy as np",
      "from datetime import datetime, timedelta, timezone # Added timezone",
      "from typing import Dict, List, Optional, Tuple, Any, Set # Added Set for capabilities",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "import hashlib",
      "import asyncio",
      "from pathlib import Path # For config/manifest loading",
      "from ..spine.healix_mapper import calculate_drift_score # Conceptual, might be part of LUKHAS core",
      "from ..bio_core.memory.quantum_memory_manager import QuantumMemoryManager # Conceptual",
      "from ...brain.memory.AdvancedMemoryManager import AdvancedMemoryManager # Conceptual",
      "from ...AID.dream_engine.dream_replay import replay_dream_by_id, replay_recent_dreams # Conceptual",
      "from ...MODULES.memoria.lukhas_replayer import LucasReplayer # Conceptual, 'lukhas' might be legacy",
      "from ..bio_symbolic.glyph_id_hash import GlyphIDHasher # Conceptual",
      "from ...LUKHAS_ID.backend.app.crypto import generate_collapse_hash # Conceptual",
      "from .monitor_dashboard import MetaLearningMonitorDashboard # Corrected: was MetaLearningDashboard",
      "from .rate_modulator import DynamicLearningRateModulator # Corrected: was DynamicRateModulator"
    ],
    "meta_learning/symbolic_feedback.py": [
      "from dataclasses import dataclass"
    ],
    "meta_learning/monitor_dashboard.py": [
      "from dataclasses import dataclass",
      "from datetime import datetime"
    ],
    "meta_learning/enhancement_system.py": [],
    "symbolic/collapse/vector_ops.py": [
      "from __future__ import annotations",
      "from typing import List",
      "from core.symbolism.tags import TagScope"
    ],
    "user_interface_manager/__init__.py": [],
    "user_interface_manager/text_handler.py": [
      "import logging",
      "from typing import Optional, Dict"
    ],
    "user_interface_manager/voice_handler.py": [
      "import logging",
      "from typing import Optional, Dict"
    ],
    "monitoring/collapse_tracker.py": [
      "import asyncio",
      "import json",
      "import logging",
      "import math",
      "import uuid",
      "from collections import Counter, deque",
      "from dataclasses import dataclass, field, asdict",
      "from datetime import datetime, timezone",
      "from enum import Enum",
      "from typing import Dict, List, Any, Optional, Tuple, Callable",
      "from pathlib import Path",
      "import structlog",
      "import random"
    ],
    "monitoring/__init__.py": [],
    "monitoring/collapse_integration.py": [],
    "monitoring/drift_monitor.py": [],
    "performance/__init__.py": [],
    "performance/orchestrator.py": [
      "import asyncio",
      "import json",
      "import logging",
      "import time",
      "from datetime import datetime, timedelta",
      "from typing import Dict, Any, List, Optional, Tuple, Set",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "from pathlib import Path",
      "from core.monitoring_observability import (",
      "from ethics.compliance_engine import ComplianceEngine",
      "from identity.core.trace.activity_logger import LambdaTraceLogger",
      "from identity.interface import IdentityClient as RealIdentityClient"
    ],
    "infrastructure/node_collection.py": [],
    "infrastructure/base_node.py": [],
    "infrastructure/node_registry.py": [
      "import logging",
      "import importlib",
      "import inspect",
      "import os",
      "import time",
      "import uuid",
      "from typing import Dict, Any, List, Optional, Type, Union, Callable"
    ],
    "infrastructure/node_manager.py": [
      "import logging",
      "import time",
      "import os",
      "import json",
      "from typing import Dict, Any, List, Optional, Callable, Set, Tuple"
    ],
    "modules/__init__.py": [],
    "modules/nias/__init__.py": [],
    "modules/nias/dream_recorder.py": [
      "from typing import Dict, Any, Optional, List",
      "import json",
      "import logging",
      "from datetime import datetime",
      "import os",
      "import csv"
    ],
    "neural_architectures/__init__.py": [],
    "neural_architectures/neural_integrator.py": [],
    "neural_architectures/abas/__init__.py": [],
    "neural_architectures/abas/abas_quantum_specialist.py": [
      "import asyncio",
      "import logging",
      "import json",
      "import numpy as np",
      "import hashlib",
      "import math",
      "from datetime import datetime",
      "from typing import Dict, List, Any, Optional, Tuple",
      "from dataclasses import dataclass, field",
      "from enum import Enum",
      "import uuid",
      "import copy"
    ],
    "interaction/symptom_reporter.py": [],
    "interaction/__init__.py": [],
    "helpers/__init__.py": [
      "import structlog",
      "import datetime",
      "import re",
      "import json",
      "from typing import Any, Optional, Dict, List"
    ],
    "services/location/geofencing_manager.py": [
      "import asyncio",
      "import json",
      "from typing import Dict, List, Optional, Tuple",
      "from dataclasses import dataclass",
      "from datetime import datetime",
      "import logging",
      "import math"
    ],
    "services/location/__init__.py": [],
    "services/location/tracker.py": [
      "import asyncio",
      "import logging",
      "from typing import Optional, Callable, Dict, List",
      "from datetime import datetime, timedelta",
      "from dataclasses import dataclass",
      "import math"
    ],
    "services/personality/lukhas_personas.py": [],
    "services/personality/__init__.py": [],
    "services/personality/lukhas_empathy.py": [],
    "interfaces/research_dashboard.py": [
      "import streamlit as st",
      "from pathlib import Path",
      "import subprocess",
      "import re",
      "import os",
      "import pypandoc",
      "import pandas as pd",
      "import importlib.util"
    ],
    "interfaces/__init__.py": [],
    "interfaces/cli.py": [
      "import sys",
      "import os",
      "import logging",
      "from datetime import datetime",
      "import json"
    ],
    "interfaces/lukhas_socket.py": [
      "import asyncio",
      "import websockets",
      "import json",
      "import time",
      "import os",
      "import logging"
    ],
    "interfaces/app.py": [
      "import streamlit as st",
      "from pathlib import Path",
      "import subprocess",
      "import re",
      "import os",
      "import pypandoc"
    ],
    "interfaces/custom_llm.py": [],
    "interfaces/launcher.py": [],
    "interfaces/dev_dashboard.py": [
      "import streamlit as st",
      "from pathlib import Path",
      "import subprocess",
      "import re",
      "import os",
      "import pypandoc",
      "import pandas as pd"
    ],
    "interfaces/main.py": [],
    "interfaces/dashboad.py": [],
    "interfaces/web_formatter.py": [
      "import json",
      "import os",
      "from datetime import datetime",
      "import argparse"
    ],
    "interfaces/ui/gui_launcher.py": [],
    "interfaces/ui/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/ui/app.py": [],
    "interfaces/ui/config/lukhas_dashboard_settings.py": [],
    "interfaces/ui/config/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/ui/components/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/ui/components/dream_export_streamlit.py": [
      "import streamlit as st",
      "import os",
      "import json"
    ],
    "interfaces/ui/components/voice_preview_streamlit.py": [
      "import streamlit as st",
      "import json",
      "from pathlib import Path",
      "from datetime import datetime"
    ],
    "interfaces/ui/components/audio_exporter.py": [
      "import json",
      "from pathlib import Path",
      "from datetime import datetime, timezone",
      "import sys",
      "import subprocess",
      "import argparse",
      "import os",
      "from core.interfaces.voice.core.sayit import safe_subprocess_run, SecurityError, get_env_var",
      "from elevenlabs.client import ElevenLabs",
      "from elevenlabs import generate, Voice"
    ],
    "interfaces/ui/components/replay_graphs.py": [],
    "interfaces/ui/components/tier_visualizer.py": [
      "import streamlit as st",
      "import json",
      "import pandas as pd"
    ],
    "interfaces/ui/components/payload_builder.py": [],
    "interfaces/ui/adaptive/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/ui/adaptive/ui_orchestrator.py": [
      "from typing import Dict, Any",
      "from memory.systems.helix_dna import HelixMemory",
      "from voice.cognitive_voice import CognitiveVoice"
    ],
    "interfaces/tools/research/research_dashboard.py": [
      "import streamlit as st",
      "from pathlib import Path",
      "import subprocess",
      "import re",
      "import os",
      "from datetime import datetime",
      "import json",
      "import pypandoc",
      "import pandas as pd",
      "import importlib.util",
      "import pandas as pd",
      "import atexit"
    ],
    "interfaces/tools/research/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/tools/research/dev_dashboard.py": [
      "import streamlit as st",
      "from pathlib import Path",
      "import subprocess",
      "import re",
      "import os",
      "import pypandoc",
      "import pandas as pd"
    ],
    "interfaces/tools/security/session_logger.py": [
      "from datetime import datetime, timedelta",
      "import json",
      "from pathlib import Path",
      "import os",
      "import pytz"
    ],
    "interfaces/tools/security/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/tools/dao/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/tools/dao/dao_vote.py": [
      "import argparse",
      "import json",
      "import os",
      "import logging",
      "from datetime import datetime"
    ],
    "interfaces/tools/dao/dao_propose.py": [
      "import argparse",
      "import json",
      "from datetime import datetime",
      "import os",
      "import logging"
    ],
    "interfaces/tools/cli/speak.py": [],
    "interfaces/tools/cli/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/tools/cli/lukhasdream_cli.py": [
      "import argparse",
      "import subprocess",
      "import logging",
      "from pathlib import Path"
    ],
    "interfaces/tools/cli/command_registry.py": [
      "import logging"
    ],
    "interfaces/nias/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging",
      "from .src.core.nias_plugin import NIASPlugin # \u039bDEP: .src.core.nias_plugin",
      "from .src.core.config import NIASConfig     # \u039bDEP: .src.core.config"
    ],
    "interfaces/nias/generate_nias_docs.py": [
      "import os",
      "import sys",
      "import json",
      "import logging",
      "from pathlib import Path",
      "from datetime import datetime"
    ],
    "interfaces/logic/consent_manager.py": [
      "import structlog",
      "from lukhas_config import TIER_PERMISSIONS"
    ],
    "interfaces/logic/delegate_logic.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging",
      "from typing import Tuple, Dict, Any # \u039bMODIFICATION: Added typing"
    ],
    "interfaces/logic/agent_logic_architecture.py": [
      "import structlog"
    ],
    "interfaces/logic/voice_narration_player.py": [],
    "interfaces/logic/agent_self.py": [],
    "interfaces/logic/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/logic/agent_core.py": [],
    "interfaces/logic/orchestrator.py": [],
    "interfaces/logic/safety_filter.py": [],
    "interfaces/logic/memory_handler.py": [],
    "interfaces/logic/context/context_builder.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging",
      "from typing import Dict, Any, List # \u039bMODIFICATION: Added typing",
      "from core.context.context_builder import build_user_context (Path might be core.interfaces.logic.context.context_builder)"
    ],
    "interfaces/logic/context/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/logic/voice/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/logic/voice/voice_renderer.py": [],
    "interfaces/voice/lukhas_voice_agent.py": [],
    "interfaces/voice/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/voice/lukhas_listen.py": [],
    "interfaces/voice/edge_voice.py": [],
    "interfaces/voice/core/sayit.py": [],
    "interfaces/voice/core/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/voice/voice_emotional/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/voice/voice_emotional/context_aware_modular_voice.py": [
      "from typing import Dict, Any, List",
      "import datetime",
      "import logging",
      "import time",
      "import hashlib"
    ],
    "interfaces/voice/input/__init__.py": [],
    "interfaces/voice/integrations/elevenlabs/__init__.py": [],
    "interfaces/as_agent/agent_logic/voice_narration_player.py": [],
    "interfaces/as_agent/agent_logic/agent_self.py": [],
    "interfaces/as_agent/agent_logic/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/agent_logic/orchestrator.py": [],
    "interfaces/as_agent/agent_logic/safety_filter.py": [],
    "interfaces/as_agent/agent_logic/memory_handler.py": [],
    "interfaces/as_agent/streamlit/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/streamlit/app.py": [],
    "interfaces/as_agent/streamlit/components/__init__.py": [],
    "interfaces/as_agent/streamlit/components/dream_export_streamlit.py": [
      "import streamlit as st",
      "import os",
      "import json"
    ],
    "interfaces/as_agent/streamlit/components/voice_preview_streamlit.py": [
      "import streamlit as st",
      "import json",
      "from pathlib import Path",
      "from datetime import datetime"
    ],
    "interfaces/as_agent/streamlit/components/replay_graphs.py": [],
    "interfaces/as_agent/streamlit/components/tier_visualizer.py": [
      "import streamlit as st",
      "import json",
      "import pandas as pd"
    ],
    "interfaces/as_agent/streamlit/components/payload_builder.py": [],
    "interfaces/as_agent/core/lukhas_nias_filter.py": [],
    "interfaces/as_agent/core/lukhas_overview_log.py": [
      "from datetime import datetime",
      "import json",
      "from pathlib import Path"
    ],
    "interfaces/as_agent/core/nias_filter.py": [],
    "interfaces/as_agent/core/duet_conductor.py": [],
    "interfaces/as_agent/core/lukhas_agent_handoff.py": [],
    "interfaces/as_agent/core/checkout_handler.py": [],
    "interfaces/as_agent/core/reward_reputation.py": [],
    "interfaces/as_agent/core/affiliate_log.py": [],
    "interfaces/as_agent/core/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/core/vision_prompts.py": [],
    "interfaces/as_agent/core/vendor_sync.py": [],
    "interfaces/as_agent/core/generate_image.py": [
      "import structlog",
      "from LUKHAS_AGENT_PLUGIN.core.lukhas_render_ai import generate_image as dalle_generate"
    ],
    "interfaces/as_agent/core/generate_video.py": [],
    "interfaces/as_agent/core/render_ai.py": [],
    "interfaces/as_agent/core/filter_gpt.py": [],
    "interfaces/as_agent/core/gatekeeper.py": [],
    "interfaces/as_agent/core/scheduler.py": [],
    "interfaces/as_agent/core/voice_duet.py": [],
    "interfaces/as_agent/core/emotion_log.py": [],
    "interfaces/as_agent/core/wallet.py": [],
    "interfaces/as_agent/auth/lukhas_registry.py": [],
    "interfaces/as_agent/auth/vendor_hospitality_sync.py": [],
    "interfaces/as_agent/auth/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/sample_payloads/trace_log_viewer.py": [],
    "interfaces/as_agent/sample_payloads/__init__.py": [],
    "interfaces/as_agent/utils/symbolic_utils.py": [],
    "interfaces/as_agent/utils/constants.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging",
      "from typing import Dict, List, Union, Any # \u039bMODIFICATION: Added typing for future constant definitions"
    ],
    "interfaces/as_agent/utils/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/utils/symbolic_github_export.py": [],
    "interfaces/as_agent/sys/nias/main_loop.py": [],
    "interfaces/as_agent/sys/nias/replay_queue.py": [],
    "interfaces/as_agent/sys/nias/delivery_loop.py": [
      "from core.interfaces.as_agent.utils.constants import SYMBOLIC_TIERS, DEFAULT_COOLDOWN_SECONDS, SEED_TAG_VOCAB, SYMBOLIC_THRESHOLDS",
      "from core.interfaces.as_agent.utils.symbolic_utils import tier_label, summarize_emotion_vector"
    ],
    "interfaces/as_agent/sys/nias/feedback_log_viewer.py": [
      "import json",
      "from pathlib import Path",
      "import sys"
    ],
    "interfaces/as_agent/sys/nias/dream_narrator_queue.py": [
      "import json",
      "import os"
    ],
    "interfaces/as_agent/sys/nias/voice_narrator.py": [],
    "interfaces/as_agent/sys/nias/validate_payload.py": [
      "import json",
      "import sys",
      "import jsonschema",
      "from jsonschema import validate"
    ],
    "interfaces/as_agent/sys/nias/nias_core.py": [],
    "interfaces/as_agent/sys/nias/replay_heatmap.py": [],
    "interfaces/as_agent/sys/nias/__init__.py": [],
    "interfaces/as_agent/sys/nias/inject_message_simulator.py": [],
    "interfaces/as_agent/sys/nias/trace_logger.py": [],
    "interfaces/as_agent/sys/nias/dream_export_streamlit.py": [],
    "interfaces/as_agent/sys/nias/generate_payload_cli.py": [
      "import json",
      "from datetime import datetime",
      "from pathlib import Path"
    ],
    "interfaces/as_agent/sys/nias/symbolic_reply_generator.py": [
      "import json",
      "import random",
      "from core.modules.nias.symbolic_reply_generator import generate_symbolic_reply"
    ],
    "interfaces/as_agent/sys/nias/05_25_dream_clustering_engine.py": [
      "import json",
      "from pathlib import Path",
      "from collections import defaultdict"
    ],
    "interfaces/as_agent/sys/nias/symbolic_matcher.py": [
      "from core.modules.nias.symbolic_matcher import match_message_to_context"
    ],
    "interfaces/as_agent/sys/nias/dream_log_viewer.py": [],
    "interfaces/as_agent/sys/nias/consent_filter.py": [
      "from core.interfaces.as_agent.utils.constants import SYMBOLIC_TIERS, DEFAULT_COOLDOWN_SECONDS, SEED_TAG_VOCAB, SYMBOLIC_THRESHOLDS",
      "from core.interfaces.as_agent.utils.symbolic_utils import tier_label, summarize_emotion_vector",
      "from core.modules.nias.consent_filter import is_allowed"
    ],
    "interfaces/as_agent/sys/nias/replay_visualizer.py": [
      "import json",
      "from pathlib import Path",
      "from collections import Counter",
      "from datetime import datetime, timezone"
    ],
    "interfaces/as_agent/sys/nias/dream_recorder.py": [
      "import json",
      "from datetime import datetime",
      "import os",
      "from core.modules.nias.dream_recorder import record_dream_message"
    ],
    "interfaces/as_agent/sys/nias/feedback_loop.py": [
      "import json",
      "from datetime import datetime",
      "from pathlib import Path",
      "from core.modules.nias.feedback_loop import record_feedback"
    ],
    "interfaces/as_agent/sys/nias/feedback_insight_cli.py": [],
    "interfaces/as_agent/sys/nias/narration_controller.py": [
      "from pathlib import Path",
      "import json"
    ],
    "interfaces/as_agent/sys/dast/dast_core.py": [
      "from core.interfaces.as_agent.utils.constants import SYMBOLIC_TIERS, DEFAULT_COOLDOWN_SECONDS, SEED_TAG_VOCAB, SYMBOLIC_THRESHOLDS",
      "from core.interfaces.as_agent.utils.symbolic_utils import tier_label, summarize_emotion_vector",
      "from core.modules.dast.dast_core import get_current_tags, add_tag, remove_tag"
    ],
    "interfaces/as_agent/sys/dast/store.py": [
      "import json",
      "import json",
      "from core.modules.dast.store import save_tags_to_file, load_tags_from_file"
    ],
    "interfaces/as_agent/sys/dast/partner_sdk.py": [
      "from core.interfaces.as_agent.utils.constants import SYMBOLIC_TIERS, DEFAULT_COOLDOWN_SECONDS, SEED_TAG_VOCAB, SYMBOLIC_THRESHOLDS",
      "from core.interfaces.as_agent.utils.symbolic_utils import tier_label, summarize_emotion_vector",
      "from core.modules.dast.partner_sdk import receive_partner_input"
    ],
    "interfaces/as_agent/sys/dast/aggregator.py": [
      "from core.interfaces.as_agent.utils.constants import SYMBOLIC_TIERS, DEFAULT_COOLDOWN_SECONDS, SEED_TAG_VOCAB, SYMBOLIC_THRESHOLDS",
      "from core.interfaces.as_agent.utils.symbolic_utils import tier_label, summarize_emotion_vector",
      "from core.modules.dast.aggregator import aggregate_symbolic_tags"
    ],
    "interfaces/as_agent/sys/dast/dast.py": [],
    "interfaces/as_agent/sys/dast/__init__.py": [],
    "interfaces/as_agent/sys/dast/schedule_manager.py": [
      "from core.modules.dast.schedule_manager import is_time_to_deliver"
    ],
    "interfaces/as_agent/sys/dast/lukhas_launcher.py": [],
    "interfaces/as_agent/sys/dast/dast_logger.py": [
      "from core.modules.dast.dast_logger import log_tag_event"
    ],
    "interfaces/as_agent/sys/abas/abas.py": [
      "from core.modules.abas.abas import is_allowed_now"
    ],
    "interfaces/as_agent/sys/abas/__init__.py": [],
    "interfaces/as_agent/widgets/live_renderer_widget.py": [],
    "interfaces/as_agent/widgets/terminal_widget.py": [],
    "interfaces/as_agent/widgets/widget_engine.py": [],
    "interfaces/as_agent/widgets/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "interfaces/as_agent/widgets/lukhas_widget_archive.py": [],
    "interfaces/as_agent/widgets/travel_widget.py": [
      "from datetime import datetime, timedelta",
      "import uuid"
    ],
    "interfaces/as_agent/widgets/delivery_tracker_widget.py": [
      "import uuid",
      "from datetime import datetime, timedelta"
    ],
    "interfaces/as_agent/widgets/widget_config.py": [],
    "interfaces/as_agent/news_and_social/lukhass_dispatcher.py": [],
    "interfaces/as_agent/news_and_social/lukhas_affiliate_log.py": [
      "from datetime import datetime",
      "import json",
      "from pathlib import Path"
    ],
    "interfaces/as_agent/news_and_social/__init__.py": [
      "import structlog # \u039bMODIFICATION: Added structlog for standardized logging"
    ],
    "router/__init__.py": [],
    "router/llm_multiverse_router.py": []
  },
  "categories": {
    "actor_system": [
      "minimal_actor.py",
      "actor_supervision_integration.py",
      "event_replayer.py",
      "event_sourcing.py",
      "event_bus.py",
      "event_replay_snapshot.py",
      "actor_model.py",
      "actor_system.py",
      "net/client_event.py"
    ],
    "colonies": [
      "specialized_colonies.py",
      "identity_aware_base_colony.py",
      "tier_aware_colony_proxy.py",
      "colonies/memory_colony_enhanced.py",
      "colonies/temporal_colony.py",
      "colonies/creativity_colony.py",
      "colonies/oracle_colony.py",
      "colonies/tensor_colony_ops.py",
      "colonies/memory_colony.py",
      "colonies/base_colony.py",
      "colonies/supervisor_agent.py",
      "colonies/governance_colony_enhanced.py",
      "colonies/governance_colony.py",
      "colonies/reasoning_colony.py",
      "colonies/ethics_swarm_colony.py",
      "governance/governance_colony.py"
    ],
    "integration": [
      "integrated_system.py",
      "integration_hub.py",
      "integrator.py",
      "resource_optimization_integration.py",
      "bio_symbolic_swarm_hub.py",
      "identity_integration.py",
      "symbolic_bridge/integrator.py",
      "spine/integration_orchestrator.py",
      "unified/integration.py",
      "output/message_hub.py",
      "ai/integration_manager.py",
      "monitoring/collapse_integration.py",
      "neural_architectures/neural_integrator.py",
      "interfaces/voice/integrations/elevenlabs/__init__.py",
      "interfaces/as_agent/utils/symbolic_github_export.py"
    ],
    "symbolic": [
      "symbolic_contract.py",
      "symbolic_drift_analyzer.py",
      "symbolic_boot.py",
      "symbolic_arbitration.py",
      "symbolic_bridge/token_map.py",
      "symbolic_diagnostics/trace_repair_engine.py",
      "symbolic_diagnostics/__init__.py",
      "utils/symbolic_utils.py",
      "symbolic_reasoning/symbolic_trace.py",
      "meta_learning/symbolic_feedback.py",
      "symbolic/collapse/vector_ops.py",
      "interfaces/as_agent/utils/symbolic_utils.py",
      "interfaces/as_agent/sys/nias/symbolic_reply_generator.py",
      "interfaces/as_agent/sys/nias/symbolic_matcher.py"
    ],
    "networking": [
      "net/__init__.py"
    ],
    "monitoring": [
      "monitoring_observability.py",
      "meta_learning/monitor_dashboard.py",
      "monitoring/collapse_tracker.py",
      "monitoring/__init__.py",
      "monitoring/drift_monitor.py",
      "interfaces/as_agent/sample_payloads/trace_log_viewer.py",
      "interfaces/as_agent/sys/nias/trace_logger.py"
    ],
    "other": [
      "api_controllers.py",
      "fault_tolerance.py",
      "apply_api_fixes.py",
      "lukhas_id.py",
      "swarm.py",
      "resource_efficiency_analyzer.py",
      "generate_autotest_docs.py",
      "quorum_override.py",
      "resource_scheduler.py",
      "plugin_registry.py",
      "config.py",
      "lukhas_core.py",
      "config_manager.py",
      "distributed_tracing.py",
      "autotest_validation.py",
      "api_diff_analyzer.py",
      "p2p_fabric.py",
      "benchmark_swarm.py",
      "image_processing_pipeline.py",
      "oracle_nervous_system.py",
      "tier_unification_adapter.py",
      "cluster_sharding.py",
      "test_coordination_simple.py",
      "__init__.py",
      "enhanced_swarm.py",
      "test_mailbox_simple.py",
      "energy_consumption_analysis.py",
      "test_p2p_communication.py",
      "practical_optimizations.py",
      "fallback_services.py",
      "consistency_manager.py",
      "module_registry.py",
      "demo_coordination.py",
      "notion_sync.py",
      "supervision.py",
      "lukhas_ai_interface.py",
      "circuit_breaker.py",
      "efficient_communication.py",
      "working_lukhasbot.py",
      "observability_steering.py",
      "integrity_probe.py",
      "collaboration.py",
      "task_manager.py",
      "validation_script_fixes.py",
      "mailbox.py",
      "test_tiered_state_management.py",
      "automatic_testing_system.py",
      "quantum_identity_manager.py",
      "swarm_identity_orchestrator.py",
      "quantized_cycle_manager.py",
      "tiered_state_management.py",
      "targeted_api_fixes.py",
      "direct_ai_router.py",
      "identity_aware_base.py",
      "agent_coordination.py",
      "coordination.py",
      "swarm_visualizer.py",
      "memoria.py",
      "resource_efficiency.py",
      "test_image_processing_pipeline.py",
      "unified_lukhasbot.py",
      "p2p_communication.py",
      "governance.py",
      "state_management.py",
      "validation.py",
      "observatory.py",
      "decorators.py",
      "identity/mapper.py",
      "identity/__init__.py",
      "identity/processor.py",
      "identity/engine.py",
      "identity/persona_engine.py",
      "identity/lukhas_id_manager.py",
      "identity/manager.py",
      "identity/vault/__init__.py",
      "spine/__init__.py",
      "spine/emotion_mapper_alt.py",
      "security/__init__.py",
      "personality/lukhas_es_creativo.py",
      "personality/personality.py",
      "personality/__init__.py",
      "personality/creative_expressions.py",
      "personality/neuro_haiku_generator.py",
      "personality/lukhas_es_creativo_clean.py",
      "unified/bio_signals.py",
      "unified/orchestration.py",
      "output/__init__.py",
      "utils/__init__.py",
      "utils/dream_utils.py",
      "observability/collector.py",
      "introspection/__init__.py",
      "introspection/introspector.py",
      "rem/streamlit_lidar.py",
      "rem/__init__.py",
      "rem/sleep_cycle.py",
      "rem/visualizer.py",
      "adaptive_ai/Meta_Learning/__init__.py",
      "testing/plugin_test_framework.py",
      "testing/__init__.py",
      "ethics/__init__.py",
      "ethics/dream_ethics_injector.py",
      "examples/mailbox_demo.py",
      "symbolism/methylation_model.py",
      "symbolism/tags.py",
      "symbolism/archiver.py",
      "verifold/verifold_unified.py",
      "orchestration/energy_aware_execution_planner.py",
      "governance/__init__.py",
      "meta_learning/rate_modulator.py",
      "meta_learning/remediator_agent.py",
      "meta_learning/enhancement_system.py",
      "user_interface_manager/__init__.py",
      "user_interface_manager/text_handler.py",
      "user_interface_manager/voice_handler.py",
      "performance/__init__.py",
      "performance/orchestrator.py",
      "infrastructure/node_collection.py",
      "infrastructure/base_node.py",
      "infrastructure/node_registry.py",
      "infrastructure/node_manager.py",
      "modules/__init__.py",
      "modules/nias/__init__.py",
      "modules/nias/dream_recorder.py",
      "neural_architectures/__init__.py",
      "neural_architectures/abas/__init__.py",
      "neural_architectures/abas/abas_quantum_specialist.py",
      "interaction/symptom_reporter.py",
      "interaction/__init__.py",
      "helpers/__init__.py",
      "services/location/geofencing_manager.py",
      "services/location/__init__.py",
      "services/location/tracker.py",
      "services/personality/lukhas_personas.py",
      "services/personality/__init__.py",
      "services/personality/lukhas_empathy.py",
      "interfaces/research_dashboard.py",
      "interfaces/__init__.py",
      "interfaces/cli.py",
      "interfaces/lukhas_socket.py",
      "interfaces/app.py",
      "interfaces/custom_llm.py",
      "interfaces/launcher.py",
      "interfaces/dev_dashboard.py",
      "interfaces/main.py",
      "interfaces/dashboad.py",
      "interfaces/web_formatter.py",
      "interfaces/ui/gui_launcher.py",
      "interfaces/ui/__init__.py",
      "interfaces/ui/app.py",
      "interfaces/ui/config/lukhas_dashboard_settings.py",
      "interfaces/ui/config/__init__.py",
      "interfaces/ui/components/__init__.py",
      "interfaces/ui/components/dream_export_streamlit.py",
      "interfaces/ui/components/voice_preview_streamlit.py",
      "interfaces/ui/components/audio_exporter.py",
      "interfaces/ui/components/replay_graphs.py",
      "interfaces/ui/components/tier_visualizer.py",
      "interfaces/ui/components/payload_builder.py",
      "interfaces/ui/adaptive/__init__.py",
      "interfaces/ui/adaptive/ui_orchestrator.py",
      "interfaces/tools/research/research_dashboard.py",
      "interfaces/tools/research/__init__.py",
      "interfaces/tools/research/dev_dashboard.py",
      "interfaces/tools/security/session_logger.py",
      "interfaces/tools/security/__init__.py",
      "interfaces/tools/dao/__init__.py",
      "interfaces/tools/dao/dao_vote.py",
      "interfaces/tools/dao/dao_propose.py",
      "interfaces/tools/cli/speak.py",
      "interfaces/tools/cli/__init__.py",
      "interfaces/tools/cli/lukhasdream_cli.py",
      "interfaces/tools/cli/command_registry.py",
      "interfaces/nias/__init__.py",
      "interfaces/nias/generate_nias_docs.py",
      "interfaces/logic/consent_manager.py",
      "interfaces/logic/delegate_logic.py",
      "interfaces/logic/agent_logic_architecture.py",
      "interfaces/logic/voice_narration_player.py",
      "interfaces/logic/agent_self.py",
      "interfaces/logic/__init__.py",
      "interfaces/logic/agent_core.py",
      "interfaces/logic/orchestrator.py",
      "interfaces/logic/safety_filter.py",
      "interfaces/logic/memory_handler.py",
      "interfaces/logic/context/context_builder.py",
      "interfaces/logic/context/__init__.py",
      "interfaces/logic/voice/__init__.py",
      "interfaces/logic/voice/voice_renderer.py",
      "interfaces/voice/lukhas_voice_agent.py",
      "interfaces/voice/__init__.py",
      "interfaces/voice/lukhas_listen.py",
      "interfaces/voice/edge_voice.py",
      "interfaces/voice/core/sayit.py",
      "interfaces/voice/core/__init__.py",
      "interfaces/voice/voice_emotional/__init__.py",
      "interfaces/voice/voice_emotional/context_aware_modular_voice.py",
      "interfaces/voice/input/__init__.py",
      "interfaces/as_agent/agent_logic/voice_narration_player.py",
      "interfaces/as_agent/agent_logic/agent_self.py",
      "interfaces/as_agent/agent_logic/__init__.py",
      "interfaces/as_agent/agent_logic/orchestrator.py",
      "interfaces/as_agent/agent_logic/safety_filter.py",
      "interfaces/as_agent/agent_logic/memory_handler.py",
      "interfaces/as_agent/streamlit/__init__.py",
      "interfaces/as_agent/streamlit/app.py",
      "interfaces/as_agent/streamlit/components/__init__.py",
      "interfaces/as_agent/streamlit/components/dream_export_streamlit.py",
      "interfaces/as_agent/streamlit/components/voice_preview_streamlit.py",
      "interfaces/as_agent/streamlit/components/replay_graphs.py",
      "interfaces/as_agent/streamlit/components/tier_visualizer.py",
      "interfaces/as_agent/streamlit/components/payload_builder.py",
      "interfaces/as_agent/core/lukhas_nias_filter.py",
      "interfaces/as_agent/core/lukhas_overview_log.py",
      "interfaces/as_agent/core/nias_filter.py",
      "interfaces/as_agent/core/duet_conductor.py",
      "interfaces/as_agent/core/lukhas_agent_handoff.py",
      "interfaces/as_agent/core/checkout_handler.py",
      "interfaces/as_agent/core/reward_reputation.py",
      "interfaces/as_agent/core/affiliate_log.py",
      "interfaces/as_agent/core/__init__.py",
      "interfaces/as_agent/core/vision_prompts.py",
      "interfaces/as_agent/core/vendor_sync.py",
      "interfaces/as_agent/core/generate_image.py",
      "interfaces/as_agent/core/generate_video.py",
      "interfaces/as_agent/core/render_ai.py",
      "interfaces/as_agent/core/filter_gpt.py",
      "interfaces/as_agent/core/gatekeeper.py",
      "interfaces/as_agent/core/scheduler.py",
      "interfaces/as_agent/core/voice_duet.py",
      "interfaces/as_agent/core/emotion_log.py",
      "interfaces/as_agent/core/wallet.py",
      "interfaces/as_agent/auth/lukhas_registry.py",
      "interfaces/as_agent/auth/vendor_hospitality_sync.py",
      "interfaces/as_agent/auth/__init__.py",
      "interfaces/as_agent/sample_payloads/__init__.py",
      "interfaces/as_agent/utils/constants.py",
      "interfaces/as_agent/utils/__init__.py",
      "interfaces/as_agent/sys/nias/main_loop.py",
      "interfaces/as_agent/sys/nias/replay_queue.py",
      "interfaces/as_agent/sys/nias/delivery_loop.py",
      "interfaces/as_agent/sys/nias/feedback_log_viewer.py",
      "interfaces/as_agent/sys/nias/dream_narrator_queue.py",
      "interfaces/as_agent/sys/nias/voice_narrator.py",
      "interfaces/as_agent/sys/nias/validate_payload.py",
      "interfaces/as_agent/sys/nias/nias_core.py",
      "interfaces/as_agent/sys/nias/replay_heatmap.py",
      "interfaces/as_agent/sys/nias/__init__.py",
      "interfaces/as_agent/sys/nias/inject_message_simulator.py",
      "interfaces/as_agent/sys/nias/dream_export_streamlit.py",
      "interfaces/as_agent/sys/nias/generate_payload_cli.py",
      "interfaces/as_agent/sys/nias/05_25_dream_clustering_engine.py",
      "interfaces/as_agent/sys/nias/dream_log_viewer.py",
      "interfaces/as_agent/sys/nias/consent_filter.py",
      "interfaces/as_agent/sys/nias/replay_visualizer.py",
      "interfaces/as_agent/sys/nias/dream_recorder.py",
      "interfaces/as_agent/sys/nias/feedback_loop.py",
      "interfaces/as_agent/sys/nias/feedback_insight_cli.py",
      "interfaces/as_agent/sys/nias/narration_controller.py",
      "interfaces/as_agent/sys/dast/dast_core.py",
      "interfaces/as_agent/sys/dast/store.py",
      "interfaces/as_agent/sys/dast/partner_sdk.py",
      "interfaces/as_agent/sys/dast/aggregator.py",
      "interfaces/as_agent/sys/dast/dast.py",
      "interfaces/as_agent/sys/dast/__init__.py",
      "interfaces/as_agent/sys/dast/schedule_manager.py",
      "interfaces/as_agent/sys/dast/lukhas_launcher.py",
      "interfaces/as_agent/sys/dast/dast_logger.py",
      "interfaces/as_agent/sys/abas/abas.py",
      "interfaces/as_agent/sys/abas/__init__.py",
      "interfaces/as_agent/widgets/live_renderer_widget.py",
      "interfaces/as_agent/widgets/terminal_widget.py",
      "interfaces/as_agent/widgets/widget_engine.py",
      "interfaces/as_agent/widgets/__init__.py",
      "interfaces/as_agent/widgets/lukhas_widget_archive.py",
      "interfaces/as_agent/widgets/travel_widget.py",
      "interfaces/as_agent/widgets/delivery_tracker_widget.py",
      "interfaces/as_agent/widgets/widget_config.py",
      "interfaces/as_agent/news_and_social/lukhass_dispatcher.py",
      "interfaces/as_agent/news_and_social/lukhas_affiliate_log.py",
      "interfaces/as_agent/news_and_social/__init__.py",
      "router/__init__.py",
      "router/llm_multiverse_router.py"
    ]
  }
}