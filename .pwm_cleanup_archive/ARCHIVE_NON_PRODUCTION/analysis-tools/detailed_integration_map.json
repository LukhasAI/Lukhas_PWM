{
  "module_connections": {
    "core/__init__.py": [
      {
        "from": "core/__init__.py",
        "to": "consciousness/quantum_consciousness_hub.py",
        "import": "from consciousness.quantum_consciousness_hub import QuantumConsciousnessHub",
        "reason": "Core needs consciousness coordination"
      }
    ],
    "core/integration_hub.py": [
      {
        "from": "core/integration_hub.py",
        "to": "memory/systems/memoria_system.py",
        "import": "from memory.systems.memoria_system import MemoriaSystem",
        "reason": "Integration hub needs memory access"
      }
    ],
    "consciousness/quantum_consciousness_hub.py": [
      {
        "from": "consciousness/quantum_consciousness_hub.py",
        "to": "quantum/attention_economics.py",
        "import": "from quantum.attention_economics import QuantumAttentionEconomics",
        "reason": "Consciousness needs quantum attention"
      }
    ],
    "orchestration/brain/core/core_integrator.py": [
      {
        "from": "orchestration/brain/core/core_integrator.py",
        "to": "core/ai_interface.py",
        "import": "from core.ai_interface import AIInterface",
        "reason": "Orchestration needs AI interface"
      }
    ],
    "core/safety/ai_safety_orchestrator.py": [
      {
        "from": "core/safety/ai_safety_orchestrator.py",
        "to": "ethics/governance_engine.py",
        "import": "from ethics.governance_engine import GovernanceEngine",
        "reason": "Safety needs ethical governance"
      }
    ]
  },
  "system_bridges": [
    {
      "name": "core_consciousness_bridge",
      "location": "core/bridges/core_consciousness_bridge.py",
      "purpose": "Bidirectional communication between core and consciousness",
      "implementation": {
        "imports": [
          "from core import get_core_instance",
          "from consciousness import get_consciousness_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "CoreConsciousnessBridge",
            "methods": [
              "async def core_to_consciousness(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def consciousness_to_core(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    },
    {
      "name": "consciousness_quantum_bridge",
      "location": "core/bridges/consciousness_quantum_bridge.py",
      "purpose": "Bidirectional communication between consciousness and quantum",
      "implementation": {
        "imports": [
          "from consciousness import get_consciousness_instance",
          "from quantum import get_quantum_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "ConsciousnessQuantumBridge",
            "methods": [
              "async def consciousness_to_quantum(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def quantum_to_consciousness(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    },
    {
      "name": "memory_learning_bridge",
      "location": "core/bridges/memory_learning_bridge.py",
      "purpose": "Bidirectional communication between memory and learning",
      "implementation": {
        "imports": [
          "from memory import get_memory_instance",
          "from learning import get_learning_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "MemoryLearningBridge",
            "methods": [
              "async def memory_to_learning(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def learning_to_memory(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    },
    {
      "name": "ethics_reasoning_bridge",
      "location": "core/bridges/ethics_reasoning_bridge.py",
      "purpose": "Bidirectional communication between ethics and reasoning",
      "implementation": {
        "imports": [
          "from ethics import get_ethics_instance",
          "from reasoning import get_reasoning_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "EthicsReasoningBridge",
            "methods": [
              "async def ethics_to_reasoning(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def reasoning_to_ethics(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    },
    {
      "name": "identity_core_bridge",
      "location": "core/bridges/identity_core_bridge.py",
      "purpose": "Bidirectional communication between identity and core",
      "implementation": {
        "imports": [
          "from identity import get_identity_instance",
          "from core import get_core_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "IdentityCoreBridge",
            "methods": [
              "async def identity_to_core(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def core_to_identity(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    },
    {
      "name": "orchestration_core_bridge",
      "location": "core/bridges/orchestration_core_bridge.py",
      "purpose": "Bidirectional communication between orchestration and core",
      "implementation": {
        "imports": [
          "from orchestration import get_orchestration_instance",
          "from core import get_core_instance",
          "from typing import Any, Dict, Optional",
          "import asyncio"
        ],
        "classes": [
          {
            "name": "OrchestrationCoreBridge",
            "methods": [
              "async def orchestration_to_core(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def core_to_orchestration(self, data: Dict[str, Any]) -> Dict[str, Any]",
              "async def sync_state(self) -> None",
              "async def handle_event(self, event: Dict[str, Any]) -> None"
            ]
          }
        ]
      }
    }
  ],
  "hub_structure": {
    "core": {
      "system": "core",
      "hub_file": "core/core_hub.py",
      "total_modules": 189,
      "subsystems": {
        "Meta_Learning": [
          "core.adaptive_ai.Meta_Learning.__init__"
        ],
        "integration_manager": [
          "core.ai.integration_manager"
        ],
        "__init__": [
          "core.ethics.__init__",
          "core.governance.__init__",
          "core.helpers.__init__",
          "core.identity.__init__",
          "core.interaction.__init__",
          "core.interfaces.__init__",
          "core.introspection.__init__",
          "core.modules.__init__",
          "core.monitoring.__init__",
          "core.net.__init__",
          "core.neural_architectures.__init__",
          "core.output.__init__",
          "core.performance.__init__",
          "core.personality.__init__",
          "core.rem.__init__",
          "core.router.__init__",
          "core.security.__init__",
          "core.spine.__init__",
          "core.user_interface_manager.__init__"
        ],
        "dream_ethics_injector": [
          "core.ethics.dream_ethics_injector"
        ],
        "engine": [
          "core.identity.engine"
        ],
        "id_manager": [
          "core.identity.id_manager"
        ],
        "manager": [
          "core.identity.manager"
        ],
        "mapper": [
          "core.identity.mapper"
        ],
        "persona_engine": [
          "core.identity.persona_engine"
        ],
        "processor": [
          "core.identity.processor"
        ],
        "vault": [
          "core.identity.vault.__init__"
        ],
        "base_node": [
          "core.infrastructure.base_node"
        ],
        "node_collection": [
          "core.infrastructure.node_collection"
        ],
        "node_manager": [
          "core.infrastructure.node_manager"
        ],
        "node_registry": [
          "core.infrastructure.node_registry"
        ],
        "nias_dream_bridge": [
          "core.integrations.nias_dream_bridge"
        ],
        "symptom_reporter": [
          "core.interaction.symptom_reporter"
        ],
        "app": [
          "core.interfaces.app"
        ],
        "as_agent": [
          "core.interfaces.as_agent.agent_logic.__init__",
          "core.interfaces.as_agent.agent_logic.memory_handler",
          "core.interfaces.as_agent.agent_logic.safety_filter",
          "core.interfaces.as_agent.auth.__init__",
          "core.interfaces.as_agent.auth.registry",
          "core.interfaces.as_agent.auth.vendor_hospitality_sync",
          "core.interfaces.as_agent.core.__init__",
          "core.interfaces.as_agent.core.overview_log",
          "core.interfaces.as_agent.core.reward_reputation",
          "core.interfaces.as_agent.news_and_social.__init__",
          "core.interfaces.as_agent.news_and_social.affiliate_log",
          "core.interfaces.as_agent.news_and_social.s_dispatcher",
          "core.interfaces.as_agent.sample_payloads.__init__",
          "core.interfaces.as_agent.streamlit.__init__",
          "core.interfaces.as_agent.streamlit.components.__init__",
          "core.interfaces.as_agent.streamlit.components.dream_export_streamlit",
          "core.interfaces.as_agent.streamlit.components.tier_visualizer",
          "core.interfaces.as_agent.streamlit.components.voice_preview_streamlit",
          "core.interfaces.as_agent.sys.abas.__init__",
          "core.interfaces.as_agent.sys.dast.__init__",
          "core.interfaces.as_agent.sys.dast.dast_logger",
          "core.interfaces.as_agent.sys.dast.schedule_manager",
          "core.interfaces.as_agent.sys.dast.store",
          "core.interfaces.as_agent.sys.nias.05_25_dream_clustering_engine",
          "core.interfaces.as_agent.sys.nias.__init__",
          "core.interfaces.as_agent.sys.nias.dream_export_streamlit",
          "core.interfaces.as_agent.sys.nias.dream_narrator_queue",
          "core.interfaces.as_agent.sys.nias.feedback_log_viewer",
          "core.interfaces.as_agent.sys.nias.feedback_loop",
          "core.interfaces.as_agent.sys.nias.generate_payload_cli",
          "core.interfaces.as_agent.sys.nias.inject_message_simulator",
          "core.interfaces.as_agent.sys.nias.replay_heatmap",
          "core.interfaces.as_agent.sys.nias.replay_visualizer",
          "core.interfaces.as_agent.sys.nias.symbolic_reply_generator",
          "core.interfaces.as_agent.sys.nias.validate_payload",
          "core.interfaces.as_agent.utils.__init__",
          "core.interfaces.as_agent.widgets.__init__",
          "core.interfaces.as_agent.widgets.delivery_tracker_widget",
          "core.interfaces.as_agent.widgets.live_renderer_widget",
          "core.interfaces.as_agent.widgets.terminal_widget",
          "core.interfaces.as_agent.widgets.travel_widget",
          "core.interfaces.as_agent.widgets.widget_archive"
        ],
        "cli": [
          "core.interfaces.cli"
        ],
        "common_interfaces": [
          "core.interfaces.common_interfaces"
        ],
        "dashboad": [
          "core.interfaces.dashboad"
        ],
        "dev_dashboard": [
          "core.interfaces.dev_dashboard"
        ],
        "launcher": [
          "core.interfaces.launcher"
        ],
        "logic": [
          "core.interfaces.logic.__init__",
          "core.interfaces.logic.agent_core",
          "core.interfaces.logic.agent_logic_architecture",
          "core.interfaces.logic.consent_manager",
          "core.interfaces.logic.context.__init__",
          "core.interfaces.logic.context.context_builder",
          "core.interfaces.logic.delegate_logic",
          "core.interfaces.logic.memory_handler",
          "core.interfaces.logic.safety_filter",
          "core.interfaces.logic.voice.__init__"
        ],
        "nias": [
          "core.interfaces.nias.__init__",
          "core.interfaces.nias.generate_nias_docs",
          "core.modules.nias.openai_adapter"
        ],
        "research_dashboard": [
          "core.interfaces.research_dashboard"
        ],
        "socket": [
          "core.interfaces.socket"
        ],
        "tools": [
          "core.interfaces.tools.cli.__init__",
          "core.interfaces.tools.cli.command_registry",
          "core.interfaces.tools.cli.dream_cli",
          "core.interfaces.tools.dao.__init__",
          "core.interfaces.tools.dao.dao_propose",
          "core.interfaces.tools.dao.dao_vote",
          "core.interfaces.tools.research.__init__",
          "core.interfaces.tools.research.dev_dashboard",
          "core.interfaces.tools.research.research_dashboard",
          "core.interfaces.tools.security.__init__",
          "core.interfaces.tools.security.session_logger"
        ],
        "ui": [
          "core.interfaces.ui.__init__",
          "core.interfaces.ui.adaptive.__init__",
          "core.interfaces.ui.adaptive.ui_orchestrator",
          "core.interfaces.ui.components.__init__",
          "core.interfaces.ui.components.dream_export_streamlit",
          "core.interfaces.ui.components.tier_visualizer",
          "core.interfaces.ui.components.voice_preview_streamlit",
          "core.interfaces.ui.config.__init__",
          "core.interfaces.ui.config.dashboard_settings",
          "core.interfaces.ui.gui_launcher"
        ],
        "voice": [
          "core.interfaces.voice.__init__",
          "core.interfaces.voice.core.__init__",
          "core.interfaces.voice.input.__init__",
          "core.interfaces.voice.integrations.elevenlabs.__init__",
          "core.interfaces.voice.listen",
          "core.interfaces.voice.voice_agent",
          "core.interfaces.voice.voice_emotional.__init__"
        ],
        "web_formatter": [
          "core.interfaces.web_formatter"
        ],
        "introspector": [
          "core.introspection.introspector"
        ],
        "enhancement_system": [
          "core.meta_learning.enhancement_system"
        ],
        "monitor_dashboard": [
          "core.meta_learning.monitor_dashboard"
        ],
        "rate_modulator": [
          "core.meta_learning.rate_modulator"
        ],
        "symbolic_feedback": [
          "core.meta_learning.symbolic_feedback"
        ],
        "collapse_integration": [
          "core.monitoring.collapse_integration"
        ],
        "client_event": [
          "core.net.client_event"
        ],
        "abas": [
          "core.neural_architectures.abas.__init__",
          "core.neural_architectures.abas.abas_quantum_specialist"
        ],
        "collector": [
          "core.observability.collector"
        ],
        "message_hub": [
          "core.output.message_hub"
        ],
        "creative_personality": [
          "core.personality.creative_personality"
        ],
        "creative_personality_clean": [
          "core.personality.creative_personality_clean"
        ],
        "personality": [
          "core.personality.personality",
          "core.services.personality.__init__",
          "core.services.personality.empathy",
          "core.services.personality.personas"
        ],
        "sleep_cycle": [
          "core.rem.sleep_cycle"
        ],
        "llm_multiverse_router": [
          "core.router.llm_multiverse_router"
        ],
        "location": [
          "core.services.location.__init__",
          "core.services.location.geofencing_manager",
          "core.services.location.tracker"
        ],
        "emotion_mapper_alt": [
          "core.spine.emotion_mapper_alt"
        ],
        "integration_orchestrator": [
          "core.spine.integration_orchestrator"
        ],
        "integrator": [
          "core.symbolic_bridge.integrator"
        ],
        "token_map": [
          "core.symbolic_bridge.token_map"
        ],
        "symbolic_trace": [
          "core.symbolic_reasoning.symbolic_trace"
        ],
        "text_handler": [
          "core.user_interface_manager.text_handler"
        ],
        "dream_utils": [
          "core.utils.dream_utils"
        ]
      },
      "structure": {
        "imports": [
          "# Import all core subsystems",
          "from .Meta_Learning import __init__",
          "from .integration_manager import integration_manager",
          "from .__init__ import __init__, __init__, __init__",
          "from .dream_ethics_injector import dream_ethics_injector",
          "from .engine import engine",
          "from .id_manager import id_manager",
          "from .manager import manager",
          "from .mapper import mapper",
          "from .persona_engine import persona_engine",
          "from .processor import processor",
          "from .vault import __init__",
          "from .base_node import base_node",
          "from .node_collection import node_collection",
          "from .node_manager import node_manager",
          "from .node_registry import node_registry",
          "from .nias_dream_bridge import nias_dream_bridge",
          "from .symptom_reporter import symptom_reporter",
          "from .app import app",
          "from .as_agent import __init__, memory_handler, safety_filter",
          "from .cli import cli",
          "from .common_interfaces import common_interfaces",
          "from .dashboad import dashboad",
          "from .dev_dashboard import dev_dashboard",
          "from .launcher import launcher",
          "from .logic import __init__, agent_core, agent_logic_architecture",
          "from .nias import __init__, generate_nias_docs, openai_adapter",
          "from .research_dashboard import research_dashboard",
          "from .socket import socket",
          "from .tools import __init__, command_registry, dream_cli",
          "from .ui import __init__, __init__, ui_orchestrator",
          "from .voice import __init__, __init__, __init__",
          "from .web_formatter import web_formatter",
          "from .introspector import introspector",
          "from .enhancement_system import enhancement_system",
          "from .monitor_dashboard import monitor_dashboard",
          "from .rate_modulator import rate_modulator",
          "from .symbolic_feedback import symbolic_feedback",
          "from .collapse_integration import collapse_integration",
          "from .client_event import client_event",
          "from .abas import __init__, abas_quantum_specialist",
          "from .collector import collector",
          "from .message_hub import message_hub",
          "from .creative_personality import creative_personality",
          "from .creative_personality_clean import creative_personality_clean",
          "from .personality import personality, __init__, empathy",
          "from .sleep_cycle import sleep_cycle",
          "from .llm_multiverse_router import llm_multiverse_router",
          "from .location import __init__, geofencing_manager, tracker",
          "from .emotion_mapper_alt import emotion_mapper_alt",
          "from .integration_orchestrator import integration_orchestrator",
          "from .integrator import integrator",
          "from .token_map import token_map",
          "from .symbolic_trace import symbolic_trace",
          "from .text_handler import text_handler",
          "from .dream_utils import dream_utils"
        ],
        "registry": "CORE_REGISTRY = {}",
        "initialization": "async def initialize_core_system():",
        "exports": [
          "Meta_Learning",
          "integration_manager",
          "__init__",
          "dream_ethics_injector",
          "engine",
          "id_manager",
          "manager",
          "mapper",
          "persona_engine",
          "processor",
          "vault",
          "base_node",
          "node_collection",
          "node_manager",
          "node_registry",
          "nias_dream_bridge",
          "symptom_reporter",
          "app",
          "as_agent",
          "cli",
          "common_interfaces",
          "dashboad",
          "dev_dashboard",
          "launcher",
          "logic",
          "nias",
          "research_dashboard",
          "socket",
          "tools",
          "ui",
          "voice",
          "web_formatter",
          "introspector",
          "enhancement_system",
          "monitor_dashboard",
          "rate_modulator",
          "symbolic_feedback",
          "collapse_integration",
          "client_event",
          "abas",
          "collector",
          "message_hub",
          "creative_personality",
          "creative_personality_clean",
          "personality",
          "sleep_cycle",
          "llm_multiverse_router",
          "location",
          "emotion_mapper_alt",
          "integration_orchestrator",
          "integrator",
          "token_map",
          "symbolic_trace",
          "text_handler",
          "dream_utils"
        ]
      }
    },
    "consciousness": {
      "system": "consciousness",
      "hub_file": "consciousness/consciousness_hub.py",
      "total_modules": 31,
      "subsystems": {
        "bio_symbolic_awareness_adapter": [
          "consciousness.awareness.bio_symbolic_awareness_adapter"
        ],
        "__init__": [
          "consciousness.cognitive.__init__",
          "consciousness.reflection.__init__",
          "consciousness.systems.__init__"
        ],
        "adapter_complete": [
          "consciousness.cognitive.adapter_complete"
        ],
        "reflective_introspection": [
          "consciousness.cognitive.reflective_introspection"
        ],
        "lambda_mirror": [
          "consciousness.reflection.lambda_mirror",
          "consciousness.systems.lambda_mirror"
        ],
        "awareness_processor": [
          "consciousness.systems.awareness_processor"
        ],
        "awareness_tracker": [
          "consciousness.systems.awareness_tracker"
        ],
        "cognitive_systems": [
          "consciousness.systems.cognitive_systems.__init__"
        ],
        "consciousness": [
          "consciousness.systems.consciousness"
        ],
        "dream_engine": [
          "consciousness.systems.dream_engine.__init__"
        ],
        "engine_alt": [
          "consciousness.systems.engine_alt"
        ],
        "engine_codex": [
          "consciousness.systems.engine_codex"
        ],
        "engine_complete": [
          "consciousness.systems.engine_complete"
        ],
        "engine_poetic": [
          "consciousness.systems.engine_poetic"
        ],
        "mapper": [
          "consciousness.systems.mapper"
        ],
        "quantum_consciousness_visualizer": [
          "consciousness.systems.quantum_consciousness_visualizer"
        ],
        "quantum_creative_consciousness": [
          "consciousness.systems.quantum_creative_consciousness"
        ],
        "reflection": [
          "consciousness.systems.reflection.__init__",
          "consciousness.systems.reflection.reflection"
        ],
        "self_reflection_engine": [
          "consciousness.systems.self_reflection_engine"
        ],
        "validator": [
          "consciousness.systems.validator"
        ],
        "\u039bBot_consciousness_monitor": [
          "consciousness.systems.\u039bBot_consciousness_monitor"
        ]
      },
      "structure": {
        "imports": [
          "# Import all consciousness subsystems",
          "from .bio_symbolic_awareness_adapter import bio_symbolic_awareness_adapter",
          "from .__init__ import __init__, __init__, __init__",
          "from .adapter_complete import adapter_complete",
          "from .reflective_introspection import reflective_introspection",
          "from .lambda_mirror import lambda_mirror, lambda_mirror",
          "from .awareness_processor import awareness_processor",
          "from .awareness_tracker import awareness_tracker",
          "from .cognitive_systems import __init__",
          "from .consciousness import consciousness",
          "from .dream_engine import __init__",
          "from .engine_alt import engine_alt",
          "from .engine_codex import engine_codex",
          "from .engine_complete import engine_complete",
          "from .engine_poetic import engine_poetic",
          "from .mapper import mapper",
          "from .quantum_consciousness_visualizer import quantum_consciousness_visualizer",
          "from .quantum_creative_consciousness import quantum_creative_consciousness",
          "from .reflection import __init__, reflection",
          "from .self_reflection_engine import self_reflection_engine",
          "from .validator import validator",
          "from .\u039bBot_consciousness_monitor import \u039bBot_consciousness_monitor"
        ],
        "registry": "CONSCIOUSNESS_REGISTRY = {}",
        "initialization": "async def initialize_consciousness_system():",
        "exports": [
          "bio_symbolic_awareness_adapter",
          "__init__",
          "adapter_complete",
          "reflective_introspection",
          "lambda_mirror",
          "awareness_processor",
          "awareness_tracker",
          "cognitive_systems",
          "consciousness",
          "dream_engine",
          "engine_alt",
          "engine_codex",
          "engine_complete",
          "engine_poetic",
          "mapper",
          "quantum_consciousness_visualizer",
          "quantum_creative_consciousness",
          "reflection",
          "self_reflection_engine",
          "validator",
          "\u039bBot_consciousness_monitor"
        ]
      }
    },
    "quantum": {
      "system": "quantum",
      "hub_file": "quantum/quantum_hub.py",
      "total_modules": 58,
      "subsystems": {
        "__init__": [
          "quantum.audit.__init__",
          "quantum.cloud.__init__",
          "quantum.integration.__init__",
          "quantum.privacy.__init__",
          "quantum.quantum_meta.__init__",
          "quantum.quantum_processing.__init__",
          "quantum.quantum_systems.__init__",
          "quantum.security.__init__",
          "quantum.systems.__init__",
          "quantum.ui_generation.__init__"
        ],
        "zero_knowledge_system": [
          "quantum.privacy.zero_knowledge_system"
        ],
        "bio_integration": [
          "quantum.systems.bio_integration.__init__",
          "quantum.systems.bio_integration.awareness.quantum_bio",
          "quantum.systems.bio_integration.connectivity_consolidator",
          "quantum.systems.bio_integration.multi_orchestrator"
        ],
        "quantum_entanglement": [
          "quantum.systems.quantum_entanglement"
        ],
        "quantum_processor": [
          "quantum.systems.quantum_processor"
        ],
        "quantum_validator": [
          "quantum.systems.quantum_validator"
        ]
      },
      "structure": {
        "imports": [
          "# Import all quantum subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .zero_knowledge_system import zero_knowledge_system",
          "from .bio_integration import __init__, quantum_bio, connectivity_consolidator",
          "from .quantum_entanglement import quantum_entanglement",
          "from .quantum_processor import quantum_processor",
          "from .quantum_validator import quantum_validator"
        ],
        "registry": "QUANTUM_REGISTRY = {}",
        "initialization": "async def initialize_quantum_system():",
        "exports": [
          "__init__",
          "zero_knowledge_system",
          "bio_integration",
          "quantum_entanglement",
          "quantum_processor",
          "quantum_validator"
        ]
      }
    },
    "memory": {
      "system": "memory",
      "hub_file": "memory/memory_hub.py",
      "total_modules": 166,
      "subsystems": {
        "__init__": [
          "memory.adapters.__init__",
          "memory.consolidation.__init__",
          "memory.hippocampal.__init__",
          "memory.memory_systems.__init__",
          "memory.neocortical.__init__",
          "memory.replay.__init__",
          "memory.systems.__init__"
        ],
        "creativity_adapter": [
          "memory.adapters.creativity_adapter"
        ],
        "symbolic_delta": [
          "memory.compression.symbolic_delta"
        ],
        "ripple_generator": [
          "memory.consolidation.ripple_generator"
        ],
        "sleep_cycle_manager": [
          "memory.consolidation.sleep_cycle_manager"
        ],
        "memory_trace_harmonizer": [
          "memory.convergence.memory_trace_harmonizer"
        ],
        "colony_memory_validator": [
          "memory.core.colony_memory_validator"
        ],
        "interfaces": [
          "memory.core.interfaces.__init__",
          "memory.core.interfaces.episodic_interface",
          "memory.core.interfaces.memory_interface",
          "memory.core.interfaces.semantic_interface"
        ],
        "drift_tracker": [
          "memory.episodic.drift_tracker"
        ],
        "recaller": [
          "memory.episodic.recaller"
        ],
        "ethical_drift_governor": [
          "memory.governance.ethical_drift_governor"
        ],
        "pattern_separator": [
          "memory.hippocampal.pattern_separator"
        ],
        "theta_oscillator": [
          "memory.hippocampal.theta_oscillator"
        ],
        "memoria-checkpoint": [
          "memory.memory_systems.memoria-checkpoint"
        ],
        "concept_hierarchy": [
          "memory.neocortical.concept_hierarchy"
        ],
        "semantic_extractor": [
          "memory.neocortical.semantic_extractor"
        ],
        "symbolic_quarantine_sanctum": [
          "memory.protection.symbolic_quarantine_sanctum"
        ],
        "helix_repair_module": [
          "memory.repair.helix_repair_module"
        ],
        "replay_buffer": [
          "memory.replay.replay_buffer"
        ],
        "resonant_memory_access": [
          "memory.resonance.resonant_memory_access"
        ],
        "adaptive_memory_engine": [
          "memory.systems.adaptive_memory_engine"
        ],
        "agent_memory": [
          "memory.systems.agent_memory"
        ],
        "attention_memory_layer": [
          "memory.systems.attention_memory_layer"
        ],
        "bio_symbolic_memory": [
          "memory.systems.bio_symbolic_memory"
        ],
        "causal_identity_tracker": [
          "memory.systems.causal_identity_tracker"
        ],
        "causal_memory_chains": [
          "memory.systems.causal_memory_chains"
        ],
        "collapse_buffer": [
          "memory.systems.collapse_buffer"
        ],
        "collapse_trace": [
          "memory.systems.collapse_trace"
        ],
        "colony_swarm_integration": [
          "memory.systems.colony_swarm_integration"
        ],
        "core": [
          "memory.systems.core"
        ],
        "distributed_memory_fold": [
          "memory.systems.distributed_memory_fold"
        ],
        "dream_integrator": [
          "memory.systems.dream_integrator"
        ],
        "dream_memory_manager": [
          "memory.systems.dream_memory_manager"
        ],
        "dream_trace_linker": [
          "memory.systems.dream_trace_linker"
        ],
        "emotional_memory_manager": [
          "memory.systems.emotional_memory_manager"
        ],
        "engine": [
          "memory.systems.engine"
        ],
        "episodic_replay_buffer": [
          "memory.systems.episodic_replay_buffer"
        ],
        "exponential_learning": [
          "memory.systems.exponential_learning"
        ],
        "fold_lineage_tracker": [
          "memory.systems.fold_lineage_tracker"
        ],
        "foldin": [
          "memory.systems.foldin"
        ],
        "foldin_simple": [
          "memory.systems.foldin_simple"
        ],
        "foldout": [
          "memory.systems.foldout"
        ],
        "foldout_simple": [
          "memory.systems.foldout_simple"
        ],
        "glyph_memory_bridge": [
          "memory.systems.glyph_memory_bridge"
        ],
        "helix_dna": [
          "memory.systems.helix_dna"
        ],
        "helix_mapper": [
          "memory.systems.helix_mapper"
        ],
        "hierarchical_data_store": [
          "memory.systems.hierarchical_data_store"
        ],
        "hybrid_memory_fold": [
          "memory.systems.hybrid_memory_fold"
        ],
        "identity_lineage_bridge": [
          "memory.systems.identity_lineage_bridge"
        ],
        "in_memory_cache_storage_wrapper": [
          "memory.systems.in_memory_cache_storage_wrapper"
        ],
        "in_memory_log_exporter": [
          "memory.systems.in_memory_log_exporter"
        ],
        "in_memory_span_exporter": [
          "memory.systems.in_memory_span_exporter"
        ],
        "integration_adapters": [
          "memory.systems.integration_adapters"
        ],
        "integrity_collapser": [
          "memory.systems.integrity_collapser"
        ],
        "lazy_loading_embeddings": [
          "memory.systems.lazy_loading_embeddings"
        ],
        "learn_to_learn": [
          "memory.systems.learn_to_learn"
        ],
        "memoria": [
          "memory.systems.memoria",
          "memory.systems.memoria.__init__",
          "memory.systems.memoria.dream_cron",
          "memory.systems.memoria.dreams",
          "memory.systems.memoria.gpt_reflection",
          "memory.systems.memoria.reflector",
          "memory.systems.memoria.replayer"
        ],
        "memoria_codex": [
          "memory.systems.memoria_codex"
        ],
        "memoria_system": [
          "memory.systems.memoria_system"
        ],
        "memory_advanced_manager": [
          "memory.systems.memory_advanced_manager"
        ],
        "memory_bases": [
          "memory.systems.memory_bases"
        ],
        "memory_checkpoint": [
          "memory.systems.memory_checkpoint"
        ],
        "memory_cloud": [
          "memory.systems.memory_cloud"
        ],
        "memory_comprehensive": [
          "memory.systems.memory_comprehensive"
        ],
        "memory_consolidation": [
          "memory.systems.memory_consolidation"
        ],
        "memory_consolidator": [
          "memory.systems.memory_consolidator"
        ],
        "memory_drift_mirror": [
          "memory.systems.memory_drift_mirror"
        ],
        "memory_drift_stabilizer": [
          "memory.systems.memory_drift_stabilizer"
        ],
        "memory_drift_tracker": [
          "memory.systems.memory_drift_tracker"
        ],
        "memory_encoder": [
          "memory.systems.memory_encoder"
        ],
        "memory_encryptor": [
          "memory.systems.memory_encryptor"
        ],
        "memory_fold_system": [
          "memory.systems.memory_fold_system"
        ],
        "memory_format": [
          "memory.systems.memory_format"
        ],
        "memory_handler": [
          "memory.systems.memory_handler"
        ],
        "memory_helix": [
          "memory.systems.memory_helix"
        ],
        "memory_helix_golden": [
          "memory.systems.memory_helix_golden"
        ],
        "memory_helix_visualizer": [
          "memory.systems.memory_helix_visualizer"
        ],
        "memory_identity": [
          "memory.systems.memory_identity"
        ],
        "memory_introspection_engine": [
          "memory.systems.memory_introspection_engine"
        ],
        "memory_learning": [
          "memory.systems.memory_learning.__init__",
          "memory.systems.memory_learning.memory_manager"
        ],
        "memory_lock": [
          "memory.systems.memory_lock"
        ],
        "memory_loop_rebuilder": [
          "memory.systems.memory_loop_rebuilder"
        ],
        "memory_media_file_storage": [
          "memory.systems.memory_media_file_storage"
        ],
        "memory_node": [
          "memory.systems.memory_node"
        ],
        "memory_orchestrator": [
          "memory.systems.memory_orchestrator"
        ],
        "memory_planning": [
          "memory.systems.memory_planning"
        ],
        "memory_processing": [
          "memory.systems.memory_processing"
        ],
        "memory_profiler": [
          "memory.systems.memory_profiler"
        ],
        "memory_recall": [
          "memory.systems.memory_recall"
        ],
        "memory_reflector": [
          "memory.systems.memory_reflector"
        ],
        "memory_research": [
          "memory.systems.memory_research"
        ],
        "memory_resonance_analyzer": [
          "memory.systems.memory_resonance_analyzer"
        ],
        "memory_safety_features": [
          "memory.systems.memory_safety_features"
        ],
        "memory_seeder": [
          "memory.systems.memory_seeder"
        ],
        "memory_session_storage": [
          "memory.systems.memory_session_storage"
        ],
        "memory_tracker": [
          "memory.systems.memory_tracker"
        ],
        "memory_utils": [
          "memory.systems.memory_utils"
        ],
        "memory_validator": [
          "memory.systems.memory_validator"
        ],
        "memory_viz": [
          "memory.systems.memory_viz"
        ],
        "meta_learning_patterns": [
          "memory.systems.meta_learning_patterns"
        ],
        "module_integrations": [
          "memory.systems.module_integrations"
        ],
        "multimodal_memory_support": [
          "memory.systems.multimodal_memory_support"
        ],
        "neurosymbolic_integration": [
          "memory.systems.neurosymbolic_integration"
        ],
        "optimized_hybrid_memory_fold": [
          "memory.systems.optimized_hybrid_memory_fold"
        ],
        "orchestrator": [
          "memory.systems.orchestrator"
        ],
        "pin_memory": [
          "memory.systems.pin_memory"
        ],
        "pin_memory_cache": [
          "memory.systems.pin_memory_cache"
        ],
        "processing": [
          "memory.systems.processing.__init__"
        ],
        "processor": [
          "memory.systems.processor"
        ],
        "quantum_memory_architecture": [
          "memory.systems.quantum_memory_architecture"
        ],
        "recall_handler": [
          "memory.systems.recall_handler"
        ],
        "reflection_engine": [
          "memory.systems.reflection_engine"
        ],
        "remvix": [
          "memory.systems.remvix.__init__"
        ],
        "replay_system": [
          "memory.systems.replay_system"
        ],
        "resonance_memory_retrieval": [
          "memory.systems.resonance_memory_retrieval"
        ],
        "simple_memory": [
          "memory.systems.simple_memory"
        ],
        "simple_store": [
          "memory.systems.simple_store"
        ],
        "symbolic_delta_compression": [
          "memory.systems.symbolic_delta_compression"
        ],
        "symbolic_replay_engine": [
          "memory.systems.symbolic_replay_engine"
        ],
        "symbolic_snapshot": [
          "memory.systems.symbolic_snapshot"
        ],
        "tier_system": [
          "memory.systems.tier_system"
        ],
        "trace_injector": [
          "memory.systems.trace_injector"
        ],
        "trauma_lock": [
          "memory.systems.trauma_lock"
        ],
        "voice_memory_bridge": [
          "memory.systems.voice_memory_bridge"
        ],
        "lambda_archive_inspector": [
          "memory.tools.lambda_archive_inspector"
        ],
        "lambda_vault_scan": [
          "memory.tools.lambda_vault_scan"
        ],
        "memory_drift_auditor": [
          "memory.tools.memory_drift_auditor"
        ]
      },
      "structure": {
        "imports": [
          "# Import all memory subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .creativity_adapter import creativity_adapter",
          "from .symbolic_delta import symbolic_delta",
          "from .ripple_generator import ripple_generator",
          "from .sleep_cycle_manager import sleep_cycle_manager",
          "from .memory_trace_harmonizer import memory_trace_harmonizer",
          "from .colony_memory_validator import colony_memory_validator",
          "from .interfaces import __init__, episodic_interface, memory_interface",
          "from .drift_tracker import drift_tracker",
          "from .recaller import recaller",
          "from .ethical_drift_governor import ethical_drift_governor",
          "from .pattern_separator import pattern_separator",
          "from .theta_oscillator import theta_oscillator",
          "from .memoria-checkpoint import memoria-checkpoint",
          "from .concept_hierarchy import concept_hierarchy",
          "from .semantic_extractor import semantic_extractor",
          "from .symbolic_quarantine_sanctum import symbolic_quarantine_sanctum",
          "from .helix_repair_module import helix_repair_module",
          "from .replay_buffer import replay_buffer",
          "from .resonant_memory_access import resonant_memory_access",
          "from .adaptive_memory_engine import adaptive_memory_engine",
          "from .agent_memory import agent_memory",
          "from .attention_memory_layer import attention_memory_layer",
          "from .bio_symbolic_memory import bio_symbolic_memory",
          "from .causal_identity_tracker import causal_identity_tracker",
          "from .causal_memory_chains import causal_memory_chains",
          "from .collapse_buffer import collapse_buffer",
          "from .collapse_trace import collapse_trace",
          "from .colony_swarm_integration import colony_swarm_integration",
          "from .core import core",
          "from .distributed_memory_fold import distributed_memory_fold",
          "from .dream_integrator import dream_integrator",
          "from .dream_memory_manager import dream_memory_manager",
          "from .dream_trace_linker import dream_trace_linker",
          "from .emotional_memory_manager import emotional_memory_manager",
          "from .engine import engine",
          "from .episodic_replay_buffer import episodic_replay_buffer",
          "from .exponential_learning import exponential_learning",
          "from .fold_lineage_tracker import fold_lineage_tracker",
          "from .foldin import foldin",
          "from .foldin_simple import foldin_simple",
          "from .foldout import foldout",
          "from .foldout_simple import foldout_simple",
          "from .glyph_memory_bridge import glyph_memory_bridge",
          "from .helix_dna import helix_dna",
          "from .helix_mapper import helix_mapper",
          "from .hierarchical_data_store import hierarchical_data_store",
          "from .hybrid_memory_fold import hybrid_memory_fold",
          "from .identity_lineage_bridge import identity_lineage_bridge",
          "from .in_memory_cache_storage_wrapper import in_memory_cache_storage_wrapper",
          "from .in_memory_log_exporter import in_memory_log_exporter",
          "from .in_memory_span_exporter import in_memory_span_exporter",
          "from .integration_adapters import integration_adapters",
          "from .integrity_collapser import integrity_collapser",
          "from .lazy_loading_embeddings import lazy_loading_embeddings",
          "from .learn_to_learn import learn_to_learn",
          "from .memoria import memoria, __init__, dream_cron",
          "from .memoria_codex import memoria_codex",
          "from .memoria_system import memoria_system",
          "from .memory_advanced_manager import memory_advanced_manager",
          "from .memory_bases import memory_bases",
          "from .memory_checkpoint import memory_checkpoint",
          "from .memory_cloud import memory_cloud",
          "from .memory_comprehensive import memory_comprehensive",
          "from .memory_consolidation import memory_consolidation",
          "from .memory_consolidator import memory_consolidator",
          "from .memory_drift_mirror import memory_drift_mirror",
          "from .memory_drift_stabilizer import memory_drift_stabilizer",
          "from .memory_drift_tracker import memory_drift_tracker",
          "from .memory_encoder import memory_encoder",
          "from .memory_encryptor import memory_encryptor",
          "from .memory_fold_system import memory_fold_system",
          "from .memory_format import memory_format",
          "from .memory_handler import memory_handler",
          "from .memory_helix import memory_helix",
          "from .memory_helix_golden import memory_helix_golden",
          "from .memory_helix_visualizer import memory_helix_visualizer",
          "from .memory_identity import memory_identity",
          "from .memory_introspection_engine import memory_introspection_engine",
          "from .memory_learning import __init__, memory_manager",
          "from .memory_lock import memory_lock",
          "from .memory_loop_rebuilder import memory_loop_rebuilder",
          "from .memory_media_file_storage import memory_media_file_storage",
          "from .memory_node import memory_node",
          "from .memory_orchestrator import memory_orchestrator",
          "from .memory_planning import memory_planning",
          "from .memory_processing import memory_processing",
          "from .memory_profiler import memory_profiler",
          "from .memory_recall import memory_recall",
          "from .memory_reflector import memory_reflector",
          "from .memory_research import memory_research",
          "from .memory_resonance_analyzer import memory_resonance_analyzer",
          "from .memory_safety_features import memory_safety_features",
          "from .memory_seeder import memory_seeder",
          "from .memory_session_storage import memory_session_storage",
          "from .memory_tracker import memory_tracker",
          "from .memory_utils import memory_utils",
          "from .memory_validator import memory_validator",
          "from .memory_viz import memory_viz",
          "from .meta_learning_patterns import meta_learning_patterns",
          "from .module_integrations import module_integrations",
          "from .multimodal_memory_support import multimodal_memory_support",
          "from .neurosymbolic_integration import neurosymbolic_integration",
          "from .optimized_hybrid_memory_fold import optimized_hybrid_memory_fold",
          "from .orchestrator import orchestrator",
          "from .pin_memory import pin_memory",
          "from .pin_memory_cache import pin_memory_cache",
          "from .processing import __init__",
          "from .processor import processor",
          "from .quantum_memory_architecture import quantum_memory_architecture",
          "from .recall_handler import recall_handler",
          "from .reflection_engine import reflection_engine",
          "from .remvix import __init__",
          "from .replay_system import replay_system",
          "from .resonance_memory_retrieval import resonance_memory_retrieval",
          "from .simple_memory import simple_memory",
          "from .simple_store import simple_store",
          "from .symbolic_delta_compression import symbolic_delta_compression",
          "from .symbolic_replay_engine import symbolic_replay_engine",
          "from .symbolic_snapshot import symbolic_snapshot",
          "from .tier_system import tier_system",
          "from .trace_injector import trace_injector",
          "from .trauma_lock import trauma_lock",
          "from .voice_memory_bridge import voice_memory_bridge",
          "from .lambda_archive_inspector import lambda_archive_inspector",
          "from .lambda_vault_scan import lambda_vault_scan",
          "from .memory_drift_auditor import memory_drift_auditor"
        ],
        "registry": "MEMORY_REGISTRY = {}",
        "initialization": "async def initialize_memory_system():",
        "exports": [
          "__init__",
          "creativity_adapter",
          "symbolic_delta",
          "ripple_generator",
          "sleep_cycle_manager",
          "memory_trace_harmonizer",
          "colony_memory_validator",
          "interfaces",
          "drift_tracker",
          "recaller",
          "ethical_drift_governor",
          "pattern_separator",
          "theta_oscillator",
          "memoria-checkpoint",
          "concept_hierarchy",
          "semantic_extractor",
          "symbolic_quarantine_sanctum",
          "helix_repair_module",
          "replay_buffer",
          "resonant_memory_access",
          "adaptive_memory_engine",
          "agent_memory",
          "attention_memory_layer",
          "bio_symbolic_memory",
          "causal_identity_tracker",
          "causal_memory_chains",
          "collapse_buffer",
          "collapse_trace",
          "colony_swarm_integration",
          "core",
          "distributed_memory_fold",
          "dream_integrator",
          "dream_memory_manager",
          "dream_trace_linker",
          "emotional_memory_manager",
          "engine",
          "episodic_replay_buffer",
          "exponential_learning",
          "fold_lineage_tracker",
          "foldin",
          "foldin_simple",
          "foldout",
          "foldout_simple",
          "glyph_memory_bridge",
          "helix_dna",
          "helix_mapper",
          "hierarchical_data_store",
          "hybrid_memory_fold",
          "identity_lineage_bridge",
          "in_memory_cache_storage_wrapper",
          "in_memory_log_exporter",
          "in_memory_span_exporter",
          "integration_adapters",
          "integrity_collapser",
          "lazy_loading_embeddings",
          "learn_to_learn",
          "memoria",
          "memoria_codex",
          "memoria_system",
          "memory_advanced_manager",
          "memory_bases",
          "memory_checkpoint",
          "memory_cloud",
          "memory_comprehensive",
          "memory_consolidation",
          "memory_consolidator",
          "memory_drift_mirror",
          "memory_drift_stabilizer",
          "memory_drift_tracker",
          "memory_encoder",
          "memory_encryptor",
          "memory_fold_system",
          "memory_format",
          "memory_handler",
          "memory_helix",
          "memory_helix_golden",
          "memory_helix_visualizer",
          "memory_identity",
          "memory_introspection_engine",
          "memory_learning",
          "memory_lock",
          "memory_loop_rebuilder",
          "memory_media_file_storage",
          "memory_node",
          "memory_orchestrator",
          "memory_planning",
          "memory_processing",
          "memory_profiler",
          "memory_recall",
          "memory_reflector",
          "memory_research",
          "memory_resonance_analyzer",
          "memory_safety_features",
          "memory_seeder",
          "memory_session_storage",
          "memory_tracker",
          "memory_utils",
          "memory_validator",
          "memory_viz",
          "meta_learning_patterns",
          "module_integrations",
          "multimodal_memory_support",
          "neurosymbolic_integration",
          "optimized_hybrid_memory_fold",
          "orchestrator",
          "pin_memory",
          "pin_memory_cache",
          "processing",
          "processor",
          "quantum_memory_architecture",
          "recall_handler",
          "reflection_engine",
          "remvix",
          "replay_system",
          "resonance_memory_retrieval",
          "simple_memory",
          "simple_store",
          "symbolic_delta_compression",
          "symbolic_replay_engine",
          "symbolic_snapshot",
          "tier_system",
          "trace_injector",
          "trauma_lock",
          "voice_memory_bridge",
          "lambda_archive_inspector",
          "lambda_vault_scan",
          "memory_drift_auditor"
        ]
      }
    },
    "identity": {
      "system": "identity",
      "hub_file": "identity/identity_hub.py",
      "total_modules": 230,
      "subsystems": {
        "__init__": [
          "identity.api.__init__",
          "identity.auth.__init__",
          "identity.auth_backend.__init__",
          "identity.auth_utils.__init__",
          "identity.config.__init__",
          "identity.core.__init__",
          "identity.diagnostics.__init__",
          "identity.enterprise.__init__",
          "identity.governance.__init__",
          "identity.identity.__init__",
          "identity.mobile.__init__",
          "identity.mobile_platform.__init__",
          "identity.public.__init__",
          "identity.qrg_schemas.__init__",
          "identity.security.__init__",
          "identity.tools.__init__",
          "identity.utils.__init__",
          "identity.wearables_integration.__init__"
        ],
        "auth": [
          "identity.api.auth.__init__",
          "identity.api.auth.flows",
          "identity.api.auth.onboarding",
          "identity.core.auth.__init__",
          "identity.core.auth.biometric_integration",
          "identity.core.auth.dream_auth",
          "identity.enterprise.auth"
        ],
        "controllers": [
          "identity.api.controllers.__init__"
        ],
        "routes": [
          "identity.api.routes.__init__",
          "identity.api.routes.lambd_id_routes"
        ],
        "accessibility_overlay": [
          "identity.auth.accessibility_overlay"
        ],
        "adaptive_ui_controller": [
          "identity.auth.adaptive_ui_controller"
        ],
        "cognitive_sync_adapter": [
          "identity.auth.cognitive_sync_adapter"
        ],
        "constitutional_gatekeeper": [
          "identity.auth.constitutional_gatekeeper"
        ],
        "cultural_profile_manager": [
          "identity.auth.cultural_profile_manager"
        ],
        "entropy_synchronizer": [
          "identity.auth.entropy_synchronizer"
        ],
        "cross_device_handshake": [
          "identity.auth_backend.cross_device_handshake"
        ],
        "entropy_health_api": [
          "identity.auth_backend.entropy_health_api"
        ],
        "multi_user_sync": [
          "identity.auth_backend.multi_user_sync"
        ],
        "pqc_crypto_engine": [
          "identity.auth_backend.pqc_crypto_engine"
        ],
        "qr_entropy_generator": [
          "identity.auth_backend.qr_entropy_generator"
        ],
        "trust_scorer": [
          "identity.auth_backend.trust_scorer"
        ],
        "webrtc_peer_sync": [
          "identity.auth_backend.webrtc_peer_sync"
        ],
        "attention_monitor": [
          "identity.auth_utils.attention_monitor"
        ],
        "cognitive_load_estimator": [
          "identity.auth_utils.cognitive_load_estimator"
        ],
        "cultural_safety_checker": [
          "identity.auth_utils.cultural_safety_checker"
        ],
        "grid_size_calculator": [
          "identity.auth_utils.grid_size_calculator"
        ],
        "replay_protection": [
          "identity.auth_utils.replay_protection"
        ],
        "shared_logging": [
          "identity.auth_utils.shared_logging"
        ],
        "app": [
          "identity.backend.app.__init__",
          "identity.backend.app.admin_tools",
          "identity.backend.app.analytics_engine",
          "identity.backend.app.audit_logger",
          "identity.backend.app.auth",
          "identity.backend.app.badge_manager",
          "identity.backend.app.cloud_bridge_manager",
          "identity.backend.app.cloud_storage",
          "identity.backend.app.cloud_storage_policy",
          "identity.backend.app.compliance",
          "identity.backend.app.context_manager",
          "identity.backend.app.crypto",
          "identity.backend.app.device_registry",
          "identity.backend.app.email_logs",
          "identity.backend.app.emailer",
          "identity.backend.app.encryption_core",
          "identity.backend.app.external_authenticator",
          "identity.backend.app.game_state_bridge",
          "identity.backend.app.id_generator",
          "identity.backend.app.incident_reporter",
          "identity.backend.app.institution_manager",
          "identity.backend.app.journey_log_manager",
          "identity.backend.app.logs",
          "identity.backend.app.logs_api",
          "identity.backend.app.qrglyph_generator",
          "identity.backend.app.replay_manager",
          "identity.backend.app.session_manager",
          "identity.backend.app.symbolic_score",
          "identity.backend.app.tier_manager",
          "identity.backend.app.token_handler",
          "identity.backend.app.users",
          "identity.backend.app.vault",
          "identity.backend.app.vault_downloads"
        ],
        "dao": [
          "identity.backend.dao.__init__",
          "identity.backend.dao.dao_core",
          "identity.backend.dao.log_viewer"
        ],
        "database": [
          "identity.backend.database.__init__",
          "identity.backend.database.crud",
          "identity.backend.database.trust_sharing_manager"
        ],
        "dream_engine": [
          "identity.backend.dream_engine.__init__",
          "identity.backend.dream_engine.assistant",
          "identity.backend.dream_engine.dream_export_streamlit",
          "identity.backend.dream_engine.dream_injector",
          "identity.backend.dream_engine.dream_narrator_queue",
          "identity.backend.dream_engine.dream_registry_dashboard",
          "identity.backend.dream_engine.dream_replay",
          "identity.backend.dream_engine.dream_seed_vote",
          "identity.backend.dream_engine.dream_summary_generator",
          "identity.backend.dream_engine.html_social_generator",
          "identity.backend.dream_engine.narration_controller",
          "identity.backend.dream_engine.publish_queue_manager"
        ],
        "qrglyphs": [
          "identity.backend.qrglyphs.__init__",
          "identity.backend.qrglyphs.qrglymph_public"
        ],
        "seedra": [
          "identity.backend.seedra.biometric_engine",
          "identity.backend.seedra.ethics.__init__",
          "identity.backend.seedra.ethics.seedra_ethics_engine",
          "identity.backend.seedra.identity_validator",
          "identity.backend.seedra.seedra_core",
          "identity.backend.seedra.vault.__init__",
          "identity.backend.seedra.vault.seedra_registry",
          "identity.backend.seedra.vault.seedra_vault_manager"
        ],
        "verifold": [
          "identity.backend.verifold.__init__",
          "identity.backend.verifold.ai.__init__",
          "identity.backend.verifold.ai.narrative_alignment_checker",
          "identity.backend.verifold.compliance.__init__",
          "identity.backend.verifold.compliance.symbolic_audit_mode",
          "identity.backend.verifold.cryptography.__init__",
          "identity.backend.verifold.cryptography.crypto_router",
          "identity.backend.verifold.cryptography.forward_secure_pibe",
          "identity.backend.verifold.cryptography.zk_narrative_proof_adapter",
          "identity.backend.verifold.entropy_fusion",
          "identity.backend.verifold.hardware_entropy_seed",
          "identity.backend.verifold.identity.__init__",
          "identity.backend.verifold.identity.ethics_verifier",
          "identity.backend.verifold.identity.recovery_protocols",
          "identity.backend.verifold.journal_mode",
          "identity.backend.verifold.ledger_auditor",
          "identity.backend.verifold.narrative_utils",
          "identity.backend.verifold.qr_decoder",
          "identity.backend.verifold.qr_encoder",
          "identity.backend.verifold.scanner_pwa.__init__",
          "identity.backend.verifold.scanner_pwa.scanner_api",
          "identity.backend.verifold.scanner_pwa.scanner_backend",
          "identity.backend.verifold.security.__init__",
          "identity.backend.verifold.security.glyph_mutation_simulator",
          "identity.backend.verifold.security.symbolic_adversary_agent",
          "identity.backend.verifold.setup_project",
          "identity.backend.verifold.storage.__init__",
          "identity.backend.verifold.storage.filecoin_uploader",
          "identity.backend.verifold.storage.verifold_exporter",
          "identity.backend.verifold.storage.verifold_vault_viewer",
          "identity.backend.verifold.utils.__init__",
          "identity.backend.verifold.verifold_chain",
          "identity.backend.verifold.verifold_cli",
          "identity.backend.verifold.verifold_gui",
          "identity.backend.verifold.verifold_hash_pq",
          "identity.backend.verifold.verifold_hash_utils",
          "identity.backend.verifold.verifold_replay_engine",
          "identity.backend.verifold.verifold_verifier",
          "identity.backend.verifold.visual.__init__",
          "identity.backend.verifold.visual.glyph_stego_encoder",
          "identity.backend.verifold.visual.qr_tier_scanner",
          "identity.backend.verifold.web3.__init__",
          "identity.backend.verifold.web3.emotion_nft_standard",
          "identity.backend.verifold.web3.verifold_bridge_adapter",
          "identity.backend.verifold.web_dashboard",
          "identity.backend.verifold.web_journal.__init__",
          "identity.backend.verifold.web_journal.launch_web_journal",
          "identity.backend.verifold.web_journal.web_journal_app",
          "identity.backend.verifold.web_qr_verifier",
          "identity.backend.verifold.yubi_seeder"
        ],
        "brain_identity_connector": [
          "identity.core.brain_identity_connector"
        ],
        "commercial": [
          "identity.core.commercial.__init__",
          "identity.core.commercial.commercial_module"
        ],
        "events": [
          "identity.core.events.__init__",
          "identity.core.events.identity_event_types"
        ],
        "glyph": [
          "identity.core.glyph.__init__",
          "identity.core.glyph.glyph_pipeline",
          "identity.core.glyph.steganographic_id"
        ],
        "health": [
          "identity.core.health.__init__"
        ],
        "id_service": [
          "identity.core.id_service.__init__",
          "identity.core.id_service.entropy_engine",
          "identity.core.id_service.lambd_id_entropy",
          "identity.core.id_service.lambd_id_generator",
          "identity.core.id_service.lambd_id_validator",
          "identity.core.id_service.mnemonic",
          "identity.core.id_service.portability_system"
        ],
        "integrations": [
          "identity.core.integrations.consciousness_bridge",
          "identity.core.integrations.inference_adapter",
          "identity.core.integrations.memory_connector"
        ],
        "lambd_id_service": [
          "identity.core.lambd_id_service"
        ],
        "onboarding": [
          "identity.core.onboarding.__init__",
          "identity.core.onboarding.onboarding",
          "identity.core.onboarding.onboarding_config"
        ],
        "qrg": [
          "identity.core.qrg.__init__",
          "identity.core.qrg.qrg_manager"
        ],
        "qrs": [
          "identity.core.qrs.__init__",
          "identity.core.qrs.qrg_generator",
          "identity.core.qrs.session_replay"
        ],
        "qrs_manager": [
          "identity.core.qrs_manager"
        ],
        "sent": [
          "identity.core.sent.__init__",
          "identity.core.sent.consent_history",
          "identity.core.sent.consent_manager",
          "identity.core.sent.policy_engine",
          "identity.core.sent.symbolic_scopes"
        ],
        "sing": [
          "identity.core.sing.__init__",
          "identity.core.sing.cross_device_manager",
          "identity.core.sing.sso_engine"
        ],
        "swarm": [
          "identity.core.swarm.__init__"
        ],
        "tagging": [
          "identity.core.tagging.__init__"
        ],
        "tier": [
          "identity.core.tier.__init__",
          "identity.core.tier.tier_manager",
          "identity.core.tier.tier_system",
          "identity.core.tier.tier_validator"
        ],
        "trace": [
          "identity.core.trace.__init__",
          "identity.core.trace.activity_logger",
          "identity.core.trace.pattern_analyzer"
        ],
        "user_tier_mapping": [
          "identity.core.user_tier_mapping"
        ],
        "verifold_connector": [
          "identity.core.verifold_connector"
        ],
        "visualization": [
          "identity.core.visualization.consciousness_mapper",
          "identity.core.visualization.lukhas_orb"
        ],
        "policy_board": [
          "identity.governance.policy_board"
        ],
        "security": [
          "identity.lukhas_identity.security.__init__",
          "identity.lukhas_identity.security.awareness_protocol",
          "identity.lukhas_identity.security.kyi_check"
        ],
        "qr_code_animator": [
          "identity.mobile.qr_code_animator"
        ],
        "websocket_client": [
          "identity.mobile.websocket_client"
        ],
        "mobile_ui_renderer": [
          "identity.mobile_platform.mobile_ui_renderer"
        ],
        "lambda_id_previewer": [
          "identity.public.lambda_id_previewer"
        ],
        "symbolic_vault": [
          "identity.security.symbolic_vault"
        ],
        "entropy_calculator": [
          "identity.utils.entropy_calculator"
        ],
        "entropy_helpers": [
          "identity.utils.entropy_helpers"
        ],
        "hash_utilities": [
          "identity.utils.hash_utilities"
        ],
        "qrg_parser": [
          "identity.utils.qrg_parser"
        ],
        "symbolic_parser": [
          "identity.utils.symbolic_parser"
        ],
        "entropy_beacon": [
          "identity.wearables_integration.entropy_beacon"
        ]
      },
      "structure": {
        "imports": [
          "# Import all identity subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .auth import __init__, flows, onboarding",
          "from .controllers import __init__",
          "from .routes import __init__, lambd_id_routes",
          "from .accessibility_overlay import accessibility_overlay",
          "from .adaptive_ui_controller import adaptive_ui_controller",
          "from .cognitive_sync_adapter import cognitive_sync_adapter",
          "from .constitutional_gatekeeper import constitutional_gatekeeper",
          "from .cultural_profile_manager import cultural_profile_manager",
          "from .entropy_synchronizer import entropy_synchronizer",
          "from .cross_device_handshake import cross_device_handshake",
          "from .entropy_health_api import entropy_health_api",
          "from .multi_user_sync import multi_user_sync",
          "from .pqc_crypto_engine import pqc_crypto_engine",
          "from .qr_entropy_generator import qr_entropy_generator",
          "from .trust_scorer import trust_scorer",
          "from .webrtc_peer_sync import webrtc_peer_sync",
          "from .attention_monitor import attention_monitor",
          "from .cognitive_load_estimator import cognitive_load_estimator",
          "from .cultural_safety_checker import cultural_safety_checker",
          "from .grid_size_calculator import grid_size_calculator",
          "from .replay_protection import replay_protection",
          "from .shared_logging import shared_logging",
          "from .app import __init__, admin_tools, analytics_engine",
          "from .dao import __init__, dao_core, log_viewer",
          "from .database import __init__, crud, trust_sharing_manager",
          "from .dream_engine import __init__, assistant, dream_export_streamlit",
          "from .qrglyphs import __init__, qrglymph_public",
          "from .seedra import biometric_engine, __init__, seedra_ethics_engine",
          "from .verifold import __init__, __init__, narrative_alignment_checker",
          "from .brain_identity_connector import brain_identity_connector",
          "from .commercial import __init__, commercial_module",
          "from .events import __init__, identity_event_types",
          "from .glyph import __init__, glyph_pipeline, steganographic_id",
          "from .health import __init__",
          "from .id_service import __init__, entropy_engine, lambd_id_entropy",
          "from .integrations import consciousness_bridge, inference_adapter, memory_connector",
          "from .lambd_id_service import lambd_id_service",
          "from .onboarding import __init__, onboarding, onboarding_config",
          "from .qrg import __init__, qrg_manager",
          "from .qrs import __init__, qrg_generator, session_replay",
          "from .qrs_manager import qrs_manager",
          "from .sent import __init__, consent_history, consent_manager",
          "from .sing import __init__, cross_device_manager, sso_engine",
          "from .swarm import __init__",
          "from .tagging import __init__",
          "from .tier import __init__, tier_manager, tier_system",
          "from .trace import __init__, activity_logger, pattern_analyzer",
          "from .user_tier_mapping import user_tier_mapping",
          "from .verifold_connector import verifold_connector",
          "from .visualization import consciousness_mapper, lukhas_orb",
          "from .policy_board import policy_board",
          "from .security import __init__, awareness_protocol, kyi_check",
          "from .qr_code_animator import qr_code_animator",
          "from .websocket_client import websocket_client",
          "from .mobile_ui_renderer import mobile_ui_renderer",
          "from .lambda_id_previewer import lambda_id_previewer",
          "from .symbolic_vault import symbolic_vault",
          "from .entropy_calculator import entropy_calculator",
          "from .entropy_helpers import entropy_helpers",
          "from .hash_utilities import hash_utilities",
          "from .qrg_parser import qrg_parser",
          "from .symbolic_parser import symbolic_parser",
          "from .entropy_beacon import entropy_beacon"
        ],
        "registry": "IDENTITY_REGISTRY = {}",
        "initialization": "async def initialize_identity_system():",
        "exports": [
          "__init__",
          "auth",
          "controllers",
          "routes",
          "accessibility_overlay",
          "adaptive_ui_controller",
          "cognitive_sync_adapter",
          "constitutional_gatekeeper",
          "cultural_profile_manager",
          "entropy_synchronizer",
          "cross_device_handshake",
          "entropy_health_api",
          "multi_user_sync",
          "pqc_crypto_engine",
          "qr_entropy_generator",
          "trust_scorer",
          "webrtc_peer_sync",
          "attention_monitor",
          "cognitive_load_estimator",
          "cultural_safety_checker",
          "grid_size_calculator",
          "replay_protection",
          "shared_logging",
          "app",
          "dao",
          "database",
          "dream_engine",
          "qrglyphs",
          "seedra",
          "verifold",
          "brain_identity_connector",
          "commercial",
          "events",
          "glyph",
          "health",
          "id_service",
          "integrations",
          "lambd_id_service",
          "onboarding",
          "qrg",
          "qrs",
          "qrs_manager",
          "sent",
          "sing",
          "swarm",
          "tagging",
          "tier",
          "trace",
          "user_tier_mapping",
          "verifold_connector",
          "visualization",
          "policy_board",
          "security",
          "qr_code_animator",
          "websocket_client",
          "mobile_ui_renderer",
          "lambda_id_previewer",
          "symbolic_vault",
          "entropy_calculator",
          "entropy_helpers",
          "hash_utilities",
          "qrg_parser",
          "symbolic_parser",
          "entropy_beacon"
        ]
      }
    },
    "ethics": {
      "system": "ethics",
      "hub_file": "ethics/ethics_hub.py",
      "total_modules": 72,
      "subsystems": {
        "__init__": [
          "ethics.compliance.__init__",
          "ethics.fallback.__init__",
          "ethics.governor.__init__",
          "ethics.policy_engines.__init__",
          "ethics.safety.__init__",
          "ethics.security.__init__",
          "ethics.simulations.__init__",
          "ethics.stabilization.__init__",
          "ethics.tools.__init__",
          "ethics.training.__init__",
          "ethics.utils.__init__"
        ],
        "engine": [
          "ethics.compliance.engine"
        ],
        "ethics_layer": [
          "ethics.fallback.ethics_layer"
        ],
        "dao_controller": [
          "ethics.governor.dao_controller"
        ],
        "lambda_governor": [
          "ethics.governor.lambda_governor"
        ],
        "base": [
          "ethics.policy_engines.base"
        ],
        "examples": [
          "ethics.policy_engines.examples.__init__",
          "ethics.policy_engines.examples.gpt4_policy",
          "ethics.policy_engines.examples.three_laws"
        ],
        "integration": [
          "ethics.policy_engines.integration"
        ],
        "compliance_dashboard_visual": [
          "ethics.safety.compliance_dashboard_visual"
        ],
        "compliance_digest": [
          "ethics.safety.compliance_digest"
        ],
        "compliance_hooks": [
          "ethics.safety.compliance_hooks"
        ],
        "entropy_tuning": [
          "ethics.safety.entropy_tuning"
        ],
        "integration_bridge": [
          "ethics.safety.integration_bridge"
        ],
        "emergency_override": [
          "ethics.security.emergency_override"
        ],
        "flagship_security_engine": [
          "ethics.security.flagship_security_engine"
        ],
        "privacy": [
          "ethics.security.privacy"
        ],
        "secure_utils": [
          "ethics.security.secure_utils"
        ],
        "security_engine": [
          "ethics.security.security_engine"
        ],
        "ethical_drift_sentinel": [
          "ethics.sentinel.ethical_drift_sentinel"
        ],
        "ethical_sentinel_dashboard": [
          "ethics.sentinel.ethical_sentinel_dashboard"
        ],
        "tuner": [
          "ethics.stabilization.tuner"
        ],
        "quantum_mesh_visualizer": [
          "ethics.tools.quantum_mesh_visualizer"
        ],
        "alignment_overseer": [
          "ethics.training.alignment_overseer"
        ],
        "tag_misinterpretation_sim": [
          "ethics.utils.tag_misinterpretation_sim"
        ]
      },
      "structure": {
        "imports": [
          "# Import all ethics subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .engine import engine",
          "from .ethics_layer import ethics_layer",
          "from .dao_controller import dao_controller",
          "from .lambda_governor import lambda_governor",
          "from .base import base",
          "from .examples import __init__, gpt4_policy, three_laws",
          "from .integration import integration",
          "from .compliance_dashboard_visual import compliance_dashboard_visual",
          "from .compliance_digest import compliance_digest",
          "from .compliance_hooks import compliance_hooks",
          "from .entropy_tuning import entropy_tuning",
          "from .integration_bridge import integration_bridge",
          "from .emergency_override import emergency_override",
          "from .flagship_security_engine import flagship_security_engine",
          "from .privacy import privacy",
          "from .secure_utils import secure_utils",
          "from .security_engine import security_engine",
          "from .ethical_drift_sentinel import ethical_drift_sentinel",
          "from .ethical_sentinel_dashboard import ethical_sentinel_dashboard",
          "from .tuner import tuner",
          "from .quantum_mesh_visualizer import quantum_mesh_visualizer",
          "from .alignment_overseer import alignment_overseer",
          "from .tag_misinterpretation_sim import tag_misinterpretation_sim"
        ],
        "registry": "ETHICS_REGISTRY = {}",
        "initialization": "async def initialize_ethics_system():",
        "exports": [
          "__init__",
          "engine",
          "ethics_layer",
          "dao_controller",
          "lambda_governor",
          "base",
          "examples",
          "integration",
          "compliance_dashboard_visual",
          "compliance_digest",
          "compliance_hooks",
          "entropy_tuning",
          "integration_bridge",
          "emergency_override",
          "flagship_security_engine",
          "privacy",
          "secure_utils",
          "security_engine",
          "ethical_drift_sentinel",
          "ethical_sentinel_dashboard",
          "tuner",
          "quantum_mesh_visualizer",
          "alignment_overseer",
          "tag_misinterpretation_sim"
        ]
      }
    },
    "learning": {
      "system": "learning",
      "hub_file": "learning/learning_hub.py",
      "total_modules": 39,
      "subsystems": {
        "Meta_Learning": [
          "learning.adaptive_agi.Meta_Learning.__init__"
        ],
        "__init__": [
          "learning.adaptive_agi.__init__",
          "learning.flagship.__init__",
          "learning.meta_adaptive.__init__",
          "learning.meta_learning.__init__",
          "learning.results.__init__",
          "learning.systems.__init__"
        ],
        "dream_engine": [
          "learning.aid.dream_engine.__init__",
          "learning.aid.dream_engine.narration_controller"
        ],
        "generative_reflex": [
          "learning.embodied_thought.generative_reflex"
        ],
        "adaptive_interface_generator": [
          "learning.meta_adaptive.adaptive_interface_generator"
        ],
        "meta_learning": [
          "learning.meta_adaptive.meta_learning"
        ],
        "federated_integration": [
          "learning.meta_learning.federated_integration"
        ],
        "meta_core": [
          "learning.meta_learning.meta_core"
        ],
        "symbolic_feedback": [
          "learning.meta_learning.symbolic_feedback"
        ],
        "core_system": [
          "learning.systems.core_system"
        ],
        "duet_conductor": [
          "learning.systems.duet_conductor"
        ],
        "intent_language": [
          "learning.systems.intent_language"
        ],
        "symbolic_voice_loop": [
          "learning.systems.symbolic_voice_loop"
        ]
      },
      "structure": {
        "imports": [
          "# Import all learning subsystems",
          "from .Meta_Learning import __init__",
          "from .__init__ import __init__, __init__, __init__",
          "from .dream_engine import __init__, narration_controller",
          "from .generative_reflex import generative_reflex",
          "from .adaptive_interface_generator import adaptive_interface_generator",
          "from .meta_learning import meta_learning",
          "from .federated_integration import federated_integration",
          "from .meta_core import meta_core",
          "from .symbolic_feedback import symbolic_feedback",
          "from .core_system import core_system",
          "from .duet_conductor import duet_conductor",
          "from .intent_language import intent_language",
          "from .symbolic_voice_loop import symbolic_voice_loop"
        ],
        "registry": "LEARNING_REGISTRY = {}",
        "initialization": "async def initialize_learning_system():",
        "exports": [
          "Meta_Learning",
          "__init__",
          "dream_engine",
          "generative_reflex",
          "adaptive_interface_generator",
          "meta_learning",
          "federated_integration",
          "meta_core",
          "symbolic_feedback",
          "core_system",
          "duet_conductor",
          "intent_language",
          "symbolic_voice_loop"
        ]
      }
    },
    "reasoning": {
      "system": "reasoning",
      "hub_file": "reasoning/reasoning_hub.py",
      "total_modules": 37,
      "subsystems": {
        "__init__": [
          "reasoning.analysis.__init__",
          "reasoning.systems.__init__"
        ],
        "engine": [
          "reasoning.analysis.engine"
        ],
        "trace_dashboard": [
          "reasoning.dashboard.trace_dashboard"
        ],
        "trace_mapper": [
          "reasoning.diagnostics.trace_mapper"
        ],
        "goal_manager": [
          "reasoning.goals.goal_manager"
        ],
        "dream_reflect_hook": [
          "reasoning.hooks.dream_reflect_hook"
        ],
        "intent_detector": [
          "reasoning.intent.intent_detector"
        ],
        "intent_processor": [
          "reasoning.intent.intent_processor"
        ],
        "reasoning_report_generator": [
          "reasoning.reporting.reasoning_report_generator"
        ],
        "id_reasoning_engine": [
          "reasoning.systems.id_reasoning_engine"
        ],
        "agentic_trace": [
          "reasoning.utils.agentic_trace"
        ]
      },
      "structure": {
        "imports": [
          "# Import all reasoning subsystems",
          "from .__init__ import __init__, __init__",
          "from .engine import engine",
          "from .trace_dashboard import trace_dashboard",
          "from .trace_mapper import trace_mapper",
          "from .goal_manager import goal_manager",
          "from .dream_reflect_hook import dream_reflect_hook",
          "from .intent_detector import intent_detector",
          "from .intent_processor import intent_processor",
          "from .reasoning_report_generator import reasoning_report_generator",
          "from .id_reasoning_engine import id_reasoning_engine",
          "from .agentic_trace import agentic_trace"
        ],
        "registry": "REASONING_REGISTRY = {}",
        "initialization": "async def initialize_reasoning_system():",
        "exports": [
          "__init__",
          "engine",
          "trace_dashboard",
          "trace_mapper",
          "goal_manager",
          "dream_reflect_hook",
          "intent_detector",
          "intent_processor",
          "reasoning_report_generator",
          "id_reasoning_engine",
          "agentic_trace"
        ]
      }
    },
    "creativity": {
      "system": "creativity",
      "hub_file": "creativity/creativity_hub.py",
      "total_modules": 92,
      "subsystems": {
        "__init__": [
          "creativity.dream.__init__",
          "creativity.dream_engine.__init__",
          "creativity.dream_systems.__init__",
          "creativity.emotion.__init__",
          "creativity.engines.__init__",
          "creativity.systems.__init__"
        ],
        "base": [
          "creativity.dream.base.dream_loop.__init__",
          "creativity.dream.base.dream_refold.__init__",
          "creativity.dream.base.dream_refold.dream_refold"
        ],
        "cli": [
          "creativity.dream.cli.__init__",
          "creativity.dream.cli.dream_processor"
        ],
        "dashboard": [
          "creativity.dream.dashboard.__init__",
          "creativity.dream.dashboard.dream_metrics_db",
          "creativity.dream.dashboard.dream_metrics_view"
        ],
        "dream_director": [
          "creativity.dream.dream_director"
        ],
        "dream_engine": [
          "creativity.dream.dream_engine.__init__"
        ],
        "dream_generator": [
          "creativity.dream.dream_generator"
        ],
        "dream_log": [
          "creativity.dream.dream_log",
          "creativity.dream_systems.dream_log"
        ],
        "dream_mutator": [
          "creativity.dream.dream_mutator"
        ],
        "dream_pipeline": [
          "creativity.dream.dream_pipeline"
        ],
        "dream_sandbox": [
          "creativity.dream.dream_sandbox"
        ],
        "dream_stats": [
          "creativity.dream.dream_stats",
          "creativity.dream_systems.dream_stats"
        ],
        "engine": [
          "creativity.dream.engine.dream_engine_merged",
          "creativity.dream.engine.dream_engine_optimizer",
          "creativity.engines.engine"
        ],
        "feedback_propagator": [
          "creativity.dream.feedback_propagator"
        ],
        "immersive_ingestion": [
          "creativity.dream.immersive_ingestion"
        ],
        "modifiers": [
          "creativity.dream.modifiers.__init__"
        ],
        "oneiric_engine": [
          "creativity.dream.oneiric_engine.demo.dream_interpreter",
          "creativity.dream.oneiric_engine.demo.web_app",
          "creativity.dream.oneiric_engine.oneiric_core.analysis.drift_score",
          "creativity.dream.oneiric_engine.oneiric_core.db.db",
          "creativity.dream.oneiric_engine.oneiric_core.db.user_repository",
          "creativity.dream.oneiric_engine.oneiric_core.identity.auth_middleware",
          "creativity.dream.oneiric_engine.oneiric_core.main",
          "creativity.dream.oneiric_engine.oneiric_core.migrations.env",
          "creativity.dream.oneiric_engine.oneiric_core.migrations.versions.20250710_add_users_table",
          "creativity.dream.oneiric_engine.oneiric_core.migrations.versions.20250726_add_unified_tier_support",
          "creativity.dream.oneiric_engine.oneiric_core.settings",
          "creativity.dream.oneiric_engine.oneiric_core.utils.symbolic_logger"
        ],
        "openai_dream_integration": [
          "creativity.dream.openai_dream_integration"
        ],
        "processors": [
          "creativity.dream.processors.dream_processor",
          "creativity.dream.processors.dream_processor_integrator"
        ],
        "quantum_dream_adapter": [
          "creativity.dream.quantum_dream_adapter",
          "creativity.dream_systems.quantum_dream_adapter"
        ],
        "quantum_dream_config": [
          "creativity.dream.quantum_dream_config"
        ],
        "redirect_justifier": [
          "creativity.dream.redirect_justifier"
        ],
        "redirect_trace_replayer": [
          "creativity.dream.redirect_trace_replayer"
        ],
        "rl": [
          "creativity.dream.rl.__init__",
          "creativity.dream.rl.rl_dream_cycle"
        ],
        "stability": [
          "creativity.dream.stability.redirect_forecaster"
        ],
        "symbolic": [
          "creativity.dream.symbolic.__init__"
        ],
        "tag_debug": [
          "creativity.dream.tag_debug"
        ],
        "tools": [
          "creativity.dream.tools.dream_divergence_map",
          "creativity.dream.tools.run_dream_analysis",
          "creativity.dream.tools.symbolic_theme_clusterer"
        ],
        "visualization": [
          "creativity.dream.visualization.dream_timeline_visualizer",
          "creativity.dream.visualization.dream_viewer",
          "creativity.dream.visualization.memoryscape_viewport",
          "creativity.dream.visualization.visualizer_core"
        ],
        "dream_emotion_bridge": [
          "creativity.dream_systems.dream_emotion_bridge"
        ],
        "dream_export_streamlit": [
          "creativity.dream_systems.dream_export_streamlit"
        ],
        "dream_feedback_controller": [
          "creativity.dream_systems.dream_feedback_controller"
        ],
        "dream_glyph_bridge": [
          "creativity.dream_systems.dream_glyph_bridge"
        ],
        "dream_limiter": [
          "creativity.dream_systems.dream_limiter"
        ],
        "dream_loop_generator": [
          "creativity.dream_systems.dream_loop_generator"
        ],
        "dream_reflection_loop_simple": [
          "creativity.dream_systems.dream_reflection_loop_simple"
        ],
        "dream_replay": [
          "creativity.dream_systems.dream_replay"
        ],
        "dream_seed": [
          "creativity.dream_systems.dream_seed"
        ],
        "dream_seed_simple": [
          "creativity.dream_systems.dream_seed_simple"
        ],
        "dream_snapshot": [
          "creativity.dream_systems.dream_snapshot"
        ],
        "dream_utils": [
          "creativity.dream_systems.dream_utils"
        ],
        "dream_viewer": [
          "creativity.dream_systems.dream_viewer"
        ],
        "ethics_guard": [
          "creativity.dream_systems.ethics_guard"
        ],
        "snapshot_redirection_controller": [
          "creativity.dream_systems.snapshot_redirection_controller"
        ],
        "voice_parameter": [
          "creativity.dream_systems.voice_parameter"
        ],
        "voice_profiling_emotion_engine": [
          "creativity.emotion.voice_profiling_emotion_engine"
        ],
        "creative_expressions_creativity_engine": [
          "creativity.systems.creative_expressions_creativity_engine"
        ]
      },
      "structure": {
        "imports": [
          "# Import all creativity subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .base import __init__, __init__, dream_refold",
          "from .cli import __init__, dream_processor",
          "from .dashboard import __init__, dream_metrics_db, dream_metrics_view",
          "from .dream_director import dream_director",
          "from .dream_engine import __init__",
          "from .dream_generator import dream_generator",
          "from .dream_log import dream_log, dream_log",
          "from .dream_mutator import dream_mutator",
          "from .dream_pipeline import dream_pipeline",
          "from .dream_sandbox import dream_sandbox",
          "from .dream_stats import dream_stats, dream_stats",
          "from .engine import dream_engine_merged, dream_engine_optimizer, engine",
          "from .feedback_propagator import feedback_propagator",
          "from .immersive_ingestion import immersive_ingestion",
          "from .modifiers import __init__",
          "from .oneiric_engine import dream_interpreter, web_app, drift_score",
          "from .openai_dream_integration import openai_dream_integration",
          "from .processors import dream_processor, dream_processor_integrator",
          "from .quantum_dream_adapter import quantum_dream_adapter, quantum_dream_adapter",
          "from .quantum_dream_config import quantum_dream_config",
          "from .redirect_justifier import redirect_justifier",
          "from .redirect_trace_replayer import redirect_trace_replayer",
          "from .rl import __init__, rl_dream_cycle",
          "from .stability import redirect_forecaster",
          "from .symbolic import __init__",
          "from .tag_debug import tag_debug",
          "from .tools import dream_divergence_map, run_dream_analysis, symbolic_theme_clusterer",
          "from .visualization import dream_timeline_visualizer, dream_viewer, memoryscape_viewport",
          "from .dream_emotion_bridge import dream_emotion_bridge",
          "from .dream_export_streamlit import dream_export_streamlit",
          "from .dream_feedback_controller import dream_feedback_controller",
          "from .dream_glyph_bridge import dream_glyph_bridge",
          "from .dream_limiter import dream_limiter",
          "from .dream_loop_generator import dream_loop_generator",
          "from .dream_reflection_loop_simple import dream_reflection_loop_simple",
          "from .dream_replay import dream_replay",
          "from .dream_seed import dream_seed",
          "from .dream_seed_simple import dream_seed_simple",
          "from .dream_snapshot import dream_snapshot",
          "from .dream_utils import dream_utils",
          "from .dream_viewer import dream_viewer",
          "from .ethics_guard import ethics_guard",
          "from .snapshot_redirection_controller import snapshot_redirection_controller",
          "from .voice_parameter import voice_parameter",
          "from .voice_profiling_emotion_engine import voice_profiling_emotion_engine",
          "from .creative_expressions_creativity_engine import creative_expressions_creativity_engine"
        ],
        "registry": "CREATIVITY_REGISTRY = {}",
        "initialization": "async def initialize_creativity_system():",
        "exports": [
          "__init__",
          "base",
          "cli",
          "dashboard",
          "dream_director",
          "dream_engine",
          "dream_generator",
          "dream_log",
          "dream_mutator",
          "dream_pipeline",
          "dream_sandbox",
          "dream_stats",
          "engine",
          "feedback_propagator",
          "immersive_ingestion",
          "modifiers",
          "oneiric_engine",
          "openai_dream_integration",
          "processors",
          "quantum_dream_adapter",
          "quantum_dream_config",
          "redirect_justifier",
          "redirect_trace_replayer",
          "rl",
          "stability",
          "symbolic",
          "tag_debug",
          "tools",
          "visualization",
          "dream_emotion_bridge",
          "dream_export_streamlit",
          "dream_feedback_controller",
          "dream_glyph_bridge",
          "dream_limiter",
          "dream_loop_generator",
          "dream_reflection_loop_simple",
          "dream_replay",
          "dream_seed",
          "dream_seed_simple",
          "dream_snapshot",
          "dream_utils",
          "dream_viewer",
          "ethics_guard",
          "snapshot_redirection_controller",
          "voice_parameter",
          "voice_profiling_emotion_engine",
          "creative_expressions_creativity_engine"
        ]
      }
    },
    "voice": {
      "system": "voice",
      "hub_file": "voice/voice_hub.py",
      "total_modules": 41,
      "subsystems": {
        "__init__": [
          "voice.adapters.__init__",
          "voice.bio_core.__init__",
          "voice.interfaces.__init__"
        ],
        "orchestration_adapter": [
          "voice.adapters.orchestration_adapter"
        ],
        "oscillator": [
          "voice.bio_core.oscillator.orchestrator",
          "voice.bio_core.oscillator.quantum_layer"
        ],
        "voice": [
          "voice.bio_core.voice.quantum_voice_enhancer"
        ],
        "elevenlabs": [
          "voice.integrations.elevenlabs.__init__",
          "voice.integrations.elevenlabs.elevenlabs_client"
        ],
        "openai": [
          "voice.integrations.openai.__init__"
        ],
        "eleven_tts": [
          "voice.interfaces.eleven_tts"
        ],
        "input": [
          "voice.interfaces.input.__init__",
          "voice.interfaces.input.stream_handler"
        ],
        "voice_emotional": [
          "voice.interfaces.voice_emotional.__init__"
        ],
        "voice_interface": [
          "voice.interfaces.voice_interface"
        ],
        "synthesis": [
          "voice.systems.synthesis"
        ],
        "voice_synthesis": [
          "voice.systems.voice_synthesis"
        ]
      },
      "structure": {
        "imports": [
          "# Import all voice subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .orchestration_adapter import orchestration_adapter",
          "from .oscillator import orchestrator, quantum_layer",
          "from .voice import quantum_voice_enhancer",
          "from .elevenlabs import __init__, elevenlabs_client",
          "from .openai import __init__",
          "from .eleven_tts import eleven_tts",
          "from .input import __init__, stream_handler",
          "from .voice_emotional import __init__",
          "from .voice_interface import voice_interface",
          "from .synthesis import synthesis",
          "from .voice_synthesis import voice_synthesis"
        ],
        "registry": "VOICE_REGISTRY = {}",
        "initialization": "async def initialize_voice_system():",
        "exports": [
          "__init__",
          "orchestration_adapter",
          "oscillator",
          "voice",
          "elevenlabs",
          "openai",
          "eleven_tts",
          "input",
          "voice_emotional",
          "voice_interface",
          "synthesis",
          "voice_synthesis"
        ]
      }
    },
    "orchestration": {
      "system": "orchestration",
      "hub_file": "orchestration/orchestration_hub.py",
      "total_modules": 291,
      "subsystems": {
        "__init__": [
          "orchestration.agents.__init__",
          "orchestration.brain.__init__",
          "orchestration.config.__init__",
          "orchestration.core_modules.__init__",
          "orchestration.immune.__init__",
          "orchestration.init.__init__",
          "orchestration.interfaces.__init__",
          "orchestration.monitoring.__init__"
        ],
        "base": [
          "orchestration.agents.base"
        ],
        "builtin": [
          "orchestration.agents.builtin.codex",
          "orchestration.agents.builtin.jules"
        ],
        "meta_cognitive_orchestrator": [
          "orchestration.agents.meta_cognitive_orchestrator",
          "orchestration.brain.meta_cognitive_orchestrator"
        ],
        "meta_cognitive_orchestrator_alt": [
          "orchestration.agents.meta_cognitive_orchestrator_alt"
        ],
        "multi_agent_collaboration": [
          "orchestration.agents.multi_agent_collaboration"
        ],
        "registry": [
          "orchestration.agents.registry"
        ],
        "types": [
          "orchestration.agents.types"
        ],
        "code_process_integration_api": [
          "orchestration.apis.code_process_integration_api"
        ],
        "drift_monitoring_api": [
          "orchestration.apis.drift_monitoring_api"
        ],
        "GlobalInstitutionalCompliantEngine": [
          "orchestration.brain.GlobalInstitutionalCompliantEngine"
        ],
        "GlobalInstitutionalFramework": [
          "orchestration.brain.GlobalInstitutionalFramework"
        ],
        "MultiBrainSymphony": [
          "orchestration.brain.MultiBrainSymphony"
        ],
        "abstract_reasoning": [
          "orchestration.brain.abstract_reasoning.confidence_calibrator",
          "orchestration.brain.abstract_reasoning.oscillator"
        ],
        "access": [
          "orchestration.brain.access.__init__",
          "orchestration.brain.access.tier_manager"
        ],
        "adaptive_image_generator": [
          "orchestration.brain.adaptive_image_generator"
        ],
        "ai_compliance": [
          "orchestration.brain.ai_compliance"
        ],
        "attention": [
          "orchestration.brain.attention.quantum_attention"
        ],
        "australian_awareness_engine": [
          "orchestration.brain.australian_awareness_engine"
        ],
        "awareness_engine": [
          "orchestration.brain.awareness_engine"
        ],
        "awareness_engine_elevated": [
          "orchestration.brain.awareness_engine_elevated"
        ],
        "brain": [
          "orchestration.brain.brain"
        ],
        "canadian_awareness_engine": [
          "orchestration.brain.canadian_awareness_engine"
        ],
        "cognitive": [
          "orchestration.brain.cognitive.__init__",
          "orchestration.brain.cognitive.awareness.__init__",
          "orchestration.brain.cognitive.voice_engine"
        ],
        "cognitive_core": [
          "orchestration.brain.cognitive_core"
        ],
        "collaborative_ai_agent_system": [
          "orchestration.brain.collaborative_ai_agent_system"
        ],
        "collapse_bridge": [
          "orchestration.brain.collapse_bridge"
        ],
        "collapse_chain_integrity": [
          "orchestration.brain.collapse_chain_integrity"
        ],
        "collapse_chain_simulator": [
          "orchestration.brain.collapse_chain_simulator"
        ],
        "compliance": [
          "orchestration.brain.compliance.__init__",
          "orchestration.brain.compliance.ai_compliance_manager",
          "orchestration.brain.compliance.constitutional_ai"
        ],
        "compliance_registry": [
          "orchestration.brain.compliance_registry"
        ],
        "config": [
          "orchestration.brain.config.__init__",
          "orchestration.brain.config.paths",
          "orchestration.brain.config.read_settings",
          "orchestration.brain.config.settings",
          "orchestration.brain.config.settings_editor",
          "orchestration.brain.config.settings_loader"
        ],
        "consciousness": [
          "orchestration.brain.consciousness.__init__",
          "orchestration.brain.consciousness.dream_narrator",
          "orchestration.brain.consciousness.memory_identity"
        ],
        "context": [
          "orchestration.brain.context.__init__",
          "orchestration.brain.context.context_sync"
        ],
        "context_analyzer": [
          "orchestration.brain.context_analyzer"
        ],
        "controller": [
          "orchestration.brain.controller"
        ],
        "core": [
          "orchestration.brain.core.azure_free_tier_strategy",
          "orchestration.brain.core.azure_openai_client",
          "orchestration.brain.core.capability_levels",
          "orchestration.brain.core.response_types",
          "orchestration.brain.core.types"
        ],
        "core_system": [
          "orchestration.brain.core_system"
        ],
        "cpu_friendly_compliance": [
          "orchestration.brain.cpu_friendly_compliance"
        ],
        "das_awareness_engine": [
          "orchestration.brain.das_awareness_engine"
        ],
        "data": [
          "orchestration.brain.data.__init__",
          "orchestration.brain.data.consent_manager"
        ],
        "dna": [
          "orchestration.brain.dna.__init__",
          "orchestration.brain.dna.dna_link"
        ],
        "dream_engine": [
          "orchestration.brain.dream_engine.__init__",
          "orchestration.brain.dream_engine.cli.__init__",
          "orchestration.brain.dream_engine.cli.dream_cli",
          "orchestration.brain.dream_engine.cli.dream_processor",
          "orchestration.brain.dream_engine.visualizer_core"
        ],
        "dream_mutator": [
          "orchestration.brain.dream_mutator"
        ],
        "drift_pattern_analyzer": [
          "orchestration.brain.drift_pattern_analyzer"
        ],
        "dynamic_adaptive_dashboard": [
          "orchestration.brain.dynamic_adaptive_dashboard"
        ],
        "emotional": [
          "orchestration.brain.emotional.__init__",
          "orchestration.brain.emotional.ethical_conflict_resolution",
          "orchestration.brain.emotional.ethical_stop"
        ],
        "entropy_probe": [
          "orchestration.brain.entropy_probe"
        ],
        "ethics": [
          "orchestration.brain.ethics.__init__",
          "orchestration.brain.ethics.ethical_conflict_resolution",
          "orchestration.brain.ethics.ethical_hierarchy",
          "orchestration.brain.ethics.ethical_stop",
          "orchestration.brain.ethics.ethics_engine",
          "orchestration.brain.ethics.ethics_guard"
        ],
        "eu_ai_transparency": [
          "orchestration.brain.eu_ai_transparency"
        ],
        "eu_awareness_engine": [
          "orchestration.brain.eu_awareness_engine"
        ],
        "experience_manager": [
          "orchestration.brain.experience_manager"
        ],
        "expression": [
          "orchestration.brain.expression"
        ],
        "fix_lambda_symbols": [
          "orchestration.brain.fix_lambda_symbols"
        ],
        "github_vulnerability_manager": [
          "orchestration.brain.github_vulnerability_manager"
        ],
        "governance": [
          "orchestration.brain.governance.__init__",
          "orchestration.brain.governance.dao_governance_node"
        ],
        "identity_manager": [
          "orchestration.brain.identity_manager"
        ],
        "integration": [
          "orchestration.brain.integration.__init__"
        ],
        "integration_bridge": [
          "orchestration.brain.integration_bridge"
        ],
        "integrity_probe": [
          "orchestration.brain.integrity_probe"
        ],
        "learn_to_learn": [
          "orchestration.brain.learn_to_learn"
        ],
        "llm_engine": [
          "orchestration.brain.llm_engine"
        ],
        "logging": [
          "orchestration.brain.logging.__init__",
          "orchestration.brain.logging.output_log"
        ],
        "mesh": [
          "orchestration.brain.mesh.cognitive_mesh_coordinator",
          "orchestration.brain.mesh.collapse_mesh"
        ],
        "meta": [
          "orchestration.brain.meta.__init__",
          "orchestration.brain.meta.cognition.__init__",
          "orchestration.brain.meta.compliance_engine_20250503213400",
          "orchestration.brain.meta.integrations.__init__",
          "orchestration.brain.meta.integrations.bot_enhancement",
          "orchestration.brain.meta.learning.__init__",
          "orchestration.brain.meta.learning.system"
        ],
        "meta_cognitive": [
          "orchestration.brain.meta_cognitive.__init__",
          "orchestration.brain.meta_cognitive.reflective_introspection_system"
        ],
        "monitor": [
          "orchestration.brain.monitor"
        ],
        "monitoring": [
          "orchestration.brain.monitoring.__init__",
          "orchestration.brain.monitoring.guardian_reflector",
          "orchestration.brain.monitoring.performance"
        ],
        "multi_brain_orchestrator": [
          "orchestration.brain.multi_brain_orchestrator"
        ],
        "net": [
          "orchestration.brain.net.__init__",
          "orchestration.brain.net.async_client",
          "orchestration.brain.net.client",
          "orchestration.brain.net.client_event"
        ],
        "neural": [
          "orchestration.brain.neural.__init__",
          "orchestration.brain.neural.cognitive_core",
          "orchestration.brain.neural.neural_intelligence_api",
          "orchestration.brain.neural.neural_intelligence_main"
        ],
        "neuro_symbolic": [
          "orchestration.brain.neuro_symbolic.__init__",
          "orchestration.brain.neuro_symbolic.bridge",
          "orchestration.brain.neuro_symbolic.governance.__init__",
          "orchestration.brain.neuro_symbolic.governance.symbolic_action_protocol",
          "orchestration.brain.neuro_symbolic.hybrid_integration",
          "orchestration.brain.neuro_symbolic.neural_processor",
          "orchestration.brain.neuro_symbolic.neuro_symbolic_engine",
          "orchestration.brain.neuro_symbolic.neuro_symbolic_integration"
        ],
        "nodes": [
          "orchestration.brain.nodes.__init__"
        ],
        "orchestration": [
          "orchestration.brain.orchestration.__init__",
          "orchestration.brain.orchestration.emotional_oscillator",
          "orchestration.brain.orchestration.orchestrator",
          "orchestration.brain.orchestration.orchestrator_core",
          "orchestration.brain.orchestration.the_oscillator"
        ],
        "output": [
          "orchestration.brain.output.__init__",
          "orchestration.brain.output.message_hub",
          "orchestration.brain.output.report_generator"
        ],
        "personality": [
          "orchestration.brain.personality.__init__",
          "orchestration.brain.personality.personality_refiner"
        ],
        "pr_security_review_github_actions": [
          "orchestration.brain.pr_security_review_github_actions"
        ],
        "pr_security_review_starter": [
          "orchestration.brain.pr_security_review_starter"
        ],
        "prediction": [
          "orchestration.brain.prediction.__init__",
          "orchestration.brain.prediction.predictive_resource_manager",
          "orchestration.brain.prediction.world_models"
        ],
        "prime_oscillator": [
          "orchestration.brain.prime_oscillator"
        ],
        "privacy_manager": [
          "orchestration.brain.privacy_manager"
        ],
        "qrl_code": [
          "orchestration.brain.qrl_code.__init__",
          "orchestration.brain.qrl_code.com_validator",
          "orchestration.brain.qrl_code.qrly"
        ],
        "quantum_annealed_consensus": [
          "orchestration.brain.quantum_annealed_consensus"
        ],
        "reasoning": [
          "orchestration.brain.reasoning.__init__",
          "orchestration.brain.reasoning.symbolic_validator"
        ],
        "rem": [
          "orchestration.brain.rem.__init__",
          "orchestration.brain.rem.dream_log",
          "orchestration.brain.rem.dream_processor_integrator",
          "orchestration.brain.rem.dream_stats",
          "orchestration.brain.rem.generate_dream",
          "orchestration.brain.rem.generate_dream_data",
          "orchestration.brain.rem.lidar_emotion_interpreter",
          "orchestration.brain.rem.rem",
          "orchestration.brain.rem.sleep_cycle"
        ],
        "research_awareness_engine": [
          "orchestration.brain.research_awareness_engine"
        ],
        "safe_subprocess_executor": [
          "orchestration.brain.safe_subprocess_executor"
        ],
        "safety_guardrails": [
          "orchestration.brain.safety_guardrails"
        ],
        "seamless": [
          "orchestration.brain.seamless.__init__",
          "orchestration.brain.seamless.experience_core"
        ],
        "security_pr_analyzer": [
          "orchestration.brain.security_pr_analyzer"
        ],
        "self_improvement": [
          "orchestration.brain.self_improvement.__init__",
          "orchestration.brain.self_improvement.meta_learner"
        ],
        "spine": [
          "orchestration.brain.spine.__init__",
          "orchestration.brain.spine.emotion_intent_link",
          "orchestration.brain.spine.emotion_log",
          "orchestration.brain.spine.emotion_log_alt",
          "orchestration.brain.spine.emotion_mapper",
          "orchestration.brain.spine.emotion_mapper_alt",
          "orchestration.brain.spine.emotion_trend_tracker",
          "orchestration.brain.spine.emotional_sorter",
          "orchestration.brain.spine.fold_engine",
          "orchestration.brain.spine.guardian",
          "orchestration.brain.spine.hash",
          "orchestration.brain.spine.main_loop",
          "orchestration.brain.spine.self_reflect_cron",
          "orchestration.brain.spine.trait_manager",
          "orchestration.brain.spine.trait_sync",
          "orchestration.brain.spine.trait_sync_gpt_synb_ref",
          "orchestration.brain.spine.unified_self"
        ],
        "subsystems": [
          "orchestration.brain.subsystems.__init__"
        ],
        "symbol_validator": [
          "orchestration.brain.symbol_validator"
        ],
        "symbolic_ai": [
          "orchestration.brain.symbolic_ai.__init__",
          "orchestration.brain.symbolic_ai.modules.__init__",
          "orchestration.brain.symbolic_ai.modules.dissonance_detector",
          "orchestration.brain.symbolic_ai.modules.dream_generator",
          "orchestration.brain.symbolic_ai.modules.episodic_recall",
          "orchestration.brain.symbolic_ai.modules.intent_inference",
          "orchestration.brain.symbolic_ai.orchestrator"
        ],
        "symbolic_engine": [
          "orchestration.brain.symbolic_engine.__init__",
          "orchestration.brain.symbolic_engine.semantic_reasoner",
          "orchestration.brain.symbolic_engine.symbolic_core"
        ],
        "token_budget_controller": [
          "orchestration.brain.token_budget_controller"
        ],
        "trace_memoria_logger": [
          "orchestration.brain.trace_memoria_logger"
        ],
        "tracing": [
          "orchestration.brain.tracing.__init__",
          "orchestration.brain.tracing.trace_tools"
        ],
        "uk_awareness_engine": [
          "orchestration.brain.uk_awareness_engine"
        ],
        "unified_integration": [
          "orchestration.brain.unified_integration.adapters.__init__",
          "orchestration.brain.unified_integration.adapters.awareness_adapter",
          "orchestration.brain.unified_integration.adapters.bio_adapter",
          "orchestration.brain.unified_integration.adapters.brain_adapter",
          "orchestration.brain.unified_integration.adapters.dream_adapter",
          "orchestration.brain.unified_integration.adapters.legacy_adapter",
          "orchestration.brain.unified_integration.adapters.voice_adapter"
        ],
        "unified_self_merge_divergence": [
          "orchestration.brain.unified_self_merge_divergence"
        ],
        "us_institutional_awareness_engine": [
          "orchestration.brain.us_institutional_awareness_engine"
        ],
        "utils": [
          "orchestration.brain.utils.__init__"
        ],
        "validate_pr_security_review": [
          "orchestration.brain.validate_pr_security_review"
        ],
        "visualization": [
          "orchestration.brain.visualization.__init__",
          "orchestration.brain.visualization.golden_healix_mapper",
          "orchestration.brain.visualization.healix_visualizer",
          "orchestration.brain.visualization.memory_helix_visualizer"
        ],
        "vulnerability_dashboard": [
          "orchestration.brain.vulnerability_dashboard"
        ],
        "migration_router": [
          "orchestration.config.migration_router"
        ],
        "orchestrator_flags": [
          "orchestration.config.orchestrator_flags"
        ],
        "production_config": [
          "orchestration.config.production_config"
        ],
        "core_integrator": [
          "orchestration.core_modules.core_integrator"
        ],
        "master_orchestrator_alt": [
          "orchestration.core_modules.master_orchestrator_alt"
        ],
        "orchestration_alt": [
          "orchestration.core_modules.orchestration_alt"
        ],
        "orchestrator_core": [
          "orchestration.core_modules.orchestrator_core"
        ],
        "orchestrator_core_oxn": [
          "orchestration.core_modules.orchestrator_core_oxn"
        ],
        "plugin_loader": [
          "orchestration.core_modules.plugin_loader"
        ],
        "process_orchestrator": [
          "orchestration.core_modules.process_orchestrator"
        ],
        "signal_middleware": [
          "orchestration.core_modules.signal_middleware"
        ],
        "signals": [
          "orchestration.core_modules.signals"
        ],
        "symbolic_handshake": [
          "orchestration.core_modules.symbolic_handshake"
        ],
        "symbolic_signal_router": [
          "orchestration.core_modules.symbolic_signal_router"
        ],
        "system_orchestrator": [
          "orchestration.core_modules.system_orchestrator"
        ],
        "workflow_engine": [
          "orchestration.core_modules.workflow_engine"
        ],
        "echo_controller": [
          "orchestration.echo.echo_controller"
        ],
        "system_watchdog": [
          "orchestration.immune.system_watchdog"
        ],
        "seed_chain_bootstrapper": [
          "orchestration.init.seed_chain_bootstrapper"
        ],
        "human_in_the_loop_orchestrator": [
          "orchestration.integration.human_in_the_loop_orchestrator"
        ],
        "vendor_sync_orchestrator": [
          "orchestration.integration.vendor_sync_orchestrator"
        ],
        "agent_interface": [
          "orchestration.interfaces.agent_interface"
        ],
        "orchestration_protocol": [
          "orchestration.interfaces.orchestration_protocol"
        ],
        "plugin_registry": [
          "orchestration.interfaces.plugin_registry"
        ],
        "ethics_orchestrator": [
          "orchestration.migrated.ethics_orchestrator"
        ],
        "memory_integration_orchestrator": [
          "orchestration.migrated.memory_integration_orchestrator"
        ],
        "memory_orchestrator": [
          "orchestration.migrated.memory_orchestrator"
        ],
        "emotional_oscillator": [
          "orchestration.monitoring.emotional_oscillator"
        ],
        "health_checks": [
          "orchestration.monitoring.health_checks"
        ],
        "remediator_agent": [
          "orchestration.monitoring.remediator_agent"
        ],
        "sub_agents": [
          "orchestration.monitoring.sub_agents.__init__",
          "orchestration.monitoring.sub_agents.ethics_guardian",
          "orchestration.monitoring.sub_agents.memory_cleaner"
        ],
        "the_oscillator": [
          "orchestration.monitoring.the_oscillator"
        ],
        "LGOV_validator": [
          "orchestration.security.LGOV_validator"
        ],
        "dast": [
          "orchestration.security.dast.__init__",
          "orchestration.security.dast.adapters",
          "orchestration.security.dast.api",
          "orchestration.security.dast.engine",
          "orchestration.security.dast.intelligence",
          "orchestration.security.dast.processors",
          "orchestration.security.dast.verify"
        ],
        "ethics_loop_guard": [
          "orchestration.security.ethics_loop_guard"
        ],
        "component_orchestrator": [
          "orchestration.specialized.component_orchestrator"
        ],
        "deployment_orchestrator": [
          "orchestration.specialized.deployment_orchestrator"
        ],
        "inter_agent_simulation": [
          "orchestration.specialized.inter_agent_simulation"
        ],
        "loop_recovery_simulator": [
          "orchestration.specialized.loop_recovery_simulator"
        ],
        "feedback_collector": [
          "orchestration.user_feedback.feedback_collector"
        ],
        "symbolic_tuner": [
          "orchestration.user_feedback.symbolic_tuner"
        ]
      },
      "structure": {
        "imports": [
          "# Import all orchestration subsystems",
          "from .__init__ import __init__, __init__, __init__",
          "from .base import base",
          "from .builtin import codex, jules",
          "from .meta_cognitive_orchestrator import meta_cognitive_orchestrator, meta_cognitive_orchestrator",
          "from .meta_cognitive_orchestrator_alt import meta_cognitive_orchestrator_alt",
          "from .multi_agent_collaboration import multi_agent_collaboration",
          "from .registry import registry",
          "from .types import types",
          "from .code_process_integration_api import code_process_integration_api",
          "from .drift_monitoring_api import drift_monitoring_api",
          "from .GlobalInstitutionalCompliantEngine import GlobalInstitutionalCompliantEngine",
          "from .GlobalInstitutionalFramework import GlobalInstitutionalFramework",
          "from .MultiBrainSymphony import MultiBrainSymphony",
          "from .abstract_reasoning import confidence_calibrator, oscillator",
          "from .access import __init__, tier_manager",
          "from .adaptive_image_generator import adaptive_image_generator",
          "from .ai_compliance import ai_compliance",
          "from .attention import quantum_attention",
          "from .australian_awareness_engine import australian_awareness_engine",
          "from .awareness_engine import awareness_engine",
          "from .awareness_engine_elevated import awareness_engine_elevated",
          "from .brain import brain",
          "from .canadian_awareness_engine import canadian_awareness_engine",
          "from .cognitive import __init__, __init__, voice_engine",
          "from .cognitive_core import cognitive_core",
          "from .collaborative_ai_agent_system import collaborative_ai_agent_system",
          "from .collapse_bridge import collapse_bridge",
          "from .collapse_chain_integrity import collapse_chain_integrity",
          "from .collapse_chain_simulator import collapse_chain_simulator",
          "from .compliance import __init__, ai_compliance_manager, constitutional_ai",
          "from .compliance_registry import compliance_registry",
          "from .config import __init__, paths, read_settings",
          "from .consciousness import __init__, dream_narrator, memory_identity",
          "from .context import __init__, context_sync",
          "from .context_analyzer import context_analyzer",
          "from .controller import controller",
          "from .core import azure_free_tier_strategy, azure_openai_client, capability_levels",
          "from .core_system import core_system",
          "from .cpu_friendly_compliance import cpu_friendly_compliance",
          "from .das_awareness_engine import das_awareness_engine",
          "from .data import __init__, consent_manager",
          "from .dna import __init__, dna_link",
          "from .dream_engine import __init__, __init__, dream_cli",
          "from .dream_mutator import dream_mutator",
          "from .drift_pattern_analyzer import drift_pattern_analyzer",
          "from .dynamic_adaptive_dashboard import dynamic_adaptive_dashboard",
          "from .emotional import __init__, ethical_conflict_resolution, ethical_stop",
          "from .entropy_probe import entropy_probe",
          "from .ethics import __init__, ethical_conflict_resolution, ethical_hierarchy",
          "from .eu_ai_transparency import eu_ai_transparency",
          "from .eu_awareness_engine import eu_awareness_engine",
          "from .experience_manager import experience_manager",
          "from .expression import expression",
          "from .fix_lambda_symbols import fix_lambda_symbols",
          "from .github_vulnerability_manager import github_vulnerability_manager",
          "from .governance import __init__, dao_governance_node",
          "from .identity_manager import identity_manager",
          "from .integration import __init__",
          "from .integration_bridge import integration_bridge",
          "from .integrity_probe import integrity_probe",
          "from .learn_to_learn import learn_to_learn",
          "from .llm_engine import llm_engine",
          "from .logging import __init__, output_log",
          "from .mesh import cognitive_mesh_coordinator, collapse_mesh",
          "from .meta import __init__, __init__, compliance_engine_20250503213400",
          "from .meta_cognitive import __init__, reflective_introspection_system",
          "from .monitor import monitor",
          "from .monitoring import __init__, guardian_reflector, performance",
          "from .multi_brain_orchestrator import multi_brain_orchestrator",
          "from .net import __init__, async_client, client",
          "from .neural import __init__, cognitive_core, neural_intelligence_api",
          "from .neuro_symbolic import __init__, bridge, __init__",
          "from .nodes import __init__",
          "from .orchestration import __init__, emotional_oscillator, orchestrator",
          "from .output import __init__, message_hub, report_generator",
          "from .personality import __init__, personality_refiner",
          "from .pr_security_review_github_actions import pr_security_review_github_actions",
          "from .pr_security_review_starter import pr_security_review_starter",
          "from .prediction import __init__, predictive_resource_manager, world_models",
          "from .prime_oscillator import prime_oscillator",
          "from .privacy_manager import privacy_manager",
          "from .qrl_code import __init__, com_validator, qrly",
          "from .quantum_annealed_consensus import quantum_annealed_consensus",
          "from .reasoning import __init__, symbolic_validator",
          "from .rem import __init__, dream_log, dream_processor_integrator",
          "from .research_awareness_engine import research_awareness_engine",
          "from .safe_subprocess_executor import safe_subprocess_executor",
          "from .safety_guardrails import safety_guardrails",
          "from .seamless import __init__, experience_core",
          "from .security_pr_analyzer import security_pr_analyzer",
          "from .self_improvement import __init__, meta_learner",
          "from .spine import __init__, emotion_intent_link, emotion_log",
          "from .subsystems import __init__",
          "from .symbol_validator import symbol_validator",
          "from .symbolic_ai import __init__, __init__, dissonance_detector",
          "from .symbolic_engine import __init__, semantic_reasoner, symbolic_core",
          "from .token_budget_controller import token_budget_controller",
          "from .trace_memoria_logger import trace_memoria_logger",
          "from .tracing import __init__, trace_tools",
          "from .uk_awareness_engine import uk_awareness_engine",
          "from .unified_integration import __init__, awareness_adapter, bio_adapter",
          "from .unified_self_merge_divergence import unified_self_merge_divergence",
          "from .us_institutional_awareness_engine import us_institutional_awareness_engine",
          "from .utils import __init__",
          "from .validate_pr_security_review import validate_pr_security_review",
          "from .visualization import __init__, golden_healix_mapper, healix_visualizer",
          "from .vulnerability_dashboard import vulnerability_dashboard",
          "from .migration_router import migration_router",
          "from .orchestrator_flags import orchestrator_flags",
          "from .production_config import production_config",
          "from .core_integrator import core_integrator",
          "from .master_orchestrator_alt import master_orchestrator_alt",
          "from .orchestration_alt import orchestration_alt",
          "from .orchestrator_core import orchestrator_core",
          "from .orchestrator_core_oxn import orchestrator_core_oxn",
          "from .plugin_loader import plugin_loader",
          "from .process_orchestrator import process_orchestrator",
          "from .signal_middleware import signal_middleware",
          "from .signals import signals",
          "from .symbolic_handshake import symbolic_handshake",
          "from .symbolic_signal_router import symbolic_signal_router",
          "from .system_orchestrator import system_orchestrator",
          "from .workflow_engine import workflow_engine",
          "from .echo_controller import echo_controller",
          "from .system_watchdog import system_watchdog",
          "from .seed_chain_bootstrapper import seed_chain_bootstrapper",
          "from .human_in_the_loop_orchestrator import human_in_the_loop_orchestrator",
          "from .vendor_sync_orchestrator import vendor_sync_orchestrator",
          "from .agent_interface import agent_interface",
          "from .orchestration_protocol import orchestration_protocol",
          "from .plugin_registry import plugin_registry",
          "from .ethics_orchestrator import ethics_orchestrator",
          "from .memory_integration_orchestrator import memory_integration_orchestrator",
          "from .memory_orchestrator import memory_orchestrator",
          "from .emotional_oscillator import emotional_oscillator",
          "from .health_checks import health_checks",
          "from .remediator_agent import remediator_agent",
          "from .sub_agents import __init__, ethics_guardian, memory_cleaner",
          "from .the_oscillator import the_oscillator",
          "from .LGOV_validator import LGOV_validator",
          "from .dast import __init__, adapters, api",
          "from .ethics_loop_guard import ethics_loop_guard",
          "from .component_orchestrator import component_orchestrator",
          "from .deployment_orchestrator import deployment_orchestrator",
          "from .inter_agent_simulation import inter_agent_simulation",
          "from .loop_recovery_simulator import loop_recovery_simulator",
          "from .feedback_collector import feedback_collector",
          "from .symbolic_tuner import symbolic_tuner"
        ],
        "registry": "ORCHESTRATION_REGISTRY = {}",
        "initialization": "async def initialize_orchestration_system():",
        "exports": [
          "__init__",
          "base",
          "builtin",
          "meta_cognitive_orchestrator",
          "meta_cognitive_orchestrator_alt",
          "multi_agent_collaboration",
          "registry",
          "types",
          "code_process_integration_api",
          "drift_monitoring_api",
          "GlobalInstitutionalCompliantEngine",
          "GlobalInstitutionalFramework",
          "MultiBrainSymphony",
          "abstract_reasoning",
          "access",
          "adaptive_image_generator",
          "ai_compliance",
          "attention",
          "australian_awareness_engine",
          "awareness_engine",
          "awareness_engine_elevated",
          "brain",
          "canadian_awareness_engine",
          "cognitive",
          "cognitive_core",
          "collaborative_ai_agent_system",
          "collapse_bridge",
          "collapse_chain_integrity",
          "collapse_chain_simulator",
          "compliance",
          "compliance_registry",
          "config",
          "consciousness",
          "context",
          "context_analyzer",
          "controller",
          "core",
          "core_system",
          "cpu_friendly_compliance",
          "das_awareness_engine",
          "data",
          "dna",
          "dream_engine",
          "dream_mutator",
          "drift_pattern_analyzer",
          "dynamic_adaptive_dashboard",
          "emotional",
          "entropy_probe",
          "ethics",
          "eu_ai_transparency",
          "eu_awareness_engine",
          "experience_manager",
          "expression",
          "fix_lambda_symbols",
          "github_vulnerability_manager",
          "governance",
          "identity_manager",
          "integration",
          "integration_bridge",
          "integrity_probe",
          "learn_to_learn",
          "llm_engine",
          "logging",
          "mesh",
          "meta",
          "meta_cognitive",
          "monitor",
          "monitoring",
          "multi_brain_orchestrator",
          "net",
          "neural",
          "neuro_symbolic",
          "nodes",
          "orchestration",
          "output",
          "personality",
          "pr_security_review_github_actions",
          "pr_security_review_starter",
          "prediction",
          "prime_oscillator",
          "privacy_manager",
          "qrl_code",
          "quantum_annealed_consensus",
          "reasoning",
          "rem",
          "research_awareness_engine",
          "safe_subprocess_executor",
          "safety_guardrails",
          "seamless",
          "security_pr_analyzer",
          "self_improvement",
          "spine",
          "subsystems",
          "symbol_validator",
          "symbolic_ai",
          "symbolic_engine",
          "token_budget_controller",
          "trace_memoria_logger",
          "tracing",
          "uk_awareness_engine",
          "unified_integration",
          "unified_self_merge_divergence",
          "us_institutional_awareness_engine",
          "utils",
          "validate_pr_security_review",
          "visualization",
          "vulnerability_dashboard",
          "migration_router",
          "orchestrator_flags",
          "production_config",
          "core_integrator",
          "master_orchestrator_alt",
          "orchestration_alt",
          "orchestrator_core",
          "orchestrator_core_oxn",
          "plugin_loader",
          "process_orchestrator",
          "signal_middleware",
          "signals",
          "symbolic_handshake",
          "symbolic_signal_router",
          "system_orchestrator",
          "workflow_engine",
          "echo_controller",
          "system_watchdog",
          "seed_chain_bootstrapper",
          "human_in_the_loop_orchestrator",
          "vendor_sync_orchestrator",
          "agent_interface",
          "orchestration_protocol",
          "plugin_registry",
          "ethics_orchestrator",
          "memory_integration_orchestrator",
          "memory_orchestrator",
          "emotional_oscillator",
          "health_checks",
          "remediator_agent",
          "sub_agents",
          "the_oscillator",
          "LGOV_validator",
          "dast",
          "ethics_loop_guard",
          "component_orchestrator",
          "deployment_orchestrator",
          "inter_agent_simulation",
          "loop_recovery_simulator",
          "feedback_collector",
          "symbolic_tuner"
        ]
      }
    }
  },
  "specific_integrations": [
    {
      "name": "NIAS-Safety Integration",
      "priority": "critical",
      "files_to_modify": [
        "core/modules/nias/__init__.py",
        "core/safety/ai_safety_orchestrator.py"
      ],
      "changes": [
        {
          "file": "core/modules/nias/__init__.py",
          "add_import": "from core.safety.ai_safety_orchestrator import get_ai_safety_orchestrator",
          "add_code": "self.safety_orchestrator = get_ai_safety_orchestrator()",
          "modify_method": "push_symbolic_message",
          "add_safety_check": "safety_decision = await self.safety_orchestrator.evaluate_action(...)"
        }
      ]
    },
    {
      "name": "Quantum-Consciousness Integration",
      "priority": "high",
      "files_to_modify": [
        "consciousness/quantum_consciousness_hub.py",
        "quantum/attention_economics.py"
      ],
      "changes": [
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "add_import": "from quantum.attention_economics import QuantumAttentionEconomics",
          "add_code": "self.quantum_attention = QuantumAttentionEconomics()",
          "modify_method": "process_consciousness_event",
          "integrate": "attention_tokens = await self.quantum_attention.mint_attention_tokens(...)"
        }
      ]
    },
    {
      "name": "Memory-Learning Integration",
      "priority": "high",
      "files_to_modify": [
        "memory/systems/memoria_system.py",
        "learning/meta_learning.py"
      ],
      "changes": [
        {
          "file": "memory/systems/memoria_system.py",
          "add_import": "from learning.meta_learning import MetaLearningAdapter",
          "add_code": "self.meta_learner = MetaLearningAdapter()",
          "add_method": "async def learn_from_memories(self, memories: List[Memory]) -> Dict"
        }
      ]
    }
  ]
}