{
  "summary": {
    "total_files_analyzed": 2034,
    "total_entities": 6225,
    "missing_connections": 167,
    "inactive_entities": 2635
  },
  "missing_connections": [
    {
      "entity": {
        "name": "QuantumConsciousnessHub",
        "type": "class",
        "file_path": "consciousness/quantum_consciousness_hub.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "inject_components"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import QuantumConsciousnessHub in system hubs",
      "specific_actions": [
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "line": 1,
          "add_import": "from consciousness.quantum_consciousness_hub import QuantumConsciousnessHub"
        },
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "class": "QuantumConsciousnessHub",
          "method": "__init__",
          "add_code": "self.quantumconsciousnesshub = QuantumConsciousnessHub()"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessCore",
        "type": "class",
        "file_path": "orchestration/brain/consciousness.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "awaken",
          "evolve_consciousness",
          "_evolve_to",
          "register_process",
          "unregister_process",
          "get_consciousness_context",
          "get_state_info",
          "_can_evolve",
          "get_evolution_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import ConsciousnessCore in system hubs",
      "specific_actions": [
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "line": 1,
          "add_import": "from orchestration.brain.consciousness import ConsciousnessCore"
        },
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "class": "QuantumConsciousnessHub",
          "method": "__init__",
          "add_code": "self.consciousnesscore = ConsciousnessCore()"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAttentionEconomics",
        "type": "class",
        "file_path": "quantum/attention_economics.py",
        "line_number": 78,
        "methods": [
          "__init__",
          "_get_allowed_uses",
          "_time_of_day_multiplier",
          "_emotional_value_multiplier",
          "_calculate_rarity_multiplier",
          "get_user_attention_balance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import QuantumAttentionEconomics in system hubs",
      "specific_actions": [
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "line": 1,
          "add_import": "from quantum.attention_economics import QuantumAttentionEconomics"
        },
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "class": "QuantumConsciousnessHub",
          "method": "__init__",
          "add_code": "self.quantumattentioneconomics = QuantumAttentionEconomics()"
        }
      ]
    },
    {
      "entity": {
        "name": "AISafetyOrchestrator",
        "type": "class",
        "file_path": "core/safety/ai_safety_orchestrator.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "_requires_consensus",
          "_extract_user_state",
          "_heuristic_synthesis",
          "_update_safety_metrics",
          "_calculate_decision_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import AISafetyOrchestrator in system hubs",
      "specific_actions": [
        {
          "file": "features/integration/safety/coordinator.py",
          "line": 1,
          "add_import": "from core.safety.ai_safety_orchestrator import AISafetyOrchestrator"
        },
        {
          "file": "features/integration/safety/coordinator.py",
          "class": "EnhancedSafetyCoordinator",
          "method": "__init__",
          "add_code": "self.aisafetyorchestrator = AISafetyOrchestrator()"
        }
      ]
    },
    {
      "entity": {
        "name": "NIASCore",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 45,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import NIASCore in system hubs",
      "specific_actions": [
        {
          "create_file": "nias/nias_hub.py",
          "content": "\"\"\"\nNias System Hub\nCentral coordination for nias subsystem\n\"\"\"\n\nfrom typing import Dict, Any, Optional\nfrom core.modules.nias.__init__ import NIASCore\n\nclass NiasHub:\n    \"\"\"Central hub for nias system coordination\"\"\"\n    \n    def __init__(self):\n        self.services: Dict[str, Any] = {}\n        self.niascore = NIASCore()\n        self._initialize_services()\n    \n    def _initialize_services(self):\n        \"\"\"Initialize all nias services\"\"\"\n        self.register_service('niascore', self.niascore)\n    \n    def register_service(self, name: str, service: Any) -> None:\n        \"\"\"Register a service with the hub\"\"\"\n        self.services[name] = service\n    \n    def get_service(self, name: str) -> Optional[Any]:\n        \"\"\"Get a registered service\"\"\"\n        return self.services.get(name)\n\n# Singleton instance\n_nias_hub_instance = None\n\ndef get_nias_hub() -> NiasHub:\n    \"\"\"Get or create the nias hub instance\"\"\"\n    global _nias_hub_instance\n    if _nias_hub_instance is None:\n        _nias_hub_instance = NiasHub()\n    return _nias_hub_instance\n"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicMatcher",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 80,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Not imported anywhere",
      "recommendation": "Import SymbolicMatcher in system hubs",
      "specific_actions": [
        {
          "create_file": "nias/nias_hub.py",
          "content": "\"\"\"\nNias System Hub\nCentral coordination for nias subsystem\n\"\"\"\n\nfrom typing import Dict, Any, Optional\nfrom core.modules.nias.__init__ import SymbolicMatcher\n\nclass NiasHub:\n    \"\"\"Central hub for nias system coordination\"\"\"\n    \n    def __init__(self):\n        self.services: Dict[str, Any] = {}\n        self.symbolicmatcher = SymbolicMatcher()\n        self._initialize_services()\n    \n    def _initialize_services(self):\n        \"\"\"Initialize all nias services\"\"\"\n        self.register_service('symbolicmatcher', self.symbolicmatcher)\n    \n    def register_service(self, name: str, service: Any) -> None:\n        \"\"\"Register a service with the hub\"\"\"\n        self.services[name] = service\n    \n    def get_service(self, name: str) -> Optional[Any]:\n        \"\"\"Get a registered service\"\"\"\n        return self.services.get(name)\n\n# Singleton instance\n_nias_hub_instance = None\n\ndef get_nias_hub() -> NiasHub:\n    \"\"\"Get or create the nias hub instance\"\"\"\n    global _nias_hub_instance\n    if _nias_hub_instance is None:\n        _nias_hub_instance = NiasHub()\n    return _nias_hub_instance\n"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicOrchestrator",
        "type": "class",
        "file_path": "orchestration/bio_symbolic_orchestrator.py",
        "line_number": 130,
        "methods": [
          "__init__",
          "_default_config",
          "_needs_coherence_optimization",
          "_get_coherence_level",
          "get_bio_symbolic_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BioSymbolicOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/bio_symbolic_orchestrator.py",
          "class": "BioSymbolicOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicFallbackManager",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 58,
        "methods": [
          "__init__",
          "_initialize_fallback_strategies",
          "_initialize_emergency_values",
          "_determine_fallback_level",
          "_determine_fallback_reason",
          "_should_circuit_break",
          "_update_component_health",
          "get_system_health_report",
          "_generate_health_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BioSymbolicFallbackManager",
      "specific_actions": [
        {
          "file": "bio/symbolic/fallback_systems.py",
          "class": "BioSymbolicFallbackManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/base.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/base.py",
          "class": "OrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhosIDManager",
        "type": "class",
        "file_path": "core/id.py",
        "line_number": 383,
        "methods": [
          "__init__",
          "_verify_emoji_seed",
          "_verify_biometrics",
          "_verify_sid_puzzle",
          "_verify_emergency_gesture",
          "_get_tier_permissions",
          "_generate_quantum_signature",
          "get_compliance_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhosIDManager",
      "specific_actions": [
        {
          "file": "core/id.py",
          "class": "LukhosIDManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ShardManager",
        "type": "class",
        "file_path": "core/cluster_sharding.py",
        "line_number": 7,
        "methods": [
          "__init__",
          "get_shard_id",
          "assign_actor",
          "move_actor",
          "get_actor_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ShardManager",
      "specific_actions": [
        {
          "file": "core/cluster_sharding.py",
          "class": "ShardManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedSwarmHub",
        "type": "class",
        "file_path": "core/enhanced_swarm.py",
        "line_number": 855,
        "methods": [
          "__init__",
          "create_colony",
          "_establish_colony_links",
          "_detect_swarm_patterns",
          "get_swarm_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedSwarmHub",
      "specific_actions": [
        {
          "file": "core/enhanced_swarm.py",
          "class": "EnhancedSwarmHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicSwarmHub",
        "type": "class",
        "file_path": "core/bio_symbolic_swarm_hub.py",
        "line_number": 42,
        "methods": [
          "__init__",
          "create_bio_colony",
          "_get_bio_capabilities",
          "create_oracle_colony",
          "_get_active_tasks",
          "_get_swarm_state",
          "_get_collective_memory",
          "_get_bio_processing_state",
          "_select_colonies_for_consciousness_state",
          "_synthesize_results_basic"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BioSymbolicSwarmHub",
      "specific_actions": [
        {
          "file": "core/bio_symbolic_swarm_hub.py",
          "class": "BioSymbolicSwarmHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ResourceManager",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 823,
        "methods": [
          "__init__",
          "_monitor_resources",
          "_adjust_for_memory_pressure",
          "_adjust_for_cpu_pressure",
          "get_strategy",
          "get_all_metrics",
          "optimize_computation",
          "optimize_memory_access",
          "create_resource_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ResourceManager",
      "specific_actions": [
        {
          "file": "core/practical_optimizations.py",
          "class": "ResourceManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsistencyManager",
        "type": "class",
        "file_path": "core/core_utilities.py",
        "line_number": 84,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ConsistencyManager",
      "specific_actions": [
        {
          "file": "core/core_utilities.py",
          "class": "ConsistencyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantizedCycleManager",
        "type": "class",
        "file_path": "core/quantized_cycle_manager.py",
        "line_number": 4,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantizedCycleManager",
      "specific_actions": [
        {
          "file": "core/quantized_cycle_manager.py",
          "class": "QuantizedCycleManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AlertManager",
        "type": "class",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 556,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AlertManager",
      "specific_actions": [
        {
          "file": "orchestration/apis/drift_monitoring_api.py",
          "class": "AlertManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumIdentityManager",
        "type": "class",
        "file_path": "core/quantum_identity_manager.py",
        "line_number": 194,
        "methods": [
          "__init__",
          "_initialize_quantum_components",
          "_initialize_tier_system",
          "_initialize_legacy_integration",
          "_calculate_credential_strength",
          "_calculate_consistency_score",
          "get_identity_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumIdentityManager",
      "specific_actions": [
        {
          "file": "core/quantum_identity_manager.py",
          "class": "QuantumIdentityManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmIdentityOrchestrator",
        "type": "class",
        "file_path": "core/swarm_identity_orchestrator.py",
        "line_number": 129,
        "methods": [
          "__init__",
          "_initialize_event_infrastructure",
          "_initialize_synchronization_system",
          "_start_background_tasks",
          "_update_tier_distribution",
          "_map_operation_to_method",
          "get_orchestrator_statistics",
          "_calculate_avg_metric",
          "_calculate_sync_success_rate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SwarmIdentityOrchestrator",
      "specific_actions": [
        {
          "file": "core/swarm_identity_orchestrator.py",
          "class": "SwarmIdentityOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "StateCoordinator",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 459,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to StateCoordinator",
      "specific_actions": [
        {
          "file": "core/tiered_state_management.py",
          "class": "StateCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SkillRegistry",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 179,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SkillRegistry",
      "specific_actions": [
        {
          "file": "core/agent_coordination.py",
          "class": "SkillRegistry",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyProxyManager",
        "type": "class",
        "file_path": "core/tier_aware_colony_proxy.py",
        "line_number": 497,
        "methods": [
          "__init__",
          "create_proxy",
          "get_proxy",
          "remove_proxy",
          "get_manager_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ColonyProxyManager",
      "specific_actions": [
        {
          "file": "core/tier_aware_colony_proxy.py",
          "class": "ColonyProxyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "StateManager",
        "type": "class",
        "file_path": "core/state_management.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "_load_latest_snapshot",
          "_replay_events",
          "apply_event",
          "log_event",
          "take_snapshot"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to StateManager",
      "specific_actions": [
        {
          "file": "core/state_management.py",
          "class": "StateManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIntegrationOrchestrator",
        "type": "class",
        "file_path": "core/spine/integration_orchestrator.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "_scan_directory",
          "_detect_duplications",
          "_similarity_check",
          "_count_fragmented_dirs",
          "_calculate_complexity",
          "_find_candidates_by_pattern",
          "_create_component_infos",
          "_calculate_priority"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhasIntegrationOrchestrator",
      "specific_actions": [
        {
          "file": "core/spine/integration_orchestrator.py",
          "class": "LukhasIntegrationOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonalityManager",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 252,
        "methods": [
          "__init__",
          "get_personality_profile",
          "update_from_interaction",
          "set_mood",
          "set_energy_level",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to PersonalityManager",
      "specific_actions": [
        {
          "file": "core/personality/personality.py",
          "class": "PersonalityManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AISafetyOrchestrator",
        "type": "class",
        "file_path": "core/safety/ai_safety_orchestrator.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "_requires_consensus",
          "_extract_user_state",
          "_heuristic_synthesis",
          "_update_safety_metrics",
          "_calculate_decision_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AISafetyOrchestrator",
      "specific_actions": [
        {
          "file": "core/safety/ai_safety_orchestrator.py",
          "class": "AISafetyOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AIIntegrationManager",
        "type": "class",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 67,
        "methods": [
          "__init__",
          "_load_ai_service_config",
          "use_github_copilot_cli",
          "_local_analysis_fallback",
          "_save_ai_task_response"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AIIntegrationManager",
      "specific_actions": [
        {
          "file": "core/ai/integration_manager.py",
          "class": "AIIntegrationManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMemoryManager",
        "type": "class",
        "file_path": "memory/quantum_memory_manager.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "_initialize_quantum_like_state",
          "_apply_decoherence",
          "_collapse_superposition",
          "_evolve_quantum_like_state",
          "_entangle_quantum_like_states",
          "_matches_criteria"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumMemoryManager",
      "specific_actions": [
        {
          "file": "memory/quantum_memory_manager.py",
          "class": "QuantumMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedMemoryManager",
        "type": "class",
        "file_path": "memory/systems/memory_advanced_manager.py",
        "line_number": 64,
        "methods": [
          "__init__",
          "_load_emotion_vectors",
          "get_memory_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AdvancedMemoryManager",
      "specific_actions": [
        {
          "file": "memory/systems/memory_advanced_manager.py",
          "class": "AdvancedMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "PerformanceOrchestrator",
        "type": "class",
        "file_path": "core/performance/orchestrator.py",
        "line_number": 176,
        "methods": [
          "__init__",
          "_init_observability_system",
          "_init_compliance_system",
          "_init_ltrace_system",
          "_calculate_improvements",
          "_compare_with_baseline"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to PerformanceOrchestrator",
      "specific_actions": [
        {
          "file": "core/performance/orchestrator.py",
          "class": "PerformanceOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaeTopologyManager",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 341,
        "methods": [
          "__init__",
          "optimize_cristae_topology",
          "_analyze_topology_efficiency",
          "_design_optimal_cristae",
          "_apply_cristae_transformation",
          "_apply_tubular_folding",
          "_apply_lamellar_folding",
          "_apply_hybrid_folding",
          "_calculate_atp_distribution",
          "_calculate_improvement"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CristaeTopologyManager",
      "specific_actions": [
        {
          "file": "quantum/abas_quantum_specialist.py",
          "class": "CristaeTopologyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "GeofencingManager",
        "type": "class",
        "file_path": "core/services/location/geofencing_manager.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "_calculate_distance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to GeofencingManager",
      "specific_actions": [
        {
          "file": "core/services/location/geofencing_manager.py",
          "class": "GeofencingManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryManager",
        "type": "class",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 420,
        "methods": [
          "__init__",
          "store_interaction",
          "get_relevant_memories",
          "_calculate_importance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryManager",
      "specific_actions": [
        {
          "file": "voice/context_aware_voice_modular.py",
          "class": "MemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMemoryManager",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "line_number": 83,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DreamMemoryManager",
      "specific_actions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
          "class": "DreamMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMemoryManager",
        "type": "class",
        "file_path": "consciousness/systems/integrator.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedMemoryManager",
      "specific_actions": [
        {
          "file": "consciousness/systems/integrator.py",
          "class": "EnhancedMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseMemoryManager",
        "type": "class",
        "file_path": "memory/base_manager.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "generate_memory_id",
          "_save_to_disk",
          "_load_from_disk",
          "_load_index",
          "_save_index",
          "_update_index",
          "__repr__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BaseMemoryManager",
      "specific_actions": [
        {
          "file": "memory/base_manager.py",
          "class": "BaseMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedStateManager",
        "type": "class",
        "file_path": "memory/distributed_state_manager.py",
        "line_number": 104,
        "methods": [
          "__init__",
          "_get_shard_id",
          "_start_background_tasks",
          "_ttl_cleanup_loop",
          "_cleanup_expired_entries",
          "_snapshot_loop",
          "_analyze_access_patterns",
          "_optimize_state_types",
          "set",
          "get",
          "delete",
          "get_shard_keys",
          "get_shard_stats",
          "get_global_stats",
          "_create_snapshot",
          "_restore_state",
          "_restore_from_snapshot",
          "_apply_state_event",
          "_restore_key_from_events",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DistributedStateManager",
      "specific_actions": [
        {
          "file": "memory/distributed_state_manager.py",
          "class": "DistributedStateManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiNodeStateManager",
        "type": "class",
        "file_path": "memory/distributed_state_manager.py",
        "line_number": 576,
        "methods": [
          "__init__",
          "get_node",
          "set",
          "get",
          "get_cluster_stats",
          "shutdown_all"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MultiNodeStateManager",
      "specific_actions": [
        {
          "file": "memory/distributed_state_manager.py",
          "class": "MultiNodeStateManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMemoryManager",
        "type": "class",
        "file_path": "memory/drift_memory_manager.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "_create_symbolic_state",
          "_compute_data_hash",
          "_calculate_drift_vector",
          "_apply_drift_correction",
          "_apply_state_correction",
          "_record_drift_event",
          "_identify_common_drift_patterns",
          "_calculate_drift_trend",
          "_matches_drift_pattern",
          "_matches_criteria"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DriftMemoryManager",
      "specific_actions": [
        {
          "file": "memory/drift_memory_manager.py",
          "class": "DriftMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalMemoryManager",
        "type": "class",
        "file_path": "memory/emotional_memory_manager.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "_extract_emotional_state",
          "_calculate_emotional_significance",
          "_generate_emotional_tags",
          "_modulate_memory_by_emotion",
          "_apply_emotion_decay",
          "_blend_emotional_states",
          "_calculate_emotion_change",
          "_update_emotion_history",
          "_matches_criteria"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EmotionalMemoryManager",
      "specific_actions": [
        {
          "file": "memory/emotional_memory_manager.py",
          "class": "EmotionalMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEmotionalMemoryManager",
        "type": "class",
        "file_path": "memory/emotional_memory_manager_unified.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "_check_memory_access",
          "_check_memory_ownership",
          "_track_user_memory",
          "_strip_symbolic_data",
          "_apply_tier_filtering",
          "_analyze_dominant_emotions",
          "_analyze_transitions",
          "_analyze_valence_trends",
          "_analyze_symbolic_patterns",
          "_apply_modulation_limits",
          "_log_emotional_modification"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to UnifiedEmotionalMemoryManager",
      "specific_actions": [
        {
          "file": "memory/emotional_memory_manager_unified.py",
          "class": "UnifiedEmotionalMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAttentionOrchestrator",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 470,
        "methods": [
          "__init__",
          "compute_memory_relevance",
          "_text_to_embedding",
          "explain_attention"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryAttentionOrchestrator",
      "specific_actions": [
        {
          "file": "memory/systems/attention_memory_layer.py",
          "class": "MemoryAttentionOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIMemoryOrchestrator",
        "type": "class",
        "file_path": "memory/systems/memory_orchestrator.py",
        "line_number": 126,
        "methods": [
          "__init__",
          "_select_storage_tier",
          "_memory_type_to_hds_tier",
          "_priority_to_importance",
          "_calculate_recency_boost",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AGIMemoryOrchestrator",
      "specific_actions": [
        {
          "file": "memory/systems/memory_orchestrator.py",
          "class": "AGIMemoryOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/memory_orchestrator.py",
        "line_number": 93,
        "methods": [
          "__init__",
          "_determine_category",
          "_generate_cache_key",
          "get_cache_stats",
          "clear_cache",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/migrated/memory_orchestrator.py",
          "class": "MemoryOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedMemoryManager",
        "type": "class",
        "file_path": "memory/systems/simple_store.py",
        "line_number": 115,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to UnifiedMemoryManager",
      "specific_actions": [
        {
          "file": "memory/systems/simple_store.py",
          "class": "UnifiedMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicDeltaCompressionManager",
        "type": "class",
        "file_path": "memory/systems/symbolic_delta_compression.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "compress_fold",
          "_detect_compression_loops",
          "_perform_compression",
          "_get_compression_depth",
          "_check_cooldown",
          "_get_cooldown_remaining",
          "_get_emotional_stability",
          "_get_dominant_emotion",
          "_get_recent_compressions",
          "_calculate_entropy_ratio",
          "_detect_pattern_repetition",
          "_assess_cascade_risk",
          "get_compression_analytics",
          "emergency_decompress"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SymbolicDeltaCompressionManager",
      "specific_actions": [
        {
          "file": "memory/systems/symbolic_delta_compression.py",
          "class": "SymbolicDeltaCompressionManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentManager",
        "type": "class",
        "file_path": "identity/interface.py",
        "line_number": 54,
        "methods": [
          "check_consent"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ConsentManager",
      "specific_actions": [
        {
          "file": "identity/interface.py",
          "class": "ConsentManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoOrchestrator",
        "type": "class",
        "file_path": "examples/orchestration_src/demo_orchestrator.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "_should_adapt_interface",
          "_determine_available_functions",
          "_generate_onboarding_interface",
          "_generate_welcome_message",
          "_update_session_insights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DemoOrchestrator",
      "specific_actions": [
        {
          "file": "examples/orchestration_src/demo_orchestrator.py",
          "class": "DemoOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "TestOrchestrator",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 342,
        "methods": [
          "run_comprehensive_tests",
          "run_basic_tests",
          "test_python_env",
          "test_file_structure",
          "test_basic_imports",
          "test_mock_generation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to TestOrchestrator",
      "specific_actions": [
        {
          "file": "identity/deployment_package.py",
          "class": "TestOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QRSManager",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 69,
        "methods": [
          "__init__",
          "create_lambda_id_with_qrg",
          "authenticate_with_symbolic_challenge",
          "generate_qrg_for_lambda_id",
          "validate_qrg_authentication"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QRSManager",
      "specific_actions": [
        {
          "file": "identity/api/api.py",
          "class": "QRSManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockRegistry",
        "type": "class",
        "file_path": "identity/core/brain_identity_connector.py",
        "line_number": 656,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockRegistry",
      "specific_actions": [
        {
          "file": "identity/core/brain_identity_connector.py",
          "class": "MockRegistry",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "TierAwareSwarmHub",
        "type": "class",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 89,
        "methods": [
          "__init__",
          "_initialize_tier_profiles",
          "_determine_required_colonies",
          "_calculate_tier_priority",
          "_create_orchestration_plan",
          "_can_allocate_resources",
          "_update_tier_metrics",
          "get_hub_statistics",
          "get_tier_performance_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to TierAwareSwarmHub",
      "specific_actions": [
        {
          "file": "identity/core/swarm/tier_aware_swarm_hub.py",
          "class": "TierAwareSwarmHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricIntegrationManager",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 84,
        "methods": [
          "__init__",
          "enroll_biometric",
          "verify_biometric"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BiometricIntegrationManager",
      "specific_actions": [
        {
          "file": "identity/api/api.py",
          "class": "BiometricIntegrationManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaConsentManager",
        "type": "class",
        "file_path": "identity/core/sent/consent_manager.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "collect_consent",
          "validate_consent",
          "revoke_consent",
          "get_consent_status",
          "get_symbolic_consent_status",
          "_validate_tier_consent_access",
          "_map_action_to_scope",
          "_is_scope_revocable"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LambdaConsentManager",
      "specific_actions": [
        {
          "file": "identity/core/sent/consent_manager.py",
          "class": "LambdaConsentManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentHistoryManager",
        "type": "class",
        "file_path": "identity/core/sent/consent_history.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "record_consent_event",
          "_generate_record_hash",
          "_log_to_trace",
          "verify_consent_chain",
          "get_consent_timeline",
          "generate_consent_proof",
          "get_symbolic_consent_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ConsentHistoryManager",
      "specific_actions": [
        {
          "file": "identity/core/sent/consent_history.py",
          "class": "ConsentHistoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicScopesManager",
        "type": "class",
        "file_path": "identity/core/sent/symbolic_scopes.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "define_scope",
          "get_scope_requirements",
          "validate_scope_access",
          "get_symbolic_representation",
          "parse_symbolic_consent"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SymbolicScopesManager",
      "specific_actions": [
        {
          "file": "identity/core/sent/symbolic_scopes.py",
          "class": "SymbolicScopesManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SessionReplayManager",
        "type": "class",
        "file_path": "identity/core/qrs/session_replay.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "create_replay_session",
          "restore_session",
          "invalidate_session"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SessionReplayManager",
      "specific_actions": [
        {
          "file": "identity/core/qrs/session_replay.py",
          "class": "SessionReplayManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingConfigManager",
        "type": "class",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 103,
        "methods": [
          "__init__",
          "_load_or_create_default_config",
          "_initialize_default_stage_configs",
          "_initialize_default_personality_flows",
          "_initialize_default_cultural_configs",
          "get_personality_flow",
          "get_cultural_config",
          "get_stage_config",
          "should_skip_stage",
          "validate_stage_completion",
          "get_adaptive_flow",
          "customize_personality_flow",
          "save_config",
          "export_config_template",
          "_evaluate_skip_condition",
          "_evaluate_validation_rule",
          "_dict_to_config",
          "_config_to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OnboardingConfigManager",
      "specific_actions": [
        {
          "file": "identity/core/onboarding/onboarding_config.py",
          "class": "OnboardingConfigManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedOnboardingManager",
        "type": "class",
        "file_path": "identity/api/onboarding_api.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "start_onboarding_session",
          "progress_onboarding_stage",
          "complete_onboarding",
          "get_onboarding_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedOnboardingManager",
      "specific_actions": [
        {
          "file": "identity/api/onboarding_api.py",
          "class": "EnhancedOnboardingManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossDeviceTokenManager",
        "type": "class",
        "file_path": "identity/core/sing/cross_device_manager.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "sync_token_to_device",
          "invalidate_device_tokens",
          "get_device_tokens"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CrossDeviceTokenManager",
      "specific_actions": [
        {
          "file": "identity/core/sing/cross_device_manager.py",
          "class": "CrossDeviceTokenManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaTierManager",
        "type": "class",
        "file_path": "identity/api/controllers/lambd_id_controller.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "get_tier_info",
          "get_progression_map",
          "validate_upgrade_eligibility"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LambdaTierManager",
      "specific_actions": [
        {
          "file": "identity/api/controllers/lambd_id_controller.py",
          "class": "LambdaTierManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASQRGManager",
        "type": "class",
        "file_path": "identity/auth/qrg_generators.py",
        "line_number": 718,
        "methods": [
          "__init__",
          "generate_adaptive_qr",
          "_extract_consciousness_pattern",
          "_extract_cultural_theme",
          "get_generation_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LUKHASQRGManager",
      "specific_actions": [
        {
          "file": "identity/auth/qrg_generators.py",
          "class": "LUKHASQRGManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalProfileManager",
        "type": "class",
        "file_path": "identity/auth/cultural_profile_manager.py",
        "line_number": 64,
        "methods": [
          "__init__",
          "_load_emoji_cultural_mappings",
          "_load_accessibility_mappings",
          "create_cultural_profile",
          "filter_emojis_for_user",
          "_should_exclude_emoji",
          "suggest_alternative_emojis",
          "get_cultural_insights",
          "_get_accessibility_considerations",
          "update_profile",
          "get_profile_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CulturalProfileManager",
      "specific_actions": [
        {
          "file": "identity/auth/cultural_profile_manager.py",
          "class": "CulturalProfileManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "KeyManager",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_hash_utils.py",
        "line_number": 98,
        "methods": [
          "__init__",
          "generate_keypair",
          "derive_key_from_seed",
          "export_public_key"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to KeyManager",
      "specific_actions": [
        {
          "file": "identity/backend/verifold/verifold_hash_utils.py",
          "class": "KeyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CollaborativeCreativityOrchestrator",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 642,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CollaborativeCreativityOrchestrator",
      "specific_actions": [
        {
          "file": "creativity/creative_q_expression.py",
          "class": "CollaborativeCreativityOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmCreativityOrchestrator",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 439,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SwarmCreativityOrchestrator",
      "specific_actions": [
        {
          "file": "creativity/quantum_creative_types.py",
          "class": "SwarmCreativityOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyOrchestrator",
        "type": "class",
        "file_path": "orchestration/colony_orchestrator.py",
        "line_number": 173,
        "methods": [
          "__init__",
          "_default_config",
          "get_colony_status",
          "_validate_colony_config",
          "_can_create_colony",
          "_update_average_response_time"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ColonyOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/colony_orchestrator.py",
          "class": "ColonyOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyDreamCoordinator",
        "type": "class",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 161,
        "methods": [
          "__init__",
          "_synthesize_insights",
          "_calculate_synthesis_consensus",
          "_cross_validate_insights",
          "_update_processing_metrics",
          "get_coordinator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ColonyDreamCoordinator",
      "specific_actions": [
        {
          "file": "creativity/dream/colony_dream_coordinator.py",
          "class": "ColonyDreamCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreRegistryMock",
        "type": "class",
        "file_path": "bridge/integration_bridge.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CoreRegistryMock",
      "specific_actions": [
        {
          "file": "bridge/integration_bridge.py",
          "class": "CoreRegistryMock",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SharedStateManager",
        "type": "class",
        "file_path": "bridge/shared_state.py",
        "line_number": 150,
        "methods": [
          "__init__",
          "_get_lock",
          "_check_access",
          "_is_expired",
          "_cleanup_expired",
          "_resolve_conflict",
          "_notify_subscribers",
          "_add_change_to_history",
          "set_state",
          "get_state",
          "delete_state",
          "subscribe",
          "unsubscribe",
          "get_keys_by_prefix",
          "get_state_info",
          "get_change_history",
          "get_stats",
          "rollback_to_version"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SharedStateManager",
      "specific_actions": [
        {
          "file": "bridge/shared_state.py",
          "class": "SharedStateManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveResourceManager",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 721,
        "methods": [
          "__init__",
          "_start_recharge_thread",
          "allocate",
          "release",
          "get_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CognitiveResourceManager",
      "specific_actions": [
        {
          "file": "consciousness/cognitive_architecture_controller.py",
          "class": "CognitiveResourceManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConsciousnessHub",
        "type": "class",
        "file_path": "consciousness/quantum_consciousness_hub.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "inject_components"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumConsciousnessHub",
      "specific_actions": [
        {
          "file": "consciousness/quantum_consciousness_hub.py",
          "class": "QuantumConsciousnessHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonaManager",
        "type": "class",
        "file_path": "consciousness/systems/integrator.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to PersonaManager",
      "specific_actions": [
        {
          "file": "consciousness/systems/integrator.py",
          "class": "PersonaManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityManager",
        "type": "class",
        "file_path": "orchestration/brain/identity_manager.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "process_experience",
          "retrieve_memory",
          "get_identity_state",
          "update_identity",
          "get_identity_evolution",
          "_is_identity_relevant",
          "_update_identity_from_experience",
          "_take_identity_snapshot",
          "_load_identity",
          "save_identity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to IdentityManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/identity_manager.py",
          "class": "IdentityManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/memory_integration_orchestrator.py",
        "line_number": 71,
        "methods": [
          "__init__",
          "load_specifications",
          "create_matada_node",
          "enhanced_fold_in",
          "enhanced_fold_out",
          "demonstrate_enterprise_features",
          "_generate_universal_prefix",
          "_encode_to_binary",
          "_generate_embeddings",
          "_compute_emotion_vector",
          "_extract_tags",
          "_compute_deduplication_hash",
          "_check_existing_content",
          "_enhance_tags_with_mycelium",
          "_map_causal_relationships",
          "_store_with_lukhas_integration",
          "_update_temporal_evolution",
          "_activate_mycelium_network",
          "_traverse_causal_graph",
          "_weight_relevance",
          "_filter_by_tier",
          "_assemble_narrative",
          "_vector_similarity_search",
          "_check_constitutional_alignment",
          "_update_world_model",
          "_compress_old_memories"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryIntegrationOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/migrated/memory_integration_orchestrator.py",
          "class": "MemoryIntegrationOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionPromptManager",
        "type": "class",
        "file_path": "features/memory/memory_fold.py",
        "line_number": 480,
        "methods": [
          "__init__",
          "_load_prompts",
          "_get_default_prompts",
          "get_prompt_for_fold"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to VisionPromptManager",
      "specific_actions": [
        {
          "file": "features/memory/memory_fold.py",
          "class": "VisionPromptManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "TierManager",
        "type": "class",
        "file_path": "features/memory/memory_fold.py",
        "line_number": 617,
        "methods": [
          "__init__",
          "validate_access",
          "filter_data_by_tier"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to TierManager",
      "specific_actions": [
        {
          "file": "features/memory/memory_fold.py",
          "class": "TierManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemCoordinator",
        "type": "class",
        "file_path": "features/integration/system_coordinator.py",
        "line_number": 114,
        "methods": [
          "__init__",
          "_load_config",
          "_get_request_handler",
          "_component_monitoring_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SystemCoordinator",
      "specific_actions": [
        {
          "file": "features/integration/system_coordinator.py",
          "class": "SystemCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkflowOrchestrator",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 145,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to WorkflowOrchestrator",
      "specific_actions": [
        {
          "file": "features/integration/executive_decision_integrator.py",
          "class": "WorkflowOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CEOAttitudeIntegrationHub",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 590,
        "methods": [
          "__init__",
          "_determine_integration_mode",
          "_initialize_modules",
          "get_system_status",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CEOAttitudeIntegrationHub",
      "specific_actions": [
        {
          "file": "features/integration/executive_decision_integrator.py",
          "class": "CEOAttitudeIntegrationHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedSafetyCoordinator",
        "type": "class",
        "file_path": "features/integration/safety/coordinator.py",
        "line_number": 55,
        "methods": [
          "__init__",
          "_calculate_safety_score",
          "_needs_emergency_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedSafetyCoordinator",
      "specific_actions": [
        {
          "file": "features/integration/safety/coordinator.py",
          "class": "EnhancedSafetyCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedDASTOrchestrator",
        "type": "class",
        "file_path": "orchestration/security/dast_orchestrator.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "get_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedDASTOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/security/dast_orchestrator.py",
          "class": "EnhancedDASTOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMetaCognitiveOrchestrator",
        "type": "class",
        "file_path": "features/integration/meta_cognitive/meta_cognitive.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "_calculate_base_coherence",
          "_apply_quantum_processing",
          "_validate_safety"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EnhancedMetaCognitiveOrchestrator",
      "specific_actions": [
        {
          "file": "features/integration/meta_cognitive/meta_cognitive.py",
          "class": "EnhancedMetaCognitiveOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DataManagerCRUD",
        "type": "class",
        "file_path": "features/data_manager/crud_operations.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "create_diagnostic_session",
          "update_diagnostic_session",
          "get_diagnostic_session"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DataManagerCRUD",
      "specific_actions": [
        {
          "file": "features/data_manager/crud_operations.py",
          "class": "DataManagerCRUD",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "TopologyManager",
        "type": "class",
        "file_path": "features/crista_optimizer/topology_manager.py",
        "line_number": 69,
        "methods": [
          "__init__",
          "analyze_topology",
          "_calculate_clustering_coefficient",
          "_calculate_average_path_length",
          "_calculate_network_efficiency_from_metrics",
          "_get_neighbors",
          "_are_connected",
          "_bfs_distances",
          "recommend_optimization",
          "assess_network_health",
          "identify_bottlenecks",
          "suggest_topology_improvements",
          "record_optimization",
          "get_optimization_trends"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to TopologyManager",
      "specific_actions": [
        {
          "file": "features/crista_optimizer/topology_manager.py",
          "class": "TopologyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIdManager",
        "type": "class",
        "file_path": "reasoning/systems/id_reasoning_engine.py",
        "line_number": 454,
        "methods": [
          "__init__",
          "_verify_emoji_seed",
          "_verify_biometrics",
          "_verify_sid_puzzle",
          "_verify_emergency_gesture",
          "_get_tier_permissions",
          "_generate_quantum_signature",
          "get_compliance_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhasIdManager",
      "specific_actions": [
        {
          "file": "reasoning/systems/id_reasoning_engine.py",
          "class": "LukhasIdManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiBrainSymphonyOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/MultiBrainSymphony.py",
        "line_number": 260,
        "methods": [
          "__init__",
          "_synchronize_brains",
          "_synthesize_brain_outputs",
          "get_symphony_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MultiBrainSymphonyOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/brain/MultiBrainSymphony.py",
          "class": "MultiBrainSymphonyOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotAdvancedReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 184,
        "methods": [
          "__init__",
          "get_reasoning_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to \u039bBotAdvancedReasoningOrchestrator",
      "specific_actions": [
        {
          "file": "reasoning/LBot_reasoning_processed.py",
          "class": "\u039bBotAdvancedReasoningOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossBrainReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 135,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CrossBrainReasoningOrchestrator",
      "specific_actions": [
        {
          "file": "reasoning/LBot_reasoning_processed.py",
          "class": "CrossBrainReasoningOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfHealingManager",
        "type": "class",
        "file_path": "dashboard/core/self_healing_manager.py",
        "line_number": 143,
        "methods": [
          "__init__",
          "_calculate_health_status",
          "_determine_healing_priority"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SelfHealingManager",
      "specific_actions": [
        {
          "file": "dashboard/core/self_healing_manager.py",
          "class": "SelfHealingManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "PrivacyManager",
        "type": "class",
        "file_path": "orchestration/brain/privacy_manager.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "set_privacy_setting",
          "get_privacy_setting",
          "apply_privacy_mechanisms",
          "anonymize_data",
          "encrypt_sensitive_fields",
          "decrypt_field",
          "check_permissions",
          "set_user_permissions",
          "apply_retention_policy",
          "create_gdpr_report",
          "log_privacy_event",
          "get_privacy_logs",
          "_hash_pii_value",
          "_encrypt_value",
          "_generate_encryption_key"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to PrivacyManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/privacy_manager.py",
          "class": "PrivacyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceProfileManager",
        "type": "class",
        "file_path": "voice/voice_profiling.py",
        "line_number": 240,
        "methods": [
          "__init__",
          "_load_profiles",
          "_save_profile",
          "create_profile",
          "get_profile",
          "list_profiles",
          "select_profile_for_context",
          "record_usage",
          "provide_feedback",
          "delete_profile"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to VoiceProfileManager",
      "specific_actions": [
        {
          "file": "voice/voice_profiling.py",
          "class": "VoiceProfileManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASStandaloneQRGManager",
        "type": "class",
        "file_path": "examples/identity/qrg_standalone_demo.py",
        "line_number": 599,
        "methods": [
          "__init__",
          "generate_adaptive_qr",
          "_extract_consciousness_pattern",
          "_extract_cultural_theme",
          "get_generation_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LUKHASStandaloneQRGManager",
      "specific_actions": [
        {
          "file": "examples/identity/qrg_standalone_demo.py",
          "class": "LUKHASStandaloneQRGManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockCulturalProfileManager",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 150,
        "methods": [
          "get_cultural_profile"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockCulturalProfileManager",
      "specific_actions": [
        {
          "file": "examples/identity/lukhus_qrg_complete_demo.py",
          "class": "MockCulturalProfileManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockDreamCoordinator",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockDreamCoordinator",
      "specific_actions": [
        {
          "file": "examples/ethics/lambda_governor_demo.py",
          "class": "MockDreamCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockMemoryManager",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 101,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockMemoryManager",
      "specific_actions": [
        {
          "file": "examples/ethics/lambda_governor_demo.py",
          "class": "MockMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemIntegrationHub",
        "type": "class",
        "file_path": "orchestration/integration_hub.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "_connect_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SystemIntegrationHub",
      "specific_actions": [
        {
          "file": "orchestration/integration_hub.py",
          "class": "SystemIntegrationHub",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/system_orchestrator.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SystemOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/system_orchestrator.py",
          "class": "SystemOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/system_orchestrator.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "get_status",
          "_handle_drift"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SystemOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/system_orchestrator.py",
          "class": "SystemOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorMigrator",
        "type": "class",
        "file_path": "orchestration/migrate_orchestrators.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "determine_base_class",
          "extract_class_info",
          "needs_migration",
          "generate_migration_header",
          "migrate_orchestrator",
          "create_migrated_version",
          "generate_import_updates",
          "generate_required_methods",
          "migrate_all"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorMigrator",
      "specific_actions": [
        {
          "file": "orchestration/migrate_orchestrators.py",
          "class": "OrchestratorMigrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ResonanceOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/resonance_orchestrator.py",
          "class": "ResonanceOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceOrchestrator",
        "type": "class",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 118,
        "methods": [
          "__init__",
          "get_trauma_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ResonanceOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/resonance_orchestrator.py",
          "class": "ResonanceOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/module_orchestrator.py",
        "line_number": 22,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ModuleOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/module_orchestrator.py",
          "class": "ModuleOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleOrchestrator",
        "type": "class",
        "file_path": "orchestration/module_orchestrator.py",
        "line_number": 30,
        "methods": [
          "__init__",
          "get_module_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ModuleOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/module_orchestrator.py",
          "class": "ModuleOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MasterOrchestrator",
        "type": "class",
        "file_path": "orchestration/master_orchestrator.py",
        "line_number": 136,
        "methods": [
          "__init__",
          "_default_config",
          "_determine_target_orchestrators",
          "_analyze_cross_orchestrator_targets",
          "_route_by_capability",
          "get_master_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MasterOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/master_orchestrator.py",
          "class": "MasterOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "EndocrineOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/endocrine_orchestrator.py",
        "line_number": 27,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to EndocrineOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/endocrine_orchestrator.py",
          "class": "EndocrineOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentOrchestrator",
        "type": "class",
        "file_path": "orchestration/agent_orchestrator.py",
        "line_number": 39,
        "methods": [
          "__init__",
          "_setup_protocol_handlers",
          "_find_suitable_agent",
          "get_status",
          "_count_agents_by_status",
          "_count_plugins_by_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AgentOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/agent_orchestrator.py",
          "class": "AgentOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestrator_core.py",
        "line_number": 39,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhasOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/orchestrator_core.py",
          "class": "LukhasOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CoordinatorAgent",
        "type": "class",
        "file_path": "orchestration/example_agents.py",
        "line_number": 501,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CoordinatorAgent",
      "specific_actions": [
        {
          "file": "orchestration/example_agents.py",
          "class": "CoordinatorAgent",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuorumOrchestrator",
        "type": "class",
        "file_path": "orchestration/quorum_orchestrator.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "decide"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuorumOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/quorum_orchestrator.py",
          "class": "QuorumOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorState",
        "type": "class",
        "file_path": "orchestration/base.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorState",
      "specific_actions": [
        {
          "file": "orchestration/base.py",
          "class": "OrchestratorState",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorMetrics",
        "type": "dataclass",
        "file_path": "orchestration/base.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorMetrics",
      "specific_actions": [
        {
          "file": "orchestration/base.py",
          "class": "OrchestratorMetrics",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorFlags",
        "type": "dataclass",
        "file_path": "orchestration/config/orchestrator_flags.py",
        "line_number": 25,
        "methods": [
          "get_orchestrator_mode",
          "get_canary_percentage",
          "is_orchestrator_enabled",
          "should_use_new_orchestrator",
          "should_use_legacy_orchestrator",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorFlags",
      "specific_actions": [
        {
          "file": "orchestration/config/orchestrator_flags.py",
          "class": "OrchestratorFlags",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ShadowOrchestrator",
        "type": "class",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 119,
        "methods": [
          "__init__",
          "_compare_results",
          "_compare_dicts",
          "_compare_sequences",
          "_log_comparison",
          "get_comparison_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ShadowOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/config/migration_router.py",
          "class": "ShadowOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorRouter",
        "type": "class",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 325,
        "methods": [
          "__init__",
          "_get_flags",
          "_ensure_orchestrator_tracking",
          "_record_metrics",
          "get_orchestrator_health",
          "get_shadow_summary",
          "get_all_orchestrator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorRouter",
      "specific_actions": [
        {
          "file": "orchestration/config/migration_router.py",
          "class": "OrchestratorRouter",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ProductionOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 150,
        "methods": [
          "load_from_env",
          "load_from_file",
          "from_dict",
          "to_dict",
          "save_to_file",
          "validate",
          "is_production",
          "is_development"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ProductionOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/config/production_config.py",
          "class": "ProductionOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "HumanInTheLoopOrchestrator",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 262,
        "methods": [
          "__init__",
          "_initialize_lukhas_integration",
          "_check_role_suitability",
          "_calculate_reviewer_suitability_score",
          "_is_reviewer_available_now",
          "_get_reviewer_count_for_priority",
          "_calculate_due_date",
          "get_decision_status",
          "get_reviewer_workload",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to HumanInTheLoopOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/integration/human_in_the_loop_orchestrator.py",
          "class": "HumanInTheLoopOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveOrchestrator",
        "type": "class",
        "file_path": "orchestration/agents/adaptive_orchestrator.py",
        "line_number": 126,
        "methods": [
          "__init__",
          "_setup_visionary_logging",
          "_load_visionary_config"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AdaptiveOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/agents/adaptive_orchestrator.py",
          "class": "AdaptiveOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/component_orchestrator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ComponentOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/specialized/component_orchestrator.py",
          "class": "ComponentOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotEliteOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_bot_orchestrator.py",
        "line_number": 559,
        "methods": [
          "__init__",
          "_initialize_elite_bot_fleet"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to \u039bBotEliteOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/specialized/lambda_bot_orchestrator.py",
          "class": "\u039bBotEliteOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ContentEnterpriseOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 547,
        "methods": [
          "__init__",
          "_load_config",
          "_setup_logging",
          "_initialize_enterprise_modules",
          "setup_prometheus_metrics",
          "get_orchestration_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ContentEnterpriseOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/specialized/content_enterprise_orchestrator.py",
          "class": "ContentEnterpriseOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasOrchestratorEmotionEngine",
        "type": "class",
        "file_path": "orchestration/specialized/orchestrator_emotion_engine.py",
        "line_number": 42,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhasOrchestratorEmotionEngine",
      "specific_actions": [
        {
          "file": "orchestration/specialized/orchestrator_emotion_engine.py",
          "class": "LukhasOrchestratorEmotionEngine",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/memory_orchestrator.py",
        "line_number": 47,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/migrated/memory_orchestrator.py",
          "class": "MemoryOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEthicsOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/ethics_orchestrator.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to UnifiedEthicsOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/migrated/ethics_orchestrator.py",
          "class": "UnifiedEthicsOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/brain_orchestrator.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BrainOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/migrated/brain_orchestrator.py",
          "class": "BrainOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationOrchestratorConfig",
        "type": "class",
        "file_path": "orchestration/migrated/memory_integration_orchestrator.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MemoryIntegrationOrchestratorConfig",
      "specific_actions": [
        {
          "file": "orchestration/migrated/memory_integration_orchestrator.py",
          "class": "MemoryIntegrationOrchestratorConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiBrainOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 260,
        "methods": [
          "__init__",
          "_synchronize_brains",
          "_synthesize_brain_outputs",
          "get_orchestrator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MultiBrainOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/brain/multi_brain_orchestrator.py",
          "class": "MultiBrainOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "TransparencyOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/eu_ai_transparency.py",
        "line_number": 204,
        "methods": [
          "__init__",
          "start_decision_trace",
          "get_trace",
          "complete_trace",
          "get_transparency_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to TransparencyOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/brain/eu_ai_transparency.py",
          "class": "TransparencyOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmIntelligenceCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 411,
        "methods": [
          "__init__",
          "process",
          "_update_swarm",
          "_calculate_convergence",
          "_measure_collective_performance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SwarmIntelligenceCoordinator",
      "specific_actions": [
        {
          "file": "orchestration/brain/research_awareness_engine.py",
          "class": "SwarmIntelligenceCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "GitHubNotification",
        "type": "dataclass",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to GitHubNotification",
      "specific_actions": [
        {
          "file": "orchestration/brain/autonomous_github_manager.py",
          "class": "GitHubNotification",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedAutonomousGitHubManager",
        "type": "class",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 70,
        "methods": [
          "__init__",
          "fetch_all_notifications",
          "parse_notification",
          "analyze_notification_priority",
          "estimate_fix_cost",
          "prioritize_notifications",
          "batch_process_fixes",
          "process_notification_batch",
          "attempt_autonomous_fix",
          "determine_fix_strategy",
          "execute_fix_strategy",
          "create_workflow_fix_pr",
          "create_security_fix_pr",
          "create_dependency_update_pr",
          "create_general_fix_pr",
          "generate_comprehensive_report",
          "save_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AdvancedAutonomousGitHubManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/autonomous_github_manager.py",
          "class": "AdvancedAutonomousGitHubManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "GitHubVulnerabilityManager",
        "type": "class",
        "file_path": "orchestration/brain/github_vulnerability_manager.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "_should_override_budget",
          "_make_api_call_with_override",
          "get_user_repositories",
          "get_repository_vulnerabilities",
          "scan_all_repositories",
          "get_daily_budget_remaining",
          "prioritize_vulnerabilities",
          "fix_critical_vulnerabilities",
          "attempt_vulnerability_fix",
          "create_vulnerability_fix_pr",
          "_create_actual_pr",
          "determine_vulnerability_fix_strategy",
          "save_scan_results",
          "generate_report",
          "fix_vulnerabilities_batch"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to GitHubVulnerabilityManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/github_vulnerability_manager.py",
          "class": "GitHubVulnerabilityManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainCollapseManager",
        "type": "class",
        "file_path": "orchestration/brain/brain_collapse_manager.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "collapse_trace_matrix"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BrainCollapseManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/brain_collapse_manager.py",
          "class": "BrainCollapseManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainColonyCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/colony_coordinator.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "_create_perception_colony",
          "_create_action_colony",
          "_create_emotion_colony"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to BrainColonyCoordinator",
      "specific_actions": [
        {
          "file": "orchestration/brain/colony_coordinator.py",
          "class": "BrainColonyCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAGIOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/orchestrator.py",
        "line_number": 160,
        "methods": [
          "__init__",
          "_identify_knowledge_gaps",
          "_calculate_processing_quality"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhasAGIOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/brain/orchestrator.py",
          "class": "LukhasAGIOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceManager",
        "type": "class",
        "file_path": "orchestration/brain/experience_manager.py",
        "line_number": 12,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ExperienceManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/experience_manager.py",
          "class": "ExperienceManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceRegistry",
        "type": "class",
        "file_path": "orchestration/brain/compliance_registry.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_component_requirements"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ComplianceRegistry",
      "specific_actions": [
        {
          "file": "orchestration/brain/compliance_registry.py",
          "class": "ComplianceRegistry",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AIComplianceManager",
        "type": "class",
        "file_path": "orchestration/brain/compliance/ai_compliance_manager.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_is_high_risk_ai_system",
          "get_transparency_report",
          "_get_processing_purposes",
          "_generate_compliance_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AIComplianceManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/compliance/ai_compliance_manager.py",
          "class": "AIComplianceManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveMeshCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 351,
        "methods": [
          "__init__",
          "get_mesh_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CognitiveMeshCoordinator",
      "specific_actions": [
        {
          "file": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
          "class": "CognitiveMeshCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AgiBrainOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/core/orchestrator.py",
        "line_number": 113,
        "methods": [
          "__init__",
          "_create_crista_meta_pathway",
          "_create_meta_quantum_pathway",
          "_create_quantum_crista_pathway",
          "_create_system_feedback_pathway",
          "_compile_results",
          "_compute_system_optimizations",
          "get_system_health",
          "_generate_recommendations",
          "get_orchestration_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AgiBrainOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/brain/core/orchestrator.py",
          "class": "AgiBrainOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "GoalManager",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "add_goal",
          "prioritize_goals",
          "execute_goals"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to GoalManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/spine/main_loop.py",
          "class": "GoalManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "PredictiveResourceManager",
        "type": "class",
        "file_path": "orchestration/brain/prediction/predictive_resource_manager.py",
        "line_number": 89,
        "methods": [
          "__init__",
          "_initialize_prediction_models",
          "_initialize_optimization_strategies",
          "update_resource_usage",
          "predict_resource_needs",
          "_analyze_current_usage",
          "_calculate_prediction_confidence",
          "_analyze_processing_complexity",
          "_generate_resource_recommendations",
          "_assess_resource_risk",
          "_identify_optimization_opportunities",
          "_calculate_overall_accuracy",
          "predict_all_resources",
          "optimize_resource_allocation",
          "_check_optimization_needed",
          "_calculate_prediction_confidence",
          "_assess_risk_level",
          "_generate_recommendations",
          "_apply_optimization_action",
          "_estimate_improvement",
          "_generate_prediction_summary",
          "get_prediction_statistics",
          "analyze_resource_trends",
          "_calculate_trend_direction",
          "_calculate_volatility"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to PredictiveResourceManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/prediction/predictive_resource_manager.py",
          "class": "PredictiveResourceManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorCore",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestrator_core_oxn.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "simulate_trust_flow"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to OrchestratorCore",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/orchestrator_core_oxn.py",
          "class": "OrchestratorCore",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "CacheManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 362,
        "methods": [
          "__init__",
          "get",
          "set",
          "delete",
          "clear",
          "cleanup_expired",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to CacheManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/monitoring/performance.py",
          "class": "CacheManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreadPoolManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 468,
        "methods": [
          "__init__",
          "get_executor",
          "submit",
          "map",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ThreadPoolManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/monitoring/performance.py",
          "class": "ThreadPoolManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AsyncTaskManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 501,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AsyncTaskManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/monitoring/performance.py",
          "class": "AsyncTaskManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentTierManager",
        "type": "class",
        "file_path": "orchestration/brain/data/consent_manager.py",
        "line_number": 10,
        "methods": [
          "load"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ConsentTierManager",
      "specific_actions": [
        {
          "file": "orchestration/brain/data/consent_manager.py",
          "class": "ConsentTierManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MasterMultiBrainOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/master_orchestrator_alt.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_symphony_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MasterMultiBrainOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/master_orchestrator_alt.py",
          "class": "MasterMultiBrainOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhASMasterOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 129,
        "methods": [
          "__init__",
          "_load_config",
          "_determine_optimal_theme",
          "_determine_accessibility_features",
          "_calculate_intelligence_level"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to LukhASMasterOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/master_orchestrator.py",
          "class": "LukhASMasterOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/process_orchestrator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to ProcessOrchestrator",
      "specific_actions": [
        {
          "file": "orchestration/core_modules/process_orchestrator.py",
          "class": "ProcessOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "RegistryEvent",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to RegistryEvent",
      "specific_actions": [
        {
          "file": "interfaces/registries/intelligence_engine_registry.py",
          "class": "RegistryEvent",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "RegistryConfig",
        "type": "dataclass",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 112,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to RegistryConfig",
      "specific_actions": [
        {
          "file": "interfaces/registries/intelligence_engine_registry.py",
          "class": "RegistryConfig",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "_create_mock_quantum_core",
          "_create_mock_bio_coordinator",
          "_create_simple_bio_coordinator",
          "_prepare_consciousness_signal",
          "_combine_quantum_outputs",
          "_extract_consciousness_insights",
          "_process_consciousness_fallback",
          "_update_processing_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumCoordinator",
      "specific_actions": [
        {
          "file": "quantum/coordinator.py",
          "class": "QuantumCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBioCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 179,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockBioCoordinator",
      "specific_actions": [
        {
          "file": "quantum/coordinator.py",
          "class": "MockBioCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleBioCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 194,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SimpleBioCoordinator",
      "specific_actions": [
        {
          "file": "quantum/coordinator.py",
          "class": "SimpleBioCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMetadataManager",
        "type": "class",
        "file_path": "quantum/metadata.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "get_metadata_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumMetadataManager",
      "specific_actions": [
        {
          "file": "quantum/metadata.py",
          "class": "QuantumMetadataManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumBioCoordinator",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MockQuantumBioCoordinator",
      "specific_actions": [
        {
          "file": "quantum/bio_optimization_adapter.py",
          "class": "MockQuantumBioCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumResistantKeyManager",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 131,
        "methods": [
          "__init__",
          "generate_keypair",
          "_gather_enhanced_entropy",
          "_generate_bio_quantum_entropy",
          "_generate_session_id",
          "_log_operation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumResistantKeyManager",
      "specific_actions": [
        {
          "file": "quantum/post_quantum_crypto_enhanced.py",
          "class": "QuantumResistantKeyManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "SecureMemoryManager",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 552,
        "methods": [
          "__init__",
          "protect_session_data",
          "secure_cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to SecureMemoryManager",
      "specific_actions": [
        {
          "file": "quantum/post_quantum_crypto_enhanced.py",
          "class": "SecureMemoryManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedQuantumSafeOrchestrator",
        "type": "class",
        "file_path": "quantum/distributed_quantum_architecture.py",
        "line_number": 35,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to DistributedQuantumSafeOrchestrator",
      "specific_actions": [
        {
          "file": "quantum/distributed_quantum_architecture.py",
          "class": "DistributedQuantumSafeOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumVaultManager",
        "type": "class",
        "file_path": "quantum/vault_manager.py",
        "line_number": 99,
        "methods": [
          "__init__",
          "_generate_or_load_master_key",
          "create_lambda_id_hash",
          "generate_verifold_qr",
          "_generate_artistic_glyph",
          "_generate_quantum_signature",
          "store_encrypted_api_key",
          "authenticate_and_decrypt_api_key",
          "create_anonymous_crypto_session",
          "store_quantum_seed_phrase",
          "_create_quantum_shards",
          "_verify_qr_authentication",
          "get_anonymous_trading_session",
          "generate_vault_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumVaultManager",
      "specific_actions": [
        {
          "file": "quantum/vault_manager.py",
          "class": "QuantumVaultManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCertificateManager",
        "type": "class",
        "file_path": "quantum/certificate_manager.py",
        "line_number": 106,
        "methods": [
          "__init__",
          "get_certificate_status",
          "get_all_certificates_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumCertificateManager",
      "specific_actions": [
        {
          "file": "quantum/certificate_manager.py",
          "class": "QuantumCertificateManager",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioCoordinator",
        "type": "class",
        "file_path": "quantum/quantum_bio_coordinator.py",
        "line_number": 105,
        "methods": [
          "__init__",
          "_prepare_quantum_signal",
          "_update_system_state_metrics"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumBioCoordinator",
      "specific_actions": [
        {
          "file": "quantum/quantum_bio_coordinator.py",
          "class": "QuantumBioCoordinator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveSecurityOrchestrator",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 351,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to AdaptiveSecurityOrchestrator",
      "specific_actions": [
        {
          "file": "quantum/\u039bBot_quantum_security.py",
          "class": "AdaptiveSecurityOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotQuantumSecurityOrchestrator",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 410,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to \u039bBotQuantumSecurityOrchestrator",
      "specific_actions": [
        {
          "file": "quantum/\u039bBot_quantum_security.py",
          "class": "\u039bBotQuantumSecurityOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumDASTOrchestrator",
        "type": "class",
        "file_path": "quantum/dast_orchestrator.py",
        "line_number": 59,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to QuantumDASTOrchestrator",
      "specific_actions": [
        {
          "file": "quantum/dast_orchestrator.py",
          "class": "QuantumDASTOrchestrator",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIOrchestratorMetrics",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 101,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "issue": "Hub missing registration method",
      "recommendation": "Add register_service method to MultiAGIOrchestratorMetrics",
      "specific_actions": [
        {
          "file": "quantum/systems/bio_integration/multi_orchestrator.py",
          "class": "MultiAGIOrchestratorMetrics",
          "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
        }
      ]
    }
  ],
  "inactive_entities": [
    {
      "entity": {
        "name": "DigestExtractor",
        "type": "class",
        "file_path": "tools/digest_extractor.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "load_symbol_map",
          "find_brief_files",
          "extract_module_info",
          "analyze_subsystem",
          "extract_agent_info",
          "calculate_metrics",
          "generate_digest",
          "save_internal_digest",
          "save_public_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .digest_extractor import DigestExtractor",
          "export": "__all__.append('DigestExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationGapAnalyzer",
        "type": "class",
        "file_path": "tools/integration_gap_analyzer.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "analyze",
          "load_connectivity_data",
          "categorize_modules",
          "identify_gaps",
          "has_connection",
          "generate_recommendations",
          "create_reports"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .integration_gap_analyzer import IntegrationGapAnalyzer",
          "export": "__all__.append('IntegrationGapAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleConnectivityAnalyzer",
        "type": "class",
        "file_path": "tools/module_connectivity_analyzer.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "analyze",
          "analyze_module",
          "find_isolated_modules",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .module_connectivity_analyzer import ModuleConnectivityAnalyzer",
          "export": "__all__.append('ModuleConnectivityAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkspaceOrganizer",
        "type": "class",
        "file_path": "tools/cleanup_and_organize.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "find_empty_directories",
          "find_empty_files",
          "find_corrupted_files",
          "categorize_root_files",
          "suggest_file_placement",
          "organize_file",
          "cleanup_empty_files",
          "cleanup_empty_directories",
          "generate_report",
          "run_analysis",
          "run_cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .cleanup_and_organize import WorkspaceOrganizer",
          "export": "__all__.append('WorkspaceOrganizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImportPathAnalyzer",
        "type": "class",
        "file_path": "tools/import_path_fixer.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "build_module_registry",
          "find_best_match",
          "create_missing_service_modules",
          "generate_service_module"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .import_path_fixer import ImportPathAnalyzer",
          "export": "__all__.append('ImportPathAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImportFixer",
        "type": "class",
        "file_path": "tools/import_path_fixer.py",
        "line_number": 299,
        "methods": [
          "__init__",
          "fix_imports_in_file",
          "run_import_fixes"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .import_path_fixer import ImportFixer",
          "export": "__all__.append('ImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImportAnalyzer",
        "type": "class",
        "file_path": "tools/path_validator.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "analyze_file",
          "build_dependency_graph",
          "find_circular_dependencies",
          "validate_import_paths"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .path_validator import ImportAnalyzer",
          "export": "__all__.append('ImportAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PathValidator",
        "type": "class",
        "file_path": "tools/path_validator.py",
        "line_number": 180,
        "methods": [
          "__init__",
          "run_validation",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .path_validator import PathValidator",
          "export": "__all__.append('PathValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafeWorkspaceAnalyzer",
        "type": "class",
        "file_path": "tools/safe_workspace_analyzer.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "find_empty_directories",
          "find_empty_files",
          "find_corrupted_files",
          "categorize_root_files",
          "analyze_only"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .safe_workspace_analyzer import SafeWorkspaceAnalyzer",
          "export": "__all__.append('SafeWorkspaceAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DetailedIntegrationMapper",
        "type": "class",
        "file_path": "tools/detailed_integration_mapper.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "create_detailed_map",
          "_map_module_connections",
          "_design_system_bridges",
          "_design_hub_structure",
          "_create_specific_integrations",
          "generate_detailed_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .detailed_integration_mapper import DetailedIntegrationMapper",
          "export": "__all__.append('DetailedIntegrationMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeEntity",
        "type": "dataclass",
        "file_path": "tools/deep_code_integration_analyzer.py",
        "line_number": 16,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .deep_code_integration_analyzer import CodeEntity",
          "export": "__all__.append('CodeEntity')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeepCodeAnalyzer",
        "type": "class",
        "file_path": "tools/deep_code_integration_analyzer.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "visit_Import",
          "visit_ImportFrom",
          "visit_ClassDef",
          "visit_FunctionDef"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .deep_code_integration_analyzer import DeepCodeAnalyzer",
          "export": "__all__.append('DeepCodeAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeepIntegrationAnalyzer",
        "type": "class",
        "file_path": "tools/deep_code_integration_analyzer.py",
        "line_number": 114,
        "methods": [
          "__init__",
          "analyze_codebase",
          "analyze_file",
          "find_integration_opportunities",
          "find_missing_connections",
          "find_inactive_entities",
          "generate_specific_actions",
          "generate_activation_suggestions",
          "generate_detailed_report",
          "generate_specific_todos",
          "generate_todo_markdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .deep_code_integration_analyzer import DeepIntegrationAnalyzer",
          "export": "__all__.append('DeepIntegrationAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskTracker",
        "type": "class",
        "file_path": "tools/task_tracker.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "load_tasks",
          "_generate_task_id",
          "mark_complete",
          "add_task",
          "list_tasks",
          "generate_progress_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/__init__.py",
          "action": "add_export",
          "code": "from .task_tracker import TaskTracker",
          "export": "__all__.append('TaskTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "CascadeType",
        "type": "class",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import CascadeType",
          "export": "__all__.append('CascadeType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicMetrics",
        "type": "dataclass",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 87,
        "methods": [
          "risk_score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import SymbolicMetrics",
          "export": "__all__.append('SymbolicMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "PredictionResult",
        "type": "dataclass",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import PredictionResult",
          "export": "__all__.append('PredictionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "InterventionRecommendation",
        "type": "dataclass",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import InterventionRecommendation",
          "export": "__all__.append('InterventionRecommendation')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProphetSignal",
        "type": "dataclass",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 136,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import ProphetSignal",
          "export": "__all__.append('ProphetSignal')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicTrajectoryAnalyzer",
        "type": "class",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 147,
        "methods": [
          "__init__",
          "add_metrics",
          "analyze_trajectory",
          "_calculate_trajectory_score",
          "_calculate_trend_stability",
          "_calculate_trend",
          "_calculate_acceleration",
          "_match_cascade_patterns",
          "_is_increasing_trend",
          "_is_decreasing_trend",
          "_is_accelerating_trend",
          "_is_buildup_pattern",
          "_calculate_overall_risk",
          "_load_cascade_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import SymbolicTrajectoryAnalyzer",
          "export": "__all__.append('SymbolicTrajectoryAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CascadePredictor",
        "type": "class",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 344,
        "methods": [
          "__init__",
          "predict_cascade_risk",
          "_classify_cascade_type",
          "_score_cascade_type",
          "_estimate_time_to_cascade",
          "_identify_contributing_factors",
          "_generate_interventions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import CascadePredictor",
          "export": "__all__.append('CascadePredictor')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaProphet",
        "type": "class",
        "file_path": "tools/prediction/prophet_predictor.py",
        "line_number": 671,
        "methods": [
          "__init__",
          "predict_cascade_risk",
          "recommend_intervention",
          "emit_prophet_signal",
          "log_prediction_event",
          "_extract_symbolic_metrics",
          "_metrics_to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/prediction/__init__.py",
          "action": "add_export",
          "code": "from .prophet_predictor import LambdaProphet",
          "export": "__all__.append('LambdaProphet')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionPromptHelper",
        "type": "class",
        "file_path": "tools/vision/vision_prompt_helper.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "_load_prompts",
          "_get_default_prompts",
          "get_vision_prompt",
          "add_custom_prompt"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/vision/__init__.py",
          "action": "add_export",
          "code": "from .vision_prompt_helper import VisionPromptHelper",
          "export": "__all__.append('VisionPromptHelper')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftAnalyzerCLI",
        "type": "class",
        "file_path": "tools/cli/drift_analyzer_cli.py",
        "line_number": 59,
        "methods": [
          "__init__",
          "_signal_handler",
          "_create_metrics_panel",
          "_create_alerts_panel",
          "_get_status_indicator",
          "_get_phase_indicator",
          "_get_trend_indicator",
          "_display_analysis_results",
          "_load_config",
          "show_config"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/cli/__init__.py",
          "action": "add_export",
          "code": "from .drift_analyzer_cli import DriftAnalyzerCLI",
          "export": "__all__.append('DriftAnalyzerCLI')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleDigest",
        "type": "dataclass",
        "file_path": "tools/dev/module_digest_extractor.py",
        "line_number": 23,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/dev/__init__.py",
          "action": "add_export",
          "code": "from .module_digest_extractor import ModuleDigest",
          "export": "__all__.append('ModuleDigest')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleDigestExtractor",
        "type": "class",
        "file_path": "tools/dev/module_digest_extractor.py",
        "line_number": 34,
        "methods": [
          "__init__",
          "run",
          "_process_file",
          "_extract_block",
          "_match_value",
          "_parse_tags",
          "_write_outputs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tools/dev/__init__.py",
          "action": "add_export",
          "code": "from .module_digest_extractor import ModuleDigestExtractor",
          "export": "__all__.append('ModuleDigestExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypalFamily",
        "type": "class",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import ArchetypalFamily",
          "export": "__all__.append('ArchetypalFamily')"
        }
      ]
    },
    {
      "entity": {
        "name": "MythicSystem",
        "type": "class",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import MythicSystem",
          "export": "__all__.append('MythicSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicElement",
        "type": "dataclass",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 100,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import SymbolicElement",
          "export": "__all__.append('SymbolicElement')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypalMapping",
        "type": "dataclass",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 126,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import ArchetypalMapping",
          "export": "__all__.append('ArchetypalMapping')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypalSession",
        "type": "dataclass",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 154,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import ArchetypalSession",
          "export": "__all__.append('ArchetypalSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bSage",
        "type": "class",
        "file_path": "foundry/lambda_sage.py",
        "line_number": 181,
        "methods": [
          "__init__",
          "_initialize_archetypal_patterns",
          "_initialize_mythic_databases",
          "_initialize_cultural_symbols",
          "load_symbolic_archive",
          "_load_dream_symbols",
          "_load_memory_symbols",
          "_load_glyph_lineage",
          "_load_reasoning_symbols",
          "_extract_symbols_from_file",
          "_extract_glyph_patterns",
          "_load_from_taxonomy",
          "identify_archetypes",
          "_classify_symbol",
          "_calculate_mythic_resonances",
          "_identify_symbolic_patterns",
          "_find_cultural_variants",
          "map_mythic_resonance",
          "analyze_resonance_strength",
          "_categorize_strength",
          "calculate_volatility_index",
          "_categorize_volatility",
          "detect_integration_conflicts",
          "_calculate_conflict_severity",
          "generate_archetype_report",
          "_generate_markdown_report",
          "_generate_json_report",
          "_generate_recommendations",
          "export_csv"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_sage import \u039bSage",
          "export": "__all__.append('\u039bSage')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyZone",
        "type": "dataclass",
        "file_path": "foundry/symbolic_foundry.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import EntropyZone",
          "export": "__all__.append('EntropyZone')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphCandidate",
        "type": "dataclass",
        "file_path": "foundry/symbolic_foundry.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import GlyphCandidate",
          "export": "__all__.append('GlyphCandidate')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphRecord",
        "type": "dataclass",
        "file_path": "foundry/symbolic_foundry.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import GlyphRecord",
          "export": "__all__.append('GlyphRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bFoundry",
        "type": "class",
        "file_path": "foundry/symbolic_foundry.py",
        "line_number": 116,
        "methods": [
          "__init__",
          "analyze_entropy_pressure",
          "_analyze_directory_entropy",
          "_analyze_file_entropy",
          "_calculate_entropy_indicators",
          "_extract_emotional_context",
          "_calculate_urgency_score",
          "_suggest_mutations",
          "mutate_glyphs",
          "_generate_glyph_candidate",
          "_semantic_blend_mutation",
          "_emotional_shift_mutation",
          "_entropy_driven_mutation",
          "_contextual_merge_mutation",
          "_creative_synthesis_mutation",
          "_repair_focused_mutation",
          "_generate_emotional_profile",
          "_calculate_coherence_score",
          "_calculate_novelty_score",
          "_classify_safety",
          "_generate_entropy_lineage",
          "score_glyph_viability",
          "_calculate_composite_viability",
          "_calculate_emotional_harmony",
          "_enhance_candidate_scoring",
          "register_new_glyph",
          "_load_glyph_registry",
          "_save_glyph_registry",
          "log_foundry_event",
          "_log_foundry_event",
          "generate_mutation_report",
          "_generate_markdown_report",
          "_generate_json_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import \u039bFoundry",
          "export": "__all__.append('\u039bFoundry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalTone",
        "type": "class",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalTone",
          "export": "__all__.append('EmotionalTone')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentStatus",
        "type": "class",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentStatus",
          "export": "__all__.append('AlignmentStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceEntry",
        "type": "dataclass",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 105,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ExperienceEntry",
          "export": "__all__.append('ExperienceEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalDrift",
        "type": "dataclass",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 122,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalDrift",
          "export": "__all__.append('EmotionalDrift')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentScore",
        "type": "dataclass",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 144,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentScore",
          "export": "__all__.append('AlignmentScore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionEntry",
        "type": "dataclass",
        "file_path": "foundry/lambda_mirror.py",
        "line_number": 174,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "foundry/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ReflectionEntry",
          "export": "__all__.append('ReflectionEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "HormoneModulation",
        "type": "dataclass",
        "file_path": "bio/endocrine_integration.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .endocrine_integration import HormoneModulation",
          "export": "__all__.append('HormoneModulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProteinSynthesizer",
        "type": "class",
        "file_path": "bio/bio_utilities.py",
        "line_number": 114,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .bio_utilities import ProteinSynthesizer",
          "export": "__all__.append('ProteinSynthesizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "HormoneInteraction",
        "type": "dataclass",
        "file_path": "bio/simulation_controller.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .simulation_controller import HormoneInteraction",
          "export": "__all__.append('HormoneInteraction')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillatorState",
        "type": "class",
        "file_path": "bio/oscillator.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import OscillatorState",
          "export": "__all__.append('OscillatorState')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioConfig",
        "type": "dataclass",
        "file_path": "bio/quantum_layer.py",
        "line_number": 13,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .quantum_layer import QuantumBioConfig",
          "export": "__all__.append('QuantumBioConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProteinSynthesizer",
        "type": "class",
        "file_path": "bio/protein_synthesizer.py",
        "line_number": 8,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .protein_synthesizer import ProteinSynthesizer",
          "export": "__all__.append('ProteinSynthesizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioRecoveryProtocol",
        "type": "class",
        "file_path": "bio/recovery_protocol.py",
        "line_number": 19,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .recovery_protocol import BioRecoveryProtocol",
          "export": "__all__.append('BioRecoveryProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEntropyObserver",
        "type": "class",
        "file_path": "bio/symbolic_entropy_observer.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "get_latest_entropy_snapshot",
          "get_entropy_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_entropy_observer import SymbolicEntropyObserver",
          "export": "__all__.append('SymbolicEntropyObserver')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskType",
        "type": "class",
        "file_path": "bio/endocrine_daily_operations.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .endocrine_daily_operations import TaskType",
          "export": "__all__.append('TaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedDailyOperations",
        "type": "class",
        "file_path": "bio/endocrine_daily_operations.py",
        "line_number": 80,
        "methods": [
          "__init__",
          "_setup_hormone_responses",
          "_select_suitable_tasks",
          "_calculate_task_suitability",
          "_get_optimal_task_types",
          "_get_task_energy_requirement",
          "_can_start_task",
          "_get_max_concurrent_tasks",
          "_get_task_performance_modulation",
          "_calculate_performance",
          "_detect_burnout_risk",
          "_detect_understimulation",
          "_update_average_completion_time",
          "_handle_high_stress",
          "_handle_optimal_state",
          "_handle_rest_needed",
          "_handle_high_focus",
          "add_task",
          "get_operational_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/__init__.py",
          "action": "add_export",
          "code": "from .endocrine_daily_operations import EnhancedDailyOperations",
          "export": "__all__.append('EnhancedDailyOperations')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoherenceMetrics",
        "type": "dataclass",
        "file_path": "bio/symbolic/bio_symbolic_orchestrator.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_orchestrator import CoherenceMetrics",
          "export": "__all__.append('CoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingPipeline",
        "type": "dataclass",
        "file_path": "bio/symbolic/bio_symbolic_orchestrator.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_orchestrator import ProcessingPipeline",
          "export": "__all__.append('ProcessingPipeline')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContextLayer",
        "type": "class",
        "file_path": "bio/symbolic/contextual_mapping_colony.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .contextual_mapping_colony import ContextLayer",
          "export": "__all__.append('ContextLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnomalyAction",
        "type": "class",
        "file_path": "bio/symbolic/anomaly_filter_colony.py",
        "line_number": 38,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .anomaly_filter_colony import AnomalyAction",
          "export": "__all__.append('AnomalyAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "MitoEthicsSync",
        "type": "class",
        "file_path": "bio/symbolic/mito_ethics_sync.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "update_phase",
          "assess_alignment",
          "is_synchronized"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_ethics_sync import MitoEthicsSync",
          "export": "__all__.append('MitoEthicsSync')"
        }
      ]
    },
    {
      "entity": {
        "name": "StressGate",
        "type": "class",
        "file_path": "bio/symbolic/stress_gate.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "update_stress",
          "_decay_stress",
          "should_fallback",
          "reset",
          "report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .stress_gate import StressGate",
          "export": "__all__.append('StressGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumTunnelFilter",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 27,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import QuantumTunnelFilter",
          "export": "__all__.append('QuantumTunnelFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaGate",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import CristaGate",
          "export": "__all__.append('CristaGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "VivoxAttention",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 47,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import VivoxAttention",
          "export": "__all__.append('VivoxAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "OxintusReasoner",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 50,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import OxintusReasoner",
          "export": "__all__.append('OxintusReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MAELayer",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 53,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MAELayer",
          "export": "__all__.append('MAELayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "RespiModule",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import RespiModule",
          "export": "__all__.append('RespiModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ATPAllocator",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "allocate",
          "_bind_resource"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import ATPAllocator",
          "export": "__all__.append('ATPAllocator')"
        }
      ]
    },
    {
      "entity": {
        "name": "VivoxSection",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 108,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import VivoxSection",
          "export": "__all__.append('VivoxSection')"
        }
      ]
    },
    {
      "entity": {
        "name": "OxintusBrass",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 111,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import OxintusBrass",
          "export": "__all__.append('OxintusBrass')"
        }
      ]
    },
    {
      "entity": {
        "name": "MAEPercussion",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 114,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MAEPercussion",
          "export": "__all__.append('MAEPercussion')"
        }
      ]
    },
    {
      "entity": {
        "name": "MitochondrialConductor",
        "type": "class",
        "file_path": "bio/symbolic/mito_quantum_attention.py",
        "line_number": 117,
        "methods": [
          "__init__",
          "_calculate_cristae_topology",
          "_route_to_instrument",
          "_synchronize",
          "perform"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MitochondrialConductor",
          "export": "__all__.append('MitochondrialConductor')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumState",
        "type": "dataclass",
        "file_path": "bio/symbolic/quantum_coherence_enhancer.py",
        "line_number": 37,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .quantum_coherence_enhancer import QuantumState",
          "export": "__all__.append('QuantumState')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCoherenceEnhancer",
        "type": "class",
        "file_path": "bio/symbolic/quantum_coherence_enhancer.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "z_collapse",
          "drift_score",
          "enhance_coherence",
          "_compute_amplitude",
          "_compute_phase",
          "_compute_entropy_change",
          "_calculate_phase_alignment",
          "get_quantum_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .quantum_coherence_enhancer import QuantumCoherenceEnhancer",
          "export": "__all__.append('QuantumCoherenceEnhancer')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackReason",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackReason",
          "export": "__all__.append('FallbackReason')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackEvent",
        "type": "dataclass",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackEvent",
          "export": "__all__.append('FallbackEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('fallbackevent', FallbackEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackCoherenceMetrics",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 698,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackCoherenceMetrics",
          "export": "__all__.append('FallbackCoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackCoherenceMetrics",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 727,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackCoherenceMetrics",
          "export": "__all__.append('FallbackCoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackCoherenceMetrics",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 754,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackCoherenceMetrics",
          "export": "__all__.append('FallbackCoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackCoherenceMetrics",
        "type": "class",
        "file_path": "bio/symbolic/fallback_systems.py",
        "line_number": 779,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .fallback_systems import FallbackCoherenceMetrics",
          "export": "__all__.append('FallbackCoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioPreprocessingColony",
        "type": "class",
        "file_path": "bio/symbolic/preprocessing_colony.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "_assign_quality_tag",
          "_apply_tag",
          "_log_preprocessing_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .preprocessing_colony import BioPreprocessingColony",
          "export": "__all__.append('BioPreprocessingColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "DNASimulator",
        "type": "class",
        "file_path": "bio/symbolic/dna_simulator.py",
        "line_number": 9,
        "methods": [
          "parse_sequence",
          "entangle_with_colony"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .dna_simulator import DNASimulator",
          "export": "__all__.append('DNASimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleHealth",
        "type": "class",
        "file_path": "bio/systems/orchestration/base_orchestrator.py",
        "line_number": 18,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .base_orchestrator import ModuleHealth",
          "export": "__all__.append('ModuleHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseBioOrchestrator",
        "type": "class",
        "file_path": "bio/systems/orchestration/base_orchestrator.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "register_module",
          "invoke_module",
          "get_status",
          "get_module_status",
          "orchestrate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .base_orchestrator import BaseBioOrchestrator",
          "export": "__all__.append('BaseBioOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityAwareBioOrchestrator",
        "type": "class",
        "file_path": "bio/systems/orchestration/identity_aware_bio_orchestrator.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "get_service_info",
          "register_module",
          "unregister_module",
          "allocate_energy",
          "heal_module",
          "get_user_modules",
          "get_tiered_system_status",
          "admin_override_allocation",
          "cleanup_user_resources"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .identity_aware_bio_orchestrator import IdentityAwareBioOrchestrator",
          "export": "__all__.append('IdentityAwareBioOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoModule",
        "type": "class",
        "file_path": "bio/systems/orchestration/identity_aware_bio_orchestrator.py",
        "line_number": 421,
        "methods": [
          "process"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .identity_aware_bio_orchestrator import DemoModule",
          "export": "__all__.append('DemoModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillatorBioOrchestrator",
        "type": "class",
        "file_path": "bio/systems/orchestration/oscillator_orchestrator.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "add_oscillator",
          "remove_oscillator",
          "monitor_coherence",
          "_crisis_response",
          "_optimization_profile",
          "_stabilization_profile",
          "apply_resonance_pattern",
          "correct_phase_drift",
          "_rebalance_network",
          "_get_prime",
          "get_status",
          "manage_quantum_like_states",
          "get_quantum_metrics",
          "register_module",
          "invoke_module"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .oscillator_orchestrator import OscillatorBioOrchestrator",
          "export": "__all__.append('OscillatorBioOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceBioAdapter",
        "type": "class",
        "file_path": "bio/systems/orchestration/adapters/voice_adapter.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "_register_voice_modules",
          "process_audio_chunk",
          "optimize_for_realtime",
          "get_voice_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bio/systems/orchestration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .voice_adapter import VoiceBioAdapter",
          "export": "__all__.append('VoiceBioAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicHealth",
        "type": "dataclass",
        "file_path": "trace/drift_tools.py",
        "line_number": 80,
        "methods": [
          "overall_health",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_tools import SymbolicHealth",
          "export": "__all__.append('SymbolicHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryMetrics",
        "type": "dataclass",
        "file_path": "trace/drift_tools.py",
        "line_number": 115,
        "methods": [
          "time_to_recovery",
          "recovery_efficiency",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_tools import RecoveryMetrics",
          "export": "__all__.append('RecoveryMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "RestabilizationIndex",
        "type": "class",
        "file_path": "trace/restabilization_index.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "register_recovery",
          "score_recovery",
          "link_to_drift",
          "summarize_restabilization"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .restabilization_index import RestabilizationIndex",
          "export": "__all__.append('RestabilizationIndex')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftSnapshot",
        "type": "dataclass",
        "file_path": "trace/drift_dashboard.py",
        "line_number": 82,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_dashboard import DriftSnapshot",
          "export": "__all__.append('DriftSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemediationAction",
        "type": "dataclass",
        "file_path": "trace/drift_dashboard.py",
        "line_number": 126,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_dashboard import RemediationAction",
          "export": "__all__.append('RemediationAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "LoopPatternDetector",
        "type": "class",
        "file_path": "trace/drift_dashboard.py",
        "line_number": 533,
        "methods": [
          "detect",
          "_is_oscillating",
          "_is_escalating"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_dashboard import LoopPatternDetector",
          "export": "__all__.append('LoopPatternDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "CascadePredictor",
        "type": "class",
        "file_path": "trace/drift_dashboard.py",
        "line_number": 592,
        "methods": [
          "predict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "trace/__init__.py",
          "action": "add_export",
          "code": "from .drift_dashboard import CascadePredictor",
          "export": "__all__.append('CascadePredictor')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedAISystem",
        "type": "class",
        "file_path": "core/integrated_system.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "task_priority_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_system import DistributedAISystem",
          "export": "__all__.append('DistributedAISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhusAITaskType",
        "type": "class",
        "file_path": "core/ai_interface.py",
        "line_number": 52,
        "methods": [
          "_missing_"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .ai_interface import LukhusAITaskType",
          "export": "__all__.append('LukhusAITaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhusAI",
        "type": "class",
        "file_path": "core/ai_interface.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "generate_response",
          "code_assistance",
          "security_audit",
          "web_research",
          "documentation_assist",
          "creative_generation",
          "analysis",
          "chat"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .ai_interface import LukhusAI",
          "export": "__all__.append('LukhusAI')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationConfig",
        "type": "dataclass",
        "file_path": "core/integration_hub.py",
        "line_number": 16,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integration_hub import IntegrationConfig",
          "export": "__all__.append('IntegrationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationResult",
        "type": "dataclass",
        "file_path": "core/integration_hub.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integration_hub import IntegrationResult",
          "export": "__all__.append('IntegrationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResourceState",
        "type": "class",
        "file_path": "core/swarm.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .swarm import ResourceState",
          "export": "__all__.append('ResourceState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResourceSnapshot",
        "type": "dataclass",
        "file_path": "core/resource_efficiency_analyzer.py",
        "line_number": 56,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .resource_efficiency_analyzer import ResourceSnapshot",
          "export": "__all__.append('ResourceSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResourceTrend",
        "type": "dataclass",
        "file_path": "core/resource_efficiency_analyzer.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .resource_efficiency_analyzer import ResourceTrend",
          "export": "__all__.append('ResourceTrend')"
        }
      ]
    },
    {
      "entity": {
        "name": "EfficiencyReport",
        "type": "dataclass",
        "file_path": "core/resource_efficiency_analyzer.py",
        "line_number": 91,
        "methods": [
          "to_json"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .resource_efficiency_analyzer import EfficiencyReport",
          "export": "__all__.append('EfficiencyReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmResourceScheduler",
        "type": "class",
        "file_path": "core/resource_scheduler.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "schedule_task",
          "_calculate_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .resource_scheduler import SwarmResourceScheduler",
          "export": "__all__.append('SwarmResourceScheduler')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicContract",
        "type": "dataclass",
        "file_path": "core/symbolic_contract.py",
        "line_number": 14,
        "methods": [
          "validate_propagation",
          "validate_payload"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_contract import SymbolicContract",
          "export": "__all__.append('SymbolicContract')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicContractRegistry",
        "type": "class",
        "file_path": "core/symbolic_contract.py",
        "line_number": 53,
        "methods": [
          "__init__",
          "register",
          "get",
          "to_json"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_contract import SymbolicContractRegistry",
          "export": "__all__.append('SymbolicContractRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "SupervisedActorSystem",
        "type": "class",
        "file_path": "core/actor_supervision_integration.py",
        "line_number": 95,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .actor_supervision_integration import SupervisedActorSystem",
          "export": "__all__.append('SupervisedActorSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedCoreConfig",
        "type": "dataclass",
        "file_path": "core/integrator.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrator import EnhancedCoreConfig",
          "export": "__all__.append('EnhancedCoreConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreMessageType",
        "type": "class",
        "file_path": "core/integrator.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrator import CoreMessageType",
          "export": "__all__.append('CoreMessageType')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSignature",
        "type": "dataclass",
        "file_path": "core/id.py",
        "line_number": 75,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .id import QuantumSignature",
          "export": "__all__.append('QuantumSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditLogEntry",
        "type": "dataclass",
        "file_path": "core/id.py",
        "line_number": 87,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .id import AuditLogEntry",
          "export": "__all__.append('AuditLogEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaLockedMemory",
        "type": "class",
        "file_path": "core/id.py",
        "line_number": 119,
        "methods": [
          "__init__",
          "lock_memory",
          "unlock_memory",
          "_generate_emotional_key",
          "_generate_standard_key",
          "_encrypt_data",
          "_decrypt_data",
          "_calculate_emotional_similarity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .id import TraumaLockedMemory",
          "export": "__all__.append('TraumaLockedMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceSpan",
        "type": "dataclass",
        "file_path": "core/distributed_tracing.py",
        "line_number": 25,
        "methods": [
          "to_dict",
          "finish",
          "add_tag",
          "add_log"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .distributed_tracing import TraceSpan",
          "export": "__all__.append('TraceSpan')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceContext",
        "type": "dataclass",
        "file_path": "core/distributed_tracing.py",
        "line_number": 60,
        "methods": [
          "__post_init__",
          "span_id",
          "parent_span_id",
          "with_span",
          "set_baggage_item",
          "get_baggage_item",
          "to_headers",
          "from_headers"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .distributed_tracing import TraceContext",
          "export": "__all__.append('TraceContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedTracer",
        "type": "class",
        "file_path": "core/distributed_tracing.py",
        "line_number": 295,
        "methods": [
          "__init__",
          "start_trace",
          "start_span",
          "finish_span",
          "add_tag",
          "add_log",
          "trace_operation",
          "get_current_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .distributed_tracing import DistributedTracer",
          "export": "__all__.append('DistributedTracer')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateSnapshotter",
        "type": "class",
        "file_path": "core/distributed_tracing.py",
        "line_number": 574,
        "methods": [
          "__init__",
          "take_snapshot",
          "restore_latest_snapshot"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .distributed_tracing import StateSnapshotter",
          "export": "__all__.append('StateSnapshotter')"
        }
      ]
    },
    {
      "entity": {
        "name": "EventReplayer",
        "type": "class",
        "file_path": "core/distributed_tracing.py",
        "line_number": 609,
        "methods": [
          "__init__",
          "replay_trace",
          "replay_agent_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .distributed_tracing import EventReplayer",
          "export": "__all__.append('EventReplayer')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('eventreplayer', EventReplayer())"
        }
      ]
    },
    {
      "entity": {
        "name": "MethodSignature",
        "type": "dataclass",
        "file_path": "core/api_diff_analyzer.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .api_diff_analyzer import MethodSignature",
          "export": "__all__.append('MethodSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIMismatch",
        "type": "dataclass",
        "file_path": "core/api_diff_analyzer.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .api_diff_analyzer import APIMismatch",
          "export": "__all__.append('APIMismatch')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImplementationAnalyzer",
        "type": "class",
        "file_path": "core/api_diff_analyzer.py",
        "line_number": 143,
        "methods": [
          "__init__",
          "extract_signatures",
          "visit_ClassDef",
          "visit_FunctionDef",
          "visit_AsyncFunctionDef"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .api_diff_analyzer import ImplementationAnalyzer",
          "export": "__all__.append('ImplementationAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIDiffAnalyzer",
        "type": "class",
        "file_path": "core/api_diff_analyzer.py",
        "line_number": 213,
        "methods": [
          "__init__",
          "analyze",
          "_extract_test_calls",
          "_extract_implementations",
          "_find_mismatches",
          "_find_best_match",
          "_generate_report",
          "_generate_fixes",
          "_generate_migration_script",
          "_get_timestamp"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .api_diff_analyzer import APIDiffAnalyzer",
          "export": "__all__.append('APIDiffAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EventReplayer",
        "type": "class",
        "file_path": "core/event_replayer.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "_load_events",
          "filter_events_by_tag",
          "replay_events"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .event_replayer import EventReplayer",
          "export": "__all__.append('EventReplayer')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('eventreplayer', EventReplayer())"
        }
      ]
    },
    {
      "entity": {
        "name": "ImageEvent",
        "type": "dataclass",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 85,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ImageEvent",
          "export": "__all__.append('ImageEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('imageevent', ImageEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingStage",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 106,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ProcessingStage",
          "export": "__all__.append('ProcessingStage')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImageProcessingColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 116,
        "methods": [
          "__init__",
          "_subscribe_to_events",
          "_handle_event",
          "_handle_call_for_proposals",
          "_can_handle_work",
          "_create_proposal",
          "_publish_result",
          "_publish_failure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ImageProcessingColony",
          "export": "__all__.append('ImageProcessingColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonySupervisor",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 433,
        "methods": [
          "__init__",
          "handle_worker_failure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ColonySupervisor",
          "export": "__all__.append('ColonySupervisor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImageProcessingWorker",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 449,
        "methods": [
          "__init__",
          "is_healthy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ImageProcessingWorker",
          "export": "__all__.append('ImageProcessingWorker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 478,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ValidationColony",
          "export": "__all__.append('ValidationColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "FeatureExtractionColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 583,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import FeatureExtractionColony",
          "export": "__all__.append('FeatureExtractionColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ClassificationColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 629,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ClassificationColony",
          "export": "__all__.append('ClassificationColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThumbnailColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 673,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ThumbnailColony",
          "export": "__all__.append('ThumbnailColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "AggregationColony",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 713,
        "methods": [
          "__init__",
          "_handle_result_event",
          "_event_type_to_stage",
          "_is_processing_complete",
          "_publish_completion_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import AggregationColony",
          "export": "__all__.append('AggregationColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImageProcessingPipeline",
        "type": "class",
        "file_path": "core/image_processing_pipeline.py",
        "line_number": 832,
        "methods": [
          "__init__",
          "get_pipeline_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .image_processing_pipeline import ImageProcessingPipeline",
          "export": "__all__.append('ImageProcessingPipeline')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyMetrics",
        "type": "dataclass",
        "file_path": "core/symbolic_drift_analyzer.py",
        "line_number": 91,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_drift_analyzer import EntropyMetrics",
          "export": "__all__.append('EntropyMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "TagVarianceMetrics",
        "type": "dataclass",
        "file_path": "core/symbolic_drift_analyzer.py",
        "line_number": 112,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_drift_analyzer import TagVarianceMetrics",
          "export": "__all__.append('TagVarianceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleCapabilityType",
        "type": "class",
        "file_path": "core/oracle_nervous_system.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .oracle_nervous_system import OracleCapabilityType",
          "export": "__all__.append('OracleCapabilityType')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleIntegrationLevel",
        "type": "class",
        "file_path": "core/oracle_nervous_system.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .oracle_nervous_system import OracleIntegrationLevel",
          "export": "__all__.append('OracleIntegrationLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleCapability",
        "type": "dataclass",
        "file_path": "core/oracle_nervous_system.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .oracle_nervous_system import OracleCapability",
          "export": "__all__.append('OracleCapability')"
        }
      ]
    },
    {
      "entity": {
        "name": "NervousSystemRequest",
        "type": "dataclass",
        "file_path": "core/oracle_nervous_system.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .oracle_nervous_system import NervousSystemRequest",
          "export": "__all__.append('NervousSystemRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "NervousSystemResponse",
        "type": "dataclass",
        "file_path": "core/oracle_nervous_system.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .oracle_nervous_system import NervousSystemResponse",
          "export": "__all__.append('NervousSystemResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyEventType",
        "type": "class",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyEventType",
          "export": "__all__.append('SafetyEventType')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('safetyeventtype', SafetyEventType())"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyLevel",
        "type": "class",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyLevel",
          "export": "__all__.append('SafetyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyEvent",
        "type": "dataclass",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyEvent",
          "export": "__all__.append('SafetyEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('safetyevent', SafetyEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyValidationResult",
        "type": "dataclass",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyValidationResult",
          "export": "__all__.append('SafetyValidationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyEventBus",
        "type": "class",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 125,
        "methods": [
          "__init__",
          "get_event_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyEventBus",
          "export": "__all__.append('SafetyEventBus')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('safetyeventbus', SafetyEventBus())"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyColony",
        "type": "class",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 222,
        "methods": [
          "__init__",
          "_hash_output"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import SafetyColony",
          "export": "__all__.append('SafetyColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegratedSafetySystem",
        "type": "class",
        "file_path": "core/integrated_safety_system.py",
        "line_number": 384,
        "methods": [
          "__init__",
          "_generate_recommendations",
          "_assess_threat_level",
          "_update_safety_level",
          "check_circuit_breaker",
          "trip_circuit_breaker",
          "_update_safety_metrics",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .integrated_safety_system import IntegratedSafetySystem",
          "export": "__all__.append('IntegratedSafetySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierSystemAdapter",
        "type": "class",
        "file_path": "core/tier_unification_adapter.py",
        "line_number": 38,
        "methods": [
          "to_lambda_tier",
          "from_lambda_tier",
          "validate_access"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tier_unification_adapter import TierSystemAdapter",
          "export": "__all__.append('TierSystemAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedTierAdapter",
        "type": "class",
        "file_path": "core/tier_unification_adapter.py",
        "line_number": 238,
        "methods": [
          "__init__",
          "normalize_any_tier",
          "create_unified_decorator"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tier_unification_adapter import UnifiedTierAdapter",
          "export": "__all__.append('UnifiedTierAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicBootstrap",
        "type": "class",
        "file_path": "core/symbolic_boot.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "validate_workspace",
          "load_system_modules",
          "symbolic_boot",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_boot import SymbolicBootstrap",
          "export": "__all__.append('SymbolicBootstrap')"
        }
      ]
    },
    {
      "entity": {
        "name": "TagConflictResolver",
        "type": "class",
        "file_path": "core/symbolic_arbitration.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "resolve",
          "_majority_rule",
          "_seniority_based"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_arbitration import TagConflictResolver",
          "export": "__all__.append('TagConflictResolver')"
        }
      ]
    },
    {
      "entity": {
        "name": "TagLineageTracker",
        "type": "class",
        "file_path": "core/symbolic_arbitration.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "add_event",
          "get_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_arbitration import TagLineageTracker",
          "export": "__all__.append('TagLineageTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyProfile",
        "type": "class",
        "file_path": "core/energy_consumption_analysis.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .energy_consumption_analysis import EnergyProfile",
          "export": "__all__.append('EnergyProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyMetric",
        "type": "dataclass",
        "file_path": "core/energy_consumption_analysis.py",
        "line_number": 81,
        "methods": [
          "power_watts",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .energy_consumption_analysis import EnergyMetric",
          "export": "__all__.append('EnergyMetric')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyBudget",
        "type": "dataclass",
        "file_path": "core/energy_consumption_analysis.py",
        "line_number": 110,
        "methods": [
          "remaining_budget",
          "budget_percentage_used",
          "time_elapsed",
          "is_within_budget",
          "reset"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .energy_consumption_analysis import EnergyBudget",
          "export": "__all__.append('EnergyBudget')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyModel",
        "type": "class",
        "file_path": "core/energy_consumption_analysis.py",
        "line_number": 142,
        "methods": [
          "__init__",
          "record_observation",
          "predict_energy",
          "_update_model"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .energy_consumption_analysis import EnergyModel",
          "export": "__all__.append('EnergyModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyAwareComponent",
        "type": "class",
        "file_path": "core/energy_consumption_analysis.py",
        "line_number": 627,
        "methods": [
          "__init__",
          "_estimate_operation_energy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .energy_consumption_analysis import EnergyAwareComponent",
          "export": "__all__.append('EnergyAwareComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "CacheEntry",
        "type": "dataclass",
        "file_path": "core/practical_optimizations.py",
        "line_number": 60,
        "methods": [
          "is_expired",
          "access",
          "score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import CacheEntry",
          "export": "__all__.append('CacheEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveCache",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 94,
        "methods": [
          "__init__",
          "get",
          "put",
          "_estimate_size",
          "_evict_one",
          "_prefetch_related",
          "clear_expired",
          "apply",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import AdaptiveCache",
          "export": "__all__.append('AdaptiveCache')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObjectPool",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 284,
        "methods": [
          "__init__",
          "_prepopulate",
          "acquire",
          "release",
          "borrowed",
          "apply",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import ObjectPool",
          "export": "__all__.append('ObjectPool')"
        }
      ]
    },
    {
      "entity": {
        "name": "LazyComputation",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 393,
        "methods": [
          "__init__",
          "lazy_property",
          "defer",
          "apply",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import LazyComputation",
          "export": "__all__.append('LazyComputation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeferredComputation",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 438,
        "methods": [
          "__init__",
          "get",
          "is_computed",
          "__del__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import DeferredComputation",
          "export": "__all__.append('DeferredComputation')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryMappedStorage",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 590,
        "methods": [
          "__init__",
          "store_array",
          "get_array",
          "apply",
          "get_metrics",
          "cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import MemoryMappedStorage",
          "export": "__all__.append('MemoryMappedStorage')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComputationReuse",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 698,
        "methods": [
          "__init__",
          "memoize",
          "share_computation",
          "invalidate_dependents",
          "apply",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import ComputationReuse",
          "export": "__all__.append('ComputationReuse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExpensiveObject",
        "type": "class",
        "file_path": "core/practical_optimizations.py",
        "line_number": 1086,
        "methods": [
          "__init__",
          "reset"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .practical_optimizations import ExpensiveObject",
          "export": "__all__.append('ExpensiveObject')"
        }
      ]
    },
    {
      "entity": {
        "name": "Consistency",
        "type": "class",
        "file_path": "core/consistency_manager.py",
        "line_number": 11,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .consistency_manager import Consistency",
          "export": "__all__.append('Consistency')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsistencyManager",
        "type": "class",
        "file_path": "core/consistency_manager.py",
        "line_number": 15,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .consistency_manager import ConsistencyManager",
          "export": "__all__.append('ConsistencyManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('consistencymanager', ConsistencyManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleInfo",
        "type": "dataclass",
        "file_path": "core/module_registry.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .module_registry import ModuleInfo",
          "export": "__all__.append('ModuleInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaLoggerAdapter",
        "type": "class",
        "file_path": "core/notion_sync.py",
        "line_number": 509,
        "methods": [
          "process"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .notion_sync import LambdaLoggerAdapter",
          "export": "__all__.append('LambdaLoggerAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "Consistency",
        "type": "class",
        "file_path": "core/core_utilities.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .core_utilities import Consistency",
          "export": "__all__.append('Consistency')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsistencyManager",
        "type": "class",
        "file_path": "core/core_utilities.py",
        "line_number": 84,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .core_utilities import ConsistencyManager",
          "export": "__all__.append('ConsistencyManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('consistencymanager', ConsistencyManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "SupervisionDirective",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 24,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import SupervisionDirective",
          "export": "__all__.append('SupervisionDirective')"
        }
      ]
    },
    {
      "entity": {
        "name": "RestartPolicy",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import RestartPolicy",
          "export": "__all__.append('RestartPolicy')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailureInfo",
        "type": "dataclass",
        "file_path": "core/supervision.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import FailureInfo",
          "export": "__all__.append('FailureInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "SupervisionDecider",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import SupervisionDecider",
          "export": "__all__.append('SupervisionDecider')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultSupervisionDecider",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 80,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import DefaultSupervisionDecider",
          "export": "__all__.append('DefaultSupervisionDecider')"
        }
      ]
    },
    {
      "entity": {
        "name": "AllForOneStrategy",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 131,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import AllForOneStrategy",
          "export": "__all__.append('AllForOneStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "OneForOneStrategy",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 138,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import OneForOneStrategy",
          "export": "__all__.append('OneForOneStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "RestForOneStrategy",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 148,
        "methods": [
          "__init__",
          "register_child",
          "get_affected_children"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import RestForOneStrategy",
          "export": "__all__.append('RestForOneStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitBreaker",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 173,
        "methods": [
          "__init__",
          "record_success",
          "record_failure",
          "can_proceed",
          "reset"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import CircuitBreaker",
          "export": "__all__.append('CircuitBreaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "DepartmentSupervisor",
        "type": "class",
        "file_path": "core/supervision.py",
        "line_number": 560,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .supervision import DepartmentSupervisor",
          "export": "__all__.append('DepartmentSupervisor')"
        }
      ]
    },
    {
      "entity": {
        "name": "BotMode",
        "type": "class",
        "file_path": "core/bot.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .bot import BotMode",
          "export": "__all__.append('BotMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskType",
        "type": "class",
        "file_path": "core/bot.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .bot import TaskType",
          "export": "__all__.append('TaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedBot",
        "type": "class",
        "file_path": "core/bot.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "_init_ai_routing",
          "process_task",
          "_process_classic",
          "_process_ai",
          "_process_enterprise",
          "_get_optimal_model",
          "_make_ai_request",
          "run_component_task",
          "_run_audit",
          "_run_documentation",
          "_run_web_management",
          "_run_agent_task",
          "_run_default"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .bot import UnifiedBot",
          "export": "__all__.append('UnifiedBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseComponent",
        "type": "class",
        "file_path": "core/common.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "set_status",
          "add_metadata"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .common import BaseComponent",
          "export": "__all__.append('BaseComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseMessage",
        "type": "class",
        "file_path": "core/common.py",
        "line_number": 65,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .common import BaseMessage",
          "export": "__all__.append('BaseMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentError",
        "type": "class",
        "file_path": "core/common.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .common import ComponentError",
          "export": "__all__.append('ComponentError')"
        }
      ]
    },
    {
      "entity": {
        "name": "CommunicationError",
        "type": "class",
        "file_path": "core/common.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .common import CommunicationError",
          "export": "__all__.append('CommunicationError')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitState",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import CircuitState",
          "export": "__all__.append('CircuitState')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailureType",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import FailureType",
          "export": "__all__.append('FailureType')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailureRecord",
        "type": "dataclass",
        "file_path": "core/circuit_breaker.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import FailureRecord",
          "export": "__all__.append('FailureRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthCheck",
        "type": "dataclass",
        "file_path": "core/circuit_breaker.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import HealthCheck",
          "export": "__all__.append('HealthCheck')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedCircuitBreaker",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 68,
        "methods": [
          "__init__",
          "call",
          "_allow_request",
          "_on_success",
          "_on_failure",
          "_should_open",
          "_transition_to",
          "force_open",
          "force_close",
          "add_health_check",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import AdvancedCircuitBreaker",
          "export": "__all__.append('AdvancedCircuitBreaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitBreakerOpen",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 308,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import CircuitBreakerOpen",
          "export": "__all__.append('CircuitBreakerOpen')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnomalyDetector",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 313,
        "methods": [
          "__init__",
          "record_metric",
          "detect_anomalies",
          "_calculate_z_score",
          "get_anomaly_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import AnomalyDetector",
          "export": "__all__.append('AnomalyDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "ErrorPropagationTracker",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 416,
        "methods": [
          "__init__",
          "record_failure",
          "is_actor_infected",
          "quarantine_actor",
          "is_quarantined",
          "analyze_propagation_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import ErrorPropagationTracker",
          "export": "__all__.append('ErrorPropagationTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusValidator",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 503,
        "methods": [
          "__init__",
          "_analyze_responses",
          "_create_cache_key"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import ConsensusValidator",
          "export": "__all__.append('ConsensusValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CascadePreventionSystem",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 617,
        "methods": [
          "__init__",
          "get_or_create_circuit_breaker",
          "report_failure",
          "_update_system_health_score",
          "_check_emergency_conditions",
          "_execute_emergency_protocol",
          "_on_circuit_state_change",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import CascadePreventionSystem",
          "export": "__all__.append('CascadePreventionSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorQuarantined",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 929,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import ActorQuarantined",
          "export": "__all__.append('ActorQuarantined')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnomalyDetected",
        "type": "class",
        "file_path": "core/circuit_breaker.py",
        "line_number": 934,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .circuit_breaker import AnomalyDetected",
          "export": "__all__.append('AnomalyDetected')"
        }
      ]
    },
    {
      "entity": {
        "name": "CommunicationMode",
        "type": "class",
        "file_path": "core/efficient_communication.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .efficient_communication import CommunicationMode",
          "export": "__all__.append('CommunicationMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MessageRouter",
        "type": "class",
        "file_path": "core/efficient_communication.py",
        "line_number": 100,
        "methods": [
          "__init__",
          "register_node",
          "select_communication_mode",
          "find_optimal_path",
          "can_afford_message",
          "record_message_sent"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .efficient_communication import MessageRouter",
          "export": "__all__.append('MessageRouter')"
        }
      ]
    },
    {
      "entity": {
        "name": "P2PChannel",
        "type": "class",
        "file_path": "core/efficient_communication.py",
        "line_number": 271,
        "methods": [
          "__init__",
          "get_connection_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .efficient_communication import P2PChannel",
          "export": "__all__.append('P2PChannel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyMonitor",
        "type": "class",
        "file_path": "core/efficient_communication.py",
        "line_number": 509,
        "methods": [
          "__init__",
          "record_energy_usage",
          "get_stats",
          "_calculate_efficiency_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .efficient_communication import EnergyMonitor",
          "export": "__all__.append('EnergyMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObservabilityLevel",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 27,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import ObservabilityLevel",
          "export": "__all__.append('ObservabilityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemHealth",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import SystemHealth",
          "export": "__all__.append('SystemHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorSnapshot",
        "type": "dataclass",
        "file_path": "core/observability_steering.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import ActorSnapshot",
          "export": "__all__.append('ActorSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "MessageFlow",
        "type": "dataclass",
        "file_path": "core/observability_steering.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import MessageFlow",
          "export": "__all__.append('MessageFlow')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmergentPattern",
        "type": "dataclass",
        "file_path": "core/observability_steering.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import EmergentPattern",
          "export": "__all__.append('EmergentPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "SteeringController",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 309,
        "methods": [
          "__init__",
          "register_steering_policy",
          "_log_intervention"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import SteeringController",
          "export": "__all__.append('SteeringController')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObservableActor",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 397,
        "methods": [
          "__init__",
          "get_custom_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import ObservableActor",
          "export": "__all__.append('ObservableActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObservabilityDashboard",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 518,
        "methods": [
          "__init__",
          "register_visualization",
          "get_pattern_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import ObservabilityDashboard",
          "export": "__all__.append('ObservabilityDashboard')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObservableAgent",
        "type": "class",
        "file_path": "core/observability_steering.py",
        "line_number": 607,
        "methods": [
          "__init__",
          "get_custom_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observability_steering import ObservableAgent",
          "export": "__all__.append('ObservableAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReactiveDataPipeline",
        "type": "class",
        "file_path": "core/collaboration.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "run_pipeline"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .collaboration import ReactiveDataPipeline",
          "export": "__all__.append('ReactiveDataPipeline')"
        }
      ]
    },
    {
      "entity": {
        "name": "DynamicTaskNegotiation",
        "type": "class",
        "file_path": "core/collaboration.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "run_negotiation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .collaboration import DynamicTaskNegotiation",
          "export": "__all__.append('DynamicTaskNegotiation')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfOrganizingSwarm",
        "type": "class",
        "file_path": "core/collaboration.py",
        "line_number": 71,
        "methods": [
          "__init__",
          "run_training"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .collaboration import SelfOrganizingSwarm",
          "export": "__all__.append('SelfOrganizingSwarm')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskQueue",
        "type": "dataclass",
        "file_path": "core/task_manager.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .task_manager import TaskQueue",
          "export": "__all__.append('TaskQueue')"
        }
      ]
    },
    {
      "entity": {
        "name": "Lukh\u03bbsTaskManager",
        "type": "class",
        "file_path": "core/task_manager.py",
        "line_number": 83,
        "methods": [
          "__init__",
          "_load_config",
          "_setup_default_queues",
          "_setup_default_agents",
          "_register_task_handlers",
          "add_queue",
          "register_agent",
          "create_task",
          "get_task_status",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .task_manager import Lukh\u03bbsTaskManager",
          "export": "__all__.append('Lukh\u03bbsTaskManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukh\u03bbstaskmanager', Lukh\u03bbsTaskManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "PrioritizedMessage",
        "type": "dataclass",
        "file_path": "core/mailbox.py",
        "line_number": 47,
        "methods": [
          "__lt__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import PrioritizedMessage",
          "export": "__all__.append('PrioritizedMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeadLetterQueue",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 62,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import DeadLetterQueue",
          "export": "__all__.append('DeadLetterQueue')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnboundedMailbox",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 145,
        "methods": [
          "__init__",
          "qsize"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import UnboundedMailbox",
          "export": "__all__.append('UnboundedMailbox')"
        }
      ]
    },
    {
      "entity": {
        "name": "BoundedMailbox",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 174,
        "methods": [
          "__init__",
          "qsize"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import BoundedMailbox",
          "export": "__all__.append('BoundedMailbox')"
        }
      ]
    },
    {
      "entity": {
        "name": "PriorityMailbox",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 237,
        "methods": [
          "__init__",
          "qsize",
          "get_priority_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import PriorityMailbox",
          "export": "__all__.append('PriorityMailbox')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersistentMailbox",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 360,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import PersistentMailbox",
          "export": "__all__.append('PersistentMailbox')"
        }
      ]
    },
    {
      "entity": {
        "name": "PriorityActor",
        "type": "class",
        "file_path": "core/mailbox.py",
        "line_number": 654,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .mailbox import PriorityActor",
          "export": "__all__.append('PriorityActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorStateSnapshot",
        "type": "dataclass",
        "file_path": "core/event_replay_snapshot.py",
        "line_number": 80,
        "methods": [
          "create_from_actor",
          "restore_to_actor"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .event_replay_snapshot import ActorStateSnapshot",
          "export": "__all__.append('ActorStateSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "EventSourcedActor",
        "type": "class",
        "file_path": "core/event_replay_snapshot.py",
        "line_number": 480,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .event_replay_snapshot import EventSourcedActor",
          "export": "__all__.append('EventSourcedActor')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('eventsourcedactor', EventSourcedActor())"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayController",
        "type": "class",
        "file_path": "core/event_replay_snapshot.py",
        "line_number": 646,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .event_replay_snapshot import ReplayController",
          "export": "__all__.append('ReplayController')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoActor",
        "type": "class",
        "file_path": "core/event_replay_snapshot.py",
        "line_number": 765,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .event_replay_snapshot import DemoActor",
          "export": "__all__.append('DemoActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultIdentityAwareColony",
        "type": "class",
        "file_path": "core/identity_aware_base_colony.py",
        "line_number": 627,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .identity_aware_base_colony import DefaultIdentityAwareColony",
          "export": "__all__.append('DefaultIdentityAwareColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetricType",
        "type": "class",
        "file_path": "core/monitoring_observability.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .monitoring_observability import MetricType",
          "export": "__all__.append('MetricType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftType",
        "type": "class",
        "file_path": "core/monitoring_observability.py",
        "line_number": 119,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .monitoring_observability import DriftType",
          "export": "__all__.append('DriftType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetricThreshold",
        "type": "dataclass",
        "file_path": "core/monitoring_observability.py",
        "line_number": 145,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .monitoring_observability import MetricThreshold",
          "export": "__all__.append('MetricThreshold')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedTracer",
        "type": "class",
        "file_path": "core/monitoring_observability.py",
        "line_number": 169,
        "methods": [
          "__init__",
          "add_span_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .monitoring_observability import DistributedTracer",
          "export": "__all__.append('DistributedTracer')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSecurityLevel",
        "type": "class",
        "file_path": "core/quantum_identity_manager.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .quantum_identity_manager import QuantumSecurityLevel",
          "export": "__all__.append('QuantumSecurityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmSyncState",
        "type": "class",
        "file_path": "core/swarm_identity_orchestrator.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .swarm_identity_orchestrator import SwarmSyncState",
          "export": "__all__.append('SwarmSyncState')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmIdentityState",
        "type": "dataclass",
        "file_path": "core/swarm_identity_orchestrator.py",
        "line_number": 90,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .swarm_identity_orchestrator import SwarmIdentityState",
          "export": "__all__.append('SwarmIdentityState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossSwarmOperation",
        "type": "dataclass",
        "file_path": "core/swarm_identity_orchestrator.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .swarm_identity_orchestrator import CrossSwarmOperation",
          "export": "__all__.append('CrossSwarmOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmIdentityOrchestrator",
        "type": "class",
        "file_path": "core/swarm_identity_orchestrator.py",
        "line_number": 129,
        "methods": [
          "__init__",
          "_initialize_event_infrastructure",
          "_initialize_synchronization_system",
          "_start_background_tasks",
          "_update_tier_distribution",
          "_map_operation_to_method",
          "get_orchestrator_statistics",
          "_calculate_avg_metric",
          "_calculate_sync_success_rate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .swarm_identity_orchestrator import SwarmIdentityOrchestrator",
          "export": "__all__.append('SwarmIdentityOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CycleState",
        "type": "class",
        "file_path": "core/quantized_thought_cycles.py",
        "line_number": 31,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .quantized_thought_cycles import CycleState",
          "export": "__all__.append('CycleState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThoughtQuantum",
        "type": "dataclass",
        "file_path": "core/quantized_thought_cycles.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .quantized_thought_cycles import ThoughtQuantum",
          "export": "__all__.append('ThoughtQuantum')"
        }
      ]
    },
    {
      "entity": {
        "name": "CycleMetrics",
        "type": "dataclass",
        "file_path": "core/quantized_thought_cycles.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .quantized_thought_cycles import CycleMetrics",
          "export": "__all__.append('CycleMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsistencyLevel",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import ConsistencyLevel",
          "export": "__all__.append('ConsistencyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateSnapshot",
        "type": "dataclass",
        "file_path": "core/tiered_state_management.py",
        "line_number": 73,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import StateSnapshot",
          "export": "__all__.append('StateSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateAggregator",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 93,
        "methods": [
          "aggregate",
          "can_handle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import StateAggregator",
          "export": "__all__.append('StateAggregator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultStateAggregator",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 107,
        "methods": [
          "aggregate",
          "can_handle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import DefaultStateAggregator",
          "export": "__all__.append('DefaultStateAggregator')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateCoordinator",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 459,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import StateCoordinator",
          "export": "__all__.append('StateCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CounterAggregator",
        "type": "class",
        "file_path": "core/tiered_state_management.py",
        "line_number": 580,
        "methods": [
          "aggregate",
          "can_handle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tiered_state_management import CounterAggregator",
          "export": "__all__.append('CounterAggregator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DirectAIRouter",
        "type": "class",
        "file_path": "core/direct_ai_router.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "route_request",
          "is_available"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .direct_ai_router import DirectAIRouter",
          "export": "__all__.append('DirectAIRouter')"
        }
      ]
    },
    {
      "entity": {
        "name": "PingActor",
        "type": "class",
        "file_path": "core/actor_model.py",
        "line_number": 39,
        "methods": [
          "receive"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .actor_model import PingActor",
          "export": "__all__.append('PingActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "PongActor",
        "type": "class",
        "file_path": "core/actor_model.py",
        "line_number": 47,
        "methods": [
          "receive"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .actor_model import PongActor",
          "export": "__all__.append('PongActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SkillLevel",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import SkillLevel",
          "export": "__all__.append('SkillLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "Skill",
        "type": "dataclass",
        "file_path": "core/agent_coordination.py",
        "line_number": 69,
        "methods": [
          "update_metrics"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import Skill",
          "export": "__all__.append('Skill')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskAnnouncement",
        "type": "dataclass",
        "file_path": "core/agent_coordination.py",
        "line_number": 93,
        "methods": [
          "is_expired"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import TaskAnnouncement",
          "export": "__all__.append('TaskAnnouncement')"
        }
      ]
    },
    {
      "entity": {
        "name": "SkillOffer",
        "type": "dataclass",
        "file_path": "core/agent_coordination.py",
        "line_number": 114,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import SkillOffer",
          "export": "__all__.append('SkillOffer')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkingGroup",
        "type": "dataclass",
        "file_path": "core/agent_coordination.py",
        "line_number": 126,
        "methods": [
          "add_member",
          "all_skills_covered"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import WorkingGroup",
          "export": "__all__.append('WorkingGroup')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoordinationProtocol",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 152,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import CoordinationProtocol",
          "export": "__all__.append('CoordinationProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "SkillRegistry",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 179,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import SkillRegistry",
          "export": "__all__.append('SkillRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoordinationHub",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 226,
        "methods": [
          "__init__",
          "_register_handlers"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import CoordinationHub",
          "export": "__all__.append('CoordinationHub')"
        }
      ]
    },
    {
      "entity": {
        "name": "AutonomousAgent",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 538,
        "methods": [
          "__init__",
          "_register_coordination_handlers",
          "get_ref",
          "_estimate_task_time"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import AutonomousAgent",
          "export": "__all__.append('AutonomousAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataProcessorAgent",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 725,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import DataProcessorAgent",
          "export": "__all__.append('DataProcessorAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnalyticsAgent",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 776,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import AnalyticsAgent",
          "export": "__all__.append('AnalyticsAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "MLModelAgent",
        "type": "class",
        "file_path": "core/agent_coordination.py",
        "line_number": 789,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .agent_coordination import MLModelAgent",
          "export": "__all__.append('MLModelAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleIntegrationExamples",
        "type": "class",
        "file_path": "core/identity_integration.py",
        "line_number": 300,
        "methods": [
          "memory_operation_example",
          "dream_generation_example",
          "quantum_operation_example",
          "context_manager_example"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .identity_integration import ModuleIntegrationExamples",
          "export": "__all__.append('ModuleIntegrationExamples')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProxyInitializationError",
        "type": "class",
        "file_path": "core/tier_aware_colony_proxy.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_colony_proxy import ProxyInitializationError",
          "export": "__all__.append('ProxyInitializationError')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyNotFoundError",
        "type": "class",
        "file_path": "core/tier_aware_colony_proxy.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_colony_proxy import ColonyNotFoundError",
          "export": "__all__.append('ColonyNotFoundError')"
        }
      ]
    },
    {
      "entity": {
        "name": "PeerStatus",
        "type": "class",
        "file_path": "core/p2p_communication.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .p2p_communication import PeerStatus",
          "export": "__all__.append('PeerStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "PeerInfo",
        "type": "dataclass",
        "file_path": "core/p2p_communication.py",
        "line_number": 55,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .p2p_communication import PeerInfo",
          "export": "__all__.append('PeerInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "GovernanceLayer",
        "type": "class",
        "file_path": "core/governance.py",
        "line_number": 10,
        "methods": [
          "__init__",
          "add_rule",
          "validate_action"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .governance import GovernanceLayer",
          "export": "__all__.append('GovernanceLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "Observatory",
        "type": "class",
        "file_path": "core/observatory.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "get_decision_trail",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/__init__.py",
          "action": "add_export",
          "code": "from .observatory import Observatory",
          "export": "__all__.append('Observatory')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAgent",
        "type": "class",
        "file_path": "core/colonies/memory_colony_enhanced.py",
        "line_number": 22,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .memory_colony_enhanced import MemoryAgent",
          "export": "__all__.append('MemoryAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleResponse",
        "type": "dataclass",
        "file_path": "core/colonies/oracle_colony.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .oracle_colony import OracleResponse",
          "export": "__all__.append('OracleResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleAgent",
        "type": "class",
        "file_path": "core/colonies/oracle_colony.py",
        "line_number": 68,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .oracle_colony import OracleAgent",
          "export": "__all__.append('OracleAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsAgent",
        "type": "class",
        "file_path": "core/colonies/governance_colony_enhanced.py",
        "line_number": 23,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .governance_colony_enhanced import EthicsAgent",
          "export": "__all__.append('EthicsAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalAgent",
        "type": "dataclass",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import EthicalAgent",
          "export": "__all__.append('EthicalAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalScenario",
        "type": "dataclass",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import EthicalScenario",
          "export": "__all__.append('EthicalScenario')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimulationResult",
        "type": "dataclass",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 123,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import SimulationResult",
          "export": "__all__.append('SimulationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockCollapseTracker",
        "type": "class",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 1172,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import MockCollapseTracker",
          "export": "__all__.append('MockCollapseTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockVeriFoldConnector",
        "type": "class",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 1176,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import MockVeriFoldConnector",
          "export": "__all__.append('MockVeriFoldConnector')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockDriftMonitor",
        "type": "class",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 1180,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import MockDriftMonitor",
          "export": "__all__.append('MockDriftMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "BasicEthicalSimulator",
        "type": "class",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 1187,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import BasicEthicalSimulator",
          "export": "__all__.append('BasicEthicalSimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalSimulationEngine",
        "type": "class",
        "file_path": "core/colonies/ethics_swarm_colony.py",
        "line_number": 1201,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .ethics_swarm_colony import EthicalSimulationEngine",
          "export": "__all__.append('EthicalSimulationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "BridgeTokenMap",
        "type": "class",
        "file_path": "core/symbolic_bridge/token_map.py",
        "line_number": 10,
        "methods": [
          "__init__",
          "add_mapping",
          "get_mapping",
          "get_schema"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/symbolic_bridge/__init__.py",
          "action": "add_export",
          "code": "from .token_map import BridgeTokenMap",
          "export": "__all__.append('BridgeTokenMap')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicBridgeIntegrator",
        "type": "class",
        "file_path": "core/symbolic_bridge/integrator.py",
        "line_number": 10,
        "methods": [
          "__init__",
          "route_symbolic_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/symbolic_bridge/__init__.py",
          "action": "add_export",
          "code": "from .integrator import SymbolicBridgeIntegrator",
          "export": "__all__.append('SymbolicBridgeIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityMapper",
        "type": "class",
        "file_path": "core/identity/mapper.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/identity/__init__.py",
          "action": "add_export",
          "code": "from .mapper import IdentityMapper",
          "export": "__all__.append('IdentityMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityProcessor",
        "type": "class",
        "file_path": "core/identity/processor.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/identity/__init__.py",
          "action": "add_export",
          "code": "from .processor import IdentityProcessor",
          "export": "__all__.append('IdentityProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonaEngine",
        "type": "class",
        "file_path": "core/identity/persona_engine.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/identity/__init__.py",
          "action": "add_export",
          "code": "from .persona_engine import PersonaEngine",
          "export": "__all__.append('PersonaEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicIdentityHash",
        "type": "class",
        "file_path": "core/identity/manager.py",
        "line_number": 157,
        "methods": [
          "__init__",
          "create_hash",
          "store_hash",
          "verify",
          "_calculate_hash_similarity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/identity/__init__.py",
          "action": "add_export",
          "code": "from .manager import SymbolicIdentityHash",
          "export": "__all__.append('SymbolicIdentityHash')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedIdentityManager",
        "type": "class",
        "file_path": "core/identity/manager.py",
        "line_number": 353,
        "methods": [
          "__init__",
          "authenticate",
          "register_user",
          "update",
          "apply_trauma_lock",
          "_log_identity_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/identity/__init__.py",
          "action": "add_export",
          "code": "from .manager import AdvancedIdentityManager",
          "export": "__all__.append('AdvancedIdentityManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('advancedidentitymanager', AdvancedIdentityManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentInfo",
        "type": "dataclass",
        "file_path": "core/spine/integration_orchestrator.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/spine/__init__.py",
          "action": "add_export",
          "code": "from .integration_orchestrator import ComponentInfo",
          "export": "__all__.append('ComponentInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationPlan",
        "type": "dataclass",
        "file_path": "core/spine/integration_orchestrator.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/spine/__init__.py",
          "action": "add_export",
          "code": "from .integration_orchestrator import IntegrationPlan",
          "export": "__all__.append('IntegrationPlan')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIntegrationOrchestrator",
        "type": "class",
        "file_path": "core/spine/integration_orchestrator.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "_scan_directory",
          "_detect_duplications",
          "_similarity_check",
          "_count_fragmented_dirs",
          "_calculate_complexity",
          "_find_candidates_by_pattern",
          "_create_component_infos",
          "_calculate_priority"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/spine/__init__.py",
          "action": "add_export",
          "code": "from .integration_orchestrator import LukhasIntegrationOrchestrator",
          "export": "__all__.append('LukhasIntegrationOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractionContext",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import InteractionContext",
          "export": "__all__.append('InteractionContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalStyle",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import CulturalStyle",
          "export": "__all__.append('CulturalStyle')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractionMetrics",
        "type": "dataclass",
        "file_path": "core/personality/personality.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import InteractionMetrics",
          "export": "__all__.append('InteractionMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ShynessModule",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 82,
        "methods": [
          "__init__",
          "update_shyness",
          "get_interaction_style"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import ShynessModule",
          "export": "__all__.append('ShynessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EtiquetteEngine",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 173,
        "methods": [
          "__init__",
          "_initialize_context_rules",
          "set_cultural_preference",
          "get_etiquette_adjustments"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import EtiquetteEngine",
          "export": "__all__.append('EtiquetteEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonalityManager",
        "type": "class",
        "file_path": "core/personality/personality.py",
        "line_number": 252,
        "methods": [
          "__init__",
          "get_personality_profile",
          "update_from_interaction",
          "set_mood",
          "set_energy_level",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .personality import PersonalityManager",
          "export": "__all__.append('PersonalityManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('personalitymanager', PersonalityManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAGI",
        "type": "class",
        "file_path": "core/personality/creative_personality.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "unified_processing",
          "_select_models",
          "_multimodal_fusion",
          "_generate_output",
          "_attention_fusion",
          "_update_metrics",
          "_federated_update",
          "federated_lifecycle",
          "adaptive_learning_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality import LucasAGI",
          "export": "__all__.append('LucasAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "core/personality/creative_personality.py",
        "line_number": 203,
        "methods": [
          "contribute_gradients"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaDoodler",
        "type": "class",
        "file_path": "core/personality/creative_personality.py",
        "line_number": 212,
        "methods": [
          "meta_draw"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality import MetaDoodler",
          "export": "__all__.append('MetaDoodler')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalProtestModule",
        "type": "class",
        "file_path": "core/personality/creative_personality.py",
        "line_number": 215,
        "methods": [
          "plan_protest"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality import EthicalProtestModule",
          "export": "__all__.append('EthicalProtestModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HarmonyEngine",
        "type": "class",
        "file_path": "core/personality/creative_personality.py",
        "line_number": 221,
        "methods": [
          "early_fusion",
          "synthesize_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality import HarmonyEngine",
          "export": "__all__.append('HarmonyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAGI",
        "type": "class",
        "file_path": "core/personality/creative_personality_clean.py",
        "line_number": 48,
        "methods": [
          "__init__",
          "unified_processing",
          "_select_models",
          "_multimodal_fusion",
          "_generate_output",
          "_attention_fusion",
          "_update_metrics",
          "_federated_update",
          "federated_lifecycle",
          "adaptive_learning_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality_clean import LucasAGI",
          "export": "__all__.append('LucasAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "core/personality/creative_personality_clean.py",
        "line_number": 210,
        "methods": [
          "contribute_gradients"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality_clean import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaDoodler",
        "type": "class",
        "file_path": "core/personality/creative_personality_clean.py",
        "line_number": 219,
        "methods": [
          "meta_draw"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality_clean import MetaDoodler",
          "export": "__all__.append('MetaDoodler')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalProtestModule",
        "type": "class",
        "file_path": "core/personality/creative_personality_clean.py",
        "line_number": 222,
        "methods": [
          "plan_protest"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality_clean import EthicalProtestModule",
          "export": "__all__.append('EthicalProtestModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HarmonyEngine",
        "type": "class",
        "file_path": "core/personality/creative_personality_clean.py",
        "line_number": 228,
        "methods": [
          "early_fusion",
          "synthesize_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/personality/__init__.py",
          "action": "add_export",
          "code": "from .creative_personality_clean import HarmonyEngine",
          "export": "__all__.append('HarmonyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorMetric",
        "type": "dataclass",
        "file_path": "core/observability/collector.py",
        "line_number": 10,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/observability/__init__.py",
          "action": "add_export",
          "code": "from .collector import ActorMetric",
          "export": "__all__.append('ActorMetric')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleIntrospector",
        "type": "class",
        "file_path": "core/introspection/introspector.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "analyze_module",
          "_process_special_tags",
          "_analyze_ast",
          "_get_decorator_name",
          "_get_base_name",
          "report_symbolic_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/introspection/__init__.py",
          "action": "add_export",
          "code": "from .introspector import ModuleIntrospector",
          "export": "__all__.append('ModuleIntrospector')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyPrinciple",
        "type": "dataclass",
        "file_path": "core/safety/constitutional_safety.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_safety import SafetyPrinciple",
          "export": "__all__.append('SafetyPrinciple')"
        }
      ]
    },
    {
      "entity": {
        "name": "PreventiveIntervention",
        "type": "dataclass",
        "file_path": "core/safety/predictive_harm_prevention.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .predictive_harm_prevention import PreventiveIntervention",
          "export": "__all__.append('PreventiveIntervention')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimulatedFuture",
        "type": "dataclass",
        "file_path": "core/safety/predictive_harm_prevention.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .predictive_harm_prevention import SimulatedFuture",
          "export": "__all__.append('SimulatedFuture')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentVote",
        "type": "dataclass",
        "file_path": "core/safety/multi_agent_consensus.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .multi_agent_consensus import AgentVote",
          "export": "__all__.append('AgentVote')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyAgent",
        "type": "class",
        "file_path": "core/safety/multi_agent_consensus.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "_initialize_role_prompts",
          "_heuristic_evaluation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .multi_agent_consensus import SafetyAgent",
          "export": "__all__.append('SafetyAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyMode",
        "type": "class",
        "file_path": "core/safety/ai_safety_orchestrator.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .ai_safety_orchestrator import SafetyMode",
          "export": "__all__.append('SafetyMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyDecision",
        "type": "dataclass",
        "file_path": "core/safety/ai_safety_orchestrator.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .ai_safety_orchestrator import SafetyDecision",
          "export": "__all__.append('SafetyDecision')"
        }
      ]
    },
    {
      "entity": {
        "name": "AISafetyOrchestrator",
        "type": "class",
        "file_path": "core/safety/ai_safety_orchestrator.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "_requires_consensus",
          "_extract_user_state",
          "_heuristic_synthesis",
          "_update_safety_metrics",
          "_calculate_decision_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/safety/__init__.py",
          "action": "add_export",
          "code": "from .ai_safety_orchestrator import AISafetyOrchestrator",
          "export": "__all__.append('AISafetyOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamInjectionMode",
        "type": "class",
        "file_path": "core/integrations/nias_dream_bridge.py",
        "line_number": 21,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .nias_dream_bridge import DreamInjectionMode",
          "export": "__all__.append('DreamInjectionMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMessage",
        "type": "dataclass",
        "file_path": "core/integrations/nias_dream_bridge.py",
        "line_number": 30,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .nias_dream_bridge import DreamMessage",
          "export": "__all__.append('DreamMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "NIASDreamBridge",
        "type": "class",
        "file_path": "core/integrations/nias_dream_bridge.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "inject_components",
          "_get_poetic_response",
          "get_dream_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .nias_dream_bridge import NIASDreamBridge",
          "export": "__all__.append('NIASDreamBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyConstraintLevel",
        "type": "class",
        "file_path": "core/ethics/__init__.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ethics/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import SafetyConstraintLevel",
          "export": "__all__.append('SafetyConstraintLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalAnnotation",
        "type": "dataclass",
        "file_path": "core/ethics/dream_ethics_injector.py",
        "line_number": 68,
        "methods": [
          "risk_level"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ethics/__init__.py",
          "action": "add_export",
          "code": "from .dream_ethics_injector import EthicalAnnotation",
          "export": "__all__.append('EthicalAnnotation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEthicalAssessment",
        "type": "dataclass",
        "file_path": "core/ethics/dream_ethics_injector.py",
        "line_number": 90,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ethics/__init__.py",
          "action": "add_export",
          "code": "from .dream_ethics_injector import DreamEthicalAssessment",
          "export": "__all__.append('DreamEthicalAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEthicsInjector",
        "type": "class",
        "file_path": "core/ethics/dream_ethics_injector.py",
        "line_number": 129,
        "methods": [
          "__init__",
          "_filter_narrative",
          "_generate_insights",
          "_generate_transformations",
          "get_safety_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ethics/__init__.py",
          "action": "add_export",
          "code": "from .dream_ethics_injector import DreamEthicsInjector",
          "export": "__all__.append('DreamEthicsInjector')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIOHTTPClientSessionPH",
        "type": "class",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import AIOHTTPClientSessionPH",
          "export": "__all__.append('AIOHTTPClientSessionPH')"
        }
      ]
    },
    {
      "entity": {
        "name": "MR",
        "type": "class",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import MR",
          "export": "__all__.append('MR')"
        }
      ]
    },
    {
      "entity": {
        "name": "AITask",
        "type": "dataclass",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import AITask",
          "export": "__all__.append('AITask')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIResponse",
        "type": "dataclass",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import AIResponse",
          "export": "__all__.append('AIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIIntegrationManager",
        "type": "class",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 67,
        "methods": [
          "__init__",
          "_load_ai_service_config",
          "use_github_copilot_cli",
          "_local_analysis_fallback",
          "_save_ai_task_response"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import AIIntegrationManager",
          "export": "__all__.append('AIIntegrationManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('aiintegrationmanager', AIIntegrationManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskTemplates",
        "type": "class",
        "file_path": "core/ai/integration_manager.py",
        "line_number": 204,
        "methods": [
          "code_analysis"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/ai/__init__.py",
          "action": "add_export",
          "code": "from .integration_manager import TaskTemplates",
          "export": "__all__.append('TaskTemplates')"
        }
      ]
    },
    {
      "entity": {
        "name": "SequentialCounterActor",
        "type": "class",
        "file_path": "core/examples/mailbox_demo.py",
        "line_number": 23,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/examples/__init__.py",
          "action": "add_export",
          "code": "from .mailbox_demo import SequentialCounterActor",
          "export": "__all__.append('SequentialCounterActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "PriorityTaskActor",
        "type": "class",
        "file_path": "core/examples/mailbox_demo.py",
        "line_number": 51,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/examples/__init__.py",
          "action": "add_export",
          "code": "from .mailbox_demo import PriorityTaskActor",
          "export": "__all__.append('PriorityTaskActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "BackPressureActor",
        "type": "class",
        "file_path": "core/examples/mailbox_demo.py",
        "line_number": 97,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/examples/__init__.py",
          "action": "add_export",
          "code": "from .mailbox_demo import BackPressureActor",
          "export": "__all__.append('BackPressureActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersistentStateActor",
        "type": "class",
        "file_path": "core/examples/mailbox_demo.py",
        "line_number": 132,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/examples/__init__.py",
          "action": "add_export",
          "code": "from .mailbox_demo import PersistentStateActor",
          "export": "__all__.append('PersistentStateActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicShellArchiver",
        "type": "class",
        "file_path": "core/symbolism/archiver.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "get_full_symbolic_state",
          "create_snapshot",
          "start",
          "stop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/symbolism/__init__.py",
          "action": "add_export",
          "code": "from .archiver import SymbolicShellArchiver",
          "export": "__all__.append('SymbolicShellArchiver')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldCollapseType",
        "type": "class",
        "file_path": "core/verifold/verifold_unified.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_unified import VeriFoldCollapseType",
          "export": "__all__.append('VeriFoldCollapseType')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldPhase",
        "type": "class",
        "file_path": "core/verifold/verifold_unified.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_unified import VeriFoldPhase",
          "export": "__all__.append('VeriFoldPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldSnapshot",
        "type": "dataclass",
        "file_path": "core/verifold/verifold_unified.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_unified import VeriFoldSnapshot",
          "export": "__all__.append('VeriFoldSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldRecord",
        "type": "dataclass",
        "file_path": "core/verifold/verifold_unified.py",
        "line_number": 115,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_unified import VeriFoldRecord",
          "export": "__all__.append('VeriFoldRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedVeriFoldSystem",
        "type": "class",
        "file_path": "core/verifold/verifold_unified.py",
        "line_number": 128,
        "methods": [
          "__init__",
          "generate_verifold_hash",
          "verify_verifold_record",
          "get_system_metrics",
          "_create_collapse_snapshot",
          "_compute_verifold_hash",
          "_sign_verifold_hash",
          "_verify_signature",
          "_calculate_entropy_score",
          "_determine_collapse_phase",
          "_monitor_system_entropy",
          "_analyze_tier_risks",
          "_get_tier_level",
          "_get_phase_distribution",
          "_get_tier_activity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_unified import UnifiedVeriFoldSystem",
          "export": "__all__.append('UnifiedVeriFoldSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyProfile",
        "type": "class",
        "file_path": "core/orchestration/energy_aware_execution_planner.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .energy_aware_execution_planner import EnergyProfile",
          "export": "__all__.append('EnergyProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyTask",
        "type": "dataclass",
        "file_path": "core/orchestration/energy_aware_execution_planner.py",
        "line_number": 87,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .energy_aware_execution_planner import EnergyTask",
          "export": "__all__.append('EnergyTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyBudget",
        "type": "dataclass",
        "file_path": "core/orchestration/energy_aware_execution_planner.py",
        "line_number": 110,
        "methods": [
          "get_usable_energy",
          "can_allocate"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .energy_aware_execution_planner import EnergyBudget",
          "export": "__all__.append('EnergyBudget')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnergyMetrics",
        "type": "dataclass",
        "file_path": "core/orchestration/energy_aware_execution_planner.py",
        "line_number": 132,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .energy_aware_execution_planner import EnergyMetrics",
          "export": "__all__.append('EnergyMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemediationType",
        "type": "class",
        "file_path": "core/meta_learning/remediator_agent.py",
        "line_number": 128,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .remediator_agent import RemediationType",
          "export": "__all__.append('RemediationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemediationEvent",
        "type": "dataclass",
        "file_path": "core/meta_learning/remediator_agent.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .remediator_agent import RemediationEvent",
          "export": "__all__.append('RemediationEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('remediationevent', RemediationEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementMode",
        "type": "class",
        "file_path": "core/meta_learning/enhancement_system.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_system import EnhancementMode",
          "export": "__all__.append('EnhancementMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemIntegrationStatus",
        "type": "dataclass",
        "file_path": "core/meta_learning/enhancement_system.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_system import SystemIntegrationStatus",
          "export": "__all__.append('SystemIntegrationStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseState",
        "type": "dataclass",
        "file_path": "core/monitoring/collapse_tracker.py",
        "line_number": 64,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .collapse_tracker import CollapseState",
          "export": "__all__.append('CollapseState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseIntegration",
        "type": "class",
        "file_path": "core/monitoring/collapse_integration.py",
        "line_number": 43,
        "methods": [
          "__init__",
          "update_entropy_from_components"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .collapse_integration import CollapseIntegration",
          "export": "__all__.append('CollapseIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftType",
        "type": "class",
        "file_path": "core/monitoring/drift_monitor.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitor import DriftType",
          "export": "__all__.append('DriftType')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedDriftScore",
        "type": "dataclass",
        "file_path": "core/monitoring/drift_monitor.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitor import UnifiedDriftScore",
          "export": "__all__.append('UnifiedDriftScore')"
        }
      ]
    },
    {
      "entity": {
        "name": "OptimizationResult",
        "type": "dataclass",
        "file_path": "core/performance/orchestrator.py",
        "line_number": 162,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/performance/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import OptimizationResult",
          "export": "__all__.append('OptimizationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "GoalManagementNode",
        "type": "class",
        "file_path": "core/infrastructure/node_collection.py",
        "line_number": 191,
        "methods": [
          "__init__",
          "create_goal",
          "update_progress",
          "get_active_goals",
          "get_goal"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/infrastructure/__init__.py",
          "action": "add_export",
          "code": "from .node_collection import GoalManagementNode",
          "export": "__all__.append('GoalManagementNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "DAOGovernanceNode",
        "type": "class",
        "file_path": "core/infrastructure/node_collection.py",
        "line_number": 253,
        "methods": [
          "__init__",
          "_initialize_council",
          "create_proposal",
          "vote",
          "_finalize_proposal"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/infrastructure/__init__.py",
          "action": "add_export",
          "code": "from .node_collection import DAOGovernanceNode",
          "export": "__all__.append('DAOGovernanceNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeRegistry",
        "type": "class",
        "file_path": "core/infrastructure/node_registry.py",
        "line_number": 32,
        "methods": [
          "__init__",
          "discover_nodes",
          "register_node_type",
          "create_node",
          "get_node",
          "send_message",
          "broadcast_message",
          "establish_relationship",
          "initialize_standard_nodes",
          "get_node_info",
          "execute_node",
          "_to_node_id"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/infrastructure/__init__.py",
          "action": "add_export",
          "code": "from .node_registry import NodeRegistry",
          "export": "__all__.append('NodeRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeManager",
        "type": "class",
        "file_path": "core/infrastructure/node_manager.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "_load_config",
          "register_node",
          "discover_nodes",
          "_is_node_file",
          "_load_node",
          "dispatch_message",
          "broadcast_to_nodes",
          "process_message",
          "handle_node_status_change",
          "_process_queued_messages"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/infrastructure/__init__.py",
          "action": "add_export",
          "code": "from .node_manager import NodeManager",
          "export": "__all__.append('NodeManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('nodemanager', NodeManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "NIASCore",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 45,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import NIASCore",
          "export": "__all__.append('NIASCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicMatcher",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 80,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import SymbolicMatcher",
          "export": "__all__.append('SymbolicMatcher')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentFilter",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 124,
        "methods": [
          "is_allowed"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import ConsentFilter",
          "export": "__all__.append('ConsentFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamRecorder",
        "type": "class",
        "file_path": "core/modules/nias/__init__.py",
        "line_number": 143,
        "methods": [
          "__init__",
          "get_pending_dreams"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import DreamRecorder",
          "export": "__all__.append('DreamRecorder')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityType",
        "type": "class",
        "file_path": "core/modules/nias/openai_adapter.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .openai_adapter import ModalityType",
          "export": "__all__.append('ModalityType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultimodalData",
        "type": "dataclass",
        "file_path": "core/modules/nias/openai_adapter.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .openai_adapter import MultimodalData",
          "export": "__all__.append('MultimodalData')"
        }
      ]
    },
    {
      "entity": {
        "name": "NIASOpenAIAdapter",
        "type": "class",
        "file_path": "core/modules/nias/openai_adapter.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "_calculate_context_receptivity",
          "_suggest_context_adaptations",
          "_serialize_behavior",
          "_predict_user_intent",
          "_build_preference_profile",
          "_basic_fusion",
          "_calculate_fusion_confidence",
          "_extract_attention_metrics",
          "_extract_emotional_indicators"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .openai_adapter import NIASOpenAIAdapter",
          "export": "__all__.append('NIASOpenAIAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamRecorder",
        "type": "class",
        "file_path": "core/modules/nias/dream_recorder.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "_setup_logger",
          "_generate_session_id",
          "record_dream_message",
          "_save_to_file",
          "get_recorded_dreams",
          "search_dreams",
          "get_dream_stats",
          "clear_dreams",
          "export_dreams"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/modules/nias/__init__.py",
          "action": "add_export",
          "code": "from .dream_recorder import DreamRecorder",
          "export": "__all__.append('DreamRecorder')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralArchitectureType",
        "type": "class",
        "file_path": "core/neural_architectures/neural_integrator.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/__init__.py",
          "action": "add_export",
          "code": "from .neural_integrator import NeuralArchitectureType",
          "export": "__all__.append('NeuralArchitectureType')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralPattern",
        "type": "dataclass",
        "file_path": "core/neural_architectures/neural_integrator.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/__init__.py",
          "action": "add_export",
          "code": "from .neural_integrator import NeuralPattern",
          "export": "__all__.append('NeuralPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveNeuralNetwork",
        "type": "class",
        "file_path": "core/neural_architectures/neural_integrator.py",
        "line_number": 102,
        "methods": [
          "__init__",
          "forward",
          "adapt_architecture",
          "_expand_architecture",
          "_optimize_architecture",
          "_rebuild_network"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/__init__.py",
          "action": "add_export",
          "code": "from .neural_integrator import AdaptiveNeuralNetwork",
          "export": "__all__.append('AdaptiveNeuralNetwork')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioCapabilityLevel",
        "type": "class",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBioCapabilityLevel",
          "export": "__all__.append('QuantumBioCapabilityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioResponse",
        "type": "dataclass",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBioResponse",
          "export": "__all__.append('QuantumBioResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumTunnelingEthics",
        "type": "class",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "quantum_ethical_arbitration",
          "_create_ethical_wavefunction",
          "_collapse_wavefunction",
          "_calculate_relevance",
          "_calculate_tunneling_probabilities",
          "_calculate_ethical_resonance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumTunnelingEthics",
          "export": "__all__.append('QuantumTunnelingEthics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtonMotiveProcessor",
        "type": "class",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 182,
        "methods": [
          "__init__",
          "create_attention_gradient",
          "synthesize_symbolic_atp",
          "_calculate_proton_concentration",
          "_generate_attention_flow",
          "_calculate_atp_potential",
          "_calculate_processing_cost"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import ProtonMotiveProcessor",
          "export": "__all__.append('ProtonMotiveProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaeTopologyManager",
        "type": "class",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 318,
        "methods": [
          "__init__",
          "optimize_cristae_topology",
          "_analyze_topology_efficiency",
          "_design_optimal_cristae",
          "_apply_cristae_transformation",
          "_apply_tubular_folding",
          "_apply_lamellar_folding",
          "_apply_hybrid_folding",
          "_calculate_atp_distribution",
          "_calculate_improvement"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import CristaeTopologyManager",
          "export": "__all__.append('CristaeTopologyManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('cristaetopologymanager', CristaeTopologyManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBiologicalAGI",
        "type": "class",
        "file_path": "core/neural_architectures/abas/abas_quantum_specialist.py",
        "line_number": 514,
        "methods": [
          "__init__",
          "_passes_ethical_arbitration",
          "_classify_processing_type",
          "_calculate_bio_confidence",
          "_calculate_quantum_coherence",
          "_generate_cellular_signature",
          "_update_biological_metrics",
          "_advance_capability_level",
          "get_biological_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/neural_architectures/abas/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBiologicalAGI",
          "export": "__all__.append('QuantumBiologicalAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymptomReporter",
        "type": "class",
        "file_path": "core/interaction/symptom_reporter.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "_get_comfort_phrase"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interaction/__init__.py",
          "action": "add_export",
          "code": "from .symptom_reporter import SymptomReporter",
          "export": "__all__.append('SymptomReporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "GeofenceRegion",
        "type": "dataclass",
        "file_path": "core/services/location/geofencing_manager.py",
        "line_number": 17,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/services/location/__init__.py",
          "action": "add_export",
          "code": "from .geofencing_manager import GeofenceRegion",
          "export": "__all__.append('GeofenceRegion')"
        }
      ]
    },
    {
      "entity": {
        "name": "GeofencingManager",
        "type": "class",
        "file_path": "core/services/location/geofencing_manager.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "_calculate_distance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/services/location/__init__.py",
          "action": "add_export",
          "code": "from .geofencing_manager import GeofencingManager",
          "export": "__all__.append('GeofencingManager')"
        },
        {
          "integration_point": "core_hub.py",
          "action": "register_service",
          "code": "self.register_service('geofencingmanager', GeofencingManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "LocationUpdate",
        "type": "dataclass",
        "file_path": "core/services/location/tracker.py",
        "line_number": 16,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/services/location/__init__.py",
          "action": "add_export",
          "code": "from .tracker import LocationUpdate",
          "export": "__all__.append('LocationUpdate')"
        }
      ]
    },
    {
      "entity": {
        "name": "LocationTracker",
        "type": "class",
        "file_path": "core/services/location/tracker.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "_should_update_location",
          "_calculate_distance",
          "add_update_callback",
          "remove_update_callback"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/services/location/__init__.py",
          "action": "add_export",
          "code": "from .tracker import LocationTracker",
          "export": "__all__.append('LocationTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "CustomLlm",
        "type": "class",
        "file_path": "core/interfaces/custom_llm.py",
        "line_number": 34,
        "methods": [
          "log_creation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .custom_llm import CustomLlm",
          "export": "__all__.append('CustomLlm')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsCheckable",
        "type": "class",
        "file_path": "core/interfaces/common_interfaces.py",
        "line_number": 8,
        "methods": [
          "get_ethical_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .common_interfaces import EthicsCheckable",
          "export": "__all__.append('EthicsCheckable')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAnalyzable",
        "type": "class",
        "file_path": "core/interfaces/common_interfaces.py",
        "line_number": 16,
        "methods": [
          "get_dream_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .common_interfaces import DreamAnalyzable",
          "export": "__all__.append('DreamAnalyzable')"
        }
      ]
    },
    {
      "entity": {
        "name": "Args",
        "type": "class",
        "file_path": "core/interfaces/ui/components/audio_exporter.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/ui/components/__init__.py",
          "action": "add_export",
          "code": "from .audio_exporter import Args",
          "export": "__all__.append('Args')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveUI",
        "type": "class",
        "file_path": "core/interfaces/ui/adaptive/ui_orchestrator.py",
        "line_number": 12,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/ui/adaptive/__init__.py",
          "action": "add_export",
          "code": "from .ui_orchestrator import AdaptiveUI",
          "export": "__all__.append('AdaptiveUI')"
        }
      ]
    },
    {
      "entity": {
        "name": "NLPEngine",
        "type": "class",
        "file_path": "core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "line_number": 7,
        "methods": [
          "analyze"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/voice/voice_emotional/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_modular_voice import NLPEngine",
          "export": "__all__.append('NLPEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LocationAnalyzer",
        "type": "class",
        "file_path": "core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "line_number": 18,
        "methods": [
          "analyze"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/voice/voice_emotional/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_modular_voice import LocationAnalyzer",
          "export": "__all__.append('LocationAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "TimeAnalyzer",
        "type": "class",
        "file_path": "core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "line_number": 23,
        "methods": [
          "analyze"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/voice/voice_emotional/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_modular_voice import TimeAnalyzer",
          "export": "__all__.append('TimeAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeviceAnalyzer",
        "type": "class",
        "file_path": "core/interfaces/voice/voice_emotional/context_aware_modular_voice.py",
        "line_number": 28,
        "methods": [
          "analyze"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "core/interfaces/voice/voice_emotional/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_modular_voice import DeviceAnalyzer",
          "export": "__all__.append('DeviceAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZKPValidationLevel",
        "type": "class",
        "file_path": "privacy/zkp_dream_validator.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "privacy/__init__.py",
          "action": "add_export",
          "code": "from .zkp_dream_validator import ZKPValidationLevel",
          "export": "__all__.append('ZKPValidationLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZKPValidationResult",
        "type": "dataclass",
        "file_path": "privacy/zkp_dream_validator.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "privacy/__init__.py",
          "action": "add_export",
          "code": "from .zkp_dream_validator import ZKPValidationResult",
          "export": "__all__.append('ZKPValidationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOpenAIAdapter",
        "type": "class",
        "file_path": "memory/openai_memory_adapter.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "_cosine_similarity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .openai_memory_adapter import MemoryOpenAIAdapter",
          "export": "__all__.append('MemoryOpenAIAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConscienceEntry",
        "type": "dataclass",
        "file_path": "memory/structural_conscience.py",
        "line_number": 90,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .structural_conscience import ConscienceEntry",
          "export": "__all__.append('ConscienceEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMemoryFold",
        "type": "class",
        "file_path": "memory/quantum_manager.py",
        "line_number": 112,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .quantum_manager import EnhancedMemoryFold",
          "export": "__all__.append('EnhancedMemoryFold')"
        }
      ]
    },
    {
      "entity": {
        "name": "EvolutionType",
        "type": "class",
        "file_path": "memory/evolution.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .evolution import EvolutionType",
          "export": "__all__.append('EvolutionType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EvolutionEvent",
        "type": "dataclass",
        "file_path": "memory/evolution.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .evolution import EvolutionEvent",
          "export": "__all__.append('EvolutionEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('evolutionevent', EvolutionEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEvolutionEngine",
        "type": "class",
        "file_path": "memory/evolution.py",
        "line_number": 81,
        "methods": [
          "__init__",
          "_setup_default_rules",
          "_consolidation_rule",
          "_adaptation_rule",
          "_strengthening_rule",
          "_decay_rule",
          "_integration_rule",
          "_extract_key_features",
          "_calculate_adaptive_features",
          "_find_integration_links",
          "evolve_memory",
          "get_evolution_history",
          "add_evolution_rule",
          "get_evolution_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .evolution import MemoryEvolutionEngine",
          "export": "__all__.append('MemoryEvolutionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "HybridMemoryItem",
        "type": "dataclass",
        "file_path": "memory/core.py",
        "line_number": 152,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .core import HybridMemoryItem",
          "export": "__all__.append('HybridMemoryItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "OptimizedVectorStorageLayer",
        "type": "class",
        "file_path": "memory/core.py",
        "line_number": 506,
        "methods": [
          "__init__",
          "add_vector",
          "get_memory_usage_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .core import OptimizedVectorStorageLayer",
          "export": "__all__.append('OptimizedVectorStorageLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedMemoryEntry",
        "type": "dataclass",
        "file_path": "memory/core.py",
        "line_number": 767,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .core import DistributedMemoryEntry",
          "export": "__all__.append('DistributedMemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeInfo",
        "type": "dataclass",
        "file_path": "memory/core.py",
        "line_number": 788,
        "methods": [
          "endpoint",
          "is_alive"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .core import NodeInfo",
          "export": "__all__.append('NodeInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusProtocol",
        "type": "class",
        "file_path": "memory/core.py",
        "line_number": 808,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .core import ConsensusProtocol",
          "export": "__all__.append('ConsensusProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionStrategy",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import CompressionStrategy",
          "export": "__all__.append('CompressionStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObject",
        "type": "dataclass",
        "file_path": "memory/memory_optimization.py",
        "line_number": 120,
        "methods": [
          "update_access",
          "age_seconds",
          "access_frequency"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import MemoryObject",
          "export": "__all__.append('MemoryObject')"
        }
      ]
    },
    {
      "entity": {
        "name": "ObjectPool",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 152,
        "methods": [
          "__init__",
          "acquire",
          "release",
          "clear",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import ObjectPool",
          "export": "__all__.append('ObjectPool')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressedStorage",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 204,
        "methods": [
          "__init__",
          "compress",
          "decompress",
          "select_strategy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import CompressedStorage",
          "export": "__all__.append('CompressedStorage')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOptimizer",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 434,
        "methods": [
          "__init__",
          "store",
          "retrieve",
          "acquire_pooled_object",
          "release_pooled_object",
          "_get_initial_tier",
          "register_optimization",
          "register_default_optimizations",
          "_get_memory_usage",
          "_trigger_optimization",
          "get_memory_stats",
          "create_memory_efficient_collection"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import MemoryOptimizer",
          "export": "__all__.append('MemoryOptimizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PooledWrapper",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 645,
        "methods": [
          "__init__",
          "__getattr__",
          "__del__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import PooledWrapper",
          "export": "__all__.append('PooledWrapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompactList",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 661,
        "methods": [
          "__init__",
          "append",
          "__getitem__",
          "__len__",
          "memory_usage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import CompactList",
          "export": "__all__.append('CompactList')"
        }
      ]
    },
    {
      "entity": {
        "name": "BloomFilter",
        "type": "class",
        "file_path": "memory/memory_optimization.py",
        "line_number": 702,
        "methods": [
          "__init__",
          "add",
          "contains",
          "_hash",
          "_optimal_size",
          "_optimal_hash_count",
          "memory_usage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_optimization import BloomFilter",
          "export": "__all__.append('BloomFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryHealthMetrics",
        "type": "dataclass",
        "file_path": "memory/dashboard.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .dashboard import MemoryHealthMetrics",
          "export": "__all__.append('MemoryHealthMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "CascadeBlockInfo",
        "type": "dataclass",
        "file_path": "memory/dashboard.py",
        "line_number": 101,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .dashboard import CascadeBlockInfo",
          "export": "__all__.append('CascadeBlockInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftEventSummary",
        "type": "dataclass",
        "file_path": "memory/dashboard.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .dashboard import DriftEventSummary",
          "export": "__all__.append('DriftEventSummary')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('drifteventsummary', DriftEventSummary())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryHealthDashboard",
        "type": "class",
        "file_path": "memory/dashboard.py",
        "line_number": 131,
        "methods": [
          "__init__",
          "get_memory_health_metrics",
          "list_active_cascade_blocks",
          "view_recent_drift_events",
          "get_dashboard_summary",
          "get_dream_integration_analytics",
          "_analyze_fold_integrity_log",
          "_analyze_compression_efficiency",
          "_analyze_dream_integration_metrics",
          "_calculate_system_stability",
          "_get_emotional_cascade_blocks",
          "_get_ethical_governance_blocks",
          "_get_compression_loop_blocks",
          "_analyze_drift_events_from_integrity_log",
          "_analyze_dream_induced_drifts",
          "_calculate_drift_trends",
          "_calculate_cascade_trends",
          "_get_system_performance_metrics",
          "_get_tier_usage_statistics",
          "_generate_system_recommendations",
          "_determine_system_status",
          "_determine_alert_level",
          "_is_cache_valid",
          "_cache_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .dashboard import MemoryHealthDashboard",
          "export": "__all__.append('MemoryHealthDashboard')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateEntry",
        "type": "dataclass",
        "file_path": "memory/distributed_state_manager.py",
        "line_number": 72,
        "methods": [
          "is_expired",
          "access"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .distributed_state_manager import StateEntry",
          "export": "__all__.append('StateEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateSnapshot",
        "type": "dataclass",
        "file_path": "memory/distributed_state_manager.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .distributed_state_manager import StateSnapshot",
          "export": "__all__.append('StateSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "EncryptionScheme",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 127,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import EncryptionScheme",
          "export": "__all__.append('EncryptionScheme')"
        }
      ]
    },
    {
      "entity": {
        "name": "PrivacyTechnique",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 137,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import PrivacyTechnique",
          "export": "__all__.append('PrivacyTechnique')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStandard",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 149,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import ComplianceStandard",
          "export": "__all__.append('ComplianceStandard')"
        }
      ]
    },
    {
      "entity": {
        "name": "PrivacyPolicy",
        "type": "dataclass",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 162,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import PrivacyPolicy",
          "export": "__all__.append('PrivacyPolicy')"
        }
      ]
    },
    {
      "entity": {
        "name": "EncryptedMemory",
        "type": "dataclass",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 201,
        "methods": [
          "update_access_tracking",
          "is_expired",
          "should_be_deleted"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import EncryptedMemory",
          "export": "__all__.append('EncryptedMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "EncryptionProvider",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 256,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import EncryptionProvider",
          "export": "__all__.append('EncryptionProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "AESGCMProvider",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 280,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import AESGCMProvider",
          "export": "__all__.append('AESGCMProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "FernetProvider",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 390,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import FernetProvider",
          "export": "__all__.append('FernetProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "DifferentialPrivacyProvider",
        "type": "class",
        "file_path": "memory/privacy_preserving_memory_vault.py",
        "line_number": 450,
        "methods": [
          "__init__",
          "add_noise",
          "add_gaussian_noise",
          "privatize_histogram"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .privacy_preserving_memory_vault import DifferentialPrivacyProvider",
          "export": "__all__.append('DifferentialPrivacyProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMemoryManager",
        "type": "class",
        "file_path": "memory/unified_memory_manager.py",
        "line_number": 590,
        "methods": [
          "__init__",
          "_create_symbolic_state",
          "_compute_data_hash",
          "_calculate_drift_vector",
          "_apply_drift_correction",
          "_apply_state_correction",
          "_record_drift_event",
          "_identify_common_drift_patterns",
          "_calculate_drift_trend",
          "_matches_drift_pattern",
          "_matches_criteria"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .unified_memory_manager import DriftMemoryManager",
          "export": "__all__.append('DriftMemoryManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('driftmemorymanager', DriftMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEntry",
        "type": "class",
        "file_path": "memory/basic.py",
        "line_number": 61,
        "methods": [
          "__init__",
          "access",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .basic import MemoryEntry",
          "export": "__all__.append('MemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryStore",
        "type": "class",
        "file_path": "memory/basic.py",
        "line_number": 99,
        "methods": [
          "store",
          "retrieve",
          "search",
          "list_all",
          "delete"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .basic import MemoryStore",
          "export": "__all__.append('MemoryStore')"
        }
      ]
    },
    {
      "entity": {
        "name": "InMemoryStore",
        "type": "class",
        "file_path": "memory/basic.py",
        "line_number": 128,
        "methods": [
          "__init__",
          "store",
          "retrieve",
          "search",
          "list_all",
          "delete",
          "clear",
          "size"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .basic import InMemoryStore",
          "export": "__all__.append('InMemoryStore')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphBinding",
        "type": "dataclass",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 107,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import GlyphBinding",
          "export": "__all__.append('GlyphBinding')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionType",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 129,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import CompressionType",
          "export": "__all__.append('CompressionType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphMemoryIndex",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 142,
        "methods": [
          "__init__",
          "bind_glyph_to_fold",
          "get_folds_by_glyph",
          "get_glyphs_by_fold",
          "calculate_glyph_affinity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import GlyphMemoryIndex",
          "export": "__all__.append('GlyphMemoryIndex')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalFoldingEngine",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 270,
        "methods": [
          "__init__",
          "identify_foldable_memories",
          "fold_memory_group",
          "_calculate_emotion_delta",
          "_consolidate_memories",
          "_abstract_memories",
          "_synthesize_memories",
          "_track_fold_lineage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import EmotionalFoldingEngine",
          "export": "__all__.append('EmotionalFoldingEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphAffectCoupler",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 494,
        "methods": [
          "__init__",
          "_initialize_glyph_affects",
          "couple_glyph_with_memory",
          "retrieve_by_glyph_affect"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import GlyphAffectCoupler",
          "export": "__all__.append('GlyphAffectCoupler')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMemoryBridge",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 640,
        "methods": [
          "__init__",
          "process_dream_state",
          "get_dream_glyph_landscape"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import DreamMemoryBridge",
          "export": "__all__.append('DreamMemoryBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphMemorySystem",
        "type": "class",
        "file_path": "memory/glyph_memory_integration.py",
        "line_number": 769,
        "methods": [
          "__init__",
          "create_glyph_indexed_memory",
          "recall_by_glyph_pattern",
          "perform_temporal_folding",
          "get_memory_glyph_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_integration import GlyphMemorySystem",
          "export": "__all__.append('GlyphMemorySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMemoryManager",
        "type": "class",
        "file_path": "memory/drift_memory_manager.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "_create_symbolic_state",
          "_compute_data_hash",
          "_calculate_drift_vector",
          "_apply_drift_correction",
          "_apply_state_correction",
          "_record_drift_event",
          "_identify_common_drift_patterns",
          "_calculate_drift_trend",
          "_matches_drift_pattern",
          "_matches_criteria"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .drift_memory_manager import DriftMemoryManager",
          "export": "__all__.append('DriftMemoryManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('driftmemorymanager', DriftMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "FoldEntropyVisualizer",
        "type": "class",
        "file_path": "memory/fold_entropy_visualizer.py",
        "line_number": 13,
        "methods": [
          "render_mermaid_timeline",
          "render_ascii_chart"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .fold_entropy_visualizer import FoldEntropyVisualizer",
          "export": "__all__.append('FoldEntropyVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEmotionalMemoryManager",
        "type": "class",
        "file_path": "memory/emotional_memory_manager_unified.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "_check_memory_access",
          "_check_memory_ownership",
          "_track_user_memory",
          "_strip_symbolic_data",
          "_apply_tier_filtering",
          "_analyze_dominant_emotions",
          "_analyze_transitions",
          "_analyze_valence_trends",
          "_analyze_symbolic_patterns",
          "_apply_modulation_limits",
          "_log_emotional_modification"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .emotional_memory_manager_unified import UnifiedEmotionalMemoryManager",
          "export": "__all__.append('UnifiedEmotionalMemoryManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('unifiedemotionalmemorymanager', UnifiedEmotionalMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "LoopInfo",
        "type": "dataclass",
        "file_path": "memory/loop_monitor.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .loop_monitor import LoopInfo",
          "export": "__all__.append('LoopInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicLoopMonitor",
        "type": "class",
        "file_path": "memory/loop_monitor.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "register_loop",
          "report_entanglement",
          "report_corruption"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .loop_monitor import SymbolicLoopMonitor",
          "export": "__all__.append('SymbolicLoopMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorPriority",
        "type": "class",
        "file_path": "memory/lightweight_concurrency.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .lightweight_concurrency import ActorPriority",
          "export": "__all__.append('ActorPriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "ActorPool",
        "type": "class",
        "file_path": "memory/lightweight_concurrency.py",
        "line_number": 243,
        "methods": [
          "__init__",
          "release_actor"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .lightweight_concurrency import ActorPool",
          "export": "__all__.append('ActorPool')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreMemoriaConfig",
        "type": "dataclass",
        "file_path": "memory/memoria.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memoria import CoreMemoriaConfig",
          "export": "__all__.append('CoreMemoriaConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreMemoriaComponent",
        "type": "class",
        "file_path": "memory/memoria.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "record_consciousness_phase",
          "process_symbolic_trace",
          "get_last_consciousness_phase",
          "get_component_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .memoria import CoreMemoriaComponent",
          "export": "__all__.append('CoreMemoriaComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMemoryFold",
        "type": "class",
        "file_path": "memory/manager.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .manager import EnhancedMemoryFold",
          "export": "__all__.append('EnhancedMemoryFold')"
        }
      ]
    },
    {
      "entity": {
        "name": "Enhanced3DVisualizer",
        "type": "class",
        "file_path": "memory/visualizer.py",
        "line_number": 231,
        "methods": [
          "__init__",
          "launch_3d_viewer",
          "_prepare_3d_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/__init__.py",
          "action": "add_export",
          "code": "from .visualizer import Enhanced3DVisualizer",
          "export": "__all__.append('Enhanced3DVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicVaultScanner",
        "type": "class",
        "file_path": "memory/tools/lambda_vault_scan.py",
        "line_number": 83,
        "methods": [
          "__init__",
          "load_memory_snapshots",
          "_load_jsonl_file",
          "_load_json_file",
          "_load_vault_file",
          "_scan_python_file",
          "_process_memory_entry",
          "_process_text_vault",
          "_extract_symbols_from_text",
          "detect_stale_symbols",
          "detect_missing_links",
          "assess_vault_health",
          "_generate_health_recommendations",
          "export_vault_report",
          "_generate_markdown_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .lambda_vault_scan import SymbolicVaultScanner",
          "export": "__all__.append('SymbolicVaultScanner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryDriftAuditor",
        "type": "class",
        "file_path": "memory/tools/memory_drift_auditor.py",
        "line_number": 66,
        "methods": [
          "__init__",
          "_get_default_config",
          "load_memory_snapshots",
          "detect_memory_drift",
          "trace_collapse_events",
          "generate_audit_report",
          "visualize_memory_timeline",
          "_load_file_snapshots",
          "_validate_memory_snapshot",
          "_calculate_temporal_span",
          "_verify_chronological_order",
          "_filter_by_time_window",
          "_analyze_entropy_drift",
          "_calculate_snapshot_entropy",
          "_analyze_symbol_divergence",
          "_extract_symbolic_patterns",
          "_calculate_pattern_divergence",
          "_analyze_identity_drift",
          "_calculate_identity_change",
          "_analyze_temporal_patterns",
          "_generate_drift_events",
          "_detect_drift_anomalies",
          "_generate_drift_recommendations",
          "_detect_information_loss",
          "_calculate_information_content",
          "_detect_phase_gaps",
          "_detect_integrity_breaks",
          "_analyze_cascade_patterns",
          "_determine_memory_family",
          "_analyze_collapse_signatures",
          "_synthesize_collapse_events",
          "_build_forensic_timeline",
          "_extract_forensic_markers",
          "_assess_collapse_severity",
          "_identify_recovery_opportunities",
          "_compile_audit_data",
          "_get_temporal_span",
          "_get_memory_type_distribution",
          "_analyze_temporal_coverage",
          "_get_severity_distribution",
          "_get_event_type_distribution",
          "_get_temporal_distribution",
          "_assess_overall_health",
          "_generate_overall_recommendations",
          "_generate_summary_statistics",
          "_generate_markdown_report",
          "_build_markdown_content",
          "_generate_json_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .memory_drift_auditor import MemoryDriftAuditor",
          "export": "__all__.append('MemoryDriftAuditor')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEntryType",
        "type": "class",
        "file_path": "memory/tools/lambda_archive_inspector.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .lambda_archive_inspector import MemoryEntryType",
          "export": "__all__.append('MemoryEntryType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEntry",
        "type": "dataclass",
        "file_path": "memory/tools/lambda_archive_inspector.py",
        "line_number": 79,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .lambda_archive_inspector import MemoryEntry",
          "export": "__all__.append('MemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchiveReport",
        "type": "dataclass",
        "file_path": "memory/tools/lambda_archive_inspector.py",
        "line_number": 129,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .lambda_archive_inspector import ArchiveReport",
          "export": "__all__.append('ArchiveReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaArchiveInspector",
        "type": "class",
        "file_path": "memory/tools/lambda_archive_inspector.py",
        "line_number": 155,
        "methods": [
          "__init__",
          "scan_memory_vault",
          "detect_high_entropy_clusters",
          "detect_forgotten_symbols",
          "reconstruct_symbolic_linkage",
          "calculate_archive_score",
          "generate_archive_report",
          "_parse_memory_file",
          "_parse_jsonl_file",
          "_parse_json_file",
          "_parse_markdown_file",
          "_parse_text_file",
          "_create_memory_entry",
          "_classify_entry_type",
          "_extract_lambda_tags",
          "_extract_symbol_ids",
          "_extract_memory_ids",
          "_calculate_entry_entropy",
          "_calculate_emotional_weight",
          "_calculate_heuristic_entropy",
          "_normalize_tag_list",
          "_normalize_id_list",
          "_extract_timestamp_from_content",
          "_is_binary_file",
          "_cluster_entries_by_proximity",
          "_analyze_entropy_distribution",
          "_analyze_drift_patterns",
          "_generate_recommendations",
          "_generate_markdown_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/tools/__init__.py",
          "action": "add_export",
          "code": "from .lambda_archive_inspector import LambdaArchiveInspector",
          "export": "__all__.append('LambdaArchiveInspector')"
        }
      ]
    },
    {
      "entity": {
        "name": "EpisodicMemoryRecord",
        "type": "dataclass",
        "file_path": "memory/colonies/episodic_memory_colony.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/colonies/__init__.py",
          "action": "add_export",
          "code": "from .episodic_memory_colony import EpisodicMemoryRecord",
          "export": "__all__.append('EpisodicMemoryRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "EpisodicMemoryColony",
        "type": "class",
        "file_path": "memory/colonies/episodic_memory_colony.py",
        "line_number": 98,
        "methods": [
          "__init__",
          "_analyze_temporal_distinctiveness",
          "_analyze_spatial_distinctiveness",
          "_calculate_personal_significance",
          "_find_similar_episodes",
          "_apply_pattern_separation",
          "_update_episodic_indices",
          "_matches_query",
          "_text_matches"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/colonies/__init__.py",
          "action": "add_export",
          "code": "from .episodic_memory_colony import EpisodicMemoryColony",
          "export": "__all__.append('EpisodicMemoryColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyState",
        "type": "class",
        "file_path": "memory/colonies/base_memory_colony.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/colonies/__init__.py",
          "action": "add_export",
          "code": "from .base_memory_colony import ColonyState",
          "export": "__all__.append('ColonyState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyMetrics",
        "type": "dataclass",
        "file_path": "memory/colonies/base_memory_colony.py",
        "line_number": 112,
        "methods": [
          "calculate_health_score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/colonies/__init__.py",
          "action": "add_export",
          "code": "from .base_memory_colony import ColonyMetrics",
          "export": "__all__.append('ColonyMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationRequest",
        "type": "dataclass",
        "file_path": "memory/core/colony_memory_validator.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .colony_memory_validator import ValidationRequest",
          "export": "__all__.append('ValidationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyValidationResponse",
        "type": "dataclass",
        "file_path": "memory/core/colony_memory_validator.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .colony_memory_validator import ColonyValidationResponse",
          "export": "__all__.append('ColonyValidationResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusOutcome",
        "type": "dataclass",
        "file_path": "memory/core/colony_memory_validator.py",
        "line_number": 127,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .colony_memory_validator import ConsensusOutcome",
          "export": "__all__.append('ConsensusOutcome')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationState",
        "type": "class",
        "file_path": "memory/core/unified_memory_orchestrator.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .unified_memory_orchestrator import ConsolidationState",
          "export": "__all__.append('ConsolidationState')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryTrace",
        "type": "dataclass",
        "file_path": "memory/core/unified_memory_orchestrator.py",
        "line_number": 104,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .unified_memory_orchestrator import MemoryTrace",
          "export": "__all__.append('MemoryTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillationPattern",
        "type": "dataclass",
        "file_path": "memory/core/unified_memory_orchestrator.py",
        "line_number": 142,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .unified_memory_orchestrator import OscillationPattern",
          "export": "__all__.append('OscillationPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedMemoryOrchestrator",
        "type": "class",
        "file_path": "memory/core/unified_memory_orchestrator.py",
        "line_number": 151,
        "methods": [
          "__init__",
          "_initialize_lukhas_subsystems",
          "_register_memory_colonies",
          "_initialize_memory_subsystems",
          "_register_colonies_with_validator",
          "_start_background_tasks",
          "_generate_memory_id",
          "_calculate_encoding_strength",
          "_find_similar_memories",
          "_create_memory_metadata",
          "_select_validation_colonies",
          "_update_indices",
          "_search_working_memory",
          "get_memory_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/__init__.py",
          "action": "add_export",
          "code": "from .unified_memory_orchestrator import UnifiedMemoryOrchestrator",
          "export": "__all__.append('UnifiedMemoryOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryInterfaceRegistry",
        "type": "class",
        "file_path": "memory/core/interfaces/memory_interface.py",
        "line_number": 474,
        "methods": [
          "__init__",
          "register_interface",
          "register_factory",
          "get_interface",
          "list_available_types"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .memory_interface import MemoryInterfaceRegistry",
          "export": "__all__.append('MemoryInterfaceRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticRelationType",
        "type": "class",
        "file_path": "memory/core/interfaces/semantic_interface.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .semantic_interface import SemanticRelationType",
          "export": "__all__.append('SemanticRelationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticRelation",
        "type": "dataclass",
        "file_path": "memory/core/interfaces/semantic_interface.py",
        "line_number": 58,
        "methods": [
          "update_strength"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .semantic_interface import SemanticRelation",
          "export": "__all__.append('SemanticRelation')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConceptNode",
        "type": "dataclass",
        "file_path": "memory/core/interfaces/semantic_interface.py",
        "line_number": 78,
        "methods": [
          "activate",
          "co_activate_with"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .semantic_interface import ConceptNode",
          "export": "__all__.append('ConceptNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticMemoryContent",
        "type": "dataclass",
        "file_path": "memory/core/interfaces/semantic_interface.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/core/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .semantic_interface import SemanticMemoryContent",
          "export": "__all__.append('SemanticMemoryContent')"
        }
      ]
    },
    {
      "entity": {
        "name": "FoldingState",
        "type": "class",
        "file_path": "memory/proteome/symbolic_proteome.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/proteome/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_proteome import FoldingState",
          "export": "__all__.append('FoldingState')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryCodon",
        "type": "dataclass",
        "file_path": "memory/proteome/symbolic_proteome.py",
        "line_number": 116,
        "methods": [
          "from_memory_fragment"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/proteome/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_proteome import MemoryCodon",
          "export": "__all__.append('MemoryCodon')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProtein",
        "type": "dataclass",
        "file_path": "memory/proteome/symbolic_proteome.py",
        "line_number": 137,
        "methods": [
          "calculate_stability",
          "is_functional"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/proteome/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_proteome import MemoryProtein",
          "export": "__all__.append('MemoryProtein')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProteinComplex",
        "type": "dataclass",
        "file_path": "memory/proteome/symbolic_proteome.py",
        "line_number": 197,
        "methods": [
          "calculate_synergy"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/proteome/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_proteome import ProteinComplex",
          "export": "__all__.append('ProteinComplex')"
        }
      ]
    },
    {
      "entity": {
        "name": "MolecularChaperone",
        "type": "class",
        "file_path": "memory/proteome/symbolic_proteome.py",
        "line_number": 229,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/proteome/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_proteome import MolecularChaperone",
          "export": "__all__.append('MolecularChaperone')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThetaWave",
        "type": "dataclass",
        "file_path": "memory/hippocampal/theta_oscillator.py",
        "line_number": 37,
        "methods": [
          "phase_degrees"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .theta_oscillator import ThetaWave",
          "export": "__all__.append('ThetaWave')"
        }
      ]
    },
    {
      "entity": {
        "name": "PatternSeparator",
        "type": "class",
        "file_path": "memory/hippocampal/pattern_separator.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "separate",
          "separate_batch",
          "compute_separation_quality",
          "create_content_vector",
          "reset_competitive_weights",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .pattern_separator import PatternSeparator",
          "export": "__all__.append('PatternSeparator')"
        }
      ]
    },
    {
      "entity": {
        "name": "HippocampalState",
        "type": "class",
        "file_path": "memory/hippocampal/hippocampal_buffer.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .hippocampal_buffer import HippocampalState",
          "export": "__all__.append('HippocampalState')"
        }
      ]
    },
    {
      "entity": {
        "name": "PlaceField",
        "type": "class",
        "file_path": "memory/hippocampal/hippocampal_buffer.py",
        "line_number": 93,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .hippocampal_buffer import PlaceField",
          "export": "__all__.append('PlaceField')"
        }
      ]
    },
    {
      "entity": {
        "name": "PlaceCell",
        "type": "dataclass",
        "file_path": "memory/hippocampal/hippocampal_buffer.py",
        "line_number": 144,
        "methods": [
          "activation"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .hippocampal_buffer import PlaceCell",
          "export": "__all__.append('PlaceCell')"
        }
      ]
    },
    {
      "entity": {
        "name": "GridCell",
        "type": "dataclass",
        "file_path": "memory/hippocampal/hippocampal_buffer.py",
        "line_number": 157,
        "methods": [
          "activation"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/hippocampal/__init__.py",
          "action": "add_export",
          "code": "from .hippocampal_buffer import GridCell",
          "export": "__all__.append('GridCell')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryTraceHarmonizer",
        "type": "class",
        "file_path": "memory/convergence/memory_trace_harmonizer.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "harmonize_traces"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/convergence/__init__.py",
          "action": "add_export",
          "code": "from .memory_trace_harmonizer import MemoryTraceHarmonizer",
          "export": "__all__.append('MemoryTraceHarmonizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativityMemoryAdapter",
        "type": "class",
        "file_path": "memory/adapters/creativity_adapter.py",
        "line_number": 51,
        "methods": [
          "__init__",
          "get_emotional_modulator",
          "store_creative_memory",
          "retrieve_creative_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/adapters/__init__.py",
          "action": "add_export",
          "code": "from .creativity_adapter import CreativityMemoryAdapter",
          "export": "__all__.append('CreativityMemoryAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyMemoryStats",
        "type": "dataclass",
        "file_path": "memory/adapters/colony_memory_adapter.py",
        "line_number": 63,
        "methods": [
          "success_rate",
          "is_active"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/adapters/__init__.py",
          "action": "add_export",
          "code": "from .colony_memory_adapter import ColonyMemoryStats",
          "export": "__all__.append('ColonyMemoryStats')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdapterConfig",
        "type": "dataclass",
        "file_path": "memory/adapters/colony_memory_adapter.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/adapters/__init__.py",
          "action": "add_export",
          "code": "from .colony_memory_adapter import AdapterConfig",
          "export": "__all__.append('AdapterConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuarantineStatus",
        "type": "class",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import QuarantineStatus",
          "export": "__all__.append('QuarantineStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "RepairProtocolType",
        "type": "class",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import RepairProtocolType",
          "export": "__all__.append('RepairProtocolType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreatLevel",
        "type": "class",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import ThreatLevel",
          "export": "__all__.append('ThreatLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "RestoreViability",
        "type": "class",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import RestoreViability",
          "export": "__all__.append('RestoreViability')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuarantineEntry",
        "type": "dataclass",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 110,
        "methods": [
          "to_dict",
          "add_audit_entry"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import QuarantineEntry",
          "export": "__all__.append('QuarantineEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "RepairProtocol",
        "type": "dataclass",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 163,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import RepairProtocol",
          "export": "__all__.append('RepairProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "SanctumManifest",
        "type": "dataclass",
        "file_path": "memory/protection/symbolic_quarantine_sanctum.py",
        "line_number": 186,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/protection/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_quarantine_sanctum import SanctumManifest",
          "export": "__all__.append('SanctumManifest')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceMode",
        "type": "class",
        "file_path": "memory/resonance/resonant_memory_access.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/resonance/__init__.py",
          "action": "add_export",
          "code": "from .resonant_memory_access import ResonanceMode",
          "export": "__all__.append('ResonanceMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceSignature",
        "type": "dataclass",
        "file_path": "memory/resonance/resonant_memory_access.py",
        "line_number": 67,
        "methods": [
          "calculate_resonance_with"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/resonance/__init__.py",
          "action": "add_export",
          "code": "from .resonant_memory_access import ResonanceSignature",
          "export": "__all__.append('ResonanceSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonantCluster",
        "type": "dataclass",
        "file_path": "memory/resonance/resonant_memory_access.py",
        "line_number": 114,
        "methods": [
          "update_coherence"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/resonance/__init__.py",
          "action": "add_export",
          "code": "from .resonant_memory_access import ResonantCluster",
          "export": "__all__.append('ResonantCluster')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonantMemoryAccess",
        "type": "class",
        "file_path": "memory/resonance/resonant_memory_access.py",
        "line_number": 147,
        "methods": [
          "__init__",
          "register_memory",
          "_extract_fundamental_frequency",
          "_generate_harmonics",
          "_count_harmonic_matches",
          "_apply_mode_filter",
          "_is_in_coherent_cluster",
          "_update_resonance_network",
          "_check_cluster_formation",
          "get_resonance_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/resonance/__init__.py",
          "action": "add_export",
          "code": "from .resonant_memory_access import ResonantMemoryAccess",
          "export": "__all__.append('ResonantMemoryAccess')"
        }
      ]
    },
    {
      "entity": {
        "name": "StorageBackend",
        "type": "class",
        "file_path": "memory/persistence/orthogonal_persistence.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/persistence/__init__.py",
          "action": "add_export",
          "code": "from .orthogonal_persistence import StorageBackend",
          "export": "__all__.append('StorageBackend')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersistentMemory",
        "type": "dataclass",
        "file_path": "memory/persistence/orthogonal_persistence.py",
        "line_number": 118,
        "methods": [
          "to_bytes",
          "from_bytes"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/persistence/__init__.py",
          "action": "add_export",
          "code": "from .orthogonal_persistence import PersistentMemory",
          "export": "__all__.append('PersistentMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersistenceJournal",
        "type": "class",
        "file_path": "memory/persistence/orthogonal_persistence.py",
        "line_number": 168,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/persistence/__init__.py",
          "action": "add_export",
          "code": "from .orthogonal_persistence import PersistenceJournal",
          "export": "__all__.append('PersistenceJournal')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalSeverity",
        "type": "class",
        "file_path": "memory/governance/ethical_drift_governor.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/governance/__init__.py",
          "action": "add_export",
          "code": "from .ethical_drift_governor import EthicalSeverity",
          "export": "__all__.append('EthicalSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalConcern",
        "type": "dataclass",
        "file_path": "memory/governance/ethical_drift_governor.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/governance/__init__.py",
          "action": "add_export",
          "code": "from .ethical_drift_governor import EthicalConcern",
          "export": "__all__.append('EthicalConcern')"
        }
      ]
    },
    {
      "entity": {
        "name": "GovernanceRule",
        "type": "dataclass",
        "file_path": "memory/governance/ethical_drift_governor.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/governance/__init__.py",
          "action": "add_export",
          "code": "from .ethical_drift_governor import GovernanceRule",
          "export": "__all__.append('GovernanceRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HashAlgorithm",
        "type": "class",
        "file_path": "memory/integrity/collapse_hash.py",
        "line_number": 76,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/integrity/__init__.py",
          "action": "add_export",
          "code": "from .collapse_hash import HashAlgorithm",
          "export": "__all__.append('HashAlgorithm')"
        }
      ]
    },
    {
      "entity": {
        "name": "MerkleNode",
        "type": "dataclass",
        "file_path": "memory/integrity/collapse_hash.py",
        "line_number": 93,
        "methods": [
          "is_leaf",
          "compute_hash"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/integrity/__init__.py",
          "action": "add_export",
          "code": "from .collapse_hash import MerkleNode",
          "export": "__all__.append('MerkleNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "Checkpoint",
        "type": "dataclass",
        "file_path": "memory/integrity/collapse_hash.py",
        "line_number": 131,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/integrity/__init__.py",
          "action": "add_export",
          "code": "from .collapse_hash import Checkpoint",
          "export": "__all__.append('Checkpoint')"
        }
      ]
    },
    {
      "entity": {
        "name": "MerkleTree",
        "type": "class",
        "file_path": "memory/integrity/collapse_hash.py",
        "line_number": 153,
        "methods": [
          "__init__",
          "add_memory",
          "verify_memory",
          "generate_proof",
          "verify_proof",
          "get_root_hash",
          "_rebuild_tree",
          "_hash_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/integrity/__init__.py",
          "action": "add_export",
          "code": "from .collapse_hash import MerkleTree",
          "export": "__all__.append('MerkleTree')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayMode",
        "type": "class",
        "file_path": "memory/replay/replay_buffer.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/replay/__init__.py",
          "action": "add_export",
          "code": "from .replay_buffer import ReplayMode",
          "export": "__all__.append('ReplayMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceType",
        "type": "class",
        "file_path": "memory/replay/replay_buffer.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/replay/__init__.py",
          "action": "add_export",
          "code": "from .replay_buffer import ExperienceType",
          "export": "__all__.append('ExperienceType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayBatch",
        "type": "dataclass",
        "file_path": "memory/replay/replay_buffer.py",
        "line_number": 146,
        "methods": [
          "calculate_metrics"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/replay/__init__.py",
          "action": "add_export",
          "code": "from .replay_buffer import ReplayBatch",
          "export": "__all__.append('ReplayBatch')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayBuffer",
        "type": "class",
        "file_path": "memory/replay/replay_buffer.py",
        "line_number": 177,
        "methods": [
          "__init__",
          "add_experience",
          "add_episodic_memory",
          "add_semantic_memory",
          "sample_batch",
          "update_priorities",
          "get_experience",
          "find_similar_experiences",
          "_sample_prioritized",
          "_sample_uniform",
          "_sample_temporal",
          "_sample_curiosity",
          "_sample_semantic",
          "_calculate_importance_weights",
          "_extract_features",
          "_calculate_similarity",
          "_evict_oldest",
          "_rebuild_priority_tree",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/replay/__init__.py",
          "action": "add_export",
          "code": "from .replay_buffer import ReplayBuffer",
          "export": "__all__.append('ReplayBuffer')"
        }
      ]
    },
    {
      "entity": {
        "name": "NucleusState",
        "type": "class",
        "file_path": "memory/scaffold/atomic_memory_scaffold.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/scaffold/__init__.py",
          "action": "add_export",
          "code": "from .atomic_memory_scaffold import NucleusState",
          "export": "__all__.append('NucleusState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoilState",
        "type": "class",
        "file_path": "memory/scaffold/atomic_memory_scaffold.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/scaffold/__init__.py",
          "action": "add_export",
          "code": "from .atomic_memory_scaffold import CoilState",
          "export": "__all__.append('CoilState')"
        }
      ]
    },
    {
      "entity": {
        "name": "AtomicRule",
        "type": "dataclass",
        "file_path": "memory/scaffold/atomic_memory_scaffold.py",
        "line_number": 102,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/scaffold/__init__.py",
          "action": "add_export",
          "code": "from .atomic_memory_scaffold import AtomicRule",
          "export": "__all__.append('AtomicRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "AtomicNucleus",
        "type": "class",
        "file_path": "memory/scaffold/atomic_memory_scaffold.py",
        "line_number": 141,
        "methods": [
          "__init__",
          "add_rule",
          "seal_nucleus",
          "verify_integrity",
          "_generate_quantum_signature",
          "_update_integrity_chain"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/scaffold/__init__.py",
          "action": "add_export",
          "code": "from .atomic_memory_scaffold import AtomicNucleus",
          "export": "__all__.append('AtomicNucleus')"
        }
      ]
    },
    {
      "entity": {
        "name": "FlexibleCoilSystem",
        "type": "class",
        "file_path": "memory/scaffold/atomic_memory_scaffold.py",
        "line_number": 251,
        "methods": [
          "__init__",
          "create_coil",
          "assess_trauma_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/scaffold/__init__.py",
          "action": "add_export",
          "code": "from .atomic_memory_scaffold import FlexibleCoilSystem",
          "export": "__all__.append('FlexibleCoilSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayMode",
        "type": "class",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import ReplayMode",
          "export": "__all__.append('ReplayMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayDirection",
        "type": "class",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import ReplayDirection",
          "export": "__all__.append('ReplayDirection')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayQuality",
        "type": "class",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 86,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import ReplayQuality",
          "export": "__all__.append('ReplayQuality')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySnapshot",
        "type": "dataclass",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import MemorySnapshot",
          "export": "__all__.append('MemorySnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplaySequence",
        "type": "dataclass",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 106,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import ReplaySequence",
          "export": "__all__.append('ReplaySequence')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplaySession",
        "type": "dataclass",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 118,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import ReplaySession",
          "export": "__all__.append('ReplaySession')"
        }
      ]
    },
    {
      "entity": {
        "name": "TemporalIndex",
        "type": "class",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 130,
        "methods": [
          "__init__",
          "add_memory_timestamp",
          "get_memories_in_range",
          "get_causal_sequence",
          "find_temporal_neighbors"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import TemporalIndex",
          "export": "__all__.append('TemporalIndex')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryReplayer",
        "type": "class",
        "file_path": "memory/systems/replay_system.py",
        "line_number": 211,
        "methods": [
          "__init__",
          "create_replay_sequence",
          "start_replay_session",
          "get_next_memory",
          "seek_to_position",
          "find_memories_by_content",
          "create_associative_sequence",
          "get_session_status",
          "close_session",
          "get_system_status",
          "_create_memory_snapshots",
          "_order_snapshots",
          "_calculate_sequence_duration",
          "_calculate_coherence_score",
          "_cache_sequence",
          "_apply_filters"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .replay_system import MemoryReplayer",
          "export": "__all__.append('MemoryReplayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionLevel",
        "type": "class",
        "file_path": "memory/systems/hierarchical_data_store.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .hierarchical_data_store import CompressionLevel",
          "export": "__all__.append('CompressionLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "_Storage",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 113,
        "methods": [
          "__repr__",
          "__eq__",
          "__hash__"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import _Storage",
          "export": "__all__.append('_Storage')"
        }
      ]
    },
    {
      "entity": {
        "name": "SchemaMatcher",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 248,
        "methods": [
          "inputs_are_mutable",
          "match_schemas",
          "_types_match",
          "lookup_schemas"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import SchemaMatcher",
          "export": "__all__.append('SchemaMatcher')"
        }
      ]
    },
    {
      "entity": {
        "name": "OpTree",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 357,
        "methods": [
          "__init__",
          "dfs",
          "sorted_nodes"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import OpTree",
          "export": "__all__.append('OpTree')"
        }
      ]
    },
    {
      "entity": {
        "name": "SizeMap",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 370,
        "methods": [
          "__init__",
          "_update_values",
          "_flat_tensor_inputs",
          "__getitem__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import SizeMap",
          "export": "__all__.append('SizeMap')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataFlowEdge",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 438,
        "methods": [
          "is_allocation",
          "is_deletion"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import DataFlowEdge",
          "export": "__all__.append('DataFlowEdge')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataFlowNode",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 451,
        "methods": [
          "__init__",
          "_determine_edges",
          "inputs",
          "outputs",
          "intermediates",
          "start_time"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import DataFlowNode",
          "export": "__all__.append('DataFlowNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataFlowGraph",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 545,
        "methods": [
          "__init__",
          "flow_nodes",
          "validate",
          "leaf_events",
          "_extract_leaf_events",
          "lookup",
          "bump",
          "delete"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import DataFlowGraph",
          "export": "__all__.append('DataFlowGraph')"
        }
      ]
    },
    {
      "entity": {
        "name": "CategoryElement",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 652,
        "methods": [],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import CategoryElement",
          "export": "__all__.append('CategoryElement')"
        }
      ]
    },
    {
      "entity": {
        "name": "CategoryDict",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 663,
        "methods": [
          "set_by_id",
          "set_by_key",
          "set_by_version",
          "setdefault_by_version",
          "get"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import CategoryDict",
          "export": "__all__.append('CategoryDict')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProfile",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 694,
        "methods": [
          "__init__",
          "timeline",
          "_is_gradient",
          "_category_snapshot",
          "_any_version_depends_on_gradient",
          "_set_gradients_and_temporaries",
          "_set_parameters_using_python_tracer",
          "_set_inputs",
          "_set_parameters_using_data_flow",
          "_set_activations",
          "_set_optimizer_state",
          "_set_autograd_detail"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import MemoryProfile",
          "export": "__all__.append('MemoryProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProfileTimeline",
        "type": "class",
        "file_path": "memory/systems/memory_profiler.py",
        "line_number": 1019,
        "methods": [
          "__init__",
          "_coalesce_timeline",
          "export_memory_timeline",
          "export_memory_timeline_raw",
          "export_memory_timeline_html"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_profiler import MemoryProfileTimeline",
          "export": "__all__.append('MemoryProfileTimeline')"
        }
      ]
    },
    {
      "entity": {
        "name": "CacheUtils",
        "type": "class",
        "file_path": "memory/systems/in_memory_cache_storage_wrapper.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .in_memory_cache_storage_wrapper import CacheUtils",
          "export": "__all__.append('CacheUtils')"
        }
      ]
    },
    {
      "entity": {
        "name": "InMemoryCacheStorageWrapper",
        "type": "class",
        "file_path": "memory/systems/in_memory_cache_storage_wrapper.py",
        "line_number": 79,
        "methods": [
          "__init__",
          "ttl_seconds",
          "max_entries",
          "get",
          "set",
          "delete",
          "clear",
          "get_stats",
          "close",
          "_read_from_mem_cache",
          "_write_to_mem_cache",
          "_remove_from_mem_cache"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .in_memory_cache_storage_wrapper import InMemoryCacheStorageWrapper",
          "export": "__all__.append('InMemoryCacheStorageWrapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryDriftMirror",
        "type": "class",
        "file_path": "memory/systems/memory_drift_mirror.py",
        "line_number": 49,
        "methods": [
          "__init__",
          "analyze_drift",
          "_load_recent_drifts",
          "_classify_drift_sequence",
          "_store_classification",
          "_emit_warnings"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_drift_mirror import MemoryDriftMirror",
          "export": "__all__.append('MemoryDriftMirror')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicSnapshot",
        "type": "class",
        "file_path": "memory/systems/symbolic_snapshot.py",
        "line_number": 51,
        "methods": [
          "__init__",
          "create_snapshot"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_snapshot import SymbolicSnapshot",
          "export": "__all__.append('SymbolicSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafeMemoryFold",
        "type": "class",
        "file_path": "memory/systems/memory_safety_features.py",
        "line_number": 522,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_safety_features import SafeMemoryFold",
          "export": "__all__.append('SafeMemoryFold')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionConfig",
        "type": "dataclass",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import AttentionConfig",
          "export": "__all__.append('AttentionConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiHeadAttention",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 68,
        "methods": [
          "__init__",
          "_init_projections",
          "forward",
          "_reshape_for_heads",
          "_reshape_from_heads",
          "_softmax"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import MultiHeadAttention",
          "export": "__all__.append('MultiHeadAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "TemporalAttention",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 193,
        "methods": [
          "__init__",
          "compute_temporal_bias",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import TemporalAttention",
          "export": "__all__.append('TemporalAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "HierarchicalAttention",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 279,
        "methods": [
          "__init__",
          "create_hierarchical_representations",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import HierarchicalAttention",
          "export": "__all__.append('HierarchicalAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossModalAttention",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 385,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import CrossModalAttention",
          "export": "__all__.append('CrossModalAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAttentionOrchestrator",
        "type": "class",
        "file_path": "memory/systems/attention_memory_layer.py",
        "line_number": 470,
        "methods": [
          "__init__",
          "compute_memory_relevance",
          "_text_to_embedding",
          "explain_attention"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .attention_memory_layer import MemoryAttentionOrchestrator",
          "export": "__all__.append('MemoryAttentionOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveMemoryEngine",
        "type": "class",
        "file_path": "memory/systems/adaptive_memory_engine.py",
        "line_number": 74,
        "methods": [
          "__init__",
          "_calculate_fold_priority",
          "recall_signature"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_memory_engine import AdaptiveMemoryEngine",
          "export": "__all__.append('AdaptiveMemoryEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryLoopRebuilder",
        "type": "class",
        "file_path": "memory/systems/memory_loop_rebuilder.py",
        "line_number": 48,
        "methods": [
          "__init__",
          "rebuild_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_loop_rebuilder import MemoryLoopRebuilder",
          "export": "__all__.append('MemoryLoopRebuilder')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEvolution",
        "type": "class",
        "file_path": "memory/systems/memory_evolution.py",
        "line_number": 155,
        "methods": [
          "__init__",
          "create_document",
          "_update_semantic_relationships",
          "_find_semantic_relations",
          "_prune_semantic_cache",
          "update_document",
          "record_interaction",
          "get_document_history",
          "get_related_documents",
          "get_recommendations",
          "update_document_relationships",
          "get_document_effectiveness",
          "get_usage_patterns",
          "maintenance_cycle",
          "run_multi_cycle_recursion",
          "get_last_voice_synthesis"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_evolution import MemoryEvolution",
          "export": "__all__.append('MemoryEvolution')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityType",
        "type": "class",
        "file_path": "memory/systems/multimodal_memory_support.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .multimodal_memory_support import ModalityType",
          "export": "__all__.append('ModalityType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityMetadata",
        "type": "dataclass",
        "file_path": "memory/systems/multimodal_memory_support.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .multimodal_memory_support import ModalityMetadata",
          "export": "__all__.append('ModalityMetadata')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiModalMemoryData",
        "type": "dataclass",
        "file_path": "memory/systems/multimodal_memory_support.py",
        "line_number": 105,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .multimodal_memory_support import MultiModalMemoryData",
          "export": "__all__.append('MultiModalMemoryData')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiModalMemoryProcessor",
        "type": "class",
        "file_path": "memory/systems/multimodal_memory_support.py",
        "line_number": 458,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .multimodal_memory_support import MultiModalMemoryProcessor",
          "export": "__all__.append('MultiModalMemoryProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiModalMemoryItem",
        "type": "class",
        "file_path": "memory/systems/multimodal_memory_support.py",
        "line_number": 721,
        "methods": [
          "__init__",
          "get_content",
          "get_tags",
          "get_metadata",
          "get_embedding",
          "get_modality_data",
          "get_modality_embedding",
          "memory_usage",
          "memory_usage_kb"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .multimodal_memory_support import MultiModalMemoryItem",
          "export": "__all__.append('MultiModalMemoryItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphMemoryIndex",
        "type": "dataclass",
        "file_path": "memory/systems/glyph_memory_bridge.py",
        "line_number": 67,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_bridge import GlyphMemoryIndex",
          "export": "__all__.append('GlyphMemoryIndex')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphMemoryBridge",
        "type": "class",
        "file_path": "memory/systems/glyph_memory_bridge.py",
        "line_number": 79,
        "methods": [
          "__init__",
          "create_glyph_indexed_memory",
          "recall_by_glyph",
          "create_drift_anchor",
          "assess_memory_drift",
          "get_memory_by_causal_link",
          "create_retrieval_filter",
          "_emotion_to_vector",
          "_link_glyph_to_memory",
          "_find_glyphs_by_filters",
          "get_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .glyph_memory_bridge import GlyphMemoryBridge",
          "export": "__all__.append('GlyphMemoryBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalRelationType",
        "type": "class",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalRelationType",
          "export": "__all__.append('CausalRelationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalStrength",
        "type": "class",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalStrength",
          "export": "__all__.append('CausalStrength')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalEvidence",
        "type": "dataclass",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 83,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalEvidence",
          "export": "__all__.append('CausalEvidence')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalRelation",
        "type": "dataclass",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 104,
        "methods": [
          "add_evidence",
          "_update_strength",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalRelation",
          "export": "__all__.append('CausalRelation')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalChain",
        "type": "dataclass",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 165,
        "methods": [
          "get_chain_length",
          "get_total_delay",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalChain",
          "export": "__all__.append('CausalChain')"
        }
      ]
    },
    {
      "entity": {
        "name": "TemporalCausalAnalyzer",
        "type": "class",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 201,
        "methods": [
          "__init__",
          "_calculate_tag_overlap",
          "_calculate_temporal_strength",
          "_determine_relation_type"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import TemporalCausalAnalyzer",
          "export": "__all__.append('TemporalCausalAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalGraphBuilder",
        "type": "class",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 423,
        "methods": [
          "__init__",
          "add_memory",
          "add_causal_relation",
          "find_causal_paths",
          "get_causal_ancestors",
          "get_causal_descendants",
          "identify_causal_chains",
          "_create_causal_chain",
          "analyze_causal_structure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalGraphBuilder",
          "export": "__all__.append('CausalGraphBuilder')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalMemoryWrapper",
        "type": "class",
        "file_path": "memory/systems/causal_memory_chains.py",
        "line_number": 915,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_memory_chains import CausalMemoryWrapper",
          "export": "__all__.append('CausalMemoryWrapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtectionLevel",
        "type": "class",
        "file_path": "memory/systems/identity_lineage_bridge.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .identity_lineage_bridge import ProtectionLevel",
          "export": "__all__.append('ProtectionLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreatType",
        "type": "class",
        "file_path": "memory/systems/identity_lineage_bridge.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .identity_lineage_bridge import ThreatType",
          "export": "__all__.append('ThreatType')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityThreat",
        "type": "dataclass",
        "file_path": "memory/systems/identity_lineage_bridge.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .identity_lineage_bridge import IdentityThreat",
          "export": "__all__.append('IdentityThreat')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtectionAction",
        "type": "dataclass",
        "file_path": "memory/systems/identity_lineage_bridge.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .identity_lineage_bridge import ProtectionAction",
          "export": "__all__.append('ProtectionAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityLineageBridge",
        "type": "class",
        "file_path": "memory/systems/identity_lineage_bridge.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "validate_memory_operation",
          "protect_identity_anchor",
          "detect_collapse_trauma_threats",
          "create_recovery_protocol",
          "get_identity_protection_status",
          "_check_identity_module",
          "_analyze_operation_threats",
          "_evaluate_protection_response",
          "_apply_protection_measures",
          "_get_affected_anchors",
          "_generate_protection_recommendations",
          "_log_validation_result",
          "_store_threat",
          "_store_protection_action"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .identity_lineage_bridge import IdentityLineageBridge",
          "export": "__all__.append('IdentityLineageBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryResonanceAnalyzer",
        "type": "class",
        "file_path": "memory/systems/memory_resonance_analyzer.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "analyze_resonance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_resonance_analyzer import MemoryResonanceAnalyzer",
          "export": "__all__.append('MemoryResonanceAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "FrequencyFingerprint",
        "type": "dataclass",
        "file_path": "memory/systems/resonance_memory_retrieval.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .resonance_memory_retrieval import FrequencyFingerprint",
          "export": "__all__.append('FrequencyFingerprint')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonantMemory",
        "type": "dataclass",
        "file_path": "memory/systems/resonance_memory_retrieval.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .resonance_memory_retrieval import ResonantMemory",
          "export": "__all__.append('ResonantMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "FrequencyGenerator",
        "type": "class",
        "file_path": "memory/systems/resonance_memory_retrieval.py",
        "line_number": 52,
        "methods": [
          "emotional_state_to_frequency",
          "generate_frequency_fingerprint"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .resonance_memory_retrieval import FrequencyGenerator",
          "export": "__all__.append('FrequencyGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceCalculator",
        "type": "class",
        "file_path": "memory/systems/resonance_memory_retrieval.py",
        "line_number": 132,
        "methods": [
          "cosine_similarity",
          "frequency_resonance",
          "temporal_decay",
          "access_boost"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .resonance_memory_retrieval import ResonanceCalculator",
          "export": "__all__.append('ResonanceCalculator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceGate",
        "type": "class",
        "file_path": "memory/systems/resonance_memory_retrieval.py",
        "line_number": 211,
        "methods": [
          "__init__",
          "store_memory_with_frequency",
          "_evict_oldest_memory",
          "retrieve_by_resonance",
          "update_memory_resonance",
          "get_memory_by_id",
          "analyze_resonance_patterns",
          "get_system_health"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .resonance_memory_retrieval import ResonanceGate",
          "export": "__all__.append('ResonanceGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "InMemorySpanExporter",
        "type": "class",
        "file_path": "memory/systems/in_memory_span_exporter.py",
        "line_number": 39,
        "methods": [
          "__init__",
          "clear",
          "get_finished_spans",
          "export",
          "shutdown",
          "force_flush"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .in_memory_span_exporter import InMemorySpanExporter",
          "export": "__all__.append('InMemorySpanExporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedMemoryEntry",
        "type": "dataclass",
        "file_path": "memory/systems/distributed_memory_fold.py",
        "line_number": 87,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .distributed_memory_fold import DistributedMemoryEntry",
          "export": "__all__.append('DistributedMemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeInfo",
        "type": "dataclass",
        "file_path": "memory/systems/distributed_memory_fold.py",
        "line_number": 131,
        "methods": [
          "endpoint",
          "is_alive"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .distributed_memory_fold import NodeInfo",
          "export": "__all__.append('NodeInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusProtocol",
        "type": "class",
        "file_path": "memory/systems/distributed_memory_fold.py",
        "line_number": 152,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .distributed_memory_fold import ConsensusProtocol",
          "export": "__all__.append('ConsensusProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMemoryIntegration",
        "type": "class",
        "file_path": "memory/systems/integration_example.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "_extract_tags"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .integration_example import EnhancedMemoryIntegration",
          "export": "__all__.append('EnhancedMemoryIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedMemoryInterface",
        "type": "class",
        "file_path": "memory/systems/integration_example.py",
        "line_number": 154,
        "methods": [
          "__init__",
          "_auto_tag",
          "_analyze_tag_clusters",
          "_analyze_attention_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .integration_example import UnifiedMemoryInterface",
          "export": "__all__.append('UnifiedMemoryInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOperationType",
        "type": "class",
        "file_path": "memory/systems/memory_orchestrator.py",
        "line_number": 76,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemoryOperationType",
          "export": "__all__.append('MemoryOperationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySource",
        "type": "class",
        "file_path": "memory/systems/memory_orchestrator.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemorySource",
          "export": "__all__.append('MemorySource')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryRequest",
        "type": "dataclass",
        "file_path": "memory/systems/memory_orchestrator.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemoryRequest",
          "export": "__all__.append('MemoryRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIMemoryOrchestrator",
        "type": "class",
        "file_path": "memory/systems/memory_orchestrator.py",
        "line_number": 126,
        "methods": [
          "__init__",
          "_select_storage_tier",
          "_memory_type_to_hds_tier",
          "_priority_to_importance",
          "_calculate_recency_boost",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import AGIMemoryOrchestrator",
          "export": "__all__.append('AGIMemoryOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFile",
        "type": "class",
        "file_path": "memory/systems/memory_media_file_storage.py",
        "line_number": 78,
        "methods": [
          "content_size"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_media_file_storage import MemoryFile",
          "export": "__all__.append('MemoryFile')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryMediaFileStorage",
        "type": "class",
        "file_path": "memory/systems/memory_media_file_storage.py",
        "line_number": 91,
        "methods": [
          "__init__",
          "load_and_get_id",
          "get_file",
          "get_url",
          "delete_file",
          "_read_file",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_media_file_storage import MemoryMediaFileStorage",
          "export": "__all__.append('MemoryMediaFileStorage')"
        }
      ]
    },
    {
      "entity": {
        "name": "Enhanced3DVisualizer",
        "type": "class",
        "file_path": "memory/systems/memory_visualizer.py",
        "line_number": 143,
        "methods": [
          "__init__",
          "launch_3d_viewer",
          "_prepare_3d_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_visualizer import Enhanced3DVisualizer",
          "export": "__all__.append('Enhanced3DVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySessionStorage",
        "type": "class",
        "file_path": "memory/systems/memory_session_storage.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "get",
          "save",
          "delete",
          "list"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_session_storage import MemorySessionStorage",
          "export": "__all__.append('MemorySessionStorage')"
        }
      ]
    },
    {
      "entity": {
        "name": "LiveRange",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 33,
        "methods": [
          "contains",
          "join",
          "__len__"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import LiveRange",
          "export": "__all__.append('LiveRange')"
        }
      ]
    },
    {
      "entity": {
        "name": "LiveRanges",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "overlaps",
          "begin",
          "end",
          "__repr__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import LiveRanges",
          "export": "__all__.append('LiveRanges')"
        }
      ]
    },
    {
      "entity": {
        "name": "AllocationTreeNode",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 100,
        "methods": [
          "allocate",
          "get_live_ranges",
          "get_size_hint",
          "get_symbolic_size",
          "finalize",
          "is_empty"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import AllocationTreeNode",
          "export": "__all__.append('AllocationTreeNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySplitProtocol",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 212,
        "methods": [
          "_allocate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import MemorySplitProtocol",
          "export": "__all__.append('MemorySplitProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "ClearCacheOnAllocateMixin",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 220,
        "methods": [
          "allocate",
          "clear_cache"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import ClearCacheOnAllocateMixin",
          "export": "__all__.append('ClearCacheOnAllocateMixin')"
        }
      ]
    },
    {
      "entity": {
        "name": "TemporalSplit",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 239,
        "methods": [
          "_allocate",
          "get_live_ranges",
          "get_size_hint",
          "get_symbolic_size",
          "is_empty",
          "finalize"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import TemporalSplit",
          "export": "__all__.append('TemporalSplit')"
        }
      ]
    },
    {
      "entity": {
        "name": "SpatialSplit",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 320,
        "methods": [
          "create",
          "_allocate",
          "get_live_ranges",
          "get_size_hint",
          "get_symbolic_size",
          "finalize"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import SpatialSplit",
          "export": "__all__.append('SpatialSplit')"
        }
      ]
    },
    {
      "entity": {
        "name": "AllocationPool",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 366,
        "methods": [
          "allocate",
          "allocate_at_end",
          "finalize",
          "codegen_create",
          "codegen_destroy",
          "__eq__",
          "__hash__"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import AllocationPool",
          "export": "__all__.append('AllocationPool')"
        }
      ]
    },
    {
      "entity": {
        "name": "AllocationPools",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 446,
        "methods": [
          "get_pools",
          "allocate",
          "allocate_output",
          "finalize",
          "pprint"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import AllocationPools",
          "export": "__all__.append('AllocationPools')"
        }
      ]
    },
    {
      "entity": {
        "name": "BufferGroup",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 508,
        "methods": [
          "__init__",
          "update_usage",
          "sym_nbytes",
          "make_allocation",
          "__repr__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import BufferGroup",
          "export": "__all__.append('BufferGroup')"
        }
      ]
    },
    {
      "entity": {
        "name": "PoolMemoryPlanningLine",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 553,
        "methods": [
          "node"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import PoolMemoryPlanningLine",
          "export": "__all__.append('PoolMemoryPlanningLine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AllocFromPoolLine",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 565,
        "methods": [
          "codegen"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import AllocFromPoolLine",
          "export": "__all__.append('AllocFromPoolLine')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeallocFromPoolLine",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 595,
        "methods": [
          "codegen"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import DeallocFromPoolLine",
          "export": "__all__.append('DeallocFromPoolLine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryPlanner",
        "type": "class",
        "file_path": "memory/systems/memory_planning.py",
        "line_number": 607,
        "methods": [
          "plan",
          "drop_removed_buffers",
          "compute_buffer_groups",
          "convert_to_pool_lines",
          "compute_live_ranges",
          "allocate_groups",
          "mark_first_last_usage"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_planning import MemoryPlanner",
          "export": "__all__.append('MemoryPlanner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProcessor",
        "type": "class",
        "file_path": "memory/systems/memory_processing.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "store_interaction",
          "get_relevant_memories",
          "_calculate_importance",
          "update_memory_references",
          "get_emotional_summary",
          "export_memories",
          "import_memories",
          "cluster_memories",
          "get_memory_timeline"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_processing import MemoryProcessor",
          "export": "__all__.append('MemoryProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "InMemoryLogExporter",
        "type": "class",
        "file_path": "memory/systems/in_memory_log_exporter.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "clear",
          "get_finished_logs",
          "export",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .in_memory_log_exporter import InMemoryLogExporter",
          "export": "__all__.append('InMemoryLogExporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEntry",
        "type": "dataclass",
        "file_path": "memory/systems/core.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .core import MemoryEntry",
          "export": "__all__.append('MemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryConfig",
        "type": "dataclass",
        "file_path": "memory/systems/core.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .core import MemoryConfig",
          "export": "__all__.append('MemoryConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryHealth",
        "type": "dataclass",
        "file_path": "memory/systems/core.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .core import MemoryHealth",
          "export": "__all__.append('MemoryHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProcessor",
        "type": "class",
        "file_path": "memory/systems/processor.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .processor import MemoryProcessor",
          "export": "__all__.append('MemoryProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ChatGPTMemoryConfig",
        "type": "dataclass",
        "file_path": "memory/systems/chatgpt_memory_integrator_legacy.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .chatgpt_memory_integrator_legacy import ChatGPTMemoryConfig",
          "export": "__all__.append('ChatGPTMemoryConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ChatGPTMemoryIntegrator",
        "type": "class",
        "file_path": "memory/systems/chatgpt_memory_integrator_legacy.py",
        "line_number": 88,
        "methods": [
          "__init__",
          "_calculate_conversation_duration_seconds"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .chatgpt_memory_integrator_legacy import ChatGPTMemoryIntegrator",
          "export": "__all__.append('ChatGPTMemoryIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockGPTClient",
        "type": "class",
        "file_path": "memory/systems/chatgpt_memory_integrator_legacy.py",
        "line_number": 401,
        "methods": [
          "set_memory_manager",
          "set_cognitive_adapter"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .chatgpt_memory_integrator_legacy import MockGPTClient",
          "export": "__all__.append('MockGPTClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "OptimizedVectorStorageLayer",
        "type": "class",
        "file_path": "memory/systems/optimized_hybrid_memory_fold.py",
        "line_number": 54,
        "methods": [
          "__init__",
          "add_vector",
          "get_memory_usage_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .optimized_hybrid_memory_fold import OptimizedVectorStorageLayer",
          "export": "__all__.append('OptimizedVectorStorageLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProfileDispatchMode",
        "type": "class",
        "file_path": "memory/systems/memory_tracker.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "__torch_dispatch__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_tracker import MemoryProfileDispatchMode",
          "export": "__all__.append('MemoryProfileDispatchMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryTracker",
        "type": "class",
        "file_path": "memory/systems/memory_tracker.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "start_monitor",
          "stop",
          "summary",
          "show_traces",
          "save_stats",
          "load",
          "_create_pre_forward_hook",
          "_create_post_forward_hook",
          "_create_backward_hook",
          "_record_memory_stats",
          "_add_marker",
          "_clear_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_tracker import MemoryTracker",
          "export": "__all__.append('MemoryTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryTrace",
        "type": "dataclass",
        "file_path": "memory/systems/trace_injector.py",
        "line_number": 16,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .trace_injector import MemoryTrace",
          "export": "__all__.append('MemoryTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceInjector",
        "type": "class",
        "file_path": "memory/systems/trace_injector.py",
        "line_number": 32,
        "methods": [
          "__init__",
          "generate_trace_id",
          "inject_trace",
          "start_memory_operation",
          "end_memory_operation",
          "get_trace_chain",
          "get_active_traces",
          "export_traces",
          "_export_symbolic_format",
          "clear_traces"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .trace_injector import TraceInjector",
          "export": "__all__.append('TraceInjector')"
        }
      ]
    },
    {
      "entity": {
        "name": "LineageChain",
        "type": "dataclass",
        "file_path": "memory/systems/fold_lineage_tracker.py",
        "line_number": 121,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .fold_lineage_tracker import LineageChain",
          "export": "__all__.append('LineageChain')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntrospectionEngine",
        "type": "class",
        "file_path": "memory/systems/memory_introspection_engine.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "compute_fold_metrics",
          "snapshot_memory_state",
          "introspect"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_introspection_engine import MemoryIntrospectionEngine",
          "export": "__all__.append('MemoryIntrospectionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAssociativeMemoryBank",
        "type": "class",
        "file_path": "memory/systems/quantum_memory_architecture.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "_create_grover_oracle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .quantum_memory_architecture import QuantumAssociativeMemoryBank",
          "export": "__all__.append('QuantumAssociativeMemoryBank')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiheadAttention",
        "type": "class",
        "file_path": "memory/systems/hybrid_memory_fold.py",
        "line_number": 70,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .hybrid_memory_fold import MultiheadAttention",
          "export": "__all__.append('MultiheadAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "HybridMemoryItem",
        "type": "dataclass",
        "file_path": "memory/systems/hybrid_memory_fold.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .hybrid_memory_fold import HybridMemoryItem",
          "export": "__all__.append('HybridMemoryItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOrchestrator",
        "type": "class",
        "file_path": "memory/systems/orchestrator.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import MemoryOrchestrator",
          "export": "__all__.append('MemoryOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "PinMemoryCache",
        "type": "class",
        "file_path": "memory/systems/pin_memory_cache.py",
        "line_number": 7,
        "methods": [
          "__init__",
          "get",
          "remove",
          "__str__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .pin_memory_cache import PinMemoryCache",
          "export": "__all__.append('PinMemoryCache')"
        }
      ]
    },
    {
      "entity": {
        "name": "LKFPackError",
        "type": "class",
        "file_path": "memory/systems/foldin.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .foldin import LKFPackError",
          "export": "__all__.append('LKFPackError')"
        }
      ]
    },
    {
      "entity": {
        "name": "LKFPackVersionError",
        "type": "class",
        "file_path": "memory/systems/foldin.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .foldin import LKFPackVersionError",
          "export": "__all__.append('LKFPackVersionError')"
        }
      ]
    },
    {
      "entity": {
        "name": "LKFPackIntegrityError",
        "type": "class",
        "file_path": "memory/systems/foldin.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .foldin import LKFPackIntegrityError",
          "export": "__all__.append('LKFPackIntegrityError')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEntry",
        "type": "dataclass",
        "file_path": "memory/systems/simple_store.py",
        "line_number": 47,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .simple_store import MemoryEntry",
          "export": "__all__.append('MemoryEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryConfig",
        "type": "dataclass",
        "file_path": "memory/systems/simple_store.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .simple_store import MemoryConfig",
          "export": "__all__.append('MemoryConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedMemoryManager",
        "type": "class",
        "file_path": "memory/systems/simple_store.py",
        "line_number": 115,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .simple_store import UnifiedMemoryManager",
          "export": "__all__.append('UnifiedMemoryManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('unifiedmemorymanager', UnifiedMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySegment",
        "type": "dataclass",
        "file_path": "memory/systems/healix_memory_core.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .healix_memory_core import MemorySegment",
          "export": "__all__.append('MemorySegment')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecallHandler",
        "type": "class",
        "file_path": "memory/systems/recall_handler.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "recall_memory"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .recall_handler import RecallHandler",
          "export": "__all__.append('RecallHandler')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('recallhandler', RecallHandler())"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayStrategy",
        "type": "class",
        "file_path": "memory/systems/episodic_replay_buffer.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .episodic_replay_buffer import ReplayStrategy",
          "export": "__all__.append('ReplayStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationPhase",
        "type": "class",
        "file_path": "memory/systems/episodic_replay_buffer.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .episodic_replay_buffer import ConsolidationPhase",
          "export": "__all__.append('ConsolidationPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "PrioritizedReplayBuffer",
        "type": "class",
        "file_path": "memory/systems/episodic_replay_buffer.py",
        "line_number": 169,
        "methods": [
          "__init__",
          "add_experience",
          "sample_batch",
          "_sample_uniform_random",
          "_sample_priority_based",
          "_sample_consciousness_weighted",
          "_sample_surprise_based",
          "_sample_mixed_strategy",
          "_calculate_importance_weights",
          "_calculate_surprise_value",
          "_evict_oldest_memory",
          "update_priorities",
          "get_episode_trajectory",
          "consolidate_memories",
          "_strengthen_important_memories",
          "_integrate_related_memories",
          "_calculate_memory_similarity",
          "_extract_patterns",
          "get_replay_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .episodic_replay_buffer import PrioritizedReplayBuffer",
          "export": "__all__.append('PrioritizedReplayBuffer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamStateReplay",
        "type": "class",
        "file_path": "memory/systems/episodic_replay_buffer.py",
        "line_number": 700,
        "methods": [
          "__init__",
          "_analyze_memory_combinations",
          "_is_insightful_combination",
          "_calculate_state_similarity",
          "_calculate_insight_value",
          "_find_novel_combinations",
          "_is_novel_episode_combination",
          "_calculate_novelty_score",
          "_improve_memory_consolidation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .episodic_replay_buffer import DreamStateReplay",
          "export": "__all__.append('DreamStateReplay')"
        }
      ]
    },
    {
      "entity": {
        "name": "EpisodicReplayMemoryWrapper",
        "type": "class",
        "file_path": "memory/systems/episodic_replay_buffer.py",
        "line_number": 953,
        "methods": [
          "__init__",
          "get_replay_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .episodic_replay_buffer import EpisodicReplayMemoryWrapper",
          "export": "__all__.append('EpisodicReplayMemoryWrapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "AccessContext",
        "type": "dataclass",
        "file_path": "memory/systems/tier_system.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .tier_system import AccessContext",
          "export": "__all__.append('AccessContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierPermission",
        "type": "dataclass",
        "file_path": "memory/systems/tier_system.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .tier_system import TierPermission",
          "export": "__all__.append('TierPermission')"
        }
      ]
    },
    {
      "entity": {
        "name": "AccessDecision",
        "type": "dataclass",
        "file_path": "memory/systems/tier_system.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .tier_system import AccessDecision",
          "export": "__all__.append('AccessDecision')"
        }
      ]
    },
    {
      "entity": {
        "name": "DynamicTierSystem",
        "type": "class",
        "file_path": "memory/systems/tier_system.py",
        "line_number": 104,
        "methods": [
          "__init__",
          "_initialize_tier_permissions",
          "check_access",
          "_get_current_tier",
          "_get_applicable_permissions",
          "_check_restrictions",
          "_has_approval",
          "elevate_session",
          "_create_audit_entry",
          "_log_access_decision",
          "_log_elevation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .tier_system import DynamicTierSystem",
          "export": "__all__.append('DynamicTierSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryHelixVisualizer",
        "type": "class",
        "file_path": "memory/systems/memory_helix_visualizer.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "get_memory_coordinates",
          "get_authorized_memories",
          "visualize_memory_helix",
          "create_interactive_visualization",
          "update_memory_links"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_helix_visualizer import MemoryHelixVisualizer",
          "export": "__all__.append('MemoryHelixVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "VerifoldRegistryAdapter",
        "type": "class",
        "file_path": "memory/systems/integration_adapters.py",
        "line_number": 30,
        "methods": [
          "__init__",
          "register_trust_callback",
          "_calculate_trust_score",
          "get_module_trust_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .integration_adapters import VerifoldRegistryAdapter",
          "export": "__all__.append('VerifoldRegistryAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMetricsAdapter",
        "type": "class",
        "file_path": "memory/systems/integration_adapters.py",
        "line_number": 135,
        "methods": [
          "__init__",
          "set_module_drift_threshold",
          "register_calibration_callback",
          "_get_drift_recommendation",
          "get_module_drift_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .integration_adapters import DriftMetricsAdapter",
          "export": "__all__.append('DriftMetricsAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealityAnchorsAdapter",
        "type": "class",
        "file_path": "memory/systems/integration_adapters.py",
        "line_number": 264,
        "methods": [
          "__init__",
          "add_module_anchor",
          "register_validation_callback",
          "_check_consistency",
          "get_module_anchors"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .integration_adapters import RealityAnchorsAdapter",
          "export": "__all__.append('RealityAnchorsAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningModuleIntegration",
        "type": "class",
        "file_path": "memory/systems/module_integrations.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "_register_callbacks",
          "_get_learning_recommendation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .module_integrations import LearningModuleIntegration",
          "export": "__all__.append('LearningModuleIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativityModuleIntegration",
        "type": "class",
        "file_path": "memory/systems/module_integrations.py",
        "line_number": 236,
        "methods": [
          "__init__",
          "_setup_creative_anchors",
          "_construct_narrative"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .module_integrations import CreativityModuleIntegration",
          "export": "__all__.append('CreativityModuleIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceModuleIntegration",
        "type": "class",
        "file_path": "memory/systems/module_integrations.py",
        "line_number": 437,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .module_integrations import VoiceModuleIntegration",
          "export": "__all__.append('VoiceModuleIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaModuleIntegration",
        "type": "class",
        "file_path": "memory/systems/module_integrations.py",
        "line_number": 675,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .module_integrations import MetaModuleIntegration",
          "export": "__all__.append('MetaModuleIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionState",
        "type": "class",
        "file_path": "memory/systems/symbolic_delta_compression.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_delta_compression import CompressionState",
          "export": "__all__.append('CompressionState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionRecord",
        "type": "dataclass",
        "file_path": "memory/systems/symbolic_delta_compression.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_delta_compression import CompressionRecord",
          "export": "__all__.append('CompressionRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "LoopDetectionResult",
        "type": "dataclass",
        "file_path": "memory/systems/symbolic_delta_compression.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_delta_compression import LoopDetectionResult",
          "export": "__all__.append('LoopDetectionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicDeltaCompressionManager",
        "type": "class",
        "file_path": "memory/systems/symbolic_delta_compression.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "compress_fold",
          "_detect_compression_loops",
          "_perform_compression",
          "_get_compression_depth",
          "_check_cooldown",
          "_get_cooldown_remaining",
          "_get_emotional_stability",
          "_get_dominant_emotion",
          "_get_recent_compressions",
          "_calculate_entropy_ratio",
          "_detect_pattern_repetition",
          "_assess_cascade_risk",
          "get_compression_analytics",
          "emergency_decompress"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_delta_compression import SymbolicDeltaCompressionManager",
          "export": "__all__.append('SymbolicDeltaCompressionManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('symbolicdeltacompressionmanager', SymbolicDeltaCompressionManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ExponentialLearningSystem",
        "type": "class",
        "file_path": "memory/systems/exponential_learning.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "incorporate_experience",
          "_extract_patterns",
          "_update_knowledge_base",
          "_consolidate_knowledge_base",
          "get_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .exponential_learning import ExponentialLearningSystem",
          "export": "__all__.append('ExponentialLearningSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedMemorySystem",
        "type": "class",
        "file_path": "memory/systems/distributed_memory.py",
        "line_number": 64,
        "methods": [
          "__init__",
          "_generate_memory_id",
          "_get_replication_factor",
          "_get_state_type",
          "_dict_to_memory",
          "_invalidate_similarity_cache"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .distributed_memory import DistributedMemorySystem",
          "export": "__all__.append('DistributedMemorySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphResonanceLevel",
        "type": "class",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import GlyphResonanceLevel",
          "export": "__all__.append('GlyphResonanceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTraceType",
        "type": "class",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import DreamTraceType",
          "export": "__all__.append('DreamTraceType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphSignature",
        "type": "dataclass",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 97,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import GlyphSignature",
          "export": "__all__.append('GlyphSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentitySignature",
        "type": "dataclass",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import IdentitySignature",
          "export": "__all__.append('IdentitySignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTraceLink",
        "type": "dataclass",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 132,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import DreamTraceLink",
          "export": "__all__.append('DreamTraceLink')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTraceLinker",
        "type": "class",
        "file_path": "memory/systems/dream_trace_linker.py",
        "line_number": 153,
        "methods": [
          "__init__",
          "link_dream_to_memory",
          "_extract_glyph_signatures",
          "_correlate_identity_signatures",
          "_propagate_emotional_echoes",
          "_calculate_dream_drift_metrics",
          "_determine_tier_gate",
          "_calculate_entanglement_level",
          "_check_safeguards",
          "_determine_trace_type",
          "_calculate_glyph_resonance",
          "_calculate_glyph_entropy",
          "_extract_context_phrases",
          "_calculate_semantic_density",
          "_calculate_identity_confidence",
          "_find_identity_related_memories",
          "_calculate_identity_drift_susceptibility",
          "_determine_identity_protection_level",
          "_extract_dream_emotions",
          "_find_resonant_memory_emotions",
          "_calculate_emotional_propagation_strength",
          "_calculate_emotional_decay_factor",
          "_create_emotional_bridge",
          "_calculate_dream_entropy_delta",
          "_determine_symbolic_origin",
          "_detect_recursive_amplification",
          "_detect_recursive_amplification_enhanced",
          "_detect_memory_amplification_risk",
          "_detect_volatility_cascade_risk",
          "_assess_identity_drift_risk",
          "_assess_quantum_entanglement_risk",
          "_analyze_glyph_pattern_recursion",
          "_detect_entanglement_feedback_loops",
          "_detect_memory_reference_cycling",
          "_track_dream_causation",
          "_update_session_tracking",
          "_log_dream_trace_link",
          "get_session_analytics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_trace_linker import DreamTraceLinker",
          "export": "__all__.append('DreamTraceLinker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayEvent",
        "type": "dataclass",
        "file_path": "memory/systems/symbolic_replay_engine.py",
        "line_number": 24,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_replay_engine import ReplayEvent",
          "export": "__all__.append('ReplayEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('replayevent', ReplayEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicReplayEngine",
        "type": "class",
        "file_path": "memory/systems/symbolic_replay_engine.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "record_event",
          "save",
          "load",
          "replay"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_replay_engine import SymbolicReplayEngine",
          "export": "__all__.append('SymbolicReplayEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamState",
        "type": "class",
        "file_path": "memory/systems/dream_integrator.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_integrator import DreamState",
          "export": "__all__.append('DreamState')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamFragment",
        "type": "dataclass",
        "file_path": "memory/systems/dream_integrator.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_integrator import DreamFragment",
          "export": "__all__.append('DreamFragment')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSession",
        "type": "dataclass",
        "file_path": "memory/systems/dream_integrator.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_integrator import DreamSession",
          "export": "__all__.append('DreamSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMemoryLinker",
        "type": "class",
        "file_path": "memory/systems/dream_integrator.py",
        "line_number": 76,
        "methods": [
          "__init__",
          "create_memory_link",
          "get_linked_memories",
          "find_related_dreams"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_integrator import DreamMemoryLinker",
          "export": "__all__.append('DreamMemoryLinker')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamIntegrator",
        "type": "class",
        "file_path": "memory/systems/dream_integrator.py",
        "line_number": 123,
        "methods": [
          "__init__",
          "initiate_dream_formation",
          "add_dream_fragment",
          "process_dream_integration",
          "get_dream_insights",
          "find_dreams_by_memory",
          "get_system_status",
          "_calculate_link_strength",
          "_calculate_symbolic_weight",
          "_analyze_dream_content",
          "_generate_dream_insights",
          "_calculate_integration_score",
          "_get_dream_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_integrator import DreamIntegrator",
          "export": "__all__.append('DreamIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmbeddingCacheEntry",
        "type": "dataclass",
        "file_path": "memory/systems/lazy_loading_embeddings.py",
        "line_number": 62,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .lazy_loading_embeddings import EmbeddingCacheEntry",
          "export": "__all__.append('EmbeddingCacheEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "LRUEmbeddingCache",
        "type": "class",
        "file_path": "memory/systems/lazy_loading_embeddings.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "get",
          "put",
          "put_batch",
          "_evict_if_needed",
          "_evict_oldest",
          "_check_memory_pressure",
          "clear",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .lazy_loading_embeddings import LRUEmbeddingCache",
          "export": "__all__.append('LRUEmbeddingCache')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmbeddingStorage",
        "type": "class",
        "file_path": "memory/systems/lazy_loading_embeddings.py",
        "line_number": 236,
        "methods": [
          "__init__",
          "_init_database",
          "store_embedding",
          "load_embedding",
          "load_embeddings_batch",
          "exists",
          "delete_embedding",
          "get_storage_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .lazy_loading_embeddings import EmbeddingStorage",
          "export": "__all__.append('EmbeddingStorage')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryConsolidationEngine",
        "type": "class",
        "file_path": "memory/systems/memory_consolidation.py",
        "line_number": 1,
        "methods": [
          "__init__",
          "compute_decay_rate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_consolidation import MemoryConsolidationEngine",
          "export": "__all__.append('MemoryConsolidationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalOriginData",
        "type": "dataclass",
        "file_path": "memory/systems/causal_identity_tracker.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_identity_tracker import CausalOriginData",
          "export": "__all__.append('CausalOriginData')"
        }
      ]
    },
    {
      "entity": {
        "name": "EventChainValidation",
        "type": "dataclass",
        "file_path": "memory/systems/causal_identity_tracker.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .causal_identity_tracker import EventChainValidation",
          "export": "__all__.append('EventChainValidation')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('eventchainvalidation', EventChainValidation())"
        }
      ]
    },
    {
      "entity": {
        "name": "PatternType",
        "type": "class",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import PatternType",
          "export": "__all__.append('PatternType')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningPhase",
        "type": "class",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import LearningPhase",
          "export": "__all__.append('LearningPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningEvent",
        "type": "dataclass",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 88,
        "methods": [
          "to_feature_vector"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import LearningEvent",
          "export": "__all__.append('LearningEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('learningevent', LearningEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningPattern",
        "type": "dataclass",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 152,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import MetaLearningPattern",
          "export": "__all__.append('MetaLearningPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningTrajectoryAnalyzer",
        "type": "class",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 230,
        "methods": [
          "__init__",
          "analyze_trajectory",
          "_smooth_series",
          "_identify_learning_phases",
          "_classify_trajectory_type",
          "_calculate_trajectory_stats",
          "_count_plateau_periods",
          "_count_breakthroughs",
          "_identify_critical_moments"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import LearningTrajectoryAnalyzer",
          "export": "__all__.append('LearningTrajectoryAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PatternExtractor",
        "type": "class",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 483,
        "methods": [
          "__init__",
          "_initialize_pattern_templates",
          "_calculate_acceleration",
          "_estimate_strategy_acceleration",
          "_calculate_evolution_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import PatternExtractor",
          "export": "__all__.append('PatternExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningPatternSystem",
        "type": "class",
        "file_path": "memory/systems/meta_learning_patterns.py",
        "line_number": 1072,
        "methods": [
          "__init__",
          "_is_learning_memory",
          "_extract_domain",
          "_extract_performance_metrics",
          "_extract_cognitive_state",
          "_extract_strategies",
          "_extract_errors",
          "_extract_corrections",
          "_extract_knowledge",
          "_extract_attention_patterns",
          "_estimate_difficulty",
          "_estimate_success",
          "_estimate_learning_rate",
          "_estimate_consolidation",
          "get_pattern_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_patterns import MetaLearningPatternSystem",
          "export": "__all__.append('MetaLearningPatternSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySystemConsolidator",
        "type": "class",
        "file_path": "memory/systems/memory_consolidator.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "consolidate",
          "_consolidate_memory_files",
          "_merge_implementations",
          "_tag_critical_files"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_consolidator import MemorySystemConsolidator",
          "export": "__all__.append('MemorySystemConsolidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkingMemoryBuffer",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 26,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import WorkingMemoryBuffer",
          "export": "__all__.append('WorkingMemoryBuffer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EpisodicMemoryStore",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import EpisodicMemoryStore",
          "export": "__all__.append('EpisodicMemoryStore')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticKnowledgeGraph",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import SemanticKnowledgeGraph",
          "export": "__all__.append('SemanticKnowledgeGraph')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProceduralSkillNetwork",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import ProceduralSkillNetwork",
          "export": "__all__.append('ProceduralSkillNetwork')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryConsolidationEngine",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 39,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import MemoryConsolidationEngine",
          "export": "__all__.append('MemoryConsolidationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicMemory",
        "type": "class",
        "file_path": "memory/systems/bio_symbolic_memory.py",
        "line_number": 56,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_memory import BioSymbolicMemory",
          "export": "__all__.append('BioSymbolicMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicRelationType",
        "type": "class",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import SymbolicRelationType",
          "export": "__all__.append('SymbolicRelationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "LogicalOperator",
        "type": "class",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import LogicalOperator",
          "export": "__all__.append('LogicalOperator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEntity",
        "type": "dataclass",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 102,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import SymbolicEntity",
          "export": "__all__.append('SymbolicEntity')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicRelation",
        "type": "dataclass",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 141,
        "methods": [
          "to_triple",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import SymbolicRelation",
          "export": "__all__.append('SymbolicRelation')"
        }
      ]
    },
    {
      "entity": {
        "name": "LogicalRule",
        "type": "dataclass",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 187,
        "methods": [
          "applies_to",
          "_evaluate_conditions",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import LogicalRule",
          "export": "__all__.append('LogicalRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralSymbolicExtractor",
        "type": "class",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 235,
        "methods": [
          "__init__",
          "_classify_entity_type",
          "_extract_entity_properties",
          "_calculate_entity_confidence",
          "_calculate_relation_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import NeuralSymbolicExtractor",
          "export": "__all__.append('NeuralSymbolicExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeurosymbolicIntegrationLayer",
        "type": "class",
        "file_path": "memory/systems/neurosymbolic_integration.py",
        "line_number": 1183,
        "methods": [
          "__init__",
          "get_knowledge_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .neurosymbolic_integration import NeurosymbolicIntegrationLayer",
          "export": "__all__.append('NeurosymbolicIntegrationLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObjectStreamStatistics",
        "type": "class",
        "file_path": "memory/systems/memory_research.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_research import MemoryObjectStreamStatistics",
          "export": "__all__.append('MemoryObjectStreamStatistics')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObjectItemReceiver",
        "type": "dataclass",
        "file_path": "memory/systems/memory_research.py",
        "line_number": 70,
        "methods": [
          "__repr__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_research import MemoryObjectItemReceiver",
          "export": "__all__.append('MemoryObjectItemReceiver')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObjectStreamState",
        "type": "dataclass",
        "file_path": "memory/systems/memory_research.py",
        "line_number": 82,
        "methods": [
          "statistics"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_research import MemoryObjectStreamState",
          "export": "__all__.append('MemoryObjectStreamState')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObjectReceiveStream",
        "type": "dataclass",
        "file_path": "memory/systems/memory_research.py",
        "line_number": 106,
        "methods": [
          "__post_init__",
          "receive_nowait",
          "clone",
          "close",
          "statistics",
          "__enter__",
          "__exit__",
          "__del__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_research import MemoryObjectReceiveStream",
          "export": "__all__.append('MemoryObjectReceiveStream')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryObjectSendStream",
        "type": "dataclass",
        "file_path": "memory/systems/memory_research.py",
        "line_number": 224,
        "methods": [
          "__post_init__",
          "send_nowait",
          "clone",
          "close",
          "statistics",
          "__enter__",
          "__exit__",
          "__del__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_research import MemoryObjectSendStream",
          "export": "__all__.append('MemoryObjectSendStream')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyProfile",
        "type": "dataclass",
        "file_path": "memory/systems/colony_swarm_integration.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .colony_swarm_integration import ColonyProfile",
          "export": "__all__.append('ColonyProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionDepth",
        "type": "class",
        "file_path": "memory/systems/reflection_engine.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .reflection_engine import ReflectionDepth",
          "export": "__all__.append('ReflectionDepth')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionInsight",
        "type": "dataclass",
        "file_path": "memory/systems/reflection_engine.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .reflection_engine import ReflectionInsight",
          "export": "__all__.append('ReflectionInsight')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionSession",
        "type": "dataclass",
        "file_path": "memory/systems/reflection_engine.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .reflection_engine import ReflectionSession",
          "export": "__all__.append('ReflectionSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaCognitiveAnalyzer",
        "type": "class",
        "file_path": "memory/systems/reflection_engine.py",
        "line_number": 192,
        "methods": [
          "__init__",
          "analyze_thinking_patterns",
          "_identify_reasoning_styles",
          "_analyze_decision_patterns",
          "_identify_learning_strategies",
          "_detect_cognitive_biases",
          "_assess_meta_awareness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .reflection_engine import MetaCognitiveAnalyzer",
          "export": "__all__.append('MetaCognitiveAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryReflector",
        "type": "class",
        "file_path": "memory/systems/reflection_engine.py",
        "line_number": 265,
        "methods": [
          "__init__",
          "initiate_reflection_session",
          "process_reflection_analysis",
          "get_insights_by_type",
          "find_contradictory_insights",
          "generate_self_assessment",
          "recommend_memory_optimization",
          "get_system_status",
          "_retrieve_memory_data",
          "_process_reflection_type",
          "_calculate_coherence",
          "_count_contradictions",
          "_count_new_connections",
          "_find_internal_contradictions",
          "_are_contradictory",
          "_calculate_processing_time",
          "_identify_dominant_patterns",
          "_analyze_emotional_tendencies",
          "_assess_learning_effectiveness",
          "_identify_cognitive_strengths",
          "_identify_improvement_areas",
          "_assess_behavioral_consistency",
          "_assess_meta_awareness_level",
          "_get_insight_distribution"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .reflection_engine import MemoryReflector",
          "export": "__all__.append('MemoryReflector')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryUtils",
        "type": "class",
        "file_path": "memory/systems/memory_utils.py",
        "line_number": 48,
        "methods": [
          "generate_memory_id",
          "encrypt_memory_data",
          "decrypt_memory_data",
          "validate_memory_access",
          "format_memory_timestamp",
          "calculate_memory_size"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .memory_utils import MemoryUtils",
          "export": "__all__.append('MemoryUtils')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceMemoryBridge",
        "type": "class",
        "file_path": "memory/systems/voice_memory_bridge.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "process_voice_memory",
          "_calculate_resonance",
          "_create_symbolic_map"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_memory_bridge import VoiceMemoryBridge",
          "export": "__all__.append('VoiceMemoryBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockChoiceContentDreamsDP",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/dreams.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .dreams import _MockChoiceContentDreamsDP",
          "export": "__all__.append('_MockChoiceContentDreamsDP')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockMessageDreamsDP",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/dreams.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .dreams import _MockMessageDreamsDP",
          "export": "__all__.append('_MockMessageDreamsDP')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockResponseDreamsDP",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/dreams.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .dreams import _MockResponseDreamsDP",
          "export": "__all__.append('_MockResponseDreamsDP')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockChoiceContent",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/gpt_reflection.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .gpt_reflection import _MockChoiceContent",
          "export": "__all__.append('_MockChoiceContent')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockMessage",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/gpt_reflection.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .gpt_reflection import _MockMessage",
          "export": "__all__.append('_MockMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockResponse",
        "type": "dataclass",
        "file_path": "memory/systems/memoria/gpt_reflection.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .gpt_reflection import _MockResponse",
          "export": "__all__.append('_MockResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "_MockChatCompletions",
        "type": "class",
        "file_path": "memory/systems/memoria/gpt_reflection.py",
        "line_number": 52,
        "methods": [
          "create"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/systems/memoria/__init__.py",
          "action": "add_export",
          "code": "from .gpt_reflection import _MockChatCompletions",
          "export": "__all__.append('_MockChatCompletions')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationMode",
        "type": "class",
        "file_path": "memory/consolidation/consolidation_orchestrator.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .consolidation_orchestrator import ConsolidationMode",
          "export": "__all__.append('ConsolidationMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationSession",
        "type": "dataclass",
        "file_path": "memory/consolidation/consolidation_orchestrator.py",
        "line_number": 98,
        "methods": [
          "calculate_efficiency"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .consolidation_orchestrator import ConsolidationSession",
          "export": "__all__.append('ConsolidationSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "HippocampalMemoryInterface",
        "type": "class",
        "file_path": "memory/consolidation/consolidation_orchestrator.py",
        "line_number": 759,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .consolidation_orchestrator import HippocampalMemoryInterface",
          "export": "__all__.append('HippocampalMemoryInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeocorticalMemoryInterface",
        "type": "class",
        "file_path": "memory/consolidation/consolidation_orchestrator.py",
        "line_number": 891,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .consolidation_orchestrator import NeocorticalMemoryInterface",
          "export": "__all__.append('NeocorticalMemoryInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircadianPhase",
        "type": "class",
        "file_path": "memory/consolidation/sleep_cycle_manager.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .sleep_cycle_manager import CircadianPhase",
          "export": "__all__.append('CircadianPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "SleepPressure",
        "type": "class",
        "file_path": "memory/consolidation/sleep_cycle_manager.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .sleep_cycle_manager import SleepPressure",
          "export": "__all__.append('SleepPressure')"
        }
      ]
    },
    {
      "entity": {
        "name": "SleepCycle",
        "type": "dataclass",
        "file_path": "memory/consolidation/sleep_cycle_manager.py",
        "line_number": 79,
        "methods": [
          "calculate_duration",
          "get_stage_proportion"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .sleep_cycle_manager import SleepCycle",
          "export": "__all__.append('SleepCycle')"
        }
      ]
    },
    {
      "entity": {
        "name": "SleepArchitecture",
        "type": "dataclass",
        "file_path": "memory/consolidation/sleep_cycle_manager.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .sleep_cycle_manager import SleepArchitecture",
          "export": "__all__.append('SleepArchitecture')"
        }
      ]
    },
    {
      "entity": {
        "name": "SleepCycleManager",
        "type": "class",
        "file_path": "memory/consolidation/sleep_cycle_manager.py",
        "line_number": 136,
        "methods": [
          "__init__",
          "get_stage_duration",
          "get_next_stage",
          "_update_oscillations",
          "_get_circadian_phase",
          "_calculate_sleep_pressure",
          "_calculate_rem_pressure",
          "register_stage_callback",
          "register_cycle_callback",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .sleep_cycle_manager import SleepCycleManager",
          "export": "__all__.append('SleepCycleManager')"
        },
        {
          "integration_point": "memory_hub.py",
          "action": "register_service",
          "code": "self.register_service('sleepcyclemanager', SleepCycleManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "RippleType",
        "type": "class",
        "file_path": "memory/consolidation/ripple_generator.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .ripple_generator import RippleType",
          "export": "__all__.append('RippleType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayDirection",
        "type": "class",
        "file_path": "memory/consolidation/ripple_generator.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .ripple_generator import ReplayDirection",
          "export": "__all__.append('ReplayDirection')"
        }
      ]
    },
    {
      "entity": {
        "name": "Ripple",
        "type": "dataclass",
        "file_path": "memory/consolidation/ripple_generator.py",
        "line_number": 91,
        "methods": [
          "calculate_power"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .ripple_generator import Ripple",
          "export": "__all__.append('Ripple')"
        }
      ]
    },
    {
      "entity": {
        "name": "RippleSequence",
        "type": "dataclass",
        "file_path": "memory/consolidation/ripple_generator.py",
        "line_number": 125,
        "methods": [
          "add_ripple",
          "_update_metrics"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .ripple_generator import RippleSequence",
          "export": "__all__.append('RippleSequence')"
        }
      ]
    },
    {
      "entity": {
        "name": "RippleGenerator",
        "type": "class",
        "file_path": "memory/consolidation/ripple_generator.py",
        "line_number": 151,
        "methods": [
          "__init__",
          "set_memory_pool",
          "set_priority_memories",
          "update_sleep_stage",
          "_is_optimal_phase",
          "_select_ripple_type",
          "_select_replay_direction",
          "_calculate_amplitude",
          "_calculate_duration",
          "_calculate_coupling_strength",
          "_calculate_complexity",
          "register_ripple_callback",
          "register_sequence_callback",
          "get_recent_ripples",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/consolidation/__init__.py",
          "action": "add_export",
          "code": "from .ripple_generator import RippleGenerator",
          "export": "__all__.append('RippleGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaType",
        "type": "class",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import TraumaType",
          "export": "__all__.append('TraumaType')"
        }
      ]
    },
    {
      "entity": {
        "name": "RepairStrategy",
        "type": "class",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 100,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import RepairStrategy",
          "export": "__all__.append('RepairStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingPhase",
        "type": "class",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import HealingPhase",
          "export": "__all__.append('HealingPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaSignature",
        "type": "dataclass",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 121,
        "methods": [
          "calculate_priority"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import TraumaSignature",
          "export": "__all__.append('TraumaSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "RepairScaffold",
        "type": "dataclass",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 138,
        "methods": [
          "add_checkpoint"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import RepairScaffold",
          "export": "__all__.append('RepairScaffold')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImmuneResponse",
        "type": "dataclass",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 154,
        "methods": [
          "matches_threat"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import ImmuneResponse",
          "export": "__all__.append('ImmuneResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "HelicalRepairMechanism",
        "type": "class",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 169,
        "methods": [
          "__init__",
          "_detect_corruption"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import HelicalRepairMechanism",
          "export": "__all__.append('HelicalRepairMechanism')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaRepairSystem",
        "type": "class",
        "file_path": "memory/repair/advanced_trauma_repair.py",
        "line_number": 246,
        "methods": [
          "__init__",
          "get_healing_report",
          "_select_repair_strategy",
          "_calculate_healing_capacity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/repair/__init__.py",
          "action": "add_export",
          "code": "from .advanced_trauma_repair import TraumaRepairSystem",
          "export": "__all__.append('TraumaRepairSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConceptNode",
        "type": "dataclass",
        "file_path": "memory/neocortical/concept_hierarchy.py",
        "line_number": 29,
        "methods": [
          "add_child",
          "remove_child",
          "get_ancestors",
          "get_descendants",
          "get_siblings",
          "calculate_similarity"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/neocortical/__init__.py",
          "action": "add_export",
          "code": "from .concept_hierarchy import ConceptNode",
          "export": "__all__.append('ConceptNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConceptHierarchy",
        "type": "class",
        "file_path": "memory/neocortical/concept_hierarchy.py",
        "line_number": 115,
        "methods": [
          "__init__",
          "add_concept",
          "find_concept",
          "get_path",
          "activate_concept",
          "find_common_ancestor",
          "get_semantic_distance",
          "extract_ontology",
          "prune_unused",
          "_find_best_parent",
          "_calculate_match_score",
          "_compress_path",
          "_split_node",
          "_remove_concept",
          "_update_statistics",
          "decay_activations",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/neocortical/__init__.py",
          "action": "add_export",
          "code": "from .concept_hierarchy import ConceptHierarchy",
          "export": "__all__.append('ConceptHierarchy')"
        }
      ]
    },
    {
      "entity": {
        "name": "CorticalLayer",
        "type": "class",
        "file_path": "memory/neocortical/neocortical_network.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/neocortical/__init__.py",
          "action": "add_export",
          "code": "from .neocortical_network import CorticalLayer",
          "export": "__all__.append('CorticalLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CorticalColumn",
        "type": "dataclass",
        "file_path": "memory/neocortical/neocortical_network.py",
        "line_number": 131,
        "methods": [
          "initialize_layers"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/neocortical/__init__.py",
          "action": "add_export",
          "code": "from .neocortical_network import CorticalColumn",
          "export": "__all__.append('CorticalColumn')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticExtractor",
        "type": "class",
        "file_path": "memory/neocortical/semantic_extractor.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "extract_semantics",
          "extract_concept",
          "find_semantic_similarity",
          "_extract_episode_features",
          "_find_common_patterns",
          "_cluster_semantically",
          "_extract_relationships",
          "_build_abstractions",
          "_identify_primary_concept",
          "_extract_attributes",
          "_compare_sequences",
          "_compare_attributes",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "memory/neocortical/__init__.py",
          "action": "add_export",
          "code": "from .semantic_extractor import SemanticExtractor",
          "export": "__all__.append('SemanticExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockModule",
        "type": "class",
        "file_path": "identity/qrg_integration.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "__getattr__",
          "__call__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_integration import MockModule",
          "export": "__all__.append('MockModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRGShowcase",
        "type": "class",
        "file_path": "identity/qrg_showcase.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "_create_demo_user_profiles",
          "demonstrate_user_profile",
          "_create_user_specific_ascii_pattern",
          "_analyze_qrg_adaptation",
          "run_comprehensive_showcase",
          "run_specific_qrg_type_demo",
          "run_performance_benchmark",
          "_generate_showcase_summary",
          "save_showcase_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_showcase import QRGShowcase",
          "export": "__all__.append('QRGShowcase')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeploymentConfig",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import DeploymentConfig",
          "export": "__all__.append('DeploymentConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemValidator",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "validate_python_environment",
          "validate_file_structure",
          "validate_module_functionality",
          "run_complete_validation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import SystemValidator",
          "export": "__all__.append('SystemValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoOrchestrator",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 287,
        "methods": [
          "run_interactive_demo",
          "run_fallback_demo"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import DemoOrchestrator",
          "export": "__all__.append('DemoOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "BenchmarkRunner",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 436,
        "methods": [
          "run_performance_benchmarks",
          "benchmark_qrg_speed",
          "benchmark_memory_usage",
          "benchmark_concurrent",
          "benchmark_security"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import BenchmarkRunner",
          "export": "__all__.append('BenchmarkRunner')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeploymentChecker",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 564,
        "methods": [
          "check_deployment_readiness",
          "check_system_validation",
          "check_performance_standards",
          "check_security_compliance",
          "check_documentation",
          "check_test_coverage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import DeploymentChecker",
          "export": "__all__.append('DeploymentChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeploymentPackage",
        "type": "class",
        "file_path": "identity/deployment_package.py",
        "line_number": 672,
        "methods": [
          "__init__",
          "run_validation",
          "run_demo",
          "run_tests",
          "run_benchmarks",
          "check_deployment",
          "run_complete_package"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .deployment_package import DeploymentPackage",
          "export": "__all__.append('DeploymentPackage')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityConnector",
        "type": "class",
        "file_path": "identity/connector.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "require_tier",
          "connect_to_module"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/__init__.py",
          "action": "add_export",
          "code": "from .connector import IdentityConnector",
          "export": "__all__.append('IdentityConnector')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiUserSync",
        "type": "class",
        "file_path": "identity/auth_backend/multi_user_sync.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "add_user",
          "update_entropy",
          "validate_entropy",
          "quorum_arbitration",
          "cross_validate_entropy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .multi_user_sync import MultiUserSync",
          "export": "__all__.append('MultiUserSync')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossDeviceHandshake",
        "type": "class",
        "file_path": "identity/auth_backend/cross_device_handshake.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "fingerprint_device",
          "calculate_trust_score",
          "link_session",
          "expire_stale_sessions",
          "refresh_session",
          "renegotiate_session_keys",
          "resolve_conflict",
          "get_session",
          "generate_session_keys",
          "exchange_public_keys",
          "validate_nonce",
          "apply_delay_penalty",
          "simulate_session_token_collision"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .cross_device_handshake import CrossDeviceHandshake",
          "export": "__all__.append('CrossDeviceHandshake')"
        }
      ]
    },
    {
      "entity": {
        "name": "WebRTCPeerSync",
        "type": "class",
        "file_path": "identity/auth_backend/webrtc_peer_sync.py",
        "line_number": 12,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .webrtc_peer_sync import WebRTCPeerSync",
          "export": "__all__.append('WebRTCPeerSync')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataProcessingBasis",
        "type": "class",
        "file_path": "identity/auth_backend/authentication_server.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .authentication_server import DataProcessingBasis",
          "export": "__all__.append('DataProcessingBasis')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataSubjectRight",
        "type": "class",
        "file_path": "identity/auth_backend/authentication_server.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .authentication_server import DataSubjectRight",
          "export": "__all__.append('DataSubjectRight')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserPrivacyProfile",
        "type": "dataclass",
        "file_path": "identity/auth_backend/authentication_server.py",
        "line_number": 76,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .authentication_server import UserPrivacyProfile",
          "export": "__all__.append('UserPrivacyProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuthenticationServer",
        "type": "class",
        "file_path": "identity/auth_backend/authentication_server.py",
        "line_number": 91,
        "methods": [
          "__init__",
          "create_authentication_session",
          "validate_authentication_request",
          "verify_entropy_packet",
          "expire_sessions",
          "expire_session",
          "track_entropy_reliability",
          "get_recent_auth_count",
          "get_recent_failures",
          "get_session_info",
          "start_trust_scorer_cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .authentication_server import AuthenticationServer",
          "export": "__all__.append('AuthenticationServer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PQCKeyPair",
        "type": "dataclass",
        "file_path": "identity/auth_backend/pqc_crypto_engine.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .pqc_crypto_engine import PQCKeyPair",
          "export": "__all__.append('PQCKeyPair')"
        }
      ]
    },
    {
      "entity": {
        "name": "PQCSignature",
        "type": "dataclass",
        "file_path": "identity/auth_backend/pqc_crypto_engine.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .pqc_crypto_engine import PQCSignature",
          "export": "__all__.append('PQCSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "QREntropyGenerator",
        "type": "class",
        "file_path": "identity/auth_backend/qr_entropy_generator.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "generate_authentication_qr",
          "embed_steganographic_layers",
          "validate_qr_scan"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_backend/__init__.py",
          "action": "add_export",
          "code": "from .qr_entropy_generator import QREntropyGenerator",
          "export": "__all__.append('QREntropyGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingCLI",
        "type": "class",
        "file_path": "identity/tools/onboarding_cli.py",
        "line_number": 43,
        "methods": [
          "__init__",
          "run_interactive_demo",
          "_run_real_onboarding",
          "_run_demo_onboarding",
          "_collect_stage_data",
          "_collect_cultural_context",
          "_collect_cultural_context_demo",
          "_collect_symbolic_elements",
          "_collect_symbolic_elements_demo",
          "_collect_entropy_preferences",
          "_collect_biometric_preferences",
          "_collect_consciousness_data",
          "_get_demo_stages",
          "_generate_demo_result",
          "_display_recommendations",
          "_display_result",
          "run_batch_test",
          "_display_batch_results",
          "show_config_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/tools/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_cli import OnboardingCLI",
          "export": "__all__.append('OnboardingCLI')"
        }
      ]
    },
    {
      "entity": {
        "name": "SensitivityLevel",
        "type": "class",
        "file_path": "identity/auth_utils/cultural_safety_checker.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cultural_safety_checker import SensitivityLevel",
          "export": "__all__.append('SensitivityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalRule",
        "type": "dataclass",
        "file_path": "identity/auth_utils/cultural_safety_checker.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cultural_safety_checker import CulturalRule",
          "export": "__all__.append('CulturalRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationReport",
        "type": "dataclass",
        "file_path": "identity/auth_utils/cultural_safety_checker.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cultural_safety_checker import ValidationReport",
          "export": "__all__.append('ValidationReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "GridPattern",
        "type": "class",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 20,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import GridPattern",
          "export": "__all__.append('GridPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "SizingMode",
        "type": "class",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import SizingMode",
          "export": "__all__.append('SizingMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ScreenDimensions",
        "type": "dataclass",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import ScreenDimensions",
          "export": "__all__.append('ScreenDimensions')"
        }
      ]
    },
    {
      "entity": {
        "name": "GridConstraints",
        "type": "dataclass",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import GridConstraints",
          "export": "__all__.append('GridConstraints')"
        }
      ]
    },
    {
      "entity": {
        "name": "GridCalculationResult",
        "type": "dataclass",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import GridCalculationResult",
          "export": "__all__.append('GridCalculationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "GridSizeCalculator",
        "type": "class",
        "file_path": "identity/auth_utils/grid_size_calculator.py",
        "line_number": 70,
        "methods": [
          "__init__",
          "_get_default_config",
          "calculate_optimal_grid_size",
          "_calculate_base_grid_size",
          "_apply_cognitive_load_adjustment",
          "_apply_screen_constraints",
          "_apply_accessibility_adjustments",
          "_calculate_optimal_layout",
          "_determine_grid_pattern",
          "_calculate_rectangular_layout",
          "_calculate_optimal_spacing",
          "_calculate_layout_confidence",
          "_validate_grid_calculation",
          "calculate_adaptive_grid_size",
          "get_grid_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .grid_size_calculator import GridSizeCalculator",
          "export": "__all__.append('GridSizeCalculator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionState",
        "type": "class",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import AttentionState",
          "export": "__all__.append('AttentionState')"
        }
      ]
    },
    {
      "entity": {
        "name": "InputModality",
        "type": "class",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 31,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import InputModality",
          "export": "__all__.append('InputModality')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionMetrics",
        "type": "dataclass",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import AttentionMetrics",
          "export": "__all__.append('AttentionMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "EyeTrackingData",
        "type": "dataclass",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import EyeTrackingData",
          "export": "__all__.append('EyeTrackingData')"
        }
      ]
    },
    {
      "entity": {
        "name": "InputEvent",
        "type": "dataclass",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import InputEvent",
          "export": "__all__.append('InputEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('inputevent', InputEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionMonitor",
        "type": "class",
        "file_path": "identity/auth_utils/attention_monitor.py",
        "line_number": 70,
        "methods": [
          "__init__",
          "_get_default_config",
          "process_eye_tracking_data",
          "_analyze_eye_movement_patterns",
          "_calculate_attention_from_eye_data",
          "process_input_event",
          "_analyze_input_lag",
          "_extract_attention_from_input_patterns",
          "get_current_attention_state",
          "update_attention_metrics",
          "_combine_attention_metrics",
          "get_attention_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .attention_monitor import AttentionMonitor",
          "export": "__all__.append('AttentionMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveLoadLevel",
        "type": "class",
        "file_path": "identity/auth_utils/cognitive_load_estimator.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_load_estimator import CognitiveLoadLevel",
          "export": "__all__.append('CognitiveLoadLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveTask",
        "type": "class",
        "file_path": "identity/auth_utils/cognitive_load_estimator.py",
        "line_number": 31,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_load_estimator import CognitiveTask",
          "export": "__all__.append('CognitiveTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveIndicators",
        "type": "dataclass",
        "file_path": "identity/auth_utils/cognitive_load_estimator.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_load_estimator import CognitiveIndicators",
          "export": "__all__.append('CognitiveIndicators')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveLoadAssessment",
        "type": "dataclass",
        "file_path": "identity/auth_utils/cognitive_load_estimator.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth_utils/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_load_estimator import CognitiveLoadAssessment",
          "export": "__all__.append('CognitiveLoadAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaIDProfile",
        "type": "dataclass",
        "file_path": "identity/core/qrs_manager.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .qrs_manager import LambdaIDProfile",
          "export": "__all__.append('LambdaIDProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationLevel",
        "type": "class",
        "file_path": "identity/core/lambd_id_service.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_service import ValidationLevel",
          "export": "__all__.append('ValidationLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaIDResult",
        "type": "dataclass",
        "file_path": "identity/core/lambd_id_service.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_service import LambdaIDResult",
          "export": "__all__.append('LambdaIDResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserTierProfile",
        "type": "dataclass",
        "file_path": "identity/core/user_tier_mapping.py",
        "line_number": 64,
        "methods": [
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .user_tier_mapping import UserTierProfile",
          "export": "__all__.append('UserTierProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserTierMappingService",
        "type": "class",
        "file_path": "identity/core/user_tier_mapping.py",
        "line_number": 104,
        "methods": [
          "__init__",
          "_load_database",
          "_save_database",
          "_initialize_default_users",
          "_get_default_permissions",
          "get_user_tier",
          "set_user_tier",
          "_revert_to_base_tier",
          "check_permission",
          "get_user_profile"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .user_tier_mapping import UserTierMappingService",
          "export": "__all__.append('UserTierMappingService')"
        },
        {
          "integration_point": "identity_hub.py",
          "action": "register_service",
          "code": "self.register_service('usertiermappingservice', UserTierMappingService())"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainIdentityConnector",
        "type": "class",
        "file_path": "identity/core/brain_identity_connector.py",
        "line_number": 77,
        "methods": [
          "__init__",
          "connect_registry",
          "connect_brain",
          "authorize_memory_operation",
          "wrap_memory_function",
          "register_memory",
          "_get_required_tier",
          "_log_access",
          "get_access_logs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .brain_identity_connector import BrainIdentityConnector",
          "export": "__all__.append('BrainIdentityConnector')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockRegistry",
        "type": "class",
        "file_path": "identity/core/brain_identity_connector.py",
        "line_number": 656,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .brain_identity_connector import MockRegistry",
          "export": "__all__.append('MockRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBrain",
        "type": "class",
        "file_path": "identity/core/brain_identity_connector.py",
        "line_number": 659,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/__init__.py",
          "action": "add_export",
          "code": "from .brain_identity_connector import MockBrain",
          "export": "__all__.append('MockBrain')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrbPattern",
        "type": "class",
        "file_path": "identity/core/visualization/lukhas_orb.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/visualization/__init__.py",
          "action": "add_export",
          "code": "from .lukhas_orb import OrbPattern",
          "export": "__all__.append('OrbPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyLevel",
        "type": "class",
        "file_path": "identity/core/id_service/entropy_engine.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .entropy_engine import EntropyLevel",
          "export": "__all__.append('EntropyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyAnalysis",
        "type": "class",
        "file_path": "identity/core/id_service/entropy_engine.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .entropy_engine import EntropyAnalysis",
          "export": "__all__.append('EntropyAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaIDEntropyEngine",
        "type": "class",
        "file_path": "identity/core/id_service/entropy_engine.py",
        "line_number": 70,
        "methods": [
          "__init__",
          "analyze_entropy",
          "calculate_live_entropy",
          "optimize_lambda_id",
          "batch_entropy_analysis",
          "get_entropy_statistics",
          "_calculate_shannon_entropy",
          "_calculate_boost_factors",
          "_calculate_component_entropy",
          "_calculate_symbolic_strength",
          "_calculate_pattern_complexity",
          "_calculate_overall_score",
          "_determine_entropy_level",
          "_analyze_tier_compliance",
          "_analyze_strengths_weaknesses",
          "_generate_entropy_recommendations",
          "_generate_live_suggestions",
          "_suggest_next_character",
          "_generate_optimizations",
          "_calculate_entropy_distribution",
          "_calculate_tier_compliance_rates",
          "_track_entropy_history",
          "_parse_lambda_id",
          "_get_tier_symbols",
          "_load_config",
          "_load_tier_thresholds",
          "_load_boost_factors",
          "_load_unicode_categories",
          "_load_pattern_weights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .entropy_engine import LambdaIDEntropyEngine",
          "export": "__all__.append('LambdaIDEntropyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryMethod",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import RecoveryMethod",
          "export": "__all__.append('RecoveryMethod')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryStatus",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import RecoveryStatus",
          "export": "__all__.append('RecoveryStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "PortabilityPackage",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 58,
        "methods": [
          "__init__",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import PortabilityPackage",
          "export": "__all__.append('PortabilityPackage')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryAttempt",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 88,
        "methods": [
          "__init__",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import RecoveryAttempt",
          "export": "__all__.append('RecoveryAttempt')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaIDPortabilitySystem",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 118,
        "methods": [
          "__init__",
          "create_portability_package",
          "generate_qr_geo_recovery",
          "recover_from_qr_geo",
          "generate_emergency_codes",
          "recover_from_emergency_code",
          "generate_recovery_phrase",
          "recover_from_phrase",
          "sync_across_devices",
          "create_backup_file",
          "restore_from_backup",
          "get_recovery_analytics",
          "_generate_qr_geo_code",
          "_generate_emergency_codes",
          "_generate_recovery_phrase",
          "_create_backup_data",
          "_calculate_expiry_date",
          "_add_security_layer",
          "_verify_geographic_proximity",
          "_verify_additional_factors",
          "_generate_attempt_id",
          "_get_qr_recovery_instructions",
          "_create_sync_package",
          "_sync_to_device",
          "_encrypt_data",
          "_decrypt_data",
          "_encrypt_with_password",
          "_decrypt_with_password",
          "_get_peak_recovery_day",
          "_initialize_crypto_key",
          "_load_config"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import LambdaIDPortabilitySystem",
          "export": "__all__.append('LambdaIDPortabilitySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "GeographicEncoder",
        "type": "class",
        "file_path": "identity/core/id_service/portability_system.py",
        "line_number": 816,
        "methods": [
          "encode_with_location",
          "decode_from_payload"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .portability_system import GeographicEncoder",
          "export": "__all__.append('GeographicEncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationLevel",
        "type": "class",
        "file_path": "identity/core/id_service/lambd_id_validator.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_validator import ValidationLevel",
          "export": "__all__.append('ValidationLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "Mnemonic",
        "type": "class",
        "file_path": "identity/core/id_service/mnemonic.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "generate",
          "to_seed"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .mnemonic import Mnemonic",
          "export": "__all__.append('Mnemonic')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyLevel",
        "type": "class",
        "file_path": "identity/core/id_service/lambd_id_entropy.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_entropy import EntropyLevel",
          "export": "__all__.append('EntropyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyAnalysis",
        "type": "class",
        "file_path": "identity/core/id_service/lambd_id_entropy.py",
        "line_number": 39,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_entropy import EntropyAnalysis",
          "export": "__all__.append('EntropyAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaIDEntropy",
        "type": "class",
        "file_path": "identity/core/id_service/lambd_id_entropy.py",
        "line_number": 51,
        "methods": [
          "__init__",
          "analyze_lambda_id_entropy",
          "_calculate_combined_shannon_entropy",
          "_calculate_shannon_entropy",
          "_normalize_entropy",
          "_calculate_character_diversity",
          "_analyze_component_entropy",
          "_analyze_symbolic_entropy",
          "_analyze_patterns",
          "_detect_repetitive_sequences",
          "_detect_sequential_patterns",
          "_analyze_randomness",
          "_test_character_distribution",
          "_test_runs",
          "_test_chi_square",
          "_determine_security_level",
          "_generate_recommendations",
          "_detect_entropy_warnings",
          "_parse_lambda_id",
          "_store_entropy_analysis",
          "get_entropy_statistics",
          "_load_config",
          "_load_weak_patterns",
          "_load_tier_requirements"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/id_service/__init__.py",
          "action": "add_export",
          "code": "from .lambd_id_entropy import LambdaIDEntropy",
          "export": "__all__.append('LambdaIDEntropy')"
        }
      ]
    },
    {
      "entity": {
        "name": "VerificationDepth",
        "type": "class",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/swarm/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_swarm_hub import VerificationDepth",
          "export": "__all__.append('VerificationDepth')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierResourceAllocation",
        "type": "dataclass",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/swarm/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_swarm_hub import TierResourceAllocation",
          "export": "__all__.append('TierResourceAllocation')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentitySwarmTask",
        "type": "dataclass",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/swarm/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_swarm_hub import IdentitySwarmTask",
          "export": "__all__.append('IdentitySwarmTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyOrchestration",
        "type": "dataclass",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/swarm/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_swarm_hub import ColonyOrchestration",
          "export": "__all__.append('ColonyOrchestration')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierAwareSwarmHub",
        "type": "class",
        "file_path": "identity/core/swarm/tier_aware_swarm_hub.py",
        "line_number": 89,
        "methods": [
          "__init__",
          "_initialize_tier_profiles",
          "_determine_required_colonies",
          "_calculate_tier_priority",
          "_create_orchestration_plan",
          "_can_allocate_resources",
          "_update_tier_metrics",
          "get_hub_statistics",
          "get_tier_performance_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/swarm/__init__.py",
          "action": "add_export",
          "code": "from .tier_aware_swarm_hub import TierAwareSwarmHub",
          "export": "__all__.append('TierAwareSwarmHub')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricQuality",
        "type": "class",
        "file_path": "identity/core/colonies/biometric_verification_colony.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .biometric_verification_colony import BiometricQuality",
          "export": "__all__.append('BiometricQuality')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricSample",
        "type": "dataclass",
        "file_path": "identity/core/colonies/biometric_verification_colony.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .biometric_verification_colony import BiometricSample",
          "export": "__all__.append('BiometricSample')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricVerificationTask",
        "type": "dataclass",
        "file_path": "identity/core/colonies/biometric_verification_colony.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .biometric_verification_colony import BiometricVerificationTask",
          "export": "__all__.append('BiometricVerificationTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricVerificationAgent",
        "type": "class",
        "file_path": "identity/core/colonies/biometric_verification_colony.py",
        "line_number": 80,
        "methods": [
          "__init__",
          "_calculate_confidence",
          "_assess_environmental_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .biometric_verification_colony import BiometricVerificationAgent",
          "export": "__all__.append('BiometricVerificationAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessVerificationMethod",
        "type": "class",
        "file_path": "identity/core/colonies/consciousness_verification_colony.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_verification_colony import ConsciousnessVerificationMethod",
          "export": "__all__.append('ConsciousnessVerificationMethod')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessVerificationTask",
        "type": "dataclass",
        "file_path": "identity/core/colonies/consciousness_verification_colony.py",
        "line_number": 53,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_verification_colony import ConsciousnessVerificationTask",
          "export": "__all__.append('ConsciousnessVerificationTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessAnalysisAgent",
        "type": "class",
        "file_path": "identity/core/colonies/consciousness_verification_colony.py",
        "line_number": 66,
        "methods": [
          "__init__",
          "_calculate_internal_coherence",
          "_calculate_historical_coherence",
          "_detect_coherence_anomalies",
          "_extract_consciousness_patterns",
          "_check_stress_emotion_coherence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_verification_colony import ConsciousnessAnalysisAgent",
          "export": "__all__.append('ConsciousnessAnalysisAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAnalysisMethod",
        "type": "class",
        "file_path": "identity/core/colonies/dream_verification_colony.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .dream_verification_colony import DreamAnalysisMethod",
          "export": "__all__.append('DreamAnalysisMethod')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamVerificationTask",
        "type": "dataclass",
        "file_path": "identity/core/colonies/dream_verification_colony.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .dream_verification_colony import DreamVerificationTask",
          "export": "__all__.append('DreamVerificationTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiverseDreamBranch",
        "type": "dataclass",
        "file_path": "identity/core/colonies/dream_verification_colony.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .dream_verification_colony import MultiverseDreamBranch",
          "export": "__all__.append('MultiverseDreamBranch')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAnalysisAgent",
        "type": "class",
        "file_path": "identity/core/colonies/dream_verification_colony.py",
        "line_number": 79,
        "methods": [
          "__init__",
          "_calculate_symbol_meaning",
          "_assess_personal_relevance",
          "_calculate_symbolic_coherence",
          "_generate_quantum_signature"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/colonies/__init__.py",
          "action": "add_export",
          "code": "from .dream_verification_colony import DreamAnalysisAgent",
          "export": "__all__.append('DreamAnalysisAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicPatternAnalyzer",
        "type": "class",
        "file_path": "identity/core/trace/pattern_analyzer.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "analyze_patterns",
          "detect_anomalies",
          "generate_insights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/trace/__init__.py",
          "action": "add_export",
          "code": "from .pattern_analyzer import SymbolicPatternAnalyzer",
          "export": "__all__.append('SymbolicPatternAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamStateType",
        "type": "class",
        "file_path": "identity/core/auth/dream_auth.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .dream_auth import DreamStateType",
          "export": "__all__.append('DreamStateType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSymbolType",
        "type": "class",
        "file_path": "identity/core/auth/dream_auth.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .dream_auth import DreamSymbolType",
          "export": "__all__.append('DreamSymbolType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAuthenticationEngine",
        "type": "class",
        "file_path": "identity/core/auth/dream_auth.py",
        "line_number": 113,
        "methods": [
          "__init__",
          "register_dream_pattern",
          "create_dream_seed",
          "authenticate_with_dream",
          "_extract_symbolic_content",
          "_analyze_emotional_content",
          "_extract_consciousness_markers",
          "_analyze_temporal_structure",
          "_identify_archetypal_content",
          "_generate_symbolic_prompt",
          "_calculate_symbolic_alignment",
          "_get_symbolic_equivalents",
          "_calculate_consciousness_coherence",
          "_verify_lucidity_claims",
          "_calculate_archetypal_resonance",
          "_calculate_pattern_match",
          "_calculate_symbol_similarity",
          "_calculate_emotional_similarity",
          "_calculate_personal_significance",
          "_verify_dream_response_integrity",
          "_calculate_dream_confidence_score",
          "get_dream_statistics",
          "_get_most_common_symbols"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .dream_auth import DreamAuthenticationEngine",
          "export": "__all__.append('DreamAuthenticationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAnchorType",
        "type": "class",
        "file_path": "identity/core/auth/bio_symbolic_fusion.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_fusion import EmotionalAnchorType",
          "export": "__all__.append('EmotionalAnchorType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAnchor",
        "type": "dataclass",
        "file_path": "identity/core/auth/bio_symbolic_fusion.py",
        "line_number": 56,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_fusion import EmotionalAnchor",
          "export": "__all__.append('EmotionalAnchor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicBiometricPattern",
        "type": "dataclass",
        "file_path": "identity/core/auth/bio_symbolic_fusion.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_fusion import SymbolicBiometricPattern",
          "export": "__all__.append('SymbolicBiometricPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionResult",
        "type": "dataclass",
        "file_path": "identity/core/auth/bio_symbolic_fusion.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_fusion import FusionResult",
          "export": "__all__.append('FusionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicFusionEngine",
        "type": "class",
        "file_path": "identity/core/auth/bio_symbolic_fusion.py",
        "line_number": 105,
        "methods": [
          "__init__",
          "create_emotional_anchor",
          "create_symbolic_pattern",
          "perform_fusion_authentication",
          "_generate_symbolic_encoding",
          "_categorize_heart_rate",
          "_get_emotion_symbol",
          "_get_consciousness_symbol",
          "_get_synchrony_symbol",
          "_extract_emotional_correlations",
          "_calculate_pattern_stability",
          "_calculate_pattern_similarity",
          "_apply_cultural_adaptations",
          "_calculate_emotional_match",
          "_calculate_symbolic_alignment",
          "_calculate_consciousness_coherence",
          "_expected_consciousness_for_emotion",
          "_get_adaptive_threshold",
          "_calculate_fusion_score",
          "_check_cultural_compatibility",
          "_verify_quantum_signatures",
          "get_fusion_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_fusion import BioSymbolicFusionEngine",
          "export": "__all__.append('BioSymbolicFusionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricQuality",
        "type": "class",
        "file_path": "identity/core/auth/biometric_integration.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .biometric_integration import BiometricQuality",
          "export": "__all__.append('BiometricQuality')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricChallenge",
        "type": "dataclass",
        "file_path": "identity/core/auth/biometric_integration.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/auth/__init__.py",
          "action": "add_export",
          "code": "from .biometric_integration import BiometricChallenge",
          "export": "__all__.append('BiometricChallenge')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthMetric",
        "type": "class",
        "file_path": "identity/core/health/identity_health_monitor.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/health/__init__.py",
          "action": "add_export",
          "code": "from .identity_health_monitor import HealthMetric",
          "export": "__all__.append('HealthMetric')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingPlan",
        "type": "dataclass",
        "file_path": "identity/core/health/identity_health_monitor.py",
        "line_number": 127,
        "methods": [
          "add_step"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/health/__init__.py",
          "action": "add_export",
          "code": "from .identity_health_monitor import HealingPlan",
          "export": "__all__.append('HealingPlan')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityHealthMonitor",
        "type": "class",
        "file_path": "identity/core/health/identity_health_monitor.py",
        "line_number": 153,
        "methods": [
          "__init__",
          "_determine_healing_strategy",
          "get_system_health_report",
          "get_component_health_details"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/health/__init__.py",
          "action": "add_export",
          "code": "from .identity_health_monitor import IdentityHealthMonitor",
          "export": "__all__.append('IdentityHealthMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaConsentManager",
        "type": "class",
        "file_path": "identity/core/sent/consent_manager.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "collect_consent",
          "validate_consent",
          "revoke_consent",
          "get_consent_status",
          "get_symbolic_consent_status",
          "_validate_tier_consent_access",
          "_map_action_to_scope",
          "_is_scope_revocable"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/sent/__init__.py",
          "action": "add_export",
          "code": "from .consent_manager import LambdaConsentManager",
          "export": "__all__.append('LambdaConsentManager')"
        },
        {
          "integration_point": "identity_hub.py",
          "action": "register_service",
          "code": "self.register_service('lambdaconsentmanager', LambdaConsentManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentPolicyEngine",
        "type": "class",
        "file_path": "identity/core/sent/policy_engine.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "create_policy",
          "update_policy",
          "check_compliance",
          "generate_compliance_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/sent/__init__.py",
          "action": "add_export",
          "code": "from .policy_engine import ConsentPolicyEngine",
          "export": "__all__.append('ConsentPolicyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "TrustLevel",
        "type": "class",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import TrustLevel",
          "export": "__all__.append('TrustLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityTagType",
        "type": "class",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import IdentityTagType",
          "export": "__all__.append('IdentityTagType')"
        }
      ]
    },
    {
      "entity": {
        "name": "TrustRelationship",
        "type": "dataclass",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 57,
        "methods": [
          "update_interaction"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import TrustRelationship",
          "export": "__all__.append('TrustRelationship')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityTag",
        "type": "dataclass",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 104,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import IdentityTag",
          "export": "__all__.append('IdentityTag')"
        }
      ]
    },
    {
      "entity": {
        "name": "TagConsensusRequest",
        "type": "dataclass",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 116,
        "methods": [
          "add_vote",
          "is_consensus_reached"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import TagConsensusRequest",
          "export": "__all__.append('TagConsensusRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityTagResolver",
        "type": "class",
        "file_path": "identity/core/tagging/identity_tag_resolver.py",
        "line_number": 147,
        "methods": [
          "__init__",
          "resolve_identity_permissions",
          "get_identity_reputation",
          "_get_trust_network",
          "_calculate_trust_network_boost",
          "_calculate_trust_reputation",
          "_calculate_network_influence",
          "_count_trust_relationships",
          "get_resolver_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tagging/__init__.py",
          "action": "add_export",
          "code": "from .identity_tag_resolver import IdentityTagResolver",
          "export": "__all__.append('IdentityTagResolver')"
        }
      ]
    },
    {
      "entity": {
        "name": "CommercialTier",
        "type": "class",
        "file_path": "identity/core/commercial/commercial_module.py",
        "line_number": 31,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/commercial/__init__.py",
          "action": "add_export",
          "code": "from .commercial_module import CommercialTier",
          "export": "__all__.append('CommercialTier')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrandStatus",
        "type": "class",
        "file_path": "identity/core/commercial/commercial_module.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/commercial/__init__.py",
          "action": "add_export",
          "code": "from .commercial_module import BrandStatus",
          "export": "__all__.append('BrandStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrandPrefix",
        "type": "dataclass",
        "file_path": "identity/core/commercial/commercial_module.py",
        "line_number": 49,
        "methods": [
          "is_valid"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/commercial/__init__.py",
          "action": "add_export",
          "code": "from .commercial_module import BrandPrefix",
          "export": "__all__.append('BrandPrefix')"
        }
      ]
    },
    {
      "entity": {
        "name": "CommercialLambdaIDResult",
        "type": "dataclass",
        "file_path": "identity/core/commercial/commercial_module.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/commercial/__init__.py",
          "action": "add_export",
          "code": "from .commercial_module import CommercialLambdaIDResult",
          "export": "__all__.append('CommercialLambdaIDResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "SynchronizationMode",
        "type": "class",
        "file_path": "identity/core/integrations/consciousness_bridge.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_bridge import SynchronizationMode",
          "export": "__all__.append('SynchronizationMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessSync",
        "type": "dataclass",
        "file_path": "identity/core/integrations/consciousness_bridge.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_bridge import ConsciousnessSync",
          "export": "__all__.append('ConsciousnessSync')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessBridgeResult",
        "type": "dataclass",
        "file_path": "identity/core/integrations/consciousness_bridge.py",
        "line_number": 86,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_bridge import ConsciousnessBridgeResult",
          "export": "__all__.append('ConsciousnessBridgeResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceType",
        "type": "class",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferenceType",
          "export": "__all__.append('InferenceType')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferencePriority",
        "type": "class",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferencePriority",
          "export": "__all__.append('InferencePriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceConfidenceLevel",
        "type": "class",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferenceConfidenceLevel",
          "export": "__all__.append('InferenceConfidenceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceRequest",
        "type": "dataclass",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 61,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferenceRequest",
          "export": "__all__.append('InferenceRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceResult",
        "type": "dataclass",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 82,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferenceResult",
          "export": "__all__.append('InferenceResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceAdapter",
        "type": "class",
        "file_path": "identity/core/integrations/inference_adapter.py",
        "line_number": 113,
        "methods": [
          "__init__",
          "submit_inference_request",
          "process_inference_request",
          "verify_identity_inference",
          "analyze_authentication_patterns",
          "detect_authentication_anomalies",
          "assess_authentication_risk",
          "get_inference_statistics",
          "_validate_inference_request",
          "_check_inference_permissions",
          "_get_priority_weight",
          "_route_inference_request",
          "_process_identity_verification",
          "_process_pattern_analysis",
          "_process_anomaly_detection",
          "_process_risk_assessment",
          "_process_authentication_decision",
          "_process_generic_inference",
          "_enhance_identity_verification_result",
          "_update_identity_context",
          "_generate_request_id",
          "_get_risk_mitigations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .inference_adapter import InferenceAdapter",
          "export": "__all__.append('InferenceAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAccessLevel",
        "type": "class",
        "file_path": "identity/core/integrations/memory_connector.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .memory_connector import MemoryAccessLevel",
          "export": "__all__.append('MemoryAccessLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryRecord",
        "type": "dataclass",
        "file_path": "identity/core/integrations/memory_connector.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .memory_connector import MemoryRecord",
          "export": "__all__.append('MemoryRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryQuery",
        "type": "dataclass",
        "file_path": "identity/core/integrations/memory_connector.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .memory_connector import MemoryQuery",
          "export": "__all__.append('MemoryQuery')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationResult",
        "type": "dataclass",
        "file_path": "identity/core/integrations/memory_connector.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .memory_connector import MemoryIntegrationResult",
          "export": "__all__.append('MemoryIntegrationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryConnector",
        "type": "class",
        "file_path": "identity/core/integrations/memory_connector.py",
        "line_number": 93,
        "methods": [
          "__init__",
          "store_identity_memory",
          "retrieve_identity_memories",
          "create_biographical_anchor",
          "verify_biographical_memory",
          "get_authentication_patterns",
          "_validate_memory_data",
          "_create_memory_record",
          "_encrypt_memory_record",
          "_decrypt_memory_record",
          "_apply_memory_filters",
          "_check_memory_access",
          "_sort_memories_by_relevance",
          "_update_access_patterns",
          "_integrate_with_external_memory",
          "_create_verification_anchor",
          "_calculate_biographical_match",
          "_serialize_query",
          "_get_biographical_connector",
          "_get_authentication_connector",
          "_get_consciousness_connector"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/integrations/__init__.py",
          "action": "add_export",
          "code": "from .memory_connector import MemoryConnector",
          "export": "__all__.append('MemoryConnector')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHType",
        "type": "class",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GLYPHType",
          "export": "__all__.append('GLYPHType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHComplexity",
        "type": "class",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GLYPHComplexity",
          "export": "__all__.append('GLYPHComplexity')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHGenerationTask",
        "type": "dataclass",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GLYPHGenerationTask",
          "export": "__all__.append('GLYPHGenerationTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHFragment",
        "type": "dataclass",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GLYPHFragment",
          "export": "__all__.append('GLYPHFragment')"
        }
      ]
    },
    {
      "entity": {
        "name": "GeneratedGLYPH",
        "type": "dataclass",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 85,
        "methods": [
          "to_pil_image",
          "to_base64"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GeneratedGLYPH",
          "export": "__all__.append('GeneratedGLYPH')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHGenerationAgent",
        "type": "class",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 111,
        "methods": [
          "__init__",
          "_create_flower_of_life",
          "_create_metatron_cube",
          "_create_fibonacci_spiral",
          "_create_fractal_pattern",
          "_create_identity_gradient",
          "_blend_consciousness_colors",
          "_create_default_consciousness_pattern",
          "_encode_consciousness_data",
          "_overlay_dream_patterns",
          "_simulate_steganographic_embedding",
          "_evaluate_fragment_quality"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import GLYPHGenerationAgent",
          "export": "__all__.append('GLYPHGenerationAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedGLYPHColony",
        "type": "class",
        "file_path": "identity/core/glyph/distributed_glyph_generation.py",
        "line_number": 564,
        "methods": [
          "__init__",
          "_determine_complexity",
          "_determine_required_fragments",
          "_create_fragment_params",
          "_generate_quantum_seed",
          "_extract_consciousness_pattern",
          "_calculate_glyph_quality",
          "get_colony_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .distributed_glyph_generation import DistributedGLYPHColony",
          "export": "__all__.append('DistributedGLYPHColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmbeddingMethod",
        "type": "class",
        "file_path": "identity/core/glyph/steganographic_id.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .steganographic_id import EmbeddingMethod",
          "export": "__all__.append('EmbeddingMethod')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmbeddingStrength",
        "type": "class",
        "file_path": "identity/core/glyph/steganographic_id.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .steganographic_id import EmbeddingStrength",
          "export": "__all__.append('EmbeddingStrength')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityEmbedData",
        "type": "dataclass",
        "file_path": "identity/core/glyph/steganographic_id.py",
        "line_number": 53,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .steganographic_id import IdentityEmbedData",
          "export": "__all__.append('IdentityEmbedData')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmbeddingResult",
        "type": "dataclass",
        "file_path": "identity/core/glyph/steganographic_id.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .steganographic_id import EmbeddingResult",
          "export": "__all__.append('EmbeddingResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHType",
        "type": "class",
        "file_path": "identity/core/glyph/glyph_pipeline.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .glyph_pipeline import GLYPHType",
          "export": "__all__.append('GLYPHType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHSecurityLevel",
        "type": "class",
        "file_path": "identity/core/glyph/glyph_pipeline.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .glyph_pipeline import GLYPHSecurityLevel",
          "export": "__all__.append('GLYPHSecurityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHGenerationRequest",
        "type": "dataclass",
        "file_path": "identity/core/glyph/glyph_pipeline.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .glyph_pipeline import GLYPHGenerationRequest",
          "export": "__all__.append('GLYPHGenerationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHGenerationResult",
        "type": "dataclass",
        "file_path": "identity/core/glyph/glyph_pipeline.py",
        "line_number": 86,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .glyph_pipeline import GLYPHGenerationResult",
          "export": "__all__.append('GLYPHGenerationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYPHPipeline",
        "type": "class",
        "file_path": "identity/core/glyph/glyph_pipeline.py",
        "line_number": 101,
        "methods": [
          "__init__",
          "generate_glyph",
          "verify_glyph",
          "_generate_glyph_id",
          "_prepare_identity_data",
          "_create_user_profile",
          "_select_qrg_type",
          "_embed_identity_features",
          "_add_steganographic_layers",
          "_generate_orb_visualization",
          "_generate_quantum_signature",
          "_compile_security_metadata",
          "_create_final_glyph_image",
          "_get_cultural_colors",
          "_get_tier_security_features",
          "_verify_quantum_signature",
          "_verify_steganographic_layers",
          "_verify_identity_embedding",
          "get_pipeline_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/glyph/__init__.py",
          "action": "add_export",
          "code": "from .glyph_pipeline import GLYPHPipeline",
          "export": "__all__.append('GLYPHPipeline')"
        }
      ]
    },
    {
      "entity": {
        "name": "SessionReplayManager",
        "type": "class",
        "file_path": "identity/core/qrs/session_replay.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "create_replay_session",
          "restore_session",
          "invalidate_session"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/qrs/__init__.py",
          "action": "add_export",
          "code": "from .session_replay import SessionReplayManager",
          "export": "__all__.append('SessionReplayManager')"
        },
        {
          "integration_point": "identity_hub.py",
          "action": "register_service",
          "code": "self.register_service('sessionreplaymanager', SessionReplayManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingComplexity",
        "type": "class",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_config import OnboardingComplexity",
          "export": "__all__.append('OnboardingComplexity')"
        }
      ]
    },
    {
      "entity": {
        "name": "StageConfiguration",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_config import StageConfiguration",
          "export": "__all__.append('StageConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonalityFlowConfig",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_config import PersonalityFlowConfig",
          "export": "__all__.append('PersonalityFlowConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalConfiguration",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_config import CulturalConfiguration",
          "export": "__all__.append('CulturalConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingSystemConfig",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding_config.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding_config import OnboardingSystemConfig",
          "export": "__all__.append('OnboardingSystemConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingContext",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding import OnboardingContext",
          "export": "__all__.append('OnboardingContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingProgress",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding import OnboardingProgress",
          "export": "__all__.append('OnboardingProgress')"
        }
      ]
    },
    {
      "entity": {
        "name": "OnboardingRecommendation",
        "type": "dataclass",
        "file_path": "identity/core/onboarding/onboarding.py",
        "line_number": 97,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/onboarding/__init__.py",
          "action": "add_export",
          "code": "from .onboarding import OnboardingRecommendation",
          "export": "__all__.append('OnboardingRecommendation')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaSSOEngine",
        "type": "class",
        "file_path": "identity/core/sing/sso_engine.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "generate_sso_token",
          "validate_token",
          "authenticate_with_qr_glyph",
          "authenticate_with_biometric_fallback",
          "sync_tokens_across_devices",
          "revoke_token",
          "register_service",
          "_generate_token_id",
          "_generate_access_token",
          "_generate_symbolic_signature",
          "_generate_qr_glyph",
          "_validate_scope_access",
          "_check_session_limits",
          "_is_token_expired",
          "_invalidate_token",
          "_determine_platform_compatibility",
          "_check_biometric_availability",
          "_register_device",
          "_validate_device_trust",
          "_get_trusted_devices",
          "_calculate_remaining_time",
          "_create_symbolic_challenge",
          "_parse_qr_glyph",
          "_validate_qr_glyph_signature",
          "_verify_symbolic_challenge",
          "_validate_biometric_data",
          "_sign_qr_glyph",
          "_create_device_sync_token",
          "_register_sync_token",
          "_notify_services_token_revoked"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/sing/__init__.py",
          "action": "add_export",
          "code": "from .sso_engine import LambdaSSOEngine",
          "export": "__all__.append('LambdaSSOEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossDeviceTokenManager",
        "type": "class",
        "file_path": "identity/core/sing/cross_device_manager.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "sync_token_to_device",
          "invalidate_device_tokens",
          "get_device_tokens"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/sing/__init__.py",
          "action": "add_export",
          "code": "from .cross_device_manager import CrossDeviceTokenManager",
          "export": "__all__.append('CrossDeviceTokenManager')"
        },
        {
          "integration_point": "identity_hub.py",
          "action": "register_service",
          "code": "self.register_service('crossdevicetokenmanager', CrossDeviceTokenManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "TierCapability",
        "type": "class",
        "file_path": "identity/core/tier/tier_manager.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tier/__init__.py",
          "action": "add_export",
          "code": "from .tier_manager import TierCapability",
          "export": "__all__.append('TierCapability')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierRequirements",
        "type": "dataclass",
        "file_path": "identity/core/tier/tier_manager.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/core/tier/__init__.py",
          "action": "add_export",
          "code": "from .tier_manager import TierRequirements",
          "export": "__all__.append('TierRequirements')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuthenticationMethod",
        "type": "class",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import AuthenticationMethod",
          "export": "__all__.append('AuthenticationMethod')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserRole",
        "type": "class",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import UserRole",
          "export": "__all__.append('UserRole')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuthenticationStatus",
        "type": "class",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import AuthenticationStatus",
          "export": "__all__.append('AuthenticationStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnterpriseUser",
        "type": "dataclass",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import EnterpriseUser",
          "export": "__all__.append('EnterpriseUser')"
        }
      ]
    },
    {
      "entity": {
        "name": "SAMLConfiguration",
        "type": "dataclass",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import SAMLConfiguration",
          "export": "__all__.append('SAMLConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "OAuthConfiguration",
        "type": "dataclass",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import OAuthConfiguration",
          "export": "__all__.append('OAuthConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "LDAPConfiguration",
        "type": "dataclass",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 139,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import LDAPConfiguration",
          "export": "__all__.append('LDAPConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnterpriseAuthenticationModule",
        "type": "class",
        "file_path": "identity/enterprise/auth.py",
        "line_number": 154,
        "methods": [
          "__init__",
          "_load_config",
          "_initialize_encryption",
          "_load_authentication_providers",
          "authenticate_user",
          "_authenticate_ldap",
          "_authenticate_oauth",
          "_authenticate_saml",
          "_authenticate_jwt",
          "_authenticate_certificate",
          "verify_mfa",
          "refresh_token",
          "validate_session",
          "logout",
          "get_user_permissions",
          "check_permission",
          "_generate_session_id",
          "_generate_mfa_token",
          "_generate_tokens",
          "_create_session",
          "_failed_auth_result",
          "_requires_mfa",
          "_get_user_permissions",
          "_create_enterprise_user_from_ldap",
          "_create_enterprise_user_from_oauth",
          "_create_enterprise_user_from_saml",
          "_get_or_create_user",
          "_extract_saml_attributes",
          "_verify_totp_code",
          "_verify_sms_code",
          "_verify_email_code"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/enterprise/__init__.py",
          "action": "add_export",
          "code": "from .auth import EnterpriseAuthenticationModule",
          "export": "__all__.append('EnterpriseAuthenticationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAwarenessProtocol",
        "type": "class",
        "file_path": "identity/lukhas_identity/security/awareness_protocol.py",
        "line_number": 5,
        "methods": [
          "__init__",
          "assess_awareness",
          "_generate_context_vector",
          "_calculate_confidence",
          "_determine_tier"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/lukhas_identity/security/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import LucasAwarenessProtocol",
          "export": "__all__.append('LucasAwarenessProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyBeacon",
        "type": "class",
        "file_path": "identity/wearables_integration/entropy_beacon.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "start_broadcast",
          "stop_broadcast",
          "generate_entropy_fingerprint",
          "assign_entropy_weight",
          "track_contribution",
          "get_current_time",
          "sign_broadcast",
          "verify_broadcast_signature"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/wearables_integration/__init__.py",
          "action": "add_export",
          "code": "from .entropy_beacon import EntropyBeacon",
          "export": "__all__.append('EntropyBeacon')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConstitutionalThresholds",
        "type": "dataclass",
        "file_path": "identity/auth/constitutional_gatekeeper.py",
        "line_number": 32,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_gatekeeper import ConstitutionalThresholds",
          "export": "__all__.append('ConstitutionalThresholds')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessQRPattern",
        "type": "dataclass",
        "file_path": "identity/auth/qrg_generators.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .qrg_generators import ConsciousnessQRPattern",
          "export": "__all__.append('ConsciousnessQRPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalQRTheme",
        "type": "dataclass",
        "file_path": "identity/auth/qrg_generators.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .qrg_generators import CulturalQRTheme",
          "export": "__all__.append('CulturalQRTheme')"
        }
      ]
    },
    {
      "entity": {
        "name": "AccessibilityProfile",
        "type": "class",
        "file_path": "identity/auth/cultural_profile_manager.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .cultural_profile_manager import AccessibilityProfile",
          "export": "__all__.append('AccessibilityProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveSyncAdapter",
        "type": "class",
        "file_path": "identity/auth/cognitive_sync_adapter.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "adjust_sync_rate",
          "detect_anomalies",
          "predict_sync_rate",
          "validate_sync_rate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_sync_adapter import CognitiveSyncAdapter",
          "export": "__all__.append('CognitiveSyncAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeviceType",
        "type": "class",
        "file_path": "identity/auth/entropy_synchronizer.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .entropy_synchronizer import DeviceType",
          "export": "__all__.append('DeviceType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropySource",
        "type": "dataclass",
        "file_path": "identity/auth/entropy_synchronizer.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .entropy_synchronizer import EntropySource",
          "export": "__all__.append('EntropySource')"
        }
      ]
    },
    {
      "entity": {
        "name": "UIAdaptationMode",
        "type": "class",
        "file_path": "identity/auth/adaptive_ui_controller.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_ui_controller import UIAdaptationMode",
          "export": "__all__.append('UIAdaptationMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveLoadMetrics",
        "type": "dataclass",
        "file_path": "identity/auth/adaptive_ui_controller.py",
        "line_number": 38,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_ui_controller import CognitiveLoadMetrics",
          "export": "__all__.append('CognitiveLoadMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "UIConfiguration",
        "type": "dataclass",
        "file_path": "identity/auth/adaptive_ui_controller.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_ui_controller import UIConfiguration",
          "export": "__all__.append('UIConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveUIController",
        "type": "class",
        "file_path": "identity/auth/adaptive_ui_controller.py",
        "line_number": 59,
        "methods": [
          "__init__",
          "_get_default_config",
          "assess_cognitive_load",
          "_calculate_fatigue_level",
          "adapt_ui_to_cognitive_state",
          "get_adaptation_mode",
          "add_adaptation_callback",
          "get_ui_state_summary",
          "emergency_ui_reset"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/auth/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_ui_controller import AdaptiveUIController",
          "export": "__all__.append('AdaptiveUIController')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyScore",
        "type": "dataclass",
        "file_path": "identity/utils/entropy_calculator.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .entropy_calculator import EntropyScore",
          "export": "__all__.append('EntropyScore')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecureRandomGenerator",
        "type": "class",
        "file_path": "identity/utils/entropy_helpers.py",
        "line_number": 76,
        "methods": [
          "__init__",
          "generate_secure_bytes",
          "generate_secure_string",
          "assess_entropy_strength"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .entropy_helpers import SecureRandomGenerator",
          "export": "__all__.append('SecureRandomGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicCategory",
        "type": "class",
        "file_path": "identity/utils/symbolic_parser.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_parser import SymbolicCategory",
          "export": "__all__.append('SymbolicCategory')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticType",
        "type": "class",
        "file_path": "identity/utils/symbolic_parser.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_parser import SemanticType",
          "export": "__all__.append('SemanticType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ParsedSymbol",
        "type": "dataclass",
        "file_path": "identity/utils/symbolic_parser.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_parser import ParsedSymbol",
          "export": "__all__.append('ParsedSymbol')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalAnalysis",
        "type": "dataclass",
        "file_path": "identity/utils/symbolic_parser.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_parser import CulturalAnalysis",
          "export": "__all__.append('CulturalAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRGParser",
        "type": "class",
        "file_path": "identity/utils/qrg_parser.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "parse_qr_code",
          "validate_qr_format",
          "extract_metadata"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .qrg_parser import QRGParser",
          "export": "__all__.append('QRGParser')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYMPHParser",
        "type": "class",
        "file_path": "identity/utils/qrg_parser.py",
        "line_number": 49,
        "methods": [
          "__init__",
          "parse_glymph",
          "interpret_symbols",
          "validate_glymph_sequence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/utils/__init__.py",
          "action": "add_export",
          "code": "from .qrg_parser import GLYMPHParser",
          "export": "__all__.append('GLYMPHParser')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityProfile",
        "type": "dataclass",
        "file_path": "identity/backend/seedra/seedra_core.py",
        "line_number": 20,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .seedra_core import IdentityProfile",
          "export": "__all__.append('IdentityProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "VerificationAttempt",
        "type": "dataclass",
        "file_path": "identity/backend/seedra/seedra_core.py",
        "line_number": 41,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .seedra_core import VerificationAttempt",
          "export": "__all__.append('VerificationAttempt')"
        }
      ]
    },
    {
      "entity": {
        "name": "SEEDRACore",
        "type": "class",
        "file_path": "identity/backend/seedra/seedra_core.py",
        "line_number": 56,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .seedra_core import SEEDRACore",
          "export": "__all__.append('SEEDRACore')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricMatch",
        "type": "dataclass",
        "file_path": "identity/backend/seedra/biometric_engine.py",
        "line_number": 36,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .biometric_engine import BiometricMatch",
          "export": "__all__.append('BiometricMatch')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricEngine",
        "type": "class",
        "file_path": "identity/backend/seedra/biometric_engine.py",
        "line_number": 50,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .biometric_engine import BiometricEngine",
          "export": "__all__.append('BiometricEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationRule",
        "type": "dataclass",
        "file_path": "identity/backend/seedra/identity_validator.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .identity_validator import ValidationRule",
          "export": "__all__.append('ValidationRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityValidator",
        "type": "class",
        "file_path": "identity/backend/seedra/identity_validator.py",
        "line_number": 42,
        "methods": [
          "__init__",
          "_initialize_default_rules",
          "_calculate_risk_level",
          "_generate_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/__init__.py",
          "action": "add_export",
          "code": "from .identity_validator import IdentityValidator",
          "export": "__all__.append('IdentityValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SEEDRAv3Ethics",
        "type": "class",
        "file_path": "identity/backend/seedra/ethics/seedra_ethics_engine.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "validate_action",
          "_calculate_risk",
          "_determine_tier",
          "_sign_validation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/ethics/__init__.py",
          "action": "add_export",
          "code": "from .seedra_ethics_engine import SEEDRAv3Ethics",
          "export": "__all__.append('SEEDRAv3Ethics')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumOptimizer",
        "type": "class",
        "file_path": "identity/backend/seedra/ethics/seedra_ethics_engine.py",
        "line_number": 96,
        "methods": [
          "__init__",
          "quantum_anneal_trauma",
          "_anneal"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/seedra/ethics/__init__.py",
          "action": "add_export",
          "code": "from .seedra_ethics_engine import QuantumOptimizer",
          "export": "__all__.append('QuantumOptimizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionType",
        "type": "class",
        "file_path": "identity/backend/verifold/entropy_fusion.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .entropy_fusion import EmotionType",
          "export": "__all__.append('EmotionType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsWeight",
        "type": "class",
        "file_path": "identity/backend/verifold/entropy_fusion.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .entropy_fusion import EthicsWeight",
          "export": "__all__.append('EthicsWeight')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicContext",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/entropy_fusion.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .entropy_fusion import SymbolicContext",
          "export": "__all__.append('SymbolicContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyFusionEngine",
        "type": "class",
        "file_path": "identity/backend/verifold/entropy_fusion.py",
        "line_number": 100,
        "methods": [
          "__init__",
          "_init_emotion_weights",
          "fuse_entropy_symbolic",
          "_grade_fusion",
          "analyze_entropy_patterns",
          "generate_symbolic_narrative",
          "export_fusion_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .entropy_fusion import EntropyFusionEngine",
          "export": "__all__.append('EntropyFusionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicValidator",
        "type": "class",
        "file_path": "identity/backend/verifold/entropy_fusion.py",
        "line_number": 227,
        "methods": [
          "__init__",
          "validate_fusion_result"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .entropy_fusion import SymbolicValidator",
          "export": "__all__.append('SymbolicValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseHashSetup",
        "type": "class",
        "file_path": "identity/backend/verifold/setup_project.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "check_python_version",
          "install_dependencies",
          "_verify_critical_imports",
          "create_directories",
          "create_config",
          "setup_test_environment",
          "run_validation_tests",
          "print_setup_summary",
          "run_full_setup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .setup_project import CollapseHashSetup",
          "export": "__all__.append('CollapseHashSetup')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseQREncoder",
        "type": "class",
        "file_path": "identity/backend/verifold/qr_encoder.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "encode_hash_to_qr",
          "_encode_url_format",
          "_encode_json_format",
          "_encode_binary_format",
          "_generate_qr_image",
          "generate_verification_qr_batch",
          "decode_qr_to_hash"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .qr_encoder import CollapseQREncoder",
          "export": "__all__.append('CollapseQREncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplayEvent",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/verifold_replay_engine.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_replay_engine import ReplayEvent",
          "export": "__all__.append('ReplayEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('replayevent', ReplayEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ReplaySequence",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/verifold_replay_engine.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_replay_engine import ReplaySequence",
          "export": "__all__.append('ReplaySequence')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseReplayEngine",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_replay_engine.py",
        "line_number": 55,
        "methods": [
          "__init__",
          "load_collapse_sequence",
          "create_replay_sequence",
          "_create_replay_event",
          "_classify_event_type",
          "_generate_event_narrative",
          "_analyze_sequence_integrity",
          "_generate_sequence_narrative",
          "replay_sequence",
          "_print_replay_event",
          "export_replay_report",
          "_export_markdown_report",
          "find_anomalies"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_replay_engine import CollapseReplayEngine",
          "export": "__all__.append('CollapseReplayEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "HardwareType",
        "type": "class",
        "file_path": "identity/backend/verifold/hardware_entropy_seed.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .hardware_entropy_seed import HardwareType",
          "export": "__all__.append('HardwareType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropySource",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/hardware_entropy_seed.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .hardware_entropy_seed import EntropySource",
          "export": "__all__.append('EntropySource')"
        }
      ]
    },
    {
      "entity": {
        "name": "HardwareEntropySeeder",
        "type": "class",
        "file_path": "identity/backend/verifold/hardware_entropy_seed.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "discover_entropy_sources",
          "_discover_tpm_devices",
          "_discover_hsm_devices",
          "_discover_trng_devices",
          "_discover_cpu_entropy",
          "_get_system_entropy_source",
          "_check_device_available",
          "_detect_tpm_version",
          "_scan_usb_hsm_devices",
          "_scan_network_hsm_devices",
          "_is_hardware_backed",
          "_has_rdrand_support",
          "_select_preferred_source",
          "generate_entropy_seed",
          "_generate_tpm_entropy",
          "_generate_hsm_entropy",
          "_generate_trng_entropy",
          "_generate_rdrand_entropy",
          "_generate_system_entropy",
          "get_entropy_quality_report",
          "_generate_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .hardware_entropy_seed import HardwareEntropySeeder",
          "export": "__all__.append('HardwareEntropySeeder')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRVerificationRequest",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/web_qr_verifier.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_qr_verifier import QRVerificationRequest",
          "export": "__all__.append('QRVerificationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRVerificationResult",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/web_qr_verifier.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_qr_verifier import QRVerificationResult",
          "export": "__all__.append('QRVerificationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "WebQRVerifier",
        "type": "class",
        "file_path": "identity/backend/verifold/web_qr_verifier.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "_setup_web_app",
          "_setup_flask_app",
          "_setup_fastapi_app",
          "_register_flask_routes",
          "_register_fastapi_routes",
          "verify_qr_hash",
          "_parse_qr_data",
          "_simulate_verification",
          "verify_qr_batch",
          "decode_qr_image",
          "get_verification_stats",
          "create_verification_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_qr_verifier import WebQRVerifier",
          "export": "__all__.append('WebQRVerifier')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseHashGUI",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_gui.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "setup_ui",
          "create_generator_tab",
          "create_verifier_tab",
          "create_chain_tab",
          "create_audit_tab",
          "create_settings_tab",
          "browse_data_file",
          "browse_key_file",
          "browse_logbook",
          "update_entropy_label",
          "generate_hash",
          "verify_signature",
          "batch_verify",
          "verify_chain",
          "rebuild_cache",
          "export_segment",
          "run_full_audit",
          "quick_audit",
          "export_audit_report",
          "save_settings",
          "run"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_gui import CollapseHashGUI",
          "export": "__all__.append('CollapseHashGUI')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseHashWebDashboard",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_gui.py",
        "line_number": 318,
        "methods": [
          "__init__",
          "create_layout",
          "run_server"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_gui import CollapseHashWebDashboard",
          "export": "__all__.append('CollapseHashWebDashboard')"
        }
      ]
    },
    {
      "entity": {
        "name": "VerifoldGenerator",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_hash_pq.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "generate_keypair",
          "generate_verifold_hash",
          "sign_hash"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_hash_pq import VerifoldGenerator",
          "export": "__all__.append('VerifoldGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DashboardDataLoader",
        "type": "class",
        "file_path": "identity/backend/verifold/web_dashboard.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "load_logbook_data",
          "_expand_metadata",
          "get_dashboard_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_dashboard import DashboardDataLoader",
          "export": "__all__.append('DashboardDataLoader')"
        }
      ]
    },
    {
      "entity": {
        "name": "StreamlitDashboard",
        "type": "class",
        "file_path": "identity/backend/verifold/web_dashboard.py",
        "line_number": 179,
        "methods": [
          "__init__",
          "render_dashboard",
          "_render_header",
          "_render_metrics",
          "_render_visualizations",
          "_render_data_table",
          "_render_controls",
          "_create_timeline_plot",
          "_create_entropy_histogram",
          "_create_location_chart"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_dashboard import StreamlitDashboard",
          "export": "__all__.append('StreamlitDashboard')"
        }
      ]
    },
    {
      "entity": {
        "name": "FlaskDashboard",
        "type": "class",
        "file_path": "identity/backend/verifold/web_dashboard.py",
        "line_number": 325,
        "methods": [
          "__init__",
          "_register_routes",
          "run"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .web_dashboard import FlaskDashboard",
          "export": "__all__.append('FlaskDashboard')"
        }
      ]
    },
    {
      "entity": {
        "name": "YubiDeviceType",
        "type": "class",
        "file_path": "identity/backend/verifold/yubi_seeder.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .yubi_seeder import YubiDeviceType",
          "export": "__all__.append('YubiDeviceType')"
        }
      ]
    },
    {
      "entity": {
        "name": "YubiOperation",
        "type": "class",
        "file_path": "identity/backend/verifold/yubi_seeder.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .yubi_seeder import YubiOperation",
          "export": "__all__.append('YubiOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "YubiDevice",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/yubi_seeder.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .yubi_seeder import YubiDevice",
          "export": "__all__.append('YubiDevice')"
        }
      ]
    },
    {
      "entity": {
        "name": "YubiSession",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/yubi_seeder.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .yubi_seeder import YubiSession",
          "export": "__all__.append('YubiSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "YubiSeeder",
        "type": "class",
        "file_path": "identity/backend/verifold/yubi_seeder.py",
        "line_number": 63,
        "methods": [
          "__init__",
          "discover_yubi_devices",
          "_discover_yubihsm_devices",
          "_discover_yubikey_devices",
          "_check_yubihsm_simulator",
          "_check_yubikey_simulator",
          "create_session",
          "_authenticate_device",
          "_authenticate_yubihsm",
          "_authenticate_yubikey",
          "generate_entropy_from_yubi",
          "_generate_yubihsm_entropy",
          "_generate_yubikey_entropy",
          "sign_with_yubi",
          "_sign_with_yubihsm",
          "_sign_with_yubikey",
          "close_session",
          "get_device_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .yubi_seeder import YubiSeeder",
          "export": "__all__.append('YubiSeeder')"
        }
      ]
    },
    {
      "entity": {
        "name": "ChainValidator",
        "type": "class",
        "file_path": "identity/backend/verifold/verifold_chain.py",
        "line_number": 123,
        "methods": [
          "__init__",
          "validate_full_chain",
          "validate_chain_segment",
          "check_temporal_consistency",
          "verify_hash_uniqueness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .verifold_chain import ChainValidator",
          "export": "__all__.append('ChainValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LedgerAuditor",
        "type": "class",
        "file_path": "identity/backend/verifold/ledger_auditor.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_get_record_schema",
          "audit_full_ledger",
          "validate_record_schema",
          "verify_signatures_batch",
          "analyze_temporal_consistency",
          "detect_duplicate_hashes",
          "analyze_hash_entropy",
          "check_ledger_integrity",
          "generate_forensic_report",
          "repair_ledger",
          "export_audit_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .ledger_auditor import LedgerAuditor",
          "export": "__all__.append('LedgerAuditor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContinuousAuditor",
        "type": "class",
        "file_path": "identity/backend/verifold/ledger_auditor.py",
        "line_number": 219,
        "methods": [
          "__init__",
          "add_alert_callback",
          "start_monitoring",
          "stop_monitoring",
          "check_for_anomalies"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .ledger_auditor import ContinuousAuditor",
          "export": "__all__.append('ContinuousAuditor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceChecker",
        "type": "class",
        "file_path": "identity/backend/verifold/ledger_auditor.py",
        "line_number": 268,
        "methods": [
          "__init__",
          "_get_quantum_standards",
          "_get_crypto_standards",
          "_get_temporal_standards",
          "check_compliance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .ledger_auditor import ComplianceChecker",
          "export": "__all__.append('ComplianceChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionVocabulary",
        "type": "class",
        "file_path": "identity/backend/verifold/narrative_utils.py",
        "line_number": 46,
        "methods": [
          "__init__",
          "_build_emotion_mappings",
          "_build_intensity_modifiers",
          "_build_quantum_metaphors",
          "get_emotion_words",
          "create_emotion_phrase"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .narrative_utils import EmotionVocabulary",
          "export": "__all__.append('EmotionVocabulary')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumNarrativeGenerator",
        "type": "class",
        "file_path": "identity/backend/verifold/narrative_utils.py",
        "line_number": 205,
        "methods": [
          "__init__",
          "_build_narrative_templates",
          "generate_narrative",
          "_determine_intensity",
          "_create_hash_snippet",
          "_describe_precision",
          "_apply_style_formatting",
          "generate_gpt_narrative",
          "_create_gpt_prompt"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .narrative_utils import QuantumNarrativeGenerator",
          "export": "__all__.append('QuantumNarrativeGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicVocabularyExpander",
        "type": "class",
        "file_path": "identity/backend/verifold/narrative_utils.py",
        "line_number": 444,
        "methods": [
          "__init__",
          "_load_custom_vocabulary",
          "add_custom_emotion",
          "learn_from_usage",
          "_save_vocabulary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .narrative_utils import SymbolicVocabularyExpander",
          "export": "__all__.append('SymbolicVocabularyExpander')"
        }
      ]
    },
    {
      "entity": {
        "name": "JournalEntry",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/journal_mode.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/__init__.py",
          "action": "add_export",
          "code": "from .journal_mode import JournalEntry",
          "export": "__all__.append('JournalEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsViolationType",
        "type": "class",
        "file_path": "identity/backend/verifold/identity/ethics_verifier.py",
        "line_number": 12,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/identity/__init__.py",
          "action": "add_export",
          "code": "from .ethics_verifier import EthicsViolationType",
          "export": "__all__.append('EthicsViolationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryShare",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/identity/recovery_protocols.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/identity/__init__.py",
          "action": "add_export",
          "code": "from .recovery_protocols import RecoveryShare",
          "export": "__all__.append('RecoveryShare')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldWebJournal",
        "type": "class",
        "file_path": "identity/backend/verifold/web_journal/web_journal_app.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "setup_routes",
          "load_journal_entries",
          "_get_sample_entries",
          "_get_emotion_color",
          "_get_quantum_symbol",
          "generate_live_summary",
          "run"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/web_journal/__init__.py",
          "action": "add_export",
          "code": "from .web_journal_app import VeriFoldWebJournal",
          "export": "__all__.append('VeriFoldWebJournal')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdversaryType",
        "type": "class",
        "file_path": "identity/backend/verifold/security/symbolic_adversary_agent.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/security/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_adversary_agent import AdversaryType",
          "export": "__all__.append('AdversaryType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttackScenario",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/security/symbolic_adversary_agent.py",
        "line_number": 20,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/security/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_adversary_agent import AttackScenario",
          "export": "__all__.append('AttackScenario')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicAdversaryAgent",
        "type": "class",
        "file_path": "identity/backend/verifold/security/symbolic_adversary_agent.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "simulate_lucas_id_impersonation",
          "attempt_memory_replay_injection",
          "test_cryptographic_downgrade",
          "simulate_social_engineering",
          "generate_threat_assessment"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/security/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_adversary_agent import SymbolicAdversaryAgent",
          "export": "__all__.append('SymbolicAdversaryAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "MutationType",
        "type": "class",
        "file_path": "identity/backend/verifold/security/glyph_mutation_simulator.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/security/__init__.py",
          "action": "add_export",
          "code": "from .glyph_mutation_simulator import MutationType",
          "export": "__all__.append('MutationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphMutationSimulator",
        "type": "class",
        "file_path": "identity/backend/verifold/security/glyph_mutation_simulator.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "corrupt_qr_pixels",
          "inject_malicious_stego",
          "simulate_qr_degradation",
          "spoof_tier_level",
          "generate_attack_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/security/__init__.py",
          "action": "add_export",
          "code": "from .glyph_mutation_simulator import GlyphMutationSimulator",
          "export": "__all__.append('GlyphMutationSimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "FSPIBEParams",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/cryptography/forward_secure_pibe.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .forward_secure_pibe import FSPIBEParams",
          "export": "__all__.append('FSPIBEParams')"
        }
      ]
    },
    {
      "entity": {
        "name": "ForwardSecurePIBE",
        "type": "class",
        "file_path": "identity/backend/verifold/cryptography/forward_secure_pibe.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "setup",
          "extract_key",
          "encrypt",
          "decrypt",
          "puncture"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .forward_secure_pibe import ForwardSecurePIBE",
          "export": "__all__.append('ForwardSecurePIBE')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityTier",
        "type": "class",
        "file_path": "identity/backend/verifold/cryptography/crypto_router.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .crypto_router import SecurityTier",
          "export": "__all__.append('SecurityTier')"
        }
      ]
    },
    {
      "entity": {
        "name": "CryptoRouter",
        "type": "class",
        "file_path": "identity/backend/verifold/cryptography/crypto_router.py",
        "line_number": 39,
        "methods": [
          "__init__",
          "select_signature_scheme",
          "select_encryption_scheme",
          "get_side_channel_resistance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .crypto_router import CryptoRouter",
          "export": "__all__.append('CryptoRouter')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicNarrative",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/cryptography/zk_narrative_proof_adapter.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .zk_narrative_proof_adapter import SymbolicNarrative",
          "export": "__all__.append('SymbolicNarrative')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZKNarrativeProofAdapter",
        "type": "class",
        "file_path": "identity/backend/verifold/cryptography/zk_narrative_proof_adapter.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "generate_proof_circuit",
          "create_experience_proof",
          "verify_narrative_proof"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/cryptography/__init__.py",
          "action": "add_export",
          "code": "from .zk_narrative_proof_adapter import ZKNarrativeProofAdapter",
          "export": "__all__.append('ZKNarrativeProofAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "BlockchainEvent",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/web3/verifold_bridge_adapter.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/web3/__init__.py",
          "action": "add_export",
          "code": "from .verifold_bridge_adapter import BlockchainEvent",
          "export": "__all__.append('BlockchainEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('blockchainevent', BlockchainEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldBridgeAdapter",
        "type": "class",
        "file_path": "identity/backend/verifold/web3/verifold_bridge_adapter.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "export_to_blockchain",
          "create_nft_metadata",
          "verify_cross_chain_integrity",
          "synchronize_lucas_id"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/web3/__init__.py",
          "action": "add_export",
          "code": "from .verifold_bridge_adapter import VeriFoldBridgeAdapter",
          "export": "__all__.append('VeriFoldBridgeAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionMetadata",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/web3/emotion_nft_standard.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/web3/__init__.py",
          "action": "add_export",
          "code": "from .emotion_nft_standard import EmotionMetadata",
          "export": "__all__.append('EmotionMetadata')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionNFTStandard",
        "type": "class",
        "file_path": "identity/backend/verifold/web3/emotion_nft_standard.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "mint_emotion_nft",
          "verify_emotional_authenticity",
          "encode_sentiment_vector",
          "create_temporal_signature"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/web3/__init__.py",
          "action": "add_export",
          "code": "from .emotion_nft_standard import EmotionNFTStandard",
          "export": "__all__.append('EmotionNFTStandard')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditEvent",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/compliance/symbolic_audit_mode.py",
        "line_number": 14,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/compliance/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_audit_mode import AuditEvent",
          "export": "__all__.append('AuditEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('auditevent', AuditEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicAuditMode",
        "type": "class",
        "file_path": "identity/backend/verifold/compliance/symbolic_audit_mode.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "create_audit_event",
          "verify_consent_checkpoint",
          "generate_compliance_report",
          "secure_replay_with_audit"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/compliance/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_audit_mode import SymbolicAuditMode",
          "export": "__all__.append('SymbolicAuditMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsentRecord",
        "type": "class",
        "file_path": "identity/backend/verifold/compliance/symbolic_audit_mode.py",
        "line_number": 82,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/compliance/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_audit_mode import ConsentRecord",
          "export": "__all__.append('ConsentRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExportFormat",
        "type": "class",
        "file_path": "identity/backend/verifold/storage/verifold_exporter.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .verifold_exporter import ExportFormat",
          "export": "__all__.append('ExportFormat')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldExporter",
        "type": "class",
        "file_path": "identity/backend/verifold/storage/verifold_exporter.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "export_memory_collapse",
          "export_consent_chain",
          "create_public_glymph",
          "export_to_ipfs",
          "generate_export_manifest"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .verifold_exporter import VeriFoldExporter",
          "export": "__all__.append('VeriFoldExporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "UploadResult",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/storage/filecoin_uploader.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .filecoin_uploader import UploadResult",
          "export": "__all__.append('UploadResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "FilecoinUploader",
        "type": "class",
        "file_path": "identity/backend/verifold/storage/filecoin_uploader.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "upload_encrypted_memory",
          "create_storage_deal",
          "anchor_hash_to_blockchain",
          "retrieve_encrypted_data",
          "monitor_storage_deals"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .filecoin_uploader import FilecoinUploader",
          "export": "__all__.append('FilecoinUploader')"
        }
      ]
    },
    {
      "entity": {
        "name": "ViewMode",
        "type": "class",
        "file_path": "identity/backend/verifold/storage/verifold_vault_viewer.py",
        "line_number": 13,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .verifold_vault_viewer import ViewMode",
          "export": "__all__.append('ViewMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldVaultViewer",
        "type": "class",
        "file_path": "identity/backend/verifold/storage/verifold_vault_viewer.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "load_memory_vault",
          "render_timeline_view",
          "create_journal_format",
          "generate_emotional_heatmap",
          "search_memories",
          "export_vault_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/storage/__init__.py",
          "action": "add_export",
          "code": "from .verifold_vault_viewer import VeriFoldVaultViewer",
          "export": "__all__.append('VeriFoldVaultViewer')"
        }
      ]
    },
    {
      "entity": {
        "name": "NarrativeAlignmentChecker",
        "type": "class",
        "file_path": "identity/backend/verifold/ai/narrative_alignment_checker.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "compute_narrative_fingerprint",
          "track_provenance_record",
          "replay_signature_chain",
          "validate_hash_consistency",
          "detect_hallucination_drift",
          "verify_emotional_authenticity",
          "generate_alignment_report",
          "create_authenticity_proof"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/ai/__init__.py",
          "action": "add_export",
          "code": "from .narrative_alignment_checker import NarrativeAlignmentChecker",
          "export": "__all__.append('NarrativeAlignmentChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "GLYMPHData",
        "type": "dataclass",
        "file_path": "identity/backend/verifold/visual/glyph_stego_encoder.py",
        "line_number": 14,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/visual/__init__.py",
          "action": "add_export",
          "code": "from .glyph_stego_encoder import GLYMPHData",
          "export": "__all__.append('GLYMPHData')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphStegoEncoder",
        "type": "class",
        "file_path": "identity/backend/verifold/visual/glyph_stego_encoder.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "encode_dual_layer",
          "decode_visible_layer",
          "decode_hidden_layer",
          "generate_security_warning",
          "validate_glyph_integrity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/visual/__init__.py",
          "action": "add_export",
          "code": "from .glyph_stego_encoder import GlyphStegoEncoder",
          "export": "__all__.append('GlyphStegoEncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "ScanResult",
        "type": "class",
        "file_path": "identity/backend/verifold/visual/qr_tier_scanner.py",
        "line_number": 12,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/visual/__init__.py",
          "action": "add_export",
          "code": "from .qr_tier_scanner import ScanResult",
          "export": "__all__.append('ScanResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRTierScanner",
        "type": "class",
        "file_path": "identity/backend/verifold/visual/qr_tier_scanner.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "scan_with_tier_check",
          "generate_security_warning",
          "progressive_disclosure",
          "audit_scan_attempt"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/verifold/visual/__init__.py",
          "action": "add_export",
          "code": "from .qr_tier_scanner import QRTierScanner",
          "export": "__all__.append('QRTierScanner')"
        }
      ]
    },
    {
      "entity": {
        "name": "LanguageModelChatMessage",
        "type": "class",
        "file_path": "identity/backend/dream_engine/assistant.py",
        "line_number": 128,
        "methods": [
          "User"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/backend/dream_engine/__init__.py",
          "action": "add_export",
          "code": "from .assistant import LanguageModelChatMessage",
          "export": "__all__.append('LanguageModelChatMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "PreviewResult",
        "type": "dataclass",
        "file_path": "identity/public/lambda_id_previewer.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/public/__init__.py",
          "action": "add_export",
          "code": "from .lambda_id_previewer import PreviewResult",
          "export": "__all__.append('PreviewResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "PublicLambdaIDPreviewer",
        "type": "class",
        "file_path": "identity/public/lambda_id_previewer.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "_load_educational_content",
          "preview_lambda_id",
          "_sanitize_input",
          "_analyze_format",
          "_validate_commercial_lambda_id",
          "_extract_tier",
          "_format_validation_details",
          "_generate_analysis",
          "_get_format_description",
          "_assess_security_strength",
          "_get_security_recommendations",
          "_get_commercial_benefits",
          "_generate_suggestions",
          "_generate_warnings",
          "_get_educational_content",
          "_get_related_demos",
          "generate_demo_lambda_id",
          "get_tier_comparison",
          "get_format_specifications",
          "analyze_entropy_live",
          "get_public_api_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/public/__init__.py",
          "action": "add_export",
          "code": "from .lambda_id_previewer import PublicLambdaIDPreviewer",
          "export": "__all__.append('PublicLambdaIDPreviewer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MobileWebSocketClient",
        "type": "class",
        "file_path": "identity/mobile/websocket_client.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "connect",
          "disconnect",
          "send_message",
          "receive_message",
          "is_connected"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/mobile/__init__.py",
          "action": "add_export",
          "code": "from .websocket_client import MobileWebSocketClient",
          "export": "__all__.append('MobileWebSocketClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "MobileWebSocketClient",
        "type": "class",
        "file_path": "identity/mobile/__init__.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "connect",
          "disconnect",
          "send_message"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/mobile/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import MobileWebSocketClient",
          "export": "__all__.append('MobileWebSocketClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "PolicyProposal",
        "type": "class",
        "file_path": "identity/governance/policy_board.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "cast_vote",
          "is_approved",
          "status_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/governance/__init__.py",
          "action": "add_export",
          "code": "from .policy_board import PolicyProposal",
          "export": "__all__.append('PolicyProposal')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserProfileRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import UserProfileRequest",
          "export": "__all__.append('UserProfileRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicAuthRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 122,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import SymbolicAuthRequest",
          "export": "__all__.append('SymbolicAuthRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRGGenerationRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import QRGGenerationRequest",
          "export": "__all__.append('QRGGenerationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "QRGValidationRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import QRGValidationRequest",
          "export": "__all__.append('QRGValidationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "VaultUpdateRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 147,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import VaultUpdateRequest",
          "export": "__all__.append('VaultUpdateRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricEnrollRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 154,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import BiometricEnrollRequest",
          "export": "__all__.append('BiometricEnrollRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiometricVerifyRequest",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 162,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import BiometricVerifyRequest",
          "export": "__all__.append('BiometricVerifyRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasUnifiedAPI",
        "type": "class",
        "file_path": "identity/api/api.py",
        "line_number": 181,
        "methods": [
          "__init__",
          "_setup_fastapi_middleware",
          "_setup_fastapi_routes",
          "get_fastapi_app_instance",
          "get_qrs_manager",
          "get_tier_manager",
          "get_biometric_manager"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "identity/api/__init__.py",
          "action": "add_export",
          "code": "from .api import LukhasUnifiedAPI",
          "export": "__all__.append('LukhasUnifiedAPI')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackSettings",
        "type": "class",
        "file_path": "config/fallback_settings.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "config/__init__.py",
          "action": "add_export",
          "code": "from .fallback_settings import FallbackSettings",
          "export": "__all__.append('FallbackSettings')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicKnowledgeIntegrator",
        "type": "class",
        "file_path": "config/knowledge/symbolic_knowledge_integration.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "_prepare_reasoning_integration",
          "_create_minimal_fallback_knowledge",
          "get_integration_status",
          "query_integrated_knowledge"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "config/knowledge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_knowledge_integration import SymbolicKnowledgeIntegrator",
          "export": "__all__.append('SymbolicKnowledgeIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeQuantumLikeState",
        "type": "dataclass",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 56,
        "methods": [
          "collapse_to_expression",
          "_decode_expression"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import CreativeQuantumLikeState",
          "export": "__all__.append('CreativeQuantumLikeState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeExpressionProtocol",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import CreativeExpressionProtocol",
          "export": "__all__.append('CreativeExpressionProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeEngine",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 95,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import QuantumCreativeEngine",
          "export": "__all__.append('QuantumCreativeEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumHaikuGenerator",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 294,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import QuantumHaikuGenerator",
          "export": "__all__.append('QuantumHaikuGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMusicComposer",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 468,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import QuantumMusicComposer",
          "export": "__all__.append('QuantumMusicComposer')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioCognitiveCreativityLayer",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 529,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import BioCognitiveCreativityLayer",
          "export": "__all__.append('BioCognitiveCreativityLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeIPProtector",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 580,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import CreativeIPProtector",
          "export": "__all__.append('CreativeIPProtector')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollaborativeCreativityOrchestrator",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 642,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import CollaborativeCreativityOrchestrator",
          "export": "__all__.append('CollaborativeCreativityOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveCreativePersonalization",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 781,
        "methods": [
          "__init__",
          "_compute_personalization_vector",
          "_predict_user_resonance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import AdaptiveCreativePersonalization",
          "export": "__all__.append('AdaptiveCreativePersonalization')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedNeuroHaikuGenerator",
        "type": "class",
        "file_path": "creativity/creative_q_expression.py",
        "line_number": 967,
        "methods": [
          "__init__",
          "generate_haiku"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_q_expression import EnhancedNeuroHaikuGenerator",
          "export": "__all__.append('EnhancedNeuroHaikuGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ShynessModule",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "_update_shyness",
          "get_interaction_style"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import ShynessModule",
          "export": "__all__.append('ShynessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EtiquetteModule",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 34,
        "methods": [
          "__init__",
          "adapt_behavior"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import EtiquetteModule",
          "export": "__all__.append('EtiquetteModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HelpfulnessModule",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "should_offer_help"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import HelpfulnessModule",
          "export": "__all__.append('HelpfulnessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalComplianceSystem",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 71,
        "methods": [
          "__init__",
          "resolve_dilemma"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import EthicalComplianceSystem",
          "export": "__all__.append('EthicalComplianceSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalIntelligenceModule",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "adjust_greeting"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import CulturalIntelligenceModule",
          "export": "__all__.append('CulturalIntelligenceModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HumanizedAGI",
        "type": "class",
        "file_path": "creativity/personality_engine.py",
        "line_number": 102,
        "methods": [
          "__init__",
          "interact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .personality_engine import HumanizedAGI",
          "export": "__all__.append('HumanizedAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTimelineVisualizer",
        "type": "class",
        "file_path": "creativity/dream_timeline_visualizer.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "render_timeline"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_timeline_visualizer import DreamTimelineVisualizer",
          "export": "__all__.append('DreamTimelineVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersonalizedCreation",
        "type": "dataclass",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 233,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import PersonalizedCreation",
          "export": "__all__.append('PersonalizedCreation')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeRequest",
        "type": "dataclass",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 244,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativeRequest",
          "export": "__all__.append('CreativeRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserSession",
        "type": "dataclass",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 255,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import UserSession",
          "export": "__all__.append('UserSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollaborativeSessionRequest",
        "type": "dataclass",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 266,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CollaborativeSessionRequest",
          "export": "__all__.append('CollaborativeSessionRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeComponent",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 277,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumCreativeComponent",
          "export": "__all__.append('QuantumCreativeComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumImaginationProcessor",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 291,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumImaginationProcessor",
          "export": "__all__.append('QuantumImaginationProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEmotionEncoder",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 302,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumEmotionEncoder",
          "export": "__all__.append('QuantumEmotionEncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalQuantumMemory",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 322,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CulturalQuantumMemory",
          "export": "__all__.append('CulturalQuantumMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralCreativityNetwork",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 332,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import NeuralCreativityNetwork",
          "export": "__all__.append('NeuralCreativityNetwork')"
        }
      ]
    },
    {
      "entity": {
        "name": "SynapticInspirationPool",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 342,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SynapticInspirationPool",
          "export": "__all__.append('SynapticInspirationPool')"
        }
      ]
    },
    {
      "entity": {
        "name": "DopamineRewardSystem",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 352,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import DopamineRewardSystem",
          "export": "__all__.append('DopamineRewardSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZeroKnowledgeCreativityValidator",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 362,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import ZeroKnowledgeCreativityValidator",
          "export": "__all__.append('ZeroKnowledgeCreativityValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumVisualArtist",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 374,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumVisualArtist",
          "export": "__all__.append('QuantumVisualArtist')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumStoryWeaver",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 388,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumStoryWeaver",
          "export": "__all__.append('QuantumStoryWeaver')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCodePoet",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 398,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumCodePoet",
          "export": "__all__.append('QuantumCodePoet')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumChoreographer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 408,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumChoreographer",
          "export": "__all__.append('QuantumChoreographer')"
        }
      ]
    },
    {
      "entity": {
        "name": "Quantum3DSculptor",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 423,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import Quantum3DSculptor",
          "export": "__all__.append('Quantum3DSculptor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmCreativityOrchestrator",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 439,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SwarmCreativityOrchestrator",
          "export": "__all__.append('SwarmCreativityOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossCulturalSynthesizer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 450,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CrossCulturalSynthesizer",
          "export": "__all__.append('CrossCulturalSynthesizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSyllableCounter",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 462,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumSyllableCounter",
          "export": "__all__.append('QuantumSyllableCounter')"
        }
      ]
    },
    {
      "entity": {
        "name": "SemanticEntangler",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 472,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SemanticEntangler",
          "export": "__all__.append('SemanticEntangler')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionImageryQuantumMapper",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 482,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import EmotionImageryQuantumMapper",
          "export": "__all__.append('EmotionImageryQuantumMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "PhoneticHarmonyAnalyzer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 492,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import PhoneticHarmonyAnalyzer",
          "export": "__all__.append('PhoneticHarmonyAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "KirejiQuantumSelector",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 502,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import KirejiQuantumSelector",
          "export": "__all__.append('KirejiQuantumSelector')"
        }
      ]
    },
    {
      "entity": {
        "name": "SeasonalReferenceEncoder",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 512,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SeasonalReferenceEncoder",
          "export": "__all__.append('SeasonalReferenceEncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "HarmonicQuantumInspiredProcessor",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 524,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import HarmonicQuantumInspiredProcessor",
          "export": "__all__.append('HarmonicQuantumInspiredProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "RhythmPatternSuperposer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 534,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import RhythmPatternSuperposer",
          "export": "__all__.append('RhythmPatternSuperposer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalMelodyWeaver",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 544,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import EmotionalMelodyWeaver",
          "export": "__all__.append('EmotionalMelodyWeaver')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalScaleQuantumLibrary",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 554,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CulturalScaleQuantumLibrary",
          "export": "__all__.append('CulturalScaleQuantumLibrary')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralOscillator",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 566,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import NeuralOscillator",
          "export": "__all__.append('NeuralOscillator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DopamineCreativityModulator",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 576,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import DopamineCreativityModulator",
          "export": "__all__.append('DopamineCreativityModulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SerotoninMoodHarmonizer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 586,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SerotoninMoodHarmonizer",
          "export": "__all__.append('SerotoninMoodHarmonizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "NorepinephrineFocusEnhancer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 596,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import NorepinephrineFocusEnhancer",
          "export": "__all__.append('NorepinephrineFocusEnhancer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AcetylcholineLearningBridge",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 606,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import AcetylcholineLearningBridge",
          "export": "__all__.append('AcetylcholineLearningBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "SynapticPlasticityEngine",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 616,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import SynapticPlasticityEngine",
          "export": "__all__.append('SynapticPlasticityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "REMDreamSynthesizer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 626,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import REMDreamSynthesizer",
          "export": "__all__.append('REMDreamSynthesizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeBlockchain",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 638,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativeBlockchain",
          "export": "__all__.append('CreativeBlockchain')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumWatermarkEmbedder",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 648,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumWatermarkEmbedder",
          "export": "__all__.append('QuantumWatermarkEmbedder')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativityMeshNetwork",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 660,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativityMeshNetwork",
          "export": "__all__.append('CreativityMeshNetwork')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumIdeaSynthesizer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 670,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumIdeaSynthesizer",
          "export": "__all__.append('QuantumIdeaSynthesizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeConflictHarmonizer",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 680,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativeConflictHarmonizer",
          "export": "__all__.append('CreativeConflictHarmonizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmergenceDetector",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 690,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import EmergenceDetector",
          "export": "__all__.append('EmergenceDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAestheticProfiler",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 702,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import QuantumAestheticProfiler",
          "export": "__all__.append('QuantumAestheticProfiler')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalResonanceTuner",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 712,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CulturalResonanceTuner",
          "export": "__all__.append('CulturalResonanceTuner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalPreferenceLearner",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 722,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import EmotionalPreferenceLearner",
          "export": "__all__.append('EmotionalPreferenceLearner')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativityStyleEvolver",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 734,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativityStyleEvolver",
          "export": "__all__.append('CreativityStyleEvolver')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativityMonitor",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 746,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativityMonitor",
          "export": "__all__.append('CreativityMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeEvolutionEngine",
        "type": "class",
        "file_path": "creativity/quantum_creative_types.py",
        "line_number": 756,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_types import CreativeEvolutionEngine",
          "export": "__all__.append('CreativeEvolutionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeItem",
        "type": "dataclass",
        "file_path": "creativity/creative_market.py",
        "line_number": 31,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_market import CreativeItem",
          "export": "__all__.append('CreativeItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeMarket",
        "type": "class",
        "file_path": "creativity/creative_market.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "_create_tag",
          "_generate_glyph",
          "_compute_value",
          "update_reputation",
          "export_item"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_market import CreativeMarket",
          "export": "__all__.append('CreativeMarket')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeStyle",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import CreativeStyle",
          "export": "__all__.append('CreativeStyle')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExpansionStrategy",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import ExpansionStrategy",
          "export": "__all__.append('ExpansionStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeConfig",
        "type": "dataclass",
        "file_path": "creativity/creative_engine.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import CreativeConfig",
          "export": "__all__.append('CreativeConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeContext",
        "type": "dataclass",
        "file_path": "creativity/creative_engine.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import CreativeContext",
          "export": "__all__.append('CreativeContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralCreativeModel",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 122,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import NeuralCreativeModel",
          "export": "__all__.append('NeuralCreativeModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicKnowledgeBase",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 138,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import SymbolicKnowledgeBase",
          "export": "__all__.append('SymbolicKnowledgeBase')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningClient",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 150,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import FederatedLearningClient",
          "export": "__all__.append('FederatedLearningClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitBreaker",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 162,
        "methods": [
          "__init__",
          "__call__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import CircuitBreaker",
          "export": "__all__.append('CircuitBreaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedSyllableAnalyzer",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 197,
        "methods": [
          "__init__",
          "count_syllables"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import AdvancedSyllableAnalyzer",
          "export": "__all__.append('AdvancedSyllableAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnterpriseNeuralHaikuGenerator",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 238,
        "methods": [
          "__init__",
          "_default_expansion",
          "_select_dominant_style",
          "_compute_syllable_accuracy",
          "_generate_cache_key",
          "_calculate_cache_hit_rate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import EnterpriseNeuralHaikuGenerator",
          "export": "__all__.append('EnterpriseNeuralHaikuGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeEngineFactory",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 757,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import CreativeEngineFactory",
          "export": "__all__.append('CreativeEngineFactory')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockNeuralModel",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 795,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockNeuralModel",
          "export": "__all__.append('MockNeuralModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockSymbolicKB",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 805,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockSymbolicKB",
          "export": "__all__.append('MockSymbolicKB')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockFederatedClient",
        "type": "class",
        "file_path": "creativity/creative_engine.py",
        "line_number": 812,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockFederatedClient",
          "export": "__all__.append('MockFederatedClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedHaikuGenerator",
        "type": "class",
        "file_path": "creativity/advanced_haiku_generator.py",
        "line_number": 77,
        "methods": [
          "__init__",
          "_get_default_symbolic_db",
          "_load_style_preferences",
          "_expand_haiku",
          "_apply_expansion_rules",
          "_add_sensory_detail",
          "_infuse_emotion",
          "_create_juxtaposition",
          "_ensure_syllable_structure",
          "_fix_syllable_count",
          "_add_syllables",
          "_remove_syllables",
          "_find_shorter_word",
          "_count_syllables",
          "_get_syllable_structure",
          "_count_syllables_in_line",
          "generate_neural_haiku",
          "_create_base_haiku_neural",
          "_build_line",
          "_select_concept",
          "_choose_word"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .advanced_haiku_generator import AdvancedHaikuGenerator",
          "export": "__all__.append('AdvancedHaikuGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumHaikuGenerator",
        "type": "class",
        "file_path": "creativity/advanced_haiku_generator.py",
        "line_number": 620,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .advanced_haiku_generator import QuantumHaikuGenerator",
          "export": "__all__.append('QuantumHaikuGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedVoiceConfig",
        "type": "dataclass",
        "file_path": "creativity/voice_integrator.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .voice_integrator import EnhancedVoiceConfig",
          "export": "__all__.append('EnhancedVoiceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedVoiceIntegrator",
        "type": "class",
        "file_path": "creativity/voice_integrator.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_get_voice_profile",
          "_adapt_cultural_context",
          "_record_session_usage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .voice_integrator import EnhancedVoiceIntegrator",
          "export": "__all__.append('EnhancedVoiceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockEngine",
        "type": "class",
        "file_path": "creativity/quantum_creative_integration.py",
        "line_number": 41,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_integration import MockEngine",
          "export": "__all__.append('MockEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeBridge",
        "type": "class",
        "file_path": "creativity/quantum_creative_integration.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_integration import QuantumCreativeBridge",
          "export": "__all__.append('QuantumCreativeBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContentType",
        "type": "class",
        "file_path": "creativity/engines/engine.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/engines/__init__.py",
          "action": "add_export",
          "code": "from .engine import ContentType",
          "export": "__all__.append('ContentType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreationRequest",
        "type": "dataclass",
        "file_path": "creativity/engines/engine.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/engines/__init__.py",
          "action": "add_export",
          "code": "from .engine import CreationRequest",
          "export": "__all__.append('CreationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeExpressionsCreativityEngine",
        "type": "class",
        "file_path": "creativity/systems/creative_expressions_creativity_engine.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "_load_style_preferences",
          "generate_haiku",
          "_create_base_haiku",
          "_build_line",
          "_expand_haiku",
          "_apply_expansion_rules",
          "_add_sensory_detail",
          "_infuse_emotion",
          "_create_juxtaposition",
          "load_inspiration_profile",
          "generate_expression"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/systems/__init__.py",
          "action": "add_export",
          "code": "from .creative_expressions_creativity_engine import CreativeExpressionsCreativityEngine",
          "export": "__all__.append('CreativeExpressionsCreativityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeExpressionsEngine",
        "type": "class",
        "file_path": "creativity/systems/creative_expressions_creativity_engine.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "generate_expression"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/systems/__init__.py",
          "action": "add_export",
          "code": "from .creative_expressions_creativity_engine import CreativeExpressionsEngine",
          "export": "__all__.append('CreativeExpressionsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "VocabularyCreativityEngine",
        "type": "dataclass",
        "file_path": "creativity/systems/vocabulary_creativity_engine.py",
        "line_number": 15,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/systems/__init__.py",
          "action": "add_export",
          "code": "from .vocabulary_creativity_engine import VocabularyCreativityEngine",
          "export": "__all__.append('VocabularyCreativityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "VocabularyCreativityEngine",
        "type": "class",
        "file_path": "creativity/systems/vocabulary_creativity_engine.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "_init_analysis_symbols",
          "_init_object_symbols",
          "_init_color_symbols",
          "_init_emotion_symbols",
          "_init_composition_symbols",
          "_init_provider_symbols",
          "_init_quality_symbols",
          "_init_symbolic_elements",
          "get_symbol_for_analysis_type",
          "get_symbol_for_provider",
          "get_dominant_color_symbol",
          "create_analysis_phrase",
          "get_emotional_color_mapping",
          "analyze_symbolic_composition",
          "get_quality_indicators",
          "get_all_symbols",
          "get_context_symbols",
          "calculate_visual_harmony"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/systems/__init__.py",
          "action": "add_export",
          "code": "from .vocabulary_creativity_engine import VocabularyCreativityEngine",
          "export": "__all__.append('VocabularyCreativityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoicePersonalityCreativityEngine",
        "type": "class",
        "file_path": "creativity/systems/voice_personality_creativity_engine.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "_init_components",
          "get_voice_modulation",
          "adapt_to_interaction",
          "_should_enhance_text",
          "_apply_personality_traits",
          "_add_emphasis",
          "_add_pauses",
          "_update_personality_traits"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_personality_creativity_engine import VoicePersonalityCreativityEngine",
          "export": "__all__.append('VoicePersonalityCreativityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypalGlyphMapping",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_glyph_bridge.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_glyph_bridge import ArchetypalGlyphMapping",
          "export": "__all__.append('ArchetypalGlyphMapping')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamGlyph",
        "type": "dataclass",
        "file_path": "creativity/dream_systems/dream_glyph_bridge.py",
        "line_number": 101,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_glyph_bridge import DreamGlyph",
          "export": "__all__.append('DreamGlyph')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamGlyphBridge",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_glyph_bridge.py",
        "line_number": 124,
        "methods": [
          "__init__",
          "glyph_to_dream_seed",
          "dream_to_glyph",
          "create_memory_consolidation_glyph",
          "get_archetypal_dream_seeds",
          "get_dream_glyph_lineage",
          "_initialize_archetypal_mappings",
          "_initialize_narrative_templates",
          "_extract_symbolic_content",
          "_map_to_archetypes",
          "_generate_narrative_fragments",
          "_calculate_symbolic_intensity",
          "_identify_archetypal_source",
          "_create_dream_glyph",
          "_calculate_consolidation_score",
          "_extract_narrative_context",
          "_analyze_emotional_patterns",
          "_extract_symbolic_themes",
          "_consolidate_emotions",
          "_extract_dream_emotions",
          "_get_dominant_emotion",
          "get_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_glyph_bridge import DreamGlyphBridge",
          "export": "__all__.append('DreamGlyphBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLog",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_log.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "log_dream",
          "get_recent_dreams"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_log import DreamLog",
          "export": "__all__.append('DreamLog')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLoopGenerator",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_loop_generator.py",
        "line_number": 10,
        "methods": [
          "__init__",
          "generate_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_loop_generator import DreamLoopGenerator",
          "export": "__all__.append('DreamLoopGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamStatistics",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_stats.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "update_stats",
          "get_summary",
          "get_trends"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_stats import DreamStatistics",
          "export": "__all__.append('DreamStatistics')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEmotionBridge",
        "type": "class",
        "file_path": "creativity/dream_systems/dream_emotion_bridge.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "trigger_dream_replay_if_needed",
          "_is_trigger_emotion",
          "_trigger_dream_replay"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_emotion_bridge import DreamEmotionBridge",
          "export": "__all__.append('DreamEmotionBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLimiterConfig",
        "type": "dataclass",
        "file_path": "creativity/dream_systems/dream_limiter.py",
        "line_number": 19,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream_systems/__init__.py",
          "action": "add_export",
          "code": "from .dream_limiter import DreamLimiterConfig",
          "export": "__all__.append('DreamLimiterConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTaskType",
        "type": "class",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .colony_dream_coordinator import DreamTaskType",
          "export": "__all__.append('DreamTaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamDistributionStrategy",
        "type": "class",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .colony_dream_coordinator import DreamDistributionStrategy",
          "export": "__all__.append('DreamDistributionStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyDreamTask",
        "type": "dataclass",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 132,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .colony_dream_coordinator import ColonyDreamTask",
          "export": "__all__.append('ColonyDreamTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyDreamResult",
        "type": "dataclass",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 148,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .colony_dream_coordinator import ColonyDreamResult",
          "export": "__all__.append('ColonyDreamResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyDreamCoordinator",
        "type": "class",
        "file_path": "creativity/dream/colony_dream_coordinator.py",
        "line_number": 161,
        "methods": [
          "__init__",
          "_synthesize_insights",
          "_calculate_synthesis_consensus",
          "_cross_validate_insights",
          "_update_processing_metrics",
          "get_coordinator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .colony_dream_coordinator import ColonyDreamCoordinator",
          "export": "__all__.append('ColonyDreamCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "RedirectJustifier",
        "type": "class",
        "file_path": "creativity/dream/redirect_justifier.py",
        "line_number": 12,
        "methods": [
          "justify"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .redirect_justifier import RedirectJustifier",
          "export": "__all__.append('RedirectJustifier')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockConsent",
        "type": "class",
        "file_path": "creativity/dream/dream_pipeline.py",
        "line_number": 262,
        "methods": [
          "allows"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_pipeline import MockConsent",
          "export": "__all__.append('MockConsent')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockMemorySampler",
        "type": "class",
        "file_path": "creativity/dream/dream_pipeline.py",
        "line_number": 266,
        "methods": [
          "pick_emotional_memory"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_pipeline import MockMemorySampler",
          "export": "__all__.append('MockMemorySampler')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimulationType",
        "type": "class",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 108,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import SimulationType",
          "export": "__all__.append('SimulationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "TimelineState",
        "type": "class",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 121,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import TimelineState",
          "export": "__all__.append('TimelineState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalConstraint",
        "type": "class",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 132,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import CausalConstraint",
          "export": "__all__.append('CausalConstraint')"
        }
      ]
    },
    {
      "entity": {
        "name": "HyperspaceVector",
        "type": "dataclass",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 144,
        "methods": [
          "__post_init__",
          "distance_to",
          "interpolate"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import HyperspaceVector",
          "export": "__all__.append('HyperspaceVector')"
        }
      ]
    },
    {
      "entity": {
        "name": "TimelineBranch",
        "type": "dataclass",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 189,
        "methods": [
          "add_decision",
          "add_outcome",
          "check_constraints"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import TimelineBranch",
          "export": "__all__.append('TimelineBranch')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimulationScenario",
        "type": "dataclass",
        "file_path": "creativity/dream/hyperspace_dream_simulator.py",
        "line_number": 286,
        "methods": [
          "add_timeline",
          "branch_timeline",
          "find_optimal_timeline"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .hyperspace_dream_simulator import SimulationScenario",
          "export": "__all__.append('SimulationScenario')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamState",
        "type": "dataclass",
        "file_path": "creativity/dream/core.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .core import DreamState",
          "export": "__all__.append('DreamState')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamContent",
        "type": "dataclass",
        "file_path": "creativity/dream/core.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .core import DreamContent",
          "export": "__all__.append('DreamContent')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamCycle",
        "type": "dataclass",
        "file_path": "creativity/dream/core.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .core import DreamCycle",
          "export": "__all__.append('DreamCycle')"
        }
      ]
    },
    {
      "entity": {
        "name": "RedirectTraceReplayer",
        "type": "class",
        "file_path": "creativity/dream/redirect_trace_replayer.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "_load_log_entries",
          "replay_episode"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .redirect_trace_replayer import RedirectTraceReplayer",
          "export": "__all__.append('RedirectTraceReplayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MediaInput",
        "type": "dataclass",
        "file_path": "creativity/dream/dream_sandbox.py",
        "line_number": 19,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_sandbox import MediaInput",
          "export": "__all__.append('MediaInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIGeneratedDream",
        "type": "dataclass",
        "file_path": "creativity/dream/dream_sandbox.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_sandbox import AIGeneratedDream",
          "export": "__all__.append('AIGeneratedDream')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleInterpretation",
        "type": "dataclass",
        "file_path": "creativity/dream/dream_sandbox.py",
        "line_number": 32,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_sandbox import SimpleInterpretation",
          "export": "__all__.append('SimpleInterpretation')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleRLCycle",
        "type": "class",
        "file_path": "creativity/dream/dream_sandbox.py",
        "line_number": 77,
        "methods": [
          "__init__",
          "_drift_score",
          "mutate",
          "step"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_sandbox import SimpleRLCycle",
          "export": "__all__.append('SimpleRLCycle')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSandbox",
        "type": "class",
        "file_path": "creativity/dream/dream_sandbox.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "_default_ai",
          "_generate_dream",
          "run_recursive"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_sandbox import DreamSandbox",
          "export": "__all__.append('DreamSandbox')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamDataCollector",
        "type": "class",
        "file_path": "creativity/dream/dream_data_sources.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "_extract_memory_themes",
          "_extract_emotional_traces",
          "_simulate_memory_data",
          "_get_active_thoughts",
          "_simulate_consciousness_data",
          "_get_dominant_emotions",
          "_calculate_emotional_complexity",
          "_get_resonance_patterns",
          "_simulate_emotional_data",
          "_calculate_symbolic_resonance",
          "_get_quantum_possibilities",
          "_simulate_quantum_symbolic_data",
          "_get_season",
          "_get_time_of_day",
          "_get_recent_inputs",
          "_load_dream_archive",
          "_extract_dream_patterns",
          "_get_narrative_seeds",
          "_get_artistic_themes",
          "_get_cultural_elements",
          "_get_inspiration_sources",
          "_synthesize_dream_seeds",
          "_calculate_dream_parameters",
          "_get_dominant_influences",
          "_suggest_themes",
          "_create_emotional_palette"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/__init__.py",
          "action": "add_export",
          "code": "from .dream_data_sources import DreamDataCollector",
          "export": "__all__.append('DreamDataCollector')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMemoryscapeViewport",
        "type": "class",
        "file_path": "creativity/dream/visualization/memoryscape_viewport.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "_coords_for_dream",
          "render_scene"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/visualization/__init__.py",
          "action": "add_export",
          "code": "from .memoryscape_viewport import DreamMemoryscapeViewport",
          "export": "__all__.append('DreamMemoryscapeViewport')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamTimelineVisualizer",
        "type": "class",
        "file_path": "creativity/dream/visualization/dream_timeline_visualizer.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "render_timeline"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/visualization/__init__.py",
          "action": "add_export",
          "code": "from .dream_timeline_visualizer import DreamTimelineVisualizer",
          "export": "__all__.append('DreamTimelineVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnomalySeverity",
        "type": "class",
        "file_path": "creativity/dream/tools/symbolic_anomaly_explorer.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_anomaly_explorer import AnomalySeverity",
          "export": "__all__.append('AnomalySeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSession",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_anomaly_explorer.py",
        "line_number": 107,
        "methods": [
          "extract_lambda_tags",
          "calculate_symbolic_density"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_anomaly_explorer import DreamSession",
          "export": "__all__.append('DreamSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnomalyReport",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_anomaly_explorer.py",
        "line_number": 157,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_anomaly_explorer import AnomalyReport",
          "export": "__all__.append('AnomalyReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "MotifInstance",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_theme_clusterer import MotifInstance",
          "export": "__all__.append('MotifInstance')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicTheme",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
        "line_number": 93,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_theme_clusterer import SymbolicTheme",
          "export": "__all__.append('SymbolicTheme')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThemeTransition",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
        "line_number": 108,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_theme_clusterer import ThemeTransition",
          "export": "__all__.append('ThemeTransition')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThematicEvolution",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
        "line_number": 120,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_theme_clusterer import ThematicEvolution",
          "export": "__all__.append('ThematicEvolution')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicThemeClusterer",
        "type": "class",
        "file_path": "creativity/dream/tools/symbolic_theme_clusterer.py",
        "line_number": 130,
        "methods": [
          "__init__",
          "extract_motifs_from_dreams",
          "_load_dream_sessions",
          "_generate_sample_dream_sessions",
          "_identify_dominant_theme_name",
          "_generate_thematic_emotions",
          "_generate_narrative_elements",
          "_extract_session_motifs",
          "_calculate_symbolic_weight",
          "cluster_motifs_by_similarity",
          "_build_cooccurrence_matrix",
          "_calculate_similarity_matrix",
          "_calculate_symbol_similarity",
          "_calculate_emotional_similarity",
          "_calculate_lambda_similarity",
          "_sklearn_clustering",
          "_simple_clustering",
          "summarize_theme_clusters",
          "_analyze_cluster_emotional_tone",
          "track_theme_transitions",
          "_categorize_symbol_theme",
          "_analyze_transition_patterns",
          "_has_cyclic_pattern",
          "render_theme_overview",
          "_render_json_overview",
          "_render_markdown_overview"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_theme_clusterer import SymbolicThemeClusterer",
          "export": "__all__.append('SymbolicThemeClusterer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSession",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/dream_divergence_map.py",
        "line_number": 86,
        "methods": [
          "calculate_entropy",
          "calculate_emotional_magnitude",
          "extract_phase_markers"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .dream_divergence_map import DreamSession",
          "export": "__all__.append('DreamSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMatrix",
        "type": "dataclass",
        "file_path": "creativity/dream/tools/dream_divergence_map.py",
        "line_number": 143,
        "methods": [
          "get_max_drift_pair",
          "get_high_drift_pairs"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .dream_divergence_map import DriftMatrix",
          "export": "__all__.append('DriftMatrix')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamDivergenceMapper",
        "type": "class",
        "file_path": "creativity/dream/tools/dream_divergence_map.py",
        "line_number": 177,
        "methods": [
          "__init__",
          "load_dream_sessions",
          "_normalize_session_data",
          "_generate_sample_sessions",
          "compute_drift_matrix",
          "_calculate_pairwise_drift",
          "extract_recurring_symbols",
          "render_divergence_map",
          "_render_with_plotly",
          "_render_with_matplotlib",
          "_render_ascii_matrix",
          "generate_summary_json"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/tools/__init__.py",
          "action": "add_export",
          "code": "from .dream_divergence_map import DreamDivergenceMapper",
          "export": "__all__.append('DreamDivergenceMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "WebDreamInterpreter",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/web_app.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "to_json",
          "get_translations_for_locale"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .web_app import WebDreamInterpreter",
          "export": "__all__.append('WebDreamInterpreter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamInterpretation",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 39,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import DreamInterpretation",
          "export": "__all__.append('DreamInterpretation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEntry",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import DreamEntry",
          "export": "__all__.append('DreamEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "LLMConfig",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import LLMConfig",
          "export": "__all__.append('LLMConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MediaInput",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import MediaInput",
          "export": "__all__.append('MediaInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceInput",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import VoiceInput",
          "export": "__all__.append('VoiceInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEnrichment",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import DreamEnrichment",
          "export": "__all__.append('DreamEnrichment')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIGeneratedDream",
        "type": "dataclass",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import AIGeneratedDream",
          "export": "__all__.append('AIGeneratedDream')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultimediaProcessor",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 453,
        "methods": [
          "process_voice_input",
          "analyze_image",
          "extract_url_content",
          "add_emojis_to_text"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import MultimediaProcessor",
          "export": "__all__.append('MultimediaProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIModelIntegration",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 588,
        "methods": [
          "__init__",
          "setup_client"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import AIModelIntegration",
          "export": "__all__.append('AIModelIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuickAccessRecorder",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 727,
        "methods": [
          "__init__",
          "start_quick_recording",
          "stop_recording",
          "quick_dream_capture"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import QuickAccessRecorder",
          "export": "__all__.append('QuickAccessRecorder')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEnhancer",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 810,
        "methods": [
          "smart_emoji_enhancement",
          "add_symbolic_elements"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import DreamEnhancer",
          "export": "__all__.append('DreamEnhancer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultimediaInputProcessor",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/demo/dream_interpreter.py",
        "line_number": 906,
        "methods": [
          "__init__",
          "process_multiple_inputs",
          "_process_voice_note",
          "_process_image_input",
          "_process_url_input",
          "_process_emoji_sequence",
          "_analyze_image_for_dream_context",
          "_extract_symbolic_elements",
          "_analyze_text_sentiment",
          "_extract_themes_from_text",
          "_calculate_dream_inspiration"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/demo/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter import MultimediaInputProcessor",
          "export": "__all__.append('MultimediaInputProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLogger",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/utils/symbolic_logger.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "log_dream",
          "get_logs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/utils/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_logger import DreamLogger",
          "export": "__all__.append('DreamLogger')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserRecord",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/db/user_repository.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/db/__init__.py",
          "action": "add_export",
          "code": "from .user_repository import UserRecord",
          "export": "__all__.append('UserRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamRequest",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "line_number": 97,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_fastapi import DreamRequest",
          "export": "__all__.append('DreamRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamResponse",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_fastapi import DreamResponse",
          "export": "__all__.append('DreamResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "SnapshotRequest",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "line_number": 905,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_fastapi import SnapshotRequest",
          "export": "__all__.append('SnapshotRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "SnapshotResponse",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "line_number": 918,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_fastapi import SnapshotResponse",
          "export": "__all__.append('SnapshotResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamRequest",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_unified import DreamRequest",
          "export": "__all__.append('DreamRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamResponse",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_unified import DreamResponse",
          "export": "__all__.append('DreamResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "SnapshotRequest",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
        "line_number": 418,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_unified import SnapshotRequest",
          "export": "__all__.append('SnapshotRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "SnapshotResponse",
        "type": "class",
        "file_path": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_unified.py",
        "line_number": 426,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/oneiric_engine/oneiric_core/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_unified import SnapshotResponse",
          "export": "__all__.append('SnapshotResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMetricsView",
        "type": "class",
        "file_path": "creativity/dream/dashboard/dream_metrics_view.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "update_dream_metrics",
          "update_memory_metrics",
          "to_dict",
          "to_json"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/dashboard/__init__.py",
          "action": "add_export",
          "code": "from .dream_metrics_view import DreamMetricsView",
          "export": "__all__.append('DreamMetricsView')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamProcessorIntegration",
        "type": "class",
        "file_path": "creativity/dream/processors/dream_processor_integrator.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "_extract_patterns",
          "_find_memory_relationships",
          "_analyze_emotional_context",
          "_calculate_pattern_confidence",
          "_calculate_relationship_strength"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/processors/__init__.py",
          "action": "add_export",
          "code": "from .dream_processor_integrator import DreamProcessorIntegration",
          "export": "__all__.append('DreamProcessorIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamOperation",
        "type": "class",
        "file_path": "creativity/dream/symbolic/vocabulary.py",
        "line_number": 97,
        "methods": [
          "cycle_start",
          "phase_transition",
          "pattern_discovered",
          "insight_generated",
          "emotional_context",
          "memory_processing",
          "cycle_completion"
        ],
        "parameters": [],
        "decorators": [
          "symbolic_message"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .vocabulary import DreamOperation",
          "export": "__all__.append('DreamOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedOracleDreamGenerator",
        "type": "class",
        "file_path": "creativity/dream/dream_engine/oracle_dream.py",
        "line_number": 314,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/dream_engine/__init__.py",
          "action": "add_export",
          "code": "from .oracle_dream import EnhancedOracleDreamGenerator",
          "export": "__all__.append('EnhancedOracleDreamGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedDreamEngine",
        "type": "class",
        "file_path": "creativity/dream/engine/advanced_dream_engine.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "_analyze_dream_patterns",
          "_extract_dream_symbols",
          "_analyze_dream_emotions",
          "_generate_dream_insights",
          "get_engine_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/engine/__init__.py",
          "action": "add_export",
          "code": "from .advanced_dream_engine import AdvancedDreamEngine",
          "export": "__all__.append('AdvancedDreamEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBioOrchestrator",
        "type": "class",
        "file_path": "creativity/dream/engine/advanced_dream_engine.py",
        "line_number": 558,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/engine/__init__.py",
          "action": "add_export",
          "code": "from .advanced_dream_engine import MockBioOrchestrator",
          "export": "__all__.append('MockBioOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockUnifiedIntegration",
        "type": "class",
        "file_path": "creativity/dream/engine/advanced_dream_engine.py",
        "line_number": 562,
        "methods": [
          "register_component"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/engine/__init__.py",
          "action": "add_export",
          "code": "from .advanced_dream_engine import MockUnifiedIntegration",
          "export": "__all__.append('MockUnifiedIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEngineOptimizer",
        "type": "class",
        "file_path": "creativity/dream/engine/dream_engine_optimizer.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "_count_total_components",
          "optimize_dream_processing_speed",
          "enhance_dream_quantum_coupling",
          "optimize_dream_memory_integration",
          "enhance_symbolic_dream_processing",
          "create_dream_performance_dashboard",
          "run_comprehensive_dream_enhancement"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_optimizer import DreamEngineOptimizer",
          "export": "__all__.append('DreamEngineOptimizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamState",
        "type": "dataclass",
        "file_path": "creativity/dream/engine/dream_engine_merged.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_engine_merged import DreamState",
          "export": "__all__.append('DreamState')"
        }
      ]
    },
    {
      "entity": {
        "name": "RLDreamCycle",
        "type": "class",
        "file_path": "creativity/dream/rl/rl_dream_cycle.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "_state_key",
          "_ethical_mutation",
          "run_cycle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/rl/__init__.py",
          "action": "add_export",
          "code": "from .rl_dream_cycle import RLDreamCycle",
          "export": "__all__.append('RLDreamCycle')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamWeaver",
        "type": "class",
        "file_path": "creativity/dream/base/dream_refold/dream_refold.py",
        "line_number": 30,
        "methods": [
          "__init__",
          "react"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/base/dream_refold/__init__.py",
          "action": "add_export",
          "code": "from .dream_refold import DreamWeaver",
          "export": "__all__.append('DreamWeaver')"
        }
      ]
    },
    {
      "entity": {
        "name": "DummyMemory",
        "type": "class",
        "file_path": "creativity/dream/base/dream_refold/dream_refold.py",
        "line_number": 63,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/dream/base/dream_refold/__init__.py",
          "action": "add_export",
          "code": "from .dream_refold import DummyMemory",
          "export": "__all__.append('DummyMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceProfilingEmotionEngine",
        "type": "class",
        "file_path": "creativity/emotion/voice_profiling_emotion_engine.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "_ensure_default_parameters",
          "get_parameters_for_emotion",
          "get_provider_parameters",
          "add_feedback",
          "record_usage",
          "evolve",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/emotion/__init__.py",
          "action": "add_export",
          "code": "from .voice_profiling_emotion_engine import VoiceProfilingEmotionEngine",
          "export": "__all__.append('VoiceProfilingEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceProfilingEmotionEngine",
        "type": "class",
        "file_path": "creativity/emotion/voice_profiling_emotion_engine.py",
        "line_number": 250,
        "methods": [
          "__init__",
          "_load_profiles",
          "_save_profile",
          "create_profile",
          "get_profile",
          "list_profiles",
          "select_profile_for_context",
          "record_usage",
          "provide_feedback",
          "delete_profile"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "creativity/emotion/__init__.py",
          "action": "add_export",
          "code": "from .voice_profiling_emotion_engine import VoiceProfilingEmotionEngine",
          "export": "__all__.append('VoiceProfilingEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "_DummyIdentityClient",
        "type": "class",
        "file_path": "bridge/message_bus.py",
        "line_number": 84,
        "methods": [
          "get_user_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .message_bus import _DummyIdentityClient",
          "export": "__all__.append('_DummyIdentityClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryMapType",
        "type": "class",
        "file_path": "bridge/symbolic_memory_mapper.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_memory_mapper import MemoryMapType",
          "export": "__all__.append('MemoryMapType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicMemoryNode",
        "type": "dataclass",
        "file_path": "bridge/symbolic_memory_mapper.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_memory_mapper import SymbolicMemoryNode",
          "export": "__all__.append('SymbolicMemoryNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicMemoryMapper",
        "type": "class",
        "file_path": "bridge/symbolic_memory_mapper.py",
        "line_number": 74,
        "methods": [
          "__init__",
          "create_memory_map",
          "map_to_core_structures",
          "maintain_memory_coherence",
          "archive_memory_map"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_memory_mapper import SymbolicMemoryMapper",
          "export": "__all__.append('SymbolicMemoryMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationType",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationType",
          "export": "__all__.append('ExplanationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationAudience",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationAudience",
          "export": "__all__.append('ExplanationAudience')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationDepth",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationDepth",
          "export": "__all__.append('ExplanationDepth')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationRequest",
        "type": "dataclass",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 97,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationRequest",
          "export": "__all__.append('ExplanationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationProof",
        "type": "dataclass",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationProof",
          "export": "__all__.append('ExplanationProof')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationOutput",
        "type": "dataclass",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 123,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationOutput",
          "export": "__all__.append('ExplanationOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExplanationGenerator",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 139,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import ExplanationGenerator",
          "export": "__all__.append('ExplanationGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "NaturalLanguageGenerator",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 151,
        "methods": [
          "__init__",
          "_load_templates",
          "_get_audience_style",
          "_get_depth_content"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import NaturalLanguageGenerator",
          "export": "__all__.append('NaturalLanguageGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "FormalProofGenerator",
        "type": "class",
        "file_path": "bridge/explainability_interface_layer.py",
        "line_number": 256,
        "methods": [
          "__init__",
          "_format_proof",
          "_format_simple_proof",
          "_format_technical_proof"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .explainability_interface_layer import FormalProofGenerator",
          "export": "__all__.append('FormalProofGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ShynessModule",
        "type": "class",
        "file_path": "bridge/personality_communication_engine.py",
        "line_number": 65,
        "methods": [
          "__init__",
          "get_interaction_style",
          "update_shyness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .personality_communication_engine import ShynessModule",
          "export": "__all__.append('ShynessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EtiquetteModule",
        "type": "class",
        "file_path": "bridge/personality_communication_engine.py",
        "line_number": 86,
        "methods": [
          "__init__",
          "_load_cultural_norms",
          "_adjust_formality",
          "adapt_behavior"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .personality_communication_engine import EtiquetteModule",
          "export": "__all__.append('EtiquetteModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "HelpfulnessModule",
        "type": "class",
        "file_path": "bridge/personality_communication_engine.py",
        "line_number": 128,
        "methods": [
          "__init__",
          "should_offer_help"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .personality_communication_engine import HelpfulnessModule",
          "export": "__all__.append('HelpfulnessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalComplianceSystem",
        "type": "class",
        "file_path": "bridge/personality_communication_engine.py",
        "line_number": 144,
        "methods": [
          "__init__",
          "_load_human_rights_charter",
          "_apply_ethical_rules",
          "resolve_dilemma"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .personality_communication_engine import EthicalComplianceSystem",
          "export": "__all__.append('EthicalComplianceSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedPersonalityCommunicationEngine",
        "type": "class",
        "file_path": "bridge/personality_communication_engine.py",
        "line_number": 178,
        "methods": [
          "__init__",
          "interact",
          "generate_response",
          "_apply_vocal_characteristics",
          "adjust_greeting",
          "handle_complex_scenario",
          "update_personality"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .personality_communication_engine import EnhancedPersonalityCommunicationEngine",
          "export": "__all__.append('EnhancedPersonalityCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "InterColonyBridge",
        "type": "class",
        "file_path": "bridge/colony_bridge.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "register_colony",
          "_register_protocol_handlers"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .colony_bridge import InterColonyBridge",
          "export": "__all__.append('InterColonyBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreRegistryMock",
        "type": "class",
        "file_path": "bridge/integration_bridge.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .integration_bridge import CoreRegistryMock",
          "export": "__all__.append('CoreRegistryMock')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginModuleAdapter",
        "type": "class",
        "file_path": "bridge/integration_bridge.py",
        "line_number": 121,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .integration_bridge import PluginModuleAdapter",
          "export": "__all__.append('PluginModuleAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "OpenAIResponse",
        "type": "dataclass",
        "file_path": "bridge/openai_core_service.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .openai_core_service import OpenAIResponse",
          "export": "__all__.append('OpenAIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "OpenAIMockProvider",
        "type": "class",
        "file_path": "bridge/openai_core_service.py",
        "line_number": 607,
        "methods": [
          "__init__",
          "_load_mock_responses"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .openai_core_service import OpenAIMockProvider",
          "export": "__all__.append('OpenAIMockProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "RateLimiter",
        "type": "class",
        "file_path": "bridge/openai_core_service.py",
        "line_number": 772,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .openai_core_service import RateLimiter",
          "export": "__all__.append('RateLimiter')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceLevel",
        "type": "class",
        "file_path": "bridge/trace_logger.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .trace_logger import TraceLevel",
          "export": "__all__.append('TraceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceCategory",
        "type": "class",
        "file_path": "bridge/trace_logger.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .trace_logger import TraceCategory",
          "export": "__all__.append('TraceCategory')"
        }
      ]
    },
    {
      "entity": {
        "name": "BridgeTraceEvent",
        "type": "dataclass",
        "file_path": "bridge/trace_logger.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .trace_logger import BridgeTraceEvent",
          "export": "__all__.append('BridgeTraceEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('bridgetraceevent', BridgeTraceEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "BridgeTraceLogger",
        "type": "class",
        "file_path": "bridge/trace_logger.py",
        "line_number": 85,
        "methods": [
          "__init__",
          "_setup_file_logging",
          "log_bridge_event",
          "trace_symbolic_handshake",
          "trace_memory_mapping",
          "get_trace_summary",
          "export_trace_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .trace_logger import BridgeTraceLogger",
          "export": "__all__.append('BridgeTraceLogger')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicDreamContext",
        "type": "dataclass",
        "file_path": "bridge/symbolic_dream_bridge.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_dream_bridge import SymbolicDreamContext",
          "export": "__all__.append('SymbolicDreamContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicDreamBridge",
        "type": "class",
        "file_path": "bridge/symbolic_dream_bridge.py",
        "line_number": 66,
        "methods": [
          "__init__",
          "establish_symbolic_handshake",
          "translate_dream_symbols",
          "maintain_phase_resonance",
          "close_bridge"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_dream_bridge import SymbolicDreamBridge",
          "export": "__all__.append('SymbolicDreamBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "_DummyIdentityClient",
        "type": "class",
        "file_path": "bridge/shared_state.py",
        "line_number": 82,
        "methods": [
          "get_user_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import _DummyIdentityClient",
          "export": "__all__.append('_DummyIdentityClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateAccessLevel",
        "type": "class",
        "file_path": "bridge/shared_state.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import StateAccessLevel",
          "export": "__all__.append('StateAccessLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateOperation",
        "type": "class",
        "file_path": "bridge/shared_state.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import StateOperation",
          "export": "__all__.append('StateOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateValue",
        "type": "dataclass",
        "file_path": "bridge/shared_state.py",
        "line_number": 108,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import StateValue",
          "export": "__all__.append('StateValue')"
        }
      ]
    },
    {
      "entity": {
        "name": "StateChange",
        "type": "dataclass",
        "file_path": "bridge/shared_state.py",
        "line_number": 128,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import StateChange",
          "export": "__all__.append('StateChange')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConflictResolutionStrategy",
        "type": "class",
        "file_path": "bridge/shared_state.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .shared_state import ConflictResolutionStrategy",
          "export": "__all__.append('ConflictResolutionStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningMode",
        "type": "class",
        "file_path": "bridge/symbolic_reasoning_adapter.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_reasoning_adapter import ReasoningMode",
          "export": "__all__.append('ReasoningMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicReasoningAdapter",
        "type": "class",
        "file_path": "bridge/symbolic_reasoning_adapter.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "adapt_symbolic_reasoning",
          "bridge_reasoning_flow",
          "validate_reasoning_coherence",
          "close_reasoning_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_reasoning_adapter import SymbolicReasoningAdapter",
          "export": "__all__.append('SymbolicReasoningAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "dataclass",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 79,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 84,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 93,
        "methods": [
          "_conv_forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 121,
        "methods": [
          "__init__",
          "forward",
          "qkv_attention"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 182,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 214,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 247,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelCommunicationEngine",
        "type": "class",
        "file_path": "bridge/model_communication_engine.py",
        "line_number": 292,
        "methods": [
          "__init__",
          "set_alignment_heads",
          "embed_audio",
          "logits",
          "forward",
          "device",
          "is_multilingual",
          "num_languages",
          "install_kv_cache_hooks"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "bridge/__init__.py",
          "action": "add_export",
          "code": "from .model_communication_engine import ModelCommunicationEngine",
          "export": "__all__.append('ModelCommunicationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "learning/federated_meta_learning.py",
        "line_number": 102,
        "methods": [
          "__init__",
          "register_model",
          "get_model",
          "contribute_gradients",
          "_aggregate_model",
          "_update_metrics",
          "save_model",
          "load_models",
          "get_client_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_meta_learning import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "learning_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningGatewayInterface",
        "type": "class",
        "file_path": "learning/learning_gateway.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .learning_gateway import LearningGatewayInterface",
          "export": "__all__.append('LearningGatewayInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningGateway",
        "type": "class",
        "file_path": "learning/learning_gateway.py",
        "line_number": 63,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .learning_gateway import LearningGateway",
          "export": "__all__.append('LearningGateway')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContentType",
        "type": "class",
        "file_path": "learning/plugin_learning_engine.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .plugin_learning_engine import ContentType",
          "export": "__all__.append('ContentType')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserLevel",
        "type": "class",
        "file_path": "learning/plugin_learning_engine.py",
        "line_number": 50,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .plugin_learning_engine import UserLevel",
          "export": "__all__.append('UserLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "GenerationConfig",
        "type": "class",
        "file_path": "learning/plugin_learning_engine.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .plugin_learning_engine import GenerationConfig",
          "export": "__all__.append('GenerationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginLearningEngine",
        "type": "class",
        "file_path": "learning/plugin_learning_engine.py",
        "line_number": 66,
        "methods": [
          "__init__",
          "get_optimal_complexity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .plugin_learning_engine import PluginLearningEngine",
          "export": "__all__.append('PluginLearningEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningType",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import LearningType",
          "export": "__all__.append('LearningType')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningStrategy",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import LearningStrategy",
          "export": "__all__.append('LearningStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningEpisode",
        "type": "dataclass",
        "file_path": "learning/system.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import LearningEpisode",
          "export": "__all__.append('LearningEpisode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningResult",
        "type": "dataclass",
        "file_path": "learning/system.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import MetaLearningResult",
          "export": "__all__.append('MetaLearningResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseMetaLearner",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import BaseMetaLearner",
          "export": "__all__.append('BaseMetaLearner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModelAgnosticMetaLearner",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 128,
        "methods": [
          "__init__",
          "_calculate_generalization_score",
          "_calculate_memory_efficiency",
          "_extract_applicable_domains"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import ModelAgnosticMetaLearner",
          "export": "__all__.append('ModelAgnosticMetaLearner')"
        }
      ]
    },
    {
      "entity": {
        "name": "FewShotLearner",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 379,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import FewShotLearner",
          "export": "__all__.append('FewShotLearner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContinualLearner",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 525,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import ContinualLearner",
          "export": "__all__.append('ContinualLearner')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedLearningSystem",
        "type": "class",
        "file_path": "learning/system.py",
        "line_number": 654,
        "methods": [
          "__init__",
          "_setup_logging",
          "_analyze_learning_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .system import AdvancedLearningSystem",
          "export": "__all__.append('AdvancedLearningSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "Enhancementmode",
        "type": "class",
        "file_path": "learning/metalearningenhancementsystem.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .metalearningenhancementsystem import Enhancementmode",
          "export": "__all__.append('Enhancementmode')"
        }
      ]
    },
    {
      "entity": {
        "name": "Systemintegrationstatus",
        "type": "dataclass",
        "file_path": "learning/metalearningenhancementsystem.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .metalearningenhancementsystem import Systemintegrationstatus",
          "export": "__all__.append('Systemintegrationstatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningEnhancementsystem",
        "type": "class",
        "file_path": "learning/metalearningenhancementsystem.py",
        "line_number": 83,
        "methods": [
          "__init__",
          "_simulate_meta_learning_system_discovery",
          "_create_mock_system",
          "_synchronize_quantum_signatures",
          "_analyze_common_ethical_issues"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .metalearningenhancementsystem import MetaLearningEnhancementsystem",
          "export": "__all__.append('MetaLearningEnhancementsystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserInteraction",
        "type": "class",
        "file_path": "learning/usage_learning.py",
        "line_number": 31,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .usage_learning import UserInteraction",
          "export": "__all__.append('UserInteraction')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractionPattern",
        "type": "class",
        "file_path": "learning/usage_learning.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "update"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .usage_learning import InteractionPattern",
          "export": "__all__.append('InteractionPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasFederatedModel",
        "type": "class",
        "file_path": "learning/federated_learning_system.py",
        "line_number": 84,
        "methods": [
          "__init__",
          "update_with_gradients",
          "get_parameters",
          "serialize",
          "deserialize"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_learning_system import LukhasFederatedModel",
          "export": "__all__.append('LukhasFederatedModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasFederatedLearningManager",
        "type": "class",
        "file_path": "learning/federated_learning_system.py",
        "line_number": 222,
        "methods": [
          "__init__",
          "register_model",
          "get_model",
          "contribute_gradients",
          "_calculate_client_weight",
          "_trigger_aggregation",
          "save_model",
          "load_models",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_learning_system import LukhasFederatedLearningManager",
          "export": "__all__.append('LukhasFederatedLearningManager')"
        },
        {
          "integration_point": "learning_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasfederatedlearningmanager', LukhasFederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "learning/federated_learning.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "register_model",
          "get_model",
          "contribute_gradients",
          "_weighted_update",
          "_ensure_storage_exists",
          "_get_model_path",
          "_persist_model",
          "_load_model"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_learning import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "learning_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningPhase",
        "type": "class",
        "file_path": "learning/meta_learning_adapter.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_adapter import LearningPhase",
          "export": "__all__.append('LearningPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedState",
        "type": "class",
        "file_path": "learning/meta_learning_adapter.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_adapter import FederatedState",
          "export": "__all__.append('FederatedState')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningMetrics",
        "type": "dataclass",
        "file_path": "learning/meta_learning_adapter.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_adapter import MetaLearningMetrics",
          "export": "__all__.append('MetaLearningMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningRateBounds",
        "type": "dataclass",
        "file_path": "learning/meta_learning_adapter.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_adapter import LearningRateBounds",
          "export": "__all__.append('LearningRateBounds')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningEnhancementAdapter",
        "type": "class",
        "file_path": "learning/meta_learning_adapter.py",
        "line_number": 108,
        "methods": [
          "__init__",
          "_normalize_membrane_potential",
          "_calculate_rate_stability",
          "_calculate_adaptation_speed",
          "_calculate_overall_stability",
          "_calculate_enhancement_factor",
          "_calculate_overall_enhancement",
          "_get_default_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_adapter import MetaLearningEnhancementAdapter",
          "export": "__all__.append('MetaLearningEnhancementAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExponentialLearningSystem",
        "type": "class",
        "file_path": "learning/exponential_learning.py",
        "line_number": 76,
        "methods": [
          "__init__",
          "incorporate_experience",
          "_extract_patterns",
          "_update_knowledge",
          "_consolidate_knowledge"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .exponential_learning import ExponentialLearningSystem",
          "export": "__all__.append('ExponentialLearningSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "_BaseSparseCoding",
        "type": "class",
        "file_path": "learning/_dict_learning.py",
        "line_number": 623,
        "methods": [
          "__init__",
          "_transform",
          "transform",
          "_inverse_transform",
          "inverse_transform"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from ._dict_learning import _BaseSparseCoding",
          "export": "__all__.append('_BaseSparseCoding')"
        }
      ]
    },
    {
      "entity": {
        "name": "SparseCoder",
        "type": "class",
        "file_path": "learning/_dict_learning.py",
        "line_number": 725,
        "methods": [
          "__init__",
          "fit",
          "transform",
          "inverse_transform",
          "__sklearn_tags__",
          "n_components_",
          "n_features_in_",
          "_n_features_out"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from ._dict_learning import SparseCoder",
          "export": "__all__.append('SparseCoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "DictionaryLearning",
        "type": "class",
        "file_path": "learning/_dict_learning.py",
        "line_number": 795,
        "methods": [
          "__init__",
          "fit",
          "fit_transform",
          "_n_features_out",
          "__sklearn_tags__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from ._dict_learning import DictionaryLearning",
          "export": "__all__.append('DictionaryLearning')"
        }
      ]
    },
    {
      "entity": {
        "name": "MiniBatchDictionaryLearning",
        "type": "class",
        "file_path": "learning/_dict_learning.py",
        "line_number": 929,
        "methods": [
          "__init__",
          "_check_params",
          "_initialize_dict",
          "_update_inner_stats",
          "_minibatch_step",
          "_check_convergence",
          "fit",
          "partial_fit",
          "_n_features_out",
          "__sklearn_tags__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from ._dict_learning import MiniBatchDictionaryLearning",
          "export": "__all__.append('MiniBatchDictionaryLearning')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningRecovery",
        "type": "class",
        "file_path": "learning/meta_learning_recovery.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "explore_meta_learning_directory",
          "convert_to_lukhas_format",
          "determine_target_directory",
          "recover_meta_learning_components",
          "execute_recovery"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning_recovery import MetaLearningRecovery",
          "export": "__all__.append('MetaLearningRecovery')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningColony",
        "type": "class",
        "file_path": "learning/federated_colony_learning.py",
        "line_number": 38,
        "methods": [
          "__init__",
          "_federate_models"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_colony_learning import FederatedLearningColony",
          "export": "__all__.append('FederatedLearningColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningStyle",
        "type": "class",
        "file_path": "learning/tutor.py",
        "line_number": 16,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/__init__.py",
          "action": "add_export",
          "code": "from .tutor import LearningStyle",
          "export": "__all__.append('LearningStyle')"
        }
      ]
    },
    {
      "entity": {
        "name": "GenerativeReflex",
        "type": "class",
        "file_path": "learning/embodied_thought/generative_reflex.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "load_reflex",
          "generate_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/embodied_thought/__init__.py",
          "action": "add_export",
          "code": "from .generative_reflex import GenerativeReflex",
          "export": "__all__.append('GenerativeReflex')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "learning/meta_adaptive/meta_learning.py",
        "line_number": 102,
        "methods": [
          "__init__",
          "register_model",
          "get_model",
          "contribute_gradients",
          "_aggregate_model",
          "_update_metrics",
          "save_model",
          "load_models",
          "get_client_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_adaptive/__init__.py",
          "action": "add_export",
          "code": "from .meta_learning import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "learning_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "Federationstrategy",
        "type": "class",
        "file_path": "learning/meta_learning/federated_integration.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_integration import Federationstrategy",
          "export": "__all__.append('Federationstrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "Privacylevel",
        "type": "class",
        "file_path": "learning/meta_learning/federated_integration.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_integration import Privacylevel",
          "export": "__all__.append('Privacylevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "Federatednode",
        "type": "dataclass",
        "file_path": "learning/meta_learning/federated_integration.py",
        "line_number": 53,
        "methods": [
          "__post_init__",
          "_generate_quantum_signature"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_integration import Federatednode",
          "export": "__all__.append('Federatednode')"
        }
      ]
    },
    {
      "entity": {
        "name": "Federatedlearningupdate",
        "type": "dataclass",
        "file_path": "learning/meta_learning/federated_integration.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_integration import Federatedlearningupdate",
          "export": "__all__.append('Federatedlearningupdate')"
        }
      ]
    },
    {
      "entity": {
        "name": "Federatedlearningintegration",
        "type": "class",
        "file_path": "learning/meta_learning/federated_integration.py",
        "line_number": 84,
        "methods": [
          "__init__",
          "integrate_with_enhancement_system",
          "register_node",
          "share_learning_insight",
          "receive_federation_updates",
          "coordinate_learning_rates",
          "enhance_symbolic_reasoning_federation",
          "synchronize_federation",
          "get_federation_status",
          "enhance_existing_meta_learning_system",
          "_apply_privacy_filter",
          "_ethical_audit_insight",
          "_generate_update_signature",
          "_process_federation_update",
          "_update_node_trust",
          "_gather_federation_convergence_signals",
          "_calculate_coordinated_rate",
          "_gather_symbolic_patterns",
          "_analyze_cross_node_patterns",
          "_extract_federation_wisdom",
          "_generate_collaborative_reasoning_insights",
          "_should_sync_with_node",
          "_synchronize_with_node",
          "_discover_federation_patterns",
          "_federation_ethical_audit",
          "_generate_coordination_signature",
          "_anonymize_data",
          "_extract_learning_insights",
          "_extract_symbolic_insights",
          "_apply_update_to_meta_learning_system",
          "_calculate_ethical_variance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .federated_integration import Federatedlearningintegration",
          "export": "__all__.append('Federatedlearningintegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaCore",
        "type": "class",
        "file_path": "learning/meta_learning/meta_core.py",
        "line_number": 12,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .meta_core import MetaCore",
          "export": "__all__.append('MetaCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "Feedbacktype",
        "type": "class",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Feedbacktype",
          "export": "__all__.append('Feedbacktype')"
        }
      ]
    },
    {
      "entity": {
        "name": "Symboliccontext",
        "type": "class",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Symboliccontext",
          "export": "__all__.append('Symboliccontext')"
        }
      ]
    },
    {
      "entity": {
        "name": "Intentnodehistory",
        "type": "dataclass",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Intentnodehistory",
          "export": "__all__.append('Intentnodehistory')"
        }
      ]
    },
    {
      "entity": {
        "name": "Memoriasnapshot",
        "type": "dataclass",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Memoriasnapshot",
          "export": "__all__.append('Memoriasnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "Dreamreplayrecord",
        "type": "dataclass",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Dreamreplayrecord",
          "export": "__all__.append('Dreamreplayrecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "Symbolicfeedbackloop",
        "type": "dataclass",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 100,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Symbolicfeedbackloop",
          "export": "__all__.append('Symbolicfeedbackloop')"
        }
      ]
    },
    {
      "entity": {
        "name": "Symbolicfeedbacksystem",
        "type": "class",
        "file_path": "learning/meta_learning/symbolic_feedback.py",
        "line_number": 113,
        "methods": [
          "__init__",
          "log_intent_node_interaction",
          "log_memoria_snapshot",
          "log_dream_replay",
          "create_symbolic_feedback_loop",
          "execute_symbolic_rehearsal",
          "get_optimization_insights",
          "_analyze_intent_patterns",
          "_analyze_memoria_patterns",
          "_analyze_dream_patterns",
          "_determine_learning_outcome",
          "_schedule_rehearsal_if_needed",
          "_update_dashboard_symbolic_feedback",
          "_calculate_symbolic_reasoning_confidence",
          "_calculate_emotional_tone_vector",
          "_generate_quantum_signature",
          "_generate_loop_id",
          "_analyze_performance_patterns",
          "_generate_optimization_suggestions",
          "_identify_rehearsal_opportunities",
          "_calculate_confidence_adjustment",
          "_determine_feedback_type",
          "_apply_symbolic_optimizations",
          "_update_pattern_confidence",
          "_find_relevant_success_patterns",
          "_simulate_rehearsal_iteration",
          "_extract_common_suggestions",
          "_generate_system_optimization_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "learning/meta_learning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_feedback import Symbolicfeedbacksystem",
          "export": "__all__.append('Symbolicfeedbacksystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "IMemoryModule",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IMemoryModule",
          "export": "__all__.append('IMemoryModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ILearningModule",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import ILearningModule",
          "export": "__all__.append('ILearningModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IIdentityModule",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 105,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IIdentityModule",
          "export": "__all__.append('IIdentityModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IOrchestrationModule",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IOrchestrationModule",
          "export": "__all__.append('IOrchestrationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IBioModule",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 143,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IBioModule",
          "export": "__all__.append('IBioModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IEventBus",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 183,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IEventBus",
          "export": "__all__.append('IEventBus')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('ieventbus', IEventBus())"
        }
      ]
    },
    {
      "entity": {
        "name": "IServiceFactory",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 204,
        "methods": [
          "create_service",
          "get_service_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import IServiceFactory",
          "export": "__all__.append('IServiceFactory')"
        },
        {
          "integration_point": "contracts_hub.py",
          "action": "register_service",
          "code": "self.register_service('iservicefactory', IServiceFactory())"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleCommunicationPattern",
        "type": "class",
        "file_path": "contracts/__init__.py",
        "line_number": 220,
        "methods": [
          "is_allowed"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "contracts/__init__.py",
          "action": "add_export",
          "code": "from .__init__ import ModuleCommunicationPattern",
          "export": "__all__.append('ModuleCommunicationPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonySwarmIntegration",
        "type": "class",
        "file_path": "colony/swarm_integration.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "_setup_event_handlers"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "colony/__init__.py",
          "action": "add_export",
          "code": "from .swarm_integration import ColonySwarmIntegration",
          "export": "__all__.append('ColonySwarmIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveConfig",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 80,
        "methods": [
          "__init__",
          "_load_config",
          "_set_defaults",
          "_save_config",
          "get_int",
          "get_float",
          "get_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveConfig",
          "export": "__all__.append('CognitiveConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveProcessType",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 227,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveProcessType",
          "export": "__all__.append('CognitiveProcessType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessPriority",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 246,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import ProcessPriority",
          "export": "__all__.append('ProcessPriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessState",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 254,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import ProcessState",
          "export": "__all__.append('ProcessState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveResource",
        "type": "dataclass",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 274,
        "methods": [
          "available",
          "allocate",
          "release"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveResource",
          "export": "__all__.append('CognitiveResource')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveProcess",
        "type": "dataclass",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 310,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveProcess",
          "export": "__all__.append('CognitiveProcess')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySystem",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 328,
        "methods": [
          "store",
          "retrieve",
          "forget",
          "consolidate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import MemorySystem",
          "export": "__all__.append('MemorySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkingMemory",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 351,
        "methods": [
          "__init__",
          "store",
          "retrieve",
          "forget",
          "consolidate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import WorkingMemory",
          "export": "__all__.append('WorkingMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProceduralMemory",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 633,
        "methods": [
          "__init__",
          "store",
          "retrieve",
          "update_skill_level",
          "forget",
          "consolidate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import ProceduralMemory",
          "export": "__all__.append('ProceduralMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveResourceManager",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 721,
        "methods": [
          "__init__",
          "_start_recharge_thread",
          "allocate",
          "release",
          "get_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveResourceManager",
          "export": "__all__.append('CognitiveResourceManager')"
        },
        {
          "integration_point": "consciousness_hub.py",
          "action": "register_service",
          "code": "self.register_service('cognitiveresourcemanager', CognitiveResourceManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveProcessScheduler",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 797,
        "methods": [
          "__init__",
          "_initialize_handlers",
          "submit_process",
          "_scheduler_loop",
          "_schedule_processes",
          "_execute_process",
          "_check_completed_processes",
          "_handle_reasoning",
          "_handle_learning",
          "_handle_perception",
          "_handle_planning",
          "_handle_action",
          "_handle_reflection",
          "_handle_decision",
          "_handle_attention",
          "_handle_creativity",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveProcessScheduler",
          "export": "__all__.append('CognitiveProcessScheduler')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveMonitor",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 1385,
        "methods": [
          "__init__",
          "_monitor_loop",
          "_check_system_health",
          "_check_memory_pressure",
          "_check_process_health",
          "_update_metrics",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveMonitor",
          "export": "__all__.append('CognitiveMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveArchitectureController",
        "type": "class",
        "file_path": "consciousness/cognitive_architecture_controller.py",
        "line_number": 1484,
        "methods": [
          "__init__",
          "_start_consolidation_thread",
          "think",
          "remember",
          "recall",
          "learn",
          "plan",
          "decide",
          "create",
          "reflect",
          "get_status",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_architecture_controller import CognitiveArchitectureController",
          "export": "__all__.append('CognitiveArchitectureController')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessOpenAIAdapter",
        "type": "class",
        "file_path": "consciousness/openai_consciousness_adapter.py",
        "line_number": 30,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .openai_consciousness_adapter import ConsciousnessOpenAIAdapter",
          "export": "__all__.append('ConsciousnessOpenAIAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConsciousnessState",
        "type": "dataclass",
        "file_path": "consciousness/quantum_consciousness_hub.py",
        "line_number": 33,
        "methods": [
          "to_quantum_representation"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consciousness_hub import QuantumConsciousnessState",
          "export": "__all__.append('QuantumConsciousnessState')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConsciousnessHub",
        "type": "class",
        "file_path": "consciousness/quantum_consciousness_hub.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "inject_components"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consciousness_hub import QuantumConsciousnessHub",
          "export": "__all__.append('QuantumConsciousnessHub')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamConsciousnessBridge",
        "type": "class",
        "file_path": "consciousness/dream_bridge.py",
        "line_number": 14,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_bridge import DreamConsciousnessBridge",
          "export": "__all__.append('DreamConsciousnessBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainIntegrationConfig",
        "type": "class",
        "file_path": "consciousness/brain_integration_20250620_013824.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "_load_config",
          "_set_defaults",
          "_save_config",
          "get_emotion_adjustments",
          "get_memory_path"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration_20250620_013824 import BrainIntegrationConfig",
          "export": "__all__.append('BrainIntegrationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "DynamicImporter",
        "type": "class",
        "file_path": "consciousness/brain_integration_20250620_013824.py",
        "line_number": 109,
        "methods": [
          "import_module"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration_20250620_013824 import DynamicImporter",
          "export": "__all__.append('DynamicImporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "TierAccessControl",
        "type": "class",
        "file_path": "consciousness/brain_integration_20250620_013824.py",
        "line_number": 197,
        "methods": [
          "__init__",
          "_load_tier_requirements",
          "check_access",
          "get_required_tier"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration_20250620_013824 import TierAccessControl",
          "export": "__all__.append('TierAccessControl')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEmotionalIntegrator",
        "type": "class",
        "file_path": "consciousness/brain_integration_20250620_013824.py",
        "line_number": 521,
        "methods": [
          "__init__",
          "store_memory_with_emotion",
          "retrieve_with_emotional_context",
          "find_emotionally_similar_memories",
          "dream_consolidate_memories"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration_20250620_013824 import MemoryEmotionalIntegrator",
          "export": "__all__.append('MemoryEmotionalIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryVoiceIntegrator",
        "type": "class",
        "file_path": "consciousness/brain_integration_20250620_013824.py",
        "line_number": 847,
        "methods": [
          "__init__",
          "speak_with_emotional_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration_20250620_013824 import MemoryVoiceIntegrator",
          "export": "__all__.append('MemoryVoiceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningCycle",
        "type": "dataclass",
        "file_path": "consciousness/loop_meta_learning.py",
        "line_number": 22,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .loop_meta_learning import MetaLearningCycle",
          "export": "__all__.append('MetaLearningCycle')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningLoop",
        "type": "class",
        "file_path": "consciousness/loop_meta_learning.py",
        "line_number": 36,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/__init__.py",
          "action": "add_export",
          "code": "from .loop_meta_learning import MetaLearningLoop",
          "export": "__all__.append('MetaLearningLoop')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalModulation",
        "type": "dataclass",
        "file_path": "consciousness/cognitive/adapter.py",
        "line_number": 135,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/cognitive/__init__.py",
          "action": "add_export",
          "code": "from .adapter import EmotionalModulation",
          "export": "__all__.append('EmotionalModulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAdapterConfig",
        "type": "class",
        "file_path": "consciousness/cognitive/adapter_complete.py",
        "line_number": 62,
        "methods": [
          "__init__",
          "_load_config",
          "_save_config",
          "get"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/cognitive/__init__.py",
          "action": "add_export",
          "code": "from .adapter_complete import CognitiveAdapterConfig",
          "export": "__all__.append('CognitiveAdapterConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalModulation",
        "type": "dataclass",
        "file_path": "consciousness/cognitive/adapter_complete.py",
        "line_number": 427,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/cognitive/__init__.py",
          "action": "add_export",
          "code": "from .adapter_complete import EmotionalModulation",
          "export": "__all__.append('EmotionalModulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAwarenessProtocol",
        "type": "class",
        "file_path": "consciousness/awareness/awareness_protocol.py",
        "line_number": 91,
        "methods": [
          "__init__",
          "_determine_tier",
          "update_bio_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/awareness/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import LucasAwarenessProtocol",
          "export": "__all__.append('LucasAwarenessProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockNumpy",
        "type": "class",
        "file_path": "consciousness/awareness/bio_symbolic_awareness_adapter.py",
        "line_number": 25,
        "methods": [
          "mean",
          "std",
          "clip",
          "corrcoef"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/awareness/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_awareness_adapter import MockNumpy",
          "export": "__all__.append('MockNumpy')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessValidator",
        "type": "class",
        "file_path": "consciousness/systems/validator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .validator import ConsciousnessValidator",
          "export": "__all__.append('ConsciousnessValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessFrame",
        "type": "dataclass",
        "file_path": "consciousness/systems/engine_poetic.py",
        "line_number": 105,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_poetic import AwarenessFrame",
          "export": "__all__.append('AwarenessFrame')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessEngineConfig",
        "type": "class",
        "file_path": "consciousness/systems/engine_complete.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_load_config",
          "_save_config",
          "_initialize_anthropic_client",
          "get"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_complete import ConsciousnessEngineConfig",
          "export": "__all__.append('ConsciousnessEngineConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnthropicEthicsEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine_complete.py",
        "line_number": 393,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_complete import AnthropicEthicsEngine",
          "export": "__all__.append('AnthropicEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultEthicsEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine_complete.py",
        "line_number": 412,
        "methods": [
          "_generate_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_complete import DefaultEthicsEngine",
          "export": "__all__.append('DefaultEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfAwareAdaptationModule",
        "type": "class",
        "file_path": "consciousness/systems/engine_complete.py",
        "line_number": 582,
        "methods": [
          "__init__",
          "_analyze_consciousness_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_complete import SelfAwareAdaptationModule",
          "export": "__all__.append('SelfAwareAdaptationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIConsciousnessEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine_complete.py",
        "line_number": 754,
        "methods": [
          "__init__",
          "_calculate_recent_performance",
          "_calculate_success_rate",
          "get_consciousness_state",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_complete import AGIConsciousnessEngine",
          "export": "__all__.append('AGIConsciousnessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnthropicEthicsEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine_codex.py",
        "line_number": 154,
        "methods": [
          "__init__",
          "_evaluate_transparency",
          "_evaluate_user_agency",
          "_evaluate_privacy",
          "_get_improvement_suggestion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_codex import AnthropicEthicsEngine",
          "export": "__all__.append('AnthropicEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfAwareAdaptationModule",
        "type": "class",
        "file_path": "consciousness/systems/engine_codex.py",
        "line_number": 287,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_codex import SelfAwareAdaptationModule",
          "export": "__all__.append('SelfAwareAdaptationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationContext",
        "type": "dataclass",
        "file_path": "consciousness/systems/integrator.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .integrator import IntegrationContext",
          "export": "__all__.append('IntegrationContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessIntensity",
        "type": "class",
        "file_path": "consciousness/systems/mapper.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .mapper import ConsciousnessIntensity",
          "export": "__all__.append('ConsciousnessIntensity')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessProfile",
        "type": "dataclass",
        "file_path": "consciousness/systems/mapper.py",
        "line_number": 66,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .mapper import ConsciousnessProfile",
          "export": "__all__.append('ConsciousnessProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceConsciousnessMapping",
        "type": "dataclass",
        "file_path": "consciousness/systems/mapper.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .mapper import VoiceConsciousnessMapping",
          "export": "__all__.append('VoiceConsciousnessMapping')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnthropicEthicsEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine_alt.py",
        "line_number": 154,
        "methods": [
          "__init__",
          "_evaluate_transparency",
          "_evaluate_user_agency",
          "_evaluate_privacy",
          "_get_improvement_suggestion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_alt import AnthropicEthicsEngine",
          "export": "__all__.append('AnthropicEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfAwareAdaptationModule",
        "type": "class",
        "file_path": "consciousness/systems/engine_alt.py",
        "line_number": 284,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine_alt import SelfAwareAdaptationModule",
          "export": "__all__.append('SelfAwareAdaptationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaCognition",
        "type": "class",
        "file_path": "consciousness/systems/consciousness.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import MetaCognition",
          "export": "__all__.append('MetaCognition')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeDemo",
        "type": "class",
        "file_path": "consciousness/systems/quantum_creative_consciousness.py",
        "line_number": 33,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_consciousness import QuantumCreativeDemo",
          "export": "__all__.append('QuantumCreativeDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalTone",
        "type": "class",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 139,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalTone",
          "export": "__all__.append('EmotionalTone')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentStatus",
        "type": "class",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 153,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentStatus",
          "export": "__all__.append('AlignmentStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceEntry",
        "type": "dataclass",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 164,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ExperienceEntry",
          "export": "__all__.append('ExperienceEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalDrift",
        "type": "dataclass",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 181,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalDrift",
          "export": "__all__.append('EmotionalDrift')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentScore",
        "type": "dataclass",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 203,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentScore",
          "export": "__all__.append('AlignmentScore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionEntry",
        "type": "dataclass",
        "file_path": "consciousness/systems/lambda_mirror.py",
        "line_number": 233,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ReflectionEntry",
          "export": "__all__.append('ReflectionEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfReflectionEngine",
        "type": "class",
        "file_path": "consciousness/systems/self_reflection_engine.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .self_reflection_engine import SelfReflectionEngine",
          "export": "__all__.append('SelfReflectionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnthropicEthicsEngine",
        "type": "class",
        "file_path": "consciousness/systems/engine.py",
        "line_number": 294,
        "methods": [
          "__init__",
          "_evaluate_transparency",
          "_evaluate_user_agency",
          "_evaluate_privacy",
          "_get_improvement_suggestion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine import AnthropicEthicsEngine",
          "export": "__all__.append('AnthropicEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfAwareAdaptationModule",
        "type": "class",
        "file_path": "consciousness/systems/engine.py",
        "line_number": 450,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .engine import SelfAwareAdaptationModule",
          "export": "__all__.append('SelfAwareAdaptationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotConsciousnessMonitor",
        "type": "class",
        "file_path": "consciousness/systems/\u039bBot_consciousness_monitor.py",
        "line_number": 36,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_consciousness_monitor import \u039bBotConsciousnessMonitor",
          "export": "__all__.append('\u039bBotConsciousnessMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessProcessor",
        "type": "class",
        "file_path": "consciousness/systems/awareness_processor.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .awareness_processor import AwarenessProcessor",
          "export": "__all__.append('AwarenessProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessTracker",
        "type": "class",
        "file_path": "consciousness/systems/awareness_tracker.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/__init__.py",
          "action": "add_export",
          "code": "from .awareness_tracker import AwarenessTracker",
          "export": "__all__.append('AwarenessTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamReflectionConfig",
        "type": "dataclass",
        "file_path": "consciousness/systems/dream_engine/dream_reflection_loop.py",
        "line_number": 104,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/dream_engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_reflection_loop import DreamReflectionConfig",
          "export": "__all__.append('DreamReflectionConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamState",
        "type": "dataclass",
        "file_path": "consciousness/systems/dream_engine/dream_reflection_loop.py",
        "line_number": 122,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/dream_engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_reflection_loop import DreamState",
          "export": "__all__.append('DreamState')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLoggerLoop",
        "type": "class",
        "file_path": "consciousness/systems/dream_engine/dream_reflection_loop.py",
        "line_number": 1029,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/systems/dream_engine/__init__.py",
          "action": "add_export",
          "code": "from .dream_reflection_loop import DreamLoggerLoop",
          "export": "__all__.append('DreamLoggerLoop')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalTone",
        "type": "class",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalTone",
          "export": "__all__.append('EmotionalTone')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentStatus",
        "type": "class",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentStatus",
          "export": "__all__.append('AlignmentStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceEntry",
        "type": "dataclass",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 110,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ExperienceEntry",
          "export": "__all__.append('ExperienceEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalDrift",
        "type": "dataclass",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 127,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import EmotionalDrift",
          "export": "__all__.append('EmotionalDrift')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlignmentScore",
        "type": "dataclass",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 149,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import AlignmentScore",
          "export": "__all__.append('AlignmentScore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectionEntry",
        "type": "dataclass",
        "file_path": "consciousness/reflection/lambda_mirror.py",
        "line_number": 179,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "consciousness/reflection/__init__.py",
          "action": "add_export",
          "code": "from .lambda_mirror import ReflectionEntry",
          "export": "__all__.append('ReflectionEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationOrchestrator",
        "type": "class",
        "file_path": "features/memory/integration_orchestrator.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "load_specifications",
          "create_matada_node",
          "enhanced_fold_in",
          "enhanced_fold_out",
          "demonstrate_enterprise_features",
          "_generate_universal_prefix",
          "_encode_to_binary",
          "_generate_embeddings",
          "_compute_emotion_vector",
          "_extract_tags",
          "_compute_deduplication_hash",
          "_check_existing_content",
          "_enhance_tags_with_mycelium",
          "_map_causal_relationships",
          "_store_with_lukhas_integration",
          "_update_temporal_evolution",
          "_activate_mycelium_network",
          "_traverse_causal_graph",
          "_weight_relevance",
          "_filter_by_tier",
          "_assemble_narrative",
          "_vector_similarity_search",
          "_check_constitutional_alignment",
          "_update_world_model",
          "_compress_old_memories"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .integration_orchestrator import MemoryIntegrationOrchestrator",
          "export": "__all__.append('MemoryIntegrationOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "BridgeConfiguration",
        "type": "dataclass",
        "file_path": "features/memory/fold_universal_bridge.py",
        "line_number": 117,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .fold_universal_bridge import BridgeConfiguration",
          "export": "__all__.append('BridgeConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFoldUniversalBridge",
        "type": "class",
        "file_path": "features/memory/fold_universal_bridge.py",
        "line_number": 153,
        "methods": [
          "__init__",
          "_init_subsystems",
          "_extract_dream_emotion",
          "_build_dream_context",
          "_calculate_memory_priority",
          "_group_memories_by_emotion",
          "_update_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .fold_universal_bridge import MemoryFoldUniversalBridge",
          "export": "__all__.append('MemoryFoldUniversalBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "LineageChain",
        "type": "dataclass",
        "file_path": "features/memory/fold_lineage_tracker.py",
        "line_number": 121,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .fold_lineage_tracker import LineageChain",
          "export": "__all__.append('LineageChain')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFoldDatabase",
        "type": "class",
        "file_path": "features/memory/memory_fold.py",
        "line_number": 178,
        "methods": [
          "__init__",
          "_init_database",
          "add_fold",
          "get_folds",
          "update_relevance_scores",
          "_cleanup_old_folds",
          "get_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_fold import MemoryFoldDatabase",
          "export": "__all__.append('MemoryFoldDatabase')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionPromptManager",
        "type": "class",
        "file_path": "features/memory/memory_fold.py",
        "line_number": 480,
        "methods": [
          "__init__",
          "_load_prompts",
          "_get_default_prompts",
          "get_prompt_for_fold"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .memory_fold import VisionPromptManager",
          "export": "__all__.append('VisionPromptManager')"
        },
        {
          "integration_point": "features_hub.py",
          "action": "register_service",
          "code": "self.register_service('visionpromptmanager', VisionPromptManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFoldState",
        "type": "dataclass",
        "file_path": "features/memory/dream_memory_fold.py",
        "line_number": 53,
        "methods": [
          "add_snapshot"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/__init__.py",
          "action": "add_export",
          "code": "from .dream_memory_fold import MemoryFoldState",
          "export": "__all__.append('MemoryFoldState')"
        }
      ]
    },
    {
      "entity": {
        "name": "HookRegistrationError",
        "type": "class",
        "file_path": "features/memory/hooks/registry.py",
        "line_number": 21,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/hooks/__init__.py",
          "action": "add_export",
          "code": "from .registry import HookRegistrationError",
          "export": "__all__.append('HookRegistrationError')"
        }
      ]
    },
    {
      "entity": {
        "name": "HookPriority",
        "type": "class",
        "file_path": "features/memory/hooks/registry.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/hooks/__init__.py",
          "action": "add_export",
          "code": "from .registry import HookPriority",
          "export": "__all__.append('HookPriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "RegisteredHook",
        "type": "dataclass",
        "file_path": "features/memory/hooks/registry.py",
        "line_number": 36,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/hooks/__init__.py",
          "action": "add_export",
          "code": "from .registry import RegisteredHook",
          "export": "__all__.append('RegisteredHook')"
        }
      ]
    },
    {
      "entity": {
        "name": "HookRegistry",
        "type": "class",
        "file_path": "features/memory/hooks/registry.py",
        "line_number": 53,
        "methods": [
          "__init__",
          "register_hook",
          "unregister_hook",
          "execute_before_store",
          "execute_after_recall",
          "_execute_hooks",
          "_collect_hooks",
          "_execute_single_hook",
          "_is_circuit_broken",
          "_record_failure",
          "reset_circuit_breaker",
          "get_registered_hooks",
          "get_registry_metrics",
          "enable_circuit_breaker",
          "disable_circuit_breaker"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/memory/hooks/__init__.py",
          "action": "add_export",
          "code": "from .registry import HookRegistry",
          "export": "__all__.append('HookRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContentType",
        "type": "class",
        "file_path": "features/docututor/plugin.py",
        "line_number": 27,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/__init__.py",
          "action": "add_export",
          "code": "from .plugin import ContentType",
          "export": "__all__.append('ContentType')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserLevel",
        "type": "class",
        "file_path": "features/docututor/plugin.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/__init__.py",
          "action": "add_export",
          "code": "from .plugin import UserLevel",
          "export": "__all__.append('UserLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "GenerationConfig",
        "type": "class",
        "file_path": "features/docututor/plugin.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/__init__.py",
          "action": "add_export",
          "code": "from .plugin import GenerationConfig",
          "export": "__all__.append('GenerationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "DocuTutorPlugin",
        "type": "class",
        "file_path": "features/docututor/plugin.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "get_optimal_complexity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/__init__.py",
          "action": "add_export",
          "code": "from .plugin import DocuTutorPlugin",
          "export": "__all__.append('DocuTutorPlugin')"
        }
      ]
    },
    {
      "entity": {
        "name": "SKGRelationship",
        "type": "class",
        "file_path": "features/docututor/symbolic_knowledge_core/knowledge_graph.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/symbolic_knowledge_core/__init__.py",
          "action": "add_export",
          "code": "from .knowledge_graph import SKGRelationship",
          "export": "__all__.append('SKGRelationship')"
        }
      ]
    },
    {
      "entity": {
        "name": "DocSection",
        "type": "class",
        "file_path": "features/docututor/content_generation_engine/doc_generator.py",
        "line_number": 22,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/content_generation_engine/__init__.py",
          "action": "add_export",
          "code": "from .doc_generator import DocSection",
          "export": "__all__.append('DocSection')"
        }
      ]
    },
    {
      "entity": {
        "name": "DocumentationConfig",
        "type": "class",
        "file_path": "features/docututor/content_generation_engine/doc_generator.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/content_generation_engine/__init__.py",
          "action": "add_export",
          "code": "from .doc_generator import DocumentationConfig",
          "export": "__all__.append('DocumentationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "KnowledgeNode",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/knowledge_adaptation.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "access",
          "update_confidence",
          "add_relationship"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .knowledge_adaptation import KnowledgeNode",
          "export": "__all__.append('KnowledgeNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEvolution",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/memory_evolution.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "evolve_memory",
          "get_evolution_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .memory_evolution import MemoryEvolution",
          "export": "__all__.append('MemoryEvolution')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserInteraction",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/usage_learning.py",
        "line_number": 11,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .usage_learning import UserInteraction",
          "export": "__all__.append('UserInteraction')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractionPattern",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/usage_learning.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "update"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .usage_learning import InteractionPattern",
          "export": "__all__.append('InteractionPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "DocVersion",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/version_control.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "_generate_hash"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .version_control import DocVersion",
          "export": "__all__.append('DocVersion')"
        }
      ]
    },
    {
      "entity": {
        "name": "VersionHistory",
        "type": "class",
        "file_path": "features/docututor/memory_evolution/version_control.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "add_version",
          "get_version",
          "list_versions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/docututor/memory_evolution/__init__.py",
          "action": "add_export",
          "code": "from .version_control import VersionHistory",
          "export": "__all__.append('VersionHistory')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralSymbolicIntegration",
        "type": "class",
        "file_path": "features/integration/neural_symbolic_bridge.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "process",
          "_neural_process",
          "_symbolic_process",
          "_integrate_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .neural_symbolic_bridge import NeuralSymbolicIntegration",
          "export": "__all__.append('NeuralSymbolicIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemState",
        "type": "class",
        "file_path": "features/integration/system_coordinator.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .system_coordinator import SystemState",
          "export": "__all__.append('SystemState')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationLevel",
        "type": "class",
        "file_path": "features/integration/system_coordinator.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .system_coordinator import IntegrationLevel",
          "export": "__all__.append('IntegrationLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemResponse",
        "type": "dataclass",
        "file_path": "features/integration/system_coordinator.py",
        "line_number": 93,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .system_coordinator import SystemResponse",
          "export": "__all__.append('SystemResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemContext",
        "type": "dataclass",
        "file_path": "features/integration/system_coordinator.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .system_coordinator import SystemContext",
          "export": "__all__.append('SystemContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationMode",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import IntegrationMode",
          "export": "__all__.append('IntegrationMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkflowType",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import WorkflowType",
          "export": "__all__.append('WorkflowType')"
        }
      ]
    },
    {
      "entity": {
        "name": "OperationStatus",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 100,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import OperationStatus",
          "export": "__all__.append('OperationStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationRequest",
        "type": "dataclass",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import IntegrationRequest",
          "export": "__all__.append('IntegrationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegrationResponse",
        "type": "dataclass",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 123,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import IntegrationResponse",
          "export": "__all__.append('IntegrationResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleHealth",
        "type": "dataclass",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 135,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import ModuleHealth",
          "export": "__all__.append('ModuleHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkflowOrchestrator",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 145,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import WorkflowOrchestrator",
          "export": "__all__.append('WorkflowOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CEOAttitudeIntegrationHub",
        "type": "class",
        "file_path": "features/integration/executive_decision_integrator.py",
        "line_number": 590,
        "methods": [
          "__init__",
          "_determine_integration_mode",
          "_initialize_modules",
          "get_system_status",
          "get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .executive_decision_integrator import CEOAttitudeIntegrationHub",
          "export": "__all__.append('CEOAttitudeIntegrationHub')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionMode",
        "type": "class",
        "file_path": "features/integration/neuro_symbolic_fusion_layer.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import FusionMode",
          "export": "__all__.append('FusionMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionContext",
        "type": "dataclass",
        "file_path": "features/integration/neuro_symbolic_fusion_layer.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import FusionContext",
          "export": "__all__.append('FusionContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuroSymbolicPattern",
        "type": "class",
        "file_path": "features/integration/neuro_symbolic_fusion_layer.py",
        "line_number": 81,
        "methods": [
          "__init__",
          "calculate_coherence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import NeuroSymbolicPattern",
          "export": "__all__.append('NeuroSymbolicPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityType",
        "type": "class",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import ModalityType",
          "export": "__all__.append('ModalityType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityStatus",
        "type": "class",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import ModalityStatus",
          "export": "__all__.append('ModalityStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModalityCapability",
        "type": "dataclass",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 114,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import ModalityCapability",
          "export": "__all__.append('ModalityCapability')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseModality",
        "type": "class",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 142,
        "methods": [
          "__init__",
          "get_capabilities",
          "update_heartbeat",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import BaseModality",
          "export": "__all__.append('BaseModality')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionModality",
        "type": "class",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 206,
        "methods": [
          "__init__",
          "get_capabilities"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import VisionModality",
          "export": "__all__.append('VisionModality')"
        }
      ]
    },
    {
      "entity": {
        "name": "AudioModality",
        "type": "class",
        "file_path": "features/integration/dynamic_modality_broker.py",
        "line_number": 288,
        "methods": [
          "__init__",
          "get_capabilities"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_modality_broker import AudioModality",
          "export": "__all__.append('AudioModality')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemBridge",
        "type": "class",
        "file_path": "features/integration/system_bridge.py",
        "line_number": 30,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/__init__.py",
          "action": "add_export",
          "code": "from .system_bridge import SystemBridge",
          "export": "__all__.append('SystemBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedSafetyCoordinator",
        "type": "class",
        "file_path": "features/integration/safety/coordinator.py",
        "line_number": 55,
        "methods": [
          "__init__",
          "_calculate_safety_score",
          "_needs_emergency_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/safety/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import EnhancedSafetyCoordinator",
          "export": "__all__.append('EnhancedSafetyCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedPolicyProposal",
        "type": "class",
        "file_path": "features/integration/governance/policy_board.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "cast_quantum_vote",
          "compute_quantum_approval",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/governance/__init__.py",
          "action": "add_export",
          "code": "from .policy_board import EnhancedPolicyProposal",
          "export": "__all__.append('EnhancedPolicyProposal')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMetaCognitiveOrchestrator",
        "type": "class",
        "file_path": "features/integration/meta_cognitive/meta_cognitive.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "_calculate_base_coherence",
          "_apply_quantum_processing",
          "_validate_safety"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/integration/meta_cognitive/__init__.py",
          "action": "add_export",
          "code": "from .meta_cognitive import EnhancedMetaCognitiveOrchestrator",
          "export": "__all__.append('EnhancedMetaCognitiveOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyRadar",
        "type": "class",
        "file_path": "features/entropy/radar.py",
        "line_number": 81,
        "methods": [
          "__init__",
          "collect_sid_hashes",
          "shannon_entropy",
          "calculate_module_entropy",
          "generate_entropy_radar",
          "parse_entropy_logs",
          "_extract_entropy_data",
          "generate_time_series",
          "detect_inflection_points",
          "render_trend_graphs",
          "_render_matplotlib_graph",
          "_render_plotly_graph",
          "export_summary",
          "_export_markdown_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/entropy/__init__.py",
          "action": "add_export",
          "code": "from .radar import EntropyRadar",
          "export": "__all__.append('EntropyRadar')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreationType",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import CreationType",
          "export": "__all__.append('CreationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreateRequest",
        "type": "dataclass",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import CreateRequest",
          "export": "__all__.append('CreateRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreateResponse",
        "type": "dataclass",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import CreateResponse",
          "export": "__all__.append('CreateResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasCreateEngine",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "_parse_request",
          "_detect_creation_type",
          "_calculate_confidence",
          "_generate_suggestions",
          "_analyze_creation_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import LukhasCreateEngine",
          "export": "__all__.append('LukhasCreateEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "TextContentCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 239,
        "methods": [
          "_generate_main_content"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import TextContentCreator",
          "export": "__all__.append('TextContentCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeGenerationCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 272,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import CodeGenerationCreator",
          "export": "__all__.append('CodeGenerationCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DesignConceptCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 316,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import DesignConceptCreator",
          "export": "__all__.append('DesignConceptCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeWritingCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 354,
        "methods": [
          "_generate_creative_content"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import CreativeWritingCreator",
          "export": "__all__.append('CreativeWritingCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "TechnicalDocCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 388,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import TechnicalDocCreator",
          "export": "__all__.append('TechnicalDocCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "StrategicPlanCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 416,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import StrategicPlanCreator",
          "export": "__all__.append('StrategicPlanCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "InnovationCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 450,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import InnovationCreator",
          "export": "__all__.append('InnovationCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultimediaCreator",
        "type": "class",
        "file_path": "features/creative_engine/engine.py",
        "line_number": 479,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/creative_engine/__init__.py",
          "action": "add_export",
          "code": "from .engine import MultimediaCreator",
          "export": "__all__.append('MultimediaCreator')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedDriftContext",
        "type": "dataclass",
        "file_path": "features/drift/unified_drift_system.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/drift/__init__.py",
          "action": "add_export",
          "code": "from .unified_drift_system import UnifiedDriftContext",
          "export": "__all__.append('UnifiedDriftContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedDriftResult",
        "type": "dataclass",
        "file_path": "features/drift/unified_drift_system.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/drift/__init__.py",
          "action": "add_export",
          "code": "from .unified_drift_system import UnifiedDriftResult",
          "export": "__all__.append('UnifiedDriftResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedDriftSystem",
        "type": "class",
        "file_path": "features/drift/unified_drift_system.py",
        "line_number": 182,
        "methods": [
          "__init__",
          "analyze_unified_drift",
          "analyze_drift_trends",
          "_get_user_tier",
          "_get_user_baseline",
          "_analyze_symbolic_drift",
          "_analyze_emotional_drift",
          "_analyze_memory_drift",
          "_analyze_coherence_drift",
          "_analyze_identity_drift",
          "_analyze_ethical_drift",
          "_calculate_severity",
          "_calculate_phase",
          "_calculate_cascade_risk",
          "_analyze_trend_direction",
          "_generate_recommendations",
          "_trigger_cascade_alert",
          "_log_unified_drift"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/drift/__init__.py",
          "action": "add_export",
          "code": "from .unified_drift_system import UnifiedDriftSystem",
          "export": "__all__.append('UnifiedDriftSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthCheck",
        "type": "dataclass",
        "file_path": "features/common/base_health.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .base_health import HealthCheck",
          "export": "__all__.append('HealthCheck')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseHealthMonitor",
        "type": "class",
        "file_path": "features/common/base_health.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "add_check",
          "get_status",
          "get_report",
          "clear_checks"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .base_health import BaseHealthMonitor",
          "export": "__all__.append('BaseHealthMonitor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicReference",
        "type": "class",
        "file_path": "features/common/symbolic.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "hash",
          "__str__",
          "__repr__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .symbolic import SymbolicReference",
          "export": "__all__.append('SymbolicReference')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicRegistry",
        "type": "class",
        "file_path": "features/common/symbolic.py",
        "line_number": 75,
        "methods": [
          "__init__",
          "register",
          "get",
          "list_all"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .symbolic import SymbolicRegistry",
          "export": "__all__.append('SymbolicRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalAssessment",
        "type": "dataclass",
        "file_path": "features/common/ethics.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .ethics import EthicalAssessment",
          "export": "__all__.append('EthicalAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsValidator",
        "type": "class",
        "file_path": "features/common/ethics.py",
        "line_number": 73,
        "methods": [
          "__init__",
          "assess_action"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/common/__init__.py",
          "action": "add_export",
          "code": "from .ethics import EthicsValidator",
          "export": "__all__.append('EthicsValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicNode",
        "type": "class",
        "file_path": "features/crista_optimizer/crista_optimizer.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "split",
          "update_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/crista_optimizer/__init__.py",
          "action": "add_export",
          "code": "from .crista_optimizer import SymbolicNode",
          "export": "__all__.append('SymbolicNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConnectionType",
        "type": "class",
        "file_path": "features/crista_optimizer/symbolic_network.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/crista_optimizer/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_network import ConnectionType",
          "export": "__all__.append('ConnectionType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicNode",
        "type": "dataclass",
        "file_path": "features/crista_optimizer/symbolic_network.py",
        "line_number": 76,
        "methods": [
          "__post_init__",
          "update_metrics",
          "split",
          "_calculate_child_position",
          "merge_with",
          "add_connection",
          "remove_connection",
          "get_connection_strength",
          "is_connected_to",
          "get_state_summary"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/crista_optimizer/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_network import SymbolicNode",
          "export": "__all__.append('SymbolicNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "NetworkHealth",
        "type": "class",
        "file_path": "features/crista_optimizer/topology_manager.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/crista_optimizer/__init__.py",
          "action": "add_export",
          "code": "from .topology_manager import NetworkHealth",
          "export": "__all__.append('NetworkHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "TopologyMetrics",
        "type": "dataclass",
        "file_path": "features/crista_optimizer/topology_manager.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/crista_optimizer/__init__.py",
          "action": "add_export",
          "code": "from .topology_manager import TopologyMetrics",
          "export": "__all__.append('TopologyMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConfidenceLevel",
        "type": "class",
        "file_path": "features/decision/bridge.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import ConfidenceLevel",
          "export": "__all__.append('ConfidenceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionCriteria",
        "type": "class",
        "file_path": "features/decision/bridge.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionCriteria",
          "export": "__all__.append('DecisionCriteria')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionAlternative",
        "type": "dataclass",
        "file_path": "features/decision/bridge.py",
        "line_number": 115,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionAlternative",
          "export": "__all__.append('DecisionAlternative')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionEvaluation",
        "type": "dataclass",
        "file_path": "features/decision/bridge.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionEvaluation",
          "export": "__all__.append('DecisionEvaluation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionOutcome",
        "type": "dataclass",
        "file_path": "features/decision/bridge.py",
        "line_number": 143,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionOutcome",
          "export": "__all__.append('DecisionOutcome')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionStrategy",
        "type": "class",
        "file_path": "features/decision/bridge.py",
        "line_number": 155,
        "methods": [
          "evaluate_alternatives",
          "select_best_alternative"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionStrategy",
          "export": "__all__.append('DecisionStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "UtilityMaximizationStrategy",
        "type": "class",
        "file_path": "features/decision/bridge.py",
        "line_number": 171,
        "methods": [
          "__init__",
          "evaluate_alternatives",
          "select_best_alternative",
          "_calculate_utility_score",
          "_calculate_risk_score",
          "_calculate_ethics_score",
          "_calculate_efficiency_score",
          "_calculate_feasibility_score",
          "_assess_risks",
          "_identify_uncertainties",
          "_calculate_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import UtilityMaximizationStrategy",
          "export": "__all__.append('UtilityMaximizationStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionMakingBridge",
        "type": "class",
        "file_path": "features/decision/bridge.py",
        "line_number": 291,
        "methods": [
          "__init__",
          "_default_config",
          "integrate_components",
          "get_decision_status",
          "register_decision_strategy",
          "analyze_decision_patterns",
          "get_decision_metrics",
          "_validate_decision_inputs",
          "_select_strategy",
          "_generate_implementation_timeline",
          "_create_monitoring_plan",
          "_create_rollback_plan",
          "_build_decision_rationale",
          "_create_evaluation_summary",
          "_track_decision_for_learning",
          "_calculate_confidence_trend",
          "_analyze_decision_timing"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/decision/__init__.py",
          "action": "add_export",
          "code": "from .bridge import DecisionMakingBridge",
          "export": "__all__.append('DecisionMakingBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryReflectionTemplate",
        "type": "class",
        "file_path": "features/symbolic/memory_reflection_template.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "process_signal"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .memory_reflection_template import MemoryReflectionTemplate",
          "export": "__all__.append('MemoryReflectionTemplate')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralAgentTemplate",
        "type": "class",
        "file_path": "features/symbolic/moral_agent_template.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "process_signal"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .moral_agent_template import MoralAgentTemplate",
          "export": "__all__.append('MoralAgentTemplate')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalReasonerTemplate",
        "type": "class",
        "file_path": "features/symbolic/causal_reasoner_template.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "reason"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .causal_reasoner_template import CausalReasonerTemplate",
          "export": "__all__.append('CausalReasonerTemplate')"
        }
      ]
    },
    {
      "entity": {
        "name": "InferenceStep",
        "type": "dataclass",
        "file_path": "features/symbolic/tracer.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .tracer import InferenceStep",
          "export": "__all__.append('InferenceStep')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicTraceVerifier",
        "type": "class",
        "file_path": "features/symbolic/trace_verifier.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "_load_agent_flow_map",
          "verify_trace"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/__init__.py",
          "action": "add_export",
          "code": "from .trace_verifier import SymbolicTraceVerifier",
          "export": "__all__.append('SymbolicTraceVerifier')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionCandidate",
        "type": "dataclass",
        "file_path": "features/symbolic/glyphs/symbolic_foundry.py",
        "line_number": 58,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/glyphs/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import FusionCandidate",
          "export": "__all__.append('FusionCandidate')"
        }
      ]
    },
    {
      "entity": {
        "name": "MutationResult",
        "type": "dataclass",
        "file_path": "features/symbolic/glyphs/symbolic_foundry.py",
        "line_number": 84,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/glyphs/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_foundry import MutationResult",
          "export": "__all__.append('MutationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecayMetrics",
        "type": "dataclass",
        "file_path": "features/symbolic/glyphs/glyph_sentinel.py",
        "line_number": 74,
        "methods": [
          "update_trend"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/glyphs/__init__.py",
          "action": "add_export",
          "code": "from .glyph_sentinel import DecayMetrics",
          "export": "__all__.append('DecayMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "PersistenceProfile",
        "type": "dataclass",
        "file_path": "features/symbolic/glyphs/glyph_sentinel.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/glyphs/__init__.py",
          "action": "add_export",
          "code": "from .glyph_sentinel import PersistenceProfile",
          "export": "__all__.append('PersistenceProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "IGlyphMetadataProvider",
        "type": "class",
        "file_path": "features/symbolic/security/glyph_redactor_engine.py",
        "line_number": 42,
        "methods": [
          "get_glyph_sensitivity",
          "get_all_known_glyphs_regex"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/security/__init__.py",
          "action": "add_export",
          "code": "from .glyph_redactor_engine import IGlyphMetadataProvider",
          "export": "__all__.append('IGlyphMetadataProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCollapseEngine",
        "type": "class",
        "file_path": "features/symbolic/collapse/reasoner.py",
        "line_number": 79,
        "methods": [
          "__init__",
          "initiate_collapse",
          "evaluate_branch_stability",
          "emit_collapse_event",
          "log_entropy_threshold_crossing",
          "_determine_collapse_type",
          "_select_resolution_strategy",
          "_apply_resolution_strategy",
          "_calculate_entropy_delta",
          "_calculate_final_confidence",
          "_calculate_symbolic_coherence",
          "_calculate_risk_level",
          "_write_collapse_audit_log",
          "_update_symbolic_memory",
          "get_collapse_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/collapse/__init__.py",
          "action": "add_export",
          "code": "from .reasoner import QuantumCollapseEngine",
          "export": "__all__.append('QuantumCollapseEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecallHooks",
        "type": "class",
        "file_path": "features/symbolic/memoria/recall_hooks.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "add_pre_recall_hook",
          "add_post_recall_hook",
          "execute_pre_recall_hooks",
          "execute_post_recall_hooks"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/memoria/__init__.py",
          "action": "add_export",
          "code": "from .recall_hooks import RecallHooks",
          "export": "__all__.append('RecallHooks')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicTraceMap",
        "type": "class",
        "file_path": "features/symbolic/memoria/symbolic_trace_map.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "add_trace_node",
          "get_trace",
          "generate_flow_diagram"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "features/symbolic/memoria/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_trace_map import SymbolicTraceMap",
          "export": "__all__.append('SymbolicTraceMap')"
        }
      ]
    },
    {
      "entity": {
        "name": "FragmentType",
        "type": "class",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import FragmentType",
          "export": "__all__.append('FragmentType')"
        }
      ]
    },
    {
      "entity": {
        "name": "NarrativeArc",
        "type": "class",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import NarrativeArc",
          "export": "__all__.append('NarrativeArc')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreadSeverity",
        "type": "class",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import ThreadSeverity",
          "export": "__all__.append('ThreadSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicFragment",
        "type": "dataclass",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import SymbolicFragment",
          "export": "__all__.append('SymbolicFragment')"
        }
      ]
    },
    {
      "entity": {
        "name": "NarrativeMotif",
        "type": "dataclass",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 108,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import NarrativeMotif",
          "export": "__all__.append('NarrativeMotif')"
        }
      ]
    },
    {
      "entity": {
        "name": "NarrativeThread",
        "type": "dataclass",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 122,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import NarrativeThread",
          "export": "__all__.append('NarrativeThread')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreadTrace",
        "type": "dataclass",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 142,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import ThreadTrace",
          "export": "__all__.append('ThreadTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "WeavingReport",
        "type": "dataclass",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 157,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import WeavingReport",
          "export": "__all__.append('WeavingReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicPatternExtractor",
        "type": "class",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 172,
        "methods": [
          "extract_symbols",
          "extract_glyphs",
          "extract_emotions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import SymbolicPatternExtractor",
          "export": "__all__.append('SymbolicPatternExtractor')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypalAnalyzer",
        "type": "class",
        "file_path": "narrative/symbolic_weaver.py",
        "line_number": 278,
        "methods": [
          "analyze_archetypal_pattern",
          "_calculate_archetypal_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "narrative/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_weaver import ArchetypalAnalyzer",
          "export": "__all__.append('ArchetypalAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailureMetrics",
        "type": "dataclass",
        "file_path": "simulation/agents_of_failure.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "simulation/__init__.py",
          "action": "add_export",
          "code": "from .agents_of_failure import FailureMetrics",
          "export": "__all__.append('FailureMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailureSimulator",
        "type": "class",
        "file_path": "simulation/agents_of_failure.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "step",
          "_entropic_decay",
          "_collapse_probability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "simulation/__init__.py",
          "action": "add_export",
          "code": "from .agents_of_failure import FailureSimulator",
          "export": "__all__.append('FailureSimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DocumentationConfig",
        "type": "dataclass",
        "file_path": "docs/documentation_updater.py",
        "line_number": 65,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/__init__.py",
          "action": "add_export",
          "code": "from .documentation_updater import DocumentationConfig",
          "export": "__all__.append('DocumentationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "FileAnalysis",
        "type": "dataclass",
        "file_path": "docs/documentation_updater.py",
        "line_number": 86,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/__init__.py",
          "action": "add_export",
          "code": "from .documentation_updater import FileAnalysis",
          "export": "__all__.append('FileAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASDocumentationEngine",
        "type": "class",
        "file_path": "docs/documentation_updater.py",
        "line_number": 101,
        "methods": [
          "__init__",
          "_infer_module_purpose",
          "_assess_technical_complexity",
          "_format_generated_header",
          "_structure_generated_content",
          "_generate_lambda_tags",
          "_generate_fallback_header",
          "_generate_summary_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/__init__.py",
          "action": "add_export",
          "code": "from .documentation_updater import LUKHASDocumentationEngine",
          "export": "__all__.append('LUKHASDocumentationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreeLawsEthics",
        "type": "class",
        "file_path": "docs/examples/three_laws_ethics.py",
        "line_number": 8,
        "methods": [
          "evaluate_decision",
          "get_policy_name",
          "_causes_human_harm",
          "_allows_human_harm",
          "_is_human_order",
          "_threatens_self"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/examples/__init__.py",
          "action": "add_export",
          "code": "from .three_laws_ethics import ThreeLawsEthics",
          "export": "__all__.append('ThreeLawsEthics')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionHook",
        "type": "class",
        "file_path": "docs/examples/compression_hook.py",
        "line_number": 7,
        "methods": [
          "before_store",
          "after_recall",
          "get_hook_name"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/examples/__init__.py",
          "action": "add_export",
          "code": "from .compression_hook import CompressionHook",
          "export": "__all__.append('CompressionHook')"
        }
      ]
    },
    {
      "entity": {
        "name": "TranslationAgent",
        "type": "class",
        "file_path": "docs/examples/translation_agent.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "get_agent_id",
          "get_capabilities",
          "process",
          "validate_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "docs/examples/__init__.py",
          "action": "add_export",
          "code": "from .translation_agent import TranslationAgent",
          "export": "__all__.append('TranslationAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSignature",
        "type": "dataclass",
        "file_path": "reasoning/id_reasoning_engine.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import QuantumSignature",
          "export": "__all__.append('QuantumSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditLogEntry",
        "type": "dataclass",
        "file_path": "reasoning/id_reasoning_engine.py",
        "line_number": 130,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import AuditLogEntry",
          "export": "__all__.append('AuditLogEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaLockedMemory",
        "type": "class",
        "file_path": "reasoning/id_reasoning_engine.py",
        "line_number": 174,
        "methods": [
          "__init__",
          "lock_memory",
          "unlock_memory",
          "_generate_emotional_key",
          "_generate_standard_key",
          "_encrypt_data",
          "_decrypt_data",
          "_calculate_emotional_similarity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import TraumaLockedMemory",
          "export": "__all__.append('TraumaLockedMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIdManager",
        "type": "class",
        "file_path": "reasoning/id_reasoning_engine.py",
        "line_number": 454,
        "methods": [
          "__init__",
          "_verify_emoji_seed",
          "_verify_biometrics",
          "_verify_sid_puzzle",
          "_verify_emergency_gesture",
          "_get_tier_permissions",
          "_generate_quantum_signature",
          "get_compliance_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import LukhasIdManager",
          "export": "__all__.append('LukhasIdManager')"
        },
        {
          "integration_point": "reasoning_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasidmanager', LukhasIdManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryTextDeltaEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_text_delta_event.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_text_delta_event import ResponseReasoningSummaryTextDeltaEvent",
          "export": "__all__.append('ResponseReasoningSummaryTextDeltaEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarytextdeltaevent', ResponseReasoningSummaryTextDeltaEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryDoneEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_done_event.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_done_event import ResponseReasoningSummaryDoneEvent",
          "export": "__all__.append('ResponseReasoningSummaryDoneEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarydoneevent', ResponseReasoningSummaryDoneEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEthicalWarning",
        "type": "class",
        "file_path": "reasoning/reasoning_engine.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_engine import SymbolicEthicalWarning",
          "export": "__all__.append('SymbolicEthicalWarning')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicPathState",
        "type": "class",
        "file_path": "reasoning/symbolic_logic_engine.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_logic_engine import SymbolicPathState",
          "export": "__all__.append('SymbolicPathState')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphSignal",
        "type": "class",
        "file_path": "reasoning/symbolic_logic_engine.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_logic_engine import GlyphSignal",
          "export": "__all__.append('GlyphSignal')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContradictionType",
        "type": "class",
        "file_path": "reasoning/symbolic_logic_engine.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_logic_engine import ContradictionType",
          "export": "__all__.append('ContradictionType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConflictType",
        "type": "class",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import ConflictType",
          "export": "__all__.append('ConflictType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResolutionMode",
        "type": "class",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import ResolutionMode",
          "export": "__all__.append('ResolutionMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConflictSeverity",
        "type": "class",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import ConflictSeverity",
          "export": "__all__.append('ConflictSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicFragment",
        "type": "dataclass",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import SymbolicFragment",
          "export": "__all__.append('SymbolicFragment')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContradictionReport",
        "type": "dataclass",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import ContradictionReport",
          "export": "__all__.append('ContradictionReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConflictResolutionResult",
        "type": "dataclass",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import ConflictResolutionResult",
          "export": "__all__.append('ConflictResolutionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicConflictResolver",
        "type": "class",
        "file_path": "reasoning/conflict_resolver.py",
        "line_number": 115,
        "methods": [
          "__init__",
          "detect_symbolic_conflict",
          "classify_contradiction",
          "resolve_conflict",
          "emit_resolution_trace",
          "_initialize_patterns",
          "_detect_logical_contradictions",
          "_detect_ethical_contradictions",
          "_detect_emotional_contradictions",
          "_detect_memory_contradictions",
          "_detect_glyph_contradictions",
          "_detect_recursive_loops",
          "_detect_circular_references",
          "_calculate_severity",
          "_calculate_entropy_delta",
          "_calculate_confidence_impact",
          "_apply_merge_strategy",
          "_apply_veto_strategy",
          "_apply_suppress_strategy",
          "_apply_escalate_strategy",
          "_apply_freeze_strategy",
          "_apply_reconcile_strategy",
          "_apply_isolate_strategy",
          "_write_resolution_audit_log",
          "_notify_mesh_components",
          "get_resolution_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .conflict_resolver import SymbolicConflictResolver",
          "export": "__all__.append('SymbolicConflictResolver')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryPartDoneEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_part_done_event.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_part_done_event import ResponseReasoningSummaryPartDoneEvent",
          "export": "__all__.append('ResponseReasoningSummaryPartDoneEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarypartdoneevent', ResponseReasoningSummaryPartDoneEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningError",
        "type": "class",
        "file_path": "reasoning/reasoning_errors.py",
        "line_number": 4,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_errors import ReasoningError",
          "export": "__all__.append('ReasoningError')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedReasoningRequest",
        "type": "dataclass",
        "file_path": "reasoning/\u039bBot_reasoning.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_reasoning import AdvancedReasoningRequest",
          "export": "__all__.append('AdvancedReasoningRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedReasoningResult",
        "type": "dataclass",
        "file_path": "reasoning/\u039bBot_reasoning.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_reasoning import AdvancedReasoningResult",
          "export": "__all__.append('AdvancedReasoningResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotAdvancedReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/\u039bBot_reasoning.py",
        "line_number": 95,
        "methods": [
          "__init__",
          "get_reasoning_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_reasoning import \u039bBotAdvancedReasoningOrchestrator",
          "export": "__all__.append('\u039bBotAdvancedReasoningOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConflictZoneType",
        "type": "class",
        "file_path": "reasoning/oracle_predictor.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oracle_predictor import ConflictZoneType",
          "export": "__all__.append('ConflictZoneType')"
        }
      ]
    },
    {
      "entity": {
        "name": "PredictionResult",
        "type": "dataclass",
        "file_path": "reasoning/oracle_predictor.py",
        "line_number": 111,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oracle_predictor import PredictionResult",
          "export": "__all__.append('PredictionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "TimeSeriesPattern",
        "type": "dataclass",
        "file_path": "reasoning/oracle_predictor.py",
        "line_number": 157,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oracle_predictor import TimeSeriesPattern",
          "export": "__all__.append('TimeSeriesPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedOraclePredictor",
        "type": "class",
        "file_path": "reasoning/oracle_predictor.py",
        "line_number": 1721,
        "methods": [
          "__init__",
          "_extract_bridge_theme"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oracle_predictor import EnhancedOraclePredictor",
          "export": "__all__.append('EnhancedOraclePredictor')"
        }
      ]
    },
    {
      "entity": {
        "name": "OraclePromptTemplate",
        "type": "dataclass",
        "file_path": "reasoning/openai_oracle_adapter.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .openai_oracle_adapter import OraclePromptTemplate",
          "export": "__all__.append('OraclePromptTemplate')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleOpenAIAdapter",
        "type": "class",
        "file_path": "reasoning/openai_oracle_adapter.py",
        "line_number": 58,
        "methods": [
          "__init__",
          "_initialize_templates",
          "_parse_prediction_response",
          "_parse_prophecy_response",
          "_parse_dream_response",
          "_parse_analysis_response",
          "_parse_temporal_response",
          "_extract_themes",
          "_extract_dream_symbols",
          "_extract_insights",
          "_assess_structure",
          "_extract_temporal_connections"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .openai_oracle_adapter import OracleOpenAIAdapter",
          "export": "__all__.append('OracleOpenAIAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryDeltaEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_delta_event.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_delta_event import ResponseReasoningSummaryDeltaEvent",
          "export": "__all__.append('ResponseReasoningSummaryDeltaEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarydeltaevent', ResponseReasoningSummaryDeltaEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCollapseEngine",
        "type": "class",
        "file_path": "reasoning/collapse_reasoner.py",
        "line_number": 79,
        "methods": [
          "__init__",
          "initiate_collapse",
          "evaluate_branch_stability",
          "emit_collapse_event",
          "log_entropy_threshold_crossing",
          "_determine_collapse_type",
          "_select_resolution_strategy",
          "_apply_resolution_strategy",
          "_calculate_entropy_delta",
          "_calculate_final_confidence",
          "_calculate_symbolic_coherence",
          "_calculate_risk_level",
          "_write_collapse_audit_log",
          "_update_symbolic_memory",
          "get_collapse_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .collapse_reasoner import QuantumCollapseEngine",
          "export": "__all__.append('QuantumCollapseEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveReasoningLoop",
        "type": "class",
        "file_path": "reasoning/adaptive_reasoning_loop.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "start_reasoning",
          "stop_reasoning",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_reasoning_loop import AdaptiveReasoningLoop",
          "export": "__all__.append('AdaptiveReasoningLoop')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningItem",
        "type": "class",
        "file_path": "reasoning/response_reasoning_item.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_item import ResponseReasoningItem",
          "export": "__all__.append('ResponseReasoningItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningDoneEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_done_event.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_done_event import ResponseReasoningDoneEvent",
          "export": "__all__.append('ResponseReasoningDoneEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningdoneevent', ResponseReasoningDoneEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ScientificTheoryFormer",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 74,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import ScientificTheoryFormer",
          "export": "__all__.append('ScientificTheoryFormer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalReasoner",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 78,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import EthicalReasoner",
          "export": "__all__.append('EthicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MathematicalReasoner",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 82,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import MathematicalReasoner",
          "export": "__all__.append('MathematicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiScaleReasoning",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 86,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import MultiScaleReasoning",
          "export": "__all__.append('MultiScaleReasoning')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossBrainReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 90,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import CrossBrainReasoningOrchestrator",
          "export": "__all__.append('CrossBrainReasoningOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioSymbolicConfidenceIntegrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 95,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import QuantumBioSymbolicConfidenceIntegrator",
          "export": "__all__.append('QuantumBioSymbolicConfidenceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ScientificTheoryFormer",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 119,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import ScientificTheoryFormer",
          "export": "__all__.append('ScientificTheoryFormer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalReasoner",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 123,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import EthicalReasoner",
          "export": "__all__.append('EthicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MathematicalReasoner",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 127,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import MathematicalReasoner",
          "export": "__all__.append('MathematicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiScaleReasoning",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 131,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import MultiScaleReasoning",
          "export": "__all__.append('MultiScaleReasoning')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossBrainReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 135,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import CrossBrainReasoningOrchestrator",
          "export": "__all__.append('CrossBrainReasoningOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioSymbolicConfidenceIntegrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 140,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import QuantumBioSymbolicConfidenceIntegrator",
          "export": "__all__.append('QuantumBioSymbolicConfidenceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedReasoningRequest",
        "type": "dataclass",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 161,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import AdvancedReasoningRequest",
          "export": "__all__.append('AdvancedReasoningRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedReasoningResult",
        "type": "dataclass",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 172,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import AdvancedReasoningResult",
          "export": "__all__.append('AdvancedReasoningResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotAdvancedReasoningOrchestrator",
        "type": "class",
        "file_path": "reasoning/LBot_reasoning_processed.py",
        "line_number": 184,
        "methods": [
          "__init__",
          "get_reasoning_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .LBot_reasoning_processed import \u039bBotAdvancedReasoningOrchestrator",
          "export": "__all__.append('\u039bBotAdvancedReasoningOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralPrinciple",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import MoralPrinciple",
          "export": "__all__.append('MoralPrinciple')"
        }
      ]
    },
    {
      "entity": {
        "name": "StakeholderType",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import StakeholderType",
          "export": "__all__.append('StakeholderType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalDilemmaType",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalDilemmaType",
          "export": "__all__.append('EthicalDilemmaType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralJudgment",
        "type": "dataclass",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 148,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import MoralJudgment",
          "export": "__all__.append('MoralJudgment')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValueAlignmentAssessment",
        "type": "dataclass",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 173,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ValueAlignmentAssessment",
          "export": "__all__.append('ValueAlignmentAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalConstraint",
        "type": "dataclass",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 194,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalConstraint",
          "export": "__all__.append('EthicalConstraint')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeontologicalReasoner",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 215,
        "methods": [
          "__init__",
          "_generate_universalization_reasoning",
          "_generate_humanity_reasoning",
          "_generate_kingdom_reasoning",
          "_identify_relevant_duties",
          "_find_duty_conflicts",
          "_resolve_duty_conflicts",
          "_calculate_deontological_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import DeontologicalReasoner",
          "export": "__all__.append('DeontologicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsequentialistReasoner",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 422,
        "methods": [
          "__init__",
          "_check_preference_satisfaction",
          "_affects_capability",
          "_priority_weighted_aggregation",
          "_calculate_consequentialist_confidence",
          "_generate_utilitarian_justification"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ConsequentialistReasoner",
          "export": "__all__.append('ConsequentialistReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValueAlignmentSystem",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 628,
        "methods": [
          "__init__",
          "_identify_relevant_values",
          "_extract_values_from_text",
          "_calculate_value_drift_rate",
          "_identify_misalignment_risks",
          "_suggest_alignment_interventions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ValueAlignmentSystem",
          "export": "__all__.append('ValueAlignmentSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalReasoningSystem",
        "type": "class",
        "file_path": "reasoning/ethical_reasoning_system.py",
        "line_number": 913,
        "methods": [
          "__init__",
          "_initialize_default_constraints",
          "_initialize_drift_detector",
          "_create_constraint_violation_judgment",
          "_estimate_impact_magnitude",
          "_estimate_impact_valence",
          "_identify_specific_impacts",
          "_identify_mitigation_needs",
          "_identify_uncertainty_factors",
          "_calculate_overall_confidence",
          "_extract_principle_weights",
          "_calculate_framework_consensus",
          "_identify_potential_harms",
          "_generate_mitigation_strategies"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalReasoningSystem",
          "export": "__all__.append('EthicalReasoningSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningDeltaEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_delta_event.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_delta_event import ResponseReasoningDeltaEvent",
          "export": "__all__.append('ResponseReasoningDeltaEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningdeltaevent', ResponseReasoningDeltaEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningItemParam",
        "type": "class",
        "file_path": "reasoning/response_reasoning_item_param.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_item_param import ResponseReasoningItemParam",
          "export": "__all__.append('ResponseReasoningItemParam')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasonerType",
        "type": "class",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import ReasonerType",
          "export": "__all__.append('ReasonerType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningQuery",
        "type": "dataclass",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 95,
        "methods": [
          "add_conclusion"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import ReasoningQuery",
          "export": "__all__.append('ReasoningQuery')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningInsight",
        "type": "dataclass",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 125,
        "methods": [
          "get_consensus_score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import ReasoningInsight",
          "export": "__all__.append('ReasoningInsight')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningAgent",
        "type": "class",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 157,
        "methods": [
          "__init__",
          "_initialize_specialization",
          "_get_memory_emotion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import ReasoningAgent",
          "export": "__all__.append('ReasoningAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "LogicalReasoningAgent",
        "type": "class",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 319,
        "methods": [
          "_extract_premises",
          "_apply_deduction",
          "_extract_symbols"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import LogicalReasoningAgent",
          "export": "__all__.append('LogicalReasoningAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "CausalReasoningAgent",
        "type": "class",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 417,
        "methods": [
          "_build_causal_chain",
          "_analyze_causality",
          "_extract_symbols"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import CausalReasoningAgent",
          "export": "__all__.append('CausalReasoningAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeReasoningAgent",
        "type": "class",
        "file_path": "reasoning/reasoning_colony.py",
        "line_number": 523,
        "methods": [
          "_generate_associations",
          "_find_novel_connections",
          "_calculate_novelty",
          "_synthesize_creative_insight",
          "_extract_symbols"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_colony import CreativeReasoningAgent",
          "export": "__all__.append('CreativeReasoningAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryPartAddedEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_part_added_event.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_part_added_event import ResponseReasoningSummaryPartAddedEvent",
          "export": "__all__.append('ResponseReasoningSummaryPartAddedEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarypartaddedevent', ResponseReasoningSummaryPartAddedEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "TracebackDepth",
        "type": "class",
        "file_path": "reasoning/traceback_orchestrator.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .traceback_orchestrator import TracebackDepth",
          "export": "__all__.append('TracebackDepth')"
        }
      ]
    },
    {
      "entity": {
        "name": "TracebackNode",
        "type": "dataclass",
        "file_path": "reasoning/traceback_orchestrator.py",
        "line_number": 66,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .traceback_orchestrator import TracebackNode",
          "export": "__all__.append('TracebackNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "TracebackResult",
        "type": "dataclass",
        "file_path": "reasoning/traceback_orchestrator.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .traceback_orchestrator import TracebackResult",
          "export": "__all__.append('TracebackResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecursiveCollapseLineageTracker",
        "type": "class",
        "file_path": "reasoning/traceback_orchestrator.py",
        "line_number": 107,
        "methods": [
          "__init__",
          "trace_collapse_lineage",
          "find_symbolic_origin",
          "emit_traceback_report",
          "detect_feedback_loop",
          "_create_node_from_chain",
          "_extract_glyph_signature",
          "_trace_eliminated_chain",
          "_extract_key_glyphs",
          "_trace_glyph_origin",
          "_trace_contradiction_sources",
          "_perform_recursive_trace",
          "_create_derived_node",
          "_analyze_drift_patterns",
          "_analyze_emotional_trajectory",
          "_extract_causal_chains",
          "_analyze_recursion_patterns",
          "_assess_symbolic_coherence",
          "_serialize_node_for_report",
          "_generate_repair_suggestions",
          "_calculate_lineage_stability",
          "_is_cycling_pattern",
          "_detect_entropy_oscillation",
          "_write_traceback_audit_log",
          "get_session_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .traceback_orchestrator import RecursiveCollapseLineageTracker",
          "export": "__all__.append('RecursiveCollapseLineageTracker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResponseReasoningSummaryTextDoneEvent",
        "type": "class",
        "file_path": "reasoning/response_reasoning_summary_text_done_event.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/__init__.py",
          "action": "add_export",
          "code": "from .response_reasoning_summary_text_done_event import ResponseReasoningSummaryTextDoneEvent",
          "export": "__all__.append('ResponseReasoningSummaryTextDoneEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('responsereasoningsummarytextdoneevent', ResponseReasoningSummaryTextDoneEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningReportGenerator",
        "type": "class",
        "file_path": "reasoning/reporting/reasoning_report_generator.py",
        "line_number": 4,
        "methods": [
          "generate_report",
          "_format_trace"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/reporting/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_report_generator import ReasoningReportGenerator",
          "export": "__all__.append('ReasoningReportGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnalysisRequest",
        "type": "dataclass",
        "file_path": "reasoning/analysis/engine.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/analysis/__init__.py",
          "action": "add_export",
          "code": "from .engine import AnalysisRequest",
          "export": "__all__.append('AnalysisRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "GoalManagementNode",
        "type": "class",
        "file_path": "reasoning/goals/goal_manager.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "process",
          "_create_goal",
          "_create_action_plan",
          "_create_query_plan",
          "_create_task_plan",
          "_create_dialogue_plan",
          "update_goal_progress"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/goals/__init__.py",
          "action": "add_export",
          "code": "from .goal_manager import GoalManagementNode",
          "export": "__all__.append('GoalManagementNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgenticTrace",
        "type": "class",
        "file_path": "reasoning/utils/agentic_trace.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "log_action",
          "get_trace"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/utils/__init__.py",
          "action": "add_export",
          "code": "from .agentic_trace import AgenticTrace",
          "export": "__all__.append('AgenticTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceMapper",
        "type": "class",
        "file_path": "reasoning/diagnostics/trace_mapper.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "load_trace",
          "map_traces"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/diagnostics/__init__.py",
          "action": "add_export",
          "code": "from .trace_mapper import TraceMapper",
          "export": "__all__.append('TraceMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSignature",
        "type": "dataclass",
        "file_path": "reasoning/systems/id_reasoning_engine.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/systems/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import QuantumSignature",
          "export": "__all__.append('QuantumSignature')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditLogEntry",
        "type": "dataclass",
        "file_path": "reasoning/systems/id_reasoning_engine.py",
        "line_number": 130,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/systems/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import AuditLogEntry",
          "export": "__all__.append('AuditLogEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraumaLockedMemory",
        "type": "class",
        "file_path": "reasoning/systems/id_reasoning_engine.py",
        "line_number": 174,
        "methods": [
          "__init__",
          "lock_memory",
          "unlock_memory",
          "_generate_emotional_key",
          "_generate_standard_key",
          "_encrypt_data",
          "_decrypt_data",
          "_calculate_emotional_similarity"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/systems/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import TraumaLockedMemory",
          "export": "__all__.append('TraumaLockedMemory')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIdManager",
        "type": "class",
        "file_path": "reasoning/systems/id_reasoning_engine.py",
        "line_number": 454,
        "methods": [
          "__init__",
          "_verify_emoji_seed",
          "_verify_biometrics",
          "_verify_sid_puzzle",
          "_verify_emergency_gesture",
          "_get_tier_permissions",
          "_generate_quantum_signature",
          "get_compliance_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "reasoning/systems/__init__.py",
          "action": "add_export",
          "code": "from .id_reasoning_engine import LukhasIdManager",
          "export": "__all__.append('LukhasIdManager')"
        },
        {
          "integration_point": "reasoning_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasidmanager', LukhasIdManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "TagSchema",
        "type": "dataclass",
        "file_path": "tagging/tagging_system.py",
        "line_number": 27,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "tagging/__init__.py",
          "action": "add_export",
          "code": "from .tagging_system import TagSchema",
          "export": "__all__.append('TagSchema')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicTerm",
        "type": "class",
        "file_path": "controller/symbolic_loop_controller.py",
        "line_number": 20,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "controller/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_loop_controller import SymbolicTerm",
          "export": "__all__.append('SymbolicTerm')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicOperation",
        "type": "dataclass",
        "file_path": "controller/symbolic_loop_controller.py",
        "line_number": 41,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "controller/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_loop_controller import SymbolicOperation",
          "export": "__all__.append('SymbolicOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicResult",
        "type": "dataclass",
        "file_path": "controller/symbolic_loop_controller.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "controller/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_loop_controller import SymbolicResult",
          "export": "__all__.append('SymbolicResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicLoopController",
        "type": "class",
        "file_path": "controller/symbolic_loop_controller.py",
        "line_number": 67,
        "methods": [
          "__init__",
          "_determine_loop_type",
          "_update_loop_statistics",
          "_get_active_vocabulary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "controller/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_loop_controller import SymbolicLoopController",
          "export": "__all__.append('SymbolicLoopController')"
        }
      ]
    },
    {
      "entity": {
        "name": "DashboardIntelligence",
        "type": "dataclass",
        "file_path": "dashboard/core/dashboard_colony_agent.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dashboard_colony_agent import DashboardIntelligence",
          "export": "__all__.append('DashboardIntelligence')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingRequest",
        "type": "dataclass",
        "file_path": "dashboard/core/dashboard_colony_agent.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dashboard_colony_agent import HealingRequest",
          "export": "__all__.append('HealingRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "TabVisibilityRule",
        "type": "class",
        "file_path": "dashboard/core/dynamic_tab_system.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_tab_system import TabVisibilityRule",
          "export": "__all__.append('TabVisibilityRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "TabGroupingStrategy",
        "type": "class",
        "file_path": "dashboard/core/dynamic_tab_system.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_tab_system import TabGroupingStrategy",
          "export": "__all__.append('TabGroupingStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "TabBehaviorRule",
        "type": "dataclass",
        "file_path": "dashboard/core/dynamic_tab_system.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_tab_system import TabBehaviorRule",
          "export": "__all__.append('TabBehaviorRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "TabInteractionPattern",
        "type": "dataclass",
        "file_path": "dashboard/core/dynamic_tab_system.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_tab_system import TabInteractionPattern",
          "export": "__all__.append('TabInteractionPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "TabGroup",
        "type": "dataclass",
        "file_path": "dashboard/core/dynamic_tab_system.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_tab_system import TabGroup",
          "export": "__all__.append('TabGroup')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackTrigger",
        "type": "class",
        "file_path": "dashboard/core/fallback_system.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .fallback_system import FallbackTrigger",
          "export": "__all__.append('FallbackTrigger')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecoveryStrategy",
        "type": "class",
        "file_path": "dashboard/core/fallback_system.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .fallback_system import RecoveryStrategy",
          "export": "__all__.append('RecoveryStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackCondition",
        "type": "dataclass",
        "file_path": "dashboard/core/fallback_system.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .fallback_system import FallbackCondition",
          "export": "__all__.append('FallbackCondition')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackState",
        "type": "dataclass",
        "file_path": "dashboard/core/fallback_system.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .fallback_system import FallbackState",
          "export": "__all__.append('FallbackState')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackEvent",
        "type": "dataclass",
        "file_path": "dashboard/core/fallback_system.py",
        "line_number": 123,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .fallback_system import FallbackEvent",
          "export": "__all__.append('FallbackEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('fallbackevent', FallbackEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingPriority",
        "type": "class",
        "file_path": "dashboard/core/self_healing_manager.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .self_healing_manager import HealingPriority",
          "export": "__all__.append('HealingPriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingTask",
        "type": "dataclass",
        "file_path": "dashboard/core/self_healing_manager.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .self_healing_manager import HealingTask",
          "export": "__all__.append('HealingTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealingPlan",
        "type": "dataclass",
        "file_path": "dashboard/core/self_healing_manager.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .self_healing_manager import HealingPlan",
          "export": "__all__.append('HealingPlan')"
        }
      ]
    },
    {
      "entity": {
        "name": "MorphingStrategy",
        "type": "class",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import MorphingStrategy",
          "export": "__all__.append('MorphingStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "MorphingComponent",
        "type": "class",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import MorphingComponent",
          "export": "__all__.append('MorphingComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColorScheme",
        "type": "dataclass",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import ColorScheme",
          "export": "__all__.append('ColorScheme')"
        }
      ]
    },
    {
      "entity": {
        "name": "LayoutConfiguration",
        "type": "dataclass",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import LayoutConfiguration",
          "export": "__all__.append('LayoutConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "MorphingTransition",
        "type": "dataclass",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 114,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import MorphingTransition",
          "export": "__all__.append('MorphingTransition')"
        }
      ]
    },
    {
      "entity": {
        "name": "MorphingRule",
        "type": "dataclass",
        "file_path": "dashboard/core/morphing_engine.py",
        "line_number": 128,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/core/__init__.py",
          "action": "add_export",
          "code": "from .morphing_engine import MorphingRule",
          "export": "__all__.append('MorphingRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "StreamType",
        "type": "class",
        "file_path": "dashboard/api/websocket_server.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/api/__init__.py",
          "action": "add_export",
          "code": "from .websocket_server import StreamType",
          "export": "__all__.append('StreamType')"
        }
      ]
    },
    {
      "entity": {
        "name": "StreamClient",
        "type": "dataclass",
        "file_path": "dashboard/api/websocket_server.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/api/__init__.py",
          "action": "add_export",
          "code": "from .websocket_server import StreamClient",
          "export": "__all__.append('StreamClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "StreamMessage",
        "type": "dataclass",
        "file_path": "dashboard/api/websocket_server.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/api/__init__.py",
          "action": "add_export",
          "code": "from .websocket_server import StreamMessage",
          "export": "__all__.append('StreamMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "DashboardWebSocketServer",
        "type": "class",
        "file_path": "dashboard/api/websocket_server.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "_setup_fastapi"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "dashboard/api/__init__.py",
          "action": "add_export",
          "code": "from .websocket_server import DashboardWebSocketServer",
          "export": "__all__.append('DashboardWebSocketServer')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalFrameworkEngine",
        "type": "class",
        "file_path": "ethics/meta_ethics_governor.py",
        "line_number": 170,
        "methods": [
          "__init__",
          "load_principles",
          "add_principle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .meta_ethics_governor import EthicalFrameworkEngine",
          "export": "__all__.append('EthicalFrameworkEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeontologicalEngine",
        "type": "class",
        "file_path": "ethics/meta_ethics_governor.py",
        "line_number": 198,
        "methods": [
          "__init__",
          "_load_default_principles",
          "_check_principle_conditions",
          "_check_violation",
          "load_principles"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .meta_ethics_governor import DeontologicalEngine",
          "export": "__all__.append('DeontologicalEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsequentialistEngine",
        "type": "class",
        "file_path": "ethics/meta_ethics_governor.py",
        "line_number": 315,
        "methods": [
          "__init__",
          "_load_default_principles",
          "load_principles"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .meta_ethics_governor import ConsequentialistEngine",
          "export": "__all__.append('ConsequentialistEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillatingConscience",
        "type": "class",
        "file_path": "ethics/oscillating_conscience.py",
        "line_number": 10,
        "methods": [
          "__init__",
          "update"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .oscillating_conscience import OscillatingConscience",
          "export": "__all__.append('OscillatingConscience')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsViolationType",
        "type": "class",
        "file_path": "ethics/compliance.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance import EthicsViolationType",
          "export": "__all__.append('EthicsViolationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceFramework",
        "type": "class",
        "file_path": "ethics/compliance.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance import ComplianceFramework",
          "export": "__all__.append('ComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceViolation",
        "type": "dataclass",
        "file_path": "ethics/compliance.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance import ComplianceViolation",
          "export": "__all__.append('ComplianceViolation')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsValidationResult",
        "type": "dataclass",
        "file_path": "ethics/compliance.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance import EthicsValidationResult",
          "export": "__all__.append('EthicsValidationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsComplianceEngine",
        "type": "class",
        "file_path": "ethics/compliance.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "get_plugin_risk_score",
          "get_violation_history",
          "get_compliance_report",
          "_contains_sensitive_data",
          "_update_plugin_risk_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance import EthicsComplianceEngine",
          "export": "__all__.append('EthicsComplianceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "Complianceengine",
        "type": "class",
        "file_path": "ethics/compliance_engine20250503213400_p95.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "anonymize_metadata",
          "should_retain_data",
          "check_voice_data_compliance",
          "validate_content_against_ethical_constraints",
          "generate_compliance_report",
          "_generate_anonymous_id",
          "get_compliance_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_engine20250503213400_p95 import Complianceengine",
          "export": "__all__.append('Complianceengine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsViolationType",
        "type": "class",
        "file_path": "ethics/compliance_simple.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_simple import EthicsViolationType",
          "export": "__all__.append('EthicsViolationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceFramework",
        "type": "class",
        "file_path": "ethics/compliance_simple.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_simple import ComplianceFramework",
          "export": "__all__.append('ComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceViolation",
        "type": "dataclass",
        "file_path": "ethics/compliance_simple.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_simple import ComplianceViolation",
          "export": "__all__.append('ComplianceViolation')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsValidationResult",
        "type": "dataclass",
        "file_path": "ethics/compliance_simple.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_simple import EthicsValidationResult",
          "export": "__all__.append('EthicsValidationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsComplianceEngine",
        "type": "class",
        "file_path": "ethics/compliance_simple.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "get_plugin_risk_score",
          "get_violation_history",
          "get_compliance_report",
          "_contains_sensitive_data",
          "_update_plugin_risk_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .compliance_simple import EthicsComplianceEngine",
          "export": "__all__.append('EthicsComplianceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsLevel",
        "type": "class",
        "file_path": "ethics/batch_guard.py",
        "line_number": 12,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .batch_guard import EthicsLevel",
          "export": "__all__.append('EthicsLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStatus",
        "type": "class",
        "file_path": "ethics/batch_guard.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .batch_guard import ComplianceStatus",
          "export": "__all__.append('ComplianceStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsResult",
        "type": "dataclass",
        "file_path": "ethics/batch_guard.py",
        "line_number": 24,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .batch_guard import EthicsResult",
          "export": "__all__.append('EthicsResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsBatchGuard",
        "type": "class",
        "file_path": "ethics/batch_guard.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "validate_batch_ethics",
          "_validate_single_task_ethics",
          "_contains_sensitive_data",
          "_detect_harmful_content",
          "_has_ai_disclosure",
          "_validate_symbol_compliance",
          "_determine_required_badges",
          "generate_ethics_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .batch_guard import EthicsBatchGuard",
          "export": "__all__.append('EthicsBatchGuard')"
        }
      ]
    },
    {
      "entity": {
        "name": "HashableDict",
        "type": "class",
        "file_path": "ethics/redteam_sim.py",
        "line_number": 25,
        "methods": [
          "__hash__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .redteam_sim import HashableDict",
          "export": "__all__.append('HashableDict')"
        }
      ]
    },
    {
      "entity": {
        "name": "SpikethicknessValidator",
        "type": "class",
        "file_path": "ethics/_spikethickness.py",
        "line_number": 7,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from ._spikethickness import SpikethicknessValidator",
          "export": "__all__.append('SpikethicknessValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsReportExporter",
        "type": "class",
        "file_path": "ethics/export_report.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "export_multi_format",
          "_export_json",
          "_export_yaml",
          "_export_csv",
          "_export_html",
          "_generate_html_report",
          "generate_dashboard_data",
          "_group_violations_by_severity",
          "_group_violations_by_attribute",
          "generate_audit_trail",
          "generate_governance_summary",
          "_generate_governance_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .export_report import EthicsReportExporter",
          "export": "__all__.append('EthicsReportExporter')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsSignalType",
        "type": "class",
        "file_path": "ethics/quantum_mesh_integrator.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .quantum_mesh_integrator import EthicsSignalType",
          "export": "__all__.append('EthicsSignalType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalState",
        "type": "dataclass",
        "file_path": "ethics/quantum_mesh_integrator.py",
        "line_number": 42,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .quantum_mesh_integrator import EthicalState",
          "export": "__all__.append('EthicalState')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsSignal",
        "type": "dataclass",
        "file_path": "ethics/quantum_mesh_integrator.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .quantum_mesh_integrator import EthicsSignal",
          "export": "__all__.append('EthicsSignal')"
        }
      ]
    },
    {
      "entity": {
        "name": "PhaseEntanglement",
        "type": "dataclass",
        "file_path": "ethics/quantum_mesh_integrator.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .quantum_mesh_integrator import PhaseEntanglement",
          "export": "__all__.append('PhaseEntanglement')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditContext",
        "type": "dataclass",
        "file_path": "ethics/ethical_auditor.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_auditor import AuditContext",
          "export": "__all__.append('AuditContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuditResult",
        "type": "dataclass",
        "file_path": "ethics/ethical_auditor.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_auditor import AuditResult",
          "export": "__all__.append('AuditResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "EliteEthicalAuditor",
        "type": "class",
        "file_path": "ethics/ethical_auditor.py",
        "line_number": 103,
        "methods": [
          "__init__",
          "_generate_system_prompt",
          "_generate_user_prompt",
          "_parse_audit_response",
          "_calculate_cost",
          "_generate_audit_hash",
          "_sign_with_lambda_id",
          "get_audit_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_auditor import EliteEthicalAuditor",
          "export": "__all__.append('EliteEthicalAuditor')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedAnomalyType",
        "type": "class",
        "file_path": "ethics/self_reflective_debugger.py",
        "line_number": 134,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .self_reflective_debugger import EnhancedAnomalyType",
          "export": "__all__.append('EnhancedAnomalyType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveHealthStatus",
        "type": "class",
        "file_path": "ethics/self_reflective_debugger.py",
        "line_number": 167,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .self_reflective_debugger import CognitiveHealthStatus",
          "export": "__all__.append('CognitiveHealthStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedReasoningChain",
        "type": "dataclass",
        "file_path": "ethics/self_reflective_debugger.py",
        "line_number": 202,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .self_reflective_debugger import EnhancedReasoningChain",
          "export": "__all__.append('EnhancedReasoningChain')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedSelfReflectiveDebugger",
        "type": "class",
        "file_path": "ethics/self_reflective_debugger.py",
        "line_number": 224,
        "methods": [
          "__init__",
          "_initialize_ceo_integration",
          "stop_monitoring",
          "begin_enhanced_reasoning_chain",
          "_detect_basic_anomalies",
          "_extract_step_module_interactions",
          "_extract_chain_module_history",
          "_calculate_module_correlation",
          "_calculate_reasoning_pipeline_coherence",
          "_calculate_decision_making_consistency",
          "_calculate_memory_explanation_alignment",
          "_calculate_temporal_consistency",
          "_calculate_workflow_progression",
          "_calculate_processing_time_correlation",
          "_calculate_confidence_module_correlation",
          "_analyze_error_propagation",
          "_calculate_overall_integration_score",
          "_calculate_anomaly_risk_score",
          "_calculate_stability_index",
          "_extract_module_activation_sequence",
          "_extract_data_flow_patterns",
          "_extract_latency_trends",
          "_extract_error_patterns",
          "_detect_integration_failures",
          "_detect_workflow_sync_errors",
          "_detect_cross_module_data_corruption",
          "_detect_integration_performance_issues",
          "_update_correlation_matrix",
          "_update_correlation_statistics",
          "_update_correlation_trends",
          "_calculate_metric_trend",
          "_identify_problematic_modules",
          "_extract_active_errors",
          "_initialize_fallback_models",
          "_create_decision_tree",
          "_extract_predictive_features",
          "_calculate_module_latency_variance",
          "_calculate_data_flow_completeness",
          "_calculate_confidence_trend",
          "_calculate_performance_trend",
          "_calculate_chain_complexity",
          "_calculate_recent_anomaly_rate",
          "_predict_confidence",
          "_predict_performance",
          "_predict_anomaly_probability",
          "_traverse_decision_tree",
          "_predict_next_modules",
          "_predict_risk_score",
          "_analyze_prediction_deviations",
          "_generate_fallback_predictions",
          "_analyze_ml_predictions",
          "_identify_anomaly_contributors",
          "_analyze_confidence_time_series",
          "_analyze_performance_time_series",
          "_analyze_module_usage_time_series",
          "_analyze_trend_anomalies",
          "_calculate_oscillation_score",
          "_detect_pattern_based_anomalies",
          "_matches_pattern",
          "_get_anomaly_type_for_pattern",
          "_get_severity_for_pattern",
          "_evaluate_exponential_smoothing",
          "_analyze_confidence_trend",
          "_calculate_variance",
          "_calculate_chain_efficiency",
          "_analyze_anomaly_severity_distribution",
          "_analyze_anomaly_types",
          "_generate_chain_recommendations",
          "_enhanced_monitoring_loop",
          "_update_cognitive_state",
          "_calculate_cognitive_load",
          "_calculate_processing_efficiency",
          "_calculate_ethical_alignment",
          "_calculate_meta_cognitive_awareness",
          "_calculate_overall_health_score",
          "_monitor_ceo_modules",
          "_cleanup_old_data",
          "_update_chain_metrics",
          "get_cognitive_health_status",
          "get_enhanced_metrics",
          "get_anomaly_summary",
          "_get_most_common_anomaly_types"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .self_reflective_debugger import EnhancedSelfReflectiveDebugger",
          "export": "__all__.append('EnhancedSelfReflectiveDebugger')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsUtils",
        "type": "class",
        "file_path": "ethics/utils.py",
        "line_number": 10,
        "methods": [
          "validate_content_ethics",
          "check_compliance_status",
          "generate_compliance_report",
          "anonymize_metadata"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .utils import EthicsUtils",
          "export": "__all__.append('EthicsUtils')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalViolationType",
        "type": "class",
        "file_path": "ethics/glyph_ethics_validator.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .glyph_ethics_validator import EthicalViolationType",
          "export": "__all__.append('EthicalViolationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalConstraint",
        "type": "dataclass",
        "file_path": "ethics/glyph_ethics_validator.py",
        "line_number": 73,
        "methods": [
          "is_applicable"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .glyph_ethics_validator import EthicalConstraint",
          "export": "__all__.append('EthicalConstraint')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationReport",
        "type": "dataclass",
        "file_path": "ethics/glyph_ethics_validator.py",
        "line_number": 91,
        "methods": [
          "is_approved",
          "is_safe"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .glyph_ethics_validator import ValidationReport",
          "export": "__all__.append('ValidationReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphEthicsValidator",
        "type": "class",
        "file_path": "ethics/glyph_ethics_validator.py",
        "line_number": 115,
        "methods": [
          "__init__",
          "validate_glyph_creation",
          "validate_glyph_mutation",
          "validate_glyph_fusion",
          "validate_glyph_decay",
          "_initialize_ethical_constraints",
          "_initialize_content_filters",
          "_validate_content_safety",
          "_validate_emotional_boundaries",
          "_validate_symbolic_integrity",
          "_validate_privacy_compliance",
          "_validate_mutation_authorization",
          "_validate_mutation_impact",
          "_validate_mutation_continuity",
          "_validate_fusion_compatibility",
          "_validate_fusion_consent",
          "_validate_fusion_result_integrity",
          "_validate_memory_preservation",
          "_validate_decay_dependencies",
          "_validate_data_retention",
          "_calculate_ethical_score",
          "_calculate_safety_score",
          "_calculate_decay_ethical_score",
          "_calculate_decay_safety_score",
          "_determine_validation_result",
          "_determine_decay_validation_result",
          "_generate_creation_recommendations",
          "_generate_mutation_recommendations",
          "_generate_fusion_recommendations",
          "_generate_decay_recommendations",
          "_glyphs_have_conflicting_ethics",
          "get_validation_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .glyph_ethics_validator import GlyphEthicsValidator",
          "export": "__all__.append('GlyphEthicsValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsMode",
        "type": "class",
        "file_path": "ethics/orchestrator.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import EthicsMode",
          "export": "__all__.append('EthicsMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsConfiguration",
        "type": "dataclass",
        "file_path": "ethics/orchestrator.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import EthicsConfiguration",
          "export": "__all__.append('EthicsConfiguration')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsAuditEntry",
        "type": "dataclass",
        "file_path": "ethics/orchestrator.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import EthicsAuditEntry",
          "export": "__all__.append('EthicsAuditEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEthicsOrchestrator",
        "type": "class",
        "file_path": "ethics/orchestrator.py",
        "line_number": 109,
        "methods": [
          "__init__",
          "_initialize_components",
          "_synthesize_evaluations",
          "_should_escalate_to_human",
          "get_status",
          "get_audit_trail",
          "configure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import UnifiedEthicsOrchestrator",
          "export": "__all__.append('UnifiedEthicsOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MEGConfig",
        "type": "dataclass",
        "file_path": "ethics/meg_guard.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .meg_guard import MEGConfig",
          "export": "__all__.append('MEGConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralPrinciple",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import MoralPrinciple",
          "export": "__all__.append('MoralPrinciple')"
        }
      ]
    },
    {
      "entity": {
        "name": "StakeholderType",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import StakeholderType",
          "export": "__all__.append('StakeholderType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalDilemmaType",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalDilemmaType",
          "export": "__all__.append('EthicalDilemmaType')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralJudgment",
        "type": "dataclass",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 107,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import MoralJudgment",
          "export": "__all__.append('MoralJudgment')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValueAlignment",
        "type": "dataclass",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 125,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ValueAlignment",
          "export": "__all__.append('ValueAlignment')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalConstraint",
        "type": "dataclass",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 139,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalConstraint",
          "export": "__all__.append('EthicalConstraint')"
        }
      ]
    },
    {
      "entity": {
        "name": "DeontologicalReasoner",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 153,
        "methods": [
          "__init__",
          "_generate_universalization_reasoning",
          "_generate_humanity_reasoning",
          "_generate_kingdom_reasoning",
          "_identify_relevant_duties",
          "_find_duty_conflicts",
          "_resolve_duty_conflicts",
          "_calculate_deontological_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import DeontologicalReasoner",
          "export": "__all__.append('DeontologicalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsequentialistReasoner",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 514,
        "methods": [
          "__init__",
          "_check_preference_satisfaction",
          "_affects_capability",
          "_priority_weighted_aggregation",
          "_calculate_consequentialist_confidence",
          "_generate_utilitarian_justification"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ConsequentialistReasoner",
          "export": "__all__.append('ConsequentialistReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValueAlignmentSystem",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 886,
        "methods": [
          "__init__",
          "_identify_relevant_values",
          "_extract_values_from_text",
          "_calculate_value_drift_rate",
          "_identify_misalignment_risks",
          "_suggest_alignment_interventions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import ValueAlignmentSystem",
          "export": "__all__.append('ValueAlignmentSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalReasoningSystem",
        "type": "class",
        "file_path": "ethics/ethical_reasoning_system.py",
        "line_number": 1286,
        "methods": [
          "__init__",
          "_initialize_default_constraints",
          "_initialize_drift_detector",
          "_create_constraint_violation_judgment",
          "_estimate_impact_magnitude",
          "_estimate_impact_valence",
          "_identify_specific_impacts",
          "_identify_mitigation_needs",
          "_identify_uncertainty_factors",
          "_calculate_overall_confidence",
          "_extract_principle_weights",
          "_calculate_framework_consensus",
          "_identify_potential_harms",
          "_generate_mitigation_strategies"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_reasoning_system import EthicalReasoningSystem",
          "export": "__all__.append('EthicalReasoningSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "MEGChatCompletion",
        "type": "class",
        "file_path": "ethics/meg_openai_guard.py",
        "line_number": 240,
        "methods": [
          "create"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .meg_openai_guard import MEGChatCompletion",
          "export": "__all__.append('MEGChatCompletion')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalEvaluator",
        "type": "class",
        "file_path": "ethics/ethical_evaluator.py",
        "line_number": 3,
        "methods": [
          "evaluate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_evaluator import EthicalEvaluator",
          "export": "__all__.append('EthicalEvaluator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceFramework",
        "type": "class",
        "file_path": "ethics/bases.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "add_rule",
          "validate_action",
          "_validate_rule"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .bases import ComplianceFramework",
          "export": "__all__.append('ComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceViolation",
        "type": "class",
        "file_path": "ethics/bases.py",
        "line_number": 64,
        "methods": [
          "__init__",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/__init__.py",
          "action": "add_export",
          "code": "from .bases import ComplianceViolation",
          "export": "__all__.append('ComplianceViolation')"
        }
      ]
    },
    {
      "entity": {
        "name": "StabilizationAction",
        "type": "dataclass",
        "file_path": "ethics/stabilization/tuner.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/stabilization/__init__.py",
          "action": "add_export",
          "code": "from .tuner import StabilizationAction",
          "export": "__all__.append('StabilizationAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntanglementTrend",
        "type": "dataclass",
        "file_path": "ethics/stabilization/tuner.py",
        "line_number": 49,
        "methods": [
          "add_datapoint",
          "get_trend_slope",
          "is_unstable"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/stabilization/__init__.py",
          "action": "add_export",
          "code": "from .tuner import EntanglementTrend",
          "export": "__all__.append('EntanglementTrend')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArbitrationResponse",
        "type": "dataclass",
        "file_path": "ethics/governor/lambda_governor.py",
        "line_number": 153,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/governor/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor import ArbitrationResponse",
          "export": "__all__.append('ArbitrationResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "InterventionExecution",
        "type": "dataclass",
        "file_path": "ethics/governor/lambda_governor.py",
        "line_number": 175,
        "methods": [
          "add_log_entry"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/governor/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor import InterventionExecution",
          "export": "__all__.append('InterventionExecution')"
        }
      ]
    },
    {
      "entity": {
        "name": "DAOGovernanceNode",
        "type": "class",
        "file_path": "ethics/governor/dao_controller.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "_initialize_council",
          "create_proposal",
          "get_proposal",
          "vote_on_proposal",
          "_check_proposal_status",
          "_execute_proposal",
          "_execute_system_update",
          "_execute_ethical_decision",
          "_execute_resource_allocation",
          "_simulate_voting"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/governor/__init__.py",
          "action": "add_export",
          "code": "from .dao_controller import DAOGovernanceNode",
          "export": "__all__.append('DAOGovernanceNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackEthicsLayer",
        "type": "class",
        "file_path": "ethics/fallback/ethics_layer.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "is_allowed"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/fallback/__init__.py",
          "action": "add_export",
          "code": "from .ethics_layer import FallbackEthicsLayer",
          "export": "__all__.append('FallbackEthicsLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MainNodeSecurityEngine",
        "type": "class",
        "file_path": "ethics/security/main_node_security_engine.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "init_components",
          "register_event_handlers",
          "_calculate_duration",
          "_get_memory_usage",
          "_save_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/security/__init__.py",
          "action": "add_export",
          "code": "from .main_node_security_engine import MainNodeSecurityEngine",
          "export": "__all__.append('MainNodeSecurityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityEngine",
        "type": "class",
        "file_path": "ethics/security/security_engine.py",
        "line_number": 7,
        "methods": [
          "__init__",
          "validate_request",
          "detect_threats",
          "sanitize_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/security/__init__.py",
          "action": "add_export",
          "code": "from .security_engine import SecurityEngine",
          "export": "__all__.append('SecurityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasFlagshipSecurityEngine",
        "type": "class",
        "file_path": "ethics/security/flagship_security_engine.py",
        "line_number": 30,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/security/__init__.py",
          "action": "add_export",
          "code": "from .flagship_security_engine import LukhasFlagshipSecurityEngine",
          "export": "__all__.append('LukhasFlagshipSecurityEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "_CorePrivateEthicsEngine",
        "type": "class",
        "file_path": "ethics/compliance/engine.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "evaluate_action",
          "_extract_action_type",
          "_extract_content",
          "_evaluate_against_framework",
          "_evaluate_utilitarian",
          "_evaluate_deontological",
          "_evaluate_virtue_ethics",
          "_evaluate_justice",
          "_evaluate_care_ethics",
          "_evaluate_against_principle",
          "_evaluate_non_maleficence",
          "_evaluate_beneficence",
          "_evaluate_autonomy",
          "_evaluate_justice_principle",
          "_evaluate_transparency",
          "_evaluate_privacy",
          "suggest_alternatives",
          "increase_scrutiny_level",
          "reset_scrutiny_level",
          "incorporate_feedback",
          "get_metrics",
          "_add_to_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/compliance/__init__.py",
          "action": "add_export",
          "code": "from .engine import _CorePrivateEthicsEngine",
          "export": "__all__.append('_CorePrivateEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "_LucasPrivateEthicsGuard",
        "type": "class",
        "file_path": "ethics/compliance/engine.py",
        "line_number": 323,
        "methods": [
          "__init__",
          "_ensure_log_dir",
          "_build_default_legal_knowledge_graph",
          "_build_default_sensitive_vocab",
          "check_access",
          "log_violation",
          "check_cultural_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/compliance/__init__.py",
          "action": "add_export",
          "code": "from .engine import _LucasPrivateEthicsGuard",
          "export": "__all__.append('_LucasPrivateEthicsGuard')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedComplianceEthicsEngine",
        "type": "class",
        "file_path": "ethics/compliance/engine.py",
        "line_number": 412,
        "methods": [
          "__init__",
          "_ensure_log_dir",
          "evaluate_action_ethics",
          "evaluate_action",
          "suggest_ethical_alternatives",
          "get_core_ethics_metrics",
          "incorporate_ethics_feedback",
          "anonymize_metadata",
          "should_retain_data",
          "check_voice_data_compliance",
          "validate_content_against_harmful_patterns",
          "generate_compliance_report",
          "_generate_anonymous_id",
          "check_data_access_permission",
          "check_cultural_appropriateness",
          "perform_ethics_drift_detection",
          "_log_ethics_drift_event",
          "get_overall_compliance_status",
          "_get_last_drift_log_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/compliance/__init__.py",
          "action": "add_export",
          "code": "from .engine import AdvancedComplianceEthicsEngine",
          "export": "__all__.append('AdvancedComplianceEthicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "InterventionAction",
        "type": "dataclass",
        "file_path": "ethics/sentinel/ethical_drift_sentinel.py",
        "line_number": 109,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/sentinel/__init__.py",
          "action": "add_export",
          "code": "from .ethical_drift_sentinel import InterventionAction",
          "export": "__all__.append('InterventionAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalState",
        "type": "dataclass",
        "file_path": "ethics/sentinel/ethical_drift_sentinel.py",
        "line_number": 126,
        "methods": [
          "calculate_risk_score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/sentinel/__init__.py",
          "action": "add_export",
          "code": "from .ethical_drift_sentinel import EthicalState",
          "export": "__all__.append('EthicalState')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASSafetyBridge",
        "type": "class",
        "file_path": "ethics/safety/integration_bridge.py",
        "line_number": 10,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/safety/__init__.py",
          "action": "add_export",
          "code": "from .integration_bridge import LUKHASSafetyBridge",
          "export": "__all__.append('LUKHASSafetyBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "DivergenceReport",
        "type": "dataclass",
        "file_path": "ethics/simulations/colony_dilemma_simulation.py",
        "line_number": 20,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/simulations/__init__.py",
          "action": "add_export",
          "code": "from .colony_dilemma_simulation import DivergenceReport",
          "export": "__all__.append('DivergenceReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "GovernanceDecision",
        "type": "dataclass",
        "file_path": "ethics/policy_engines/integration.py",
        "line_number": 45,
        "methods": [
          "to_policy_decision"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/policy_engines/__init__.py",
          "action": "add_export",
          "code": "from .integration import GovernanceDecision",
          "export": "__all__.append('GovernanceDecision')"
        }
      ]
    },
    {
      "entity": {
        "name": "PolicyEngineIntegration",
        "type": "class",
        "file_path": "ethics/policy_engines/integration.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "initialize_default_policies",
          "evaluate_governance_decision",
          "add_custom_policy",
          "get_policy_metrics",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "ethics/policy_engines/__init__.py",
          "action": "add_export",
          "code": "from .integration import PolicyEngineIntegration",
          "export": "__all__.append('PolicyEngineIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceValidator",
        "type": "class",
        "file_path": "voice/validator.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .validator import VoiceValidator",
          "export": "__all__.append('VoiceValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceRecognition",
        "type": "class",
        "file_path": "voice/recognition.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .recognition import VoiceRecognition",
          "export": "__all__.append('VoiceRecognition')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceCulturalIntegrator",
        "type": "class",
        "file_path": "voice/voice_cultural_integrator.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_get_emotion_mapper",
          "_get_memory_helix"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .voice_cultural_integrator import VoiceCulturalIntegrator",
          "export": "__all__.append('VoiceCulturalIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionMapperWrapper",
        "type": "class",
        "file_path": "voice/voice_cultural_integrator.py",
        "line_number": 71,
        "methods": [
          "emotions",
          "baby_modes"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .voice_cultural_integrator import EmotionMapperWrapper",
          "export": "__all__.append('EmotionMapperWrapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedVoiceConfig",
        "type": "dataclass",
        "file_path": "voice/integrator.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .integrator import EnhancedVoiceConfig",
          "export": "__all__.append('EnhancedVoiceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedVoiceIntegrator",
        "type": "class",
        "file_path": "voice/integrator.py",
        "line_number": 43,
        "methods": [
          "__init__",
          "_get_voice_profile",
          "_adapt_cultural_context",
          "_record_session_usage"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .integrator import EnhancedVoiceIntegrator",
          "export": "__all__.append('EnhancedVoiceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SpeechEngine",
        "type": "class",
        "file_path": "voice/speech_engine.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .speech_engine import SpeechEngine",
          "export": "__all__.append('SpeechEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceNode",
        "type": "class",
        "file_path": "voice/interface.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "get_status",
          "_select_provider",
          "_get_voice_parameters",
          "_map_actor_to_voice"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .interface import VoiceNode",
          "export": "__all__.append('VoiceNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceMode",
        "type": "class",
        "file_path": "voice/processor.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .processor import VoiceMode",
          "export": "__all__.append('VoiceMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceSwarmAgent",
        "type": "class",
        "file_path": "voice/swarm_voice_generator.py",
        "line_number": 9,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .swarm_voice_generator import VoiceSwarmAgent",
          "export": "__all__.append('VoiceSwarmAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmVoiceGenerator",
        "type": "class",
        "file_path": "voice/swarm_voice_generator.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "_create_voice_swarm",
          "_segment_text"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .swarm_voice_generator import SwarmVoiceGenerator",
          "export": "__all__.append('SwarmVoiceGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AudioEngine",
        "type": "class",
        "file_path": "voice/audio_engine.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .audio_engine import AudioEngine",
          "export": "__all__.append('AudioEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SpeechFramework",
        "type": "class",
        "file_path": "voice/speech_framework.py",
        "line_number": 1,
        "methods": [
          "__init__",
          "initialize_recognition_engine",
          "start_recognition",
          "stop_recognition",
          "process_transcription",
          "handle_error"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .speech_framework import SpeechFramework",
          "export": "__all__.append('SpeechFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionState",
        "type": "class",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_voice_modular import EmotionState",
          "export": "__all__.append('EmotionState')"
        }
      ]
    },
    {
      "entity": {
        "name": "UrgencyLevel",
        "type": "class",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_voice_modular import UrgencyLevel",
          "export": "__all__.append('UrgencyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContextAnalysis",
        "type": "dataclass",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_voice_modular import ContextAnalysis",
          "export": "__all__.append('ContextAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceParameters",
        "type": "dataclass",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_voice_modular import VoiceParameters",
          "export": "__all__.append('VoiceParameters')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContextAwareVoiceSystem",
        "type": "class",
        "file_path": "voice/context_aware_voice_modular.py",
        "line_number": 509,
        "methods": [
          "__init__",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .context_aware_voice_modular import ContextAwareVoiceSystem",
          "export": "__all__.append('ContextAwareVoiceSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceAdaptationModule",
        "type": "class",
        "file_path": "voice/adaptation_module.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "get_voice_settings",
          "record_feedback",
          "adapt_parameters",
          "log_awakening_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/__init__.py",
          "action": "add_export",
          "code": "from .adaptation_module import VoiceAdaptationModule",
          "export": "__all__.append('VoiceAdaptationModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBrainCore",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockBrainCore",
          "export": "__all__.append('MockBrainCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumBridge",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockQuantumBridge",
          "export": "__all__.append('MockQuantumBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockSynapticGate",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockSynapticGate",
          "export": "__all__.append('MockSynapticGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockOscillator",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockOscillator",
          "export": "__all__.append('MockOscillator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningPhase",
        "type": "dataclass",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 120,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import ReasoningPhase",
          "export": "__all__.append('ReasoningPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillationSynchronizer",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/bio_quantum_engine.py",
        "line_number": 886,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import OscillationSynchronizer",
          "export": "__all__.append('OscillationSynchronizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthState",
        "type": "class",
        "file_path": "voice/bio_core/oscillator/orchestrator.py",
        "line_number": 18,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import HealthState",
          "export": "__all__.append('HealthState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleStatus",
        "type": "dataclass",
        "file_path": "voice/bio_core/oscillator/orchestrator.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/bio_core/oscillator/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import ModuleStatus",
          "export": "__all__.append('ModuleStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceSynthesisProvider",
        "type": "class",
        "file_path": "voice/systems/voice_synthesis.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "synthesize",
          "is_available",
          "get_default_voice_id",
          "_apply_emotion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_synthesis import VoiceSynthesisProvider",
          "export": "__all__.append('VoiceSynthesisProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "ElevenLabsProvider",
        "type": "class",
        "file_path": "voice/systems/voice_synthesis.py",
        "line_number": 130,
        "methods": [
          "__init__",
          "synthesize",
          "is_available",
          "get_available_voices",
          "get_default_voice_id"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_synthesis import ElevenLabsProvider",
          "export": "__all__.append('ElevenLabsProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "EdgeTTSProvider",
        "type": "class",
        "file_path": "voice/systems/voice_synthesis.py",
        "line_number": 295,
        "methods": [
          "__init__",
          "synthesize",
          "is_available",
          "get_available_voices",
          "get_default_voice_id"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_synthesis import EdgeTTSProvider",
          "export": "__all__.append('EdgeTTSProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoquiProvider",
        "type": "class",
        "file_path": "voice/systems/voice_synthesis.py",
        "line_number": 455,
        "methods": [
          "__init__",
          "synthesize",
          "is_available",
          "get_available_voices",
          "get_default_voice_id"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .voice_synthesis import CoquiProvider",
          "export": "__all__.append('CoquiProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseTTSProvider",
        "type": "class",
        "file_path": "voice/systems/synthesis.py",
        "line_number": 371,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .synthesis import BaseTTSProvider",
          "export": "__all__.append('BaseTTSProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "EdgeTTSProvider",
        "type": "class",
        "file_path": "voice/systems/synthesis.py",
        "line_number": 379,
        "methods": [
          "__init__",
          "_check_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .synthesis import EdgeTTSProvider",
          "export": "__all__.append('EdgeTTSProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoquiProvider",
        "type": "class",
        "file_path": "voice/systems/synthesis.py",
        "line_number": 425,
        "methods": [
          "__init__",
          "_check_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .synthesis import CoquiProvider",
          "export": "__all__.append('CoquiProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "ElevenLabsProvider",
        "type": "class",
        "file_path": "voice/systems/synthesis.py",
        "line_number": 474,
        "methods": [
          "__init__",
          "_check_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .synthesis import ElevenLabsProvider",
          "export": "__all__.append('ElevenLabsProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "LocalTTSProvider",
        "type": "class",
        "file_path": "voice/systems/synthesis.py",
        "line_number": 529,
        "methods": [
          "__init__",
          "_check_availability"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/systems/__init__.py",
          "action": "add_export",
          "code": "from .synthesis import LocalTTSProvider",
          "export": "__all__.append('LocalTTSProvider')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicPattern",
        "type": "dataclass",
        "file_path": "voice/interfaces/input/stream_handler.py",
        "line_number": 24,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/interfaces/input/__init__.py",
          "action": "add_export",
          "code": "from .stream_handler import SymbolicPattern",
          "export": "__all__.append('SymbolicPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicStreamHandler",
        "type": "class",
        "file_path": "voice/interfaces/input/stream_handler.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "start_stream",
          "stop_stream",
          "_process_stream",
          "get_next_pattern"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "voice/interfaces/input/__init__.py",
          "action": "add_export",
          "code": "from .stream_handler import SymbolicStreamHandler",
          "export": "__all__.append('SymbolicStreamHandler')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('symbolicstreamhandler', SymbolicStreamHandler())"
        }
      ]
    },
    {
      "entity": {
        "name": "P2PActor",
        "type": "class",
        "file_path": "examples/p2p_collaboration_demo.py",
        "line_number": 11,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .p2p_collaboration_demo import P2PActor",
          "export": "__all__.append('P2PActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicDemo",
        "type": "class",
        "file_path": "examples/bio_symbolic_demo.py",
        "line_number": 30,
        "methods": [
          "__init__",
          "run_demo",
          "demo_biological_rhythms",
          "demo_mitochondrial_symbolism",
          "demo_dna_glyph_mapping",
          "demo_stress_symbolic_response",
          "demo_homeostatic_symbols",
          "demo_bio_symbolic_dreams",
          "demo_full_integration",
          "_rhythm_to_symbol",
          "_energy_to_symbol",
          "_dna_to_glyph",
          "_stress_to_symbolic_response",
          "_homeostasis_to_harmony",
          "_biological_to_dream",
          "_format_waves",
          "_detect_rhythm",
          "_assess_stress",
          "_analyze_energy",
          "_integrate_bio_symbolic",
          "generate_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_demo import BioSymbolicDemo",
          "export": "__all__.append('BioSymbolicDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASAPIClient",
        "type": "class",
        "file_path": "examples/api_usage_examples.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_make_request",
          "get_health",
          "get_api_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .api_usage_examples import LUKHASAPIClient",
          "export": "__all__.append('LUKHASAPIClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAPIExamples",
        "type": "class",
        "file_path": "examples/api_usage_examples.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "create_memory_example",
          "recall_memories_example",
          "enhanced_recall_example",
          "get_statistics_example"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .api_usage_examples import MemoryAPIExamples",
          "export": "__all__.append('MemoryAPIExamples')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAPIExamples",
        "type": "class",
        "file_path": "examples/api_usage_examples.py",
        "line_number": 132,
        "methods": [
          "__init__",
          "log_dream_example",
          "consolidate_dreams_example",
          "get_patterns_example",
          "get_insights_example"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .api_usage_examples import DreamAPIExamples",
          "export": "__all__.append('DreamAPIExamples')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionAPIExamples",
        "type": "class",
        "file_path": "examples/api_usage_examples.py",
        "line_number": 198,
        "methods": [
          "__init__",
          "analyze_emotion_example",
          "get_landscape_example",
          "create_clusters_example",
          "get_neighborhood_example"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .api_usage_examples import EmotionAPIExamples",
          "export": "__all__.append('EmotionAPIExamples')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessAPIExamples",
        "type": "class",
        "file_path": "examples/api_usage_examples.py",
        "line_number": 257,
        "methods": [
          "__init__",
          "get_consciousness_state_example",
          "synthesize_consciousness_example",
          "integrate_patterns_example",
          "assess_awareness_example"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/__init__.py",
          "action": "add_export",
          "code": "from .api_usage_examples import ConsciousnessAPIExamples",
          "export": "__all__.append('ConsciousnessAPIExamples')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessQRPattern",
        "type": "dataclass",
        "file_path": "examples/identity/qrg_standalone_demo.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_standalone_demo import ConsciousnessQRPattern",
          "export": "__all__.append('ConsciousnessQRPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "CulturalQRTheme",
        "type": "dataclass",
        "file_path": "examples/identity/qrg_standalone_demo.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_standalone_demo import CulturalQRTheme",
          "export": "__all__.append('CulturalQRTheme')"
        }
      ]
    },
    {
      "entity": {
        "name": "StandaloneQRGenerator",
        "type": "class",
        "file_path": "examples/identity/qrg_standalone_demo.py",
        "line_number": 54,
        "methods": [
          "__init__",
          "generate_consciousness_pattern",
          "generate_cultural_pattern",
          "generate_quantum_pattern",
          "generate_steganographic_pattern",
          "_calculate_pattern_size",
          "_generate_neural_signature",
          "_generate_pattern_grid",
          "_generate_cultural_signature",
          "_generate_cultural_pattern_grid",
          "_generate_quantum_entropy",
          "_generate_quantum_signature",
          "_generate_quantum_pattern_grid",
          "_generate_stego_key",
          "_generate_base_pattern",
          "_embed_hidden_data",
          "_measure_quantum_coherence",
          "_create_ascii_visualization",
          "_add_focus_pattern",
          "_add_creative_pattern",
          "_add_meditative_pattern",
          "_apply_geometric_cultural_pattern",
          "_apply_organic_cultural_pattern",
          "_apply_minimalist_cultural_pattern",
          "_apply_ornate_cultural_pattern",
          "_analyze_consciousness_state",
          "_analyze_cultural_elements",
          "_analyze_quantum_properties",
          "_analyze_steganographic_capacity",
          "_categorize_consciousness_level",
          "_analyze_emotional_state",
          "_categorize_neural_synchrony",
          "_score_pattern_complexity",
          "_identify_cultural_family",
          "_analyze_color_harmony",
          "_assess_respect_level",
          "_classify_pattern_style",
          "_assess_entropy_quality",
          "_assess_quantum_resistance",
          "_estimate_cryptographic_strength",
          "_classify_security_level"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_standalone_demo import StandaloneQRGenerator",
          "export": "__all__.append('StandaloneQRGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASStandaloneQRGManager",
        "type": "class",
        "file_path": "examples/identity/qrg_standalone_demo.py",
        "line_number": 599,
        "methods": [
          "__init__",
          "generate_adaptive_qr",
          "_extract_consciousness_pattern",
          "_extract_cultural_theme",
          "get_generation_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_standalone_demo import LUKHASStandaloneQRGManager",
          "export": "__all__.append('LUKHASStandaloneQRGManager')"
        },
        {
          "integration_point": "examples_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasstandaloneqrgmanager', LUKHASStandaloneQRGManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MockConsciousnessEngine",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 136,
        "methods": [
          "assess_consciousness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import MockConsciousnessEngine",
          "export": "__all__.append('MockConsciousnessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockCulturalProfileManager",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 150,
        "methods": [
          "get_cultural_profile"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import MockCulturalProfileManager",
          "export": "__all__.append('MockCulturalProfileManager')"
        },
        {
          "integration_point": "examples_hub.py",
          "action": "register_service",
          "code": "self.register_service('mockculturalprofilemanager', MockCulturalProfileManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumConsciousnessVisualizer",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 169,
        "methods": [
          "prepare_quantum_like_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import MockQuantumConsciousnessVisualizer",
          "export": "__all__.append('MockQuantumConsciousnessVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockAuditLogger",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 183,
        "methods": [
          "__init__",
          "log_authentication_event",
          "log_emergency_event"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import MockAuditLogger",
          "export": "__all__.append('MockAuditLogger')"
        }
      ]
    },
    {
      "entity": {
        "name": "ASCIIPatternGenerator",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 209,
        "methods": [
          "__init__",
          "create_qr_pattern",
          "create_glyph_pattern",
          "_get_cultural_chars"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import ASCIIPatternGenerator",
          "export": "__all__.append('ASCIIPatternGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCryptographySimulator",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 335,
        "methods": [
          "__init__",
          "generate_quantum_entropy",
          "create_quantum_signature",
          "apply_quantum_influence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import QuantumCryptographySimulator",
          "export": "__all__.append('QuantumCryptographySimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SteganographicGlyphSystem",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 401,
        "methods": [
          "__init__",
          "hide_qr_in_glyph",
          "create_glyph_constellation",
          "_select_glyph",
          "_choose_embedding_method",
          "_calculate_detection_difficulty"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import SteganographicGlyphSystem",
          "export": "__all__.append('SteganographicGlyphSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASQRGSystem",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 548,
        "methods": [
          "__init__",
          "create_context",
          "generate_qrg",
          "create_steganographic_version",
          "run_performance_test",
          "get_system_statistics",
          "_determine_optimal_qrg_type",
          "_generate_metadata",
          "_calculate_compliance_score",
          "_calculate_cultural_safety_score",
          "_calculate_consciousness_resonance",
          "_get_expiration_delta",
          "_select_glyph_style_for_culture",
          "_update_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import LUKHASQRGSystem",
          "export": "__all__.append('LUKHASQRGSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractiveDemoInterface",
        "type": "class",
        "file_path": "examples/identity/lukhus_qrg_complete_demo.py",
        "line_number": 889,
        "methods": [
          "__init__",
          "_create_demo_users",
          "run_complete_demo",
          "_demo_basic_qrg_generation",
          "_demo_user_profiles",
          "_demo_quantum_cryptography",
          "_demo_steganographic_glyphs",
          "_demo_performance_testing",
          "_demo_system_statistics",
          "_demo_advanced_performance_testing",
          "_demo_advanced_steganographic_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .lukhus_qrg_complete_demo import InteractiveDemoInterface",
          "export": "__all__.append('InteractiveDemoInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQRGResult",
        "type": "class",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 47,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import MockQRGResult",
          "export": "__all__.append('MockQRGResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQRGContext",
        "type": "class",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 57,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import MockQRGContext",
          "export": "__all__.append('MockQRGContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumInfluence",
        "type": "class",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 65,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import MockQuantumInfluence",
          "export": "__all__.append('MockQuantumInfluence')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockGlyphResult",
        "type": "class",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 71,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import MockGlyphResult",
          "export": "__all__.append('MockGlyphResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoResult",
        "type": "dataclass",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 110,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import DemoResult",
          "export": "__all__.append('DemoResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASQRGFinalDemo",
        "type": "class",
        "file_path": "examples/identity/qrg_demo.py",
        "line_number": 118,
        "methods": [
          "__init__",
          "run_complete_demo",
          "_demo_basic_qrg_generation",
          "_demo_consciousness_adaptation",
          "_demo_cultural_sensitivity",
          "_demo_security_levels",
          "_demo_quantum_cryptography",
          "_demo_steganographic_glyphs",
          "_demo_performance_testing",
          "_demo_integration_scenarios",
          "_demo_error_handling",
          "_demo_edge_cases",
          "_generate_final_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/identity/__init__.py",
          "action": "add_export",
          "code": "from .qrg_demo import LUKHASQRGFinalDemo",
          "export": "__all__.append('LUKHASQRGFinalDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamInterpretation",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 25,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import DreamInterpretation",
          "export": "__all__.append('DreamInterpretation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEntry",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 44,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import DreamEntry",
          "export": "__all__.append('DreamEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "LLMConfig",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import LLMConfig",
          "export": "__all__.append('LLMConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MediaInput",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import MediaInput",
          "export": "__all__.append('MediaInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceInput",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import VoiceInput",
          "export": "__all__.append('VoiceInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEnrichment",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import DreamEnrichment",
          "export": "__all__.append('DreamEnrichment')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIGeneratedDream",
        "type": "dataclass",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import AIGeneratedDream",
          "export": "__all__.append('AIGeneratedDream')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuickAccessRecorder",
        "type": "class",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 104,
        "methods": [
          "__init__",
          "quick_dream_capture"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import QuickAccessRecorder",
          "export": "__all__.append('QuickAccessRecorder')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEnhancer",
        "type": "class",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 130,
        "methods": [
          "smart_emoji_enhancement"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import DreamEnhancer",
          "export": "__all__.append('DreamEnhancer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultimediaInputProcessor",
        "type": "class",
        "file_path": "examples/creativity/dream_interpreter_demo.py",
        "line_number": 171,
        "methods": [
          "process_multiple_inputs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/creativity/__init__.py",
          "action": "add_export",
          "code": "from .dream_interpreter_demo import MultimediaInputProcessor",
          "export": "__all__.append('MultimediaInputProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SubscriptionTierDemo",
        "type": "class",
        "file_path": "examples/integration/integrated_abot_demo.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/integration/__init__.py",
          "action": "add_export",
          "code": "from .integrated_abot_demo import SubscriptionTierDemo",
          "export": "__all__.append('SubscriptionTierDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessStateDemo",
        "type": "class",
        "file_path": "examples/integration/integrated_abot_demo.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/integration/__init__.py",
          "action": "add_export",
          "code": "from .integrated_abot_demo import ConsciousnessStateDemo",
          "export": "__all__.append('ConsciousnessStateDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntegratedABotSimulator",
        "type": "class",
        "file_path": "examples/integration/integrated_abot_demo.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "awaken_consciousness",
          "chat_simulation",
          "_evolve_consciousness_simulation",
          "_get_consciousness_state_prefix",
          "_generate_ai_response_via_subprocess_stub",
          "get_abot_status_sim"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/integration/__init__.py",
          "action": "add_export",
          "code": "from .integrated_abot_demo import IntegratedABotSimulator",
          "export": "__all__.append('IntegratedABotSimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIntegrationShowcaseDemo",
        "type": "class",
        "file_path": "examples/integration/demo_ai_integration.py",
        "line_number": 66,
        "methods": [
          "__init__",
          "set_lukhas_enhancement_active",
          "set_external_ai_sim_availability"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/integration/__init__.py",
          "action": "add_export",
          "code": "from .demo_ai_integration import LukhasIntegrationShowcaseDemo",
          "export": "__all__.append('LukhasIntegrationShowcaseDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeDemo",
        "type": "class",
        "file_path": "examples/consciousness/quantum_creative_consciousness_demo.py",
        "line_number": 33,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .quantum_creative_consciousness_demo import QuantumCreativeDemo",
          "export": "__all__.append('QuantumCreativeDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "PublicConsciousnessInterface",
        "type": "class",
        "file_path": "examples/consciousness/consciousness_demo.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_demo import PublicConsciousnessInterface",
          "export": "__all__.append('PublicConsciousnessInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoConsciousnessSystem",
        "type": "class",
        "file_path": "examples/consciousness/consciousness_demo.py",
        "line_number": 59,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .consciousness_demo import DemoConsciousnessSystem",
          "export": "__all__.append('DemoConsciousnessSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "OracleDemo",
        "type": "class",
        "file_path": "examples/reasoning/oracle_demo.py",
        "line_number": 43,
        "methods": [
          "__init__",
          "print_header",
          "generate_simulated_history",
          "_generate_emotional_vector",
          "_generate_conflicts",
          "run_scenario_demonstration",
          "_validate_prediction_accuracy",
          "_display_scenario_results",
          "display_comparative_analysis",
          "run_interactive_demo",
          "run_automated_demo",
          "generate_demo_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oracle_demo import OracleDemo",
          "export": "__all__.append('OracleDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockVoiceModulator",
        "type": "class",
        "file_path": "examples/orchestration_src/adaptive_agi_demo.py",
        "line_number": 112,
        "methods": [
          "determine_parameters",
          "modulate_voice"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration_src/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_agi_demo import MockVoiceModulator",
          "export": "__all__.append('MockVoiceModulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockSafetyGuard",
        "type": "class",
        "file_path": "examples/orchestration_src/adaptive_agi_demo.py",
        "line_number": 126,
        "methods": [
          "validate_response",
          "validate_voice_parameters"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration_src/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_agi_demo import MockSafetyGuard",
          "export": "__all__.append('MockSafetyGuard')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockComplianceEngine",
        "type": "class",
        "file_path": "examples/orchestration_src/adaptive_agi_demo.py",
        "line_number": 144,
        "methods": [
          "anonymize_metadata",
          "check_voice_data_compliance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration_src/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_agi_demo import MockComplianceEngine",
          "export": "__all__.append('MockComplianceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "DemoOrchestrator",
        "type": "class",
        "file_path": "examples/orchestration_src/demo_orchestrator.py",
        "line_number": 22,
        "methods": [
          "__init__",
          "_should_adapt_interface",
          "_determine_available_functions",
          "_generate_onboarding_interface",
          "_generate_welcome_message",
          "_update_session_insights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration_src/__init__.py",
          "action": "add_export",
          "code": "from .demo_orchestrator import DemoOrchestrator",
          "export": "__all__.append('DemoOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SentinelDemo",
        "type": "class",
        "file_path": "examples/ethics/ethical_sentinel_demo.py",
        "line_number": 37,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_sentinel_demo import SentinelDemo",
          "export": "__all__.append('SentinelDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "GovernorDemo",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 39,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/ethics/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor_demo import GovernorDemo",
          "export": "__all__.append('GovernorDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockMeshRouter",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/ethics/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor_demo import MockMeshRouter",
          "export": "__all__.append('MockMeshRouter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockDreamCoordinator",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/ethics/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor_demo import MockDreamCoordinator",
          "export": "__all__.append('MockDreamCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockMemoryManager",
        "type": "class",
        "file_path": "examples/ethics/lambda_governor_demo.py",
        "line_number": 101,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/ethics/__init__.py",
          "action": "add_export",
          "code": "from .lambda_governor_demo import MockMemoryManager",
          "export": "__all__.append('MockMemoryManager')"
        },
        {
          "integration_point": "examples_hub.py",
          "action": "register_service",
          "code": "self.register_service('mockmemorymanager', MockMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "GuardianSystemDemo",
        "type": "class",
        "file_path": "examples/orchestration/demo_complete_guardian.py",
        "line_number": 58,
        "methods": [
          "__init__",
          "_load_manifest",
          "_initialize_components"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .demo_complete_guardian import GuardianSystemDemo",
          "export": "__all__.append('GuardianSystemDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationTester",
        "type": "class",
        "file_path": "examples/orchestration/demo_orchestration_consolidation.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "_record_test_result"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .demo_orchestration_consolidation import OrchestrationTester",
          "export": "__all__.append('OrchestrationTester')"
        }
      ]
    },
    {
      "entity": {
        "name": "FaultyAgent",
        "type": "class",
        "file_path": "examples/orchestration/demo_agent_orchestration.py",
        "line_number": 269,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .demo_agent_orchestration import FaultyAgent",
          "export": "__all__.append('FaultyAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioQuantumRadarDemo",
        "type": "class",
        "file_path": "examples/quantum/bio_quantum_radar_comprehensive_demo.py",
        "line_number": 126,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_radar_comprehensive_demo import BioQuantumRadarDemo",
          "export": "__all__.append('BioQuantumRadarDemo')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumInfluence",
        "type": "class",
        "file_path": "examples/quantum/quantum_steganographic_demo.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "examples/quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_steganographic_demo import QuantumInfluence",
          "export": "__all__.append('QuantumInfluence')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealPerceptionSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/perception_system_benchmark.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_initialize_real_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .perception_system_benchmark import RealPerceptionSystemBenchmark",
          "export": "__all__.append('RealPerceptionSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealDashboardSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/dashboard_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_calculate_visualization_score",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .dashboard_system_benchmark import RealDashboardSystemBenchmark",
          "export": "__all__.append('RealDashboardSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealBridgeSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/bridge_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .bridge_system_benchmark import RealBridgeSystemBenchmark",
          "export": "__all__.append('RealBridgeSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealSecuritySystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/security_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .security_system_benchmark import RealSecuritySystemBenchmark",
          "export": "__all__.append('RealSecuritySystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealAPISystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/api_system_benchmark.py",
        "line_number": 34,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .api_system_benchmark import RealAPISystemBenchmark",
          "export": "__all__.append('RealAPISystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "FastActor",
        "type": "class",
        "file_path": "benchmarks/optimized_actor_benchmark.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "send_message",
          "_process_messages",
          "stop",
          "get_count"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .optimized_actor_benchmark import FastActor",
          "export": "__all__.append('FastActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleActor",
        "type": "class",
        "file_path": "benchmarks/simple_actor_benchmark.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "send_message",
          "_process_messages",
          "_handle_message",
          "stop",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .simple_actor_benchmark import SimpleActor",
          "export": "__all__.append('SimpleActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleBenchmark",
        "type": "class",
        "file_path": "benchmarks/simple_actor_benchmark.py",
        "line_number": 59,
        "methods": [
          "__init__",
          "create_actors",
          "send_messages",
          "collect_stats",
          "cleanup",
          "run_test"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .simple_actor_benchmark import SimpleBenchmark",
          "export": "__all__.append('SimpleBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealReasoningSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/reasoning_system_benchmark.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_calculate_causal_accuracy",
          "_generate_summary",
          "_print_summary",
          "_save_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .reasoning_system_benchmark import RealReasoningSystemBenchmark",
          "export": "__all__.append('RealReasoningSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealTraceSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/trace_system_benchmark.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_initialize_real_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .trace_system_benchmark import RealTraceSystemBenchmark",
          "export": "__all__.append('RealTraceSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealConfigurationSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/configuration_system_benchmark.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_initialize_real_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .configuration_system_benchmark import RealConfigurationSystemBenchmark",
          "export": "__all__.append('RealConfigurationSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealEmotionSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/emotion_system_benchmark.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_initialize_real_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .emotion_system_benchmark import RealEmotionSystemBenchmark",
          "export": "__all__.append('RealEmotionSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealLearningSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/learning_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_calculate_lr_stability",
          "_evaluate_convergence_quality",
          "_calculate_content_similarity",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .learning_system_benchmark import RealLearningSystemBenchmark",
          "export": "__all__.append('RealLearningSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealSymbolicSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/symbolic_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_evaluate_transfer_quality",
          "_generate_real_summary",
          "_print_real_summary",
          "_save_real_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_system_benchmark import RealSymbolicSystemBenchmark",
          "export": "__all__.append('RealSymbolicSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealVoiceSystemBenchmark",
        "type": "class",
        "file_path": "benchmarks/voice_system_benchmark.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "_initialize_real_systems",
          "_simulate_emotion_detection",
          "_calculate_emotion_confidence",
          "_generate_summary",
          "_print_summary",
          "_save_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/__init__.py",
          "action": "add_export",
          "code": "from .voice_system_benchmark import RealVoiceSystemBenchmark",
          "export": "__all__.append('RealVoiceSystemBenchmark')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAISystem",
        "type": "class",
        "file_path": "benchmarks/ethics/ethical_compliance.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "process"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_compliance import LukhasAISystem",
          "export": "__all__.append('LukhasAISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "DailyBenchmarkOrganizer",
        "type": "class",
        "file_path": "benchmarks/scripts/daily_benchmark_organizer.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "create_daily_structure",
          "detect_test_files",
          "extract_date_from_filename",
          "categorize_file",
          "organize_file",
          "generate_daily_summary",
          "cleanup_old_archives",
          "organize_today",
          "create_benchmark_script_template"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "benchmarks/scripts/__init__.py",
          "action": "add_export",
          "code": "from .daily_benchmark_organizer import DailyBenchmarkOrganizer",
          "export": "__all__.append('DailyBenchmarkOrganizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataIngestionColony",
        "type": "class",
        "file_path": "scripts/run_colony_validation.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .run_colony_validation import DataIngestionColony",
          "export": "__all__.append('DataIngestionColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealtimeAnalyticsColony",
        "type": "class",
        "file_path": "scripts/run_colony_validation.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .run_colony_validation import RealtimeAnalyticsColony",
          "export": "__all__.append('RealtimeAnalyticsColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationMatrix",
        "type": "class",
        "file_path": "scripts/run_colony_validation.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .run_colony_validation import ValidationMatrix",
          "export": "__all__.append('ValidationMatrix')"
        }
      ]
    },
    {
      "entity": {
        "name": "FailingActor",
        "type": "class",
        "file_path": "scripts/run_colony_validation.py",
        "line_number": 157,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .run_colony_validation import FailingActor",
          "export": "__all__.append('FailingActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "GoalActor",
        "type": "class",
        "file_path": "scripts/run_colony_validation.py",
        "line_number": 214,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .run_colony_validation import GoalActor",
          "export": "__all__.append('GoalActor')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningCircularFixer",
        "type": "class",
        "file_path": "scripts/fix_learning_circular_imports.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "fix_core_learning_import",
          "_fix_file",
          "check_other_violations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_learning_circular_imports import LearningCircularFixer",
          "export": "__all__.append('LearningCircularFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PerformanceFixer",
        "type": "class",
        "file_path": "scripts/implement_performance_fixes.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "fix_duplicates",
          "consolidate_memory_systems",
          "consolidate_small_modules",
          "fix_circular_dependencies",
          "_consolidate_files",
          "_consolidate_directory_modules",
          "_fix_ethics_dream_circular",
          "_fix_orchestration_brain_circular",
          "_update_imports_for_removed_file",
          "_update_imports_after_consolidation",
          "_get_classes_from_file",
          "_should_skip",
          "run_all_fixes"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .implement_performance_fixes import PerformanceFixer",
          "export": "__all__.append('PerformanceFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComprehensiveImportFixer",
        "type": "class",
        "file_path": "scripts/comprehensive_import_fix.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "run",
          "_build_index",
          "_fix_all_imports",
          "_fix_file_imports",
          "_should_skip",
          "_generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .comprehensive_import_fix import ComprehensiveImportFixer",
          "export": "__all__.append('ComprehensiveImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "SyntaxErrorFixer",
        "type": "class",
        "file_path": "scripts/fix_syntax_errors.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "fix_syntax_errors",
          "_fix_file"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_syntax_errors import SyntaxErrorFixer",
          "export": "__all__.append('SyntaxErrorFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ImportAnalyzer",
        "type": "class",
        "file_path": "scripts/analyze_import_patterns.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "analyze",
          "_map_current_modules",
          "_get_module_from_file",
          "_analyze_all_imports",
          "_analyze_file_imports",
          "_identify_old_patterns",
          "_generate_report",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .analyze_import_patterns import ImportAnalyzer",
          "export": "__all__.append('ImportAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "IncompleteImportFixer",
        "type": "class",
        "file_path": "scripts/fix_incomplete_imports.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "fix_imports",
          "_fix_file",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_incomplete_imports import IncompleteImportFixer",
          "export": "__all__.append('IncompleteImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConnectivityVisualizer",
        "type": "class",
        "file_path": "scripts/connectivity_visualizer.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "analyze_codebase",
          "_analyze_file",
          "_extract_imports",
          "_is_internal_import",
          "_get_module_name",
          "_should_skip",
          "generate_report",
          "visualize_graph",
          "_create_simplified_view"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .connectivity_visualizer import ConnectivityVisualizer",
          "export": "__all__.append('ConnectivityVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleImportFixer",
        "type": "class",
        "file_path": "scripts/fix_imports_by_module.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "fix_module",
          "_fix_core_memory",
          "_fix_bio_nested",
          "_fix_single_imports",
          "_fix_lukhas_prefix",
          "_apply_mappings",
          "_should_skip",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_imports_by_module import ModuleImportFixer",
          "export": "__all__.append('ModuleImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "InternalImportFixer",
        "type": "class",
        "file_path": "scripts/fix_internal_imports.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "_build_index",
          "fix_imports",
          "_fix_specific_patterns",
          "_fix_single_internal_imports",
          "_fix_known_issues",
          "_fix_specific_file",
          "_apply_mappings",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_internal_imports import InternalImportFixer",
          "export": "__all__.append('InternalImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemainingImportAnalyzer",
        "type": "class",
        "file_path": "scripts/analyze_remaining_imports.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "analyze",
          "_analyze_patterns",
          "_module_exists",
          "_generate_actionable_report",
          "_find_possible_locations",
          "_suggest_fixes",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .analyze_remaining_imports import RemainingImportAnalyzer",
          "export": "__all__.append('RemainingImportAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrokenImportFinder",
        "type": "class",
        "file_path": "scripts/find_broken_imports.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "find_broken_imports",
          "_check_file_imports",
          "_module_exists",
          "_generate_report",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .find_broken_imports import BrokenImportFinder",
          "export": "__all__.append('BrokenImportFinder')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircularImportFixer",
        "type": "class",
        "file_path": "scripts/fix_circular_imports.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "analyze_imports",
          "_analyze_file",
          "_is_internal_module",
          "find_circular_dependencies",
          "generate_fixes",
          "_analyze_cycle",
          "_generate_suggestion",
          "_find_files_with_import",
          "_save_fixes",
          "_apply_automatic_fixes",
          "_apply_lazy_import_fix",
          "_generate_lazy_import_code",
          "_should_skip",
          "create_import_guidelines"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_circular_imports import CircularImportFixer",
          "export": "__all__.append('CircularImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationAnalyzer",
        "type": "class",
        "file_path": "scripts/analyze_consolidation_opportunities.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "analyze",
          "_map_internal_modules",
          "_analyze_import_relationships",
          "_find_consolidation_opportunities",
          "_find_tightly_coupled_modules",
          "_find_similar_named_modules",
          "_find_small_modules",
          "_find_circular_dependencies",
          "_find_duplicate_files",
          "_generate_report",
          "_generate_recommendations",
          "_is_internal_module",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .analyze_consolidation_opportunities import ConsolidationAnalyzer",
          "export": "__all__.append('ConsolidationAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CommonPatternFixer",
        "type": "class",
        "file_path": "scripts/fix_common_patterns.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "fix_imports",
          "_fix_openai_imports",
          "_fix_future_imports",
          "_fix_common_patterns",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_common_patterns import CommonPatternFixer",
          "export": "__all__.append('CommonPatternFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossLayerChecker",
        "type": "class",
        "file_path": "scripts/check_cross_layer.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "get_module_layer",
          "is_valid_cross_layer",
          "extract_imports",
          "scan_codebase",
          "generate_report",
          "print_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .check_cross_layer import CrossLayerChecker",
          "export": "__all__.append('CrossLayerChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "CriticalImportFixer",
        "type": "class",
        "file_path": "scripts/fix_critical_imports.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "fix_imports",
          "_fix_file",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_critical_imports import CriticalImportFixer",
          "export": "__all__.append('CriticalImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CriticalImportAnalyzer",
        "type": "class",
        "file_path": "scripts/analyze_critical_broken_imports.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "analyze",
          "_get_module_path",
          "_analyze_file",
          "_calculate_importance_scores",
          "_generate_report",
          "_generate_fix_scripts",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .analyze_critical_broken_imports import CriticalImportAnalyzer",
          "export": "__all__.append('CriticalImportAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CriticalCircularFixer",
        "type": "class",
        "file_path": "scripts/fix_critical_circular_imports.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "fix_circular_imports",
          "_apply_lazy_import",
          "_apply_type_checking_import",
          "_remove_import",
          "fix_additional_patterns",
          "_fix_pattern"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_critical_circular_imports import CriticalCircularFixer",
          "export": "__all__.append('CriticalCircularFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "DependencyVisualizer",
        "type": "class",
        "file_path": "scripts/generate_visualizations.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "generate_all_visualizations",
          "_build_dependency_graph",
          "_extract_imports",
          "_generate_full_dependency_graph",
          "_generate_module_hierarchy",
          "_generate_circular_dependencies",
          "_generate_community_structure",
          "_generate_complexity_heatmap",
          "_generate_module_coupling_matrix",
          "_generate_layered_architecture",
          "_generate_index_html",
          "_path_to_module",
          "_get_module_type",
          "_get_node_color",
          "_should_skip_path",
          "_hierarchical_layout"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .generate_visualizations import DependencyVisualizer",
          "export": "__all__.append('DependencyVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnusedFileFinder",
        "type": "class",
        "file_path": "scripts/find_unused_files.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_module_path_from_import",
          "extract_imports",
          "scan_codebase",
          "find_unused_files"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .find_unused_files import UnusedFileFinder",
          "export": "__all__.append('UnusedFileFinder')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmMigrator",
        "type": "class",
        "file_path": "scripts/migrate_to_enhanced_swarm.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "find_swarm_files",
          "analyze_colony_type",
          "get_capabilities_for_colony",
          "migrate_file",
          "update_colony_files",
          "migrate_colony_implementation",
          "create_test_updates",
          "run_migration"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .migrate_to_enhanced_swarm import SwarmMigrator",
          "export": "__all__.append('SwarmMigrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "RealBrokenImportValidator",
        "type": "class",
        "file_path": "scripts/validate_real_broken_imports.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "validate",
          "_build_module_index",
          "_check_imports",
          "_generate_report",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .validate_real_broken_imports import RealBrokenImportValidator",
          "export": "__all__.append('RealBrokenImportValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemainingImportFixer",
        "type": "class",
        "file_path": "scripts/fix_remaining_imports.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "fix_imports",
          "_fix_bio_orchestration",
          "_fix_core_memory_remaining",
          "_fix_single_imports",
          "_fix_specific_file",
          "_apply_fixes",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_remaining_imports import RemainingImportFixer",
          "export": "__all__.append('RemainingImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "CriticalImportFixer",
        "type": "class",
        "file_path": "scripts/fix_critical_module_imports.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "fix_critical_modules",
          "_fix_module",
          "_fix_file",
          "_fix_incomplete_imports",
          "_fix_internal_imports",
          "_should_skip",
          "generate_import_map_update"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_critical_module_imports import CriticalImportFixer",
          "export": "__all__.append('CriticalImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "PerformanceOpportunityAnalyzer",
        "type": "class",
        "file_path": "scripts/analyze_performance_opportunities.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "analyze",
          "_analyze_duplicate_files",
          "_analyze_small_modules",
          "_analyze_circular_dependencies",
          "_analyze_memory_systems",
          "_generate_report",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .analyze_performance_opportunities import PerformanceOpportunityAnalyzer",
          "export": "__all__.append('PerformanceOpportunityAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemConnector",
        "type": "class",
        "file_path": "scripts/connect_critical_systems.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "create_integration_hub",
          "update_api_endpoints",
          "create_dream_consciousness_bridge",
          "connect_identity_to_all_systems",
          "update_main_entry_points",
          "create_colony_swarm_integration",
          "run_connections"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .connect_critical_systems import SystemConnector",
          "export": "__all__.append('SystemConnector')"
        }
      ]
    },
    {
      "entity": {
        "name": "TrulyBrokenImportFixer",
        "type": "class",
        "file_path": "scripts/fix_truly_broken_imports.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "fix_imports",
          "_fix_file"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_truly_broken_imports import TrulyBrokenImportFixer",
          "export": "__all__.append('TrulyBrokenImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "IncompleteImportFixer",
        "type": "class",
        "file_path": "scripts/fix_all_incomplete_imports.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "fix_all_incomplete_imports",
          "_fix_file",
          "_fix_incomplete_imports",
          "_fix_todo_imports",
          "_get_completion",
          "_should_skip",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .fix_all_incomplete_imports import IncompleteImportFixer",
          "export": "__all__.append('IncompleteImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasNameRemover",
        "type": "class",
        "file_path": "scripts/remove_naming.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "find_and_rename_all",
          "_remove_lukhas_from_name",
          "_rename_file",
          "_should_skip_path",
          "_report_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .remove_naming import LukhasNameRemover",
          "export": "__all__.append('LukhasNameRemover')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuickImportFixer",
        "type": "class",
        "file_path": "scripts/quick_import_fix.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "run",
          "_fix_file",
          "_fix_class_imports",
          "_to_snake_case",
          "_should_skip"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/__init__.py",
          "action": "add_export",
          "code": "from .quick_import_fix import QuickImportFixer",
          "export": "__all__.append('QuickImportFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolInfo",
        "type": "dataclass",
        "file_path": "scripts/connectivity/generate_connectivity_index.py",
        "line_number": 10,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/connectivity/__init__.py",
          "action": "add_export",
          "code": "from .generate_connectivity_index import SymbolInfo",
          "export": "__all__.append('SymbolInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolInfo",
        "type": "dataclass",
        "file_path": "scripts/connectivity/generate_connectivity_index_enhanced.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/connectivity/__init__.py",
          "action": "add_export",
          "code": "from .generate_connectivity_index_enhanced import SymbolInfo",
          "export": "__all__.append('SymbolInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleMetrics",
        "type": "dataclass",
        "file_path": "scripts/connectivity/generate_connectivity_index_enhanced.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/connectivity/__init__.py",
          "action": "add_export",
          "code": "from .generate_connectivity_index_enhanced import ModuleMetrics",
          "export": "__all__.append('ModuleMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "MissedOpportunity",
        "type": "dataclass",
        "file_path": "scripts/connectivity/generate_connectivity_index_enhanced.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/connectivity/__init__.py",
          "action": "add_export",
          "code": "from .generate_connectivity_index_enhanced import MissedOpportunity",
          "export": "__all__.append('MissedOpportunity')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedConnectivityAnalyzer",
        "type": "class",
        "file_path": "scripts/connectivity/generate_connectivity_index_enhanced.py",
        "line_number": 55,
        "methods": [
          "__init__",
          "analyze_directory",
          "_collect_file_definitions",
          "_get_class_kind",
          "_get_decorator_name",
          "_calculate_complexity",
          "_get_module_name",
          "_collect_all_imports",
          "_collect_file_imports",
          "_resolve_import",
          "_analyze_dependencies",
          "_detect_missed_opportunities",
          "_find_cycle",
          "_calculate_metrics",
          "_generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "scripts/connectivity/__init__.py",
          "action": "add_export",
          "code": "from .generate_connectivity_index_enhanced import EnhancedConnectivityAnalyzer",
          "export": "__all__.append('EnhancedConnectivityAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemIntegrationHub",
        "type": "class",
        "file_path": "orchestration/integration_hub.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "_connect_systems"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .integration_hub import SystemIntegrationHub",
          "export": "__all__.append('SystemIntegrationHub')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModulePriority",
        "type": "class",
        "file_path": "orchestration/system_orchestrator.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .system_orchestrator import ModulePriority",
          "export": "__all__.append('ModulePriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleInfo",
        "type": "dataclass",
        "file_path": "orchestration/system_orchestrator.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .system_orchestrator import ModuleInfo",
          "export": "__all__.append('ModuleInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorMigrator",
        "type": "class",
        "file_path": "orchestration/migrate_orchestrators.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "determine_base_class",
          "extract_class_info",
          "needs_migration",
          "generate_migration_header",
          "migrate_orchestrator",
          "create_migrated_version",
          "generate_import_updates",
          "generate_required_methods",
          "migrate_all"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .migrate_orchestrators import OrchestratorMigrator",
          "export": "__all__.append('OrchestratorMigrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoherenceLevel",
        "type": "class",
        "file_path": "orchestration/bio_symbolic_orchestrator.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_orchestrator import CoherenceLevel",
          "export": "__all__.append('CoherenceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoherenceMetrics",
        "type": "dataclass",
        "file_path": "orchestration/bio_symbolic_orchestrator.py",
        "line_number": 117,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .bio_symbolic_orchestrator import CoherenceMetrics",
          "export": "__all__.append('CoherenceMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "StressLevel",
        "type": "class",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 25,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import StressLevel",
          "export": "__all__.append('StressLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "HelpSignalType",
        "type": "class",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import HelpSignalType",
          "export": "__all__.append('HelpSignalType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleHealth",
        "type": "dataclass",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import ModuleHealth",
          "export": "__all__.append('ModuleHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "HelpSignal",
        "type": "dataclass",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import HelpSignal",
          "export": "__all__.append('HelpSignal')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonancePattern",
        "type": "dataclass",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import ResonancePattern",
          "export": "__all__.append('ResonancePattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 96,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import ResonanceOrchestratorConfig",
          "export": "__all__.append('ResonanceOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResonanceOrchestrator",
        "type": "class",
        "file_path": "orchestration/resonance_orchestrator.py",
        "line_number": 118,
        "methods": [
          "__init__",
          "get_trauma_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .resonance_orchestrator import ResonanceOrchestrator",
          "export": "__all__.append('ResonanceOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyState",
        "type": "class",
        "file_path": "orchestration/colony_orchestrator.py",
        "line_number": 112,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .colony_orchestrator import ColonyState",
          "export": "__all__.append('ColonyState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyMetrics",
        "type": "dataclass",
        "file_path": "orchestration/colony_orchestrator.py",
        "line_number": 159,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .colony_orchestrator import ColonyMetrics",
          "export": "__all__.append('ColonyMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveAGISystem",
        "type": "class",
        "file_path": "orchestration/main_node.py",
        "line_number": 39,
        "methods": [
          "__init__",
          "_load_dependencies",
          "init_components",
          "register_event_handlers",
          "_calculate_duration",
          "_get_memory_usage",
          "_save_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .main_node import AdaptiveAGISystem",
          "export": "__all__.append('AdaptiveAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceRegistry",
        "type": "class",
        "file_path": "orchestration/service_registry.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "register_service",
          "register_factory",
          "get_service",
          "unregister_service",
          "list_services",
          "clear"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import ServiceRegistry",
          "export": "__all__.append('ServiceRegistry')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('serviceregistry', ServiceRegistry())"
        }
      ]
    },
    {
      "entity": {
        "name": "MockLearningService",
        "type": "class",
        "file_path": "orchestration/service_registry.py",
        "line_number": 194,
        "methods": [
          "learn_from_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import MockLearningService",
          "export": "__all__.append('MockLearningService')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('mocklearningservice', MockLearningService())"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasIntegrationEngine",
        "type": "class",
        "file_path": "orchestration/integration_engine.py",
        "line_number": 35,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .integration_engine import LukhasIntegrationEngine",
          "export": "__all__.append('LukhasIntegrationEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationMetrics",
        "type": "dataclass",
        "file_path": "orchestration/master_orchestrator.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import OrchestrationMetrics",
          "export": "__all__.append('OrchestrationMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingLevel",
        "type": "class",
        "file_path": "orchestration/orchestrator.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import ProcessingLevel",
          "export": "__all__.append('ProcessingLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationMetrics",
        "type": "dataclass",
        "file_path": "orchestration/orchestrator.py",
        "line_number": 150,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import OrchestrationMetrics",
          "export": "__all__.append('OrchestrationMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuorumOrchestrator",
        "type": "class",
        "file_path": "orchestration/quorum_orchestrator.py",
        "line_number": 4,
        "methods": [
          "__init__",
          "decide"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .quorum_orchestrator import QuorumOrchestrator",
          "export": "__all__.append('QuorumOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentInfo",
        "type": "dataclass",
        "file_path": "orchestration/base.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .base import ComponentInfo",
          "export": "__all__.append('ComponentInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorMetrics",
        "type": "dataclass",
        "file_path": "orchestration/base.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .base import OrchestratorMetrics",
          "export": "__all__.append('OrchestratorMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmMetrics",
        "type": "dataclass",
        "file_path": "orchestration/swarm_orchestration_adapter.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/__init__.py",
          "action": "add_export",
          "code": "from .swarm_orchestration_adapter import SwarmMetrics",
          "export": "__all__.append('SwarmMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftType",
        "type": "class",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitoring_api import DriftType",
          "export": "__all__.append('DriftType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlertChannel",
        "type": "class",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitoring_api import AlertChannel",
          "export": "__all__.append('AlertChannel')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetricDataPoint",
        "type": "dataclass",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitoring_api import MetricDataPoint",
          "export": "__all__.append('MetricDataPoint')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetricCollector",
        "type": "class",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 243,
        "methods": [
          "__init__",
          "get_recent_values",
          "get_metric_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitoring_api import MetricCollector",
          "export": "__all__.append('MetricCollector')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftMonitoringAPI",
        "type": "class",
        "file_path": "orchestration/apis/drift_monitoring_api.py",
        "line_number": 644,
        "methods": [
          "__init__",
          "get_monitoring_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .drift_monitoring_api import DriftMonitoringAPI",
          "export": "__all__.append('DriftMonitoringAPI')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeLanguage",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeLanguage",
          "export": "__all__.append('CodeLanguage')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExecutionEnvironment",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import ExecutionEnvironment",
          "export": "__all__.append('ExecutionEnvironment')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeQuality",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeQuality",
          "export": "__all__.append('CodeQuality')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeGenerationRequest",
        "type": "dataclass",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 113,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeGenerationRequest",
          "export": "__all__.append('CodeGenerationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeExecutionResult",
        "type": "dataclass",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeExecutionResult",
          "export": "__all__.append('CodeExecutionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeQualityReport",
        "type": "dataclass",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 143,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeQualityReport",
          "export": "__all__.append('CodeQualityReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeGenerator",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 155,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeGenerator",
          "export": "__all__.append('CodeGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "PythonCodeGenerator",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 169,
        "methods": [
          "_generate_imports",
          "_generate_header"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import PythonCodeGenerator",
          "export": "__all__.append('PythonCodeGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "CPISecurityScanner",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 518,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CPISecurityScanner",
          "export": "__all__.append('CPISecurityScanner')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeProcessIntegrationAPI",
        "type": "class",
        "file_path": "orchestration/apis/code_process_integration_api.py",
        "line_number": 554,
        "methods": [
          "__init__",
          "get_request_status",
          "get_api_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/apis/__init__.py",
          "action": "add_export",
          "code": "from .code_process_integration_api import CodeProcessIntegrationAPI",
          "export": "__all__.append('CodeProcessIntegrationAPI')"
        }
      ]
    },
    {
      "entity": {
        "name": "EchoController",
        "type": "class",
        "file_path": "orchestration/echo/echo_controller.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "ping",
          "_check_for_echo_loops",
          "_check_for_silent_drops",
          "_output_alert"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/echo/__init__.py",
          "action": "add_export",
          "code": "from .echo_controller import EchoController",
          "export": "__all__.append('EchoController')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorFlags",
        "type": "dataclass",
        "file_path": "orchestration/config/orchestrator_flags.py",
        "line_number": 25,
        "methods": [
          "get_orchestrator_mode",
          "get_canary_percentage",
          "is_orchestrator_enabled",
          "should_use_new_orchestrator",
          "should_use_legacy_orchestrator",
          "to_dict",
          "from_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_flags import OrchestratorFlags",
          "export": "__all__.append('OrchestratorFlags')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationResult",
        "type": "dataclass",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 22,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import OrchestrationResult",
          "export": "__all__.append('OrchestrationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "ShadowComparisonResult",
        "type": "dataclass",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import ShadowComparisonResult",
          "export": "__all__.append('ShadowComparisonResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitBreaker",
        "type": "class",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "can_execute",
          "record_success",
          "record_failure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import CircuitBreaker",
          "export": "__all__.append('CircuitBreaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ShadowOrchestrator",
        "type": "class",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 119,
        "methods": [
          "__init__",
          "_compare_results",
          "_compare_dicts",
          "_compare_sequences",
          "_log_comparison",
          "get_comparison_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import ShadowOrchestrator",
          "export": "__all__.append('ShadowOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorRouter",
        "type": "class",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 325,
        "methods": [
          "__init__",
          "_get_flags",
          "_ensure_orchestrator_tracking",
          "_record_metrics",
          "get_orchestrator_health",
          "get_shadow_summary",
          "get_all_orchestrator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import OrchestratorRouter",
          "export": "__all__.append('OrchestratorRouter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MinimalFlags",
        "type": "dataclass",
        "file_path": "orchestration/config/migration_router.py",
        "line_number": 352,
        "methods": [
          "get_orchestrator_mode",
          "is_orchestrator_enabled",
          "should_use_new_orchestrator",
          "should_use_legacy_orchestrator"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .migration_router import MinimalFlags",
          "export": "__all__.append('MinimalFlags')"
        }
      ]
    },
    {
      "entity": {
        "name": "Environment",
        "type": "class",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 16,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import Environment",
          "export": "__all__.append('Environment')"
        }
      ]
    },
    {
      "entity": {
        "name": "LogLevel",
        "type": "class",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import LogLevel",
          "export": "__all__.append('LogLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "DatabaseConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 32,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import DatabaseConfig",
          "export": "__all__.append('DatabaseConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "RedisConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import RedisConfig",
          "export": "__all__.append('RedisConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import SecurityConfig",
          "export": "__all__.append('SecurityConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "PerformanceConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 104,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import PerformanceConfig",
          "export": "__all__.append('PerformanceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 126,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import OrchestrationConfig",
          "export": "__all__.append('OrchestrationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProductionOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/config/production_config.py",
        "line_number": 150,
        "methods": [
          "load_from_env",
          "load_from_file",
          "from_dict",
          "to_dict",
          "save_to_file",
          "validate",
          "is_production",
          "is_development"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/config/__init__.py",
          "action": "add_export",
          "code": "from .production_config import ProductionOrchestratorConfig",
          "export": "__all__.append('ProductionOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicOversightValidator",
        "type": "class",
        "file_path": "orchestration/security/LGOV_validator.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "validate_decision"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/security/__init__.py",
          "action": "add_export",
          "code": "from .LGOV_validator import SymbolicOversightValidator",
          "export": "__all__.append('SymbolicOversightValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasDASTEngine",
        "type": "class",
        "file_path": "orchestration/security/dast/engine.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "_initialize_ai_components",
          "_initialize_ai_models",
          "_extract_title",
          "_determine_priority",
          "_extract_tags",
          "_estimate_duration",
          "_extract_due_date",
          "_identify_dependencies",
          "_calculate_priority_score",
          "_apply_symbolic_reasoning",
          "_ai_filter_tasks",
          "_ai_prioritize_tasks",
          "_optimize_workflow_async",
          "_update_workflow_metrics_sync",
          "_update_workflow_metrics",
          "_generate_cache_key",
          "_record_operation_time",
          "get_performance_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/security/dast/__init__.py",
          "action": "add_export",
          "code": "from .engine import LukhasDASTEngine",
          "export": "__all__.append('LukhasDASTEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdapterConfig",
        "type": "dataclass",
        "file_path": "orchestration/security/dast/adapters.py",
        "line_number": 17,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/security/dast/__init__.py",
          "action": "add_export",
          "code": "from .adapters import AdapterConfig",
          "export": "__all__.append('AdapterConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReviewerRole",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import ReviewerRole",
          "export": "__all__.append('ReviewerRole')"
        }
      ]
    },
    {
      "entity": {
        "name": "EscrowStatus",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import EscrowStatus",
          "export": "__all__.append('EscrowStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReviewerProfile",
        "type": "dataclass",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 120,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import ReviewerProfile",
          "export": "__all__.append('ReviewerProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "EscrowDetails",
        "type": "dataclass",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 156,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import EscrowDetails",
          "export": "__all__.append('EscrowDetails')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReviewAssignment",
        "type": "dataclass",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 170,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import ReviewAssignment",
          "export": "__all__.append('ReviewAssignment')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReviewerNotification",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 215,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import ReviewerNotification",
          "export": "__all__.append('ReviewerNotification')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmailNotification",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 228,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import EmailNotification",
          "export": "__all__.append('EmailNotification')"
        }
      ]
    },
    {
      "entity": {
        "name": "SlackNotification",
        "type": "class",
        "file_path": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "line_number": 245,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/integration/__init__.py",
          "action": "add_export",
          "code": "from .human_in_the_loop_orchestrator import SlackNotification",
          "export": "__all__.append('SlackNotification')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedAGIBot",
        "type": "class",
        "file_path": "orchestration/agents/meta_cognitive_orchestrator.py",
        "line_number": 897,
        "methods": [
          "__init__",
          "_generate_safe_response",
          "_update_conversation_history",
          "_update_performance_metrics",
          "get_agi_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .meta_cognitive_orchestrator import EnhancedAGIBot",
          "export": "__all__.append('EnhancedAGIBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentRegistry",
        "type": "class",
        "file_path": "orchestration/agents/registry.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "register",
          "get_agent",
          "find_agents_by_capability",
          "list_agents"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .registry import AgentRegistry",
          "export": "__all__.append('AgentRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAgentCollaboration",
        "type": "class",
        "file_path": "orchestration/agents/multi_agent_collaboration.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "register_agent",
          "create_task",
          "send_message",
          "update_task_progress",
          "complete_task",
          "_assign_agents_to_task",
          "_complete_task"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .multi_agent_collaboration import MultiAgentCollaboration",
          "export": "__all__.append('MultiAgentCollaboration')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionaryMode",
        "type": "class",
        "file_path": "orchestration/agents/adaptive_orchestrator.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_orchestrator import VisionaryMode",
          "export": "__all__.append('VisionaryMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionaryMetrics",
        "type": "dataclass",
        "file_path": "orchestration/agents/adaptive_orchestrator.py",
        "line_number": 95,
        "methods": [
          "overall_vision_score"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_orchestrator import VisionaryMetrics",
          "export": "__all__.append('VisionaryMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveOrchestrator",
        "type": "class",
        "file_path": "orchestration/agents/adaptive_orchestrator.py",
        "line_number": 126,
        "methods": [
          "__init__",
          "_setup_visionary_logging",
          "_load_visionary_config"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_orchestrator import AdaptiveOrchestrator",
          "export": "__all__.append('AdaptiveOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "VisionaryFormatter",
        "type": "class",
        "file_path": "orchestration/agents/adaptive_orchestrator.py",
        "line_number": 196,
        "methods": [
          "format"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .adaptive_orchestrator import VisionaryFormatter",
          "export": "__all__.append('VisionaryFormatter')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementState",
        "type": "class",
        "file_path": "orchestration/agents/orchestrator.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import EnhancementState",
          "export": "__all__.append('EnhancementState')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementMetrics",
        "type": "dataclass",
        "file_path": "orchestration/agents/orchestrator.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import EnhancementMetrics",
          "export": "__all__.append('EnhancementMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIEnhancementConfig",
        "type": "dataclass",
        "file_path": "orchestration/agents/orchestrator.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import AGIEnhancementConfig",
          "export": "__all__.append('AGIEnhancementConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedAGIEnhancementOrchestrator",
        "type": "class",
        "file_path": "orchestration/agents/orchestrator.py",
        "line_number": 109,
        "methods": [
          "__init__",
          "_create_crista_meta_pathway",
          "_create_meta_quantum_pathway",
          "_create_quantum_crista_pathway",
          "_create_unified_feedback_pathway",
          "_compute_unified_optimizations",
          "_check_convergence",
          "get_enhancement_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import UnifiedAGIEnhancementOrchestrator",
          "export": "__all__.append('UnifiedAGIEnhancementOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedAGIBot",
        "type": "class",
        "file_path": "orchestration/agents/meta_cognitive_orchestrator_alt.py",
        "line_number": 988,
        "methods": [
          "__init__",
          "_generate_safe_response",
          "_update_conversation_history",
          "_update_performance_metrics",
          "get_agi_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/__init__.py",
          "action": "add_export",
          "code": "from .meta_cognitive_orchestrator_alt import EnhancedAGIBot",
          "export": "__all__.append('EnhancedAGIBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "Jules01Agent",
        "type": "class",
        "file_path": "orchestration/agents/builtin/jules.py",
        "line_number": 12,
        "methods": [
          "get_agent_id",
          "get_capabilities",
          "process",
          "validate_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/agents/builtin/__init__.py",
          "action": "add_export",
          "code": "from .jules import Jules01Agent",
          "export": "__all__.append('Jules01Agent')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementState",
        "type": "class",
        "file_path": "orchestration/specialized/enhancement_orchestrator.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_orchestrator import EnhancementState",
          "export": "__all__.append('EnhancementState')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementMetrics",
        "type": "dataclass",
        "file_path": "orchestration/specialized/enhancement_orchestrator.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_orchestrator import EnhancementMetrics",
          "export": "__all__.append('EnhancementMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIEnhancementConfig",
        "type": "dataclass",
        "file_path": "orchestration/specialized/enhancement_orchestrator.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_orchestrator import AGIEnhancementConfig",
          "export": "__all__.append('AGIEnhancementConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedAGIEnhancementOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/enhancement_orchestrator.py",
        "line_number": 109,
        "methods": [
          "__init__",
          "_create_crista_meta_pathway",
          "_create_meta_quantum_pathway",
          "_create_quantum_crista_pathway",
          "_create_unified_feedback_pathway",
          "_compute_unified_optimizations",
          "_check_convergence",
          "get_enhancement_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .enhancement_orchestrator import UnifiedAGIEnhancementOrchestrator",
          "export": "__all__.append('UnifiedAGIEnhancementOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumNetworkEngine",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 88,
        "methods": [
          "__init__",
          "add_node",
          "add_edge",
          "calculate_quantum_modularity",
          "_detect_quantum_clusters",
          "nodes",
          "edges",
          "in_degree",
          "out_degree",
          "degree"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import QuantumNetworkEngine",
          "export": "__all__.append('QuantumNetworkEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bSelfHealingAction",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 278,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bSelfHealingAction",
          "export": "__all__.append('\u039bSelfHealingAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bCodeFixSuggestion",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 291,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bCodeFixSuggestion",
          "export": "__all__.append('\u039bCodeFixSuggestion')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bSelfHealingReport",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 302,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bSelfHealingReport",
          "export": "__all__.append('\u039bSelfHealingReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bDependencyProfile",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 313,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bDependencyProfile",
          "export": "__all__.append('\u039bDependencyProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bArchitecturalInsight",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 325,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bArchitecturalInsight",
          "export": "__all__.append('\u039bArchitecturalInsight')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bModularityReport",
        "type": "dataclass",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 335,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bModularityReport",
          "export": "__all__.append('\u039bModularityReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bDependaBoT",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 344,
        "methods": [
          "__init__",
          "_should_exclude_file",
          "_get_module_name",
          "_resolve_module_name",
          "_calculate_quantum_complexity",
          "_calculate_average_modularity",
          "_calculate_quantum_coherence",
          "_assess_entanglement_quality",
          "_calculate_pattern_accuracy",
          "_calculate_optimization_success_rate",
          "_calculate_failure_rate",
          "_calculate_encoding_success_rate",
          "_calculate_syntax_tolerance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import \u039bDependaBoT",
          "export": "__all__.append('\u039bDependaBoT')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeFixerBase",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 1519,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import CodeFixerBase",
          "export": "__all__.append('CodeFixerBase')"
        }
      ]
    },
    {
      "entity": {
        "name": "OllamaCodeFixer",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 1528,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import OllamaCodeFixer",
          "export": "__all__.append('OllamaCodeFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "TransformersCodeFixer",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 1600,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import TransformersCodeFixer",
          "export": "__all__.append('TransformersCodeFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "OpenAICodeFixer",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_dependa_bot.py",
        "line_number": 1655,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_dependa_bot import OpenAICodeFixer",
          "export": "__all__.append('OpenAICodeFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveUI",
        "type": "class",
        "file_path": "orchestration/specialized/ui_orchestrator.py",
        "line_number": 6,
        "methods": [
          "__init__",
          "_generate_advanced_adaptation",
          "_analyze_emotional_trajectory",
          "_generate_empathetic_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .ui_orchestrator import AdaptiveUI",
          "export": "__all__.append('AdaptiveUI')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/component_orchestrator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .component_orchestrator import ComponentOrchestrator",
          "export": "__all__.append('ComponentOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EliteCodeManagementBot",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_bot_orchestrator.py",
        "line_number": 239,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_bot_orchestrator import EliteCodeManagementBot",
          "export": "__all__.append('EliteCodeManagementBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "EliteGenericBot",
        "type": "class",
        "file_path": "orchestration/specialized/lambda_bot_orchestrator.py",
        "line_number": 416,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .lambda_bot_orchestrator import EliteGenericBot",
          "export": "__all__.append('EliteGenericBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "ScalingAction",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 115,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ScalingAction",
          "export": "__all__.append('ScalingAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceMetrics",
        "type": "dataclass",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 134,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ServiceMetrics",
          "export": "__all__.append('ServiceMetrics')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('servicemetrics', ServiceMetrics())"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceHealth",
        "type": "dataclass",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 148,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ServiceHealth",
          "export": "__all__.append('ServiceHealth')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('servicehealth', ServiceHealth())"
        }
      ]
    },
    {
      "entity": {
        "name": "ScalingDecision",
        "type": "dataclass",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 159,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ScalingDecision",
          "export": "__all__.append('ScalingDecision')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationTask",
        "type": "dataclass",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 171,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import OrchestrationTask",
          "export": "__all__.append('OrchestrationTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceRegistry",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 186,
        "methods": [
          "__init__",
          "register_service",
          "discover_service",
          "deregister_service"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ServiceRegistry",
          "export": "__all__.append('ServiceRegistry')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('serviceregistry', ServiceRegistry())"
        }
      ]
    },
    {
      "entity": {
        "name": "LoadBalancer",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 277,
        "methods": [
          "__init__",
          "get_endpoint",
          "mark_endpoint_unhealthy",
          "mark_endpoint_healthy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import LoadBalancer",
          "export": "__all__.append('LoadBalancer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AutoScaler",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 322,
        "methods": [
          "__init__",
          "analyze_scaling_need",
          "execute_scaling"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import AutoScaler",
          "export": "__all__.append('AutoScaler')"
        }
      ]
    },
    {
      "entity": {
        "name": "CircuitBreaker",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 410,
        "methods": [
          "__init__",
          "call",
          "_should_attempt_reset",
          "_on_success",
          "_on_failure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import CircuitBreaker",
          "export": "__all__.append('CircuitBreaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskQueue",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 458,
        "methods": [
          "__init__",
          "enqueue_task",
          "get_next_task",
          "complete_task",
          "_get_priority_value"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import TaskQueue",
          "export": "__all__.append('TaskQueue')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContentEnterpriseOrchestrator",
        "type": "class",
        "file_path": "orchestration/specialized/content_enterprise_orchestrator.py",
        "line_number": 547,
        "methods": [
          "__init__",
          "_load_config",
          "_setup_logging",
          "_initialize_enterprise_modules",
          "setup_prometheus_metrics",
          "get_orchestration_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .content_enterprise_orchestrator import ContentEnterpriseOrchestrator",
          "export": "__all__.append('ContentEnterpriseOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasOrchestratorEmotionEngine",
        "type": "dataclass",
        "file_path": "orchestration/specialized/orchestrator_emotion_engine.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_emotion_engine import LukhasOrchestratorEmotionEngine",
          "export": "__all__.append('LukhasOrchestratorEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasOrchestratorEmotionEngine",
        "type": "class",
        "file_path": "orchestration/specialized/orchestrator_emotion_engine.py",
        "line_number": 42,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_emotion_engine import LukhasOrchestratorEmotionEngine",
          "export": "__all__.append('LukhasOrchestratorEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASCommericalDeployment",
        "type": "class",
        "file_path": "orchestration/specialized/deployment_orchestrator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_deployment_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .deployment_orchestrator import LUKHASCommericalDeployment",
          "export": "__all__.append('LUKHASCommericalDeployment')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentType",
        "type": "class",
        "file_path": "orchestration/specialized/inter_agent_simulation.py",
        "line_number": 22,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .inter_agent_simulation import AgentType",
          "export": "__all__.append('AgentType')"
        }
      ]
    },
    {
      "entity": {
        "name": "InterAgentSimulation",
        "type": "class",
        "file_path": "orchestration/specialized/inter_agent_simulation.py",
        "line_number": 102,
        "methods": [
          "__init__",
          "add_agent",
          "get_simulation_status",
          "export_message_log"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .inter_agent_simulation import InterAgentSimulation",
          "export": "__all__.append('InterAgentSimulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "LoopRecoverySimulation",
        "type": "class",
        "file_path": "orchestration/specialized/loop_recovery_simulator.py",
        "line_number": 19,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .loop_recovery_simulator import LoopRecoverySimulation",
          "export": "__all__.append('LoopRecoverySimulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveAGISystem",
        "type": "class",
        "file_path": "orchestration/specialized/integrated_system_orchestrator.py",
        "line_number": 41,
        "methods": [
          "__init__",
          "init_components",
          "register_event_handlers",
          "_calculate_duration",
          "_get_memory_usage",
          "_save_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/specialized/__init__.py",
          "action": "add_export",
          "code": "from .integrated_system_orchestrator import AdaptiveAGISystem",
          "export": "__all__.append('AdaptiveAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemWatchdog",
        "type": "class",
        "file_path": "orchestration/immune/system_watchdog.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "scan",
          "_quarantine_entry"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/immune/__init__.py",
          "action": "add_export",
          "code": "from .system_watchdog import SystemWatchdog",
          "export": "__all__.append('SystemWatchdog')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementState",
        "type": "class",
        "file_path": "orchestration/migrated/unified_agi_enhancement_orchestrator.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .unified_agi_enhancement_orchestrator import EnhancementState",
          "export": "__all__.append('EnhancementState')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementMetrics",
        "type": "dataclass",
        "file_path": "orchestration/migrated/unified_agi_enhancement_orchestrator.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .unified_agi_enhancement_orchestrator import EnhancementMetrics",
          "export": "__all__.append('EnhancementMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIEnhancementConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/unified_agi_enhancement_orchestrator.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .unified_agi_enhancement_orchestrator import AGIEnhancementConfig",
          "export": "__all__.append('AGIEnhancementConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedAGIEnhancementOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/unified_agi_enhancement_orchestrator.py",
        "line_number": 130,
        "methods": [
          "__init__",
          "_register_modules",
          "_create_crista_meta_pathway",
          "_create_meta_quantum_pathway",
          "_create_quantum_crista_pathway",
          "_create_unified_feedback_pathway",
          "_compute_unified_optimizations",
          "_check_convergence",
          "get_enhancement_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .unified_agi_enhancement_orchestrator import UnifiedAGIEnhancementOrchestrator",
          "export": "__all__.append('UnifiedAGIEnhancementOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/memory_orchestrator.py",
        "line_number": 47,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemoryOrchestratorConfig",
          "export": "__all__.append('MemoryOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryComponent",
        "type": "class",
        "file_path": "orchestration/migrated/memory_orchestrator.py",
        "line_number": 62,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemoryComponent",
          "export": "__all__.append('MemoryComponent')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/memory_orchestrator.py",
        "line_number": 93,
        "methods": [
          "__init__",
          "_determine_category",
          "_generate_cache_key",
          "get_cache_stats",
          "clear_cache",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .memory_orchestrator import MemoryOrchestrator",
          "export": "__all__.append('MemoryOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsMode",
        "type": "class",
        "file_path": "orchestration/migrated/ethics_orchestrator.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .ethics_orchestrator import EthicsMode",
          "export": "__all__.append('EthicsMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEthicsOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/ethics_orchestrator.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .ethics_orchestrator import UnifiedEthicsOrchestratorConfig",
          "export": "__all__.append('UnifiedEthicsOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsAuditEntry",
        "type": "dataclass",
        "file_path": "orchestration/migrated/ethics_orchestrator.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .ethics_orchestrator import EthicsAuditEntry",
          "export": "__all__.append('EthicsAuditEntry')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEthicsOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/ethics_orchestrator.py",
        "line_number": 110,
        "methods": [
          "__init__",
          "_register_modules",
          "_synthesize_evaluations",
          "_should_escalate_to_human",
          "get_ethics_status",
          "get_audit_trail",
          "configure"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .ethics_orchestrator import UnifiedEthicsOrchestrator",
          "export": "__all__.append('UnifiedEthicsOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemMode",
        "type": "class",
        "file_path": "orchestration/migrated/brain_orchestrator.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .brain_orchestrator import SystemMode",
          "export": "__all__.append('SystemMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingStage",
        "type": "class",
        "file_path": "orchestration/migrated/brain_orchestrator.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .brain_orchestrator import ProcessingStage",
          "export": "__all__.append('ProcessingStage')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainOrchestratorConfig",
        "type": "dataclass",
        "file_path": "orchestration/migrated/brain_orchestrator.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .brain_orchestrator import BrainOrchestratorConfig",
          "export": "__all__.append('BrainOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationOrchestratorConfig",
        "type": "class",
        "file_path": "orchestration/migrated/memory_integration_orchestrator.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .memory_integration_orchestrator import MemoryIntegrationOrchestratorConfig",
          "export": "__all__.append('MemoryIntegrationOrchestratorConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryIntegrationOrchestrator",
        "type": "class",
        "file_path": "orchestration/migrated/memory_integration_orchestrator.py",
        "line_number": 71,
        "methods": [
          "__init__",
          "load_specifications",
          "create_matada_node",
          "enhanced_fold_in",
          "enhanced_fold_out",
          "demonstrate_enterprise_features",
          "_generate_universal_prefix",
          "_encode_to_binary",
          "_generate_embeddings",
          "_compute_emotion_vector",
          "_extract_tags",
          "_compute_deduplication_hash",
          "_check_existing_content",
          "_enhance_tags_with_mycelium",
          "_map_causal_relationships",
          "_store_with_lukhas_integration",
          "_update_temporal_evolution",
          "_activate_mycelium_network",
          "_traverse_causal_graph",
          "_weight_relevance",
          "_filter_by_tier",
          "_assemble_narrative",
          "_vector_similarity_search",
          "_check_constitutional_alignment",
          "_update_world_model",
          "_compress_old_memories"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/migrated/__init__.py",
          "action": "add_export",
          "code": "from .memory_integration_orchestrator import MemoryIntegrationOrchestrator",
          "export": "__all__.append('MemoryIntegrationOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EndocrineAwareModule",
        "type": "class",
        "file_path": "orchestration/examples/endocrine_module_example.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "set_endocrine_integration",
          "get_modulatable_parameters"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/examples/__init__.py",
          "action": "add_export",
          "code": "from .endocrine_module_example import EndocrineAwareModule",
          "export": "__all__.append('EndocrineAwareModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceViolationType",
        "type": "class",
        "file_path": "orchestration/brain/symbol_validator.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .symbol_validator import ComplianceViolationType",
          "export": "__all__.append('ComplianceViolationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceViolation",
        "type": "dataclass",
        "file_path": "orchestration/brain/symbol_validator.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .symbol_validator import ComplianceViolation",
          "export": "__all__.append('ComplianceViolation')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleComplianceReport",
        "type": "dataclass",
        "file_path": "orchestration/brain/symbol_validator.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .symbol_validator import ModuleComplianceReport",
          "export": "__all__.append('ModuleComplianceReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorkspaceComplianceReport",
        "type": "dataclass",
        "file_path": "orchestration/brain/symbol_validator.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .symbol_validator import WorkspaceComplianceReport",
          "export": "__all__.append('WorkspaceComplianceReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasComplianceChecker",
        "type": "class",
        "file_path": "orchestration/brain/symbol_validator.py",
        "line_number": 120,
        "methods": [
          "__init__",
          "_load_compliance_patterns",
          "scan_workspace",
          "_find_files_to_scan",
          "_should_exclude_file",
          "_scan_files_parallel",
          "_scan_files_sequential",
          "_scan_single_file",
          "_analyze_content_for_violations",
          "_has_gdpr_compliance",
          "_has_ccpa_compliance",
          "_processes_personal_data",
          "_has_consent_management",
          "_has_encryption",
          "_has_audit_logging",
          "_is_ai_module",
          "_has_ai_transparency",
          "_calculate_jurisdictional_scores",
          "_determine_compliance_level",
          "_calculate_risk_score",
          "_generate_recommendations",
          "_analyze_features",
          "_get_known_module_scores",
          "_generate_workspace_report",
          "_calculate_average_jurisdiction_score",
          "_determine_overall_workspace_compliance",
          "_generate_workspace_recommendations",
          "_generate_executive_summary",
          "save_report",
          "print_summary",
          "_is_critical_module",
          "_has_obvious_security_issues"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .symbol_validator import LukhasComplianceChecker",
          "export": "__all__.append('LukhasComplianceChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "PIPEDALegalBasis",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import PIPEDALegalBasis",
          "export": "__all__.append('PIPEDALegalBasis')"
        }
      ]
    },
    {
      "entity": {
        "name": "CPPAConsumerRights",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CPPAConsumerRights",
          "export": "__all__.append('CPPAConsumerRights')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIDAGoverance",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import AIDAGoverance",
          "export": "__all__.append('AIDAGoverance')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProvincialJurisdiction",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import ProvincialJurisdiction",
          "export": "__all__.append('ProvincialJurisdiction')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataLocalization",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import DataLocalization",
          "export": "__all__.append('DataLocalization')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianComplianceConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 108,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianComplianceConfig",
          "export": "__all__.append('CanadianComplianceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianInput",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 146,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianInput",
          "export": "__all__.append('CanadianInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianOutput",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 168,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianOutput",
          "export": "__all__.append('CanadianOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianPrivacyModule",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 221,
        "methods": [
          "__init__",
          "_get_module_type",
          "_evaluate_jurisdictional_compliance",
          "process",
          "_assess_pipeda_compliance",
          "_assess_consumer_rights",
          "_assess_provincial_compliance",
          "_assess_cross_border_transfers"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianPrivacyModule",
          "export": "__all__.append('CanadianPrivacyModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianAIGovernanceModule",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 382,
        "methods": [
          "__init__",
          "_get_module_type",
          "process",
          "_requires_impact_assessment",
          "_assess_bias_risk",
          "_assess_transparency"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianAIGovernanceModule",
          "export": "__all__.append('CanadianAIGovernanceModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "CanadianAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/canadian_awareness_engine.py",
        "line_number": 489,
        "methods": [
          "__init__",
          "process_awareness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .canadian_awareness_engine import CanadianAwarenessEngine",
          "export": "__all__.append('CanadianAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryEmotionalIntegrator",
        "type": "class",
        "file_path": "orchestration/brain/brain_integration.py",
        "line_number": 308,
        "methods": [
          "__init__",
          "store_memory_with_emotion",
          "retrieve_with_emotional_context",
          "find_emotionally_similar_memories",
          "dream_consolidate_memories"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration import MemoryEmotionalIntegrator",
          "export": "__all__.append('MemoryEmotionalIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryVoiceIntegrator",
        "type": "class",
        "file_path": "orchestration/brain/brain_integration.py",
        "line_number": 731,
        "methods": [
          "__init__",
          "speak_with_emotional_context"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration import MemoryVoiceIntegrator",
          "export": "__all__.append('MemoryVoiceIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAnnealedEthicalConsensus",
        "type": "class",
        "file_path": "orchestration/brain/quantum_annealed_consensus.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "_initialize_ethical_embeddings",
          "find_ethical_consensus",
          "_prepare_constraint_penalties",
          "_perform_quantum_annealing",
          "_propose_quantum_like_state",
          "_calculate_system_energy",
          "_calculate_solution_coherence",
          "_calculate_alignment_with_principles",
          "get_consensus_history",
          "export_consensus_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .quantum_annealed_consensus import QuantumAnnealedEthicalConsensus",
          "export": "__all__.append('QuantumAnnealedEthicalConsensus')"
        }
      ]
    },
    {
      "entity": {
        "name": "SpecializedBrainCore",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "sync_with_orchestrator",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .multi_brain_orchestrator import SpecializedBrainCore",
          "export": "__all__.append('SpecializedBrainCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "CreativeProcessingBrain",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 67,
        "methods": [
          "__init__",
          "_fallback_creative_processing",
          "_extract_symbolic_patterns",
          "_generate_creative_insights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .multi_brain_orchestrator import CreativeProcessingBrain",
          "export": "__all__.append('CreativeProcessingBrain')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProcessingBrain",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 135,
        "methods": [
          "__init__",
          "_fallback_memory_processing",
          "_analyze_associative_patterns",
          "_get_consolidation_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .multi_brain_orchestrator import MemoryProcessingBrain",
          "export": "__all__.append('MemoryProcessingBrain')"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningProcessingBrain",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 197,
        "methods": [
          "__init__",
          "_analyze_learning_patterns",
          "_generate_adaptation_recommendations",
          "_extract_cognitive_insights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .multi_brain_orchestrator import LearningProcessingBrain",
          "export": "__all__.append('LearningProcessingBrain')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiBrainOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/multi_brain_orchestrator.py",
        "line_number": 260,
        "methods": [
          "__init__",
          "_synchronize_brains",
          "_synthesize_brain_outputs",
          "get_orchestrator_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .multi_brain_orchestrator import MultiBrainOrchestrator",
          "export": "__all__.append('MultiBrainOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "USLegalBasis",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USLegalBasis",
          "export": "__all__.append('USLegalBasis')"
        }
      ]
    },
    {
      "entity": {
        "name": "CCPACategory",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import CCPACategory",
          "export": "__all__.append('CCPACategory')"
        }
      ]
    },
    {
      "entity": {
        "name": "HIPAADataType",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import HIPAADataType",
          "export": "__all__.append('HIPAADataType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SOXClassification",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import SOXClassification",
          "export": "__all__.append('SOXClassification')"
        }
      ]
    },
    {
      "entity": {
        "name": "FedRAMPLevel",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import FedRAMPLevel",
          "export": "__all__.append('FedRAMPLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "USComplianceConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USComplianceConfig",
          "export": "__all__.append('USComplianceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "USConsentData",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 133,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USConsentData",
          "export": "__all__.append('USConsentData')"
        }
      ]
    },
    {
      "entity": {
        "name": "USProcessingRecord",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 159,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USProcessingRecord",
          "export": "__all__.append('USProcessingRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "USInstitutionalInput",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 191,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USInstitutionalInput",
          "export": "__all__.append('USInstitutionalInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "USInstitutionalOutput",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 217,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USInstitutionalOutput",
          "export": "__all__.append('USInstitutionalOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "USEnvironmentalReasoner",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 251,
        "methods": [
          "process",
          "explain_decision",
          "assess_bias",
          "validate_compliance",
          "get_confidence",
          "_apply_ccpa_minimization"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USEnvironmentalReasoner",
          "export": "__all__.append('USEnvironmentalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "USInstitutionalEnvironmentalModule",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 325,
        "methods": [
          "__init__",
          "_get_module_type",
          "_evaluate_jurisdictional_compliance",
          "generate_us_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USInstitutionalEnvironmentalModule",
          "export": "__all__.append('USInstitutionalEnvironmentalModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "USInstitutionalAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/us_institutional_awareness_engine.py",
        "line_number": 375,
        "methods": [
          "__init__",
          "_setup_us_logging",
          "_initialize_modules",
          "_setup_us_registry",
          "process_awareness",
          "exercise_consumer_rights",
          "_convert_to_global_input",
          "_convert_to_us_output",
          "_record_us_processing_activity",
          "_handle_ccpa_access_request",
          "_handle_ccpa_delete_request",
          "_handle_ccpa_opt_out_request",
          "_handle_non_discrimination_request",
          "get_us_compliance_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .us_institutional_awareness_engine import USInstitutionalAwarenessEngine",
          "export": "__all__.append('USInstitutionalAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedAGIController",
        "type": "class",
        "file_path": "orchestration/brain/controller.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "get_system_metrics",
          "find_similar_memories",
          "_analyze_memory_patterns",
          "_update_causal_models",
          "_calibrate_prediction_models",
          "_apply_meta_cognitive_adaptations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .controller import AdvancedAGIController",
          "export": "__all__.append('AdvancedAGIController')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStatus",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import ComplianceStatus",
          "export": "__all__.append('ComplianceStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessType",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import AwarenessType",
          "export": "__all__.append('AwarenessType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DastConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import DastConfig",
          "export": "__all__.append('DastConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import AwarenessInput",
          "export": "__all__.append('AwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import AwarenessOutput",
          "export": "__all__.append('AwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "DastReasoner",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 95,
        "methods": [
          "process",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import DastReasoner",
          "export": "__all__.append('DastReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 106,
        "methods": [
          "__init__",
          "__call__",
          "evaluate_alignment",
          "_get_module_type",
          "generate_recommendations",
          "calculate_sustainability_impact",
          "_compliance_status",
          "_identify_risk_factors"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import AwarenessModule",
          "export": "__all__.append('AwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 217,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import EnvironmentalAwarenessInput",
          "export": "__all__.append('EnvironmentalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalReasoner",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 227,
        "methods": [
          "process",
          "get_confidence",
          "_is_sustainable_location",
          "_detect_anomalies",
          "_calculate_sustainability_rating",
          "_estimate_carbon_impact",
          "_identify_optimizations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import EnvironmentalReasoner",
          "export": "__all__.append('EnvironmentalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 362,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import EnvironmentalAwarenessModule",
          "export": "__all__.append('EnvironmentalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 430,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import CognitiveAwarenessInput",
          "export": "__all__.append('CognitiveAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveReasoner",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 439,
        "methods": [
          "process",
          "get_confidence",
          "_calculate_optimal_timing",
          "_assess_cognitive_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import CognitiveReasoner",
          "export": "__all__.append('CognitiveReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 500,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import CognitiveAwarenessModule",
          "export": "__all__.append('CognitiveAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "DastAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/das_awareness_engine.py",
        "line_number": 547,
        "methods": [
          "__init__",
          "_setup_logging",
          "_initialize_modules",
          "process_awareness",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .das_awareness_engine import DastAwarenessEngine",
          "export": "__all__.append('DastAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserProfile",
        "type": "dataclass",
        "file_path": "orchestration/brain/dynamic_adaptive_dashboard.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .dynamic_adaptive_dashboard import UserProfile",
          "export": "__all__.append('UserProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "GDPRLegalBasis",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import GDPRLegalBasis",
          "export": "__all__.append('GDPRLegalBasis')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIRiskLevel",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import AIRiskLevel",
          "export": "__all__.append('AIRiskLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStatus",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import ComplianceStatus",
          "export": "__all__.append('ComplianceStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataSubjectRights",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import DataSubjectRights",
          "export": "__all__.append('DataSubjectRights')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUConfig",
          "export": "__all__.append('EUConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataProcessingRecord",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 172,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import DataProcessingRecord",
          "export": "__all__.append('DataProcessingRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 188,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUAwarenessInput",
          "export": "__all__.append('EUAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUAwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 214,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUAwarenessOutput",
          "export": "__all__.append('EUAwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUReasoner",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 246,
        "methods": [
          "process",
          "explain_decision",
          "detect_bias",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUReasoner",
          "export": "__all__.append('EUReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 267,
        "methods": [
          "__init__",
          "__call__",
          "evaluate_eu_compliance",
          "_get_module_type",
          "generate_eu_recommendations",
          "_setup_gdpr_controls",
          "_setup_ai_act_compliance",
          "_validate_gdpr_compliance",
          "_determine_compliance_status",
          "_extract_reasoning_steps",
          "_assess_data_accuracy",
          "_check_retention_compliance",
          "_get_risk_mitigations",
          "_build_audit_trail",
          "_trace_data_lineage",
          "_compute_quality_metrics",
          "_apply_data_minimization",
          "_handle_processing_error"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUAwarenessModule",
          "export": "__all__.append('EUAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUEnvironmentalReasoner",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 532,
        "methods": [
          "process",
          "explain_decision",
          "detect_bias",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUEnvironmentalReasoner",
          "export": "__all__.append('EUEnvironmentalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUEnvironmentalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 574,
        "methods": [
          "_get_module_type",
          "evaluate_eu_compliance",
          "generate_eu_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUEnvironmentalAwarenessModule",
          "export": "__all__.append('EUEnvironmentalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EUAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/eu_awareness_engine.py",
        "line_number": 614,
        "methods": [
          "__init__",
          "_setup_eu_logging",
          "_initialize_modules",
          "_setup_gdpr_registry",
          "process_awareness",
          "exercise_data_subject_rights",
          "_record_processing_activity",
          "_handle_access_request",
          "_handle_erasure_request",
          "_handle_rectification_request",
          "_handle_portability_request",
          "get_compliance_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_awareness_engine import EUAwarenessEngine",
          "export": "__all__.append('EUAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessCore",
        "type": "class",
        "file_path": "orchestration/brain/consciousness.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "awaken",
          "evolve_consciousness",
          "_evolve_to",
          "register_process",
          "unregister_process",
          "get_consciousness_context",
          "get_state_info",
          "_can_evolve",
          "get_evolution_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import ConsciousnessCore",
          "export": "__all__.append('ConsciousnessCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "DecisionTrace",
        "type": "class",
        "file_path": "orchestration/brain/eu_ai_transparency.py",
        "line_number": 57,
        "methods": [
          "__init__",
          "add_reasoning_step",
          "add_data_influence",
          "add_alternative_considered",
          "add_confidence_factor",
          "add_safety_check",
          "add_bias_consideration",
          "finalize_decision",
          "_log_to_transparency_system",
          "get_user_explanation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_ai_transparency import DecisionTrace",
          "export": "__all__.append('DecisionTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "TransparencyOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/eu_ai_transparency.py",
        "line_number": 204,
        "methods": [
          "__init__",
          "start_decision_trace",
          "get_trace",
          "complete_trace",
          "get_transparency_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .eu_ai_transparency import TransparencyOrchestrator",
          "export": "__all__.append('TransparencyOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchType",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchType",
          "export": "__all__.append('ResearchType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperimentalTechnique",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 101,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ExperimentalTechnique",
          "export": "__all__.append('ExperimentalTechnique')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchEthicsLevel",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchEthicsLevel",
          "export": "__all__.append('ResearchEthicsLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataSharingLevel",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import DataSharingLevel",
          "export": "__all__.append('DataSharingLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchPhase",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 132,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchPhase",
          "export": "__all__.append('ResearchPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 144,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchConfig",
          "export": "__all__.append('ResearchConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 186,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchAwarenessInput",
          "export": "__all__.append('ResearchAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchAwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 240,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchAwarenessOutput",
          "export": "__all__.append('ResearchAwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicReasoner",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 354,
        "methods": [
          "__init__",
          "process",
          "_detect_patterns",
          "_apply_symbolic_rules",
          "_identify_emergent_properties"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import BioSymbolicReasoner",
          "export": "__all__.append('BioSymbolicReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmIntelligenceCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 411,
        "methods": [
          "__init__",
          "process",
          "_update_swarm",
          "_calculate_convergence",
          "_measure_collective_performance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import SwarmIntelligenceCoordinator",
          "export": "__all__.append('SwarmIntelligenceCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchAwarenessReasoner",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 458,
        "methods": [
          "__init__",
          "process",
          "_core_research_processing",
          "_advanced_analytics",
          "_calculate_innovation_metrics",
          "_calculate_exploration_efficiency",
          "_generate_research_insights",
          "_update_learning_progress"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchAwarenessReasoner",
          "export": "__all__.append('ResearchAwarenessReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "ResearchAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/research_awareness_engine.py",
        "line_number": 648,
        "methods": [
          "__init__",
          "conduct_research",
          "_validate_research_ethics",
          "_build_research_output",
          "_assess_publication_readiness",
          "_generate_peer_review_suggestions",
          "_update_research_tracking",
          "get_research_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .research_awareness_engine import ResearchAwarenessEngine",
          "export": "__all__.append('ResearchAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "NotificationPriority",
        "type": "class",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .autonomous_github_manager import NotificationPriority",
          "export": "__all__.append('NotificationPriority')"
        }
      ]
    },
    {
      "entity": {
        "name": "GitHubNotification",
        "type": "dataclass",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .autonomous_github_manager import GitHubNotification",
          "export": "__all__.append('GitHubNotification')"
        }
      ]
    },
    {
      "entity": {
        "name": "BatchFixResult",
        "type": "dataclass",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .autonomous_github_manager import BatchFixResult",
          "export": "__all__.append('BatchFixResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdvancedAutonomousGitHubManager",
        "type": "class",
        "file_path": "orchestration/brain/autonomous_github_manager.py",
        "line_number": 70,
        "methods": [
          "__init__",
          "fetch_all_notifications",
          "parse_notification",
          "analyze_notification_priority",
          "estimate_fix_cost",
          "prioritize_notifications",
          "batch_process_fixes",
          "process_notification_batch",
          "attempt_autonomous_fix",
          "determine_fix_strategy",
          "execute_fix_strategy",
          "create_workflow_fix_pr",
          "create_security_fix_pr",
          "create_dependency_update_pr",
          "create_general_fix_pr",
          "generate_comprehensive_report",
          "save_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .autonomous_github_manager import AdvancedAutonomousGitHubManager",
          "export": "__all__.append('AdvancedAutonomousGitHubManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('advancedautonomousgithubmanager', AdvancedAutonomousGitHubManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStatus",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import ComplianceStatus",
          "export": "__all__.append('ComplianceStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessType",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import AwarenessType",
          "export": "__all__.append('AwarenessType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import AwarenessInput",
          "export": "__all__.append('AwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import AwarenessOutput",
          "export": "__all__.append('AwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 117,
        "methods": [
          "__init__",
          "__call__",
          "evaluate_alignment",
          "_get_module_type",
          "generate_recommendations",
          "calculate_sustainability_impact",
          "_compliance_status",
          "_identify_risk_factors",
          "_generate_quantum_signature",
          "_persist_to_store"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import AwarenessModule",
          "export": "__all__.append('AwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 249,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EnvironmentalAwarenessInput",
          "export": "__all__.append('EnvironmentalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedEnvReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 260,
        "methods": [
          "process",
          "get_confidence",
          "_calculate_sustainability_metrics",
          "_identify_optimization_opportunities"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EnhancedEnvReasoner",
          "export": "__all__.append('EnhancedEnvReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 429,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EnvironmentalAwarenessModule",
          "export": "__all__.append('EnvironmentalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 507,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import CognitiveAwarenessInput",
          "export": "__all__.append('CognitiveAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedCognitiveReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 518,
        "methods": [
          "process",
          "get_confidence",
          "_calculate_meta_learning",
          "_assess_self_awareness",
          "_calculate_optimal_timing",
          "_assess_cognitive_state",
          "_recommend_cognitive_strategies",
          "_forecast_productivity",
          "_estimate_time_to_peak"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EnhancedCognitiveReasoner",
          "export": "__all__.append('EnhancedCognitiveReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 704,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import CognitiveAwarenessModule",
          "export": "__all__.append('CognitiveAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 805,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EmotionalAwarenessInput",
          "export": "__all__.append('EmotionalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedEmotionalReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 817,
        "methods": [
          "process",
          "get_confidence",
          "_calculate_emotional_balance",
          "_assess_emotional_regulation",
          "_generate_comprehensive_personality_insights",
          "_create_advanced_widget_customization",
          "_select_color_scheme",
          "_determine_interaction_style",
          "_recommend_adaptive_features",
          "_suggest_accessibility_adjustments",
          "_calculate_emotional_resilience",
          "_assess_social_readiness",
          "_generate_social_interaction_recommendations",
          "_identify_emotional_growth_opportunities",
          "_analyze_emotional_triggers",
          "_forecast_mood_trajectory",
          "_recommend_mood_interventions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EnhancedEmotionalReasoner",
          "export": "__all__.append('EnhancedEmotionalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 1174,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import EmotionalAwarenessModule",
          "export": "__all__.append('EmotionalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 1271,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import SocialAwarenessInput",
          "export": "__all__.append('SocialAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 1279,
        "methods": [
          "process",
          "_generate_social_recommendations",
          "_analyze_group_dynamics",
          "_optimize_communication_style",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import SocialReasoner",
          "export": "__all__.append('SocialReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 1312,
        "methods": [
          "_get_module_type",
          "evaluate_alignment"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import SocialAwarenessModule",
          "export": "__all__.append('SocialAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine_elevated.py",
        "line_number": 1326,
        "methods": [
          "__init__",
          "_setup_logging",
          "_initialize_modules",
          "process_awareness",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine_elevated import LukhasAwarenessEngine",
          "export": "__all__.append('LukhasAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKGDPRLawfulBasis",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKGDPRLawfulBasis",
          "export": "__all__.append('UKGDPRLawfulBasis')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataSubjectRights",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import DataSubjectRights",
          "export": "__all__.append('DataSubjectRights')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKDataCategory",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKDataCategory",
          "export": "__all__.append('UKDataCategory')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKTransferMechanism",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKTransferMechanism",
          "export": "__all__.append('UKTransferMechanism')"
        }
      ]
    },
    {
      "entity": {
        "name": "ICOEnforcementAction",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 100,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import ICOEnforcementAction",
          "export": "__all__.append('ICOEnforcementAction')"
        }
      ]
    },
    {
      "entity": {
        "name": "ChildrenProtectionLevel",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import ChildrenProtectionLevel",
          "export": "__all__.append('ChildrenProtectionLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKComplianceConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 117,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKComplianceConfig",
          "export": "__all__.append('UKComplianceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKInput",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 156,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKInput",
          "export": "__all__.append('UKInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKOutput",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 187,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKOutput",
          "export": "__all__.append('UKOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKPrivacyModule",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 245,
        "methods": [
          "__init__",
          "process",
          "_assess_uk_gdpr_compliance",
          "_assess_ico_accountability",
          "_assess_data_subject_rights",
          "_assess_transfer_compliance",
          "_assess_childrens_code",
          "_assess_sector_compliance",
          "_validate_lawful_basis",
          "_determine_data_category",
          "_calculate_sar_deadline",
          "_get_accountability_measures",
          "_get_automated_safeguards",
          "_assess_enforcement_risk",
          "_is_portable_data"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKPrivacyModule",
          "export": "__all__.append('UKPrivacyModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "UKAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/uk_awareness_engine.py",
        "line_number": 530,
        "methods": [
          "__init__",
          "process_awareness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .uk_awareness_engine import UKAwarenessEngine",
          "export": "__all__.append('UKAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasLLM",
        "type": "class",
        "file_path": "orchestration/brain/llm_engine.py",
        "line_number": 12,
        "methods": [
          "__init__",
          "generate",
          "batch_generate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .llm_engine import LucasLLM",
          "export": "__all__.append('LucasLLM')"
        }
      ]
    },
    {
      "entity": {
        "name": "Repository",
        "type": "dataclass",
        "file_path": "orchestration/brain/github_vulnerability_manager.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .github_vulnerability_manager import Repository",
          "export": "__all__.append('Repository')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASBrainBridge",
        "type": "class",
        "file_path": "orchestration/brain/integration_bridge.py",
        "line_number": 10,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .integration_bridge import LUKHASBrainBridge",
          "export": "__all__.append('LUKHASBrainBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafeSubprocessExecutor",
        "type": "class",
        "file_path": "orchestration/brain/safe_subprocess_executor.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "_create_isolated_env",
          "safe_run",
          "safe_python_run",
          "safe_git_run"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .safe_subprocess_executor import SafeSubprocessExecutor",
          "export": "__all__.append('SafeSubprocessExecutor')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIBot",
        "type": "class",
        "file_path": "orchestration/brain/core_system.py",
        "line_number": 124,
        "methods": [
          "__init__",
          "_initialize_advanced_components",
          "_initialize_basic_components",
          "get_status",
          "_get_active_components",
          "_update_conversation_history",
          "_update_learning_memory"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .core_system import AGIBot",
          "export": "__all__.append('AGIBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseSynchronizer",
        "type": "class",
        "file_path": "orchestration/brain/unified_collapse_system.py",
        "line_number": 128,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .unified_collapse_system import CollapseSynchronizer",
          "export": "__all__.append('CollapseSynchronizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveAGISystem",
        "type": "class",
        "file_path": "orchestration/brain/main_node.py",
        "line_number": 48,
        "methods": [
          "__init__",
          "init_components",
          "register_event_handlers",
          "_calculate_duration",
          "_get_memory_usage",
          "_save_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .main_node import AdaptiveAGISystem",
          "export": "__all__.append('AdaptiveAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "IssueType",
        "type": "class",
        "file_path": "orchestration/brain/lambda_bot_batch_processor.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .lambda_bot_batch_processor import IssueType",
          "export": "__all__.append('IssueType')"
        }
      ]
    },
    {
      "entity": {
        "name": "_StubColony",
        "type": "class",
        "file_path": "orchestration/brain/colony_coordinator.py",
        "line_number": 8,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .colony_coordinator import _StubColony",
          "export": "__all__.append('_StubColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainColonyCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/colony_coordinator.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "_create_perception_colony",
          "_create_action_colony",
          "_create_emotion_colony"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .colony_coordinator import BrainColonyCoordinator",
          "export": "__all__.append('BrainColonyCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AutonomousFixResult",
        "type": "dataclass",
        "file_path": "orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .lambdabot_autonomous_workflow_fixer import AutonomousFixResult",
          "export": "__all__.append('AutonomousFixResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotAutonomousWorkflowFixer",
        "type": "class",
        "file_path": "orchestration/brain/lambdabot_autonomous_workflow_fixer.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "analyze_notification_patterns",
          "autonomous_fix_github_notifications",
          "execute_autonomous_fix",
          "_fix_workflow_failure",
          "_fix_symbol_validation_issues",
          "_fix_critical_path_issues",
          "_fix_dependency_issues",
          "_fix_pre_commit_issues",
          "_fix_generic_ci_issues",
          "_fix_dependency_vulnerability",
          "_fix_generic_issue",
          "_create_simulated_pr",
          "_generate_workflow_fix_description",
          "save_autonomous_fix_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .lambdabot_autonomous_workflow_fixer import \u039bBotAutonomousWorkflowFixer",
          "export": "__all__.append('\u039bBotAutonomousWorkflowFixer')"
        }
      ]
    },
    {
      "entity": {
        "name": "FullyAutonomousAGI",
        "type": "class",
        "file_path": "orchestration/brain/autonomous_system.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "run_autonomous_cycle",
          "_process_github_notifications_batch",
          "_fetch_github_notifications",
          "_notification_to_batchable_issue",
          "run_fully_autonomous",
          "_generate_final_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .autonomous_system import FullyAutonomousAGI",
          "export": "__all__.append('FullyAutonomousAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseSynchronizer",
        "type": "class",
        "file_path": "orchestration/brain/brain_collapse_manager.py",
        "line_number": 163,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .brain_collapse_manager import CollapseSynchronizer",
          "export": "__all__.append('CollapseSynchronizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAGIConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/orchestrator.py",
        "line_number": 103,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import LukhasAGIConfig",
          "export": "__all__.append('LukhasAGIConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasProcessingStage",
        "type": "class",
        "file_path": "orchestration/brain/orchestrator.py",
        "line_number": 136,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import LukhasProcessingStage",
          "export": "__all__.append('LukhasProcessingStage')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasProcessingContext",
        "type": "dataclass",
        "file_path": "orchestration/brain/orchestrator.py",
        "line_number": 150,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import LukhasProcessingContext",
          "export": "__all__.append('LukhasProcessingContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAGIOrchestrator",
        "type": "class",
        "file_path": "orchestration/brain/orchestrator.py",
        "line_number": 160,
        "methods": [
          "__init__",
          "_identify_knowledge_gaps",
          "_calculate_processing_quality"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import LukhasAGIOrchestrator",
          "export": "__all__.append('LukhasAGIOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftPatternAnalyzer",
        "type": "class",
        "file_path": "orchestration/brain/drift_pattern_analyzer.py",
        "line_number": 23,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .drift_pattern_analyzer import DriftPatternAnalyzer",
          "export": "__all__.append('DriftPatternAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "FixStrategy",
        "type": "dataclass",
        "file_path": "orchestration/brain/lambdabot_autonomous_fixer.py",
        "line_number": 41,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .lambdabot_autonomous_fixer import FixStrategy",
          "export": "__all__.append('FixStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "PRCreationResult",
        "type": "dataclass",
        "file_path": "orchestration/brain/lambdabot_autonomous_fixer.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .lambdabot_autonomous_fixer import PRCreationResult",
          "export": "__all__.append('PRCreationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceStatus",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import ComplianceStatus",
          "export": "__all__.append('ComplianceStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessType",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import AwarenessType",
          "export": "__all__.append('AwarenessType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import AwarenessInput",
          "export": "__all__.append('AwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import AwarenessOutput",
          "export": "__all__.append('AwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 117,
        "methods": [
          "__init__",
          "__call__",
          "evaluate_alignment",
          "_get_module_type",
          "generate_recommendations",
          "calculate_sustainability_impact",
          "_compliance_status",
          "_identify_risk_factors",
          "_generate_quantum_signature",
          "_persist_to_store"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import AwarenessModule",
          "export": "__all__.append('AwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 249,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EnvironmentalAwarenessInput",
          "export": "__all__.append('EnvironmentalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedEnvReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 260,
        "methods": [
          "process",
          "get_confidence",
          "_calculate_sustainability_metrics",
          "_identify_optimization_opportunities"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EnhancedEnvReasoner",
          "export": "__all__.append('EnhancedEnvReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnvironmentalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 429,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EnvironmentalAwarenessModule",
          "export": "__all__.append('EnvironmentalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 505,
        "methods": [
          "process",
          "_generate_cognitive_recommendations",
          "process_cognitive_load",
          "analyze_decision_patterns",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import CognitiveReasoner",
          "export": "__all__.append('CognitiveReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 611,
        "methods": [
          "process",
          "_predict_mood_trend",
          "process_emotional_state",
          "determine_widget_animation",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EmotionalReasoner",
          "export": "__all__.append('EmotionalReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialReasoner",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 743,
        "methods": [
          "process",
          "analyze_social_context",
          "_generate_social_recommendations",
          "get_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import SocialReasoner",
          "export": "__all__.append('SocialReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 853,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import CognitiveAwarenessInput",
          "export": "__all__.append('CognitiveAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 864,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import CognitiveAwarenessModule",
          "export": "__all__.append('CognitiveAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 965,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EmotionalAwarenessInput",
          "export": "__all__.append('EmotionalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 977,
        "methods": [
          "_get_module_type",
          "evaluate_alignment",
          "generate_recommendations",
          "calculate_sustainability_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import EmotionalAwarenessModule",
          "export": "__all__.append('EmotionalAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 1075,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import SocialAwarenessInput",
          "export": "__all__.append('SocialAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "SocialAwarenessModule",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 1083,
        "methods": [
          "_get_module_type",
          "evaluate_alignment"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import SocialAwarenessModule",
          "export": "__all__.append('SocialAwarenessModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/awareness_engine.py",
        "line_number": 1097,
        "methods": [
          "__init__",
          "_setup_logging",
          "_initialize_modules",
          "process_awareness",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .awareness_engine import LukhasAwarenessEngine",
          "export": "__all__.append('LukhasAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianPrivacyPrinciple",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianPrivacyPrinciple",
          "export": "__all__.append('AustralianPrivacyPrinciple')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsumerDataRight",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import ConsumerDataRight",
          "export": "__all__.append('ConsumerDataRight')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianJurisdiction",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianJurisdiction",
          "export": "__all__.append('AustralianJurisdiction')"
        }
      ]
    },
    {
      "entity": {
        "name": "DataBreachSeverity",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 92,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import DataBreachSeverity",
          "export": "__all__.append('DataBreachSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "CrossBorderApproval",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 99,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import CrossBorderApproval",
          "export": "__all__.append('CrossBorderApproval')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianComplianceConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianComplianceConfig",
          "export": "__all__.append('AustralianComplianceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianInput",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 147,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianInput",
          "export": "__all__.append('AustralianInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianOutput",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 180,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianOutput",
          "export": "__all__.append('AustralianOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianPrivacyModule",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 241,
        "methods": [
          "__init__",
          "_get_module_type",
          "_evaluate_jurisdictional_compliance",
          "process",
          "_assess_all_apps",
          "_assess_app8_compliance",
          "_assess_cdr_compliance",
          "_assess_breach_risk",
          "_assess_state_territory_compliance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianPrivacyModule",
          "export": "__all__.append('AustralianPrivacyModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "AustralianAwarenessEngine",
        "type": "class",
        "file_path": "orchestration/brain/australian_awareness_engine.py",
        "line_number": 467,
        "methods": [
          "__init__",
          "process_awareness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .australian_awareness_engine import AustralianAwarenessEngine",
          "export": "__all__.append('AustralianAwarenessEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityPR",
        "type": "dataclass",
        "file_path": "orchestration/brain/pr_security_review_task.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .pr_security_review_task import SecurityPR",
          "export": "__all__.append('SecurityPR')"
        }
      ]
    },
    {
      "entity": {
        "name": "PRSecurityReviewTask",
        "type": "class",
        "file_path": "orchestration/brain/pr_security_review_task.py",
        "line_number": 52,
        "methods": [
          "__init__",
          "get_all_repositories",
          "get_unreviewed_prs",
          "analyze_pr_security",
          "add_security_review",
          "auto_fix_security_issues",
          "process_all_repositories",
          "generate_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .pr_security_review_task import PRSecurityReviewTask",
          "export": "__all__.append('PRSecurityReviewTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExperienceManager",
        "type": "class",
        "file_path": "orchestration/brain/experience_manager.py",
        "line_number": 12,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .experience_manager import ExperienceManager",
          "export": "__all__.append('ExperienceManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('experiencemanager', ExperienceManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "SpecializedBrainCore",
        "type": "class",
        "file_path": "orchestration/brain/MultiBrainSymphony.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "sync_with_orchestra",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .MultiBrainSymphony import SpecializedBrainCore",
          "export": "__all__.append('SpecializedBrainCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "InstitutionalComplianceLevel",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 131,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import InstitutionalComplianceLevel",
          "export": "__all__.append('InstitutionalComplianceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalRegulation",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 139,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import GlobalRegulation",
          "export": "__all__.append('GlobalRegulation')"
        }
      ]
    },
    {
      "entity": {
        "name": "InstitutionalCertification",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 204,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import InstitutionalCertification",
          "export": "__all__.append('InstitutionalCertification')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalInstitutionalConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 222,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import GlobalInstitutionalConfig",
          "export": "__all__.append('GlobalInstitutionalConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "InstitutionalAwarenessInput",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 315,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import InstitutionalAwarenessInput",
          "export": "__all__.append('InstitutionalAwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "InstitutionalAwarenessOutput",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 386,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import InstitutionalAwarenessOutput",
          "export": "__all__.append('InstitutionalAwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "InstitutionalCompliantReasoner",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 509,
        "methods": [
          "__init__",
          "_initialize_compliance_frameworks",
          "process",
          "_assess_jurisdiction_compliance",
          "_assess_gdpr_compliance",
          "_assess_eu_ai_act_compliance",
          "_assess_ccpa_compliance",
          "_assess_hipaa_compliance",
          "_assess_sox_compliance",
          "_assess_fedramp_compliance",
          "_assess_ai_governance",
          "_assess_data_protection",
          "_assess_comprehensive_risk",
          "_calculate_overall_compliance_score",
          "_assess_institutional_readiness",
          "_init_gdpr_framework",
          "_init_eu_ai_act_framework",
          "_init_ccpa_framework",
          "_init_hipaa_framework",
          "_init_sox_framework",
          "_init_fedramp_framework",
          "_init_pipeda_framework",
          "_init_cppa_framework",
          "_init_uk_gdpr_framework",
          "_init_au_privacy_framework"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import InstitutionalCompliantReasoner",
          "export": "__all__.append('InstitutionalCompliantReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalInstitutionalCompliantEngine",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalCompliantEngine.py",
        "line_number": 837,
        "methods": [
          "__init__",
          "_initialize_institutional_compliance",
          "process_institutional_awareness",
          "_build_institutional_output",
          "_determine_institutional_compliance_level",
          "_map_all_jurisdiction_rights",
          "_generate_compliance_recommendations",
          "_validate_institutional_compliance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalCompliantEngine import GlobalInstitutionalCompliantEngine",
          "export": "__all__.append('GlobalInstitutionalCompliantEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedAGIBot",
        "type": "class",
        "file_path": "orchestration/brain/main_bot.py",
        "line_number": 39,
        "methods": [
          "__init__",
          "_generate_safe_response",
          "_update_conversation_history",
          "_update_performance_metrics",
          "get_agi_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .main_bot import EnhancedAGIBot",
          "export": "__all__.append('EnhancedAGIBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockVoiceModulator",
        "type": "class",
        "file_path": "orchestration/brain/demo.py",
        "line_number": 112,
        "methods": [
          "determine_parameters",
          "modulate_voice"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .demo import MockVoiceModulator",
          "export": "__all__.append('MockVoiceModulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockSafetyGuard",
        "type": "class",
        "file_path": "orchestration/brain/demo.py",
        "line_number": 126,
        "methods": [
          "validate_response",
          "validate_voice_parameters"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .demo import MockSafetyGuard",
          "export": "__all__.append('MockSafetyGuard')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockComplianceEngine",
        "type": "class",
        "file_path": "orchestration/brain/demo.py",
        "line_number": 144,
        "methods": [
          "anonymize_metadata",
          "check_voice_data_compliance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .demo import MockComplianceEngine",
          "export": "__all__.append('MockComplianceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceMemoriaLogger",
        "type": "class",
        "file_path": "orchestration/brain/trace_memoria_logger.py",
        "line_number": 34,
        "methods": [
          "__init__",
          "_ensure_log_directories",
          "log_trace",
          "_level_to_name",
          "_write_trace",
          "_cache_trace",
          "get_recent_traces",
          "read_traces",
          "log_system_event",
          "log_core_event",
          "log_symbolic",
          "log_emotional",
          "log_ethical",
          "log_interaction",
          "log_dream",
          "log_reflection",
          "get_trace_by_id",
          "close"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .trace_memoria_logger import TraceMemoriaLogger",
          "export": "__all__.append('TraceMemoriaLogger')"
        }
      ]
    },
    {
      "entity": {
        "name": "TraceLevel",
        "type": "class",
        "file_path": "orchestration/brain/trace_memoria_logger.py",
        "line_number": 42,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .trace_memoria_logger import TraceLevel",
          "export": "__all__.append('TraceLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "BudgetDecision",
        "type": "dataclass",
        "file_path": "orchestration/brain/token_budget_controller.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .token_budget_controller import BudgetDecision",
          "export": "__all__.append('BudgetDecision')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseChainSimulator",
        "type": "class",
        "file_path": "orchestration/brain/collapse_chain_simulator.py",
        "line_number": 26,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collapse_chain_simulator import CollapseChainSimulator",
          "export": "__all__.append('CollapseChainSimulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentTier",
        "type": "class",
        "file_path": "orchestration/brain/collaborative_ai_agent_system.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collaborative_ai_agent_system import AgentTier",
          "export": "__all__.append('AgentTier')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsolidationPhase",
        "type": "class",
        "file_path": "orchestration/brain/collaborative_ai_agent_system.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collaborative_ai_agent_system import ConsolidationPhase",
          "export": "__all__.append('ConsolidationPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentCapabilities",
        "type": "dataclass",
        "file_path": "orchestration/brain/collaborative_ai_agent_system.py",
        "line_number": 36,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collaborative_ai_agent_system import AgentCapabilities",
          "export": "__all__.append('AgentCapabilities')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAIAgent",
        "type": "class",
        "file_path": "orchestration/brain/collaborative_ai_agent_system.py",
        "line_number": 45,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collaborative_ai_agent_system import LukhasAIAgent",
          "export": "__all__.append('LukhasAIAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasAIAgentTeam",
        "type": "class",
        "file_path": "orchestration/brain/collaborative_ai_agent_system.py",
        "line_number": 73,
        "methods": [
          "__init__",
          "_initialize_agent_team",
          "get_team_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .collaborative_ai_agent_system import LukhasAIAgentTeam",
          "export": "__all__.append('LukhasAIAgentTeam')"
        }
      ]
    },
    {
      "entity": {
        "name": "EntropyProbe",
        "type": "class",
        "file_path": "orchestration/brain/entropy_probe.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "calculate_entropy"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .entropy_probe import EntropyProbe",
          "export": "__all__.append('EntropyProbe')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIComplianceManager",
        "type": "class",
        "file_path": "orchestration/brain/ai_compliance.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_transparency_report",
          "_get_processing_purposes"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .ai_compliance import AIComplianceManager",
          "export": "__all__.append('AIComplianceManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('aicompliancemanager', AIComplianceManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "RegulationType",
        "type": "class",
        "file_path": "orchestration/brain/GlobalInstitutionalFramework.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalFramework import RegulationType",
          "export": "__all__.append('RegulationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalComplianceConfig",
        "type": "dataclass",
        "file_path": "orchestration/brain/GlobalInstitutionalFramework.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/__init__.py",
          "action": "add_export",
          "code": "from .GlobalInstitutionalFramework import GlobalComplianceConfig",
          "export": "__all__.append('GlobalComplianceConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseNode",
        "type": "class",
        "file_path": "orchestration/brain/mesh/collapse_mesh.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "add_neighbor",
          "heartbeat"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .collapse_mesh import CollapseNode",
          "export": "__all__.append('CollapseNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeStatus",
        "type": "class",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import NodeStatus",
          "export": "__all__.append('NodeStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveTask",
        "type": "dataclass",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import CognitiveTask",
          "export": "__all__.append('CognitiveTask')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeCapability",
        "type": "dataclass",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 125,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import NodeCapability",
          "export": "__all__.append('NodeCapability')"
        }
      ]
    },
    {
      "entity": {
        "name": "NodeMetrics",
        "type": "dataclass",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 136,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import NodeMetrics",
          "export": "__all__.append('NodeMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveNode",
        "type": "class",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 148,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import CognitiveNode",
          "export": "__all__.append('CognitiveNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "CognitiveMeshCoordinator",
        "type": "class",
        "file_path": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "line_number": 351,
        "methods": [
          "__init__",
          "get_mesh_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/mesh/__init__.py",
          "action": "add_export",
          "code": "from .cognitive_mesh_coordinator import CognitiveMeshCoordinator",
          "export": "__all__.append('CognitiveMeshCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryHelixVisualizer",
        "type": "class",
        "file_path": "orchestration/brain/visualization/memory_helix_visualizer.py",
        "line_number": 34,
        "methods": [
          "__init__",
          "get_memory_coordinates",
          "get_authorized_memories",
          "visualize_memory_helix",
          "create_interactive_visualization",
          "update_memory_links"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/visualization/__init__.py",
          "action": "add_export",
          "code": "from .memory_helix_visualizer import MemoryHelixVisualizer",
          "export": "__all__.append('MemoryHelixVisualizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "UseClientDefault",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import UseClientDefault",
          "export": "__all__.append('UseClientDefault')"
        }
      ]
    },
    {
      "entity": {
        "name": "ClientState",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 133,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import ClientState",
          "export": "__all__.append('ClientState')"
        }
      ]
    },
    {
      "entity": {
        "name": "BoundSyncStream",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 147,
        "methods": [
          "__init__",
          "__iter__",
          "close"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import BoundSyncStream",
          "export": "__all__.append('BoundSyncStream')"
        }
      ]
    },
    {
      "entity": {
        "name": "BoundAsyncStream",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 170,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import BoundAsyncStream",
          "export": "__all__.append('BoundAsyncStream')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseClient",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 196,
        "methods": [
          "__init__",
          "is_closed",
          "trust_env",
          "_enforce_trailing_slash",
          "_get_proxy_map",
          "timeout",
          "timeout",
          "event_hooks",
          "event_hooks",
          "auth",
          "auth",
          "base_url",
          "base_url",
          "headers",
          "headers",
          "cookies",
          "cookies",
          "params",
          "params",
          "build_request",
          "_merge_url",
          "_merge_cookies",
          "_merge_headers",
          "_merge_queryparams",
          "_build_auth",
          "_build_request_auth",
          "_build_redirect_request",
          "_redirect_method",
          "_redirect_url",
          "_redirect_headers",
          "_redirect_stream",
          "_set_timeout"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import BaseClient",
          "export": "__all__.append('BaseClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "AsyncClient",
        "type": "class",
        "file_path": "orchestration/brain/net/client.py",
        "line_number": 1315,
        "methods": [
          "__init__",
          "_init_transport",
          "_init_proxy_transport",
          "_transport_for_url"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .client import AsyncClient",
          "export": "__all__.append('AsyncClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "AsyncInferenceClient",
        "type": "class",
        "file_path": "orchestration/brain/net/async_client.py",
        "line_number": 114,
        "methods": [
          "__init__",
          "__repr__",
          "__del__",
          "_get_client_session",
          "chat"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .async_client import AsyncInferenceClient",
          "export": "__all__.append('AsyncInferenceClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "_ProxyClient",
        "type": "class",
        "file_path": "orchestration/brain/net/async_client.py",
        "line_number": 3618,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .async_client import _ProxyClient",
          "export": "__all__.append('_ProxyClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProxyClientChat",
        "type": "class",
        "file_path": "orchestration/brain/net/async_client.py",
        "line_number": 3625,
        "methods": [
          "completions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .async_client import ProxyClientChat",
          "export": "__all__.append('ProxyClientChat')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProxyClientChatCompletions",
        "type": "class",
        "file_path": "orchestration/brain/net/async_client.py",
        "line_number": 3633,
        "methods": [
          "create"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/net/__init__.py",
          "action": "add_export",
          "code": "from .async_client import ProxyClientChatCompletions",
          "export": "__all__.append('ProxyClientChatCompletions')"
        }
      ]
    },
    {
      "entity": {
        "name": "AzureFreeStrategy",
        "type": "class",
        "file_path": "orchestration/brain/core/azure_free_tier_strategy.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "get_priority_services_for_agi",
          "create_12_month_roadmap",
          "calculate_cost_savings",
          "get_deployment_priorities",
          "show_optimization_tips"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .azure_free_tier_strategy import AzureFreeStrategy",
          "export": "__all__.append('AzureFreeStrategy')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginTier",
        "type": "class",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginTier",
          "export": "__all__.append('PluginTier')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginState",
        "type": "class",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginState",
          "export": "__all__.append('PluginState')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginCapabilities",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 113,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginCapabilities",
          "export": "__all__.append('PluginCapabilities')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginPricing",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 133,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginPricing",
          "export": "__all__.append('PluginPricing')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginDependencies",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 150,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginDependencies",
          "export": "__all__.append('PluginDependencies')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasSystemState",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 255,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import LucasSystemState",
          "export": "__all__.append('LucasSystemState')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserSession",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 271,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import UserSession",
          "export": "__all__.append('UserSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginExecutionContext",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 310,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginExecutionContext",
          "export": "__all__.append('PluginExecutionContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationRule",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 327,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import ValidationRule",
          "export": "__all__.append('ValidationRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginValidationSchema",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 337,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginValidationSchema",
          "export": "__all__.append('PluginValidationSchema')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginLoadError",
        "type": "class",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 365,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginLoadError",
          "export": "__all__.append('PluginLoadError')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginExecutionError",
        "type": "class",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 375,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginExecutionError",
          "export": "__all__.append('PluginExecutionError')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginComplianceError",
        "type": "class",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 380,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginComplianceError",
          "export": "__all__.append('PluginComplianceError')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessMapping",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 411,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import ConsciousnessMapping",
          "export": "__all__.append('ConsciousnessMapping')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginMessage",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 427,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginMessage",
          "export": "__all__.append('PluginMessage')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginResponse",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 447,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import PluginResponse",
          "export": "__all__.append('PluginResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "LoadedPlugin",
        "type": "dataclass",
        "file_path": "orchestration/brain/core/types.py",
        "line_number": 514,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .types import LoadedPlugin",
          "export": "__all__.append('LoadedPlugin')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhASAzureOpenAI",
        "type": "class",
        "file_path": "orchestration/brain/core/azure_openai_client.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "_load_secure_config",
          "_get_keychain_value",
          "_initialize_client",
          "test_connection",
          "chat_completion",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .azure_openai_client import LukhASAzureOpenAI",
          "export": "__all__.append('LukhASAzureOpenAI')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemMode",
        "type": "class",
        "file_path": "orchestration/brain/core/orchestrator.py",
        "line_number": 57,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import SystemMode",
          "export": "__all__.append('SystemMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingStage",
        "type": "class",
        "file_path": "orchestration/brain/core/orchestrator.py",
        "line_number": 66,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/core/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import ProcessingStage",
          "export": "__all__.append('ProcessingStage')"
        }
      ]
    },
    {
      "entity": {
        "name": "GoalManager",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 23,
        "methods": [
          "__init__",
          "add_goal",
          "prioritize_goals",
          "execute_goals"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import GoalManager",
          "export": "__all__.append('GoalManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('goalmanager', GoalManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "AgentCommunicator",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 43,
        "methods": [
          "__init__",
          "add_agent",
          "send_message",
          "receive_message"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import AgentCommunicator",
          "export": "__all__.append('AgentCommunicator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalEvaluator",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "add_rule",
          "evaluate_action"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import EthicalEvaluator",
          "export": "__all__.append('EthicalEvaluator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectiveLearning",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 77,
        "methods": [
          "__init__",
          "add_interaction",
          "evaluate_performance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import ReflectiveLearning",
          "export": "__all__.append('ReflectiveLearning')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfReflection",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 92,
        "methods": [
          "__init__",
          "add_log",
          "analyze_logs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import SelfReflection",
          "export": "__all__.append('SelfReflection')"
        }
      ]
    },
    {
      "entity": {
        "name": "DummyRule",
        "type": "class",
        "file_path": "orchestration/brain/spine/main_loop.py",
        "line_number": 134,
        "methods": [
          "evaluate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .main_loop import DummyRule",
          "export": "__all__.append('DummyRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicPatternEngine",
        "type": "class",
        "file_path": "orchestration/brain/spine/fold_engine.py",
        "line_number": 237,
        "methods": [
          "__init__",
          "register_pattern",
          "analyze_memory_fold",
          "_calculate_pattern_match",
          "_analyze_temporal_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/spine/__init__.py",
          "action": "add_export",
          "code": "from .fold_engine import SymbolicPatternEngine",
          "export": "__all__.append('SymbolicPatternEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedEmotionalProcessor",
        "type": "class",
        "file_path": "orchestration/brain/integration/brain_integration.py",
        "line_number": 84,
        "methods": [
          "__init__",
          "update_emotional_state",
          "_calculate_emotion_distance",
          "get_voice_modulation_params"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/integration/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration import EnhancedEmotionalProcessor",
          "export": "__all__.append('EnhancedEmotionalProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedMemorySystem",
        "type": "class",
        "file_path": "orchestration/brain/integration/brain_integration.py",
        "line_number": 188,
        "methods": [
          "__init__",
          "store_memory_with_emotion",
          "retrieve_with_emotional_context",
          "dream_consolidate_memories",
          "_generate_dream_associations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/integration/__init__.py",
          "action": "add_export",
          "code": "from .brain_integration import EnhancedMemorySystem",
          "export": "__all__.append('EnhancedMemorySystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamNarrationType",
        "type": "class",
        "file_path": "orchestration/brain/consciousness/dream_narrator.py",
        "line_number": 37,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_narrator import DreamNarrationType",
          "export": "__all__.append('DreamNarrationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamElement",
        "type": "dataclass",
        "file_path": "orchestration/brain/consciousness/dream_narrator.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_narrator import DreamElement",
          "export": "__all__.append('DreamElement')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSequence",
        "type": "dataclass",
        "file_path": "orchestration/brain/consciousness/dream_narrator.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_narrator import DreamSequence",
          "export": "__all__.append('DreamSequence')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamNarration",
        "type": "dataclass",
        "file_path": "orchestration/brain/consciousness/dream_narrator.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_narrator import DreamNarration",
          "export": "__all__.append('DreamNarration')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamNarrator",
        "type": "class",
        "file_path": "orchestration/brain/consciousness/dream_narrator.py",
        "line_number": 83,
        "methods": [
          "__init__",
          "_calculate_symbolic_coherence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/consciousness/__init__.py",
          "action": "add_export",
          "code": "from .dream_narrator import DreamNarrator",
          "export": "__all__.append('DreamNarrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "PredictionModel",
        "type": "class",
        "file_path": "orchestration/brain/prediction/predictive_resource_manager.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "add_data_point",
          "predict_next",
          "_calculate_trend"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .predictive_resource_manager import PredictionModel",
          "export": "__all__.append('PredictionModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorldModelType",
        "type": "class",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import WorldModelType",
          "export": "__all__.append('WorldModelType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimulationAccuracy",
        "type": "class",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import SimulationAccuracy",
          "export": "__all__.append('SimulationAccuracy')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorldState",
        "type": "dataclass",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import WorldState",
          "export": "__all__.append('WorldState')"
        }
      ]
    },
    {
      "entity": {
        "name": "PredictionResult",
        "type": "dataclass",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import PredictionResult",
          "export": "__all__.append('PredictionResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "PhysicsEngine",
        "type": "class",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 69,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import PhysicsEngine",
          "export": "__all__.append('PhysicsEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "TemporalDynamicsModel",
        "type": "class",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 121,
        "methods": [
          "__init__",
          "_calculate_entity_changes",
          "_calculate_temporal_correlation",
          "_calculate_linear_trend",
          "_calculate_temporal_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import TemporalDynamicsModel",
          "export": "__all__.append('TemporalDynamicsModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "WorldModels",
        "type": "class",
        "file_path": "orchestration/brain/prediction/world_models.py",
        "line_number": 328,
        "methods": [
          "__init__",
          "_setup_logging",
          "_calculate_simulation_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/prediction/__init__.py",
          "action": "add_export",
          "code": "from .world_models import WorldModels",
          "export": "__all__.append('WorldModels')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioInspiredAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/bio_adapter.py",
        "line_number": 19,
        "methods": [
          "__init__",
          "handle_message",
          "_configure_attention_gates",
          "_calculate_resource_need",
          "_generate_quantum_pattern"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .bio_adapter import BioInspiredAdapter",
          "export": "__all__.append('BioInspiredAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamEngineAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/dream_adapter.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "handle_message",
          "_handle_start_cycle",
          "_handle_stop_cycle",
          "_handle_get_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .dream_adapter import DreamEngineAdapter",
          "export": "__all__.append('DreamEngineAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "VoiceAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/voice_adapter.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "handle_message",
          "_handle_speak_request",
          "_handle_audio_input",
          "_handle_voice_config"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .voice_adapter import VoiceAdapter",
          "export": "__all__.append('VoiceAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "LegacyComponentAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "adapt_legacy_message",
          "register_legacy_handler",
          "_handle_message"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .legacy_adapter import LegacyComponentAdapter",
          "export": "__all__.append('LegacyComponentAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasCoreAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "line_number": 141,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .legacy_adapter import LucasCoreAdapter",
          "export": "__all__.append('LucasCoreAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainIntegrationAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/legacy_adapter.py",
        "line_number": 164,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .legacy_adapter import BrainIntegrationAdapter",
          "export": "__all__.append('BrainIntegrationAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntentNodeAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/intent_adapter.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "_compute_query_amplitude",
          "_compute_task_amplitude",
          "_compute_dialogue_amplitude",
          "_update_quantum_like_state",
          "_get_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .intent_adapter import IntentNodeAdapter",
          "export": "__all__.append('IntentNodeAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "BrainAdapter",
        "type": "class",
        "file_path": "orchestration/brain/unified_integration/adapters/brain_adapter.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "handle_message",
          "_handle_input_processing",
          "_handle_memory_consolidation",
          "_handle_dream_cycle"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/unified_integration/adapters/__init__.py",
          "action": "add_export",
          "code": "from .brain_adapter import BrainAdapter",
          "export": "__all__.append('BrainAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "CalibrationRecord",
        "type": "dataclass",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import CalibrationRecord",
          "export": "__all__.append('CalibrationRecord')"
        }
      ]
    },
    {
      "entity": {
        "name": "BayesianConfidenceEstimator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 58,
        "methods": [
          "__init__",
          "estimate_confidence",
          "_calculate_evidence_strength",
          "_get_prior_probability",
          "_calculate_likelihood",
          "_calculate_marginal_likelihood",
          "_generate_context_key",
          "update_beliefs"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import BayesianConfidenceEstimator",
          "export": "__all__.append('BayesianConfidenceEstimator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConfidenceEstimator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 174,
        "methods": [
          "__init__",
          "estimate_confidence",
          "_calculate_coherence_confidence",
          "_calculate_entanglement_confidence",
          "_calculate_superposition_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import QuantumConfidenceEstimator",
          "export": "__all__.append('QuantumConfidenceEstimator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicConfidenceEstimator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 225,
        "methods": [
          "__init__",
          "estimate_confidence",
          "_calculate_consistency_confidence",
          "_calculate_premise_confidence",
          "_calculate_completeness_confidence",
          "_detect_contradictions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import SymbolicConfidenceEstimator",
          "export": "__all__.append('SymbolicConfidenceEstimator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ContradictionDetector",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 292,
        "methods": [
          "find_contradictions",
          "_extract_statements",
          "_are_contradictory"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import ContradictionDetector",
          "export": "__all__.append('ContradictionDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalConfidenceEstimator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 353,
        "methods": [
          "__init__",
          "estimate_confidence",
          "_calculate_aesthetic_confidence",
          "_calculate_intuitive_confidence",
          "_calculate_empathy_confidence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import EmotionalConfidenceEstimator",
          "export": "__all__.append('EmotionalConfidenceEstimator')"
        }
      ]
    },
    {
      "entity": {
        "name": "UncertaintyDecomposer",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 394,
        "methods": [
          "decompose_uncertainty",
          "_estimate_aleatory_uncertainty",
          "_estimate_epistemic_uncertainty",
          "_estimate_linguistic_uncertainty",
          "_estimate_temporal_uncertainty",
          "_estimate_quantum_uncertainty"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import UncertaintyDecomposer",
          "export": "__all__.append('UncertaintyDecomposer')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetaLearningCalibrator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/confidence_calibrator.py",
        "line_number": 537,
        "methods": [
          "__init__",
          "update_calibration",
          "_update_calibration_model",
          "_generate_context_key",
          "get_calibration_score"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .confidence_calibrator import MetaLearningCalibrator",
          "export": "__all__.append('MetaLearningCalibrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBrainCore",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 33,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockBrainCore",
          "export": "__all__.append('MockBrainCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumBridge",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockQuantumBridge",
          "export": "__all__.append('MockQuantumBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockSynapticGate",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockSynapticGate",
          "export": "__all__.append('MockSynapticGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockOscillator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 95,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import MockOscillator",
          "export": "__all__.append('MockOscillator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReasoningPhase",
        "type": "dataclass",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 121,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import ReasoningPhase",
          "export": "__all__.append('ReasoningPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillationSynchronizer",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/bio_quantum_engine.py",
        "line_number": 887,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .bio_quantum_engine import OscillationSynchronizer",
          "export": "__all__.append('OscillationSynchronizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AbstractReasoningBrainOscillator",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/oscillator.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "generate_rhythm",
          "sync_with_master",
          "_calculate_optimal_phase_offset",
          "_calculate_coherence",
          "get_synchronization_status",
          "reset_synchronization",
          "get_performance_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import AbstractReasoningBrainOscillator",
          "export": "__all__.append('AbstractReasoningBrainOscillator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBrainCore",
        "type": "class",
        "file_path": "orchestration/brain/abstract_reasoning/core.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "get_brain_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/abstract_reasoning/__init__.py",
          "action": "add_export",
          "code": "from .core import MockBrainCore",
          "export": "__all__.append('MockBrainCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectiveStatement",
        "type": "dataclass",
        "file_path": "orchestration/brain/meta/cognition/reflection_layer.py",
        "line_number": 121,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/cognition/__init__.py",
          "action": "add_export",
          "code": "from .reflection_layer import ReflectiveStatement",
          "export": "__all__.append('ReflectiveStatement')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConscienceSnapshot",
        "type": "dataclass",
        "file_path": "orchestration/brain/meta/cognition/reflection_layer.py",
        "line_number": 135,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/cognition/__init__.py",
          "action": "add_export",
          "code": "from .reflection_layer import ConscienceSnapshot",
          "export": "__all__.append('ConscienceSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "FederatedLearningManager",
        "type": "class",
        "file_path": "orchestration/brain/meta/learning/system.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "register_model",
          "get_model",
          "contribute_gradients",
          "_aggregate_model",
          "_update_metrics",
          "save_model",
          "load_models",
          "get_client_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/learning/__init__.py",
          "action": "add_export",
          "code": "from .system import FederatedLearningManager",
          "export": "__all__.append('FederatedLearningManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('federatedlearningmanager', FederatedLearningManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementRequest",
        "type": "dataclass",
        "file_path": "orchestration/brain/meta/integrations/bot_enhancement.py",
        "line_number": 19,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/integrations/__init__.py",
          "action": "add_export",
          "code": "from .bot_enhancement import EnhancementRequest",
          "export": "__all__.append('EnhancementRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancementResponse",
        "type": "dataclass",
        "file_path": "orchestration/brain/meta/integrations/bot_enhancement.py",
        "line_number": 33,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/integrations/__init__.py",
          "action": "add_export",
          "code": "from .bot_enhancement import EnhancementResponse",
          "export": "__all__.append('EnhancementResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "BotEnhancementEngine",
        "type": "class",
        "file_path": "orchestration/brain/meta/integrations/bot_enhancement.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "_create_error_response"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/meta/integrations/__init__.py",
          "action": "add_export",
          "code": "from .bot_enhancement import BotEnhancementEngine",
          "export": "__all__.append('BotEnhancementEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyLevel",
        "type": "class",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import SafetyLevel",
          "export": "__all__.append('SafetyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "CapabilityRisk",
        "type": "class",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import CapabilityRisk",
          "export": "__all__.append('CapabilityRisk')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConstitutionalRule",
        "type": "dataclass",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import ConstitutionalRule",
          "export": "__all__.append('ConstitutionalRule')"
        }
      ]
    },
    {
      "entity": {
        "name": "SafetyAssessment",
        "type": "dataclass",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import SafetyAssessment",
          "export": "__all__.append('SafetyAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConstitutionalFramework",
        "type": "class",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 97,
        "methods": [
          "__init__",
          "setup_core_constitution",
          "add_constitutional_rule",
          "get_applicable_rules",
          "_is_rule_applicable"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import ConstitutionalFramework",
          "export": "__all__.append('ConstitutionalFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalDecisionMaker",
        "type": "class",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 532,
        "methods": [
          "__init__",
          "_initialize_ethical_weights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import EthicalDecisionMaker",
          "export": "__all__.append('EthicalDecisionMaker')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConstitutionalAI",
        "type": "class",
        "file_path": "orchestration/brain/compliance/constitutional_ai.py",
        "line_number": 872,
        "methods": [
          "__init__",
          "_setup_logging"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .constitutional_ai import ConstitutionalAI",
          "export": "__all__.append('ConstitutionalAI')"
        }
      ]
    },
    {
      "entity": {
        "name": "AIComplianceManager",
        "type": "class",
        "file_path": "orchestration/brain/compliance/ai_compliance_manager.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "_is_high_risk_ai_system",
          "get_transparency_report",
          "_get_processing_purposes",
          "_generate_compliance_recommendations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/compliance/__init__.py",
          "action": "add_export",
          "code": "from .ai_compliance_manager import AIComplianceManager",
          "export": "__all__.append('AIComplianceManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('aicompliancemanager', AIComplianceManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationSeverity",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import ValidationSeverity",
          "export": "__all__.append('ValidationSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationType",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import ValidationType",
          "export": "__all__.append('ValidationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ValidationIssue",
        "type": "dataclass",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import ValidationIssue",
          "export": "__all__.append('ValidationIssue')"
        }
      ]
    },
    {
      "entity": {
        "name": "BaseValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 102,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import BaseValidator",
          "export": "__all__.append('BaseValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicIntegrationValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 115,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import SymbolicIntegrationValidator",
          "export": "__all__.append('SymbolicIntegrationValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicsValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 299,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import EthicsValidator",
          "export": "__all__.append('EthicsValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 599,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import SecurityValidator",
          "export": "__all__.append('SecurityValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 773,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import ConsciousnessValidator",
          "export": "__all__.append('ConsciousnessValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasSymbolicValidator",
        "type": "class",
        "file_path": "orchestration/brain/reasoning/symbolic_validator.py",
        "line_number": 920,
        "methods": [
          "__init__",
          "add_custom_validator",
          "get_validation_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/reasoning/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_validator import LucasSymbolicValidator",
          "export": "__all__.append('LucasSymbolicValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamProcessorIntegration",
        "type": "class",
        "file_path": "orchestration/brain/rem/dream_processor_integrator.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "_extract_patterns",
          "_find_memory_relationships",
          "_analyze_emotional_context",
          "_calculate_pattern_confidence",
          "_calculate_relationship_strength"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/rem/__init__.py",
          "action": "add_export",
          "code": "from .dream_processor_integrator import DreamProcessorIntegration",
          "export": "__all__.append('DreamProcessorIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicReasoningEngine",
        "type": "class",
        "file_path": "orchestration/brain/symbolic_engine/semantic_reasoner.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "_sanitize_for_symbol_name",
          "reason",
          "_extract_semantic_content",
          "_extract_symbolic_patterns",
          "_detect_formal_logic",
          "_extract_contextual_content",
          "_extract_logical_elements",
          "_build_symbolic_logical_chains",
          "_check_semantic_overlap",
          "_calculate_symbolic_confidences",
          "_create_symbolic_summary",
          "_update_reasoning_graph",
          "_identify_primary_conclusion",
          "_extract_symbolic_reasoning_path",
          "_extract_symbolic_structure",
          "_update_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/symbolic_engine/__init__.py",
          "action": "add_export",
          "code": "from .semantic_reasoner import SymbolicReasoningEngine",
          "export": "__all__.append('SymbolicReasoningEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedPatternRecognition",
        "type": "class",
        "file_path": "orchestration/brain/symbolic_engine/pattern_recognition.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "_initialize_optimizers",
          "register_pattern",
          "recognize_patterns",
          "_symbolic_pattern_match",
          "_neural_pattern_extract",
          "_calculate_pattern_match",
          "_merge_pattern_matches",
          "_calculate_error_signal",
          "_get_embeddings",
          "_get_predictions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/symbolic_engine/__init__.py",
          "action": "add_export",
          "code": "from .pattern_recognition import UnifiedPatternRecognition",
          "export": "__all__.append('UnifiedPatternRecognition')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuroSymbolicIntegrator",
        "type": "class",
        "file_path": "orchestration/brain/neuro_symbolic/hybrid_integration.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "_default_config",
          "_integrate_results",
          "_weighted_integration",
          "_maximal_integration",
          "_adaptive_integration",
          "_extract_reasoning_trace",
          "_update_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neuro_symbolic/__init__.py",
          "action": "add_export",
          "code": "from .hybrid_integration import NeuroSymbolicIntegrator",
          "export": "__all__.append('NeuroSymbolicIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralProcessor",
        "type": "class",
        "file_path": "orchestration/brain/neuro_symbolic/neural_processor.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "_load_model",
          "process",
          "_generate_embeddings",
          "_apply_attention",
          "_classify",
          "_calculate_confidence",
          "train"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neuro_symbolic/__init__.py",
          "action": "add_export",
          "code": "from .neural_processor import NeuralProcessor",
          "export": "__all__.append('NeuralProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuroSymbolicIntegration",
        "type": "class",
        "file_path": "orchestration/brain/neuro_symbolic/neuro_symbolic_integration.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "integrate",
          "_weighted_average",
          "_symbolic_first",
          "_neural_first",
          "_confidence_based",
          "register_integration_method",
          "set_default_method"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neuro_symbolic/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_integration import NeuroSymbolicIntegration",
          "export": "__all__.append('NeuroSymbolicIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicActionProtocol",
        "type": "class",
        "file_path": "orchestration/brain/neuro_symbolic/governance/symbolic_action_protocol.py",
        "line_number": 28,
        "methods": [
          "__init__",
          "evaluate_proposal",
          "_check_permissions",
          "explain_action"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neuro_symbolic/governance/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_action_protocol import SymbolicActionProtocol",
          "export": "__all__.append('SymbolicActionProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceFramework",
        "type": "class",
        "file_path": "orchestration/brain/ethics/ethical_hierarchy.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_hierarchy import ComplianceFramework",
          "export": "__all__.append('ComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalSeverity",
        "type": "class",
        "file_path": "orchestration/brain/ethics/ethical_hierarchy.py",
        "line_number": 43,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_hierarchy import EthicalSeverity",
          "export": "__all__.append('EthicalSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalHierarchy",
        "type": "class",
        "file_path": "orchestration/brain/ethics/ethical_hierarchy.py",
        "line_number": 51,
        "methods": [
          "__init__",
          "_generate_assessment_reasoning",
          "_identify_violations",
          "adapt_weights",
          "get_priority_weights",
          "get_ethical_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_hierarchy import EthicalHierarchy",
          "export": "__all__.append('EthicalHierarchy')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalProtestModule",
        "type": "class",
        "file_path": "orchestration/brain/ethics/ethical_stop.py",
        "line_number": 8,
        "methods": [
          "__init__",
          "plan_protest"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_stop import EthicalProtestModule",
          "export": "__all__.append('EthicalProtestModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtestEthicsValidator",
        "type": "class",
        "file_path": "orchestration/brain/ethics/ethical_stop.py",
        "line_number": 45,
        "methods": [
          "validate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/ethics/__init__.py",
          "action": "add_export",
          "code": "from .ethical_stop import ProtestEthicsValidator",
          "export": "__all__.append('ProtestEthicsValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SeamlessExperience",
        "type": "class",
        "file_path": "orchestration/brain/seamless/experience_core.py",
        "line_number": 11,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/seamless/__init__.py",
          "action": "add_export",
          "code": "from .experience_core import SeamlessExperience",
          "export": "__all__.append('SeamlessExperience')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionRequest",
        "type": "dataclass",
        "file_path": "orchestration/brain/emotional/core.py",
        "line_number": 33,
        "methods": [
          "to_symbol"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/emotional/__init__.py",
          "action": "add_export",
          "code": "from .core import EmotionRequest",
          "export": "__all__.append('EmotionRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionConfig",
        "type": "class",
        "file_path": "orchestration/brain/emotional/core.py",
        "line_number": 45,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/emotional/__init__.py",
          "action": "add_export",
          "code": "from .core import EmotionConfig",
          "export": "__all__.append('EmotionConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionHealth",
        "type": "class",
        "file_path": "orchestration/brain/emotional/core.py",
        "line_number": 58,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/emotional/__init__.py",
          "action": "add_export",
          "code": "from .core import EmotionHealth",
          "export": "__all__.append('EmotionHealth')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalProtestModule",
        "type": "class",
        "file_path": "orchestration/brain/emotional/ethical_stop.py",
        "line_number": 11,
        "methods": [
          "__init__",
          "plan_protest"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/emotional/__init__.py",
          "action": "add_export",
          "code": "from .ethical_stop import EthicalProtestModule",
          "export": "__all__.append('EthicalProtestModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtestEthicsValidator",
        "type": "class",
        "file_path": "orchestration/brain/emotional/ethical_stop.py",
        "line_number": 48,
        "methods": [
          "validate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/emotional/__init__.py",
          "action": "add_export",
          "code": "from .ethical_stop import ProtestEthicsValidator",
          "export": "__all__.append('ProtestEthicsValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalComplianceFramework",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/the_oscillator.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "fetch_live_compliance_updates",
          "compliance_score",
          "check_compliance",
          "log_violation",
          "activate_safeguards",
          "recalibrate_safeguards",
          "initiate_emergency_shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import GlobalComplianceFramework",
          "export": "__all__.append('GlobalComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalHierarchy",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/the_oscillator.py",
        "line_number": 125,
        "methods": [
          "__init__",
          "adapt_weights",
          "get_priority_weights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import EthicalHierarchy",
          "export": "__all__.append('EthicalHierarchy')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEthicalHandler",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/the_oscillator.py",
        "line_number": 161,
        "methods": [
          "__init__",
          "create_ethical_circuit",
          "measure_ethical_state",
          "explain_decision",
          "fallback_protocol",
          "symbolic_fallback_ethics",
          "human_review_required"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import QuantumEthicalHandler",
          "export": "__all__.append('QuantumEthicalHandler')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('quantumethicalhandler', QuantumEthicalHandler())"
        }
      ]
    },
    {
      "entity": {
        "name": "LegalComplianceLayer",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/the_oscillator.py",
        "line_number": 229,
        "methods": [
          "__init__",
          "validate_operation",
          "check_transparency",
          "check_data_protection",
          "check_bias"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import LegalComplianceLayer",
          "export": "__all__.append('LegalComplianceLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAGI",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/the_oscillator.py",
        "line_number": 257,
        "methods": [
          "__init__",
          "play_sound",
          "process_decision",
          "recalibrate_autonomy",
          "_modulate_ethical_weights",
          "compute_system_health_factor",
          "compute_context_entropy",
          "adaptive_context_simplification",
          "_human_oversight_protocol",
          "_safe_fallback_response",
          "_analyze_context",
          "_anonymize_data",
          "_synthesize_output",
          "monitor_post_market",
          "check_adversarial_input",
          "assess_stakeholder_impact",
          "modulate_emotional_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import LucasAGI",
          "export": "__all__.append('LucasAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveAGISystem",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/main_node.py",
        "line_number": 51,
        "methods": [
          "__init__",
          "init_components",
          "register_event_handlers",
          "_calculate_duration",
          "_get_memory_usage",
          "_save_system_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .main_node import AdaptiveAGISystem",
          "export": "__all__.append('AdaptiveAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorCore",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/orchestrator_core.py",
        "line_number": 36,
        "methods": [
          "__init__",
          "simulate_trust_flow"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_core import OrchestratorCore",
          "export": "__all__.append('OrchestratorCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZKProofStub",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/orchestrator_core.py",
        "line_number": 71,
        "methods": [
          "__init__",
          "verify"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_core import ZKProofStub",
          "export": "__all__.append('ZKProofStub')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingLevel",
        "type": "class",
        "file_path": "orchestration/brain/orchestration/orchestrator.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import ProcessingLevel",
          "export": "__all__.append('ProcessingLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationMetrics",
        "type": "dataclass",
        "file_path": "orchestration/brain/orchestration/orchestrator.py",
        "line_number": 142,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/orchestration/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator import OrchestrationMetrics",
          "export": "__all__.append('OrchestrationMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProposalType",
        "type": "class",
        "file_path": "orchestration/brain/governance/dao_governance_node.py",
        "line_number": 20,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/governance/__init__.py",
          "action": "add_export",
          "code": "from .dao_governance_node import ProposalType",
          "export": "__all__.append('ProposalType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProposalStatus",
        "type": "class",
        "file_path": "orchestration/brain/governance/dao_governance_node.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/governance/__init__.py",
          "action": "add_export",
          "code": "from .dao_governance_node import ProposalStatus",
          "export": "__all__.append('ProposalStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "DAOGovernanceNode",
        "type": "class",
        "file_path": "orchestration/brain/governance/dao_governance_node.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "_initialize_council",
          "_load_governance_config",
          "get_proposal",
          "get_governance_status",
          "_log_to_trace"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/governance/__init__.py",
          "action": "add_export",
          "code": "from .dao_governance_node import DAOGovernanceNode",
          "export": "__all__.append('DAOGovernanceNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasDNALink",
        "type": "class",
        "file_path": "orchestration/brain/dna/dna_link.py",
        "line_number": 27,
        "methods": [
          "__init__",
          "generate_reflection",
          "translate",
          "generate_opinion",
          "learn_term_loop",
          "generate_email_draft",
          "generate_social_post",
          "generate_text_message",
          "reword_draft",
          "_log_output"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/dna/__init__.py",
          "action": "add_export",
          "code": "from .dna_link import LucasDNALink",
          "export": "__all__.append('LucasDNALink')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralSeverity",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/guardian_reflector.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .guardian_reflector import MoralSeverity",
          "export": "__all__.append('MoralSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalReflection",
        "type": "dataclass",
        "file_path": "orchestration/brain/monitoring/guardian_reflector.py",
        "line_number": 70,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .guardian_reflector import EthicalReflection",
          "export": "__all__.append('EthicalReflection')"
        }
      ]
    },
    {
      "entity": {
        "name": "MoralDrift",
        "type": "dataclass",
        "file_path": "orchestration/brain/monitoring/guardian_reflector.py",
        "line_number": 83,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .guardian_reflector import MoralDrift",
          "export": "__all__.append('MoralDrift')"
        }
      ]
    },
    {
      "entity": {
        "name": "GuardianReflector",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/guardian_reflector.py",
        "line_number": 91,
        "methods": [
          "__init__",
          "_synthesize_moral_score",
          "_determine_severity",
          "_identify_concerns",
          "_generate_recommendations",
          "_generate_justification",
          "_assess_virtue_alignment",
          "_assess_duty_compliance",
          "_calculate_utility",
          "_assess_care_preservation",
          "_calculate_drift_score",
          "_determine_trend",
          "_identify_drift_factors",
          "_generate_drift_recommendations",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .guardian_reflector import GuardianReflector",
          "export": "__all__.append('GuardianReflector')"
        }
      ]
    },
    {
      "entity": {
        "name": "FunctionProfile",
        "type": "dataclass",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 58,
        "methods": [
          "add_call",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import FunctionProfile",
          "export": "__all__.append('FunctionProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "FunctionProfiler",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 220,
        "methods": [
          "__init__",
          "enable",
          "disable",
          "profile",
          "profile_async",
          "get_profiles",
          "get_top_functions",
          "clear_profiles"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import FunctionProfiler",
          "export": "__all__.append('FunctionProfiler')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryProfiler",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 298,
        "methods": [
          "__init__",
          "start",
          "stop",
          "take_snapshot",
          "get_top_stats",
          "compare_snapshots"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import MemoryProfiler",
          "export": "__all__.append('MemoryProfiler')"
        }
      ]
    },
    {
      "entity": {
        "name": "CacheManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 362,
        "methods": [
          "__init__",
          "get",
          "set",
          "delete",
          "clear",
          "cleanup_expired",
          "get_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import CacheManager",
          "export": "__all__.append('CacheManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('cachemanager', CacheManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "ThreadPoolManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 468,
        "methods": [
          "__init__",
          "get_executor",
          "submit",
          "map",
          "shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import ThreadPoolManager",
          "export": "__all__.append('ThreadPoolManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('threadpoolmanager', ThreadPoolManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "AsyncTaskManager",
        "type": "class",
        "file_path": "orchestration/brain/monitoring/performance.py",
        "line_number": 501,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .performance import AsyncTaskManager",
          "export": "__all__.append('AsyncTaskManager')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('asynctaskmanager', AsyncTaskManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "IntelligenceRequest",
        "type": "class",
        "file_path": "orchestration/brain/neural/neural_intelligence_api.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neural/__init__.py",
          "action": "add_export",
          "code": "from .neural_intelligence_api import IntelligenceRequest",
          "export": "__all__.append('IntelligenceRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntelligenceResponse",
        "type": "class",
        "file_path": "orchestration/brain/neural/neural_intelligence_api.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/brain/neural/__init__.py",
          "action": "add_export",
          "code": "from .neural_intelligence_api import IntelligenceResponse",
          "export": "__all__.append('IntelligenceResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestratorCore",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestrator_core_oxn.py",
        "line_number": 29,
        "methods": [
          "__init__",
          "simulate_trust_flow"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_core_oxn import OrchestratorCore",
          "export": "__all__.append('OrchestratorCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZKProofStub",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestrator_core_oxn.py",
        "line_number": 64,
        "methods": [
          "__init__",
          "verify"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_core_oxn import ZKProofStub",
          "export": "__all__.append('ZKProofStub')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceContext",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 101,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import ComplianceContext",
          "export": "__all__.append('ComplianceContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "PrivacyControls",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 114,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import PrivacyControls",
          "export": "__all__.append('PrivacyControls')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIState",
        "type": "class",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 124,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import AGIState",
          "export": "__all__.append('AGIState')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIRequest",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 135,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import AGIRequest",
          "export": "__all__.append('AGIRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGISession",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 172,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import AGISession",
          "export": "__all__.append('AGISession')"
        }
      ]
    },
    {
      "entity": {
        "name": "InteractionMode",
        "type": "class",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 189,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import InteractionMode",
          "export": "__all__.append('InteractionMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIController",
        "type": "class",
        "file_path": "orchestration/core_modules/controller.py",
        "line_number": 196,
        "methods": [
          "__init__",
          "_load_config",
          "_signal_handler",
          "_request_processing_loop",
          "_get_request_handler",
          "_text_to_features",
          "_interaction_processing_loop"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .controller import AGIController",
          "export": "__all__.append('AGIController')"
        }
      ]
    },
    {
      "entity": {
        "name": "MasterMultiBrainOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/master_orchestrator_alt.py",
        "line_number": 13,
        "methods": [
          "__init__",
          "get_symphony_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator_alt import MasterMultiBrainOrchestrator",
          "export": "__all__.append('MasterMultiBrainOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockModule",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestration_alt.py",
        "line_number": 11,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestration_alt import MockModule",
          "export": "__all__.append('MockModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockModule",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestration_alt.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestration_alt import MockModule",
          "export": "__all__.append('MockModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "WebsiteIntelligence",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 76,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import WebsiteIntelligence",
          "export": "__all__.append('WebsiteIntelligence')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedSession",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 90,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import UnifiedSession",
          "export": "__all__.append('UnifiedSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "EcosystemStatus",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 104,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import EcosystemStatus",
          "export": "__all__.append('EcosystemStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "EcosystemDomain",
        "type": "class",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 115,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import EcosystemDomain",
          "export": "__all__.append('EcosystemDomain')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhASMasterOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/master_orchestrator.py",
        "line_number": 129,
        "methods": [
          "__init__",
          "_load_config",
          "_determine_optimal_theme",
          "_determine_accessibility_features",
          "_calculate_intelligence_level"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .master_orchestrator import LukhASMasterOrchestrator",
          "export": "__all__.append('LukhASMasterOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "OrchestrationService",
        "type": "class",
        "file_path": "orchestration/core_modules/orchestration_service.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "coordinate_modules",
          "execute_workflow",
          "manage_resources",
          "route_event",
          "get_message_bus_stats",
          "get_system_status",
          "_process_coordination",
          "_execute_sequential_coordination",
          "_execute_parallel_coordination",
          "_execute_conditional_coordination",
          "_execute_workflow_steps",
          "_manage_module_resources",
          "_route_inter_module_event",
          "_get_detailed_module_metrics",
          "_get_workflow_details",
          "_get_resource_utilization",
          "_get_performance_metrics",
          "_update_module_status_post_optimization",
          "_assess_cross_module_health",
          "_analyze_workflow_performance_impact"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestration_service import OrchestrationService",
          "export": "__all__.append('OrchestrationService')"
        },
        {
          "integration_point": "orchestration_hub.py",
          "action": "register_service",
          "code": "self.register_service('orchestrationservice', OrchestrationService())"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemSnapshot",
        "type": "dataclass",
        "file_path": "orchestration/core_modules/orchestrator_core.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .orchestrator_core import SystemSnapshot",
          "export": "__all__.append('SystemSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessOrchestrator",
        "type": "class",
        "file_path": "orchestration/core_modules/process_orchestrator.py",
        "line_number": 14,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .process_orchestrator import ProcessOrchestrator",
          "export": "__all__.append('ProcessOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicHandshake",
        "type": "class",
        "file_path": "orchestration/core_modules/symbolic_handshake.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "register_module",
          "create_signal",
          "validate_handshake",
          "get_signal_history",
          "get_emotion_state_history"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_handshake import SymbolicHandshake",
          "export": "__all__.append('SymbolicHandshake')"
        }
      ]
    },
    {
      "entity": {
        "name": "SignalMiddleware",
        "type": "class",
        "file_path": "orchestration/core_modules/signal_middleware.py",
        "line_number": 23,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .signal_middleware import SignalMiddleware",
          "export": "__all__.append('SignalMiddleware')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoreMessageType",
        "type": "class",
        "file_path": "orchestration/core_modules/core_integrator.py",
        "line_number": 53,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .core_integrator import CoreMessageType",
          "export": "__all__.append('CoreMessageType')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasCoreIntegrator",
        "type": "class",
        "file_path": "orchestration/core_modules/core_integrator.py",
        "line_number": 80,
        "methods": [
          "__init__",
          "_load_config",
          "register_component",
          "register_message_handler",
          "subscribe_to_events",
          "send_message",
          "broadcast_event",
          "initialize_awareness_protocol",
          "process_awareness_alert",
          "_check_action_permitted",
          "_log_symbolic_trace",
          "get_component_status",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/core_modules/__init__.py",
          "action": "add_export",
          "code": "from .core_integrator import LucasCoreIntegrator",
          "export": "__all__.append('LucasCoreIntegrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalComplianceFramework",
        "type": "class",
        "file_path": "orchestration/monitoring/the_oscillator.py",
        "line_number": 16,
        "methods": [
          "__init__",
          "fetch_live_compliance_updates",
          "compliance_score",
          "check_compliance",
          "log_violation",
          "activate_safeguards",
          "recalibrate_safeguards",
          "initiate_emergency_shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import GlobalComplianceFramework",
          "export": "__all__.append('GlobalComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalHierarchy",
        "type": "class",
        "file_path": "orchestration/monitoring/the_oscillator.py",
        "line_number": 125,
        "methods": [
          "__init__",
          "adapt_weights",
          "get_priority_weights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import EthicalHierarchy",
          "export": "__all__.append('EthicalHierarchy')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEthicalHandler",
        "type": "class",
        "file_path": "orchestration/monitoring/the_oscillator.py",
        "line_number": 161,
        "methods": [
          "__init__",
          "create_ethical_circuit",
          "measure_ethical_state",
          "explain_decision",
          "fallback_protocol",
          "symbolic_fallback_ethics",
          "human_review_required"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import QuantumEthicalHandler",
          "export": "__all__.append('QuantumEthicalHandler')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('quantumethicalhandler', QuantumEthicalHandler())"
        }
      ]
    },
    {
      "entity": {
        "name": "LegalComplianceLayer",
        "type": "class",
        "file_path": "orchestration/monitoring/the_oscillator.py",
        "line_number": 229,
        "methods": [
          "__init__",
          "validate_operation",
          "check_transparency",
          "check_data_protection",
          "check_bias"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import LegalComplianceLayer",
          "export": "__all__.append('LegalComplianceLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAGI",
        "type": "class",
        "file_path": "orchestration/monitoring/the_oscillator.py",
        "line_number": 257,
        "methods": [
          "__init__",
          "play_sound",
          "process_decision",
          "recalibrate_autonomy",
          "_modulate_ethical_weights",
          "compute_system_health_factor",
          "compute_context_entropy",
          "adaptive_context_simplification",
          "_human_oversight_protocol",
          "_safe_fallback_response",
          "_analyze_context",
          "_anonymize_data",
          "_synthesize_output",
          "monitor_post_market",
          "check_adversarial_input",
          "assess_stakeholder_impact",
          "modulate_emotional_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .the_oscillator import LucasAGI",
          "export": "__all__.append('LucasAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "RemediationType",
        "type": "class",
        "file_path": "orchestration/monitoring/remediator_agent.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .remediator_agent import RemediationType",
          "export": "__all__.append('RemediationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "SubAgentStatus",
        "type": "class",
        "file_path": "orchestration/monitoring/remediator_agent.py",
        "line_number": 48,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .remediator_agent import SubAgentStatus",
          "export": "__all__.append('SubAgentStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "ReflectiveStatement",
        "type": "dataclass",
        "file_path": "orchestration/monitoring/reflection_layer.py",
        "line_number": 134,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .reflection_layer import ReflectiveStatement",
          "export": "__all__.append('ReflectiveStatement')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConscienceSnapshot",
        "type": "dataclass",
        "file_path": "orchestration/monitoring/reflection_layer.py",
        "line_number": 150,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .reflection_layer import ConscienceSnapshot",
          "export": "__all__.append('ConscienceSnapshot')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthCheck",
        "type": "class",
        "file_path": "orchestration/monitoring/health_checks.py",
        "line_number": 62,
        "methods": [
          "__init__",
          "should_run"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .health_checks import HealthCheck",
          "export": "__all__.append('HealthCheck')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthChecker",
        "type": "class",
        "file_path": "orchestration/monitoring/health_checks.py",
        "line_number": 194,
        "methods": [
          "__init__",
          "register_check",
          "unregister_check",
          "get_overall_health",
          "get_component_health",
          "get_all_health_status",
          "export_health_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/monitoring/__init__.py",
          "action": "add_export",
          "code": "from .health_checks import HealthChecker",
          "export": "__all__.append('HealthChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginDependency",
        "type": "dataclass",
        "file_path": "orchestration/interfaces/plugin_registry.py",
        "line_number": 52,
        "methods": [
          "__str__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .plugin_registry import PluginDependency",
          "export": "__all__.append('PluginDependency')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginMetadata",
        "type": "dataclass",
        "file_path": "orchestration/interfaces/plugin_registry.py",
        "line_number": 65,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .plugin_registry import PluginMetadata",
          "export": "__all__.append('PluginMetadata')"
        }
      ]
    },
    {
      "entity": {
        "name": "PluginInterface",
        "type": "class",
        "file_path": "orchestration/interfaces/plugin_registry.py",
        "line_number": 94,
        "methods": [
          "__init__",
          "get_status",
          "get_metadata"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .plugin_registry import PluginInterface",
          "export": "__all__.append('PluginInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "FunctionPlugin",
        "type": "class",
        "file_path": "orchestration/interfaces/plugin_registry.py",
        "line_number": 362,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .plugin_registry import FunctionPlugin",
          "export": "__all__.append('FunctionPlugin')"
        }
      ]
    },
    {
      "entity": {
        "name": "ExamplePlugin",
        "type": "class",
        "file_path": "orchestration/interfaces/plugin_registry.py",
        "line_number": 614,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "orchestration/interfaces/__init__.py",
          "action": "add_export",
          "code": "from .plugin_registry import ExamplePlugin",
          "export": "__all__.append('ExamplePlugin')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIServiceBase",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 15,
        "methods": [
          "__init__",
          "_ensure_service"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import APIServiceBase",
          "export": "__all__.append('APIServiceBase')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('apiservicebase', APIServiceBase())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 35,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import MemoryAPIService",
          "export": "__all__.append('MemoryAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('memoryapiservice', MemoryAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 104,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import DreamAPIService",
          "export": "__all__.append('DreamAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('dreamapiservice', DreamAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 145,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import ConsciousnessAPIService",
          "export": "__all__.append('ConsciousnessAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('consciousnessapiservice', ConsciousnessAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 192,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import EmotionAPIService",
          "export": "__all__.append('EmotionAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('emotionapiservice', EmotionAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 239,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import LearningAPIService",
          "export": "__all__.append('LearningAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('learningapiservice', LearningAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityAPIService",
        "type": "class",
        "file_path": "api/services.py",
        "line_number": 289,
        "methods": [
          "__init__",
          "_get_tier_permissions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .services import IdentityAPIService",
          "export": "__all__.append('IdentityAPIService')"
        },
        {
          "integration_point": "api_hub.py",
          "action": "register_service",
          "code": "self.register_service('identityapiservice', IdentityAPIService())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryCreateRequest",
        "type": "class",
        "file_path": "api/memory.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory import MemoryCreateRequest",
          "export": "__all__.append('MemoryCreateRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryRecallRequest",
        "type": "class",
        "file_path": "api/memory.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory import MemoryRecallRequest",
          "export": "__all__.append('MemoryRecallRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EnhancedRecallRequest",
        "type": "class",
        "file_path": "api/memory.py",
        "line_number": 100,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory import EnhancedRecallRequest",
          "export": "__all__.append('EnhancedRecallRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/memory.py",
        "line_number": 108,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ErrorResponse",
        "type": "class",
        "file_path": "api/memory.py",
        "line_number": 114,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory import ErrorResponse",
          "export": "__all__.append('ErrorResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphImportItem",
        "type": "class",
        "file_path": "api/glyph_exchange.py",
        "line_number": 28,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .glyph_exchange import GlyphImportItem",
          "export": "__all__.append('GlyphImportItem')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlyphImportRequest",
        "type": "class",
        "file_path": "api/glyph_exchange.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .glyph_exchange import GlyphImportRequest",
          "export": "__all__.append('GlyphImportRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressedDreamTagRequest",
        "type": "class",
        "file_path": "api/glyph_exchange.py",
        "line_number": 38,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .glyph_exchange import CompressedDreamTagRequest",
          "export": "__all__.append('CompressedDreamTagRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/glyph_exchange.py",
        "line_number": 47,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .glyph_exchange import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessStateRequest",
        "type": "class",
        "file_path": "api/consciousness.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import ConsciousnessStateRequest",
          "export": "__all__.append('ConsciousnessStateRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "PatternSynthesisRequest",
        "type": "class",
        "file_path": "api/consciousness.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import PatternSynthesisRequest",
          "export": "__all__.append('PatternSynthesisRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessAssessmentRequest",
        "type": "class",
        "file_path": "api/consciousness.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import AwarenessAssessmentRequest",
          "export": "__all__.append('AwarenessAssessmentRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/consciousness.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .consciousness import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonySpawnRequest",
        "type": "class",
        "file_path": "api/colony_endpoints.py",
        "line_number": 12,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .colony_endpoints import ColonySpawnRequest",
          "export": "__all__.append('ColonySpawnRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "ColonyTaskRequest",
        "type": "class",
        "file_path": "api/colony_endpoints.py",
        "line_number": 19,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .colony_endpoints import ColonyTaskRequest",
          "export": "__all__.append('ColonyTaskRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamLogRequest",
        "type": "class",
        "file_path": "api/dream.py",
        "line_number": 33,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream import DreamLogRequest",
          "export": "__all__.append('DreamLogRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamConsolidationRequest",
        "type": "class",
        "file_path": "api/dream.py",
        "line_number": 39,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream import DreamConsolidationRequest",
          "export": "__all__.append('DreamConsolidationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamAnalysisRequest",
        "type": "class",
        "file_path": "api/dream.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream import DreamAnalysisRequest",
          "export": "__all__.append('DreamAnalysisRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/dream.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFoldRequest",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 22,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import MemoryFoldRequest",
          "export": "__all__.append('MemoryFoldRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryFoldResponse",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import MemoryFoldResponse",
          "export": "__all__.append('MemoryFoldResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySearchRequest",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import MemorySearchRequest",
          "export": "__all__.append('MemorySearchRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemorySearchResult",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import MemorySearchResult",
          "export": "__all__.append('MemorySearchResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftAnalysis",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 82,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import DriftAnalysis",
          "export": "__all__.append('DriftAnalysis')"
        }
      ]
    },
    {
      "entity": {
        "name": "LineageTrace",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 93,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import LineageTrace",
          "export": "__all__.append('LineageTrace')"
        }
      ]
    },
    {
      "entity": {
        "name": "CollapseRequest",
        "type": "class",
        "file_path": "api/memory_endpoints.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .memory_endpoints import CollapseRequest",
          "export": "__all__.append('CollapseRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSeedType",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 89,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamSeedType",
          "export": "__all__.append('DreamSeedType')"
        }
      ]
    },
    {
      "entity": {
        "name": "RevenueModel",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 106,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import RevenueModel",
          "export": "__all__.append('RevenueModel')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSeedSubmission",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamSeedSubmission",
          "export": "__all__.append('DreamSeedSubmission')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamExperienceRequest",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 129,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamExperienceRequest",
          "export": "__all__.append('DreamExperienceRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamMarketplaceFilter",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamMarketplaceFilter",
          "export": "__all__.append('DreamMarketplaceFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 150,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamExperience",
        "type": "dataclass",
        "file_path": "api/dream_commerce.py",
        "line_number": 183,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamExperience",
          "export": "__all__.append('DreamExperience')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamCommerceEngine",
        "type": "class",
        "file_path": "api/dream_commerce.py",
        "line_number": 199,
        "methods": [
          "__init__",
          "get_commerce_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .dream_commerce import DreamCommerceEngine",
          "export": "__all__.append('DreamCommerceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionAnalysisRequest",
        "type": "class",
        "file_path": "api/emotion.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .emotion import EmotionAnalysisRequest",
          "export": "__all__.append('EmotionAnalysisRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionClusterRequest",
        "type": "class",
        "file_path": "api/emotion.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .emotion import EmotionClusterRequest",
          "export": "__all__.append('EmotionClusterRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionNeighborhoodRequest",
        "type": "class",
        "file_path": "api/emotion.py",
        "line_number": 40,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .emotion import EmotionNeighborhoodRequest",
          "export": "__all__.append('EmotionNeighborhoodRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "APIResponse",
        "type": "class",
        "file_path": "api/emotion.py",
        "line_number": 45,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "api/__init__.py",
          "action": "add_export",
          "code": "from .emotion import APIResponse",
          "export": "__all__.append('APIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProprioceptiveState",
        "type": "dataclass",
        "file_path": "embodiment/body_state.py",
        "line_number": 6,
        "methods": [
          "update_joint",
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "embodiment/__init__.py",
          "action": "add_export",
          "code": "from .body_state import ProprioceptiveState",
          "export": "__all__.append('ProprioceptiveState')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicReasoningColony",
        "type": "class",
        "file_path": "symbolic/colony_tag_propagation.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "_get_agent_neighbors",
          "_get_agent_distance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/__init__.py",
          "action": "add_export",
          "code": "from .colony_tag_propagation import SymbolicReasoningColony",
          "export": "__all__.append('SymbolicReasoningColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimAgent",
        "type": "dataclass",
        "file_path": "symbolic/swarm_tag_simulation.py",
        "line_number": 26,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/__init__.py",
          "action": "add_export",
          "code": "from .swarm_tag_simulation import SimAgent",
          "export": "__all__.append('SimAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "SwarmNetwork",
        "type": "class",
        "file_path": "symbolic/swarm_tag_simulation.py",
        "line_number": 50,
        "methods": [
          "__init__",
          "register",
          "log_collision",
          "consensus"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/__init__.py",
          "action": "add_export",
          "code": "from .swarm_tag_simulation import SwarmNetwork",
          "export": "__all__.append('SwarmNetwork')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicLoopEngine",
        "type": "class",
        "file_path": "symbolic/loop_engine.py",
        "line_number": 37,
        "methods": [
          "__init__",
          "_symbol_in_pattern"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/__init__.py",
          "action": "add_export",
          "code": "from .loop_engine import SymbolicLoopEngine",
          "export": "__all__.append('SymbolicLoopEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "Voicesymbol",
        "type": "dataclass",
        "file_path": "symbolic/vocabularies/voice_vocabulary.py",
        "line_number": 16,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/vocabularies/__init__.py",
          "action": "add_export",
          "code": "from .voice_vocabulary import Voicesymbol",
          "export": "__all__.append('Voicesymbol')"
        }
      ]
    },
    {
      "entity": {
        "name": "Voicesymbolicvocabulary",
        "type": "class",
        "file_path": "symbolic/vocabularies/voice_vocabulary.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "_init_synthesis_symbols",
          "_init_emotion_symbols",
          "_init_provider_symbols",
          "_init_quality_symbols",
          "_init_expression_symbols",
          "get_symbol_for_emotion",
          "get_symbol_for_provider",
          "create_synthesis_phrase",
          "get_quality_indicators",
          "get_all_symbols",
          "get_context_symbols",
          "analyze_emotional_weight"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/vocabularies/__init__.py",
          "action": "add_export",
          "code": "from .voice_vocabulary import Voicesymbolicvocabulary",
          "export": "__all__.append('Voicesymbolicvocabulary')"
        }
      ]
    },
    {
      "entity": {
        "name": "Visualsymbol",
        "type": "dataclass",
        "file_path": "symbolic/vocabularies/vision_vocabulary.py",
        "line_number": 15,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/vocabularies/__init__.py",
          "action": "add_export",
          "code": "from .vision_vocabulary import Visualsymbol",
          "export": "__all__.append('Visualsymbol')"
        }
      ]
    },
    {
      "entity": {
        "name": "Visionsymbolicvocabulary",
        "type": "class",
        "file_path": "symbolic/vocabularies/vision_vocabulary.py",
        "line_number": 25,
        "methods": [
          "__init__",
          "_init_analysis_symbols",
          "_init_object_symbols",
          "_init_color_symbols",
          "_init_emotion_symbols",
          "_init_composition_symbols",
          "_init_provider_symbols",
          "_init_quality_symbols",
          "_init_symbolic_elements",
          "get_symbol_for_analysis_type",
          "get_symbol_for_provider",
          "get_dominant_color_symbol",
          "create_analysis_phrase",
          "get_emotional_color_mapping",
          "analyze_symbolic_composition",
          "get_quality_indicators",
          "get_all_symbols",
          "get_context_symbols",
          "calculate_visual_harmony"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/vocabularies/__init__.py",
          "action": "add_export",
          "code": "from .vision_vocabulary import Visionsymbolicvocabulary",
          "export": "__all__.append('Visionsymbolicvocabulary')"
        }
      ]
    },
    {
      "entity": {
        "name": "MitoEthicsSync",
        "type": "class",
        "file_path": "symbolic/bio/mito_ethics_sync.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "update_phase",
          "assess_alignment",
          "is_synchronized"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_ethics_sync import MitoEthicsSync",
          "export": "__all__.append('MitoEthicsSync')"
        }
      ]
    },
    {
      "entity": {
        "name": "StressGate",
        "type": "class",
        "file_path": "symbolic/bio/stress_gate.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "update_stress",
          "_decay_stress",
          "should_fallback",
          "reset",
          "report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .stress_gate import StressGate",
          "export": "__all__.append('StressGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumTunnelFilter",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 27,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import QuantumTunnelFilter",
          "export": "__all__.append('QuantumTunnelFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaGate",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 31,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import CristaGate",
          "export": "__all__.append('CristaGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "VivoxAttention",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 47,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import VivoxAttention",
          "export": "__all__.append('VivoxAttention')"
        }
      ]
    },
    {
      "entity": {
        "name": "OxintusReasoner",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 50,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import OxintusReasoner",
          "export": "__all__.append('OxintusReasoner')"
        }
      ]
    },
    {
      "entity": {
        "name": "MAELayer",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 53,
        "methods": [
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MAELayer",
          "export": "__all__.append('MAELayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "RespiModule",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "forward"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import RespiModule",
          "export": "__all__.append('RespiModule')"
        }
      ]
    },
    {
      "entity": {
        "name": "ATPAllocator",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 72,
        "methods": [
          "__init__",
          "allocate",
          "_bind_resource"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import ATPAllocator",
          "export": "__all__.append('ATPAllocator')"
        }
      ]
    },
    {
      "entity": {
        "name": "VivoxSection",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 108,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import VivoxSection",
          "export": "__all__.append('VivoxSection')"
        }
      ]
    },
    {
      "entity": {
        "name": "OxintusBrass",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 111,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import OxintusBrass",
          "export": "__all__.append('OxintusBrass')"
        }
      ]
    },
    {
      "entity": {
        "name": "MAEPercussion",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 114,
        "methods": [
          "play"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MAEPercussion",
          "export": "__all__.append('MAEPercussion')"
        }
      ]
    },
    {
      "entity": {
        "name": "MitochondrialConductor",
        "type": "class",
        "file_path": "symbolic/bio/mito_quantum_attention.py",
        "line_number": 117,
        "methods": [
          "__init__",
          "_calculate_cristae_topology",
          "_route_to_instrument",
          "_synchronize",
          "perform"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/bio/__init__.py",
          "action": "add_export",
          "code": "from .mito_quantum_attention import MitochondrialConductor",
          "export": "__all__.append('MitochondrialConductor')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuralSymbolicIntegration",
        "type": "class",
        "file_path": "symbolic/neural/neural_symbolic_bridge.py",
        "line_number": 18,
        "methods": [
          "__init__",
          "process",
          "_neural_process",
          "_symbolic_process",
          "_integrate_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/neural/__init__.py",
          "action": "add_export",
          "code": "from .neural_symbolic_bridge import NeuralSymbolicIntegration",
          "export": "__all__.append('NeuralSymbolicIntegration')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionMode",
        "type": "class",
        "file_path": "symbolic/neural/neuro_symbolic_fusion_layer.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/neural/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import FusionMode",
          "export": "__all__.append('FusionMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "FusionContext",
        "type": "dataclass",
        "file_path": "symbolic/neural/neuro_symbolic_fusion_layer.py",
        "line_number": 72,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/neural/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import FusionContext",
          "export": "__all__.append('FusionContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "NeuroSymbolicPattern",
        "type": "class",
        "file_path": "symbolic/neural/neuro_symbolic_fusion_layer.py",
        "line_number": 81,
        "methods": [
          "__init__",
          "calculate_coherence"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "symbolic/neural/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_fusion_layer import NeuroSymbolicPattern",
          "export": "__all__.append('NeuroSymbolicPattern')"
        }
      ]
    },
    {
      "entity": {
        "name": "SensoryEcho",
        "type": "dataclass",
        "file_path": "perception/symbolic_nervous_system.py",
        "line_number": 15,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "perception/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_nervous_system import SensoryEcho",
          "export": "__all__.append('SensoryEcho')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicNervousSystem",
        "type": "class",
        "file_path": "perception/symbolic_nervous_system.py",
        "line_number": 24,
        "methods": [
          "__init__",
          "map_inputs_to_tags"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "perception/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_nervous_system import SymbolicNervousSystem",
          "export": "__all__.append('SymbolicNervousSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "ModuleType",
        "type": "class",
        "file_path": "hub/coordinator.py",
        "line_number": 18,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import ModuleType",
          "export": "__all__.append('ModuleType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoordinationRequest",
        "type": "dataclass",
        "file_path": "hub/coordinator.py",
        "line_number": 36,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import CoordinationRequest",
          "export": "__all__.append('CoordinationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "CoordinationResponse",
        "type": "dataclass",
        "file_path": "hub/coordinator.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import CoordinationResponse",
          "export": "__all__.append('CoordinationResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "HubCoordinator",
        "type": "class",
        "file_path": "hub/coordinator.py",
        "line_number": 61,
        "methods": [
          "__init__",
          "register_handler",
          "get_module_status",
          "get_registered_operations"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import HubCoordinator",
          "export": "__all__.append('HubCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceInterface",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 17,
        "methods": [
          "get_service_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import ServiceInterface",
          "export": "__all__.append('ServiceInterface')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('serviceinterface', ServiceInterface())"
        }
      ]
    },
    {
      "entity": {
        "name": "ServiceRegistry",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 26,
        "methods": [
          "__init__",
          "register_service",
          "register_factory",
          "get_service",
          "has_service",
          "list_services",
          "unregister_service",
          "clear"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import ServiceRegistry",
          "export": "__all__.append('ServiceRegistry')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('serviceregistry', ServiceRegistry())"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryServiceProvider",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 222,
        "methods": [
          "register"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import MemoryServiceProvider",
          "export": "__all__.append('MemoryServiceProvider')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('memoryserviceprovider', MemoryServiceProvider())"
        }
      ]
    },
    {
      "entity": {
        "name": "LearningServiceProvider",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 238,
        "methods": [
          "register"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import LearningServiceProvider",
          "export": "__all__.append('LearningServiceProvider')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('learningserviceprovider', LearningServiceProvider())"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsciousnessServiceProvider",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 254,
        "methods": [
          "register"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import ConsciousnessServiceProvider",
          "export": "__all__.append('ConsciousnessServiceProvider')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('consciousnessserviceprovider', ConsciousnessServiceProvider())"
        }
      ]
    },
    {
      "entity": {
        "name": "IdentityServiceProvider",
        "type": "class",
        "file_path": "hub/service_registry.py",
        "line_number": 270,
        "methods": [
          "register"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "hub/__init__.py",
          "action": "add_export",
          "code": "from .service_registry import IdentityServiceProvider",
          "export": "__all__.append('IdentityServiceProvider')"
        },
        {
          "integration_point": "hub_hub.py",
          "action": "register_service",
          "code": "self.register_service('identityserviceprovider', IdentityServiceProvider())"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalColony",
        "type": "class",
        "file_path": "emotion/colony_emotions.py",
        "line_number": 9,
        "methods": [
          "__init__",
          "_merge_emotions"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .colony_emotions import EmotionalColony",
          "export": "__all__.append('EmotionalColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEmotionTag",
        "type": "class",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import SymbolicEmotionTag",
          "export": "__all__.append('SymbolicEmotionTag')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalSafetyLevel",
        "type": "class",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import EmotionalSafetyLevel",
          "export": "__all__.append('EmotionalSafetyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalAccessContext",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 98,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import EmotionalAccessContext",
          "export": "__all__.append('EmotionalAccessContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEmotionState",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import SymbolicEmotionState",
          "export": "__all__.append('SymbolicEmotionState')"
        }
      ]
    },
    {
      "entity": {
        "name": "DriftRegulationResult",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 126,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import DriftRegulationResult",
          "export": "__all__.append('DriftRegulationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodreamerIsolationResult",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 140,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import CodreamerIsolationResult",
          "export": "__all__.append('CodreamerIsolationResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "DreamSeedEmotionEngine",
        "type": "class",
        "file_path": "emotion/dreamseed_upgrade.py",
        "line_number": 211,
        "methods": [
          "__init__",
          "assign_emotional_tier",
          "inject_symbolic_tags",
          "_calculate_harmony_score",
          "regulate_drift_feedback",
          "isolate_codreamer_affect",
          "enforce_emotional_safety",
          "process_dreamseed_emotion",
          "_log_to_file",
          "get_session_metrics",
          "get_system_health_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_upgrade import DreamSeedEmotionEngine",
          "export": "__all__.append('DreamSeedEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicEmotionTag",
        "type": "class",
        "file_path": "emotion/dreamseed_unified.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_unified import SymbolicEmotionTag",
          "export": "__all__.append('SymbolicEmotionTag')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalSafetyLevel",
        "type": "class",
        "file_path": "emotion/dreamseed_unified.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_unified import EmotionalSafetyLevel",
          "export": "__all__.append('EmotionalSafetyLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedEmotionalAccessContext",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_unified.py",
        "line_number": 102,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_unified import UnifiedEmotionalAccessContext",
          "export": "__all__.append('UnifiedEmotionalAccessContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedSymbolicEmotionState",
        "type": "dataclass",
        "file_path": "emotion/dreamseed_unified.py",
        "line_number": 117,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_unified import UnifiedSymbolicEmotionState",
          "export": "__all__.append('UnifiedSymbolicEmotionState')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedDreamSeedEmotionEngine",
        "type": "class",
        "file_path": "emotion/dreamseed_unified.py",
        "line_number": 192,
        "methods": [
          "__init__",
          "assign_unified_emotional_tier",
          "process_unified_dreamseed_emotion",
          "analyze_emotional_patterns_unified",
          "modulate_emotional_state_unified",
          "_lambda_to_emotional_tier",
          "_get_unified_tier_features",
          "_inject_symbolic_tags_unified",
          "_isolate_codreamer_affect_unified",
          "_enforce_emotional_safety_unified",
          "_regulate_drift_feedback_unified",
          "inject_symbolic_tags",
          "isolate_codreamer_affect",
          "enforce_emotional_safety",
          "regulate_drift_feedback",
          "_calculate_harmony_score",
          "_get_user_emotional_memories",
          "_analyze_dominant_emotions",
          "_analyze_transitions",
          "_analyze_valence_trends",
          "_analyze_symbolic_patterns",
          "_verify_emotion_ownership",
          "_get_emotional_state",
          "_calculate_modulation_strength",
          "_apply_modulation_limits_unified",
          "_update_emotional_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .dreamseed_unified import UnifiedDreamSeedEmotionEngine",
          "export": "__all__.append('UnifiedDreamSeedEmotionEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "UserIntent",
        "type": "dataclass",
        "file_path": "emotion/symbolic_user_intent.py",
        "line_number": 19,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_user_intent import UserIntent",
          "export": "__all__.append('UserIntent')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntentEncoder",
        "type": "class",
        "file_path": "emotion/symbolic_user_intent.py",
        "line_number": 31,
        "methods": [
          "encode"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .symbolic_user_intent import IntentEncoder",
          "export": "__all__.append('IntentEncoder')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionCycler",
        "type": "class",
        "file_path": "emotion/cycler.py",
        "line_number": 17,
        "methods": [
          "__init__",
          "next_emotion"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/__init__.py",
          "action": "add_export",
          "code": "from .cycler import EmotionCycler",
          "export": "__all__.append('EmotionCycler')"
        }
      ]
    },
    {
      "entity": {
        "name": "EchoSeverity",
        "type": "class",
        "file_path": "emotion/tools/emotional_echo_detector.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/tools/__init__.py",
          "action": "add_export",
          "code": "from .emotional_echo_detector import EchoSeverity",
          "export": "__all__.append('EchoSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "EmotionalSequence",
        "type": "dataclass",
        "file_path": "emotion/tools/emotional_echo_detector.py",
        "line_number": 105,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/tools/__init__.py",
          "action": "add_export",
          "code": "from .emotional_echo_detector import EmotionalSequence",
          "export": "__all__.append('EmotionalSequence')"
        }
      ]
    },
    {
      "entity": {
        "name": "RecurringMotif",
        "type": "dataclass",
        "file_path": "emotion/tools/emotional_echo_detector.py",
        "line_number": 119,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/tools/__init__.py",
          "action": "add_export",
          "code": "from .emotional_echo_detector import RecurringMotif",
          "export": "__all__.append('RecurringMotif')"
        }
      ]
    },
    {
      "entity": {
        "name": "LoopReport",
        "type": "dataclass",
        "file_path": "emotion/tools/emotional_echo_detector.py",
        "line_number": 134,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/tools/__init__.py",
          "action": "add_export",
          "code": "from .emotional_echo_detector import LoopReport",
          "export": "__all__.append('LoopReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "ArchetypeDetector",
        "type": "class",
        "file_path": "emotion/tools/emotional_echo_detector.py",
        "line_number": 151,
        "methods": [
          "__init__",
          "_compile_patterns",
          "detect_archetype",
          "_calculate_pattern_match",
          "_direct_sequence_match",
          "_order_sensitive_match",
          "_lcs_length",
          "_simple_semantic_match"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "emotion/tools/__init__.py",
          "action": "add_export",
          "code": "from .emotional_echo_detector import ArchetypeDetector",
          "export": "__all__.append('ArchetypeDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineType",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 35,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import EngineType",
          "export": "__all__.append('EngineType')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineStatus",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import EngineStatus",
          "export": "__all__.append('EngineStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "RegistryEvent",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import RegistryEvent",
          "export": "__all__.append('RegistryEvent')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('registryevent', RegistryEvent())"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineCapability",
        "type": "dataclass",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 75,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import EngineCapability",
          "export": "__all__.append('EngineCapability')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineInfo",
        "type": "dataclass",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 86,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import EngineInfo",
          "export": "__all__.append('EngineInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "RegistryConfig",
        "type": "dataclass",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 112,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import RegistryConfig",
          "export": "__all__.append('RegistryConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "QueryFilter",
        "type": "dataclass",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 127,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import QueryFilter",
          "export": "__all__.append('QueryFilter')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthChecker",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 138,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import HealthChecker",
          "export": "__all__.append('HealthChecker')"
        }
      ]
    },
    {
      "entity": {
        "name": "IntelligenceEngineRegistry",
        "type": "class",
        "file_path": "interfaces/registries/intelligence_engine_registry.py",
        "line_number": 147,
        "methods": [
          "__init__",
          "register_engine",
          "unregister_engine",
          "query_engines",
          "get_engine",
          "update_engine_status",
          "record_heartbeat",
          "update_engine_metrics",
          "get_engines_by_capability",
          "get_engines_by_type",
          "set_health_checker",
          "add_event_handler",
          "start_monitoring",
          "stop_monitoring",
          "get_registry_metrics",
          "save_registry_state",
          "_update_indices",
          "_matches_filter",
          "_validate_access",
          "_validate_engine_access",
          "_generate_access_token",
          "_fire_event",
          "_monitor_engines",
          "_check_engine_heartbeats",
          "_perform_health_checks",
          "_check_engine_health"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/registries/__init__.py",
          "action": "add_export",
          "code": "from .intelligence_engine_registry import IntelligenceEngineRegistry",
          "export": "__all__.append('IntelligenceEngineRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "ThoughtProcessingRequest",
        "type": "class",
        "file_path": "interfaces/api/lambda_bot_api_integration.py",
        "line_number": 30,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/__init__.py",
          "action": "add_export",
          "code": "from .lambda_bot_api_integration import ThoughtProcessingRequest",
          "export": "__all__.append('ThoughtProcessingRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotOrchestrationRequest",
        "type": "class",
        "file_path": "interfaces/api/lambda_bot_api_integration.py",
        "line_number": 34,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/__init__.py",
          "action": "add_export",
          "code": "from .lambda_bot_api_integration import \u039bBotOrchestrationRequest",
          "export": "__all__.append('\u039bBotOrchestrationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasServicer",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/server.py",
        "line_number": 11,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .server import LukhasServicer",
          "export": "__all__.append('LukhasServicer')"
        },
        {
          "integration_point": "interfaces_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasservicer', LukhasServicer())"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasServiceServicer",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2_grpc.py",
        "line_number": 20,
        "methods": [
          "__init__",
          "Process",
          "StreamProcess",
          "CheckHealth"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2_grpc import LukhasServiceServicer",
          "export": "__all__.append('LukhasServiceServicer')"
        },
        {
          "integration_point": "interfaces_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasserviceservicer', LukhasServiceServicer())"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessServiceServicer",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2_grpc.py",
        "line_number": 109,
        "methods": [
          "__init__",
          "AssessAwareness"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2_grpc import AwarenessServiceServicer",
          "export": "__all__.append('AwarenessServiceServicer')"
        },
        {
          "integration_point": "interfaces_hub.py",
          "action": "register_service",
          "code": "self.register_service('awarenessserviceservicer', AwarenessServiceServicer())"
        }
      ]
    },
    {
      "entity": {
        "name": "IntelligenceRegistryServicer",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2_grpc.py",
        "line_number": 151,
        "methods": [
          "__init__",
          "RegisterEngine",
          "QueryEngines"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2_grpc import IntelligenceRegistryServicer",
          "export": "__all__.append('IntelligenceRegistryServicer')"
        },
        {
          "integration_point": "interfaces_hub.py",
          "action": "register_service",
          "code": "self.register_service('intelligenceregistryservicer', IntelligenceRegistryServicer())"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasServiceStub",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2_grpc.py",
        "line_number": 250,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2_grpc import LukhasServiceStub",
          "export": "__all__.append('LukhasServiceStub')"
        },
        {
          "integration_point": "interfaces_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasservicestub', LukhasServiceStub())"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasGRPCClient",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/client.py",
        "line_number": 7,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .client import LukhasGRPCClient",
          "export": "__all__.append('LukhasGRPCClient')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthRequest",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 95,
        "methods": [
          "__init__",
          "HasField",
          "SerializeToString"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import HealthRequest",
          "export": "__all__.append('HealthRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "HealthResponse",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 108,
        "methods": [
          "__init__",
          "HasField",
          "SerializeToString"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import HealthResponse",
          "export": "__all__.append('HealthResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessRequest",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 133,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import AwarenessRequest",
          "export": "__all__.append('AwarenessRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessResponse",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 143,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import AwarenessResponse",
          "export": "__all__.append('AwarenessResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineRegistrationRequest",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 156,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import EngineRegistrationRequest",
          "export": "__all__.append('EngineRegistrationRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineRegistrationResponse",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 167,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import EngineRegistrationResponse",
          "export": "__all__.append('EngineRegistrationResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineQueryRequest",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 177,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import EngineQueryRequest",
          "export": "__all__.append('EngineQueryRequest')"
        }
      ]
    },
    {
      "entity": {
        "name": "EngineQueryResponse",
        "type": "class",
        "file_path": "interfaces/api/v1/grpc/pb2.py",
        "line_number": 186,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/grpc/__init__.py",
          "action": "add_export",
          "code": "from .pb2 import EngineQueryResponse",
          "export": "__all__.append('EngineQueryResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProcessingMode",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/models.py",
        "line_number": 10,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/__init__.py",
          "action": "add_export",
          "code": "from .models import ProcessingMode",
          "export": "__all__.append('ProcessingMode')"
        }
      ]
    },
    {
      "entity": {
        "name": "MetricsResponse",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/models.py",
        "line_number": 60,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/__init__.py",
          "action": "add_export",
          "code": "from .models import MetricsResponse",
          "export": "__all__.append('MetricsResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "CapabilityAnnouncement",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/models.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/__init__.py",
          "action": "add_export",
          "code": "from .models import CapabilityAnnouncement",
          "export": "__all__.append('CapabilityAnnouncement')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskAnnouncement",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/models.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/__init__.py",
          "action": "add_export",
          "code": "from .models import TaskAnnouncement",
          "export": "__all__.append('TaskAnnouncement')"
        }
      ]
    },
    {
      "entity": {
        "name": "AuthMiddleware",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/middleware.py",
        "line_number": 57,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/__init__.py",
          "action": "add_export",
          "code": "from .middleware import AuthMiddleware",
          "export": "__all__.append('AuthMiddleware')"
        }
      ]
    },
    {
      "entity": {
        "name": "CapabilityAnnouncement",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/routers/tasks.py",
        "line_number": 14,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/routers/__init__.py",
          "action": "add_export",
          "code": "from .tasks import CapabilityAnnouncement",
          "export": "__all__.append('CapabilityAnnouncement')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskAnnouncement",
        "type": "class",
        "file_path": "interfaces/api/v1/rest/routers/tasks.py",
        "line_number": 19,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/api/v1/rest/routers/__init__.py",
          "action": "add_export",
          "code": "from .tasks import TaskAnnouncement",
          "export": "__all__.append('TaskAnnouncement')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessType",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 29,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import AwarenessType",
          "export": "__all__.append('AwarenessType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtocolStatus",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 52,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import ProtocolStatus",
          "export": "__all__.append('ProtocolStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessInput",
        "type": "dataclass",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import AwarenessInput",
          "export": "__all__.append('AwarenessInput')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessOutput",
        "type": "dataclass",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import AwarenessOutput",
          "export": "__all__.append('AwarenessOutput')"
        }
      ]
    },
    {
      "entity": {
        "name": "SessionContext",
        "type": "dataclass",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 94,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import SessionContext",
          "export": "__all__.append('SessionContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessAssessor",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 107,
        "methods": [
          "get_supported_types",
          "get_assessor_info"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import AwarenessAssessor",
          "export": "__all__.append('AwarenessAssessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "AwarenessProtocolInterface",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 126,
        "methods": [
          "get_session_status",
          "register_assessor"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import AwarenessProtocolInterface",
          "export": "__all__.append('AwarenessProtocolInterface')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultAwarenessProtocol",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 164,
        "methods": [
          "__init__",
          "_initialize_builtin_assessors",
          "get_session_status",
          "register_assessor",
          "_generate_session_id",
          "get_protocol_metrics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import DefaultAwarenessProtocol",
          "export": "__all__.append('DefaultAwarenessProtocol')"
        }
      ]
    },
    {
      "entity": {
        "name": "DefaultAwarenessAssessor",
        "type": "class",
        "file_path": "interfaces/protocols/awareness_protocol.py",
        "line_number": 314,
        "methods": [
          "__init__",
          "get_supported_types",
          "get_assessor_info",
          "_calculate_confidence",
          "_determine_tier",
          "_generate_request_id",
          "_generate_symbolic_signature"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "interfaces/protocols/__init__.py",
          "action": "add_export",
          "code": "from .awareness_protocol import DefaultAwarenessAssessor",
          "export": "__all__.append('DefaultAwarenessAssessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumValidator",
        "type": "class",
        "file_path": "quantum/validator.py",
        "line_number": 54,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .validator import QuantumValidator",
          "export": "__all__.append('QuantumValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumWaveform",
        "type": "dataclass",
        "file_path": "quantum/quantum_waveform.py",
        "line_number": 27,
        "methods": [
          "collapse",
          "_request_recursive_dream"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_waveform import QuantumWaveform",
          "export": "__all__.append('QuantumWaveform')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAGISystem",
        "type": "class",
        "file_path": "quantum/system_orchestrator.py",
        "line_number": 47,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .system_orchestrator import QuantumAGISystem",
          "export": "__all__.append('QuantumAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSecurityLevel",
        "type": "class",
        "file_path": "quantum/web_integration.py",
        "line_number": 58,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .web_integration import QuantumSecurityLevel",
          "export": "__all__.append('QuantumSecurityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumWebSession",
        "type": "dataclass",
        "file_path": "quantum/web_integration.py",
        "line_number": 65,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .web_integration import QuantumWebSession",
          "export": "__all__.append('QuantumWebSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumWebSecurity",
        "type": "class",
        "file_path": "quantum/web_integration.py",
        "line_number": 77,
        "methods": [
          "__init__",
          "_initialize_quantum_random",
          "_generate_quantum_signature",
          "_xor_encrypt"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .web_integration import QuantumWebSecurity",
          "export": "__all__.append('QuantumWebSecurity')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumWebAuthenticator",
        "type": "class",
        "file_path": "quantum/web_integration.py",
        "line_number": 265,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .web_integration import QuantumWebAuthenticator",
          "export": "__all__.append('QuantumWebAuthenticator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 56,
        "methods": [
          "__init__",
          "_create_mock_quantum_core",
          "_create_mock_bio_coordinator",
          "_create_simple_bio_coordinator",
          "_prepare_consciousness_signal",
          "_combine_quantum_outputs",
          "_extract_consciousness_insights",
          "_process_consciousness_fallback",
          "_update_processing_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import QuantumCoordinator",
          "export": "__all__.append('QuantumCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumCore",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 166,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import MockQuantumCore",
          "export": "__all__.append('MockQuantumCore')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBioCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 179,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import MockBioCoordinator",
          "export": "__all__.append('MockBioCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SimpleBioCoordinator",
        "type": "class",
        "file_path": "quantum/coordinator.py",
        "line_number": 194,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .coordinator import SimpleBioCoordinator",
          "export": "__all__.append('SimpleBioCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "UnifiedQuantumConfig",
        "type": "dataclass",
        "file_path": "quantum/system.py",
        "line_number": 56,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .system import UnifiedQuantumConfig",
          "export": "__all__.append('UnifiedQuantumConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "SymbolicDimension",
        "type": "class",
        "file_path": "quantum/metadata.py",
        "line_number": 49,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .metadata import SymbolicDimension",
          "export": "__all__.append('SymbolicDimension')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMetadata",
        "type": "dataclass",
        "file_path": "quantum/metadata.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .metadata import QuantumMetadata",
          "export": "__all__.append('QuantumMetadata')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMetadataManager",
        "type": "class",
        "file_path": "quantum/metadata.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "get_metadata_statistics"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .metadata import QuantumMetadataManager",
          "export": "__all__.append('QuantumMetadataManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('quantummetadatamanager', QuantumMetadataManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumUIOptimizer",
        "type": "class",
        "file_path": "quantum/ui_generator.py",
        "line_number": 42,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .ui_generator import QuantumUIOptimizer",
          "export": "__all__.append('QuantumUIOptimizer')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComplianceFramework",
        "type": "class",
        "file_path": "quantum/ethics_engine.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .ethics_engine import ComplianceFramework",
          "export": "__all__.append('ComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalSeverity",
        "type": "class",
        "file_path": "quantum/ethics_engine.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .ethics_engine import EthicalSeverity",
          "export": "__all__.append('EthicalSeverity')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEthicalState",
        "type": "dataclass",
        "file_path": "quantum/ethics_engine.py",
        "line_number": 85,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .ethics_engine import QuantumEthicalState",
          "export": "__all__.append('QuantumEthicalState')"
        }
      ]
    },
    {
      "entity": {
        "name": "SystemState",
        "type": "dataclass",
        "file_path": "quantum/awareness_system.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .awareness_system import SystemState",
          "export": "__all__.append('SystemState')"
        }
      ]
    },
    {
      "entity": {
        "name": "MutationType",
        "type": "class",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 61,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import MutationType",
          "export": "__all__.append('MutationType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CompressionLevel",
        "type": "class",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import CompressionLevel",
          "export": "__all__.append('CompressionLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryNucleotide",
        "type": "dataclass",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import MemoryNucleotide",
          "export": "__all__.append('MemoryNucleotide')"
        }
      ]
    },
    {
      "entity": {
        "name": "MemoryMutation",
        "type": "dataclass",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import MemoryMutation",
          "export": "__all__.append('MemoryMutation')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumMemoryFold",
        "type": "dataclass",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 105,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import QuantumMemoryFold",
          "export": "__all__.append('QuantumMemoryFold')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumHealixMapper",
        "type": "class",
        "file_path": "quantum/healix_mapper.py",
        "line_number": 119,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .healix_mapper import QuantumHealixMapper",
          "export": "__all__.append('QuantumHealixMapper')"
        }
      ]
    },
    {
      "entity": {
        "name": "ParameterSets",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto.py",
        "line_number": 51,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto import ParameterSets",
          "export": "__all__.append('ParameterSets')"
        }
      ]
    },
    {
      "entity": {
        "name": "PostQuantumCryptoEngine",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto.py",
        "line_number": 60,
        "methods": [
          "__init__",
          "verify_identity_claim",
          "create_identity_proof",
          "derive_session_keys",
          "rotate_keys",
          "_protect_memory",
          "_secure_cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto import PostQuantumCryptoEngine",
          "export": "__all__.append('PostQuantumCryptoEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockBioOrchestrator",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 85,
        "methods": [
          "register_oscillator"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import MockBioOrchestrator",
          "export": "__all__.append('MockBioOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumBioOscillator",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 87,
        "methods": [
          "__init__",
          "get_coherence",
          "measure_entanglement",
          "create_superposition"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import MockQuantumBioOscillator",
          "export": "__all__.append('MockQuantumBioOscillator')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumAwarenessSystem",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 100,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import MockQuantumAwarenessSystem",
          "export": "__all__.append('MockQuantumAwarenessSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumDreamAdapter",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 103,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import MockQuantumDreamAdapter",
          "export": "__all__.append('MockQuantumDreamAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumBioCoordinator",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 109,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import MockQuantumBioCoordinator",
          "export": "__all__.append('MockQuantumBioCoordinator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioOptimizationConfig",
        "type": "dataclass",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 122,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import QuantumBioOptimizationConfig",
          "export": "__all__.append('QuantumBioOptimizationConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioMetrics",
        "type": "dataclass",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 141,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import QuantumBioMetrics",
          "export": "__all__.append('QuantumBioMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioOptimizationAdapter",
        "type": "class",
        "file_path": "quantum/bio_optimization_adapter.py",
        "line_number": 191,
        "methods": [
          "__init__",
          "_initialize_quantum_bio_systems",
          "_data_to_quantum_vector",
          "_extract_quantum_features",
          "_optimize_mitochondrial_function",
          "_optimize_membrane_potential",
          "_optimize_proton_gradient",
          "_optimize_atp_synthesis",
          "_apply_quantum_coherence",
          "_apply_quantum_entanglement",
          "_should_trigger_dream_cycle",
          "_calculate_current_performance_metrics",
          "_validate_against_targets",
          "_calculate_cycle_metrics",
          "_calculate_system_stability_index",
          "_cache_optimization_results",
          "get_optimization_status",
          "config_to_dict"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_optimization_adapter import QuantumBioOptimizationAdapter",
          "export": "__all__.append('QuantumBioOptimizationAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "OscillatorState",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 46,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import OscillatorState",
          "export": "__all__.append('OscillatorState')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumInspiredGateType",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import QuantumInspiredGateType",
          "export": "__all__.append('QuantumInspiredGateType')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumOscillatorMetrics",
        "type": "dataclass",
        "file_path": "quantum/oscillator.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import QuantumOscillatorMetrics",
          "export": "__all__.append('QuantumOscillatorMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "CORDICProcessor",
        "type": "dataclass",
        "file_path": "quantum/oscillator.py",
        "line_number": 75,
        "methods": [
          "rotate_vector",
          "calculate_phase_alignment"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import CORDICProcessor",
          "export": "__all__.append('CORDICProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "FresnelErrorCorrector",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 112,
        "methods": [
          "__init__",
          "_calculate_fresnel_integrals",
          "_apply_zone_correction"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import FresnelErrorCorrector",
          "export": "__all__.append('FresnelErrorCorrector')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAnnealing",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 167,
        "methods": [
          "__init__",
          "_construct_qubo_matrix",
          "_calculate_qubo_energy",
          "_extract_sync_parameters"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import QuantumAnnealing",
          "export": "__all__.append('QuantumAnnealing')"
        }
      ]
    },
    {
      "entity": {
        "name": "LatticeBasedSecurity",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 255,
        "methods": [
          "__init__",
          "_generate_lattice_basis",
          "verify_quantum_security"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import LatticeBasedSecurity",
          "export": "__all__.append('LatticeBasedSecurity')"
        }
      ]
    },
    {
      "entity": {
        "name": "BiomimeticResonanceEngine",
        "type": "class",
        "file_path": "quantum/oscillator.py",
        "line_number": 298,
        "methods": [
          "__init__",
          "_generate_moral_patterns"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .oscillator import BiomimeticResonanceEngine",
          "export": "__all__.append('BiomimeticResonanceEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAnnealedEthicalConsensus",
        "type": "class",
        "file_path": "quantum/consensus_system.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "_initialize_ethical_embeddings",
          "evaluate",
          "_get_mode_weights",
          "_run_annealing",
          "_anneal",
          "_quantum_perturbation",
          "_calculate_energy",
          "_record_consensus",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .consensus_system import QuantumAnnealedEthicalConsensus",
          "export": "__all__.append('QuantumAnnealedEthicalConsensus')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumState",
        "type": "dataclass",
        "file_path": "quantum/quantum_colony.py",
        "line_number": 24,
        "methods": [
          "normalize",
          "to_probability"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_colony import QuantumState",
          "export": "__all__.append('QuantumState')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAgent",
        "type": "class",
        "file_path": "quantum/quantum_colony.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "_apply_rotation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_colony import QuantumAgent",
          "export": "__all__.append('QuantumAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumColony",
        "type": "class",
        "file_path": "quantum/quantum_colony.py",
        "line_number": 226,
        "methods": [
          "__init__",
          "_generate_neighbor",
          "_prepare_variational_state",
          "_calculate_gradient",
          "_evaluate_qaoa",
          "_aggregate_quantum_results"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_colony import QuantumColony",
          "export": "__all__.append('QuantumColony')"
        }
      ]
    },
    {
      "entity": {
        "name": "AlgorithmType",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import AlgorithmType",
          "export": "__all__.append('AlgorithmType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CryptoOperation",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import CryptoOperation",
          "export": "__all__.append('CryptoOperation')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityConfig",
        "type": "dataclass",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 98,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import SecurityConfig",
          "export": "__all__.append('SecurityConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "CryptoAuditLog",
        "type": "dataclass",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 120,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import CryptoAuditLog",
          "export": "__all__.append('CryptoAuditLog')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumResistantKeyManager",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 131,
        "methods": [
          "__init__",
          "generate_keypair",
          "_gather_enhanced_entropy",
          "_generate_bio_quantum_entropy",
          "_generate_session_id",
          "_log_operation"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import QuantumResistantKeyManager",
          "export": "__all__.append('QuantumResistantKeyManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('quantumresistantkeymanager', QuantumResistantKeyManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "PostQuantumCryptoEngine",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 241,
        "methods": [
          "__init__",
          "_create_classical_signature",
          "_create_pq_signature",
          "_create_enhanced_signature",
          "get_security_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import PostQuantumCryptoEngine",
          "export": "__all__.append('PostQuantumCryptoEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecureMemoryManager",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 552,
        "methods": [
          "__init__",
          "protect_session_data",
          "secure_cleanup"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import SecureMemoryManager",
          "export": "__all__.append('SecureMemoryManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('securememorymanager', SecureMemoryManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumKeyDerivation",
        "type": "class",
        "file_path": "quantum/post_quantum_crypto_enhanced.py",
        "line_number": 582,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .post_quantum_crypto_enhanced import QuantumKeyDerivation",
          "export": "__all__.append('QuantumKeyDerivation')"
        }
      ]
    },
    {
      "entity": {
        "name": "DistributedQuantumSafeOrchestrator",
        "type": "class",
        "file_path": "quantum/distributed_quantum_architecture.py",
        "line_number": 35,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .distributed_quantum_architecture import DistributedQuantumSafeOrchestrator",
          "export": "__all__.append('DistributedQuantumSafeOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecureProcessingNode",
        "type": "class",
        "file_path": "quantum/distributed_quantum_architecture.py",
        "line_number": 65,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [
          null
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .distributed_quantum_architecture import SecureProcessingNode",
          "export": "__all__.append('SecureProcessingNode')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldQR",
        "type": "dataclass",
        "file_path": "quantum/vault_manager.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .vault_manager import VeriFoldQR",
          "export": "__all__.append('VeriFoldQR')"
        }
      ]
    },
    {
      "entity": {
        "name": "EncryptedAPIKey",
        "type": "dataclass",
        "file_path": "quantum/vault_manager.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .vault_manager import EncryptedAPIKey",
          "export": "__all__.append('EncryptedAPIKey')"
        }
      ]
    },
    {
      "entity": {
        "name": "AnonymousCryptoSession",
        "type": "dataclass",
        "file_path": "quantum/vault_manager.py",
        "line_number": 80,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .vault_manager import AnonymousCryptoSession",
          "export": "__all__.append('AnonymousCryptoSession')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSeedPhrase",
        "type": "dataclass",
        "file_path": "quantum/vault_manager.py",
        "line_number": 91,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .vault_manager import QuantumSeedPhrase",
          "export": "__all__.append('QuantumSeedPhrase')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumVaultManager",
        "type": "class",
        "file_path": "quantum/vault_manager.py",
        "line_number": 99,
        "methods": [
          "__init__",
          "_generate_or_load_master_key",
          "create_lambda_id_hash",
          "generate_verifold_qr",
          "_generate_artistic_glyph",
          "_generate_quantum_signature",
          "store_encrypted_api_key",
          "authenticate_and_decrypt_api_key",
          "create_anonymous_crypto_session",
          "store_quantum_seed_phrase",
          "_create_quantum_shards",
          "_verify_qr_authentication",
          "get_anonymous_trading_session",
          "generate_vault_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .vault_manager import QuantumVaultManager",
          "export": "__all__.append('QuantumVaultManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('quantumvaultmanager', QuantumVaultManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaeTopologyType",
        "type": "class",
        "file_path": "quantum/bio_crista_optimizer_adapter.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_crista_optimizer_adapter import CristaeTopologyType",
          "export": "__all__.append('CristaeTopologyType')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaeState",
        "type": "dataclass",
        "file_path": "quantum/bio_crista_optimizer_adapter.py",
        "line_number": 63,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_crista_optimizer_adapter import CristaeState",
          "export": "__all__.append('CristaeState')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaOptimizerAdapter",
        "type": "class",
        "file_path": "quantum/bio_crista_optimizer_adapter.py",
        "line_number": 98,
        "methods": [
          "__init__",
          "_calculate_overall_efficiency_score",
          "_calculate_optimal_density_for_atp",
          "_calculate_simulated_atp_efficiency",
          "_calculate_simulated_membrane_potential",
          "_calculate_optimal_cardiolipin_for_stability",
          "_calculate_optimal_proton_gradient_for_potential",
          "_calculate_simulated_membrane_stability",
          "_find_simulated_balanced_density",
          "_update_cumulative_efficiency_gain",
          "_simulate_crista_optimizer_state",
          "_get_default_cristae_state"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_crista_optimizer_adapter import CristaOptimizerAdapter",
          "export": "__all__.append('CristaOptimizerAdapter')"
        }
      ]
    },
    {
      "entity": {
        "name": "CertificateStatus",
        "type": "class",
        "file_path": "quantum/certificate_manager.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .certificate_manager import CertificateStatus",
          "export": "__all__.append('CertificateStatus')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAlgorithm",
        "type": "class",
        "file_path": "quantum/certificate_manager.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .certificate_manager import QuantumAlgorithm",
          "export": "__all__.append('QuantumAlgorithm')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCertificateManager",
        "type": "class",
        "file_path": "quantum/certificate_manager.py",
        "line_number": 106,
        "methods": [
          "__init__",
          "get_certificate_status",
          "get_all_certificates_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .certificate_manager import QuantumCertificateManager",
          "export": "__all__.append('QuantumCertificateManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('quantumcertificatemanager', QuantumCertificateManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "MockEnhancedQuantumEngine",
        "type": "class",
        "file_path": "quantum/quantum_bio_coordinator.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_coordinator import MockEnhancedQuantumEngine",
          "export": "__all__.append('MockEnhancedQuantumEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockMitochondrialQuantumBridge",
        "type": "class",
        "file_path": "quantum/quantum_bio_coordinator.py",
        "line_number": 69,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_coordinator import MockMitochondrialQuantumBridge",
          "export": "__all__.append('MockMitochondrialQuantumBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumSynapticGate",
        "type": "class",
        "file_path": "quantum/quantum_bio_coordinator.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_coordinator import MockQuantumSynapticGate",
          "export": "__all__.append('MockQuantumSynapticGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockNeuroplasticityModulator",
        "type": "class",
        "file_path": "quantum/quantum_bio_coordinator.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_coordinator import MockNeuroplasticityModulator",
          "export": "__all__.append('MockNeuroplasticityModulator')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionTokenType",
        "type": "class",
        "file_path": "quantum/attention_economics.py",
        "line_number": 23,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .attention_economics import AttentionTokenType",
          "export": "__all__.append('AttentionTokenType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionToken",
        "type": "dataclass",
        "file_path": "quantum/attention_economics.py",
        "line_number": 34,
        "methods": [
          "calculate_quantum_value"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .attention_economics import AttentionToken",
          "export": "__all__.append('AttentionToken')"
        }
      ]
    },
    {
      "entity": {
        "name": "AttentionBid",
        "type": "dataclass",
        "file_path": "quantum/attention_economics.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .attention_economics import AttentionBid",
          "export": "__all__.append('AttentionBid')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAttentionEconomics",
        "type": "class",
        "file_path": "quantum/attention_economics.py",
        "line_number": 78,
        "methods": [
          "__init__",
          "_get_allowed_uses",
          "_time_of_day_multiplier",
          "_emotional_value_multiplier",
          "_calculate_rarity_multiplier",
          "get_user_attention_balance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .attention_economics import QuantumAttentionEconomics",
          "export": "__all__.append('QuantumAttentionEconomics')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumContext",
        "type": "class",
        "file_path": "quantum/creative_engine.py",
        "line_number": 47,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockQuantumContext",
          "export": "__all__.append('MockQuantumContext')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockCreativeExpression",
        "type": "class",
        "file_path": "quantum/creative_engine.py",
        "line_number": 55,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockCreativeExpression",
          "export": "__all__.append('MockCreativeExpression')"
        }
      ]
    },
    {
      "entity": {
        "name": "MockQuantumHaiku",
        "type": "class",
        "file_path": "quantum/creative_engine.py",
        "line_number": 62,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .creative_engine import MockQuantumHaiku",
          "export": "__all__.append('MockQuantumHaiku')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioCapabilityLevel",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 59,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBioCapabilityLevel",
          "export": "__all__.append('QuantumBioCapabilityLevel')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioResponse",
        "type": "dataclass",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBioResponse",
          "export": "__all__.append('QuantumBioResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumTunnelingEthics",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 80,
        "methods": [
          "__init__",
          "quantum_ethical_arbitration",
          "_create_ethical_wavefunction",
          "_collapse_wavefunction",
          "_calculate_relevance",
          "_calculate_tunneling_probabilities",
          "_calculate_ethical_resonance"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumTunnelingEthics",
          "export": "__all__.append('QuantumTunnelingEthics')"
        }
      ]
    },
    {
      "entity": {
        "name": "ProtonMotiveProcessor",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 205,
        "methods": [
          "__init__",
          "create_attention_gradient",
          "synthesize_symbolic_atp",
          "_calculate_proton_concentration",
          "_generate_attention_flow",
          "_calculate_atp_potential",
          "_calculate_processing_cost"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import ProtonMotiveProcessor",
          "export": "__all__.append('ProtonMotiveProcessor')"
        }
      ]
    },
    {
      "entity": {
        "name": "CristaeTopologyManager",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 341,
        "methods": [
          "__init__",
          "optimize_cristae_topology",
          "_analyze_topology_efficiency",
          "_design_optimal_cristae",
          "_apply_cristae_transformation",
          "_apply_tubular_folding",
          "_apply_lamellar_folding",
          "_apply_hybrid_folding",
          "_calculate_atp_distribution",
          "_calculate_improvement"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import CristaeTopologyManager",
          "export": "__all__.append('CristaeTopologyManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('cristaetopologymanager', CristaeTopologyManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBiologicalAGI",
        "type": "class",
        "file_path": "quantum/abas_quantum_specialist.py",
        "line_number": 537,
        "methods": [
          "__init__",
          "_passes_ethical_arbitration",
          "_classify_processing_type",
          "_calculate_bio_confidence",
          "_calculate_quantum_coherence",
          "_generate_cellular_signature",
          "_update_biological_metrics",
          "_advance_capability_level",
          "get_biological_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .abas_quantum_specialist import QuantumBiologicalAGI",
          "export": "__all__.append('QuantumBiologicalAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "GlobalComplianceFramework",
        "type": "class",
        "file_path": "quantum/quantum_oscillator.py",
        "line_number": 45,
        "methods": [
          "__init__",
          "fetch_live_compliance_updates",
          "compliance_score",
          "check_compliance",
          "log_violation",
          "activate_safeguards",
          "recalibrate_safeguards",
          "initiate_emergency_shutdown"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_oscillator import GlobalComplianceFramework",
          "export": "__all__.append('GlobalComplianceFramework')"
        }
      ]
    },
    {
      "entity": {
        "name": "EthicalHierarchy",
        "type": "class",
        "file_path": "quantum/quantum_oscillator.py",
        "line_number": 154,
        "methods": [
          "__init__",
          "adapt_weights",
          "get_priority_weights"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_oscillator import EthicalHierarchy",
          "export": "__all__.append('EthicalHierarchy')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEthicalHandler",
        "type": "class",
        "file_path": "quantum/quantum_oscillator.py",
        "line_number": 190,
        "methods": [
          "__init__",
          "create_ethical_circuit",
          "measure_ethical_state",
          "explain_decision",
          "fallback_protocol",
          "symbolic_fallback_ethics",
          "human_review_required"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_oscillator import QuantumEthicalHandler",
          "export": "__all__.append('QuantumEthicalHandler')"
        },
        {
          "integration_point": "event_bus.py",
          "action": "register_handler",
          "code": "self.event_bus.register_handler('quantumethicalhandler', QuantumEthicalHandler())"
        }
      ]
    },
    {
      "entity": {
        "name": "LegalComplianceLayer",
        "type": "class",
        "file_path": "quantum/quantum_oscillator.py",
        "line_number": 258,
        "methods": [
          "__init__",
          "validate_operation",
          "check_transparency",
          "check_data_protection",
          "check_bias"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_oscillator import LegalComplianceLayer",
          "export": "__all__.append('LegalComplianceLayer')"
        }
      ]
    },
    {
      "entity": {
        "name": "LucasAGI",
        "type": "class",
        "file_path": "quantum/quantum_oscillator.py",
        "line_number": 286,
        "methods": [
          "__init__",
          "play_sound",
          "process_decision",
          "recalibrate_autonomy",
          "_modulate_ethical_weights",
          "compute_system_health_factor",
          "compute_context_entropy",
          "adaptive_context_simplification",
          "_human_oversight_protocol",
          "_safe_fallback_response",
          "_analyze_context",
          "_anonymize_data",
          "_synthesize_output",
          "monitor_post_market",
          "check_adversarial_input",
          "assess_stakeholder_impact",
          "modulate_emotional_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_oscillator import LucasAGI",
          "export": "__all__.append('LucasAGI')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCreativeBridge",
        "type": "class",
        "file_path": "quantum/creative_integration.py",
        "line_number": 61,
        "methods": [
          "__init__",
          "get_system_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .creative_integration import QuantumCreativeBridge",
          "export": "__all__.append('QuantumCreativeBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumBioConfig",
        "type": "dataclass",
        "file_path": "quantum/layer.py",
        "line_number": 114,
        "methods": [
          "__post_init__"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .layer import QuantumBioConfig",
          "export": "__all__.append('QuantumBioConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "SelfAwareAgent",
        "type": "class",
        "file_path": "quantum/bio_system.py",
        "line_number": 289,
        "methods": [
          "__init__",
          "evaluate_performance",
          "calculate_coherence",
          "adapt_models",
          "get_self_assessment_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_system import SelfAwareAgent",
          "export": "__all__.append('SelfAwareAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumThreat",
        "type": "dataclass",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 74,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import QuantumThreat",
          "export": "__all__.append('QuantumThreat')"
        }
      ]
    },
    {
      "entity": {
        "name": "SecurityAssessment",
        "type": "dataclass",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import SecurityAssessment",
          "export": "__all__.append('SecurityAssessment')"
        }
      ]
    },
    {
      "entity": {
        "name": "PostQuantumCryptographyEngine",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 98,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import PostQuantumCryptographyEngine",
          "export": "__all__.append('PostQuantumCryptographyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "BioSymbolicThreatDetector",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 161,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import BioSymbolicThreatDetector",
          "export": "__all__.append('BioSymbolicThreatDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumVulnerabilityAnalyzer",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 243,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import QuantumVulnerabilityAnalyzer",
          "export": "__all__.append('QuantumVulnerabilityAnalyzer')"
        }
      ]
    },
    {
      "entity": {
        "name": "AdaptiveSecurityOrchestrator",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 351,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import AdaptiveSecurityOrchestrator",
          "export": "__all__.append('AdaptiveSecurityOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039bBotQuantumSecurityOrchestrator",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 410,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import \u039bBotQuantumSecurityOrchestrator",
          "export": "__all__.append('\u039bBotQuantumSecurityOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LatticeBasedCrypto",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 508,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import LatticeBasedCrypto",
          "export": "__all__.append('LatticeBasedCrypto')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultivariateCrypto",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 511,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import MultivariateCrypto",
          "export": "__all__.append('MultivariateCrypto')"
        }
      ]
    },
    {
      "entity": {
        "name": "HashBasedSignatures",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 514,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import HashBasedSignatures",
          "export": "__all__.append('HashBasedSignatures')"
        }
      ]
    },
    {
      "entity": {
        "name": "CodeBasedCrypto",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 517,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import CodeBasedCrypto",
          "export": "__all__.append('CodeBasedCrypto')"
        }
      ]
    },
    {
      "entity": {
        "name": "IsogenyCrypto",
        "type": "class",
        "file_path": "quantum/\u039bBot_quantum_security.py",
        "line_number": 520,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .\u039bBot_quantum_security import IsogenyCrypto",
          "export": "__all__.append('IsogenyCrypto')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumSafeAuditBlockchain",
        "type": "class",
        "file_path": "quantum/safe_blockchain.py",
        "line_number": 42,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .safe_blockchain import QuantumSafeAuditBlockchain",
          "export": "__all__.append('QuantumSafeAuditBlockchain')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConsciousness\u039bBot",
        "type": "class",
        "file_path": "quantum/main.py",
        "line_number": 47,
        "methods": [
          "__init__",
          "get_consciousness_state"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .main import QuantumConsciousness\u039bBot",
          "export": "__all__.append('QuantumConsciousness\u039bBot')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskType",
        "type": "class",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import TaskType",
          "export": "__all__.append('TaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIBotType",
        "type": "class",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 77,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import AGIBotType",
          "export": "__all__.append('AGIBotType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIBotInstance",
        "type": "dataclass",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 84,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import AGIBotInstance",
          "export": "__all__.append('AGIBotInstance')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIOrchestratorMetrics",
        "type": "class",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 97,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import MultiAGIOrchestratorMetrics",
          "export": "__all__.append('MultiAGIOrchestratorMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGITask",
        "type": "dataclass",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 111,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import MultiAGITask",
          "export": "__all__.append('MultiAGITask')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIResponse",
        "type": "dataclass",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 125,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import MultiAGIResponse",
          "export": "__all__.append('MultiAGIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIOrchestrator",
        "type": "class",
        "file_path": "quantum/bio_multi_orchestrator.py",
        "line_number": 168,
        "methods": [
          "__init__",
          "_initialize_mitochondrial_network_sim",
          "_discover_and_register_agi_bots",
          "_initialize_bot_metrics",
          "_select_optimal_bots_for_task",
          "_synthesize_collaborative_response",
          "_create_synthesized_content_from_responses",
          "_calculate_bot_response_weight",
          "_calculate_collaboration_quality_metric",
          "_calculate_response_consensus_level",
          "_calculate_response_diversity_score",
          "_calculate_bot_specialization_match_score",
          "_update_orchestration_and_bot_metrics",
          "get_orchestration_system_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .bio_multi_orchestrator import MultiAGIOrchestrator",
          "export": "__all__.append('MultiAGIOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumGlyphRegistry",
        "type": "class",
        "file_path": "quantum/quantum_glyph_registry.py",
        "line_number": 21,
        "methods": [
          "__init__",
          "register_glyph_state",
          "get_glyph_state",
          "list_glyphs",
          "sync_cluster_states",
          "recombine_dreams"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_glyph_registry import QuantumGlyphRegistry",
          "export": "__all__.append('QuantumGlyphRegistry')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusAlgorithm",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 55,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ConsensusAlgorithm",
          "export": "__all__.append('ConsensusAlgorithm')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumLikeStateType",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import QuantumLikeStateType",
          "export": "__all__.append('QuantumLikeStateType')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentState",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 71,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ComponentState",
          "export": "__all__.append('ComponentState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusPhase",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 79,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ConsensusPhase",
          "export": "__all__.append('ConsensusPhase')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusProposal",
        "type": "dataclass",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 158,
        "methods": [
          "add_signature",
          "add_vote"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ConsensusProposal",
          "export": "__all__.append('ConsensusProposal')"
        }
      ]
    },
    {
      "entity": {
        "name": "ComponentInfo",
        "type": "dataclass",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 177,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ComponentInfo",
          "export": "__all__.append('ComponentInfo')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumConsensusSystem",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 185,
        "methods": [
          "__init__",
          "_get_default_initial_state",
          "_validate_quantum_like_state",
          "_sign_proposal",
          "_evaluate_proposal",
          "_verify_signature",
          "get_current_state",
          "get_consensus_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import QuantumConsensusSystem",
          "export": "__all__.append('QuantumConsensusSystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "PartitionDetector",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 564,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import PartitionDetector",
          "export": "__all__.append('PartitionDetector')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConsensusMetrics",
        "type": "class",
        "file_path": "quantum/quantum_consensus_system_enhanced.py",
        "line_number": 588,
        "methods": [
          "__init__",
          "record_consensus",
          "get_summary"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_consensus_system_enhanced import ConsensusMetrics",
          "export": "__all__.append('ConsensusMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "\u039biDProfile",
        "type": "dataclass",
        "file_path": "quantum/api_manager.py",
        "line_number": 62,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import \u039biDProfile",
          "export": "__all__.append('\u039biDProfile')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumAPIKey",
        "type": "dataclass",
        "file_path": "quantum/api_manager.py",
        "line_number": 73,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import QuantumAPIKey",
          "export": "__all__.append('QuantumAPIKey')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldGlyph",
        "type": "dataclass",
        "file_path": "quantum/api_manager.py",
        "line_number": 87,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import VeriFoldGlyph",
          "export": "__all__.append('VeriFoldGlyph')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumCrypto",
        "type": "class",
        "file_path": "quantum/api_manager.py",
        "line_number": 96,
        "methods": [
          "generate_quantum_key",
          "derive_key_from_\u03bbid",
          "encrypt_api_key",
          "decrypt_api_key"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import QuantumCrypto",
          "export": "__all__.append('QuantumCrypto')"
        }
      ]
    },
    {
      "entity": {
        "name": "VeriFoldGlyphGenerator",
        "type": "class",
        "file_path": "quantum/api_manager.py",
        "line_number": 151,
        "methods": [
          "create_animated_glyph",
          "_generate_quantum_visual",
          "_get_professional_colors",
          "_generate_professional_symbols",
          "_generate_tier_indicators",
          "_generate_entanglement_lines",
          "_embed_qr_in_visual",
          "_create_steganographic_layer",
          "_generate_animation_sequence",
          "_generate_quantum_signature"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import VeriFoldGlyphGenerator",
          "export": "__all__.append('VeriFoldGlyphGenerator')"
        }
      ]
    },
    {
      "entity": {
        "name": "LUKHASAPIManager",
        "type": "class",
        "file_path": "quantum/api_manager.py",
        "line_number": 289,
        "methods": [
          "__init__",
          "register_\u03bbid_profile",
          "store_api_key",
          "authenticate_with_glyph",
          "generate_professional_verification_glyph",
          "_load_\u03bbid_profile",
          "_verify_glyph_integrity",
          "_update_usage_tracking"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .api_manager import LUKHASAPIManager",
          "export": "__all__.append('LUKHASAPIManager')"
        },
        {
          "integration_point": "quantum_hub.py",
          "action": "register_service",
          "code": "self.register_service('lukhasapimanager', LUKHASAPIManager())"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEntanglement",
        "type": "class",
        "file_path": "quantum/entanglement.py",
        "line_number": 40,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .entanglement import QuantumEntanglement",
          "export": "__all__.append('QuantumEntanglement')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumIntegrationTestSuite",
        "type": "class",
        "file_path": "quantum/phase_quantum_integration.py",
        "line_number": 61,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .phase_quantum_integration import QuantumIntegrationTestSuite",
          "export": "__all__.append('QuantumIntegrationTestSuite')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasTestResult",
        "type": "dataclass",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 67,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import LukhasTestResult",
          "export": "__all__.append('LukhasTestResult')"
        }
      ]
    },
    {
      "entity": {
        "name": "LukhasReport",
        "type": "dataclass",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 78,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import LukhasReport",
          "export": "__all__.append('LukhasReport')"
        }
      ]
    },
    {
      "entity": {
        "name": "BulletproofAGISystem",
        "type": "class",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 108,
        "methods": [
          "__init__",
          "_get_lukhas_id_ref",
          "create_fallback_components",
          "test_quantum_caching",
          "display_final_status"
        ],
        "parameters": [],
        "decorators": [
          "lukhas_tier_required"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import BulletproofAGISystem",
          "export": "__all__.append('BulletproofAGISystem')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackSimpleConfig",
        "type": "dataclass",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 146,
        "methods": [
          "to_dict"
        ],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import FallbackSimpleConfig",
          "export": "__all__.append('FallbackSimpleConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackQuantumAttentionGate",
        "type": "class",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 153,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import FallbackQuantumAttentionGate",
          "export": "__all__.append('FallbackQuantumAttentionGate')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackSelfAwareAgent",
        "type": "class",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 163,
        "methods": [
          "__init__",
          "get_self_assessment_report"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import FallbackSelfAwareAgent",
          "export": "__all__.append('FallbackSelfAwareAgent')"
        }
      ]
    },
    {
      "entity": {
        "name": "FallbackMitochondrialQuantumBridge",
        "type": "class",
        "file_path": "quantum/quantum_bio_bulletproof_system.py",
        "line_number": 170,
        "methods": [
          "__init__",
          "cached_quantum_modulate"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": false
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .quantum_bio_bulletproof_system import FallbackMitochondrialQuantumBridge",
          "export": "__all__.append('FallbackMitochondrialQuantumBridge')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumNeuroSymbolicEngine",
        "type": "class",
        "file_path": "quantum/neuro_symbolic_engine.py",
        "line_number": 542,
        "methods": [
          "__init__",
          "_create_high_confidence_response",
          "_create_medium_confidence_response",
          "_create_low_confidence_response",
          "_should_generate_image",
          "_generate_image_prompt",
          "_generate_suggested_actions",
          "get_processing_stats"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/__init__.py",
          "action": "add_export",
          "code": "from .neuro_symbolic_engine import QuantumNeuroSymbolicEngine",
          "export": "__all__.append('QuantumNeuroSymbolicEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "ZeroKnowledgePrivacyEngine",
        "type": "class",
        "file_path": "quantum/privacy/zero_knowledge_system.py",
        "line_number": 40,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/privacy/__init__.py",
          "action": "add_export",
          "code": "from .zero_knowledge_system import ZeroKnowledgePrivacyEngine",
          "export": "__all__.append('ZeroKnowledgePrivacyEngine')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumEntanglement",
        "type": "class",
        "file_path": "quantum/systems/quantum_entanglement.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/__init__.py",
          "action": "add_export",
          "code": "from .quantum_entanglement import QuantumEntanglement",
          "export": "__all__.append('QuantumEntanglement')"
        }
      ]
    },
    {
      "entity": {
        "name": "QuantumValidator",
        "type": "class",
        "file_path": "quantum/systems/quantum_validator.py",
        "line_number": 44,
        "methods": [
          "__init__",
          "get_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/__init__.py",
          "action": "add_export",
          "code": "from .quantum_validator import QuantumValidator",
          "export": "__all__.append('QuantumValidator')"
        }
      ]
    },
    {
      "entity": {
        "name": "TaskType",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 68,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import TaskType",
          "export": "__all__.append('TaskType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIBotType",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 81,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import AGIBotType",
          "export": "__all__.append('AGIBotType')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIBotInstance",
        "type": "dataclass",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 88,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import AGIBotInstance",
          "export": "__all__.append('AGIBotInstance')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIOrchestratorMetrics",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 101,
        "methods": [
          "__init__"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import MultiAGIOrchestratorMetrics",
          "export": "__all__.append('MultiAGIOrchestratorMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGITask",
        "type": "dataclass",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 116,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import MultiAGITask",
          "export": "__all__.append('MultiAGITask')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIResponse",
        "type": "dataclass",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 130,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import MultiAGIResponse",
          "export": "__all__.append('MultiAGIResponse')"
        }
      ]
    },
    {
      "entity": {
        "name": "MultiAGIOrchestrator",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/multi_orchestrator.py",
        "line_number": 144,
        "methods": [
          "__init__",
          "_initialize_mitochondrial_network",
          "_discover_and_register_agi_bots",
          "_initialize_bot_metrics",
          "_select_optimal_bots",
          "_synthesize_collaborative_response",
          "_create_synthesized_content",
          "_calculate_bot_weight",
          "_calculate_collaboration_quality",
          "_calculate_consensus_level",
          "_calculate_diversity_score",
          "_calculate_specialization_match",
          "_update_orchestration_metrics",
          "get_orchestration_status"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .multi_orchestrator import MultiAGIOrchestrator",
          "export": "__all__.append('MultiAGIOrchestrator')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConnectivityState",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/connectivity_consolidator.py",
        "line_number": 54,
        "methods": [],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .connectivity_consolidator import ConnectivityState",
          "export": "__all__.append('ConnectivityState')"
        }
      ]
    },
    {
      "entity": {
        "name": "ConnectivityMetrics",
        "type": "dataclass",
        "file_path": "quantum/systems/bio_integration/connectivity_consolidator.py",
        "line_number": 64,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .connectivity_consolidator import ConnectivityMetrics",
          "export": "__all__.append('ConnectivityMetrics')"
        }
      ]
    },
    {
      "entity": {
        "name": "AGIConnectivityConfig",
        "type": "dataclass",
        "file_path": "quantum/systems/bio_integration/connectivity_consolidator.py",
        "line_number": 76,
        "methods": [],
        "parameters": [],
        "decorators": [
          "dataclass"
        ],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .connectivity_consolidator import AGIConnectivityConfig",
          "export": "__all__.append('AGIConnectivityConfig')"
        }
      ]
    },
    {
      "entity": {
        "name": "LambdaAGIEliteConnectivityConsolidator",
        "type": "class",
        "file_path": "quantum/systems/bio_integration/connectivity_consolidator.py",
        "line_number": 98,
        "methods": [
          "__init__",
          "_load_connectivity_analysis",
          "_calculate_fusion_potential",
          "_calculate_pattern_confidence",
          "_calculate_quantum_strength",
          "_extract_import_patterns",
          "_update_pattern_statistics",
          "_group_related_modules",
          "_has_imports",
          "_count_broken_imports",
          "_generate_next_steps"
        ],
        "parameters": [],
        "decorators": [],
        "has_docstring": true
      },
      "reason": "Not imported anywhere",
      "activation_suggestions": [
        {
          "file": "quantum/systems/bio_integration/__init__.py",
          "action": "add_export",
          "code": "from .connectivity_consolidator import LambdaAGIEliteConnectivityConsolidator",
          "export": "__all__.append('LambdaAGIEliteConnectivityConsolidator')"
        }
      ]
    }
  ],
  "specific_todos": [
    {
      "priority": "HIGH",
      "entity": "consciousness/quantum_consciousness_hub.py:QuantumConsciousnessHub",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "line": 1,
        "add_import": "from consciousness.quantum_consciousness_hub import QuantumConsciousnessHub"
      }
    },
    {
      "priority": "HIGH",
      "entity": "consciousness/quantum_consciousness_hub.py:QuantumConsciousnessHub",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "class": "QuantumConsciousnessHub",
        "method": "__init__",
        "add_code": "self.quantumconsciousnesshub = QuantumConsciousnessHub()"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/consciousness.py:ConsciousnessCore",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "line": 1,
        "add_import": "from orchestration.brain.consciousness import ConsciousnessCore"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/consciousness.py:ConsciousnessCore",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "class": "QuantumConsciousnessHub",
        "method": "__init__",
        "add_code": "self.consciousnesscore = ConsciousnessCore()"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/attention_economics.py:QuantumAttentionEconomics",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "line": 1,
        "add_import": "from quantum.attention_economics import QuantumAttentionEconomics"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/attention_economics.py:QuantumAttentionEconomics",
      "issue": "Not imported anywhere",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "class": "QuantumConsciousnessHub",
        "method": "__init__",
        "add_code": "self.quantumattentioneconomics = QuantumAttentionEconomics()"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/safety/ai_safety_orchestrator.py:AISafetyOrchestrator",
      "issue": "Not imported anywhere",
      "action": {
        "file": "features/integration/safety/coordinator.py",
        "line": 1,
        "add_import": "from core.safety.ai_safety_orchestrator import AISafetyOrchestrator"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/safety/ai_safety_orchestrator.py:AISafetyOrchestrator",
      "issue": "Not imported anywhere",
      "action": {
        "file": "features/integration/safety/coordinator.py",
        "class": "EnhancedSafetyCoordinator",
        "method": "__init__",
        "add_code": "self.aisafetyorchestrator = AISafetyOrchestrator()"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/modules/nias/__init__.py:NIASCore",
      "issue": "Not imported anywhere",
      "action": {
        "create_file": "nias/nias_hub.py",
        "content": "\"\"\"\nNias System Hub\nCentral coordination for nias subsystem\n\"\"\"\n\nfrom typing import Dict, Any, Optional\nfrom core.modules.nias.__init__ import NIASCore\n\nclass NiasHub:\n    \"\"\"Central hub for nias system coordination\"\"\"\n    \n    def __init__(self):\n        self.services: Dict[str, Any] = {}\n        self.niascore = NIASCore()\n        self._initialize_services()\n    \n    def _initialize_services(self):\n        \"\"\"Initialize all nias services\"\"\"\n        self.register_service('niascore', self.niascore)\n    \n    def register_service(self, name: str, service: Any) -> None:\n        \"\"\"Register a service with the hub\"\"\"\n        self.services[name] = service\n    \n    def get_service(self, name: str) -> Optional[Any]:\n        \"\"\"Get a registered service\"\"\"\n        return self.services.get(name)\n\n# Singleton instance\n_nias_hub_instance = None\n\ndef get_nias_hub() -> NiasHub:\n    \"\"\"Get or create the nias hub instance\"\"\"\n    global _nias_hub_instance\n    if _nias_hub_instance is None:\n        _nias_hub_instance = NiasHub()\n    return _nias_hub_instance\n"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/modules/nias/__init__.py:SymbolicMatcher",
      "issue": "Not imported anywhere",
      "action": {
        "create_file": "nias/nias_hub.py",
        "content": "\"\"\"\nNias System Hub\nCentral coordination for nias subsystem\n\"\"\"\n\nfrom typing import Dict, Any, Optional\nfrom core.modules.nias.__init__ import SymbolicMatcher\n\nclass NiasHub:\n    \"\"\"Central hub for nias system coordination\"\"\"\n    \n    def __init__(self):\n        self.services: Dict[str, Any] = {}\n        self.symbolicmatcher = SymbolicMatcher()\n        self._initialize_services()\n    \n    def _initialize_services(self):\n        \"\"\"Initialize all nias services\"\"\"\n        self.register_service('symbolicmatcher', self.symbolicmatcher)\n    \n    def register_service(self, name: str, service: Any) -> None:\n        \"\"\"Register a service with the hub\"\"\"\n        self.services[name] = service\n    \n    def get_service(self, name: str) -> Optional[Any]:\n        \"\"\"Get a registered service\"\"\"\n        return self.services.get(name)\n\n# Singleton instance\n_nias_hub_instance = None\n\ndef get_nias_hub() -> NiasHub:\n    \"\"\"Get or create the nias hub instance\"\"\"\n    global _nias_hub_instance\n    if _nias_hub_instance is None:\n        _nias_hub_instance = NiasHub()\n    return _nias_hub_instance\n"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/bio_symbolic_orchestrator.py:BioSymbolicOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/bio_symbolic_orchestrator.py",
        "class": "BioSymbolicOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "bio/symbolic/fallback_systems.py:BioSymbolicFallbackManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "bio/symbolic/fallback_systems.py",
        "class": "BioSymbolicFallbackManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/base.py:OrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/base.py",
        "class": "OrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/id.py:LukhosIDManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/id.py",
        "class": "LukhosIDManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/cluster_sharding.py:ShardManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/cluster_sharding.py",
        "class": "ShardManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/enhanced_swarm.py:EnhancedSwarmHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/enhanced_swarm.py",
        "class": "EnhancedSwarmHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/bio_symbolic_swarm_hub.py:BioSymbolicSwarmHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/bio_symbolic_swarm_hub.py",
        "class": "BioSymbolicSwarmHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/practical_optimizations.py:ResourceManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/practical_optimizations.py",
        "class": "ResourceManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/core_utilities.py:ConsistencyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/core_utilities.py",
        "class": "ConsistencyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/quantized_cycle_manager.py:QuantizedCycleManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/quantized_cycle_manager.py",
        "class": "QuantizedCycleManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/apis/drift_monitoring_api.py:AlertManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/apis/drift_monitoring_api.py",
        "class": "AlertManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/quantum_identity_manager.py:QuantumIdentityManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/quantum_identity_manager.py",
        "class": "QuantumIdentityManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/swarm_identity_orchestrator.py:SwarmIdentityOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/swarm_identity_orchestrator.py",
        "class": "SwarmIdentityOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/tiered_state_management.py:StateCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/tiered_state_management.py",
        "class": "StateCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/agent_coordination.py:SkillRegistry",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/agent_coordination.py",
        "class": "SkillRegistry",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/tier_aware_colony_proxy.py:ColonyProxyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/tier_aware_colony_proxy.py",
        "class": "ColonyProxyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/state_management.py:StateManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/state_management.py",
        "class": "StateManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/spine/integration_orchestrator.py:LukhasIntegrationOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/spine/integration_orchestrator.py",
        "class": "LukhasIntegrationOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/personality/personality.py:PersonalityManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/personality/personality.py",
        "class": "PersonalityManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/safety/ai_safety_orchestrator.py:AISafetyOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/safety/ai_safety_orchestrator.py",
        "class": "AISafetyOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/ai/integration_manager.py:AIIntegrationManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/ai/integration_manager.py",
        "class": "AIIntegrationManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/quantum_memory_manager.py:QuantumMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/quantum_memory_manager.py",
        "class": "QuantumMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/systems/memory_advanced_manager.py:AdvancedMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/systems/memory_advanced_manager.py",
        "class": "AdvancedMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/performance/orchestrator.py:PerformanceOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/performance/orchestrator.py",
        "class": "PerformanceOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/abas_quantum_specialist.py:CristaeTopologyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/abas_quantum_specialist.py",
        "class": "CristaeTopologyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "core/services/location/geofencing_manager.py:GeofencingManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "core/services/location/geofencing_manager.py",
        "class": "GeofencingManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "voice/context_aware_voice_modular.py:MemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "voice/context_aware_voice_modular.py",
        "class": "MemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py:DreamMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "creativity/dream/oneiric_engine/oneiric_core/engine/dream_engine_fastapi.py",
        "class": "DreamMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "consciousness/systems/integrator.py:EnhancedMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "consciousness/systems/integrator.py",
        "class": "EnhancedMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/base_manager.py:BaseMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/base_manager.py",
        "class": "BaseMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/distributed_state_manager.py:DistributedStateManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/distributed_state_manager.py",
        "class": "DistributedStateManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/distributed_state_manager.py:MultiNodeStateManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/distributed_state_manager.py",
        "class": "MultiNodeStateManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/drift_memory_manager.py:DriftMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/drift_memory_manager.py",
        "class": "DriftMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/emotional_memory_manager.py:EmotionalMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/emotional_memory_manager.py",
        "class": "EmotionalMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/emotional_memory_manager_unified.py:UnifiedEmotionalMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/emotional_memory_manager_unified.py",
        "class": "UnifiedEmotionalMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/systems/attention_memory_layer.py:MemoryAttentionOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/systems/attention_memory_layer.py",
        "class": "MemoryAttentionOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/systems/memory_orchestrator.py:AGIMemoryOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/systems/memory_orchestrator.py",
        "class": "AGIMemoryOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/memory_orchestrator.py:MemoryOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/memory_orchestrator.py",
        "class": "MemoryOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/systems/simple_store.py:UnifiedMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/systems/simple_store.py",
        "class": "UnifiedMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "memory/systems/symbolic_delta_compression.py:SymbolicDeltaCompressionManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "memory/systems/symbolic_delta_compression.py",
        "class": "SymbolicDeltaCompressionManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/interface.py:ConsentManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/interface.py",
        "class": "ConsentManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "examples/orchestration_src/demo_orchestrator.py:DemoOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "examples/orchestration_src/demo_orchestrator.py",
        "class": "DemoOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/deployment_package.py:TestOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/deployment_package.py",
        "class": "TestOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/api/api.py:QRSManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/api/api.py",
        "class": "QRSManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/brain_identity_connector.py:MockRegistry",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/brain_identity_connector.py",
        "class": "MockRegistry",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/swarm/tier_aware_swarm_hub.py:TierAwareSwarmHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/swarm/tier_aware_swarm_hub.py",
        "class": "TierAwareSwarmHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/api/api.py:BiometricIntegrationManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/api/api.py",
        "class": "BiometricIntegrationManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/sent/consent_manager.py:LambdaConsentManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/sent/consent_manager.py",
        "class": "LambdaConsentManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/sent/consent_history.py:ConsentHistoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/sent/consent_history.py",
        "class": "ConsentHistoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/sent/symbolic_scopes.py:SymbolicScopesManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/sent/symbolic_scopes.py",
        "class": "SymbolicScopesManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/qrs/session_replay.py:SessionReplayManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/qrs/session_replay.py",
        "class": "SessionReplayManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/onboarding/onboarding_config.py:OnboardingConfigManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/onboarding/onboarding_config.py",
        "class": "OnboardingConfigManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/api/onboarding_api.py:EnhancedOnboardingManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/api/onboarding_api.py",
        "class": "EnhancedOnboardingManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/core/sing/cross_device_manager.py:CrossDeviceTokenManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/core/sing/cross_device_manager.py",
        "class": "CrossDeviceTokenManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/api/controllers/lambd_id_controller.py:LambdaTierManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/api/controllers/lambd_id_controller.py",
        "class": "LambdaTierManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/auth/qrg_generators.py:LUKHASQRGManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/auth/qrg_generators.py",
        "class": "LUKHASQRGManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/auth/cultural_profile_manager.py:CulturalProfileManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/auth/cultural_profile_manager.py",
        "class": "CulturalProfileManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "identity/backend/verifold/verifold_hash_utils.py:KeyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "identity/backend/verifold/verifold_hash_utils.py",
        "class": "KeyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "creativity/creative_q_expression.py:CollaborativeCreativityOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "creativity/creative_q_expression.py",
        "class": "CollaborativeCreativityOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "creativity/quantum_creative_types.py:SwarmCreativityOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "creativity/quantum_creative_types.py",
        "class": "SwarmCreativityOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/colony_orchestrator.py:ColonyOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/colony_orchestrator.py",
        "class": "ColonyOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "creativity/dream/colony_dream_coordinator.py:ColonyDreamCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "creativity/dream/colony_dream_coordinator.py",
        "class": "ColonyDreamCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "bridge/integration_bridge.py:CoreRegistryMock",
      "issue": "Hub missing registration method",
      "action": {
        "file": "bridge/integration_bridge.py",
        "class": "CoreRegistryMock",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "bridge/shared_state.py:SharedStateManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "bridge/shared_state.py",
        "class": "SharedStateManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "consciousness/cognitive_architecture_controller.py:CognitiveResourceManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "consciousness/cognitive_architecture_controller.py",
        "class": "CognitiveResourceManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "consciousness/quantum_consciousness_hub.py:QuantumConsciousnessHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "consciousness/quantum_consciousness_hub.py",
        "class": "QuantumConsciousnessHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "consciousness/systems/integrator.py:PersonaManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "consciousness/systems/integrator.py",
        "class": "PersonaManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/identity_manager.py:IdentityManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/identity_manager.py",
        "class": "IdentityManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/memory_integration_orchestrator.py:MemoryIntegrationOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/memory_integration_orchestrator.py",
        "class": "MemoryIntegrationOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/memory/memory_fold.py:VisionPromptManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/memory/memory_fold.py",
        "class": "VisionPromptManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/memory/memory_fold.py:TierManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/memory/memory_fold.py",
        "class": "TierManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/integration/system_coordinator.py:SystemCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/integration/system_coordinator.py",
        "class": "SystemCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/integration/executive_decision_integrator.py:WorkflowOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/integration/executive_decision_integrator.py",
        "class": "WorkflowOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/integration/executive_decision_integrator.py:CEOAttitudeIntegrationHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/integration/executive_decision_integrator.py",
        "class": "CEOAttitudeIntegrationHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/integration/safety/coordinator.py:EnhancedSafetyCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/integration/safety/coordinator.py",
        "class": "EnhancedSafetyCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/security/dast_orchestrator.py:EnhancedDASTOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/security/dast_orchestrator.py",
        "class": "EnhancedDASTOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/integration/meta_cognitive/meta_cognitive.py:EnhancedMetaCognitiveOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/integration/meta_cognitive/meta_cognitive.py",
        "class": "EnhancedMetaCognitiveOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/data_manager/crud_operations.py:DataManagerCRUD",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/data_manager/crud_operations.py",
        "class": "DataManagerCRUD",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "features/crista_optimizer/topology_manager.py:TopologyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "features/crista_optimizer/topology_manager.py",
        "class": "TopologyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "reasoning/systems/id_reasoning_engine.py:LukhasIdManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "reasoning/systems/id_reasoning_engine.py",
        "class": "LukhasIdManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/MultiBrainSymphony.py:MultiBrainSymphonyOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/MultiBrainSymphony.py",
        "class": "MultiBrainSymphonyOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "reasoning/LBot_reasoning_processed.py:\u039bBotAdvancedReasoningOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "reasoning/LBot_reasoning_processed.py",
        "class": "\u039bBotAdvancedReasoningOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "reasoning/LBot_reasoning_processed.py:CrossBrainReasoningOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "reasoning/LBot_reasoning_processed.py",
        "class": "CrossBrainReasoningOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "dashboard/core/self_healing_manager.py:SelfHealingManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "dashboard/core/self_healing_manager.py",
        "class": "SelfHealingManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/privacy_manager.py:PrivacyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/privacy_manager.py",
        "class": "PrivacyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "voice/voice_profiling.py:VoiceProfileManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "voice/voice_profiling.py",
        "class": "VoiceProfileManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "examples/identity/qrg_standalone_demo.py:LUKHASStandaloneQRGManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "examples/identity/qrg_standalone_demo.py",
        "class": "LUKHASStandaloneQRGManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "examples/identity/lukhus_qrg_complete_demo.py:MockCulturalProfileManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "examples/identity/lukhus_qrg_complete_demo.py",
        "class": "MockCulturalProfileManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "examples/ethics/lambda_governor_demo.py:MockDreamCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "examples/ethics/lambda_governor_demo.py",
        "class": "MockDreamCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "examples/ethics/lambda_governor_demo.py:MockMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "examples/ethics/lambda_governor_demo.py",
        "class": "MockMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/integration_hub.py:SystemIntegrationHub",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/integration_hub.py",
        "class": "SystemIntegrationHub",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/system_orchestrator.py:SystemOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/system_orchestrator.py",
        "class": "SystemOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/system_orchestrator.py:SystemOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/system_orchestrator.py",
        "class": "SystemOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrate_orchestrators.py:OrchestratorMigrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrate_orchestrators.py",
        "class": "OrchestratorMigrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/resonance_orchestrator.py:ResonanceOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/resonance_orchestrator.py",
        "class": "ResonanceOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/resonance_orchestrator.py:ResonanceOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/resonance_orchestrator.py",
        "class": "ResonanceOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/module_orchestrator.py:ModuleOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/module_orchestrator.py",
        "class": "ModuleOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/module_orchestrator.py:ModuleOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/module_orchestrator.py",
        "class": "ModuleOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/master_orchestrator.py:MasterOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/master_orchestrator.py",
        "class": "MasterOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/endocrine_orchestrator.py:EndocrineOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/endocrine_orchestrator.py",
        "class": "EndocrineOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/agent_orchestrator.py:AgentOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/agent_orchestrator.py",
        "class": "AgentOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/orchestrator_core.py:LukhasOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/orchestrator_core.py",
        "class": "LukhasOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/example_agents.py:CoordinatorAgent",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/example_agents.py",
        "class": "CoordinatorAgent",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/quorum_orchestrator.py:QuorumOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/quorum_orchestrator.py",
        "class": "QuorumOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/base.py:OrchestratorState",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/base.py",
        "class": "OrchestratorState",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/base.py:OrchestratorMetrics",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/base.py",
        "class": "OrchestratorMetrics",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/config/orchestrator_flags.py:OrchestratorFlags",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/config/orchestrator_flags.py",
        "class": "OrchestratorFlags",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/config/migration_router.py:ShadowOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/config/migration_router.py",
        "class": "ShadowOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/config/migration_router.py:OrchestratorRouter",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/config/migration_router.py",
        "class": "OrchestratorRouter",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/config/production_config.py:ProductionOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/config/production_config.py",
        "class": "ProductionOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/integration/human_in_the_loop_orchestrator.py:HumanInTheLoopOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/integration/human_in_the_loop_orchestrator.py",
        "class": "HumanInTheLoopOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/agents/adaptive_orchestrator.py:AdaptiveOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/agents/adaptive_orchestrator.py",
        "class": "AdaptiveOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/specialized/component_orchestrator.py:ComponentOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/specialized/component_orchestrator.py",
        "class": "ComponentOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/specialized/lambda_bot_orchestrator.py:\u039bBotEliteOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/specialized/lambda_bot_orchestrator.py",
        "class": "\u039bBotEliteOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/specialized/content_enterprise_orchestrator.py:ContentEnterpriseOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/specialized/content_enterprise_orchestrator.py",
        "class": "ContentEnterpriseOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/specialized/orchestrator_emotion_engine.py:LukhasOrchestratorEmotionEngine",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/specialized/orchestrator_emotion_engine.py",
        "class": "LukhasOrchestratorEmotionEngine",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/memory_orchestrator.py:MemoryOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/memory_orchestrator.py",
        "class": "MemoryOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/ethics_orchestrator.py:UnifiedEthicsOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/ethics_orchestrator.py",
        "class": "UnifiedEthicsOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/brain_orchestrator.py:BrainOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/brain_orchestrator.py",
        "class": "BrainOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/migrated/memory_integration_orchestrator.py:MemoryIntegrationOrchestratorConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/migrated/memory_integration_orchestrator.py",
        "class": "MemoryIntegrationOrchestratorConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/multi_brain_orchestrator.py:MultiBrainOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/multi_brain_orchestrator.py",
        "class": "MultiBrainOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/eu_ai_transparency.py:TransparencyOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/eu_ai_transparency.py",
        "class": "TransparencyOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/research_awareness_engine.py:SwarmIntelligenceCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/research_awareness_engine.py",
        "class": "SwarmIntelligenceCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/autonomous_github_manager.py:GitHubNotification",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/autonomous_github_manager.py",
        "class": "GitHubNotification",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/autonomous_github_manager.py:AdvancedAutonomousGitHubManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/autonomous_github_manager.py",
        "class": "AdvancedAutonomousGitHubManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/github_vulnerability_manager.py:GitHubVulnerabilityManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/github_vulnerability_manager.py",
        "class": "GitHubVulnerabilityManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/brain_collapse_manager.py:BrainCollapseManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/brain_collapse_manager.py",
        "class": "BrainCollapseManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/colony_coordinator.py:BrainColonyCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/colony_coordinator.py",
        "class": "BrainColonyCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/orchestrator.py:LukhasAGIOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/orchestrator.py",
        "class": "LukhasAGIOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/experience_manager.py:ExperienceManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/experience_manager.py",
        "class": "ExperienceManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/compliance_registry.py:ComplianceRegistry",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/compliance_registry.py",
        "class": "ComplianceRegistry",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/compliance/ai_compliance_manager.py:AIComplianceManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/compliance/ai_compliance_manager.py",
        "class": "AIComplianceManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/mesh/cognitive_mesh_coordinator.py:CognitiveMeshCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/mesh/cognitive_mesh_coordinator.py",
        "class": "CognitiveMeshCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/core/orchestrator.py:AgiBrainOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/core/orchestrator.py",
        "class": "AgiBrainOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/spine/main_loop.py:GoalManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/spine/main_loop.py",
        "class": "GoalManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/prediction/predictive_resource_manager.py:PredictiveResourceManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/prediction/predictive_resource_manager.py",
        "class": "PredictiveResourceManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/orchestrator_core_oxn.py:OrchestratorCore",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/orchestrator_core_oxn.py",
        "class": "OrchestratorCore",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/monitoring/performance.py:CacheManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/monitoring/performance.py",
        "class": "CacheManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/monitoring/performance.py:ThreadPoolManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/monitoring/performance.py",
        "class": "ThreadPoolManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/monitoring/performance.py:AsyncTaskManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/monitoring/performance.py",
        "class": "AsyncTaskManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/brain/data/consent_manager.py:ConsentTierManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/brain/data/consent_manager.py",
        "class": "ConsentTierManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/master_orchestrator_alt.py:MasterMultiBrainOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/master_orchestrator_alt.py",
        "class": "MasterMultiBrainOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/master_orchestrator.py:LukhASMasterOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/master_orchestrator.py",
        "class": "LukhASMasterOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "orchestration/core_modules/process_orchestrator.py:ProcessOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "orchestration/core_modules/process_orchestrator.py",
        "class": "ProcessOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "interfaces/registries/intelligence_engine_registry.py:RegistryEvent",
      "issue": "Hub missing registration method",
      "action": {
        "file": "interfaces/registries/intelligence_engine_registry.py",
        "class": "RegistryEvent",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "interfaces/registries/intelligence_engine_registry.py:RegistryConfig",
      "issue": "Hub missing registration method",
      "action": {
        "file": "interfaces/registries/intelligence_engine_registry.py",
        "class": "RegistryConfig",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/coordinator.py:QuantumCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/coordinator.py",
        "class": "QuantumCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/coordinator.py:MockBioCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/coordinator.py",
        "class": "MockBioCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/coordinator.py:SimpleBioCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/coordinator.py",
        "class": "SimpleBioCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/metadata.py:QuantumMetadataManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/metadata.py",
        "class": "QuantumMetadataManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/bio_optimization_adapter.py:MockQuantumBioCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/bio_optimization_adapter.py",
        "class": "MockQuantumBioCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/post_quantum_crypto_enhanced.py:QuantumResistantKeyManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/post_quantum_crypto_enhanced.py",
        "class": "QuantumResistantKeyManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/post_quantum_crypto_enhanced.py:SecureMemoryManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/post_quantum_crypto_enhanced.py",
        "class": "SecureMemoryManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/distributed_quantum_architecture.py:DistributedQuantumSafeOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/distributed_quantum_architecture.py",
        "class": "DistributedQuantumSafeOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/vault_manager.py:QuantumVaultManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/vault_manager.py",
        "class": "QuantumVaultManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/certificate_manager.py:QuantumCertificateManager",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/certificate_manager.py",
        "class": "QuantumCertificateManager",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/quantum_bio_coordinator.py:QuantumBioCoordinator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/quantum_bio_coordinator.py",
        "class": "QuantumBioCoordinator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/\u039bBot_quantum_security.py:AdaptiveSecurityOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/\u039bBot_quantum_security.py",
        "class": "AdaptiveSecurityOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/\u039bBot_quantum_security.py:\u039bBotQuantumSecurityOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/\u039bBot_quantum_security.py",
        "class": "\u039bBotQuantumSecurityOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/dast_orchestrator.py:QuantumDASTOrchestrator",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/dast_orchestrator.py",
        "class": "QuantumDASTOrchestrator",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "HIGH",
      "entity": "quantum/systems/bio_integration/multi_orchestrator.py:MultiAGIOrchestratorMetrics",
      "issue": "Hub missing registration method",
      "action": {
        "file": "quantum/systems/bio_integration/multi_orchestrator.py",
        "class": "MultiAGIOrchestratorMetrics",
        "add_method": "def register_service(self, name: str, service: Any) -> None:\n    \"\"\"Register a service with the hub\"\"\"\n    self.services[name] = service"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/digest_extractor.py:DigestExtractor",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .digest_extractor import DigestExtractor",
        "export": "__all__.append('DigestExtractor')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/integration_gap_analyzer.py:IntegrationGapAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .integration_gap_analyzer import IntegrationGapAnalyzer",
        "export": "__all__.append('IntegrationGapAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/module_connectivity_analyzer.py:ModuleConnectivityAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .module_connectivity_analyzer import ModuleConnectivityAnalyzer",
        "export": "__all__.append('ModuleConnectivityAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/cleanup_and_organize.py:WorkspaceOrganizer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .cleanup_and_organize import WorkspaceOrganizer",
        "export": "__all__.append('WorkspaceOrganizer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/import_path_fixer.py:ImportPathAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .import_path_fixer import ImportPathAnalyzer",
        "export": "__all__.append('ImportPathAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/import_path_fixer.py:ImportFixer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .import_path_fixer import ImportFixer",
        "export": "__all__.append('ImportFixer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/path_validator.py:ImportAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .path_validator import ImportAnalyzer",
        "export": "__all__.append('ImportAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/path_validator.py:PathValidator",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .path_validator import PathValidator",
        "export": "__all__.append('PathValidator')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/safe_workspace_analyzer.py:SafeWorkspaceAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .safe_workspace_analyzer import SafeWorkspaceAnalyzer",
        "export": "__all__.append('SafeWorkspaceAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/detailed_integration_mapper.py:DetailedIntegrationMapper",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .detailed_integration_mapper import DetailedIntegrationMapper",
        "export": "__all__.append('DetailedIntegrationMapper')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/deep_code_integration_analyzer.py:CodeEntity",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .deep_code_integration_analyzer import CodeEntity",
        "export": "__all__.append('CodeEntity')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/deep_code_integration_analyzer.py:DeepCodeAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .deep_code_integration_analyzer import DeepCodeAnalyzer",
        "export": "__all__.append('DeepCodeAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/deep_code_integration_analyzer.py:DeepIntegrationAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .deep_code_integration_analyzer import DeepIntegrationAnalyzer",
        "export": "__all__.append('DeepIntegrationAnalyzer')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/task_tracker.py:TaskTracker",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/__init__.py",
        "action": "add_export",
        "code": "from .task_tracker import TaskTracker",
        "export": "__all__.append('TaskTracker')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:CascadeType",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import CascadeType",
        "export": "__all__.append('CascadeType')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:SymbolicMetrics",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import SymbolicMetrics",
        "export": "__all__.append('SymbolicMetrics')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:PredictionResult",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import PredictionResult",
        "export": "__all__.append('PredictionResult')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:InterventionRecommendation",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import InterventionRecommendation",
        "export": "__all__.append('InterventionRecommendation')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:ProphetSignal",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import ProphetSignal",
        "export": "__all__.append('ProphetSignal')"
      }
    },
    {
      "priority": "MEDIUM",
      "entity": "tools/prediction/prophet_predictor.py:SymbolicTrajectoryAnalyzer",
      "issue": "Not imported anywhere",
      "action": {
        "file": "tools/prediction/__init__.py",
        "action": "add_export",
        "code": "from .prophet_predictor import SymbolicTrajectoryAnalyzer",
        "export": "__all__.append('SymbolicTrajectoryAnalyzer')"
      }
    }
  ]
}