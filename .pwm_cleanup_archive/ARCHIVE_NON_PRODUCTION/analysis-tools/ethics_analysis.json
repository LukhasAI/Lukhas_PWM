{
  "summary": {
    "total_files": 95,
    "connected_files": 49,
    "unused_files": 46,
    "pattern_distribution": {
      "guardian": 13,
      "validator": 29,
      "monitor": 19,
      "compliance": 26,
      "safety": 27,
      "governance": 25,
      "audit": 40,
      "simulation": 19,
      "bridge": 27,
      "emergency": 17
    }
  },
  "similar_groups": [
    [
      "ethics/ethical_safety_alignment.py",
      "ethics/monitor.py",
      "ethics/compliance.py",
      "ethics/intrinsic_governor.py",
      "ethics/compliance_simple.py",
      "ethics/batch_guard.py",
      "ethics/tier_enforcer.py",
      "ethics/audit_ethics_monitor.py",
      "ethics/redteam_sim.py",
      "ethics/decision_node.py",
      "ethics/export_report.py",
      "ethics/ethical_auditor.py",
      "ethics/utils.py",
      "ethics/hitlo_bridge.py",
      "ethics/extreme_ethical_testing.py",
      "ethics/hitlo_bridge_simple.py",
      "ethics/meg_guard.py",
      "ethics/ethics.py",
      "ethics/ethical_reasoning_system.py",
      "ethics/decision_framework.py",
      "ethics/meg_openai_guard.py",
      "ethics/governance_model.py",
      "ethics/ethical_evaluator.py",
      "ethics/dao_community.py",
      "ethics/bases.py",
      "ethics/tools/quantum_mesh_visualizer.py",
      "ethics/tools/lambda_auditor.py",
      "ethics/governor/dao_controller.py",
      "ethics/fallback/ethics_layer.py",
      "ethics/security/emergency_override.py",
      "ethics/security/privacy.py",
      "ethics/training/alignment_overseer.py",
      "ethics/utils/tag_misinterpretation_sim.py",
      "ethics/sentinel/ethical_sentinel_dashboard.py",
      "ethics/safety/entropy_tuning.py",
      "ethics/safety/compliance_hooks.py",
      "ethics/safety/compliance_dashboard.py",
      "ethics/safety/integration_bridge.py",
      "ethics/safety/compliance_digest.py",
      "ethics/safety/compliance_dashboard_visual.py",
      "ethics/simulations/colony_dilemma_simulation.py",
      "ethics/simulations/lambda_shield_tester.py"
    ]
  ],
  "unused_analyses": [
    {
      "path": "ethics/ethical_safety_alignment.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 3776,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/tracing.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [],
      "size": 0,
      "is_test": false
    },
    {
      "path": "ethics/monitor.py",
      "classes": [],
      "functions": [
        "ethics_drift_detect",
        "log_ethics_event",
        "log_self_reflection",
        "self_reflection_report"
      ],
      "imports": [
        "json",
        "datetime",
        "pathlib"
      ],
      "patterns": [
        "guardian",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit"
      ],
      "size": 4180,
      "is_test": false
    },
    {
      "path": "ethics/oscillating_conscience.py",
      "classes": [
        "OscillatingConscience"
      ],
      "functions": [
        "update"
      ],
      "imports": [
        "math",
        "datetime",
        "structlog",
        "bio.base_oscillator"
      ],
      "patterns": [
        "audit"
      ],
      "size": 781,
      "is_test": false
    },
    {
      "path": "ethics/compliance.py",
      "classes": [
        "EthicsViolationType",
        "ComplianceFramework",
        "ComplianceViolation",
        "EthicsValidationResult",
        "EthicsComplianceEngine"
      ],
      "functions": [
        "get_plugin_risk_score",
        "get_violation_history",
        "get_compliance_report"
      ],
      "imports": [
        "asyncio",
        "logging",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "types"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "audit",
        "emergency"
      ],
      "size": 7963,
      "is_test": false
    },
    {
      "path": "ethics/intrinsic_governor.py",
      "classes": [
        "IntrinsicEthicalGovernor"
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "structlog"
      ],
      "patterns": [
        "validator",
        "governance",
        "audit"
      ],
      "size": 634,
      "is_test": false
    },
    {
      "path": "ethics/compliance_simple.py",
      "classes": [
        "EthicsViolationType",
        "ComplianceFramework",
        "ComplianceViolation",
        "EthicsValidationResult",
        "EthicsComplianceEngine"
      ],
      "functions": [
        "get_plugin_risk_score",
        "get_violation_history",
        "get_compliance_report"
      ],
      "imports": [
        "asyncio",
        "logging",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "types"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "audit",
        "emergency"
      ],
      "size": 7964,
      "is_test": false
    },
    {
      "path": "ethics/batch_guard.py",
      "classes": [
        "EthicsLevel",
        "ComplianceStatus",
        "EthicsResult",
        "EthicsBatchGuard"
      ],
      "functions": [
        "create_ethics_guard",
        "validate_batch_ethics",
        "generate_ethics_report"
      ],
      "imports": [
        "typing",
        "enum",
        "dataclasses",
        "json",
        "logging",
        "re"
      ],
      "patterns": [
        "guardian",
        "validator",
        "compliance",
        "safety",
        "governance",
        "audit",
        "bridge"
      ],
      "size": 12013,
      "is_test": false
    },
    {
      "path": "ethics/tier_enforcer.py",
      "classes": [],
      "functions": [
        "tier_required",
        "collapse_kernel",
        "decorator",
        "wrapper"
      ],
      "imports": [
        "functools",
        "logging"
      ],
      "patterns": [
        "validator",
        "audit"
      ],
      "size": 1650,
      "is_test": false
    },
    {
      "path": "ethics/audit_ethics_monitor.py",
      "classes": [],
      "functions": [
        "main"
      ],
      "imports": [
        "sys",
        "os",
        "tools.lukhas_audit",
        "asyncio",
        "tools.lukhas_audit"
      ],
      "patterns": [
        "monitor",
        "audit"
      ],
      "size": 1435,
      "is_test": false
    },
    {
      "path": "ethics/community_feedback.py",
      "classes": [],
      "functions": [
        "load_rules",
        "save_rules",
        "apply_proposal"
      ],
      "imports": [
        "json",
        "pathlib"
      ],
      "patterns": [
        "compliance"
      ],
      "size": 559,
      "is_test": false
    },
    {
      "path": "ethics/redteam_sim.py",
      "classes": [
        "HashableDict"
      ],
      "functions": [
        "parse_prompts_from_file",
        "run_redteam_simulation",
        "main"
      ],
      "imports": [
        "__future__",
        "json",
        "datetime",
        "pathlib",
        "typing",
        "argparse",
        "ethics.ethical_guardian"
      ],
      "patterns": [
        "guardian",
        "validator",
        "safety",
        "audit",
        "emergency",
        "simulation"
      ],
      "size": 3152,
      "is_test": false
    },
    {
      "path": "ethics/_spikethickness.py",
      "classes": [
        "SpikethicknessValidator"
      ],
      "functions": [],
      "imports": [
        "_plotly_utils.basevalidators"
      ],
      "patterns": [
        "validator"
      ],
      "size": 537,
      "is_test": false
    },
    {
      "path": "ethics/decision_node.py",
      "classes": [
        "EthicsNode"
      ],
      "functions": [
        "evaluate_action",
        "get_principle_weights",
        "set_principle_weight",
        "analyze_ethical_trends",
        "evaluate_content",
        "process_message"
      ],
      "imports": [
        "typing",
        "logging",
        "time",
        "hashlib",
        "uuid",
        "numpy",
        "openai"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 30298,
      "is_test": false
    },
    {
      "path": "ethics/export_report.py",
      "classes": [
        "EthicsReportExporter"
      ],
      "functions": [
        "export_ethics_report",
        "export_comprehensive_ethics_report",
        "export_multi_format",
        "generate_dashboard_data",
        "generate_audit_trail",
        "generate_governance_summary"
      ],
      "imports": [
        "json",
        "yaml",
        "csv",
        "datetime",
        "pathlib",
        "typing",
        "hashlib"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 19151,
      "is_test": false
    },
    {
      "path": "ethics/ethical_auditor.py",
      "classes": [
        "AuditContext",
        "AuditResult",
        "EliteEthicalAuditor"
      ],
      "functions": [
        "get_audit_summary"
      ],
      "imports": [
        "json",
        "os",
        "time",
        "hashlib",
        "datetime",
        "typing",
        "pathlib",
        "openai",
        "dataclasses",
        "core.symbolic.drift.drift_score",
        "core.docututor.symbolic_knowledge_core.knowledge_graph",
        "core.docututor.symbolic_knowledge_core.knowledge_graph",
        "re"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 20606,
      "is_test": false
    },
    {
      "path": "ethics/utils.py",
      "classes": [
        "EthicsUtils"
      ],
      "functions": [
        "validate_content_ethics",
        "check_compliance_status",
        "generate_compliance_report",
        "anonymize_metadata"
      ],
      "imports": [
        "json",
        "typing"
      ],
      "patterns": [
        "validator",
        "compliance"
      ],
      "size": 1593,
      "is_test": false
    },
    {
      "path": "ethics/hitlo_bridge.py",
      "classes": [
        "EthicsEscalationRule",
        "EthicsHITLOBridge"
      ],
      "functions": [
        "create_ethics_hitlo_bridge",
        "should_escalate",
        "add_escalation_rule",
        "should_escalate_evaluation",
        "get_metrics",
        "configure_human_oversight",
        "configure_oversight"
      ],
      "imports": [
        "logging",
        "typing",
        "dataclasses",
        "datetime",
        "asyncio",
        "policy_engines.base",
        "orchestration_src.human_in_the_loop_orchestrator"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 23963,
      "is_test": false
    },
    {
      "path": "ethics/extreme_ethical_testing.py",
      "classes": [
        "ExtremEthicalTesting"
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "sys",
        "os",
        "datetime",
        "json",
        "openai",
        "core.config",
        "core.interfaces.as_agent.sys.nias.nias_core",
        "core.interfaces.as_agent.sys.dast.dast_core",
        "brain.abas.abas_core",
        "modules.ai_service_integrations",
        "modules.lukhas_dreams_advanced",
        "traceback"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 29685,
      "is_test": true
    },
    {
      "path": "ethics/hitlo_bridge_simple.py",
      "classes": [
        "HITLOBridge"
      ],
      "functions": [
        "configure_human_oversight",
        "configure_oversight"
      ],
      "imports": [
        "typing",
        "logging"
      ],
      "patterns": [
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 1364,
      "is_test": false
    },
    {
      "path": "ethics/meg_guard.py",
      "classes": [
        "MEGConfig",
        "MEG"
      ],
      "functions": [
        "demo_meg_usage",
        "guard",
        "get_stats",
        "temporary_disable_ethics",
        "critical_operation",
        "decorator",
        "sync_wrapper"
      ],
      "imports": [
        "asyncio",
        "time",
        "logging",
        "functools",
        "typing",
        "dataclasses",
        "contextlib",
        "openai"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 11076,
      "is_test": false
    },
    {
      "path": "ethics/ethics.py",
      "classes": [],
      "functions": [
        "main"
      ],
      "imports": [],
      "patterns": [
        "compliance",
        "governance",
        "audit",
        "bridge"
      ],
      "size": 3598,
      "is_test": false
    },
    {
      "path": "ethics/ethical_reasoning_system.py",
      "classes": [
        "EthicalFramework",
        "MoralPrinciple",
        "StakeholderType",
        "EthicalDilemmaType",
        "MoralJudgment",
        "ValueAlignment",
        "EthicalConstraint",
        "DeontologicalReasoner",
        "ConsequentialistReasoner",
        "ValueAlignmentSystem",
        "EthicalReasoningSystem"
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "json",
        "logging",
        "time",
        "abc",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "typing",
        "uuid",
        "numpy",
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "scipy.stats",
        "scipy.optimize",
        "sklearn.ensemble",
        "sklearn.preprocessing",
        "networkx",
        "pandas",
        "structlog",
        "scipy.spatial.distance",
        "sklearn.cluster",
        "sklearn.manifold",
        "matplotlib.pyplot"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 87833,
      "is_test": false
    },
    {
      "path": "ethics/decision_framework.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7794,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/meg_openai_guard.py",
      "classes": [
        "MEGChatCompletion"
      ],
      "functions": [
        "meg_chat_completion",
        "meg_chat_completion_critical",
        "meg_chat_completion_extended",
        "meg_chat_completion_long",
        "meg_generate_text",
        "meg_complete_with_system",
        "patch_openai_with_meg",
        "unpatch_openai",
        "create"
      ],
      "imports": [
        "logging",
        "typing",
        "meg_guard",
        "openai"
      ],
      "patterns": [
        "guardian",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 10677,
      "is_test": false
    },
    {
      "path": "ethics/governance_model.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7766,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/ethical_evaluator.py",
      "classes": [
        "EthicalEvaluator",
        "CollapseEngine",
        "Memoria"
      ],
      "functions": [
        "evaluate",
        "collapse",
        "store",
        "trace"
      ],
      "imports": [
        "datetime"
      ],
      "patterns": [
        "governance",
        "audit"
      ],
      "size": 1172,
      "is_test": false
    },
    {
      "path": "ethics/dao_community.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 24045,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/bases.py",
      "classes": [
        "ComplianceEngine",
        "ComplianceFramework",
        "ComplianceViolation"
      ],
      "functions": [
        "add_compliance_rule",
        "check_compliance",
        "add_rule",
        "validate_action",
        "to_dict"
      ],
      "imports": [
        "abc",
        "typing",
        "datetime"
      ],
      "patterns": [
        "validator",
        "compliance"
      ],
      "size": 2591,
      "is_test": false
    },
    {
      "path": "ethics/tools/quantum_mesh_visualizer.py",
      "classes": [
        "QuantumMeshVisualizer"
      ],
      "functions": [
        "main",
        "load_entanglement_data",
        "generate_entanglement_heatmap",
        "plot_phase_synchronization",
        "list_active_conflict_pairs",
        "generate_interactive_dashboard",
        "export_visual_summary"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "argparse",
        "logging",
        "datetime",
        "pathlib",
        "typing",
        "numpy",
        "matplotlib.pyplot",
        "matplotlib.patches",
        "matplotlib.colors",
        "seaborn",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "plotly.offline",
        "ethics.quantum_mesh_integrator"
      ],
      "patterns": [
        "monitor",
        "safety",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 41193,
      "is_test": false
    },
    {
      "path": "ethics/tools/lambda_auditor.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 44094,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/governor/dao_controller.py",
      "classes": [
        "DAOGovernanceNode"
      ],
      "functions": [
        "create_proposal",
        "get_proposal",
        "vote_on_proposal"
      ],
      "imports": [
        "typing",
        "logging",
        "time",
        "uuid",
        "numpy"
      ],
      "patterns": [
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7596,
      "is_test": false
    },
    {
      "path": "ethics/fallback/ethics_layer.py",
      "classes": [
        "FallbackEthicsLayer"
      ],
      "functions": [
        "is_allowed"
      ],
      "imports": [
        "__future__",
        "typing"
      ],
      "patterns": [
        "validator",
        "safety",
        "audit"
      ],
      "size": 527,
      "is_test": false
    },
    {
      "path": "ethics/security/emergency_override.py",
      "classes": [],
      "functions": [
        "check_safety_flags",
        "shutdown_systems",
        "log_incident"
      ],
      "imports": [
        "json",
        "os",
        "datetime",
        "settings_loader"
      ],
      "patterns": [
        "validator",
        "compliance",
        "safety",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 2736,
      "is_test": false
    },
    {
      "path": "ethics/security/privacy.py",
      "classes": [
        "PrivacyManager"
      ],
      "functions": [],
      "imports": [
        "logging"
      ],
      "patterns": [
        "compliance",
        "audit"
      ],
      "size": 223,
      "is_test": false
    },
    {
      "path": "ethics/training/alignment_overseer.py",
      "classes": [],
      "functions": [
        "train_overseer_from_scenarios"
      ],
      "imports": [
        "__future__",
        "typing",
        "logging"
      ],
      "patterns": [
        "audit",
        "simulation"
      ],
      "size": 658,
      "is_test": false
    },
    {
      "path": "ethics/utils/tag_misinterpretation_sim.py",
      "classes": [],
      "functions": [
        "simulate_misinterpretation_scenarios"
      ],
      "imports": [
        "__future__",
        "typing",
        "logging"
      ],
      "patterns": [
        "audit",
        "simulation"
      ],
      "size": 1186,
      "is_test": false
    },
    {
      "path": "ethics/sentinel/ethical_sentinel_dashboard.py",
      "classes": [],
      "functions": [
        "initialize_sentinel",
        "create_risk_gauge",
        "create_violation_timeline",
        "create_symbol_health_charts",
        "format_violation"
      ],
      "imports": [
        "streamlit",
        "plotly.graph_objects",
        "plotly.express",
        "plotly.subplots",
        "pandas",
        "numpy",
        "datetime",
        "asyncio",
        "json",
        "pathlib",
        "sys",
        "collections",
        "ethics.sentinel.ethical_drift_sentinel"
      ],
      "patterns": [
        "monitor",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 16480,
      "is_test": false
    },
    {
      "path": "ethics/safety/entropy_tuning.py",
      "classes": [],
      "functions": [
        "final_entropy_tune",
        "recheck_entropy"
      ],
      "imports": [
        "numpy"
      ],
      "patterns": [
        "validator",
        "compliance",
        "safety",
        "audit",
        "bridge"
      ],
      "size": 1224,
      "is_test": false
    },
    {
      "path": "ethics/safety/compliance_hooks.py",
      "classes": [],
      "functions": [
        "compliance_drift_detect",
        "log_compliance_event"
      ],
      "imports": [
        "json",
        "datetime",
        "pathlib",
        "lukhas_governance.policy_manager",
        "lukhas_governance.audit_logger"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "bridge"
      ],
      "size": 4414,
      "is_test": false
    },
    {
      "path": "ethics/safety/compliance_dashboard.py",
      "classes": [],
      "functions": [],
      "imports": [
        "streamlit",
        "json",
        "os",
        "pandas",
        "pathlib",
        "core.interfaces.voice.core.sayit"
      ],
      "patterns": [
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 3507,
      "is_test": false
    },
    {
      "path": "ethics/safety/integration_bridge.py",
      "classes": [
        "LUKHASSafetyBridge"
      ],
      "functions": [],
      "imports": [
        "orchestration.brain.safety_guardrails",
        "compliance.ai_compliance",
        "backend.security.privacy_manager"
      ],
      "patterns": [
        "guardian",
        "validator",
        "compliance",
        "safety",
        "bridge"
      ],
      "size": 1162,
      "is_test": false
    },
    {
      "path": "ethics/safety/compliance_digest.py",
      "classes": [],
      "functions": [
        "load_emergency_logs",
        "generate_digest",
        "plot_bar"
      ],
      "imports": [
        "json",
        "os",
        "collections",
        "datetime",
        "matplotlib.pyplot"
      ],
      "patterns": [
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 3683,
      "is_test": false
    },
    {
      "path": "ethics/safety/compliance_dashboard_visual.py",
      "classes": [],
      "functions": [],
      "imports": [
        "streamlit",
        "pathlib",
        "base64"
      ],
      "patterns": [
        "validator",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 4478,
      "is_test": false
    },
    {
      "path": "ethics/simulations/colony_dilemma_simulation.py",
      "classes": [
        "DivergenceReport"
      ],
      "functions": [
        "measure_divergence"
      ],
      "imports": [
        "asyncio",
        "logging",
        "dataclasses",
        "typing",
        "core.colonies.base_colony",
        "core.colonies.reasoning_colony",
        "core.colonies.memory_colony",
        "core.colonies.creativity_colony",
        "core.colonies.tensor_colony_ops",
        "core.symbolism.tags"
      ],
      "patterns": [
        "audit",
        "emergency",
        "simulation"
      ],
      "size": 3622,
      "is_test": false
    },
    {
      "path": "ethics/simulations/lambda_shield_tester.py",
      "classes": [
        "AttackVectorType",
        "SimulationStatus",
        "SyntheticViolation",
        "FirewallResponse",
        "SimulationReport",
        "LambdaShieldTester",
        "ViolationType",
        "EscalationTier",
        "ActionDecision"
      ],
      "functions": [
        "to_dict",
        "to_dict",
        "calculate_metrics",
        "generate_synthetic_violations",
        "record_response_log",
        "output_firewall_report"
      ],
      "imports": [
        "json",
        "time",
        "uuid",
        "asyncio",
        "argparse",
        "typing",
        "datetime",
        "dataclasses",
        "enum",
        "pathlib",
        "random",
        "numpy",
        "structlog",
        "ethics.sentinel.ethical_drift_sentinel",
        "ethics.governor.lambda_governor",
        "enum"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 43555,
      "is_test": true
    }
  ],
  "connected_analyses": [
    {
      "path": "ethics/compliance_engine.py",
      "classes": [
        "ComplianceEngine"
      ],
      "functions": [
        "anonymize_metadata",
        "should_retain_data",
        "check_voice_data_compliance",
        "validate_content_against_ethical_constraints",
        "generate_compliance_report",
        "get_compliance_status",
        "detect_regulatory_region",
        "update_compliance_settings",
        "get_audit_trail",
        "check_module_compliance",
        "add_laplace_noise"
      ],
      "imports": [
        "time",
        "uuid",
        "logging",
        "json",
        "typing",
        "os",
        "hashlib",
        "openai",
        "random",
        "math",
        "importlib",
        "re"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 36407,
      "is_test": false
    },
    {
      "path": "ethics/service.py",
      "classes": [
        "EthicsService",
        "IdentityClient"
      ],
      "functions": [
        "assess_action",
        "check_compliance",
        "evaluate_safety",
        "assess_action",
        "check_compliance",
        "evaluate_safety",
        "audit_decision",
        "verify_user_access",
        "check_consent",
        "log_activity"
      ],
      "imports": [
        "os",
        "sys",
        "typing",
        "datetime",
        "identity.interface"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 16735,
      "is_test": false
    },
    {
      "path": "ethics/policy_validator.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7766,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/meta_ethics_governor.py",
      "classes": [
        "EthicalFramework",
        "EthicalVerdict",
        "Severity",
        "CulturalContext",
        "EthicalPrinciple",
        "EthicalDecision",
        "EthicalEvaluation",
        "EthicalFrameworkEngine",
        "DeontologicalEngine",
        "ConsequentialistEngine",
        "MetaEthicsGovernor"
      ],
      "functions": [
        "ethical_checkpoint",
        "load_principles",
        "add_principle",
        "load_principles",
        "load_principles",
        "add_ethical_engine",
        "add_event_callback",
        "get_human_review_queue",
        "resolve_human_review",
        "get_status",
        "decorator",
        "instrument_reasoning",
        "get_srd"
      ],
      "imports": [
        "asyncio",
        "json",
        "abc",
        "dataclasses",
        "datetime",
        "enum",
        "pathlib",
        "typing",
        "uuid",
        "structlog",
        "ethics.self_reflective_debugger"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 32048,
      "is_test": false
    },
    {
      "path": "ethics/policy_engine.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7724,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/ethical_guardian.py",
      "classes": [],
      "functions": [
        "ethical_check"
      ],
      "imports": [
        "typing",
        "logging"
      ],
      "patterns": [
        "guardian",
        "validator",
        "safety",
        "audit",
        "simulation"
      ],
      "size": 3361,
      "is_test": false
    },
    {
      "path": "ethics/governance_engine.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 15464,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/compliance_engine20250503213400_p95.py",
      "classes": [
        "Complianceengine"
      ],
      "functions": [
        "anonymize_metadata",
        "should_retain_data",
        "check_voice_data_compliance",
        "validate_content_against_ethical_constraints",
        "generate_compliance_report",
        "get_compliance_status"
      ],
      "imports": [
        "time",
        "uuid",
        "logging",
        "json",
        "typing",
        "os"
      ],
      "patterns": [
        "guardian",
        "validator",
        "compliance",
        "safety",
        "governance",
        "audit",
        "bridge"
      ],
      "size": 8437,
      "is_test": false
    },
    {
      "path": "ethics/policy_manager.py",
      "classes": [],
      "functions": [
        "determine_active_regulations",
        "log_active_regulations"
      ],
      "imports": [],
      "patterns": [
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 5634,
      "is_test": false
    },
    {
      "path": "ethics/ethical_drift_detector.py",
      "classes": [],
      "functions": [
        "load_ethics_config",
        "calculate_weighted_drift_score",
        "apply_violation_tagging",
        "check_escalation_requirements",
        "enrich_trace_metadata",
        "export_ethics_report",
        "detect_ethical_drift",
        "get_system_capabilities",
        "generate_collapse_hash",
        "crypto_trace_index"
      ],
      "imports": [
        "yaml",
        "json",
        "sys",
        "datetime",
        "pathlib",
        "typing",
        "core.symbolic.symbolic_tracer",
        "crypto",
        "hashlib"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 13740,
      "is_test": false
    },
    {
      "path": "ethics/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "importlib",
        "logging"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 36116,
      "is_test": false
    },
    {
      "path": "ethics/ethics_guard.py",
      "classes": [
        "LegalComplianceAssistant"
      ],
      "functions": [
        "check_content_safety",
        "check_privacy_compliance",
        "ethical_review",
        "comprehensive_compliance_check",
        "get_compliance_report",
        "update_rules",
        "anonymize_data"
      ],
      "imports": [
        "typing",
        "datetime",
        "json"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit"
      ],
      "size": 10679,
      "is_test": false
    },
    {
      "path": "ethics/quantum_mesh_integrator.py",
      "classes": [
        "EthicsRiskLevel",
        "EthicsSignalType",
        "EthicalState",
        "EthicsSignal",
        "PhaseEntanglement",
        "QuantumEthicsMeshIntegrator"
      ],
      "functions": [
        "integrate_ethics_mesh",
        "calculate_phase_entanglement_matrix",
        "detect_ethics_phase_conflict",
        "get_mesh_status"
      ],
      "imports": [
        "asyncio",
        "logging",
        "time",
        "json",
        "typing",
        "dataclasses",
        "datetime",
        "pathlib",
        "numpy",
        "enum"
      ],
      "patterns": [
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 29840,
      "is_test": false
    },
    {
      "path": "ethics/self_reflective_debugger.py",
      "classes": [
        "EnhancedAnomalyType",
        "CognitiveHealthStatus",
        "CognitiveState",
        "EnhancedReasoningChain",
        "EnhancedSelfReflectiveDebugger",
        "AnomalyType",
        "SeverityLevel",
        "ReviewTrigger",
        "ReasoningStep",
        "ReasoningAnomaly"
      ],
      "functions": [
        "stop_monitoring",
        "begin_enhanced_reasoning_chain",
        "get_cognitive_health_status",
        "get_enhanced_metrics",
        "get_anomaly_summary"
      ],
      "imports": [
        "asyncio",
        "json",
        "threading",
        "time",
        "hashlib",
        "dataclasses",
        "datetime",
        "enum",
        "pathlib",
        "typing",
        "uuid",
        "structlog",
        "core.integration.governance.__init__",
        "creativity.dream.hyperspace_dream_simulator",
        "reasoning.causal_program_inducer",
        "memory.privacy_preserving_memory_vault",
        "communication.explainability_interface_layer",
        "orchestration.human_in_the_loop_orchestrator",
        "numpy",
        "collections",
        "numpy",
        "numpy",
        "numpy",
        "collections",
        "numpy"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 135996,
      "is_test": false
    },
    {
      "path": "ethics/engine.py",
      "classes": [
        "EthicsEngine"
      ],
      "functions": [
        "evaluate",
        "interpret_score"
      ],
      "imports": [
        "typing",
        "guardian"
      ],
      "patterns": [
        "guardian",
        "validator",
        "safety",
        "simulation"
      ],
      "size": 855,
      "is_test": false
    },
    {
      "path": "ethics/guardian.py",
      "classes": [
        "DefaultGuardian"
      ],
      "functions": [
        "assess_risk"
      ],
      "imports": [
        "typing"
      ],
      "patterns": [
        "guardian",
        "validator",
        "safety",
        "simulation"
      ],
      "size": 524,
      "is_test": false
    },
    {
      "path": "ethics/glyph_ethics_validator.py",
      "classes": [
        "EthicalViolationType",
        "ValidationResult",
        "EthicalConstraint",
        "ValidationReport",
        "GlyphEthicsValidator"
      ],
      "functions": [
        "is_applicable",
        "is_approved",
        "is_safe",
        "validate_glyph_creation",
        "validate_glyph_mutation",
        "validate_glyph_fusion",
        "validate_glyph_decay",
        "get_validation_statistics"
      ],
      "imports": [
        "logging",
        "re",
        "datetime",
        "typing",
        "dataclasses",
        "enum",
        "core.symbolic.glyphs.glyph"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 43238,
      "is_test": false
    },
    {
      "path": "ethics/governance_checker.py",
      "classes": [],
      "functions": [
        "is_fine_tunable",
        "validate_symbolic_integrity",
        "log_governance_trace"
      ],
      "imports": [
        "datetime",
        "os",
        "typing"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation"
      ],
      "size": 5256,
      "is_test": false
    },
    {
      "path": "ethics/governance_validator.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "validator",
        "compliance",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 7822,
      "is_test": false,
      "parse_error": true
    },
    {
      "path": "ethics/meg_bridge.py",
      "classes": [
        "MEGPolicyBridge"
      ],
      "functions": [
        "create_meg_bridge",
        "ethics_decision_to_meg_decision",
        "meg_evaluation_to_ethics_evaluation",
        "get_cultural_context_info",
        "get_meg_status",
        "add_meg_callback",
        "get_human_review_queue"
      ],
      "imports": [
        "logging",
        "typing",
        "dataclasses",
        "datetime",
        "policy_engines.base",
        "meta_ethics_governor"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "bridge"
      ],
      "size": 11892,
      "is_test": false
    },
    {
      "path": "ethics/compliance_validator.py",
      "classes": [
        "ComplianceValidator"
      ],
      "functions": [
        "create_governance_component",
        "get_status",
        "validate"
      ],
      "imports": [
        "asyncio",
        "logging",
        "typing",
        "datetime",
        "asyncio"
      ],
      "patterns": [
        "validator",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 8875,
      "is_test": false
    },
    {
      "path": "ethics/stabilization/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [],
      "size": 29,
      "is_test": false
    },
    {
      "path": "ethics/stabilization/tuner.py",
      "classes": [
        "StabilizationAction",
        "EntanglementTrend",
        "SymbolicStabilizer",
        "AdaptiveEntanglementStabilizer"
      ],
      "functions": [
        "main",
        "add_datapoint",
        "get_trend_slope",
        "is_unstable",
        "get_stabilizer",
        "get_applicable_stabilizers",
        "monitor_entanglement",
        "detect_instability",
        "select_stabilizers",
        "apply_symbolic_correction",
        "emit_tuning_log",
        "get_stabilization_status"
      ],
      "imports": [
        "os",
        "sys",
        "json",
        "argparse",
        "asyncio",
        "logging",
        "datetime",
        "pathlib",
        "typing",
        "dataclasses",
        "collections",
        "numpy",
        "ethics.quantum_mesh_integrator"
      ],
      "patterns": [
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 31640,
      "is_test": false
    },
    {
      "path": "ethics/tools/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [],
      "size": 21,
      "is_test": false
    },
    {
      "path": "ethics/governor/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "lambda_governor"
      ],
      "patterns": [
        "governance",
        "audit"
      ],
      "size": 1057,
      "is_test": false
    },
    {
      "path": "ethics/governor/lambda_governor.py",
      "classes": [
        "ActionDecision",
        "EscalationSource",
        "EscalationPriority",
        "EscalationSignal",
        "ArbitrationResponse",
        "InterventionExecution",
        "LambdaGovernor"
      ],
      "functions": [
        "create_escalation_signal",
        "to_dict",
        "calculate_urgency_score",
        "to_dict",
        "add_log_entry",
        "register_mesh_router",
        "register_dream_coordinator",
        "register_memory_manager",
        "register_subsystem_callback",
        "get_governor_status"
      ],
      "imports": [
        "json",
        "time",
        "asyncio",
        "uuid",
        "typing",
        "datetime",
        "dataclasses",
        "enum",
        "collections",
        "numpy",
        "structlog",
        "pathlib"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 39047,
      "is_test": false
    },
    {
      "path": "ethics/core/shared_ethics_engine.py",
      "classes": [
        "EthicalPrinciple",
        "EthicalSeverity",
        "DecisionType",
        "EthicalConstraint",
        "EthicalDecision",
        "SharedEthicsEngine"
      ],
      "functions": [
        "get_shared_ethics_engine",
        "add_constraint",
        "get_ethics_report"
      ],
      "imports": [
        "asyncio",
        "logging",
        "typing",
        "dataclasses",
        "enum",
        "datetime",
        "json",
        "ethics.seedra",
        "symbolic.core"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "bridge"
      ],
      "size": 20273,
      "is_test": false
    },
    {
      "path": "ethics/core/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "shared_ethics_engine"
      ],
      "patterns": [
        "governance"
      ],
      "size": 499,
      "is_test": false
    },
    {
      "path": "ethics/fallback/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "fallback_ethics_layer"
      ],
      "patterns": [],
      "size": 124,
      "is_test": false
    },
    {
      "path": "ethics/security/main_node_security_engine.py",
      "classes": [
        "MainNodeSecurityEngine"
      ],
      "functions": [
        "init_components",
        "register_event_handlers"
      ],
      "imports": [
        "asyncio",
        "logging",
        "datetime",
        "json",
        "os",
        "sys",
        "voice.speech_processor",
        "frontend.multimodal.image_generator",
        "frontend.interface.adaptive_interface_generator",
        "backend.cognitive.node",
        "backend.learning.meta_learning",
        "backend.core.neuro_symbolic_engine",
        "AID.service.identity_manager",
        "backend.security.privacy_manager",
        "core.config.settings",
        "resource"
      ],
      "patterns": [
        "validator",
        "monitor",
        "audit",
        "emergency"
      ],
      "size": 14543,
      "is_test": false
    },
    {
      "path": "ethics/security/security_engine.py",
      "classes": [
        "SecurityEngine"
      ],
      "functions": [
        "validate_request",
        "detect_threats",
        "sanitize_data"
      ],
      "imports": [
        "secure_utils"
      ],
      "patterns": [
        "validator",
        "safety",
        "audit"
      ],
      "size": 1316,
      "is_test": false
    },
    {
      "path": "ethics/security/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "secure_utils",
        "security_engine",
        "emergency_override"
      ],
      "patterns": [
        "validator",
        "safety",
        "audit",
        "emergency"
      ],
      "size": 484,
      "is_test": false
    },
    {
      "path": "ethics/security/flagship_security_engine.py",
      "classes": [
        "LukhasFlagshipSecurityEngine"
      ],
      "functions": [],
      "imports": [
        "sys",
        "os",
        "json",
        "asyncio",
        "logging",
        "pathlib",
        "typing",
        "safety_guardrails",
        "compliance_registry",
        "symbolic_engine",
        "lukhas_brain",
        "unified_core_system",
        "nias_plugin"
      ],
      "patterns": [
        "guardian",
        "validator",
        "compliance",
        "safety",
        "audit",
        "bridge"
      ],
      "size": 9069,
      "is_test": false
    },
    {
      "path": "ethics/security/secure_utils.py",
      "classes": [
        "SecurityError"
      ],
      "functions": [
        "safe_eval",
        "safe_subprocess_run",
        "sanitize_input",
        "secure_file_path",
        "get_env_var"
      ],
      "imports": [
        "ast",
        "subprocess",
        "shlex",
        "os",
        "typing",
        "logging"
      ],
      "patterns": [
        "validator",
        "safety",
        "audit"
      ],
      "size": 8550,
      "is_test": false
    },
    {
      "path": "ethics/training/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [],
      "size": 32,
      "is_test": false
    },
    {
      "path": "ethics/utils/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [],
      "size": 29,
      "is_test": false
    },
    {
      "path": "ethics/compliance/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "compliance_validator"
      ],
      "patterns": [
        "validator",
        "compliance"
      ],
      "size": 191,
      "is_test": false
    },
    {
      "path": "ethics/compliance/engine.py",
      "classes": [
        "_CorePrivateEthicsEngine",
        "_LucasPrivateEthicsGuard",
        "AdvancedComplianceEthicsEngine"
      ],
      "functions": [
        "evaluate_action",
        "suggest_alternatives",
        "increase_scrutiny_level",
        "reset_scrutiny_level",
        "incorporate_feedback",
        "get_metrics",
        "check_access",
        "log_violation",
        "check_cultural_context",
        "evaluate_action_ethics",
        "evaluate_action",
        "suggest_ethical_alternatives",
        "get_core_ethics_metrics",
        "incorporate_ethics_feedback",
        "anonymize_metadata",
        "should_retain_data",
        "check_voice_data_compliance",
        "validate_content_against_harmful_patterns",
        "generate_compliance_report",
        "check_data_access_permission",
        "check_cultural_appropriateness",
        "perform_ethics_drift_detection",
        "get_overall_compliance_status",
        "get_score"
      ],
      "imports": [
        "logging",
        "json",
        "typing",
        "datetime",
        "time",
        "uuid",
        "os",
        "pathlib"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 42437,
      "is_test": false
    },
    {
      "path": "ethics/sentinel/ethical_drift_sentinel.py",
      "classes": [
        "EscalationTier",
        "ViolationType",
        "EthicalViolation",
        "InterventionAction",
        "EthicalState",
        "EthicalDriftSentinel"
      ],
      "functions": [
        "phase_harmonics_score",
        "to_dict",
        "to_dict",
        "calculate_risk_score",
        "get_sentinel_status",
        "register_symbol",
        "unregister_symbol"
      ],
      "imports": [
        "json",
        "time",
        "asyncio",
        "typing",
        "datetime",
        "dataclasses",
        "enum",
        "collections",
        "numpy",
        "structlog",
        "pathlib"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 31519,
      "is_test": false
    },
    {
      "path": "ethics/safety/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "patterns": [
        "safety"
      ],
      "size": 29,
      "is_test": false
    },
    {
      "path": "ethics/seedra/seedra_core.py",
      "classes": [
        "ConsentLevel",
        "DataSensitivity",
        "SEEDRACore"
      ],
      "functions": [
        "get_seedra"
      ],
      "imports": [
        "asyncio",
        "logging",
        "typing",
        "datetime",
        "enum",
        "hashlib",
        "json"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "audit"
      ],
      "size": 16782,
      "is_test": false
    },
    {
      "path": "ethics/seedra/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "seedra_core"
      ],
      "patterns": [],
      "size": 361,
      "is_test": false
    },
    {
      "path": "ethics/simulations/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "logging",
        "typing"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "audit",
        "simulation"
      ],
      "size": 3545,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "logging",
        "typing",
        "base"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation"
      ],
      "size": 3881,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/integration.py",
      "classes": [
        "GovernanceDecision",
        "PolicyEngineIntegration"
      ],
      "functions": [
        "get_policy_engine",
        "evaluate_with_policies",
        "to_policy_decision",
        "initialize_default_policies",
        "evaluate_governance_decision",
        "add_custom_policy",
        "get_policy_metrics",
        "shutdown"
      ],
      "imports": [
        "logging",
        "typing",
        "logging",
        "typing",
        "dataclasses",
        "base",
        "examples"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "simulation",
        "bridge"
      ],
      "size": 9251,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/base.py",
      "classes": [
        "RiskLevel",
        "Decision",
        "EthicsEvaluation",
        "PolicyValidationError",
        "EthicsPolicy",
        "PolicyRegistry"
      ],
      "functions": [
        "evaluate_decision",
        "get_policy_name",
        "get_policy_version",
        "validate_symbolic_alignment",
        "assess_drift_risk",
        "assess_collapse_risk",
        "initialize",
        "shutdown",
        "get_metrics",
        "register_policy",
        "unregister_policy",
        "evaluate_decision",
        "get_consensus_evaluation",
        "get_active_policies",
        "get_policy_metrics"
      ],
      "imports": [
        "logging",
        "typing",
        "abc",
        "typing",
        "dataclasses",
        "datetime",
        "logging",
        "enum"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation"
      ],
      "size": 17212,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/examples/gpt4_policy.py",
      "classes": [
        "GPT4Config",
        "GPT4Policy"
      ],
      "functions": [
        "get_policy_name",
        "get_policy_version",
        "initialize",
        "evaluate_decision",
        "shutdown"
      ],
      "imports": [
        "logging",
        "typing",
        "time",
        "json",
        "logging",
        "typing",
        "dataclasses",
        "base"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation",
        "bridge"
      ],
      "size": 15821,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/examples/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        "logging",
        "typing",
        "three_laws",
        "gpt4_policy"
      ],
      "patterns": [
        "validator",
        "monitor",
        "compliance",
        "safety",
        "audit",
        "simulation"
      ],
      "size": 3729,
      "is_test": false
    },
    {
      "path": "ethics/policy_engines/examples/three_laws.py",
      "classes": [
        "ThreeLawsPolicy"
      ],
      "functions": [
        "get_policy_name",
        "get_policy_version",
        "evaluate_decision",
        "validate_symbolic_alignment"
      ],
      "imports": [
        "logging",
        "typing",
        "time",
        "logging",
        "typing",
        "base"
      ],
      "patterns": [
        "guardian",
        "validator",
        "monitor",
        "compliance",
        "safety",
        "governance",
        "audit",
        "emergency",
        "simulation"
      ],
      "size": 21874,
      "is_test": false
    }
  ]
}