#!/usr/bin/env python3
"""
ŒõBot Vulnerability Dashboard
==========================
Interactive dashboard for managing your 961 GitHub vulnerabilities systematically.

Features:
- Real-time vulnerability status
- Priority-based recommendations
- Budget-aware automated fixes
- Progress tracking
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any

def load_latest_scan_results() -> Dict[str, Any]:
    """Load the most recent vulnerability scan results"""
    # Find the most recent scan file
    scan_files = [f for f in os.listdir('.') if f.startswith('vulnerability_scan_results_')]
    if not scan_files:
        return None
    
    latest_file = sorted(scan_files)[-1]
    with open(latest_file, 'r') as f:
        return json.load(f)

def generate_dashboard_report(results: Dict[str, Any]) -> str:
    """Generate an interactive dashboard report"""
    if not results:
        return "‚ùå No scan results found. Run: python3 github_vulnerability_manager.py --scan-all"
    
    report = []
    
    # Header
    report.append("‚ïî" + "‚ïê" * 70 + "‚ïó")
    report.append("‚ïë" + " " * 20 + "ŒõBot Vulnerability Dashboard" + " " * 21 + "‚ïë")
    report.append("‚ïë" + " " * 15 + f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}" + " " * 16 + "‚ïë")
    report.append("‚ïö" + "‚ïê" * 70 + "‚ïù")
    report.append("")
    
    # Critical Alert Section
    critical_count = results['critical_vulnerabilities']
    high_count = results['high_vulnerabilities']
    
    if critical_count > 0:
        report.append("üö® CRITICAL ALERT üö®")
        report.append(f"   {critical_count} CRITICAL vulnerabilities require immediate attention!")
        report.append("")
    
    # Summary Statistics
    report.append("üìä VULNERABILITY SUMMARY")
    report.append("‚ïê" * 25)
    report.append(f"üè¢ Total Repositories Scanned: {results['total_repositories']}")
    report.append(f"üîç Total Vulnerabilities Found: {results['total_vulnerabilities']}")
    report.append("")
    
    # Severity Breakdown
    report.append("üéØ SEVERITY BREAKDOWN")
    report.append("‚ïê" * 20)
    report.append(f"üî¥ Critical:  {critical_count:4d} vulnerabilities")
    report.append(f"üü† High:      {high_count:4d} vulnerabilities") 
    report.append(f"üü° Moderate:  {results['moderate_vulnerabilities']:4d} vulnerabilities")
    report.append(f"üü¢ Low:       {results['low_vulnerabilities']:4d} vulnerabilities")
    report.append(f"üîß Auto-fixable: {results['auto_fixable_count']:4d} vulnerabilities")
    report.append("")
    
    # Top Vulnerable Repositories
    report.append("üèÜ MOST VULNERABLE REPOSITORIES")
    report.append("‚ïê" * 35)
    top_repos = sorted(results['repositories'], key=lambda r: r['vulnerability_count'], reverse=True)[:10]
    
    for i, repo in enumerate(top_repos, 1):
        if repo['vulnerability_count'] > 0:
            report.append(f"{i:2d}. {repo['full_name']:35s} ({repo['vulnerability_count']:3d} vulns)")
            report.append(f"    üî¥{repo['critical_count']:2d} üü†{repo['high_count']:2d} üü°{repo['moderate_count']:2d} üü¢{repo['low_count']:2d}")
    
    report.append("")
    
    # Action Recommendations
    report.append("üéØ RECOMMENDED ACTIONS")
    report.append("‚ïê" * 22)
    
    if critical_count > 0:
        report.append("1. üö® URGENT: Fix critical vulnerabilities immediately")
        report.append(f"   Command: python3 github_vulnerability_manager.py --fix-critical")
    
    if results['auto_fixable_count'] > 0:
        report.append("2. üîß QUICK WINS: Auto-fix vulnerabilities")
        report.append(f"   {results['auto_fixable_count']} vulnerabilities can be automatically fixed")
    
    if high_count > 10:
        report.append("3. üéØ PRIORITY: Focus on high-severity vulnerabilities")
        report.append(f"   {high_count} high-severity issues need attention")
    
    # Budget Status
    report.append("")
    report.append("üí∞ BUDGET STATUS")
    report.append("‚ïê" * 15)
    report.append(f"üí≥ Budget Used: ${results.get('budget_used', 0):.4f}")
    report.append(f"üíµ Budget Remaining: ${results.get('budget_remaining', 0.5):.4f}")
    report.append("")
    
    # Next Steps
    report.append("üöÄ NEXT STEPS")
    report.append("‚ïê" * 12)
    report.append("‚Ä¢ Run automated fixes for critical vulnerabilities")
    report.append("‚Ä¢ Set up automated dependency updates") 
    report.append("‚Ä¢ Create security monitoring workflows")
    report.append("‚Ä¢ Schedule weekly vulnerability scans")
    
    return "\n".join(report)

def main():
    """Main dashboard function"""
    print("ü§ñ Loading ŒõBot Vulnerability Dashboard...")
    
    results = load_latest_scan_results()
    report = generate_dashboard_report(results)
    
    print(report)
    
    if results and results.get('critical_vulnerabilities', 0) > 0:
        print("\n" + "=" * 50)
        print("‚ö†Ô∏è  CRITICAL VULNERABILITIES DETECTED!")
        print("   Immediate action recommended.")
        print("   Run: python3 github_vulnerability_manager.py --fix-critical")
        print("=" * 50)

if __name__ == "__main__":
    main()
